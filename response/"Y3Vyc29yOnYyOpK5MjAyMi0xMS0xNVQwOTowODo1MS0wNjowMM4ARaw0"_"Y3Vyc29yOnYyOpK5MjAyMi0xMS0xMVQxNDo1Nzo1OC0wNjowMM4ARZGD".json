{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0xMS0xMVQxNDo1Nzo1OC0wNjowMM4ARZGD"
    },
    "edges": [
      {
        "node": {
          "title": "petsc_options_iname and petsc_options_value",
          "author": {
            "login": "wowodejiajia"
          },
          "bodyText": "Dear MOOSE experts,\nI saw them in other programs\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n\nand\n  petsc_options_iname = '-pc_type -ksp_grmres_restart -sub_ksp_type\n                         -sub_pc_type -pc_asm_overlap'\n  petsc_options_value = 'asm      121                  preonly\n                         lu          8'\n\nI wrote a new input, but I don't know how to write them. Is there a detailed introduction to the above petsc_options_iname and petsc_options_value?\nThank you.",
          "url": "https://github.com/idaholab/moose/discussions/22704",
          "updatedAt": "2022-11-15T09:26:30Z",
          "publishedAt": "2022-11-15T04:50:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\npetsc_options_iname / value are options that get passed to petsc. They map to petsc options directly so the relevant documentation is the PETSc manual\nhttps://petsc.org/release/docs/manual/\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22704#discussioncomment-4144416",
                  "updatedAt": "2022-11-15T09:12:30Z",
                  "publishedAt": "2022-11-15T09:12:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wowodejiajia"
                          },
                          "bodyText": "I'll see it. Thank you very much",
                          "url": "https://github.com/idaholab/moose/discussions/22704#discussioncomment-4144540",
                          "updatedAt": "2022-11-15T09:26:30Z",
                          "publishedAt": "2022-11-15T09:26:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A problem about exodus",
          "author": {
            "login": "wowodejiajia"
          },
          "bodyText": "Dear MOOSE experts,,\n[Outputs]\n  exodus = flase\n  csv = true\n  execute_on = 'TIMESTEP_END'\n  [./other]\n     type = Exodus\n     interval = 50\n  [../]\n[]\n\nThe .e documentse of each step is too big, so I only want to record 50 steps once. If I put exodus = flase, I will report an error.",
          "url": "https://github.com/idaholab/moose/discussions/22701",
          "updatedAt": "2022-11-15T09:25:28Z",
          "publishedAt": "2022-11-15T04:18:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou dont need to specify both exodus = true/false and the [other] block of an exodus type.\nThe syntaxes are not meant to be combined (though they can), just create exodus blocks with the interval you need as you did\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22701#discussioncomment-4144402",
                  "updatedAt": "2022-11-15T09:10:30Z",
                  "publishedAt": "2022-11-15T09:10:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wowodejiajia"
                          },
                          "bodyText": "I see. Thank you very much",
                          "url": "https://github.com/idaholab/moose/discussions/22701#discussioncomment-4144531",
                          "updatedAt": "2022-11-15T09:25:29Z",
                          "publishedAt": "2022-11-15T09:25:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "moose phase field",
          "author": {
            "login": "Adairle"
          },
          "bodyText": "Holle everyone\nExcuse me, the old phase field model program reported an error on the new server\nHow to solve\uff1f thanks",
          "url": "https://github.com/idaholab/moose/discussions/22666",
          "updatedAt": "2022-11-16T03:16:38Z",
          "publishedAt": "2022-11-11T07:37:36Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt's as the error message says, the program you are using is using deprecated constructs and can no longer build.\nSee this post for more details\nhttps://mooseframework.inl.gov/newsletter/2021_11.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4118088",
                  "updatedAt": "2022-11-11T14:25:37Z",
                  "publishedAt": "2022-11-11T14:25:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Adairle"
                          },
                          "bodyText": "Thank you for your help. I'll operate it now",
                          "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4132823",
                          "updatedAt": "2023-06-05T14:43:10Z",
                          "publishedAt": "2022-11-14T07:45:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Adairle"
                          },
                          "bodyText": "Hello\nHow can the source file and header file of the old version apply to the new version of moose\uff1f\nOr is there any way to download the old version of Moose?\nthanks\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4142241",
                          "updatedAt": "2023-06-05T14:43:10Z",
                          "publishedAt": "2022-11-15T02:08:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You need to remove the old validParams logic and use the new syntax, as the newsletter says",
                          "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4144380",
                          "updatedAt": "2022-11-15T09:07:42Z",
                          "publishedAt": "2022-11-15T09:07:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We would rather you update the app you are using (which one is it?) than use an old version of MOOSE",
                          "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4144381",
                          "updatedAt": "2022-11-15T09:08:11Z",
                          "publishedAt": "2022-11-15T09:08:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Adairle"
                          },
                          "bodyText": "The latest system in use today\nThanks again for your reply\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/22666#discussioncomment-4144429",
                          "updatedAt": "2023-06-05T14:43:10Z",
                          "publishedAt": "2022-11-15T09:14:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MooseMesh::getBoundariesToElems is deprecated",
          "author": {
            "login": "aiskhak"
          },
          "bodyText": "Hello,\nI am using FV Navier-Stokes kernels. The solver seems to work fine, but I am getting the warning:\n*** Warning, This code is deprecated and will be removed in future versions:\nMooseMesh::getBoundariesToElems is deprecated, use MooseMesh::getBoundariesToActiveSemiLocalElemIds\n\nand following info:\nStack frames: 27\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<ConsoleStream const, char const (&) [100]>(ConsoleStream const&, bool, char const (&) [100])\n2: MooseMesh::getBoundariesToElems() const\n3: WallDistanceMixingLengthAux::computeValue()\n4: AuxKernelTempl<double>::compute()\n5: ComputeElemAuxVarsThread<AuxKernelTempl<double> >::onElement(libMesh::Elem const*)\n6: ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n7: void libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeElemAuxVarsThread<AuxKernelTempl<double> > >(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, ComputeElemAuxVarsThread<AuxKernelTempl<double> >&)\n8: void AuxiliarySystem::computeElementalVarsHelper<AuxKernelTempl<double> >(MooseObjectWarehouse<AuxKernelTempl<double> > const&, std::vector<std::vector<MooseVariableFieldBase*, std::allocator<MooseVariableFieldBase*> >, std::allocator<std::vector<MooseVariableFieldBase*, std::allocator<MooseVariableFieldBase*> > > > const&)\n9: AuxiliarySystem::computeElementalVars(MooseEnumItem)\n10: AuxiliarySystem::compute(MooseEnumItem)\n11: FEProblemBase::computeResidualTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n12: FEProblemBase::computeResidualInternal(libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n13: FEProblemBase::computeResidualSys(libMesh::NonlinearImplicitSystem&, libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&)\n14: NonlinearSystem::solve()\n15: FEProblemBase::solve(unsigned int)\n16: FEProblemSolve::solve()\n17: FixedPointSolve::solveStep(double&, double&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> > const&)\n18: FixedPointSolve::solve()\n19: TimeStepper::step()\n20: Transient::takeStep(double)\n21: Transient::execute()\n22: MooseApp::executeExecutioner()\n23: MooseApp::run()\n24: main\n25: __libc_start_main\n26: ./fv_app-opt(+0x350a) [0x55c0bec2350a]\n\nwhat does it mean how to fix this?",
          "url": "https://github.com/idaholab/moose/discussions/22688",
          "updatedAt": "2022-12-10T07:35:35Z",
          "publishedAt": "2022-11-14T17:45:49Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe should fix this soon.\nPlease ignore it for now\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22688#discussioncomment-4139358",
                  "updatedAt": "2022-11-14T17:47:41Z",
                  "publishedAt": "2022-11-14T17:47:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to improve the convergence of CZM ?",
          "author": {
            "login": "echo1115"
          },
          "bodyText": "Hi all,\nWhen I simulating a thermal-mechanical case with CZM model, it became difficult to converge after softening onset (damage>0). According to https://mooseframework.inl.gov/source/materials/cohesive_zone_model/BiLinearMixedModeTraction.html#Camanho2002,\nIt seems the parameter viscosity  can help, but I don't know its value range and how to set it appropriate according to specific case.\nHere is my czm setting:\n  [czm]\n    type = BiLinearMixedModeTraction\n    boundary = 'Block5_matrix'\n    penalty_stiffness = 1.0e15 \n    GI_c = 25 \n    GII_c = 25 \n    normal_strength = 100e6\n    shear_strength = 240e6\n    eta = 1 \n    viscosity = 1 \n    mixed_mode_criterion = POWER_LAW #BK\n  []\n\nMaybe someone could give me suggestions. Thanks in advance.",
          "url": "https://github.com/idaholab/moose/discussions/22683",
          "updatedAt": "2022-11-14T14:14:09Z",
          "publishedAt": "2022-11-13T12:51:41Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Yeah, the convergence issue is common to all softening models. Typical ways of dealing with this include\n\nalternating minimization.\nlagging the state variables.\nnonlinear preconditioner.\n\nYou can set up 1 using fixed point iterations.\nOption 2 is recommended for CZM, where you would set lag_mode_mixity = true and lag_displacement_jump = true.\nOption 3 is not yet available in MOOSE, but it is on the roadmap.",
                  "url": "https://github.com/idaholab/moose/discussions/22683#discussioncomment-4128630",
                  "updatedAt": "2022-11-13T14:57:57Z",
                  "publishedAt": "2022-11-13T14:57:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "echo1115"
                          },
                          "bodyText": "@hugary1995 Thanks for your useful suggestions!",
                          "url": "https://github.com/idaholab/moose/discussions/22683#discussioncomment-4137106",
                          "updatedAt": "2022-11-14T14:13:47Z",
                          "publishedAt": "2022-11-14T14:13:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question regarding interface kernels",
          "author": {
            "login": "souravmat-git"
          },
          "bodyText": "Hello,\nI have a question regarding interface kernels. I am trying to implement the interfacial conditions, Eqs. (3) and (4), in MOOSE (please refer to the following schematic):\n\nHere $\\phi^{\\theta}$, $\\sigma^{\\theta}$, and $i^{\\theta}$ refer to the electric potential, conductivity and current in the bulk domains $\\theta = \\alpha, \\beta$. Eq. (3) ensures the current continuity, and Eq. (4) gives the interfacial current.\nFurther, I think these conditions are similar to the ElectrostaticContactCondition, which is already in MOOSE. I found an example input file, contact_conductance_calculated.i, based on this kernel.\nHowever, my question is regarding the part of the code that ensures these conditions. Specifically,\nswitch (type)\n  {\n    case Moose::Element:\n      res = -contact_conductance * (_neighbor_value[_qp] - _u[_qp]) * _test[_i][_qp];\n      break;\n\n    case Moose::Neighbor:\n      res = _conductivity_primary[_qp] * _grad_u[_qp] * _normals[_qp] * _test_neighbor[_i][_qp];\n      break;\n  }\n\nI am unsure how this code ensures current continuity, i.e. Eq. (3).\nI found a similar GitHub discussion concerning this Interface kernel with coupled variable. In this case, however, the residuals are implemented differently despite having similar interfacial conditions.\nAre these implementations equivalent, or am I missing something?\nI welcome clarifications/suggestions regarding this.\nThanks,\nSourav",
          "url": "https://github.com/idaholab/moose/discussions/22680",
          "updatedAt": "2022-11-13T19:03:50Z",
          "publishedAt": "2022-11-11T22:43:24Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Yes, this ensures current continuity weakly.",
                  "url": "https://github.com/idaholab/moose/discussions/22680#discussioncomment-4121414",
                  "updatedAt": "2022-11-12T00:37:48Z",
                  "publishedAt": "2022-11-12T00:37:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "souravmat-git"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22680#discussioncomment-4129714",
                          "updatedAt": "2022-11-13T19:03:50Z",
                          "publishedAt": "2022-11-13T19:03:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Help with checking one modified cystal plasticity program",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Dear Moose experts or users,\nI am trying to achieve the constitute model mentioned in section 4 of the literature [1] and section 2 of the literature [2] in Moose. I did some modifications in CrystalPlasticityStressUpdateBase.h, CrystalPlasticityStressUpdateBase.c, CrystalPlasticityKalidindiUpdate.h and CrystalPlasticityKalidindiUpdate.c. Specific changes are described below. All codes are here https://github.com/xchengood/Nonschmid. Could anyone go to look through it and help me check that? The test file that I used is update_method_test.i. Thank you.\n(1) In CrystalPlasticityStressUpdateBase.h https://github.com/xchengood/Nonschmid/blob/main/CrystalPlasticityStressUpdateBase.h\nThe resolved shear stress in equation 3 in Literature [2] is calculated by taking the non-Schmid effect into consideration. So there are some modifications in line 93 and line 234.\n(2) In CrystalPlasticityStressUpdateBase.c https://github.com/xchengood/Nonschmid/blob/main/CrystalPlasticityStressUpdateBase.C\nModifications in line 107, line 126, line 130, line 371, line 413 - line 460, line 471, and line 483.\nline 413 - 460 is to achieve equation (4) in literature [2].\n(3) In CrystalPlasticityKalidindiUpdate.h https://github.com/xchengood/Nonschmid/blob/main/CrystalPlasticityKalidindiUpdate.h\nModifications in lines 101 - 106 express variables in equations (7) - (11) in literature [1].\n(4) In CrystalPlasticityKalidindiUpdate.c https://github.com/xchengood/Nonschmid/blob/main/CrystalPlasticityKalidindiUpdate.C\nModifications are in lines 28 - 33, line3 54 - 59, line 117, line 185 - line 198.\nline 117 is to achieve equation (10) in literature [1].\nline 185 - line 198 is to achieve dslip_dtau.\n[1]Yalcinkaya T, Brekelmans WA, Geers MG. BCC single crystal plasticity modeling and its experimental identification. Modelling and Simulation in Materials Science and Engineering. 2008 Oct 1;16(8):085007.\n[2]Lim H, Hale LM, Zimmerman JA, Battaile CC, Weinberger CR. A multi-scale model of dislocation plasticity in \u03b1-Fe: Incorporating temperature, strain rate and non-Schmid effects. International Journal of Plasticity. 2015 Oct 1;73:100-18.",
          "url": "https://github.com/idaholab/moose/discussions/22665",
          "updatedAt": "2023-01-03T23:10:25Z",
          "publishedAt": "2022-11-11T03:56:12Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You can set up a single element test to probe the flow curve, and compare it with the curves reported in the papers. If there is any discrepancy, feel free to post your comparisons here and hopefully someone can help you diagnose that.",
                  "url": "https://github.com/idaholab/moose/discussions/22665#discussioncomment-4121453",
                  "updatedAt": "2022-11-12T00:51:37Z",
                  "publishedAt": "2022-11-12T00:51:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error about \"PETSC LAPACK syev routine returned error code 2\"",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Hi Moose experts or users,\nI got the following errors. Any ideas to solve that? Thank you",
          "url": "https://github.com/idaholab/moose/discussions/22641",
          "updatedAt": "2023-01-03T23:18:43Z",
          "publishedAt": "2022-11-09T17:50:57Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you please attach the full simulation log?\nAlso do you know which tensor that was? If you could paste it here that could help\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22641#discussioncomment-4099784",
                  "updatedAt": "2022-11-09T18:03:04Z",
                  "publishedAt": "2022-11-09T18:03:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Here is the error log. I have no any ideas about which tensor that was. Thank you.\nerror log.txt",
                          "url": "https://github.com/idaholab/moose/discussions/22641#discussioncomment-4101026",
                          "updatedAt": "2022-11-09T20:28:58Z",
                          "publishedAt": "2022-11-09T20:28:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@sapitts  could you please help with this",
                          "url": "https://github.com/idaholab/moose/discussions/22641#discussioncomment-4101219",
                          "updatedAt": "2022-11-09T21:06:05Z",
                          "publishedAt": "2022-11-09T20:53:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "This error comes from eigvalue decomposition of the right cauchy green strain, for the RU decomposition. You can go to the corresponding frame in a debugger, then print the failing tensor. Although unlikely, if lapack fails to find eigenvalues and eigenvectors of a well-conditioned symmetric r2t, we can attempt to fix that.",
                          "url": "https://github.com/idaholab/moose/discussions/22641#discussioncomment-4121435",
                          "updatedAt": "2022-11-12T00:46:23Z",
                          "publishedAt": "2022-11-12T00:45:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "a question in 3D navier stokes",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Hello,\nI have a simple question when I look at your moose code regarding the velocity component.\nhttps://github.com/idaholab/moose/blob/next/modules/navier_stokes/src/kernels/NSMomentumInviscidFlux.C\nIn line 42 we have\n// For _component = k,\n// (rhou) * u_k = (rhou_k) * u <- we write it this way\nRealVectorValue vec(_u[_qp] * _u_vel[_qp],  // (U_k) * u_1\n_u[_qp] * _v_vel[_qp],  // (U_k) * u_2\n_u[_qp] * _w_vel[_qp]); // (U_k) * u_3\nand\nhttps://github.com/idaholab/moose/blob/next/modules/navier_stokes/src/kernels/NSEnergyInviscidFlux.C\nin line 40\n// velocity vector\nRealVectorValue vel(_u_vel[_qp], _v_vel[_qp], _w_vel[_qp]);\nI just wonder that in 3D geometry, should each component of velocity be defined as a vector? It looks to me that in the upper two examples in your code, the velocity component is just a real such that the vel(_u_vel[_qp], _v_vel[_qp], _w_vel[_qp]) is a vector.\nIt is a little bit confusing. Thank you for clarification.\nBest regards\nQia.",
          "url": "https://github.com/idaholab/moose/discussions/22650",
          "updatedAt": "2022-11-11T23:07:08Z",
          "publishedAt": "2022-11-10T17:34:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Oops-Qiao"
                  },
                  "bodyText": "@GiudGiud\nHello, :) There seems to be an interesting question.",
                  "url": "https://github.com/idaholab/moose/discussions/22650#discussioncomment-4120975",
                  "updatedAt": "2022-11-11T23:00:40Z",
                  "publishedAt": "2022-11-11T23:00:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no each component is not a vector.\nWhat you are seeing is a momentum flux so you have u * u terms",
                          "url": "https://github.com/idaholab/moose/discussions/22650#discussioncomment-4120990",
                          "updatedAt": "2022-11-11T23:03:43Z",
                          "publishedAt": "2022-11-11T23:03:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Thank you so much.",
                          "url": "https://github.com/idaholab/moose/discussions/22650#discussioncomment-4121005",
                          "updatedAt": "2022-11-11T23:07:09Z",
                          "publishedAt": "2022-11-11T23:07:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Meaning of different execute_on parameters",
          "author": {
            "login": "js-jixu"
          },
          "bodyText": "Hi, experts.\nMany objects have the parameter execute_on, and execute_on also has many options. Some options have obvious meanings, such as TIMESTEP_END. But I also have doubts about some options.\n\n\nI guess LINEAR and NONLINEAR stand for executing the object on linear and non-linear iterations respectively. Is my guess right?\n\n\nDoes ALWAYS mean that object is always executed in the steady or transient simulation? That sounds unlikely.\n\n\nHow is CUSTOM used? It looks like CUSTOM needs some other parameters to help.",
          "url": "https://github.com/idaholab/moose/discussions/22667",
          "updatedAt": "2022-11-11T20:57:58Z",
          "publishedAt": "2022-11-11T14:50:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Detailed information here: https://mooseframework.inl.gov/moose/source/interfaces/SetupInterface.html\nThe only ones not so intuitive are LINEAR and NONLINEAR, they actually mean RESIDUAL and JACOBIAN, resp.",
                  "url": "https://github.com/idaholab/moose/discussions/22667#discussioncomment-4118369",
                  "updatedAt": "2022-11-11T14:57:18Z",
                  "publishedAt": "2022-11-11T14:57:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "CUSTOM is on its way out because apps can now register additional execute_on flags\n#22124",
                          "url": "https://github.com/idaholab/moose/discussions/22667#discussioncomment-4118407",
                          "updatedAt": "2022-11-11T15:02:32Z",
                          "publishedAt": "2022-11-11T15:02:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "Thank you for replies! I'm reading those.",
                          "url": "https://github.com/idaholab/moose/discussions/22667#discussioncomment-4118459",
                          "updatedAt": "2022-11-11T15:07:52Z",
                          "publishedAt": "2022-11-11T15:07:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Just to confirm. When using multiapp and TIMESTEP_BEGIN, an object will be called every fixed point iteration within a timestep if they have a TIMESTEP_BEGIN flag active?",
                          "url": "https://github.com/idaholab/moose/discussions/22667#discussioncomment-4120518",
                          "updatedAt": "2022-11-11T20:57:59Z",
                          "publishedAt": "2022-11-11T20:57:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}