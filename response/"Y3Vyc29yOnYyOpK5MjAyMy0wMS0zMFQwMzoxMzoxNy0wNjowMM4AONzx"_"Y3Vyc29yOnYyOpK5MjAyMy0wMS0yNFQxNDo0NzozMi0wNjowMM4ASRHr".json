{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMS0yNFQxNDo0NzozMi0wNjowMM4ASRHr"
    },
    "edges": [
      {
        "node": {
          "title": "Converting vel_x and vel_u to vel",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello,\nIn Navier-Stokes module, because of the way that the kernels are developed, I need to solve for vel_x (velocity in x direction) and vel_y (velocity in y direction) separately (not defining the velocity variable as a vector).\nBut in a part of my input file, I need to use a kernel which requires me to have velocity as a vector. My question is that how can I define a new variable and convert vel_x and vel_y to a 2D vector called vel?\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/23271",
          "updatedAt": "2023-02-04T06:51:36Z",
          "publishedAt": "2023-01-30T00:01:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI m afraid you can't do that. While you could form a vector auxiliary variable using the component nonlinear variables, you cant use a kernel on that, kernels require nonlinear variables.\nThe solution here is to re-write the kernel to accept component variables\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23271#discussioncomment-4813763",
                  "updatedAt": "2023-01-30T01:33:14Z",
                  "publishedAt": "2023-01-30T01:33:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "initQpStatefulProperties() setting",
          "author": {
            "login": "Joseph-0123"
          },
          "bodyText": "Dear all,\nI have a question about the Stateful Material Properties. I need to define the Stateful Material Properties _n1 and _n2.\nSee below \uff1a\n_n1 is defined as the  _ind[_qp] multiplying coupledValue _s[_qp]. _ind[_qp] is the function of temperature _T[_qp]. The initial value of _n2 is 0.\nAre the following initQpStatefulProperties correct or not?\nvoid\nMaterial::initQpStatefulProperties()\n{\n  if (_T[_qp] < 1) {\n    _ind[_qp] = 1.0;\n  }\n  else {\n    _ind[_qp] = 0.0;\n  }\n\n  _n1[_qp] = _ind[_qp] * _s[_qp];\n  _n2[_qp] = 0.0;\n}\n\nJ",
          "url": "https://github.com/idaholab/moose/discussions/23263",
          "updatedAt": "2023-02-04T16:00:10Z",
          "publishedAt": "2023-01-26T23:13:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Joseph-0123"
                  },
                  "bodyText": "Hello @GiudGiud, could you please help me have a look at this?",
                  "url": "https://github.com/idaholab/moose/discussions/23263#discussioncomment-4792198",
                  "updatedAt": "2023-01-26T23:14:07Z",
                  "publishedAt": "2023-01-26T23:14:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This seems right, depending on the definition that _ind should have which you did not explain.\nHowever it's not the whole picture, this is just the initialization. You need to have a computeQpPoperties still\nMore on stateful properties\nhttps://mooseframework.inl.gov/syntax/Materials/#f5ffdc6c-3cc9-4a43-bbfd-566e34905cf3",
                          "url": "https://github.com/idaholab/moose/discussions/23263#discussioncomment-4793741",
                          "updatedAt": "2023-01-27T05:15:38Z",
                          "publishedAt": "2023-01-27T05:15:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "This seems right, depending on the definition that _ind should have which you did not explain.\nHowever it's not the whole picture, this is just the initialization. You need to have a computeQpPoperties still More on stateful properties https://mooseframework.inl.gov/syntax/Materials/#f5ffdc6c-3cc9-4a43-bbfd-566e34905cf3\n\nThanks for your answers, GiudGiud. I have another simple question:\nin the computeQpJacobian of  TimeDerivative kernel: could 'du_dot_du' be replaced by '_phi[_j][_qp] * 1/dt' since the du_dot_du = d[(u-u_old)/dt]/du = _phi[_j][_qp] * 1/dt",
                          "url": "https://github.com/idaholab/moose/discussions/23263#discussioncomment-4795360",
                          "updatedAt": "2023-01-27T10:04:05Z",
                          "publishedAt": "2023-01-27T10:04:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not if you want to use other more complicated time integration schemes.\nIn general you want to use the dot routines to get XX_dot terms, they make sure the time derivative expression is the one consistent with the time integration scheme",
                          "url": "https://github.com/idaholab/moose/discussions/23263#discussioncomment-4799587",
                          "updatedAt": "2023-01-27T18:07:18Z",
                          "publishedAt": "2023-01-27T18:07:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "not if you want to use other more complicated time integration schemes. In general you want to use the dot routines to get XX_dot terms, they make sure the time derivative expression is the one consistent with the time integration scheme\n\nThanks a lot.",
                          "url": "https://github.com/idaholab/moose/discussions/23263#discussioncomment-4812268",
                          "updatedAt": "2023-01-29T20:07:42Z",
                          "publishedAt": "2023-01-29T20:07:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to Output the Value of Residual and Jacobian Terms at Each Time Step",
          "author": {
            "login": "FanZhangchen"
          },
          "bodyText": "Hi All,\nI have a question about the ComputeQpResidual and ComputeQpJacobian in the KernelValue. Is it similar to the AMATRX and RHS of UEL in Abaqus? If yes, how can I obtain the value of the Residual term (RHS) and Jacobian term (AMATRX) since I want to compare their value at each time step in MOOSE and Abaqus to compare the numerical differences of the matrix?\nThank you and Best wishes,\nzc",
          "url": "https://github.com/idaholab/moose/discussions/23266",
          "updatedAt": "2023-02-04T15:59:52Z",
          "publishedAt": "2023-01-27T03:10:45Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to use the matrix and vector tag capabilities (see the parameters on each kernel), then output them using the TagVector/MatrixAux\nhttps://mooseframework.inl.gov/framework_development/tagging.html\nhttps://mooseframework.inl.gov/source/auxkernels/TagVectorAux.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23266#discussioncomment-4793654",
                  "updatedAt": "2023-01-27T05:02:19Z",
                  "publishedAt": "2023-01-27T05:02:18Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Be aware that TagMatrixAux only outputs the diagonal entries. I'd recommend using petsc printing routines instead. Refer to the petsc manual please.",
                          "url": "https://github.com/idaholab/moose/discussions/23266#discussioncomment-4801951",
                          "updatedAt": "2023-01-28T01:53:30Z",
                          "publishedAt": "2023-01-28T01:53:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Thanks for both of your advice. I will try them all.",
                          "url": "https://github.com/idaholab/moose/discussions/23266#discussioncomment-4802262",
                          "updatedAt": "2023-01-28T03:47:39Z",
                          "publishedAt": "2023-01-28T03:47:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Adding custom kernel to Navier-Stokes module",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello,\nI developed a custom kernel myself. Is there any way that during compilation this can be added to navier_stokes-opt, so it can be compiled with other kernels? For example, I added the .h and .c file of my custom kernel to Navier-stokes module and it did not work (include/kernels and src/kernels folders). What is the correct means of adding our custom kernels to existing MOOSE kernels and compile everything together?\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/23270",
          "updatedAt": "2023-02-04T15:59:46Z",
          "publishedAt": "2023-01-28T02:34:37Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "#23254 (reply in thread)",
                  "url": "https://github.com/idaholab/moose/discussions/23270#discussioncomment-4802184",
                  "updatedAt": "2023-01-28T03:12:58Z",
                  "publishedAt": "2023-01-28T03:12:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Assigning separate block_ids to different domains from an imported mesh.",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nI have a mesh consisting of two domains (caprock and aquifer) that I imported using the FileMeshgenerator. I want to assign these domains to separate blocks\u2014for example, caprock on block 0 and aquifer on block 1, so that I can specify different material properties (e.g., porosity, permeability and capillary pressure) to these domains. I\u2019m, however, getting the following error when I run my simulation. Perhaps the way I assign the blocks is incorrect. Could anyone please help? I attached my input file. Thanks.\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nMaterial property 'PorousFlow_relative_permeability_nodal', requested by 'ad_flux_co2' is not defined on block aquifer_TRI3\nMaterial property 'dPorousFlow_relative_permeability_nodal_dvar', requested by 'ad_flux_co2' is not defined on block aquifer_TRI3\nMaterial property 'PorousFlow_relative_permeability_nodal', requested by 'ad_flux_water' is not defined on block aquifer_TRI3\nMaterial property 'dPorousFlow_relative_permeability_nodal_dvar', requested by 'ad_flux_water' is not defined on block aquifer_TRI3\nMaterial property 'PorousFlow_relative_permeability_nodal', requested by 'ad_flux_co2' is not defined on block caps_TRI3\nMaterial property 'dPorousFlow_relative_permeability_nodal_dvar', requested by 'ad_flux_co2' is not defined on block caps_TRI3\nMaterial property 'PorousFlow_relative_permeability_nodal', requested by 'ad_flux_water' is not defined on block caps_TRI3\nMaterial property 'dPorousFlow_relative_permeability_nodal_dvar', requested by 'ad_flux_water' is not defined on block caps_TRI3\n\n\n[Mesh]\n  [fgm]\n   type = FileMeshGenerator\n   file = cap_aquifer.inp    \n    block_id = '0 1'\n    block_name = 'caps aquifer'\n  []\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pwater pgas disp_x'\n    number_fluid_phases = 2\n    number_fluid_components = 2\n  []\n  [pc_aquifer]\n    type = PorousFlowCapillaryPressureVG\n    block_name = 'aquifer'\n    alpha = 1E-6\n    m = '0.8'\n  []\n  [pc_caps]\n    type = PorousFlowCapillaryPressureVG\n    block_name = caps\n    alpha = 1E-6\n    m = 0.5\n  []\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n  gravity = '0 0 0'\n  PorousFlowDictator = dictator\n[]\n\n  [FluidProperties]\n    [simple_fluid]\n      type = SimpleFluidProperties\n      bulk_modulus = 2E9\n      viscosity = 1.0E-3\n      density0 = 1000.0\n    []\n  []\n\n[Variables]\n  [pwater]\n    initial_condition = 20E6\n  []\n  [pgas]\n    initial_condition = 20.1E6\n  [] \n  [disp_x]\n    scaling = 1E-5\n  []\n []\n\n[AuxVariables]\n  [disp_y]\n  []\n  [effective_fluid_pressure]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [mass_frac_phase0_species0]\n    initial_condition = 1 # all water in phase=0\n  []\n  [mass_frac_phase1_species0]\n    initial_condition = 0 # no water in phase=1\n  []\n  [sgas]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [swater]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [porosity]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_xx]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_yy]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n[]\n\n[AuxKernels]\n  [effective_fluid_pressure]\n    type = ParsedAux\n    args = 'pwater pgas swater sgas'\n    function = 'pwater * swater + pgas * sgas'\n    variable = effective_fluid_pressure\n  []\n  [swater]\n    type = PorousFlowPropertyAux\n    variable = swater\n    property = saturation\n    phase = 0\n    execute_on = timestep_end\n  []\n  [sgas]\n    type = PorousFlowPropertyAux\n    variable = sgas\n    property = saturation\n    phase = 1\n    execute_on = timestep_end\n  []\n  [stress_xx]\n    type = RankTwoAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    index_i = 0\n    index_j = 0\n  []\n  [stress_yy]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_yy\n    index_i = 1\n    index_j = 1\n  []\n  [porosity]\n    type = PorousFlowPropertyAux\n    variable = porosity\n    property = porosity\n    execute_on = timestep_end\n  []\n[]\n\n[Kernels]\n  [mass_water_dot]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 0\n    variable = pwater\n  []\n  [ad_flux_water]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 0\n    use_displaced_mesh = false\n    variable = pwater\n  []\n  [dd_flux_water]\n    type = PorousFlowDispersiveFlux\n    fluid_component = 0\n    disp_trans = '0 0'\n    disp_long = '0 0'\n    use_displaced_mesh = false\n    variable = pwater\n  []\n  [vol_strain_rate_water]\n    type = PorousFlowMassVolumetricExpansion\n    fluid_component = 0\n    variable = pwater\n  []\n  [mass_co2_dot]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 1\n    variable = pgas\n  []\n  [ad_flux_co2]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 1\n    use_displaced_mesh = false\n    variable = pgas\n  []\n   [dd_flux_c02]\n    type = PorousFlowDispersiveFlux\n    disp_trans = '0 0'\n    disp_long = '0 0'\n    fluid_component = 1\n    use_displaced_mesh = false\n    variable = pgas\n  []\n  [vol_strain_rate_co2]\n    type = PorousFlowMassVolumetricExpansion\n    fluid_component = 1\n    variable = pgas\n  []\n\n    [grad_stress_x]\n    type = StressDivergenceRZTensors\n    variable = disp_x\n    use_displaced_mesh = false\n    component = 0\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = 293\n  []\n  [saturation_calculator_caps]\n    type = PorousFlow2PhasePP\n    block_name = caps\n    phase0_porepressure = pwater\n    phase1_porepressure = pgas\n    capillary_pressure = pc_caps\n  []\n  [saturation_calculator_aquifer]\n    type = PorousFlow2PhasePP\n    block_name = aquifer\n    phase0_porepressure = pwater\n    phase1_porepressure = pgas\n    capillary_pressure = pc_aquifer\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n    mass_fraction_vars = 'mass_frac_phase0_species0 mass_frac_phase1_species0'\n  []\n\n  [caps_porosity]\n    type = PorousFlowPorosityConst\n    block_name = caps\n    porosity = 0.01\n  []\n  [caps_permeability]\n    type = PorousFlowPermeabilityConst\n    block_name = caps\n    permeability = '1e-16 0 0    0 1e-16 0    0 0 1e-16'\n  []\n  [caps_relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    block_name = caps\n    n = 6\n    phase = 0\n  []\n  [caps_relperm_co2]\n    type = PorousFlowRelativePermeabilityCorey\n    block_name = caps\n    n = 6\n    phase = 1\n  []\n\n  [aquifer_porosity]\n    type = PorousFlowPorosityConst\n    block_name = aquifer\n    porosity = 0.1\n  []\n  [aquifer_permeability]\n    type = PorousFlowPermeabilityConst\n    block_name = aquifer\n    permeability = '1e-13 0 0    0 1e-13 0    0 0 1e-13'\n  []\n  [aquifer_relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    block_name = aquifer\n    n = 3\n    phase = 0\n  []\n  [aquifer_relperm_co2]\n    type = PorousFlowRelativePermeabilityCorey\n    block_name = aquifer\n    n = 3\n    phase = 1\n  []\n\n  [EOS_water]\n    type = PorousFlowSingleComponentFluid\n    fp = simple_fluid\n   phase = 0\n  []\n  [EOS_co2]\n    type = PorousFlowSingleComponentFluid\n    fp = simple_fluid\n   phase = 1\n  []\n  \n  [diffusivity]\n    type = PorousFlowDiffusivityConst\n    diffusion_coeff = '2e-9 2e-9 2e-9 2e-9'\n    tortuosity = '1 1'\n  []\n  \n  [volumetric_strain]\n    type = PorousFlowVolumetricStrain\n  []\n\n   [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 5E9\n    poissons_ratio = 0.0\n  []\n  [strain]\n    type = ComputeAxisymmetricRZSmallStrain\n    eigenstrain_names = 'initial_stress'\n  []\n  [initial_strain]\n    type = ComputeEigenstrainFromInitialStress\n    initial_stress = '0 0 0  0 0 0  0 0 0'\n    eigenstrain_name = initial_stress\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[BCs]\n  [pinned_top_bottom_x]\n    type = DirichletBC\n    variable = disp_x\n    value = 0\n    boundary = 'top bottom'\n  []\n  [cavity_pressure_x]\n    type = Pressure\n    boundary = inlet_aquifer\n    variable = disp_x\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n    use_displaced_mesh = false\n  []\n  [constant_co2_injection]\n    type = PorousFlowSink\n    boundary = inlet_aquifer\n    variable = pgas\n    fluid_phase = 1\n    flux_function = -1E-4\n    use_displaced_mesh = false\n  []\n\n  [outer_water_removal]\n    type = PorousFlowPiecewiseLinearSink\n    boundary = outlet_aquifer\n    variable = pwater\n    fluid_phase = 0\n    pt_vals = '0 1E9'\n    multipliers = '0 1E8'\n    use_mobility = true\n    use_displaced_mesh = false\n  []\n  [outer_co2_removal]\n    type = PorousFlowPiecewiseLinearSink\n    boundary = outlet_aquifer\n    variable = pgas\n    fluid_phase = 1\n    pt_vals = '0 1E9'\n    multipliers = '0 1E8'\n    use_mobility = true\n    use_displaced_mesh = false\n  []\n[]\n\n[Postprocessors]\n  [porosity]\n    type = PointValue\n    variable = porosity\n    point = '1 0 0'\n    execute_on = timestep_end\n  []\n   [pwater]\n    type = PointValue\n    variable = pwater\n    point = '1 0 0'\n    execute_on = timestep_end\n  []\n  [effective_fluid_pressure_at_wellbore]\n    type = PointValue\n    variable = effective_fluid_pressure\n    point = '1 0 0'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n  [constrained_effective_fluid_pressure_at_wellbore]\n    type = FunctionValuePostprocessor\n    function = constrain_effective_fluid_pressure\n    execute_on = timestep_begin\n  []\n[]\n\n[Functions]\n  [constrain_effective_fluid_pressure]\n    type = ParsedFunction\n    vars = effective_fluid_pressure_at_wellbore\n    vals = effective_fluid_pressure_at_wellbore\n    value = 'max(effective_fluid_pressure_at_wellbore, 20E6)'\n  []\n[]\n\n[Preconditioning]\n  active = basic\n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  end_time = 1E3\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1E3\n    growth_factor = 1.2\n    optimal_iterations = 10\n  []\n  nl_abs_tol = 1E-7\n[]\n\n[Outputs]\n  exodus = true\n  [csv]\n  type = CSV\n  execute_on = 'initial timestep_end'\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23269",
          "updatedAt": "2023-01-28T02:03:41Z",
          "publishedAt": "2023-01-27T22:10:07Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "batodon"
                  },
                  "bodyText": "Please, ignore this ticket. The input file is now working after I changed the extension of the imported mesh file from .inp to .msh. Thanks.",
                  "url": "https://github.com/idaholab/moose/discussions/23269#discussioncomment-4801986",
                  "updatedAt": "2023-01-28T02:03:34Z",
                  "publishedAt": "2023-01-28T02:03:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Why do scalar variables have components?",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "What are these used for? Are they different degrees of freedom? How is it different from a vector variable?",
          "url": "https://github.com/idaholab/moose/discussions/23264",
          "updatedAt": "2023-02-04T06:53:01Z",
          "publishedAt": "2023-01-26T23:45:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nScalar variables live in a single global location. There are two main differences:\n\nvector variables are currently fields, they have Qp spatially, while scalar variables have only a single value\nvector variables have 3 components (libmesh_dim really), while the scalar variables can have as many components as desired\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23264#discussioncomment-4793674",
                  "updatedAt": "2023-01-27T05:07:40Z",
                  "publishedAt": "2023-01-27T05:07:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "wrt to what they are used for, you ll have to imagine a problem with global variables that all have the same equation roughly",
                          "url": "https://github.com/idaholab/moose/discussions/23264#discussioncomment-4793734",
                          "updatedAt": "2023-01-27T05:13:23Z",
                          "publishedAt": "2023-01-27T05:13:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "So if I want to have multiple scalar variables, do I just define just one in my input file and use different components with different scalar kernels? Or can I define multiple scalar variables and use the 0'th component on each?",
                          "url": "https://github.com/idaholab/moose/discussions/23264#discussioncomment-4796820",
                          "updatedAt": "2023-01-27T13:04:21Z",
                          "publishedAt": "2023-01-27T13:04:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it depends if the equations are very similar.\nIf you can write the equations in an \"array\" form, then it s really worth it to use scalar array variables.\nIf not then just use several scalar variables",
                          "url": "https://github.com/idaholab/moose/discussions/23264#discussioncomment-4799558",
                          "updatedAt": "2023-01-27T18:03:22Z",
                          "publishedAt": "2023-01-27T18:03:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to set periodic BC?",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nDo you know how I can set the upper layer and bottom layer's boundary condition as periodic BC?\nThank you,\nBest",
          "url": "https://github.com/idaholab/moose/discussions/23261",
          "updatedAt": "2023-02-04T06:44:53Z",
          "publishedAt": "2023-01-26T20:21:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "abc-hy"
                  },
                  "bodyText": "I mean, the upper boundary and bottom boundary",
                  "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4791314",
                  "updatedAt": "2023-01-26T20:42:26Z",
                  "publishedAt": "2023-01-26T20:42:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There s a periodic BC object you can try.\nas long as the surfaces are well aligned it will work",
                          "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4791698",
                          "updatedAt": "2023-01-26T21:39:44Z",
                          "publishedAt": "2023-01-26T21:39:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "I tried, there is no PeriodicBC object...Which object do you refer to?",
                          "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4791742",
                          "updatedAt": "2023-01-26T21:46:40Z",
                          "publishedAt": "2023-01-26T21:46:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You ll have to find the exact name in the source index",
                          "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4791940",
                          "updatedAt": "2023-01-26T22:21:44Z",
                          "publishedAt": "2023-01-26T22:21:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "@abc-hy  I normally use the auto_direction option to set periodic boundary conditions\nbetween the top and bottom boundaries, see an example here:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/test/tests/SandfeldZaiser2015/SandfeldLoop.i",
                  "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4792135",
                  "updatedAt": "2023-01-26T22:58:13Z",
                  "publishedAt": "2023-01-26T22:58:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Thank you for your reply.\nI want to set the BC of top and bottom boundary as periodic and remain the left and right as zero flux boundary condition.\nI wrote a command as below:\n\nIs this correct?",
                          "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4792576",
                          "updatedAt": "2023-01-27T00:32:30Z",
                          "publishedAt": "2023-01-27T00:32:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This should work as long as top & bottom match rigorously",
                          "url": "https://github.com/idaholab/moose/discussions/23261#discussioncomment-4793657",
                          "updatedAt": "2023-01-27T05:03:11Z",
                          "publishedAt": "2023-01-27T05:03:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "error building documentation",
          "author": {
            "login": "nlosacco"
          },
          "bodyText": "Hi all,\nI'm trying to build the html documentation for MOOSE on my computer (Mac OSX 12.4 Monterey). That would be very useful cause I'm working offline quite often.\nWhen I do it from the \"test\" directory:\ncd /home/user/projects/moose/test ./moosedocs.py build --destination [destination_dir]\nit works smoothly. But as far as I understand, in order to replicate the documentation of the actual MOOSE website I must run the command in the \"modules\" directory.\nWhen I do, I get:\nMooseDocs.extensions.appsyntax (MainProcess): Failed to locate a valid executable in ${MOOSE_DIR}/modules/combined.\nand then a lot of other errors about syntax not being found.\nWhat am I doing wrong?\nThanks for any help,\nN",
          "url": "https://github.com/idaholab/moose/discussions/23257",
          "updatedAt": "2023-01-26T20:48:03Z",
          "publishedAt": "2023-01-26T16:25:09Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "The script looks for combined-opt and couldn't find it. You need to compile combined-opt in modules/combined.",
                  "url": "https://github.com/idaholab/moose/discussions/23257#discussioncomment-4789432",
                  "updatedAt": "2023-01-26T16:36:02Z",
                  "publishedAt": "2023-01-26T16:36:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "You need to build moose/modules, and then run your moosedocs command from there. Like so:\ncd moose/modules\nmake -j 6\ncd doc\n./moosedocs.py build --destination <destination dir>",
                          "url": "https://github.com/idaholab/moose/discussions/23257#discussioncomment-4789528",
                          "updatedAt": "2023-01-26T16:47:19Z",
                          "publishedAt": "2023-01-26T16:47:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nlosacco"
                          },
                          "bodyText": "that's great, thank you.\nNow I wonder if it is possible to embed a local search engine, rather than the google driven one, which tries and connect to the web",
                          "url": "https://github.com/idaholab/moose/discussions/23257#discussioncomment-4791356",
                          "updatedAt": "2023-01-26T20:48:03Z",
                          "publishedAt": "2023-01-26T20:48:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Different Results in plasticity models",
          "author": {
            "login": "walden37"
          },
          "bodyText": "Hi,\nI have recently been having problems with a thermal mechanical simulation with plasticity. I have implemented plasticity in the old tensor mechanics system through use of the TemperatureDependentHardeningStressUpdate material and in the new system with the ComputeSimoHughesJ2PlasticityStress material.  The stresses and strains in the cube differ greatly (approximately ten orders of magnitude) for the two models, despite the eigenstrains almost matching.\nThe model set up is as follows:\nA cube of length 200mm made of titanium\nLeft face heated to a temperature of 2000K\nRight face heated to a temperature of 300K\nLeft face of the cubes displacement is fixed in x, y and z\nThe cube has an initial temperature and stress free reference temperature of 1100K\nThe stresses and strains are measured at:\nmeasurePoint0=5\nmeasurePoint1=12.5\nmeasurePoint2=25\nI have curve fit the PiecewiseLinear hardening functions to use for the Simo-Hughes model.\nI have attached the input files that produce the different results.\nI would expect the stresses and strains to approximately match. Could this be a misunderstanding of the Simo-Hughes plasticity model or possibly be a bug?\nMany Thanks\nSimoHughes.txt\nIsotropic.txt",
          "url": "https://github.com/idaholab/moose/discussions/23240",
          "updatedAt": "2023-02-04T06:53:11Z",
          "publishedAt": "2023-01-24T17:04:36Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Thanks for reporting. I'll look into this.",
                  "url": "https://github.com/idaholab/moose/discussions/23240#discussioncomment-4779459",
                  "updatedAt": "2023-01-25T16:36:51Z",
                  "publishedAt": "2023-01-25T16:36:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "OK, so I compared the two material models (one setup with the old system, the other with the new system) at two different temperatures (T = 300 & 2000). The parameters are the same as yours. I am testing it on a single-element cube, and I am not solving for the temperature -- the temperature remains homogeneous, hence the eigenstrain.\nSee the figure below. The stress magnitudes are the same.\n\nSo the conclusion is the material model with the same hardening function has similar performance, regardless of which TM system you use.\nThe difference you see in your problem is probably due to different localization phenomena in the old and the new systems, as the formulations are different. The old system uses hypoelasticity, whereas the specific Simo-Hughes material in the new system uses hyperelasticity. Again, there is no single answer as to which formulation is better.\nThe input files I used can be found on this branch: https://github.com/hugary1995/moose/tree/old_new_TM_isotropic_plasticity_comparison",
                          "url": "https://github.com/idaholab/moose/discussions/23240#discussioncomment-4779989",
                          "updatedAt": "2023-01-25T17:28:59Z",
                          "publishedAt": "2023-01-25T17:26:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "uhh, I see the problem here -- the Simo-Hughes material isn't accounting for the eigenstrain for some reason...",
                          "url": "https://github.com/idaholab/moose/discussions/23240#discussioncomment-4780037",
                          "updatedAt": "2023-01-25T17:30:24Z",
                          "publishedAt": "2023-01-25T17:30:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Converting this to an issue...",
                          "url": "https://github.com/idaholab/moose/discussions/23240#discussioncomment-4780075",
                          "updatedAt": "2023-01-25T17:34:38Z",
                          "publishedAt": "2023-01-25T17:34:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Here: #23245",
                          "url": "https://github.com/idaholab/moose/discussions/23240#discussioncomment-4780100",
                          "updatedAt": "2023-01-25T17:36:49Z",
                          "publishedAt": "2023-01-25T17:36:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FV boundary condition - not registered",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "Hi. I am testing some FV modeling. I am using a simple input file with only FVDirichlet and FVTimeKernel, and FVDirichletBC. Running the code throws an error right away: \"Task add_bc is not registered to build FVBoundaryCondition derived objects\" I am a little puzzled by this: are not all FV objects in the main trunk repo registered to be built in a standard moose build?\nThanks,\nOlle",
          "url": "https://github.com/idaholab/moose/discussions/23242",
          "updatedAt": "2023-02-04T06:43:54Z",
          "publishedAt": "2023-01-24T18:30:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt should not be in the [BCs] block, it should be in the [FVBCs] block\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23242#discussioncomment-4770533",
                  "updatedAt": "2023-01-24T20:23:47Z",
                  "publishedAt": "2023-01-24T20:23:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Hi Guillaume,\nHaha I should have guessed that. Should all relevant blocks (Kernels, AuxKernels,...) have the FV prefix?\nThanks,\nOlle",
                  "url": "https://github.com/idaholab/moose/discussions/23242#discussioncomment-4770581",
                  "updatedAt": "2023-01-24T20:29:16Z",
                  "publishedAt": "2023-01-24T20:29:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "FVKernels yes\nAuxKernels works though",
                          "url": "https://github.com/idaholab/moose/discussions/23242#discussioncomment-4770680",
                          "updatedAt": "2023-01-24T20:41:29Z",
                          "publishedAt": "2023-01-24T20:41:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "OK, thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23242#discussioncomment-4770710",
                          "updatedAt": "2023-01-24T20:47:32Z",
                          "publishedAt": "2023-01-24T20:47:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}