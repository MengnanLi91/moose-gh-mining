{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNC0wN1QxNzoxODowNS0wNTowMM4AO-xf"
    },
    "edges": [
      {
        "node": {
          "title": "Generate function call graphs with Doxygen",
          "author": {
            "login": "bielsnohr"
          },
          "bodyText": "I'm doing some investigation into MOOSE internal operation, and it would be helpful to generate call graphs for some of the functions that appear in main.C (or near the top of the execution order) of a MOOSE app (e.g. AppFactory::createSharedApp()). I've done this with other programs previously using Doxygen, which usually works out of the box, however it is not working for MOOSE.\nUnder the framework/ directory, I have attempted two things:\n\nTurn on individual call graphs by going to the comment strings for the relevant functions and inserting \\callgraph\nTurn on all call graphs with the CALL_GRAPH=YES option in the Doxyfile\n\nNeither yield any call graphs in the locally generated HTML documentation pages.\nThoughts and advice?",
          "url": "https://github.com/idaholab/moose/discussions/20763",
          "updatedAt": "2024-05-12T11:59:30Z",
          "publishedAt": "2022-04-11T16:13:08Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "bielsnohr"
                  },
                  "bodyText": "I was a bit hasty with this question. Setting CALL_GRAPH=YES in the Doxyfile did in fact generate call graphs. I believe I was initially looking at the incorrect portion of the documentation.",
                  "url": "https://github.com/idaholab/moose/discussions/20763#discussioncomment-2546237",
                  "updatedAt": "2024-05-12T11:59:30Z",
                  "publishedAt": "2022-04-11T16:42:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Trying to apply BC on a mesh generated by gmsh",
          "author": {
            "login": "AlexSacMorane"
          },
          "bodyText": "Dear all,\nI am a new user of Moose so I have a basic problem. Even if I have looked on the forum and on Moose documentation, my problem is staying here.\nI try to study a diffusive problem on a mesh generated by gmsh but I have the following error problem.\n*** ERROR ***\nTask init_mesh is not registered to build MeshGenerator derived objects\nMoreover, I have converted my .msh to a .vtu with meshio-convert and use this .vtu in my .i but I get a new error.\n=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES\n=   PID 24257 RUNNING AT ALEX-WORKING\n=   EXIT CODE: 11\n=   CLEANING UP REMAINING PROCESSES\n=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\nYOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application.\nPlease see the FAQ page for debugging suggestions\nI do not understand what happened here.\nI stay available, thank for all the help you can give me.\nYou will find in the attachments my .msh, .geo, .i\ntuto_gmsh_moose.zip",
          "url": "https://github.com/idaholab/moose/discussions/20740",
          "updatedAt": "2022-06-12T09:39:00Z",
          "publishedAt": "2022-04-07T23:33:04Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Task init_mesh is not registered to build MeshGenerator derived objects means you are missing enclosing brackets on a mesh generator.\nSo you have something like\n[Mesh]\n  type = FileMeshGenerator\n\ninstead of\n[Mesh]\n  [fmg]\n    type = FileMeshGenerator\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20740#discussioncomment-2527441",
                  "updatedAt": "2022-06-12T09:39:10Z",
                  "publishedAt": "2022-04-08T00:30:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AlexSacMorane"
                          },
                          "bodyText": "Thank it helps.\nI have changed a bit the simulation (I am now working on 2D). I have added the enclosing brackets. But I get again an error message.\n*** ERROR ***\nmap_find() error: key \"26\" not found in file ../src/mesh/gmsh_io.C on line 605\nYou will find in the attachments my .i .msh .geo\nTest_gmsh_moose.zip\nI stay available",
                          "url": "https://github.com/idaholab/moose/discussions/20740#discussioncomment-2531169",
                          "updatedAt": "2022-06-12T09:39:29Z",
                          "publishedAt": "2022-04-08T13:46:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nAnything special about this mesh? What kind of elements does it contain?\nI tried converting it to vtu to see what it looked like and I only saw an outer rectangular edge, no inside 2D elements?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/20740#discussioncomment-2545326",
                          "updatedAt": "2022-06-12T09:39:33Z",
                          "publishedAt": "2022-04-11T14:42:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AlexSacMorane"
                          },
                          "bodyText": "Hello,\nThank you for your answer. I have rechecked my .msh file. You are right the mesh has disappeared. I have exported the .msh again and it seems it is working at this time. I do not understand why on the first try nodes were not exported.\nRegards\nAlexandre",
                          "url": "https://github.com/idaholab/moose/discussions/20740#discussioncomment-2545771",
                          "updatedAt": "2022-06-15T14:11:27Z",
                          "publishedAt": "2022-04-11T15:36:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok great! Glad this works now",
                          "url": "https://github.com/idaholab/moose/discussions/20740#discussioncomment-2545788",
                          "updatedAt": "2022-10-06T06:08:16Z",
                          "publishedAt": "2022-04-11T15:39:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "use displaced_mesh in the DGKernels",
          "author": {
            "login": "xiaojbing"
          },
          "bodyText": "I use displacements = disp_x disp_y in the [Mesh] block, and I also want to use the use_displaced_mesh = true  in other block to update the coordinate in the equations. However, in the [DGKernels] ,if I don't write boundary = , and only write use_displaced_mesh = true in the block, it will be crashed; and If I write both the boundary = and  use_displaced_mesh = true ,it can run. but seems that the results does not make sense. Is there any way to solve this contradictory problem?",
          "url": "https://github.com/idaholab/moose/discussions/20746",
          "updatedAt": "2022-07-07T08:54:01Z",
          "publishedAt": "2022-04-08T11:27:02Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "linked to #20583",
                  "url": "https://github.com/idaholab/moose/discussions/20746#discussioncomment-2545503",
                  "updatedAt": "2022-07-07T08:54:10Z",
                  "publishedAt": "2022-04-11T14:59:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Time dependent Material Objects",
          "author": {
            "login": "makeclean"
          },
          "bodyText": "Hi All\nLooking at the documentation it seems that PiecewiseLinearInterpolationMaterials are aware of the standard variables, presumably x,y and z c.f. https://mooseframework.inl.gov/moose/source/materials/ADPiecewiseLinearInterpolationMaterial.html\n[Materials]\n  [./mat]\n    type = PiecewiseLinearInterpolationMaterial\n    property = matprop\n    variable = x\n    x = '0 1'\n    y = '0 10'\n    outputs = all\n  [../]\n[]\n\nWhen I try to u 't' as in a regular function for time, MOOSE complains that it can't find the variable. I've hacked it to do something like\n[AuxVariables]\n  [time]\n  []\n[]\n[AuxKernels]\n  [time]\n    type = FunctionAux\n    variable = time\n    function = 't'\n    execute_on = timestep_begin\n  []\n\nIs that the best/right way to allow time dependent material objects?",
          "url": "https://github.com/idaholab/moose/discussions/20760",
          "updatedAt": "2022-06-17T17:34:14Z",
          "publishedAt": "2022-04-11T14:40:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt depends how you want to provide this dependence. If you have a functional expression, I like to use ParsedMaterials, which can use t in the expression.\nThis material you are using uses a variable as its abscissa. This is a little overkill for time.\nAnother option is to use a function:\nwith https://mooseframework.inl.gov/moose/source/materials/GenericFunctionMaterial.html\nThis is similar to ParsedMaterials for simple time dependence, but the spatial dependence may be more complex with this form.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20760#discussioncomment-2545456",
                  "updatedAt": "2022-06-17T17:34:25Z",
                  "publishedAt": "2022-04-11T14:55:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "makeclean"
                  },
                  "bodyText": "I guess I was also trying to highlight, given my experience with functions, why 't' didn't just work - for consistency I would have expected it to.\nHowever, that gets me moving :) Thanks!",
                  "url": "https://github.com/idaholab/moose/discussions/20760#discussioncomment-2545481",
                  "updatedAt": "2022-06-17T17:34:24Z",
                  "publishedAt": "2022-04-11T14:57:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Changes flux sign after average concentration reaches certain value",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE Experts\nI am solving diffusion equation. I want to change the sign of the flux from positive to negative or negative to positive if the average concentration value in the postprocessor calculation reaches certain values.\nAlgorithm should be something like this\nlets say, initially the flux is -ve\n\nfor n number_of_cycles\nif average_concentration < a \n       flux = +ve\nelseif average_concentration > b\n       flux  = -ve\nend\nend\n\nPlease guide me how should I proceed to put the cycling effect in the code.\nThanks in advance\nBest\nAvtar",
          "url": "https://github.com/idaholab/moose/discussions/20731",
          "updatedAt": "2022-06-16T19:42:11Z",
          "publishedAt": "2022-04-07T03:48:17Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this the flux in the volume or at a boundary?\nEither way, you will want to work with a ParsedMaterial:\nhttps://mooseframework.inl.gov/source/materials/ParsedMaterial.html\nThe parsed expression will allow both if statements and using postprocessor values.\nIf you find that performance is not satisfactory then you can code that in a regular material as well, you can access postprocessor values from materials, and have the if statement in the material's computeQpProperties routine.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2520707",
                  "updatedAt": "2022-06-16T19:42:11Z",
                  "publishedAt": "2022-04-07T04:17:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hello Guillaume\nFlux is applied at the boundary.\nCan you please suggest any example in which if else condition is applied in Parsed Function?\n\"If you find that performance is not satisfactory then you can code that in a regular material as well, you can access postprocessor values from materials, and have the if statement in the material's computeQpProperties routine.\"\nIs there any example for this one as well?\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2523760",
                          "updatedAt": "2022-06-16T19:42:11Z",
                          "publishedAt": "2022-04-07T13:32:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Edit: I am applying flux as the boundary condition.\n[./flux_bc]\n   type = FunctionNeumannBC\n   variable = diffused\n   boundary = 'flux1'\n   function = FluxVal\n [../]\n\nCan I still use ParsedMaterial for this one?",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527425",
                          "updatedAt": "2022-06-16T19:42:11Z",
                          "publishedAt": "2022-04-08T00:24:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "FunctionNeumannBC works with functions, not material properties.\nSo you cant use parsed material but you can use ParsedFunction\nhttps://mooseframework.inl.gov/source/functions/MooseParsedFunction.html",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527463",
                          "updatedAt": "2022-06-16T19:42:12Z",
                          "publishedAt": "2022-04-08T00:35:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "here the function will be the entire flux, not just the diffusivity btw",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527465",
                          "updatedAt": "2022-09-12T12:50:32Z",
                          "publishedAt": "2022-04-08T00:35:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Thanks Guillaume\nCan you please explain the meaning of following if condition.\nExamples include 4e4+1e2*t, sqrt(x*x+y*y+z*z), and if(t<=1.0, 0.1*t, (1.0+0.1)*cos(pi/2*(t-1.0)) - 1.0). \nI understand the first if (t<1.0, ?, ?) but what is the meaning of second and third one.",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527636",
                          "updatedAt": "2022-09-12T12:50:33Z",
                          "publishedAt": "2022-04-08T01:19:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hello @GiudGiud\nHere avg_conc_particle is the postprocessor function, Switch is the factor which I am multiplying with the flux to change its direction. I am getting errors. It seems something is wrong in the following input. Please help.\n  [./FluxVal_temp]\n    type = ParsedFunction\n    value = Switch*(Th_Cap/1000)*C_Rate/Faraday\n    vars = 'C_Rate Faraday Th_Cap Density'   # theoretical_capacity (Ah/g) *crate (1/h)/F(As/mol)\n    vals = '1 96485.3415 300 4750000'\n  [../]\n\n [./Charge_dischage_switch_1]\n    type = ParsedFunction\n    value = if(avg_conc_particle<10000, Switch = 1)\n    vars = 'avg_conc_particle' \n  [../]\n\n  [./Charge_dischage_switch_2]\n    type = ParsedFunction\n    value = if(avg_conc_particle>10000, Switch = -1)\n    vars = 'avg_conc_particle' \n  [../]\n\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527666",
                          "updatedAt": "2022-09-12T12:50:33Z",
                          "publishedAt": "2022-04-08T01:27:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So the syntax is if(condition, value if condition is true, value if condition is false)\nI think you want this:\n  [Switch]\n    type = ParsedFunction\n    value = if(avg_conc_particle>10000,  -1, 1)\n    vars = 'avg_conc_particle' \n  [../]\n\nSwitch is then the name of the function you can use elsewhere in the input file",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527802",
                          "updatedAt": "2022-09-12T12:50:35Z",
                          "publishedAt": "2022-04-08T02:08:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "@GiudGiud\nThank you very much. However, I am getting following error\n*** ERROR ***\n/home/asingh/projects/babbler/Isotropic_2D/Isotropic.i:415: expected '=' after parameter name '-1', got ','\n\n415 line is\nvalue = if(avg_conc_particle>10000,  -1, 1)",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527824",
                          "updatedAt": "2023-01-14T23:57:27Z",
                          "publishedAt": "2022-04-08T02:13:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "needs to be under quotes i think",
                  "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527842",
                  "updatedAt": "2022-06-16T19:42:11Z",
                  "publishedAt": "2022-04-08T02:19:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "@GiudGiud\nPut under quotes as\n value = if(avg_conc_particle>=10000, '-1', '1')\nstill following error\n*** ERROR ***\n/home/asingh/projects/babbler/Isotropic_2D/Isotropic.i:415: invalid character '\"' - did you leave a field value blank after a previous '='?",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527855",
                          "updatedAt": "2022-06-16T19:42:11Z",
                          "publishedAt": "2022-04-08T02:22:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "value = 'if(avg_conc_particle>=10000, -1, 1)'",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527862",
                          "updatedAt": "2022-06-16T19:42:11Z",
                          "publishedAt": "2022-04-08T02:23:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "avtarsinghh1991"
                  },
                  "bodyText": "It started working with the following\n  [Switch]\n    type = ParsedFunction\n    value = 'if(ave_conc_particle>=10000.0, -1, 1)'\n    vars = 'ave_conc_particle' \n    vals = 'ave_conc_particle'\n  [../]\n\nSorry the comment deleted by mistake.\nThanks",
                  "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2527911",
                  "updatedAt": "2022-06-16T19:42:11Z",
                  "publishedAt": "2022-04-08T02:37:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "avtarsinghh1991"
                  },
                  "bodyText": "@GiudGiud\nJust curious, is it possible to include following algorithm or I have write the source file for it.\nSwitch = -1  % Initial value of Switch\n\nfor time_loop\n            if (Switch.eq.1.and.ave_conc_particle.ge.50000)then     \n                Switch=-1\n            elseif (Switch.eq.-1.and.ave_conc_particle.le.10000)then    \n                Switch=1                                  \n            endif\nend\n\n\nBest\nAvtar",
                  "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2528200",
                  "updatedAt": "2022-06-16T19:42:12Z",
                  "publishedAt": "2022-04-08T04:01:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you can nest ifs\nif(t=0, -1, if (ave_conc_particle > 50000, -1, if(ave_conc_particle < 10000, 1, -1)))\nnote that some of the logic simplifies out here.\nIf switch is 1 and ave_conc_particle > 50000\nswitch = -1\nis the same as just\nif (ave_conc_particle > 50000)\nswitch = -1\nsince if switch is not 1, it is -1 right?",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2528223",
                          "updatedAt": "2022-06-16T19:42:12Z",
                          "publishedAt": "2022-04-08T04:12:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Thanks @GiudGiud\nI have a small doubt here.\nLets say the initial value of ave_conc_particle=50000 and switch = -1. Now, I do not want to change switch value unless it reaches 10000. Means, for ave_conc_particle=50000 to 10000, switch = -1.\nFor this, if(avg_conc_particle>=10000, '-1', '1') condition works absolutely fine.\nAs soon as, ave_conc_particle=10,000 or less, I need to change switch=1 but only once. It should not change with ave_conc_particle increases from 10000 to 50000.\nBut with this condition, if(avg_conc_particle>=10000, '-1', '1'), as soon as it increases 10,000 switch sign will change again to -1 which I don't want to. I want to keep the Switch = 1 as avg_conc_particle increases from 10,000 to 50,000.\nThis way, I want to do cycling.\nBasically, for ave_conc_particle decreases from 50,000 to 10,000, switch=-1\nand for ave_conc_particle increases from 10,000 to 50,000, switch=1.\nI hope you got my point. Please let me know if there is any solution for this in MOOSE.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2541283",
                          "updatedAt": "2022-06-16T19:42:17Z",
                          "publishedAt": "2022-04-11T01:25:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nOk I think I see what you mean. You need to retrieve the previous value of the function to perform this. Like this for example:\n[Functions]\n  [function_a]\n    type = ParsedFunction\n    value = 'if(t=0, -1, if (ave_conc_particle > 50000, -1, if(ave_conc_particle < 10000, 1, old_value)))'\n    vars = 'ave_conc_particle old_value'\n    vals = 'ave_conc_particle old_value'\n  []\n[]\n\n[Postprocessors]\n  [ave_conc_particle]\n...\n  []\n  [old_value]\n    type = FunctionValuePostprocessor\n    function = function_a\n    execute_on = 'INITIAL TIMESTEP_END'\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2544955",
                          "updatedAt": "2022-06-16T19:42:17Z",
                          "publishedAt": "2022-04-11T13:59:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hi Guillaume\nExactly, thank you very much. I will let you know if there will be any issue.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20731#discussioncomment-2545246",
                          "updatedAt": "2022-06-16T19:42:18Z",
                          "publishedAt": "2022-04-11T14:30:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Upcoming Webinar- Improving MOOSE workflows through Coreform Cubit",
          "author": {
            "login": "jf503"
          },
          "bodyText": "On April 8th (9 am Mountian) Coreform will introduce two MOOSE-related projects they have been working on for the past few years: adding isogeometric analysis (IGA) to MOOSE, and a MOOSE editor integrated with Coreform Cubit. The MOOSE editor integrated with Coreform Cubit has been designed to accelerate the creation and debugging of MOOSE input files.  Both of these features are in a beta state and will be released later this year; Coreform is seeking early adopters who are interested in testing the functionality and providing feedback as we polish.\nRegister here",
          "url": "https://github.com/idaholab/moose/discussions/20708",
          "updatedAt": "2022-06-14T15:23:50Z",
          "publishedAt": "2022-04-04T18:58:18Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "awesome! but this will be at 1 am Sydney, Australia time, hope you guys have a recording of the session afterwards :)",
                  "url": "https://github.com/idaholab/moose/discussions/20708#discussioncomment-2505399",
                  "updatedAt": "2022-06-14T15:23:50Z",
                  "publishedAt": "2022-04-05T05:11:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GregVernon"
                          },
                          "bodyText": "Yes, we record all our webinars and post them to our YouTube channel shortly after - usually within 48 hours.",
                          "url": "https://github.com/idaholab/moose/discussions/20708#discussioncomment-2509806",
                          "updatedAt": "2022-06-14T15:23:50Z",
                          "publishedAt": "2022-04-05T16:57:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "awesome, thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/20708#discussioncomment-2512201",
                          "updatedAt": "2022-06-14T15:23:50Z",
                          "publishedAt": "2022-04-06T00:47:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GregVernon"
                  },
                  "bodyText": "@Traiwit -- The webinar has been uploaded: https://www.youtube.com/watch?v=UmS-pAuBnEU",
                  "url": "https://github.com/idaholab/moose/discussions/20708#discussioncomment-2541123",
                  "updatedAt": "2022-06-14T15:23:50Z",
                  "publishedAt": "2022-04-11T00:15:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to use a coupledArrayGradient ?",
          "author": {
            "login": "ngrilli"
          },
          "bodyText": "Dear MOOSE Users,\nI am trying to implement an AuxKernel that calculates the directional derivative of an array variable.\nFor this purpose, I am using the coupledArrayGradient that I saw in one example in the MOOSE framework postprocessors.\nHowever, there is no example where such a coupled gradient is actually used,\nnot just imported, in the code in the entire MOOSE,\ntherefore I have doubt about how to use it, specifically, how to access the individual components of the gradient.\nLet's say I have:\n_grad_variable(coupledArrayGradient(\"gradient_variable\"))\nI assume the first index should the quadrature point, so:\n_grad_variable[_qp]\nand the second index should be in round parenthesis to pick the gradient of a specific variable in the vector array, like:\n_grad_variable[_qp](i)\nIs this correct? Or i means the 3D component, like x,y,z, along which I am taking the gradient?\nHow do I access the individual components?\nYou can check my class here:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/src/auxkernels/ArrayDirectionalDerivative.C\nRight now I assign the expression _grad_variable[_qp](i) to a RealVectorValue\nand extract the components with round parenthesis,\nI would like to know what is the best strategy in your opinion and if what I am doing is correct.\nSpecifically, since I need the directional derivative, I would need the scalar product between _grad_variable[_qp](i)\nand a std::vector<Real>. What is the best strategy for this.\nYour suggestions are highly appreciated.\nHope this can be helpful for others as I could not find any discussion here\nwith keyword coupledArrayGradient.\nThank you very much in advance.\nBest Regards,\nNicol\u00f2",
          "url": "https://github.com/idaholab/moose/discussions/20686",
          "updatedAt": "2022-08-01T06:51:12Z",
          "publishedAt": "2022-03-31T15:03:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nHere's an example of using it\nhttps://github.com/idaholab/moose/blob/c42b80999f9a1a7aaa09c96484fc8a760f992359/framework/src/postprocessors/ElementIntegralArrayVariablePostprocessor.C\nso [_qp](_component) for _u. Lemme check for grad_u\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2480856",
                  "updatedAt": "2022-08-01T06:51:13Z",
                  "publishedAt": "2022-03-31T19:21:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So for grad_u it should be:\n_grad_u[_qp](_gradient_component * <NUM_ARRAY_COMPONENTS> + _component)\nIf you do\nRealVectorValue bb = _grad_u[_qp](1)\nyou'll get a vector filled with (_grad_u[_qp](1), 0 , 0)",
                          "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2481029",
                          "updatedAt": "2022-08-01T06:51:13Z",
                          "publishedAt": "2022-03-31T19:49:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So this vector is indexed over spatial dimension I think based on what I see in your code. A simple for-loop like you did sounds fine for this operation, though I think there is an issue with your cast to RealVectorValue of _grad_u[_qp](i).\nAnd the for loop needs to skip indexes in the grad_vector to stay on the same component.",
                          "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2481064",
                          "updatedAt": "2022-08-01T06:51:13Z",
                          "publishedAt": "2022-03-31T19:54:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hold that thought I ll double check this\nEDIT: was not what I thought. Previous messages edited so the answer's right",
                          "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2481487",
                          "updatedAt": "2022-08-01T06:51:13Z",
                          "publishedAt": "2022-03-31T21:24:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "@GiudGiud  thank you for your answers.\nTomorrow we will go through some systematic testing and check that the gradient is calculated as expected.\nFor the moment I can only tell that this code works and when I print _grad_u [_qp] (i)\nI am always getting a 3D vector, but as you point out, the behaviour may not be what I expect\nand I may need to use (_gradient_component * <NUM_ARRAY_COMPONENTS> + _component)\ninstead.\nI will post again tomorrow once we do the testing\nNicol\u00f2",
                          "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2482348",
                          "updatedAt": "2022-09-01T16:08:33Z",
                          "publishedAt": "2022-04-01T00:42:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "I am answering this as I figured out.\nReferring to the variable _grad_variable(coupledArrayGradient(\"gradient_variable\"))\nIf gradient_variable is an ArrayVariable with n component,\nthen _grad_variable is an array variable with 3n components.\nThe order of the components of _grad_variable is the following:\n\nthe first n components are the derivatives along x of the components of gradient_variable\nthe next n components are the derivatives along y of the components of gradient_variable\nthe next n components are the derivatives along z of the components of gradient_variable\n\nFor instance a directional derivatives of an ArrayVariable are calculated as shown here:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/src/auxkernels/ArrayDirectionalDerivative.C\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/20686#discussioncomment-2540681",
                  "updatedAt": "2022-08-01T06:51:14Z",
                  "publishedAt": "2022-04-10T20:18:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Components to vector variable",
          "author": {
            "login": "am-tc01"
          },
          "bodyText": "Hi,\nI am transfering a vector variable from a main app to a sub app. For that I have to split the variable into its components using VectorVariableComponentAux. My question: is there a way to somehow combine the components in the sub app to make a single vector variable?\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/20745",
          "updatedAt": "2022-06-11T08:38:01Z",
          "publishedAt": "2022-04-08T10:16:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI couldnt find one in the docs.\nBut it shouldnt be too hard to make really.\nLook at the VectorFunctionAux for an example of a vectorAuxKernel,\nand the SelfAux for an example of a kernel that just copies a variable.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20745#discussioncomment-2537886",
                  "updatedAt": "2022-06-11T08:38:02Z",
                  "publishedAt": "2022-04-10T02:31:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Problem with 3D Mortar Contact",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI'm experimenting with contact simulations and wanted to try out frictional Mortar for my 3D Model. But when I tried to run the calculation it exited with a Segfault (Signal 11). So I decided to update MOOSE to see if that helps. Now the Segfault is gone but I get another error right at the beginning of the first time step:\n/home/florian/miniconda3/envs/moose/libmesh/include/metaphysicl/dynamic_std_array_wrapper.h, line 125, compiled Apr  6 2022 at 18:07:01\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 2\n\nThis problem is only present with 3D Mortar. I tested frictional and frictionless contact both setup with and without Contact Action but to no success. 2D Mortar seems to work just fine.\nWhat causes this error to appear?",
          "url": "https://github.com/idaholab/moose/discussions/20734",
          "updatedAt": "2022-06-02T06:00:19Z",
          "publishedAt": "2022-04-07T14:09:18Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt s likely the AD container size that is too small.\nCould you please configure with a larger derivative container size then recompile?\n./configure --with-derivative-size=200\ncd modules/contact\nmake\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20734#discussioncomment-2524417",
                  "updatedAt": "2022-06-02T06:00:19Z",
                  "publishedAt": "2022-04-07T14:48:45Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "That worked, thanks a lot.",
                          "url": "https://github.com/idaholab/moose/discussions/20734#discussioncomment-2529570",
                          "updatedAt": "2022-06-02T06:01:03Z",
                          "publishedAt": "2022-04-08T09:02:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error running make on MUMPS when compiling petsc",
          "author": {
            "login": "tengzhang48"
          },
          "bodyText": "Hello,\nI am trying to update the Moose on my account on XSEDE Expanse cluster but have error running make on MUMPS when compiling petsc. I previously successfully install it on the cluster. The error information is\n\"dlr_stats.F:343:12:\n343 |         use DMUMPS_STRUC_DEF\n|            1\nFatal Error: Cannot open module file 'dmumps_struc_def.mod' for reading at (1): No such file or directory\ncompilation terminated.\"\nBut I do found \"dmumps_struc_def.mod\" file in the moose/petsc/arch-moose/externalpackages/MUMPS_5.3.5/src. Also, I just followed the instruction on the moose website for the installations and did not change anything.\nCould you please help me take a look at this?\nThanks a lot.\nBest,\nTeng",
          "url": "https://github.com/idaholab/moose/discussions/20524",
          "updatedAt": "2022-06-29T08:35:29Z",
          "publishedAt": "2022-03-09T03:47:49Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSorry for the delay.\nCould you please try again now? The petsc module has been updated.\nThe installation instructions for clusters:\nhttps://mooseframework.inl.gov/getting_started/installation/hpc_install_moose.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2505005",
                  "updatedAt": "2022-06-29T08:35:31Z",
                  "publishedAt": "2022-04-05T03:28:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "tengzhang48"
                          },
                          "bodyText": "I tried to re-compile the software. Now petsc works. But I have the following error when installing libmesh\n\" /petscsys.h:535:25: error: invalid conversion from 'MPI_Comm' {aka 'ompi_communicator_t*'} to 'TIMPI::communicator' {aka 'int'} [-fpermissive]\"\nCould you please help me check this? Thanks a lot.\nP.S. I previously successfully installed moose by disabling mumps. But I covered my previous installation with the unsuccessful one now.",
                          "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2512402",
                          "updatedAt": "2022-06-29T08:35:31Z",
                          "publishedAt": "2022-04-06T01:36:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Weird. What mpi distribution are you using?\nWhat are the outputs of\nmpicc --version\necho $CC $CXX $FC",
                          "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2512717",
                          "updatedAt": "2022-06-29T08:35:38Z",
                          "publishedAt": "2022-04-06T03:01:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tengzhang48"
                          },
                          "bodyText": "I used openmpi yesterday. I tried intel-mpi today, and it works. Most tests can be passed. I received 14 errors for the last tests. I guess they are more advanced functions and probably I will not use them in the near future. If they can be easily fixed, it will be great to hear your suggestions on this. If not, you can close this issue. I will post related questions later if I indeed use these functions.\nThanks a lot.\nBelow are the failed test:\n\"mesh/split_uniform_refine.square ...................................... [FINISHED,min_cpus=3] FAILED (TIMEOUT)\npartitioners/petsc_partitioner.ptscotch_weight_both ................... [FINISHED,min_cpus=4] FAILED (TIMEOUT)\npartitioners/petsc_partitioner.parmetis_weight_side ................... [FINISHED,min_cpus=4] FAILED (TIMEOUT)\npartitioners/petsc_partitioner.parmetis_weight_both ................... [FINISHED,min_cpus=4] FAILED (TIMEOUT)\nmeshgenerators/distributed_rectilinear/dmg_displaced_mesh.pbc/adaptivity_nemesis  [min_cpus=4] FAILED (ERRMSG)\npartitioners/petsc_partitioner.ptscotch ......................................... [min_cpus=4] FAILED (ERRMSG)\nmesh/mesh_only.mesh_only_checkpoint ............................................. [min_cpus=3] FAILED (ERRMSG)\npostprocessors/num_elems.test_split ............................................. [min_cpus=4] FAILED (ERRMSG)\npostprocessors/num_nodes.test_split ............................................. [min_cpus=4] FAILED (ERRMSG)\npartitioners/petsc_partitioner.ptscotch_weight_elment ........................... [min_cpus=4] FAILED (ERRMSG)\nmesh/nemesis.nemesis_repartitioning_test ........................................ [min_cpus=4] FAILED (ERRMSG)\npartitioners/petsc_partitioner.ptscotch_weight_side ............................. [min_cpus=4] FAILED (ERRMSG)\npartitioners/petsc_partitioner.parmetis ......................................... [min_cpus=4] FAILED (ERRMSG)\npartitioners/petsc_partitioner.parmetis_weight_element .......................... [min_cpus=4] FAILED (ERRMSG)\"",
                          "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2520267",
                          "updatedAt": "2022-06-29T08:35:36Z",
                          "publishedAt": "2022-04-07T02:11:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It looks like the petsc partitioners are failing which is not a good sign.\nIf you could please paste the actual error messages we could see what that\u2019s about.\nto rerun only those tests you can do\n\u2018./run_tests \u2014failed-tests\u2019\nOfficially we don\u2019t support intel compilers btw. I m not sure why they are working for you.",
                          "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2520462",
                          "updatedAt": "2022-09-12T20:02:02Z",
                          "publishedAt": "2022-04-07T03:04:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tengzhang48"
                          },
                          "bodyText": "I re-downloaded moose and compiled again with openmpi. Now it works and all the tests can pass. It is strange that I did not change anything this time. I realized I should use the job script to run the tests. Yesterday, I used interactive job, which is based on \"srun\". Anyway, you mentioned that intel-mpi may not be a good option (I actually used gcc + intel-mpi, which may be a wried combination). It is good that now the default installation works.\nThanks for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/20524#discussioncomment-2526998",
                          "updatedAt": "2022-09-12T20:02:02Z",
                          "publishedAt": "2022-04-07T22:18:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}