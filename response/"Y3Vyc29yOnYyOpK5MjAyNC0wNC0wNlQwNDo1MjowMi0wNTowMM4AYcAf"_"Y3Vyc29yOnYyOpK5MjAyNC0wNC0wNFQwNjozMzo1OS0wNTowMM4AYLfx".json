{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNC0wNFQwNjozMzo1OS0wNTowMM4AYLfx"
    },
    "edges": [
      {
        "node": {
          "title": "Crystal Plasticity- Deformation gradient error",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "Below is the error message\n\ufffd[31m\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\nMaterial property 'deformation_gradient', requested by 'crysp_phase0' is not defined on block 0\nMaterial property 'crysrot', requested by 'crysp_phase0' is not defined on block 0\nMaterial property 'deformation_gradient', requested by 'crysp_phase1' is not defined on block 0\nMaterial property 'crysrot', requested by 'crysp_phase1' is not defined on block 0\nMaterial property 'deformation_gradient', requested by 'crysp_phase2' is not defined on block 0\nMaterial property 'crysrot', requested by 'crysp_phase2' is not defined on block 0",
          "url": "https://github.com/idaholab/moose/discussions/27263",
          "updatedAt": "2024-04-05T21:46:54Z",
          "publishedAt": "2024-04-02T00:12:42Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nuse Debug/show_material_props on an example input and find out which material is supposed to be declaring this\nthen check if you have this material in your simulation and that you are not passing parameters that would be changing the name of the property\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-8977805",
                  "updatedAt": "2024-04-02T00:23:14Z",
                  "publishedAt": "2024-04-02T00:23:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "So below is the .out after adding\n[Debug]\nshow_material_props = true\n[]\nActive Materials:\nSubdomain:  (0)\nMaterial Name:       elasticity_tensor_phase0\nProperty Names:      \"Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\"\n  Material Name:       crysp_phase0\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                         \"phase0_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase0\n  Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                         \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n  Material Name:       elasticity_tensor_phase1\n  Property Names:      \"Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase1\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \n                         \"phase1_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase1\n  Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                         \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n  Material Name:       elasticity_tensor_phase2\n  Property Names:      \"Euler_angles\" \"phase2_crysrot\" \"phase2_effective_stiffness\" \"phase2_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase2\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase2_Jacobian_mult\" \"phase2_elastic_strain\" \n                         \"phase2_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase2\n  Property Names:      \"phase2_deformation_gradient\" \"phase2_mechanical_strain\" \"phase2_rotation_increment\" \n                         \"phase2_strain_increment\" \"phase2_strain_rate\" \"phase2_total_strain\" \n  Material Name:       h0\n  Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                         \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n  Material Name:       h1\n  Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                         \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n  Material Name:       h2\n  Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                         \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n  Material Name:       global_stress\n  Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Face Materials:\nSubdomain:  (0)\n  Material Name:       elasticity_tensor_phase0_face\n  Property Names:      \"Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase0_face\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                         \"phase0_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase0_face\n  Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                         \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n  Material Name:       elasticity_tensor_phase1_face\n  Property Names:      \"Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase1_face\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \n                         \"phase1_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase1_face\n  Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                         \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n  Material Name:       elasticity_tensor_phase2_face\n  Property Names:      \"Euler_angles\" \"phase2_crysrot\" \"phase2_effective_stiffness\" \"phase2_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase2_face\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase2_Jacobian_mult\" \"phase2_elastic_strain\" \n                         \"phase2_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase2_face\n  Property Names:      \"phase2_deformation_gradient\" \"phase2_mechanical_strain\" \"phase2_rotation_increment\" \n                         \"phase2_strain_increment\" \"phase2_strain_rate\" \"phase2_total_strain\" \n  Material Name:       h0_face\n  Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                         \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n  Material Name:       h1_face\n  Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                         \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n  Material Name:       h2_face\n  Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                         \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n  Material Name:       global_stress_face\n  Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Neighboring Materials:\nSubdomain:  (0)\nMaterial Name:       elasticity_tensor_phase0_neighbor\nProperty Names:      \"Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\"\n  Material Name:       crysp_phase0_neighbor\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                         \"phase0_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase0_neighbor\n  Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                         \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n  Material Name:       elasticity_tensor_phase1_neighbor\n  Property Names:      \"Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase1_neighbor\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \n                         \"phase1_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase1_neighbor\n  Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                         \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n  Material Name:       elasticity_tensor_phase2_neighbor\n  Property Names:      \"Euler_angles\" \"phase2_crysrot\" \"phase2_effective_stiffness\" \"phase2_elasticity_tensor\" \n                         \n  Material Name:       crysp_phase2_neighbor\n  Property Names:      \"acc_slip\" \"fp\" \"gss\" \"lage\" \"phase2_Jacobian_mult\" \"phase2_elastic_strain\" \n                         \"phase2_stress\" \"pk2\" \"update_rot\" \n  Material Name:       strain_phase2_neighbor\n  Property Names:      \"phase2_deformation_gradient\" \"phase2_mechanical_strain\" \"phase2_rotation_increment\" \n                         \"phase2_strain_increment\" \"phase2_strain_rate\" \"phase2_total_strain\" \n  Material Name:       h0_neighbor\n  Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                         \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n  Material Name:       h1_neighbor\n  Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                         \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n  Material Name:       h2_neighbor\n  Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                         \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n  Material Name:       global_stress_neighbor\n  Property Names:      \"Jacobian_mult\" \"stress\"",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-8986356",
                          "updatedAt": "2024-04-02T16:18:50Z",
                          "publishedAt": "2024-04-02T16:18:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nso the deformation_graident property name got prefixed with phase0 and phase1. Are you wanting to use a specific phase for that material property?",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9005044",
                          "updatedAt": "2024-04-04T05:20:10Z",
                          "publishedAt": "2024-04-04T05:20:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I just got this input script from a colleague and am trying to make it work. I can share the input script if you need to see it.",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9009722",
                          "updatedAt": "2024-04-04T13:22:47Z",
                          "publishedAt": "2024-04-04T13:22:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You\u2019ll need to get context from them about this.\nIf they meant to use properties from a specific phase or were relying on some sort of homogenization between phases, the treatment will be different",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9011954",
                          "updatedAt": "2024-04-04T16:16:12Z",
                          "publishedAt": "2024-04-04T16:16:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes, it is for a nickel-chromium alloy that exhibits anisotropy. One of the issues is the precipitates(phases) have different crystal structures\n.",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9012146",
                          "updatedAt": "2024-04-04T16:32:45Z",
                          "publishedAt": "2024-04-04T16:32:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Is there a way to use different slip systems with slip resistance in MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9012332",
                          "updatedAt": "2024-04-04T16:52:10Z",
                          "publishedAt": "2024-04-04T16:52:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "In the same spatial regions? (Subdomains)",
                          "url": "https://github.com/idaholab/moose/discussions/27263#discussioncomment-9026350",
                          "updatedAt": "2024-04-05T21:46:55Z",
                          "publishedAt": "2024-04-05T21:46:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Solid mechanics library missing",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I discovered I do not have the solid mechanics library in my MOOSE repository.",
          "url": "https://github.com/idaholab/moose/discussions/27284",
          "updatedAt": "2024-04-05T21:45:28Z",
          "publishedAt": "2024-04-04T17:20:47Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Emmanuel-324"
                  },
                  "bodyText": "The mentioned library is missing my application",
                  "url": "https://github.com/idaholab/moose/discussions/27284#discussioncomment-9012777",
                  "updatedAt": "2024-04-04T17:37:47Z",
                  "publishedAt": "2024-04-04T17:37:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nthe tensor mechanics module got renamed to solid mechanics a month or so ago\nIf you update moose you should see it\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27284#discussioncomment-9012849",
                          "updatedAt": "2024-04-04T17:45:09Z",
                          "publishedAt": "2024-04-04T17:45:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I see tensor mechanics in my MAKEFILE. I just built a new application",
                          "url": "https://github.com/idaholab/moose/discussions/27284#discussioncomment-9013270",
                          "updatedAt": "2024-04-04T18:28:22Z",
                          "publishedAt": "2024-04-04T18:28:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you used a new-enough moose you should see solid_mechanics instead of tensor mechanics in the Makefile",
                          "url": "https://github.com/idaholab/moose/discussions/27284#discussioncomment-9026342",
                          "updatedAt": "2024-04-05T21:45:29Z",
                          "publishedAt": "2024-04-05T21:45:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error during application compilation",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "Below is snippet of the error\nhome/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addParametersToList(wasp::DataArray&, const InputParameters&, co\nnst std::set<std::__cxx11::basic_string >&, int, int, int, int, const std::string&)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:529:9: error: 'client_snippet_support' was not declared in this scope\n529 |     if (client_snippet_support && !default_value.empty())\n|         ^~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:531:32: error: 'm_text_format_snippet' is not a member of 'wasp::lsp'\n531 |       text_format = wasp::lsp::m_text_format_snippet;\n|                                ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:536:32: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n536 |       text_format = wasp::lsp::m_text_format_plaintext;\n|                                ^~~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:544:45: error: too many arguments to function 'bool wasp::lsp::buildCompletionObject(wasp::DataObject&,\nstd::ostream&, const std::string&, int, int, int, int, const std::string&, int, const std::string&, const std::string&, bool, bool)'\n544 |     pass &= wasp::lsp::buildCompletionObject(*item,\n|             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n545 |                                              errors,\n|                                              ~~~~~~~\n|                                              ~~~~~~~\n546 |                                              param_name,\n|                                              ~~~~~~~~~~~\n547 |                                              replace_line_beg,\n|                                              ~~~~~~~~~~~~~~~~~\n548 |                                              replace_char_beg,\n|                                              ~~~~~~~~~~~~~~~~~\n549 |                                              replace_line_end,\n|                                              ~~~~~~~~~~~~~~~~~\n550 |                                              replace_char_end,\n|                                              ~~~~~~~~~~~~~~~~~\n551 |                                              insert_text,\n|                                              ~~~~~~~~~~~~\n552 |                                              complete_kind,\n|                                              ~~~~~~~~~~~~~~\n553 |                                              \"\",\n|                                              ~~~\n554 |                                              doc_string,\n|                                              ~~~~~~~~~~~\n555 |                                              false,\n|                                              ~~~~~~\n556 |                                              false,\n|                                              ~~~~~~\n557 |                                              text_format);\n|                                              ~~~~~~~~~~~~\nIn file included from /home/emmanuel324/projects/moose/framework/build/header_symlinks/MooseServer.h:13,\nfrom /home/emmanuel324/projects/moose/framework/src/base/MooseApp.C:53,\nfrom /home/emmanuel324/projects/moose/framework/build/unity_src/base_Unity.C:13:\n/home/emmanuel324/projects/moose/framework/contrib/wasp/install/include/wasplsp/LSP.h:604:6: note: declared here\n604 | bool buildCompletionObject( DataObject        & object          ,\n|      ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addSubblocksToList(wasp::DataArray&, const std::string&, int, in\nt, int, int, const std::string&, bool)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:618:25: error: 'client_snippet_support' was not declared in this scope\n618 |       int text_format = client_snippet_support ? wasp::lsp::m_text_format_snippet\n|                         ^~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:618:61: error: 'm_text_format_snippet' is not a member of 'wasp::lsp'\n618 |       int text_format = client_snippet_support ? wasp::lsp::m_text_format_snippet\n|                                                             ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:619:61: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n619 |                                                : wasp::lsp::m_text_format_plaintext;\n|                                                             ^~~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:641:47: error: too many arguments to function 'bool wasp::lsp::buildCompletionObject(wasp::DataObject&,\nstd::ostream&, const std::string&, int, int, int, int, const std::string&, int, const std::string&, const std::string&, bool, bool)'\n641 |       pass &= wasp::lsp::buildCompletionObject(*item,\n|               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n642 |                                                errors,\n|                                                ~~~~~~~\n643 |                                                subblock_name,\n|                                                ~~~~~~~~~~~~~~\n644 |                                                replace_line_beg,\n|                                                ~~~~~~~~~~~~~~~~~\n645 |                                                replace_char_beg,\n|                                                ~~~~~~~~~~~~~~~~~\n646 |                                                replace_line_end,\n|                                                ~~~~~~~~~~~~~~~~~\n|                                                ~~~~~~~~~~~~~~~~~\n647 |                                                replace_char_end,\n|                                                ~~~~~~~~~~~~~~~~~\n648 |                                                insert_text,\n|                                                ~~~~~~~~~~~~\n649 |                                                complete_kind,\n|                                                ~~~~~~~~~~~~~~\n650 |                                                \"\",\n|                                                ~~~\n651 |                                                doc_string,\n|                                                ~~~~~~~~~~~\n652 |                                                false,\n|                                                ~~~~~~\n653 |                                                false,\n|                                                ~~~~~~\n654 |                                                text_format);\n|                                                ~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/contrib/wasp/install/include/wasplsp/LSP.h:604:6: note: declared here\n604 | bool buildCompletionObject( DataObject        & object          ,\n|      ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addValuesToList(wasp::DataArray&, const InputParameters&, const\nstd::set<std::__cxx11::basic_string >&, const std::string&, const std::set<std::__cxx11::basic_string >&, int, int, int, int)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:804:57: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n804 |                                              wasp::lsp::m_text_format_plaintext);\n|                                                         ^~~~~~~~~~~~~~~~~~~~~~~\nCompiling C++ (in opt mode) /home/emmanuel324/projects/moose/framework/build/unity_src/multiapps_Unity.C...\nmake: *** [/home/emmanuel324/projects/moose/framework/build/unity_src/base_Unity.x86_64-pc-linux-gnu.opt.lo] Error 1\nmake: *** Waiting for unfinished jobs....",
          "url": "https://github.com/idaholab/moose/discussions/27288",
          "updatedAt": "2024-04-05T18:16:51Z",
          "publishedAt": "2024-04-04T20:58:10Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "brandonlangley"
                  },
                  "bodyText": "@Emmanuel-324 -\nIt appears that your versions of WASP and MOOSE are not in sync, and WASP just needs to be updated.\nIf you are using conda packages for these components, you can update to the latest version by running:\nconda update moose-dev\n\nAnd if that does not work, then you can try to remove and reinstall a new moose conda environment with:\nconda env remove -n moose -all\nconda create -n moose moose-dev\n\nIf you are not using conda and are manually installing everything, you can run this from the MOOSE root:\n./scripts/update_and_rebuild_wasp.sh\n\nI would suggest to then clean up your repo with git clean -xfd before retrying the MOOSE build step.\nNote that git clean -xfd will delete any uncommitted work, so make sure you save your changes first.",
                  "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9016931",
                  "updatedAt": "2024-04-05T04:54:31Z",
                  "publishedAt": "2024-04-05T04:54:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I am installing it through an HPC cluster. Do I follow the same process?",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9020486",
                          "updatedAt": "2024-04-05T11:27:08Z",
                          "publishedAt": "2024-04-05T11:27:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "brandonlangley"
                          },
                          "bodyText": "@Emmanuel-324 -\nYou will not be using the conda package for WASP on HPC, so you will just need to run this from the root of the MOOSE repo:\n./scripts/update_and_rebuild_wasp.sh\n\nThat script should pull and build the correct version of WASP needed for your version of MOOSE, then you can build MOOSE.\nAnd if the MOOSE build fails again after this, I suggest to commit your changes, run git clean -xfd, then try to build again.",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9022912",
                          "updatedAt": "2024-04-05T15:12:00Z",
                          "publishedAt": "2024-04-05T15:11:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I have git clean and rebuilt the WASP but the MOOSE build always fails",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9023146",
                          "updatedAt": "2024-04-05T15:35:05Z",
                          "publishedAt": "2024-04-05T15:35:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Do you go in the top folder, moose/ before running git clean?\nDo you have wasp or moose related environment variables set that would make you find the wrong moose or wasp when building?\nHas the error changed since the first time you posted?\nFinally what version of moose are you using?",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9023840",
                          "updatedAt": "2024-04-05T16:36:56Z",
                          "publishedAt": "2024-04-05T16:36:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes i git clean in MOOSE folder.\n\"module reset\nmodule load apps site/tinkercliffs/easybuild/setup\nmodule load apps site/tinkercliffs-rome/easybuild/setup\nmodule load OpenMPI CMake\nexport CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77\nmamba activate python-stack\" This is how I load my environment.\nThe error has not changed\nI am installing the MOOSE through an HPC cluster. Currently, I am trying to restart the whole installation process again by deleting the moose folder",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9023891",
                          "updatedAt": "2024-04-05T16:41:26Z",
                          "publishedAt": "2024-04-05T16:41:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does the Python-stack environment contain wasp by any chance? You can check with mamba list",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9024036",
                          "updatedAt": "2024-04-05T16:53:41Z",
                          "publishedAt": "2024-04-05T16:53:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "This is the list of my python stack\npython-stack) [emmanuel324@tinkercliffs1 ~]$ mamba list\n# packages in environment at /home/emmanuel324/mambaforge3/envs/python-stack:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       2_gnu    conda-forge\nalabaster                 0.7.16                   pypi_0    pypi\nasttokens                 2.4.1                    pypi_0    pypi\nattrs                     23.2.0                   pypi_0    pypi\nbabel                     2.14.0                   pypi_0    pypi\nbeautifulsoup4            4.12.3                   pypi_0    pypi\nbleach                    6.1.0                    pypi_0    pypi\nbzip2                     1.0.8                hd590300_5    conda-forge\nca-certificates           2023.11.17           hbcca054_0    conda-forge\ncertifi                   2024.2.2                 pypi_0    pypi\ncharset-normalizer        3.3.2                    pypi_0    pypi\ncontourpy                 1.2.0                    pypi_0    pypi\ncoverage                  7.4.4                    pypi_0    pypi\ncycler                    0.12.1                   pypi_0    pypi\ncython                    3.0.10                   pypi_0    pypi\ndecorator                 5.1.1                    pypi_0    pypi\ndefusedxml                0.7.1                    pypi_0    pypi\ndocutils                  0.20.1                   pypi_0    pypi\nexceptiongroup            1.2.0                    pypi_0    pypi\nexecuting                 2.0.1                    pypi_0    pypi\nfastjsonschema            2.19.1                   pypi_0    pypi\nfonttools                 4.50.0                   pypi_0    pypi\nfuro                      2024.1.29                pypi_0    pypi\nidna                      3.6                      pypi_0    pypi\nimagesize                 1.4.1                    pypi_0    pypi\nimportlib-resources       6.4.0                    pypi_0    pypi\niniconfig                 2.0.0                    pypi_0    pypi\nipython                   8.23.0                   pypi_0    pypi\njedi                      0.19.1                   pypi_0    pypi\njinja2                    3.1.3                    pypi_0    pypi\njsonschema                4.21.1                   pypi_0    pypi\njsonschema-specifications 2023.12.1                pypi_0    pypi\njupyter-client            8.6.1                    pypi_0    pypi\njupyter-core              5.7.2                    pypi_0    pypi\njupyterlab-pygments       0.3.0                    pypi_0    pypi\nkiwisolver                1.4.5                    pypi_0    pypi\nld_impl_linux-64          2.40                 h41732ed_0    conda-forge\nlibffi                    3.4.2                h7f98852_5    conda-forge\nlibgcc-ng                 13.2.0               h807b86a_3    conda-forge\nlibgomp                   13.2.0               h807b86a_3    conda-forge\nlibnsl                    2.0.1                hd590300_0    conda-forge\nlibsqlite                 3.44.0               h2797004_0    conda-forge\nlibuuid                   2.38.1               h0b41bf4_0    conda-forge\nlibzlib                   1.2.13               hd590300_5    conda-forge\nmarkupsafe                2.1.5                    pypi_0    pypi\nmatplotlib                3.8.3                    pypi_0    pypi\nmatplotlib-inline         0.1.6                    pypi_0    pypi\nmistune                   3.0.2                    pypi_0    pypi\nnbclient                  0.10.0                   pypi_0    pypi\nnbconvert                 7.16.3                   pypi_0    pypi\nnbformat                  5.10.3                   pypi_0    pypi\nnbsphinx                  0.9.3                    pypi_0    pypi\nnbsphinx-link             1.3.0                    pypi_0    pypi\nncurses                   6.4                  h59595ed_2    conda-forge\nnumpy                     1.26.4                   pypi_0    pypi\noldest-supported-numpy    2023.12.21               pypi_0    pypi\nopenssl                   3.1.4                hd590300_0    conda-forge\npackaging                 23.2               pyhd8ed1ab_0    conda-forge\npandas                    2.2.1                    pypi_0    pypi\npandocfilters             1.5.1                    pypi_0    pypi\nparso                     0.8.3                    pypi_0    pypi\npexpect                   4.9.0                    pypi_0    pypi\npillow                    10.3.0                   pypi_0    pypi\npip                       24.0                     pypi_0    pypi\nplatformdirs              4.2.0                    pypi_0    pypi\npluggy                    1.4.0                    pypi_0    pypi\nprompt-toolkit            3.0.43                   pypi_0    pypi\nptyprocess                0.7.0                    pypi_0    pypi\npure-eval                 0.2.2                    pypi_0    pypi\npycalphad                 0.10.4.post2.dev7+g2116efe          pypi_0    pypi\npygments                  2.17.2                   pypi_0    pypi\npyparsing                 3.1.2                    pypi_0    pypi\npytest                    8.1.1                    pypi_0    pypi\npytest-cov                5.0.0                    pypi_0    pypi\npython                    3.10.13         hd12c33a_0_cpython    conda-forge\npython-dateutil           2.9.0.post0              pypi_0    pypi\npython_abi                3.10                    4_cp310    conda-forge\npytz                      2024.1                   pypi_0    pypi\npyyaml                    6.0.1           py310h2372a71_1    conda-forge\npyzmq                     25.1.2                   pypi_0    pypi\nreadline                  8.2                  h8228510_1    conda-forge\nreferencing               0.34.0                   pypi_0    pypi\nrequests                  2.31.0                   pypi_0    pypi\nrpds-py                   0.18.0                   pypi_0    pypi\nscipy                     1.11.4                   pypi_0    pypi\nsetuptools                69.2.0                   pypi_0    pypi\nsetuptools-scm            8.0.4                    pypi_0    pypi\nsix                       1.16.0                   pypi_0    pypi\nsnowballstemmer           2.2.0                    pypi_0    pypi\nsoupsieve                 2.5                      pypi_0    pypi\nsphinx                    7.2.6                    pypi_0    pypi\nsphinx-basic-ng           1.0.0b2                  pypi_0    pypi\nsphinxcontrib-applehelp   1.0.8                    pypi_0    pypi\nsphinxcontrib-devhelp     1.0.6                    pypi_0    pypi\nsphinxcontrib-htmlhelp    2.0.5                    pypi_0    pypi\nsphinxcontrib-jsmath      1.0.1                    pypi_0    pypi\nsphinxcontrib-qthelp      1.0.7                    pypi_0    pypi\nsphinxcontrib-serializinghtml 1.1.10                   pypi_0    pypi\nstack-data                0.6.3                    pypi_0    pypi\nsymengine                 0.11.0                   pypi_0    pypi\ntinycss2                  1.2.1                    pypi_0    pypi\ntinydb                    4.8.0                    pypi_0    pypi\ntk                        8.6.13          noxft_h4845f30_101    conda-forge\ntomli                     2.0.1                    pypi_0    pypi\ntornado                   6.4                      pypi_0    pypi\ntraitlets                 5.14.2                   pypi_0    pypi\ntyping-extensions         4.10.0                   pypi_0    pypi\ntzdata                    2024.1                   pypi_0    pypi\nurllib3                   2.2.1                    pypi_0    pypi\nwcwidth                   0.2.13                   pypi_0    pypi\nwebencodings              0.5.1                    pypi_0    pypi\nwheel                     0.43.0                   pypi_0    pypi\nxarray                    2024.3.0                 pypi_0    pypi\nxz                        5.2.6                h166bdaf_0    conda-forge\nyaml                      0.2.5                h7f98852_2    conda-forge",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9024170",
                          "updatedAt": "2024-04-08T12:29:23Z",
                          "publishedAt": "2024-04-05T17:08:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "brandonlangley"
                          },
                          "bodyText": "@Emmanuel-324 -\nCould you copy and paste the output from these two commands?\n\n\nMove into your /home/emmanuel324/projects/moose directory and run git log -n 1\n\n\nAfter you run ./scripts/update_and_rebuild_wasp.sh, move into framework/contrib/wasp and run git log -n 1",
                          "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9024818",
                          "updatedAt": "2024-04-05T18:12:18Z",
                          "publishedAt": "2024-04-05T18:12:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Emmanuel-324"
                  },
                  "bodyText": "I started everything all over and it passes the build and test now.",
                  "url": "https://github.com/idaholab/moose/discussions/27288#discussioncomment-9024849",
                  "updatedAt": "2024-04-05T18:15:53Z",
                  "publishedAt": "2024-04-05T18:15:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Determining the integration rules in the kernel",
          "author": {
            "login": "teddyz1999"
          },
          "bodyText": "Hi\uff0c\nWhen solving an equation with multiple variables, where the orders of these variables are specified in the input file, and the equation contains a nonlinear term involving the multiplication of multiple variables, how does MOOSE determine the integration rules for this nonlinear term within the kernel, such as the order of integration and the number of integration points?",
          "url": "https://github.com/idaholab/moose/discussions/27252",
          "updatedAt": "2024-04-05T17:29:45Z",
          "publishedAt": "2024-04-01T03:05:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe default quadrature is not selected based on the form of the equation. It is chosen to be a Gauss quadrature of order n to be able to integrate polynomial products (for example shape * test function). It's exact in 1D\nhttps://mooseframework.inl.gov/syntax/Executioner/Quadrature/index.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27252#discussioncomment-8969032",
                  "updatedAt": "2024-04-01T04:06:37Z",
                  "publishedAt": "2024-04-01T04:06:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "teddyz1999"
                          },
                          "bodyText": "After reading the link you provided, I'm still a bit confused. It says \"we actually use a quadrature of order 2n+1, with n the order of the variables,\" which means if my variable's basis function is of the second order, then a quadrature rule is chosen to precisely satisfy 2*2+1=5, resulting in a 5th order polynomial. However, if I set different orders for several variables in the input file, for example, one variable is of the second order and another is of the third order, how is the quadrature determined?",
                          "url": "https://github.com/idaholab/moose/discussions/27252#discussioncomment-8969413",
                          "updatedAt": "2024-04-01T05:16:21Z",
                          "publishedAt": "2024-04-01T05:16:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nWe use the maximum quadrature order required, and we use it for all variables\nsee SystemBase::getMinQuadratureOrder() for polling the quadrature orders from variables\nand\nFEProblemBase::createQRules for polling each system for the quadrature order they need",
                          "url": "https://github.com/idaholab/moose/discussions/27252#discussioncomment-8972617",
                          "updatedAt": "2024-04-01T13:00:15Z",
                          "publishedAt": "2024-04-01T13:00:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "teddyz1999"
                          },
                          "bodyText": "So\uff0c If I want to manually specify the quadrature order instead of letting it be automatically determined in MOOSE, how should I do that? Can I simply call an interface in the kernel to set a specific quadrature order for different kernels?",
                          "url": "https://github.com/idaholab/moose/discussions/27252#discussioncomment-9022250",
                          "updatedAt": "2024-04-05T14:15:18Z",
                          "publishedAt": "2024-04-05T14:15:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nyou cannot specify different quadratures on a per kernel basis without rewriting computeResidual (instead of computeQpResidual) and being very careful with the re initialization of material properties and variable values.\nWe can do (spatial) block-dependent quadratures fairly easily inside the Executioner/Quadrature block\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27252#discussioncomment-9024439",
                          "updatedAt": "2024-04-05T17:29:45Z",
                          "publishedAt": "2024-04-05T17:29:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error message after building MOOSE",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "So I encountered an error while updating my MOOSE so I tried to start everything from scratch. But during the build of MOOSE I encountered the error below. I git clean -xfd and rebuilt WASP but still did not work. Below is the error message.\nn file included from /home/emmanuel324/projects/moose/framework/build/unity_src/base_Unity.C:21:\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addParametersToList(wasp::DataArray&, const InputParameters&, const std::set<std::__cxx11::basic_string >&, int, int, int, int, const std::string&)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:529:9: error: 'client_snippet_support' was not declared in this scope\n529 |     if (client_snippet_support && !default_value.empty())\n|         ^~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:531:32: error: 'm_text_format_snippet' is not a member of 'wasp::lsp'\n531 |       text_format = wasp::lsp::m_text_format_snippet;\n|                                ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:536:32: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n536 |       text_format = wasp::lsp::m_text_format_plaintext;\n|                                ^~~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:544:45: error: too many arguments to function 'bool wasp::lsp::buildCompletionObject(wasp::DataObject&, std::ostream&, const std::string&, int, int, int, int, const std::string&, int, const std::string&, const std::string&, bool, bool)'\n544 |     pass &= wasp::lsp::buildCompletionObject(*item,\n|             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n545 |                                              errors,\n|                                              ~~~~~~~\n546 |                                              param_name,\n|                                              ~~~~~~~~~~~\n547 |                                              replace_line_beg,\n|                                              ~~~~~~~~~~~~~~~~~\n548 |                                              replace_char_beg,\n|                                              ~~~~~~~~~~~~~~~~~\n549 |                                              replace_line_end,\n|                                              ~~~~~~~~~~~~~~~~~\n550 |                                              replace_char_end,\n|                                              ~~~~~~~~~~~~~~~~~\n551 |                                              insert_text,\n|                                              ~~~~~~~~~~~~\n552 |                                              complete_kind,\n|                                              ~~~~~~~~~~~~~~\n553 |                                              \"\",\n|                                              ~~~\n554 |                                              doc_string,\n|                                              ~~~~~~~~~~~\n555 |                                              false,\n|                                              ~~~~~~\n556 |                                              false,\n|                                              ~~~~~~\n557 |                                              text_format);\n|                                              ~~~~~~~~~~~~\nIn file included from /home/emmanuel324/projects/moose/framework/build/header_symlinks/MooseServer.h:13,\nfrom /home/emmanuel324/projects/moose/framework/src/base/MooseApp.C:53,\nfrom /home/emmanuel324/projects/moose/framework/build/unity_src/base_Unity.C:13:\n/home/emmanuel324/projects/moose/framework/contrib/wasp/install/include/wasplsp/LSP.h:604:6: note: declared here\n604 | bool buildCompletionObject( DataObject        & object          ,\n|      ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addSubblocksToList(wasp::DataArray&, const std::string&, int, int, int, int, const std::string&, bool)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:618:25: error: 'client_snippet_support' was not declared in this scope\n618 |       int text_format = client_snippet_support ? wasp::lsp::m_text_format_snippet\n|                         ^~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:618:61: error: 'm_text_format_snippet' is not a member of 'wasp::lsp'\n618 |       int text_format = client_snippet_support ? wasp::lsp::m_text_format_snippet\n|                                                             ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:619:61: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n619 |                                                : wasp::lsp::m_text_format_plaintext;\n|                                                             ^~~~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:641:47: error: too many arguments to function 'bool wasp::lsp::buildCompletionObject(wasp::DataObject&, std::ostream&, const std::string&, int, int, int, int, const std::string&, int, const std::string&, const std::string&, bool, bool)'\n641 |       pass &= wasp::lsp::buildCompletionObject(*item,\n|               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n642 |                                                errors,\n|                                                ~~~~~~~\n643 |                                                subblock_name,\n|                                                ~~~~~~~~~~~~~~\n644 |                                                replace_line_beg,\n|                                                ~~~~~~~~~~~~~~~~~\n645 |                                                replace_char_beg,\n|                                                ~~~~~~~~~~~~~~~~~\n646 |                                                replace_line_end,\n|                                                ~~~~~~~~~~~~~~~~~\n647 |                                                replace_char_end,\n|                                                ~~~~~~~~~~~~~~~~~\n648 |                                                insert_text,\n|                                                ~~~~~~~~~~~~\n649 |                                                complete_kind,\n|                                                ~~~~~~~~~~~~~~\n650 |                                                \"\",\n|                                                ~~~\n651 |                                                doc_string,\n|                                                ~~~~~~~~~~~\n652 |                                                false,\n|                                                ~~~~~~\n653 |                                                false,\n|                                                ~~~~~~\n654 |                                                text_format);\n|                                                ~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/contrib/wasp/install/include/wasplsp/LSP.h:604:6: note: declared here\n604 | bool buildCompletionObject( DataObject        & object          ,\n|      ^~~~~~~~~~~~~~~~~~~~~\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C: In member function 'bool MooseServer::addValuesToList(wasp::DataArray&, const InputParameters&, const\nstd::set<std::__cxx11::basic_string >&, const std::string&, const std::set<std::__cxx11::basic_string >&, int, int, int, int)':\n/home/emmanuel324/projects/moose/framework/src/base/MooseServer.C:804:57: error: 'm_text_format_plaintext' is not a member of 'wasp::lsp'\n804 |                                              wasp::lsp::m_text_format_plaintext);\n|                                                         ^~~~~~~~~~~~~~~~~~~~~~~\nCompiling C++ (in opt mode) /home/emmanuel324/projects/moose/framework/build/unity_src/geomsearch_Unity.C...\nCompiling C++ (in opt mode) /home/emmanuel324/projects/moose/framework/build/unity_src/postprocessors_Unity.C...\nmake: *** [/home/emmanuel324/projects/moose/framework/build/unity_src/base_Unity.x86_64-pc-linux-gnu.opt.lo] Error 1\nmake: *** Waiting for unfinished jobs....\n(python-stack) [emmanuel324@tinkercliffs1 test]$",
          "url": "https://github.com/idaholab/moose/discussions/27294",
          "updatedAt": "2024-04-05T16:33:44Z",
          "publishedAt": "2024-04-05T16:00:15Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nthis is because your version of wasp in not in sync with your version of moose.\nIf you used the conda installation path, then you need to \u2018conda update moose-dev\u2019\nIf you are building everything from source, then the update wasp script in moose/scripts should have fixed this\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27294#discussioncomment-9023783",
                  "updatedAt": "2024-04-05T16:32:04Z",
                  "publishedAt": "2024-04-05T16:32:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Ok seems @brandonlangley is helping you on the other thread. I am closing this one, please avoid double posting in the future.",
                  "url": "https://github.com/idaholab/moose/discussions/27294#discussioncomment-9023798",
                  "updatedAt": "2024-04-05T16:33:44Z",
                  "publishedAt": "2024-04-05T16:33:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Adding sink and recombination to the Multi-phase poly-crystalline Allen-Cahn Kernel",
          "author": {
            "login": "jackeggemeyer"
          },
          "bodyText": "I am trying to add sink and recombination to the Multi-phase poly-crystalline Allen-Cahn Kernel. The top equation is the equation already used by MOOSE. The second equation is from: https://www.sciencedirect.com/science/article/pii/S0927025622004839#! and it adds vacancy production, vacancy-interstial recombination, and sink terms to the grand potential equation in terms of chemical potential. The \"MaskedBodyForce\" kernal is being used to create the vacancy production part h_m*s^o_v. Does moose have kernals that could be used to simulate the two other parts of the equation? I am new to MOOSE.",
          "url": "https://github.com/idaholab/moose/discussions/27285",
          "updatedAt": "2024-05-30T19:41:09Z",
          "publishedAt": "2024-04-04T18:07:38Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "richmondodufisan"
                  },
                  "bodyText": "I don't think so, you'll probably have to create your own custom kernel. it will work seamlessly with the phase field module.\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/examples/ex02_kernel.html\nthis was the video I watched to learn all of MOOSE's features a while back, it's 12 hrs long (took me a week) but it really is worth it:\nhttps://www.youtube.com/watch?v=2tJwBsYaLaI&list=PLHI-fE3lo53508O5k9nli7BNMNdxFQSF5&index=1&t=11789s",
                  "url": "https://github.com/idaholab/moose/discussions/27285#discussioncomment-9022021",
                  "updatedAt": "2024-04-05T13:54:05Z",
                  "publishedAt": "2024-04-05T13:54:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to mesh 2 phase microstructure",
          "author": {
            "login": "smitra43"
          },
          "bodyText": "I have a large number of square images. they are all binary images of 2 of the same phases in different blends. I want to simulate elastic deformation in them. my intention is to do a uniform mesh where each pixel is an element of my mesh. but how can I input an image (or numpy array for image) into moose. how will it assign different stiffness values depending on the location? Here is my code:\nimport numpy as np\nimport h5py\nimport os\n\ndef read_microstructure_from_hdf5(filepath, dataset_name=\"dataset\"):\n    with h5py.File(filepath, 'r') as file:\n        microstructure_data = np.array(file[dataset_name][168])\n    return microstructure_data\n\ndef generate_moose_input_file(input_file_path, image_dim):\n    with open(input_file_path, 'w') as file:\n        file.writelines([\n            \"[GlobalParams]\\n\",\n            \"  order = FIRST\\n\",\n            \"  family = LAGRANGE\\n\",\n            \"  displacements = 'disp_x disp_y'\\n\",\n            \"  out_of_plane_strain = strain_zz\\n\",\n            \"[]\\n\\n\",\n            \n            \"[Mesh]\\n\",\n            \"  [./square]\\n\",\n            \"    type = GeneratedMeshGenerator\\n\",\n            f\"    dim = 2\\n\",\n            f\"    nx = {image_dim}\\n\",\n            f\"    ny = {image_dim}\\n\",\n            \"    elem_type = QUAD4\\n\",\n            \"  [../]\\n\",\n            \"[]\\n\\n\",\n            \n            \"[Variables]\\n\",\n            \"  [./disp_x]\\n\",\n            \"  [../]\\n\",\n            \"  [./disp_y]\\n\",\n            \"  [../]\\n\",\n            \"  [./strain_zz]\\n\",\n            \"  [../]\\n\",\n            \"[]\\n\\n\",\n            \n            \"[AuxVariables]\\n\",\n            \"  [./nl_strain_zz]\\n\",\n            \"    order = CONSTANT\\n\",\n            \"    family = MONOMIAL\\n\",\n            \"  [../]\\n\",\n            \"[]\\n\\n\",\n            \n            \"[Materials]\\n\",\n            \"  [./phase1]\\n\",\n            \"    type = GenericConstantMaterial\\n\",\n            \"    properties = 'E nu'\\n\",\n            \"    property_values = '500 0.2'\\n\",\n            \"  [../]\\n\",\n            \"  [./phase2]\\n\",\n            \"    type = GenericConstantMaterial\\n\",\n            \"    properties = 'E nu'\\n\",\n            \"    property_values = '6000 0.3'\\n\",\n            \"  [../]\\n\",\n            \"[]\\n\\n\",\n            \n            \"[BCs]\\n\",\n            \"  [./left]\\n\",\n            \"    type = DirichletBC\\n\",\n            \"    variable = disp_x\\n\",\n            \"    boundary = left\\n\",\n            \"    value = 0.0\\n\",\n            \"  [../]\\n\",\n            \"  [./bottom]\\n\",\n            \"    type = DirichletBC\\n\",\n            \"    variable = disp_y\\n\",\n            \"    boundary = bottom\\n\",\n            \"    value = 0.0\\n\",\n            \"  [../]\\n\",\n            \"[]\\n\\n\",\n            \n            \"[Executioner]\\n\",\n            \"  type = Steady\\n\",\n            \"  solve_type = 'NEWTON'\\n\",\n            \"  petsc_options_iname = '-pc_type -pc_hypre_type'\\n\",\n            \"  petsc_options_value = 'hypre boomeramg'\\n\",\n            \"  nl_rel_tol = 1e-5\\n\",\n            \"  nl_abs_tol = 1e-8\\n\",\n            \"  nl_max_its = 50\\n\",\n            \"[]\\n\\n\",\n            \n            \"[Outputs]\\n\",\n            \"  exodus = true\\n\",\n            \"[]\\n\\n\",\n        ])\n\ndef process_image_to_input_file(filepath, output_folder, dataset_name=\"dataset\"):\n    binary_image = read_microstructure_from_hdf5(filepath, dataset_name)\n    image_dim = binary_image.shape[0]\n    base_name = os.path.splitext(os.path.basename(filepath))[0]\n    input_file_path = os.path.join(output_folder, f\"{base_name}.i\")\n\n    generate_moose_input_file(input_file_path, image_dim)\n\ndef process_images_folder(folder_path, output_folder, dataset_name=\"dataset\"):\n    for file in os.listdir(folder_path):\n        if not file.endswith('.h5') and not file.endswith('.hdf5'):\n            continue\n        filepath = os.path.join(folder_path, file)\n        process_image_to_input_file(filepath, output_folder, dataset_name)\n\nfolder_path = ''\noutput_folder = ''\ndataset_name = \"\"\n\nprocess_images_folder(folder_path, output_folder, dataset_name)",
          "url": "https://github.com/idaholab/moose/discussions/27259",
          "updatedAt": "2024-04-04T16:12:21Z",
          "publishedAt": "2024-04-01T21:29:26Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou can use the PropertyReadFile user object to read a CSV of the values of a space dependent field. The CSV will have to be created upstream of moose\nthen a PiecewiseConstantFromCSV will be able to give the spatial values of these quantities anywhere in the mesh",
                  "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8976987",
                  "updatedAt": "2024-04-01T21:45:18Z",
                  "publishedAt": "2024-04-01T21:45:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So you are already creating the input through a python script here.\nProcessing the data into a CSV that gets loaded by the python-created script will also need to be done by a script.",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8977894",
                          "updatedAt": "2024-04-02T01:15:08Z",
                          "publishedAt": "2024-04-02T00:41:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smitra43"
                          },
                          "bodyText": "i have a very large dataset of images, how should I go about creating the input file besides a python script?",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8978033",
                          "updatedAt": "2024-04-02T01:09:06Z",
                          "publishedAt": "2024-04-02T01:09:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Scripts are the way to go. Updated the text",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8978073",
                          "updatedAt": "2024-04-02T01:15:26Z",
                          "publishedAt": "2024-04-02T01:15:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smitra43"
                          },
                          "bodyText": "MICRO2D_homogenized.txt\nMICRO2D_homogenized_material_properties.csv\nI keep getting errors like \"stress not found in block 0\" and other things not found in block 0.",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8978806",
                          "updatedAt": "2024-04-02T03:40:39Z",
                          "publishedAt": "2024-04-02T03:40:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Stress is a material property, which should be the defined by the appropriate Material object.\nStarting from an example, you should be able to find the Material you should use. It s probably some sort of strain-stress relationship materisal",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-8978943",
                          "updatedAt": "2024-04-02T04:10:49Z",
                          "publishedAt": "2024-04-02T04:10:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smitra43"
                          },
                          "bodyText": "so these are artificial microstructures and so I won't be able to find the \"material\"  - hence the csv file so that I can define the young's modulus and poisson's ratio at each element. Hence I was thinking of creating a custom material but I guess this is not the way to go?\n[UserObjects]\n[./read_properties]\ntype = PropertyReadFile\nprop_file_name = '/storage/coda1/p-skalidindi7/0/shared/MOOSE/MICRO2D_homogenized_mat_prop.csv'\nread_type = 'element'\nnprop = 4\n[../]\n[./stress]\ntype = ComputeFiniteStrainElasticStress\n[../]\n[]\n[Functions]\n[./youngs_modulus]\ntype = PiecewiseConstantFromCSV\nread_prop_user_object = read_properties\nread_type = 'element'\ncolumn_number = 2\n[../]\n[./poissons_ratio]\ntype = PiecewiseConstantFromCSV\nread_prop_user_object = read_properties\nread_type = 'element'\ncolumn_number = 3\n[../]\n[]\n[Materials]\n[./elastic_properties]\ntype = CustomElasticMaterial\nyoungs_modulus_function = youngs_modulus\npoissons_ratio_function = poissons_ratio\n[../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-9010712",
                          "updatedAt": "2024-04-04T14:38:39Z",
                          "publishedAt": "2024-04-04T14:38:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nthis looks fine to me for having element dependent material properties.\nyou do need to be able to generate a CSV file ahead of the simulation\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27259#discussioncomment-9011920",
                          "updatedAt": "2024-04-04T16:12:22Z",
                          "publishedAt": "2024-04-04T16:12:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Injection and extraction cycles",
          "author": {
            "login": "clariu25"
          },
          "bodyText": "Hello!\nI'm trying to define a geothermal reservoir using Porous flow. In the current file I have only 1 well that is producing. For that I'm using the PorousFlowPolyLineSink, for both mass and heat extraction. I allow the system to reach equilibrium and the Dirac Kernels only start after t=0. I'm using a ConditionalFunctionEnableControl for this\nFor the production, I set the flow positive, to extract. I see a decrease of the pressure around the well but, for some reason, the temperature increases around the well for the first steps. Later, the temperature decreases around the well, increases a bit further and then comes back to the initial temperature. Shouldn't I only see decrease of temperature?\n[DiracKernels]\n  [production_T]\n    type = PorousFlowPolyLineSink\n    variable = temperature\n    SumQuantityUO = extracted_heat\n    point_file = point_130m.bh\n    fluid_phase = 0\n    p_or_t_vals = 0\n    fluxes = 0.6 # 2Kg/s over 6m well\n    use_enthalpy = true\n  []\n  [production_P]\n    type = PorousFlowPolyLineSink\n    variable = porepressure\n    SumQuantityUO = extracted_mass\n    point_file = point_130m.bh\n    p_or_t_vals = 0\n    fluxes = 0.3 # 2Kg/s over 6m well\n  []\n[]\n\nI'm attaching the input and the point files.\nI would really appreciate if someone could take a look at this. Thank you\nPF_THM_Prod_1yr.zip",
          "url": "https://github.com/idaholab/moose/discussions/27218",
          "updatedAt": "2024-04-04T15:41:18Z",
          "publishedAt": "2024-03-28T19:30:31Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis doesnt look too physical indeed.\nIs the result converged?\nI see\n  nl_rel_tol = 1e-6\n  nl_rel_step_tol = 1e-4\n\nin the executioner which is potentially accepting unconverged solutions. Especially with automatic scaling as the residual for each variables are scaled\nIs this something you could solve without the mechanics part first? To see if the temperature problem is well converged\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27218#discussioncomment-8959788",
                  "updatedAt": "2024-03-30T14:43:46Z",
                  "publishedAt": "2024-03-30T14:43:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "clariu25"
                          },
                          "bodyText": "Hello! Thanks for replying and for the suggestions.\nThe model seemed to be converging. Most NL values were in the 1e-5 to 1e-8 orders, and the temperature residuals were much lower than the pressure ones.\nI removed the mechanics part and now I'm only doing TH and I also reduced the tolerance. Still, I'm getting the same result.\n  nl_rel_tol = 1e-8\n  nl_rel_step_tol = 1e-8\n  l_tol = 1e-8\n\nI reduced the element size, just to test it and it did not have much effect. By removing the automatic scaling, the convergence is better, both variable residuals are in the order of 1e-12 now but the issue with the temperature is still there.\nFor what I read in some other discussions, the PorousFlowPolyLineSink is a very good option to simulate geothermal production, right? Or is there a better solution for the heat extraction? I know that for injection one should use other options.\nThank you again\nPF_TH_Prod.zip",
                          "url": "https://github.com/idaholab/moose/discussions/27218#discussioncomment-9010371",
                          "updatedAt": "2024-04-04T14:13:25Z",
                          "publishedAt": "2024-04-04T14:13:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "Hi @clariu25\nFirst, i would recommend to run the model with only one injection point, to make it easy for understanding and interpretation.\nHave you tried to apply heat source using BC rather than direckernel?\nRahim",
                  "url": "https://github.com/idaholab/moose/discussions/27218#discussioncomment-9011568",
                  "updatedAt": "2024-04-04T15:50:53Z",
                  "publishedAt": "2024-04-04T15:41:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Outputting a .vtk file for a simple example not working",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "I have an input file (see below) titled pressure_diffusion.i. I'm trying to output .vtk file types (as I'm interested in then converting the .vtk file to a .msh file for a project using meshio). Currently, I do this by setting vtk = true in the [Outputs] section within the input file. However, when I execute the input file, I don't get a .vtk file. Instead I get four files titled: pressure_diffusion_out_001.pvtu, pressure_diffusion_out_001_0.vtu, pressure_diffusion_out_000.pvtu and pressure_diffusion_out_000_0.vtu. This link (link: https://mooseframework.inl.gov/syntax/Outputs/index.html) says that VTK output types require --enable-vtk \"when building libMesh\", but I don't know what this means?\nHow can I output a .vtk file type which I can then convert to a .msh file using some other intermediate file conversion package?\n[Mesh]\n  type = GeneratedMesh # Can generate simple lines, rectangles and rectangular prisms\n  dim = 2 # Dimension of the mesh\n  nx = 100 # Number of elements in the x direction\n  ny = 10 # Number of elements in the y direction\n  xmax = 0.304 # Length of test chamber\n  ymax = 0.0257 # Test chamber radius\n[]\n\n[Problem]\n  type = FEProblem # This is the \"normal\" type of Finite Element Problem in MOOSE\n  coord_type = RZ # Axisymmetric RZ\n  rz_coord_axis = X # Which axis the symmetry is around\n[]\n\n[Variables]\n  [pressure]\n    # Adds a Linear Lagrange variable by default\n  []\n[]\n\n[Kernels]\n  [diffusion]\n    type = ADDiffusion # Laplacian operator\n    variable = pressure # Operate on the \"pressure\" variable from above\n  []\n[]\n\n[BCs]\n  [inlet]\n    type = ADDirichletBC # Simple u=value BC\n    variable = pressure # Variable to be set\n    boundary = left # Name of a sideset in the mesh\n    value = 4000 # (Pa) From Figure 2 from paper. First data point for 1mm spheres.\n  []\n  [outlet]\n    type = ADDirichletBC\n    variable = pressure\n    boundary = right\n    value = 0 # (Pa) Gives the correct pressure drop from Figure 2 for 1mm spheres\n  []\n[]\n\n[Executioner]\n  type = Steady # Steady state problem\n  solve_type = NEWTON # Perform a Newton solve\n\n  # Set PETSc parameters to optimize solver efficiency\n  petsc_options_iname = '-pc_type -pc_hypre_type' # PETSc option pairs with values below\n  petsc_options_value = ' hypre    boomeramg'\n[]\n\n[Outputs]\n  vtk = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27277",
          "updatedAt": "2024-04-04T12:49:27Z",
          "publishedAt": "2024-04-04T08:51:57Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere are a few VTK-like formats. vtk, vtu, pvtu etc.\nI think the VTK documentation describes them better than I can. We output pvtu to be able to perform parallel IO.\nHopefully meshio can convert .pvtus. If not the paraview can be used to convert to something meshio can read\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27277#discussioncomment-9009342",
                  "updatedAt": "2024-04-04T12:50:01Z",
                  "publishedAt": "2024-04-04T12:49:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can MOOSE output STL files of the system under consideration?",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "I'm developing a project where I'd like MOOSE to output an STL file of the system under consideration? I will start by using a .msh file created with Gmsh, but then I intend to perform topology optimisation on the system, and I want to output an STL file of the topology optimised component. Is this possible?",
          "url": "https://github.com/idaholab/moose/discussions/27023",
          "updatedAt": "2024-04-04T11:33:59Z",
          "publishedAt": "2024-03-07T20:59:23Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe dont have this capability.\nI think reading a STL then meshing it is more within our interests currently than outputting STLs.\nSo if you want to do this, you ll need to implement it yourself.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8712637",
                  "updatedAt": "2024-03-07T21:14:50Z",
                  "publishedAt": "2024-03-07T21:14:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Thanks for your swift response. So would I at least be able to get the .msh file of the outputted component and then you\u2019re saying I\u2019d have to produce some code that converts the outputted .msh file into an STL file? Where can I find a list of mesh file types (e.g., .msh) outputted by MOOSE so I can potentially explore other options if converting from .msh to STL is not possible?",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8712782",
                          "updatedAt": "2024-03-07T21:33:36Z",
                          "publishedAt": "2024-03-07T21:29:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "https://mooseframework.inl.gov/source/meshgenerators/FileMeshGenerator.html has a list",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8712823",
                          "updatedAt": "2024-03-07T21:33:13Z",
                          "publishedAt": "2024-03-07T21:33:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I added it for convenience but otherwise there s another list under the Outputs syntax",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8712828",
                          "updatedAt": "2024-03-07T21:33:30Z",
                          "publishedAt": "2024-03-07T21:33:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "So just to be clear, I should be able to write my final topology optimized component to a .msh ASCII file (as suggested below)? I'm unsure as below it says that 'these formats... could be easily added to MOOSE' - does this mean I'd have to somehow do some extra steps to add the capability of writing a .msh ASCII file in MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8727051",
                          "updatedAt": "2024-03-09T06:03:38Z",
                          "publishedAt": "2024-03-09T06:03:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nYes libmesh can write with these formats but moose cannot for now. So you need to create a new MOOSE output object that uses the libmesh APIs to trigger an output of the moose mesh to a gmsh .msh.\nThis should be fairly straightforward to do but it s C++ work so you should have followed one of the development tutorials\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8729764",
                          "updatedAt": "2024-03-09T14:34:55Z",
                          "publishedAt": "2024-03-09T14:34:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "@GiudGiud you mentioned that reading in an STL and meshing it is something being investigated by MOOSE. I'm currently trying to convert a binary STL file to a MSH ASCII file using the 'gmsh'/'meshio' libraries but not having any luck - do you know a way around this problem?",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8741089",
                          "updatedAt": "2024-03-11T05:59:45Z",
                          "publishedAt": "2024-03-11T05:59:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nSTL is not usually convertible to a mesh file without specialized meshing software. i think gmsh should be able to do it. otherwise, you can use Cubit. If you work for a university there is a student version (of coreform cubit, a private company's product), if you work for a US government contractor, there is a release version (of regular cubit) by Sandia National Lab.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8749875",
                          "updatedAt": "2024-03-11T18:19:43Z",
                          "publishedAt": "2024-03-11T18:19:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Hi @GiudGiud,\nYou said the following above:\n\nYes libmesh can write with these formats but moose cannot for now. So you need to create a new MOOSE output object that uses the libmesh APIs to trigger an output of the moose mesh to a gmsh .msh.\n\nIs there an easy to follow example where someone has done this (i.e., created a MOOSE app that uses the libmesh APIs to trigger an output of the MOOSE mesh to a gmsh .msh file)? Or would my best bet be to follow the 11hr tutorial closely (particularly the sections on adding functionality to MOOSE via c++)?",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8914676",
                          "updatedAt": "2024-03-26T12:35:55Z",
                          "publishedAt": "2024-03-26T12:35:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nThere isnt a tutorial on creating a new Outputs object.\nHowever, Exodus, Tecplot, etc most of the outputs are exactly that, a MOOSE object using libmesh APIs.\nThe code in libmesh is there\nhttps://github.com/libMesh/libmesh/blob/devel/src/mesh/gmsh_io.C\nwe just need to call it from MOOSE\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-8915899",
                          "updatedAt": "2024-03-26T14:11:35Z",
                          "publishedAt": "2024-03-26T14:11:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "@GiudGiud where can I find the header files that are used to define Exodus/Tecplot MOOSE objects? I'm hoping I can copy the C++ code for these header files and make a few (hopefully simple) changes so that I can create a header file that allows my MOOSE-App to output .msh files?",
                          "url": "https://github.com/idaholab/moose/discussions/27023#discussioncomment-9004631",
                          "updatedAt": "2024-04-04T04:10:48Z",
                          "publishedAt": "2024-04-04T04:10:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}