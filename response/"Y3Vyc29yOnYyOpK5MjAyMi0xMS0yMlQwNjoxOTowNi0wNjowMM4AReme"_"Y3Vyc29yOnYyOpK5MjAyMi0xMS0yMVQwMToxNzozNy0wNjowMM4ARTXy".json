{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0xMS0yMVQwMToxNzozNy0wNjowMM4ARTXy"
    },
    "edges": [
      {
        "node": {
          "title": "Can I use FSP for EigenValue calculation",
          "author": {
            "login": "js-jixu"
          },
          "bodyText": "Hi, experts.\n\n\n\nI'm using InversePowerMethod to do some eigenvalue calculation. When the problem size is large, the computational cost of using SMP will be high. So can FSP be used in the eigenvalue calculation of MOOSE (just like the steady or transient calculation)\uff1f\n\n\n\nI found that compared to InversePowerMethod, MOOSE now recommends Eigenvalue for eigenvalue calculation. I now have an Executioner for InversePowerMethod that I did before. But when I wanted to transform it from InversePowerMethod to Eigenvalue, I found some differences between InversePowerMethod and Eigenvalue. For example, in InversePowerMethod, I will set xdiff and bnorm, but these are not available in Eigenvalue. How can this be solved?",
          "url": "https://github.com/idaholab/moose/discussions/22728",
          "updatedAt": "2022-12-06T14:24:33Z",
          "publishedAt": "2022-11-17T01:56:15Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\n\nI dont know that it's been used for eigenvalue calculations\n\n\nThis will require additional development to provide these settings in our new eigenvalue executioner.\n\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22728#discussioncomment-4179251",
                  "updatedAt": "2022-11-18T17:35:33Z",
                  "publishedAt": "2022-11-18T17:35:32Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For 2 you should be able to reproduce the previous behavior using the\n\nnormalization postprocessor to indicate what computes the norm\nnormal_factor : the norm to reach after normalization",
                          "url": "https://github.com/idaholab/moose/discussions/22728#discussioncomment-4180670",
                          "updatedAt": "2022-11-18T21:03:09Z",
                          "publishedAt": "2022-11-18T21:03:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@YaqiWang will know more than me about normalization of the output of the eigenvalue executioner",
                          "url": "https://github.com/idaholab/moose/discussions/22728#discussioncomment-4180678",
                          "updatedAt": "2022-11-18T21:04:29Z",
                          "publishedAt": "2022-11-18T21:04:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "I have used Eigenvalue and NonlinearEigen. NonlinearEigen can run but the convergence is not good, and Eigenvalue can't run.\n# [Executioner]\n#   type = NonlinearEigen\n#   free_power_iterations = 6\n\n#   normalization = 'powernorm'\n#   normal_factor = 21230\n\n#   bx_norm = 'bnorm'\n#   k0 = 1.3\n#   l_max_its = 200\n#   nl_abs_tol = 1e-7\n\n#   solve_type = 'NEWTON'\n#   petsc_options = '-snes_converged_reason -ksp_converged_reason -snes_linesearch_monitor'\n#   petsc_options_iname = '-pc_type -pc_factor_shift_type -pc_factor_mat_solver_package'\n#   petsc_options_value = 'lu       NONZERO               superlu_dist'\n\n#   line_search = none\n#   automatic_scaling = true\n# []\n\n# [Executioner]\n#   type = Eigenvalue\n#   free_power_iterations = 6\n\n#   normalization = 'powernorm'\n#   normal_factor = 21230\n\n#   initial_eigenvalue = 1\n#   l_max_its = 200\n#   nl_abs_tol = 1e-7\n\n#   solve_type = 'NEWTON'\n#   petsc_options = '-snes_converged_reason -ksp_converged_reason -snes_linesearch_monitor'\n#   petsc_options_iname = '-pc_type -pc_factor_shift_type -pc_factor_mat_solver_package'\n#   petsc_options_value = 'lu       NONZERO               superlu_dist'\n\n#   line_search = none\n#   automatic_scaling = true\n# []\n\nSo I think I'd better use InversePowerMethod.",
                          "url": "https://github.com/idaholab/moose/discussions/22728#discussioncomment-4202460",
                          "updatedAt": "2022-11-22T08:07:36Z",
                          "publishedAt": "2022-11-22T08:06:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "When I use Eigenvalue, I meet a Segmentation fault (signal 11).\n\n\nI want to know if this change has been merged into the latest moose, I want to wait until it is merged to update moose and do some FSP testing.",
                          "url": "https://github.com/idaholab/moose/discussions/22728#discussioncomment-4202535",
                          "updatedAt": "2022-11-22T08:15:33Z",
                          "publishedAt": "2022-11-22T08:15:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "This very very very easy question of tensor mechanics cannot get converge...",
          "author": {
            "login": "Wang-Yihu"
          },
          "bodyText": "I try to set a rigid body. I only set a fix boundary condition and a pressure. The mesh volume is only 1. But this so easy question cannot get converge....Could anyone explain the reason?\nThe input file is here.\n\nThe question is here\n\nand the output is\n0 Nonlinear |R| = 5.000000e+05\n      0 Linear |R| = 5.000000e+05\n      1 Linear |R| = 7.816385e+02\n      2 Linear |R| = 2.736129e+02\n      3 Linear |R| = 4.362376e+01\n      4 Linear |R| = 3.015174e+01\n      5 Linear |R| = 1.570861e-02\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0",
          "url": "https://github.com/idaholab/moose/discussions/22716",
          "updatedAt": "2022-11-21T23:28:51Z",
          "publishedAt": "2022-11-16T03:08:17Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Wang-Yihu"
                  },
                  "bodyText": "Input file:\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n[Mesh]\n  [file]\n    type = FileMeshGenerator\n    file = fangkuaiceshi.exo\n  []\n[]\n[BCs]\n  [gudingx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'XIA'\n    value = 0\n  []\n  [gudingy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'XIA'\n    value = 0\n  []\n  [gudingz]\n    type = DirichletBC\n    variable = disp_z\n    boundary = 'XIA'\n    value = 0\n  []\n  [Pressure]\n    [LINE]\n      boundary = 'SHANG'\n      function = 1e6\n    []\n  []\n[]\n[Modules/TensorMechanics/Master]\n  [all]\n    add_variables = true\n    generate_output = 'vonmises_stress stress_xx stress_yy \n    stress_zz stress_xy stress_yz stress_zx'\n    strain = FINITE\n  []\n[]\n[Materials]\n  [./elasticity_tensor_steel]\n    youngs_modulus = 1e100 #Pa\n    poissons_ratio = 1e-10\n    type = ComputeIsotropicElasticityTensor\n  [../]\n  [./stress1]\n    type = ComputeFiniteStrainElasticStress\n  [../]\n[]\n[Executioner]\n  type = Steady\n  nl_max_its = 100\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre boomeramg'\n[]\n[Outputs]\n  exodus = true\n[]\n\n\nand mesh:\nfangkuaiceshi.zip",
                  "url": "https://github.com/idaholab/moose/discussions/22716#discussioncomment-4152740",
                  "updatedAt": "2022-11-16T03:10:03Z",
                  "publishedAt": "2022-11-16T03:10:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Wang-Yihu"
                  },
                  "bodyText": "If I change the Young modulus to 1e10 from 1e100, it will converge. I do not know the reason.\nOr how can I simulate a rigid body in MOOSE Multiphysics?",
                  "url": "https://github.com/idaholab/moose/discussions/22716#discussioncomment-4153600",
                  "updatedAt": "2022-11-16T06:22:01Z",
                  "publishedAt": "2022-11-16T06:22:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "See #22750",
                  "url": "https://github.com/idaholab/moose/discussions/22716#discussioncomment-4199917",
                  "updatedAt": "2022-11-21T23:28:50Z",
                  "publishedAt": "2022-11-21T23:28:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can I set the heat source at the boundary?",
          "author": {
            "login": "seongwonHam"
          },
          "bodyText": "Hello, guys.\nNow I want to simulate the PC radiator (for cooling) using MOOSE, but I have some trouble setting the boundary condition.\nTo confirm the temperature change on the hot side, I couldn't set the temp BCs at the hot side (bottom).\n(because If I set the boundary condition, the temperature doesn't change at the simulation!)\nSo, I want to set the heat source at this simulation, but I don't know how can I make the heat source only on the bottom hot side.\nWhen I used the \"Heat Source\" at the kernel, all of the mesh make the volumetric heat, and my plan would fail.\nPlease let me know how I can set the heat source at the boundary.\nThanks a lot for your kindness!\n\nHam",
          "url": "https://github.com/idaholab/moose/discussions/22713",
          "updatedAt": "2022-12-10T07:25:25Z",
          "publishedAt": "2022-11-16T02:08:38Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "maxnezdyur"
                  },
                  "bodyText": "I think you may be looking for ConvectiveHeatFluxBC or a Neumann BC.\nhttps://mooseframework.inl.gov/source/bcs/ConvectiveHeatFluxBC.html",
                  "url": "https://github.com/idaholab/moose/discussions/22713#discussioncomment-4161804",
                  "updatedAt": "2022-11-16T22:46:44Z",
                  "publishedAt": "2022-11-16T22:46:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Agreed. The boundary conditions will let you specify a heat flux, either from a heat source or towards the heat sink.",
                          "url": "https://github.com/idaholab/moose/discussions/22713#discussioncomment-4199893",
                          "updatedAt": "2022-11-21T23:21:03Z",
                          "publishedAt": "2022-11-21T23:21:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to build a pure convection question",
          "author": {
            "login": "wangzhaohao"
          },
          "bodyText": "hello, i want to build a PDE like this ,\n\nand i write a kernel about convection.\nbut when i use it, there is somthing wrong\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nthere is my .C\n#include \"VelocityPorosity.h\"\n#include \"MooseMesh.h\"\n\nregisterMooseObjectAliased(\"RestructeApp\", VelocityPorosityKernel, \"VelocityPorosity\");\n\nInputParameters\nVelocityPorosityKernel::validParams()\n{\n  InputParameters params = Kernel::validParams();\n  // params.addParam<MaterialPropertyName>(\"velocity_porosity\", \"velocity_porosity\", \"the porosity velociy\");\n\tRealVectorValue vp(1, 0, 0);\n\tparams.addParam<RealVectorValue>(\"vp\", vp, \"the velocity (default is (1, 0, 0))\");\n  params.addClassDescription(\"the kernel is to calcate the porosity convection\");\n\n  return params;\n}\n\nVelocityPorosityKernel::VelocityPorosityKernel(const InputParameters & parameters)\n  : Kernel(parameters),\n  // _velocity_porosity(getMaterialProperty<Real>(\"velocity_porosity\")),\n\t_vp(getParam<RealVectorValue>(\"vp\"))\n{\n}\n\nReal\nVelocityPorosityKernel::computeQpResidual()\n{\n\t// if (isParamValid(\"vp\"))\n\t\treturn _vp * _grad_u[_qp] * _test[_i][_qp];\n\t// else\n\t//   return _velocity_porosity[_qp] * _grad_u[_qp](0) * _test[_i][_qp];\n}\n\nand .i\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  nx = 5\n[]\n\n[Variables]\n  [u][]\n[]\n\n[Kernels]\n  [u_velocity]\n    type = VelocityPorosity\n    variable = u\n  []\n  [u_body]\n    type = BodyForce\n    variable = u\n    value = 1\n   []\n[]\n\n[BCs]\n  [u_left]\n    type = DirichletBC\n    variable = u\n    value = 1\n    boundary  = right \n  []\n[]\n\n[Executioner]\n  type = Steady\n\n  solve_type = NEWTON \n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/22732",
          "updatedAt": "2022-11-21T23:16:07Z",
          "publishedAt": "2022-11-17T11:29:59Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Did you override computeQpJacobian? If not, the Jacobian will be entirely zero (except the body force term), hence the error.",
                  "url": "https://github.com/idaholab/moose/discussions/22732#discussioncomment-4166570",
                  "updatedAt": "2022-11-17T11:37:14Z",
                  "publishedAt": "2022-11-17T11:37:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22732#discussioncomment-4166586",
                          "updatedAt": "2022-11-17T11:39:38Z",
                          "publishedAt": "2022-11-17T11:39:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "If for whatever reason you don't want to derive/code the Jacobian, you can use AD.",
                          "url": "https://github.com/idaholab/moose/discussions/22732#discussioncomment-4166645",
                          "updatedAt": "2022-11-17T11:47:09Z",
                          "publishedAt": "2022-11-17T11:46:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We strongly recommend you use AD to develop your kernel. Please see this documentation\nhttps://mooseframework.inl.gov/automatic_differentiation/#!\nyou will need to inherit the ADKernel, and you will need to retrieve properties as AD",
                          "url": "https://github.com/idaholab/moose/discussions/22732#discussioncomment-4199866",
                          "updatedAt": "2022-11-21T23:16:07Z",
                          "publishedAt": "2022-11-21T23:16:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Mesh adaptivity during one linear step",
          "author": {
            "login": "am-tc01"
          },
          "bodyText": "Hi,\nI am doing steady state thermo-fluid simulations with highly non-linear material properties where the solution changes drastically during one linear iteration. Now since the mesh adaptivity uses variable values from the previous step, it is sometimes difficult to converge. My question is, is it possible to do mesh adaptivity during one linear iteration?\nRegards!",
          "url": "https://github.com/idaholab/moose/discussions/22734",
          "updatedAt": "2022-12-10T07:25:59Z",
          "publishedAt": "2022-11-17T14:33:21Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nno we do not support that currently. We generally would not want to do that because unconverged solution vectors can be completely unphysical, there is no guarantee where the non linear solve lands at every iteration, only the final converged step may be physical.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22734#discussioncomment-4199846",
                  "updatedAt": "2022-11-21T23:11:24Z",
                  "publishedAt": "2022-11-21T23:11:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Is the solve with adaptivity not converging though? You may run multiple cycles of adaptivity per timestep",
                          "url": "https://github.com/idaholab/moose/discussions/22734#discussioncomment-4199852",
                          "updatedAt": "2022-11-21T23:13:27Z",
                          "publishedAt": "2022-11-21T23:13:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "When the ACInterface module changes Kappa, why does it not converge\uff1f",
          "author": {
            "login": "biaogxb"
          },
          "bodyText": "I carefully read the snow.i example and found that the \u2018InterfaceOrientationMaterial\u2019 is used to calculate the kappa\uff08eps in that article\uff09 value I need,\n\nso I changed the code for calculating \u2018ACInterface\u2019 as follows\uff1a\n'[./anisoACinterface] type = ACInterface variable = eta  kappa_name=eps [../]'\n'[./material] type = InterfaceOrientationMaterial op = eta [../]'\n\nI don't know why my calculation is not convergent. Can't I directly fill \u2018eps\u2019 into ACInterface as \u2018kappa\u2019\uff1f\nHere is my input file\uff1a\ninput.txt\nCan someone help me? Thank you\uff01",
          "url": "https://github.com/idaholab/moose/discussions/22664",
          "updatedAt": "2023-01-03T23:51:22Z",
          "publishedAt": "2022-11-11T03:20:49Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "What is eps?",
                  "url": "https://github.com/idaholab/moose/discussions/22664#discussioncomment-4113505",
                  "updatedAt": "2022-11-11T03:26:17Z",
                  "publishedAt": "2022-11-11T03:26:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "biaogxb"
                          },
                          "bodyText": "'eps' represents the anisotropic interface parameter in the 'modules/phase_field/src/materials/InterfaceOrientationMaterial.C' source code.\uff08\uff1f\uff09\n\n\nI'm not sure if this is the way to couple the anisotropic interface parameter\uff08eps in InterfaceOrientationMaterial.C\uff09into the ACInterface. Do you have any suggestions\uff1f\nI just want to set the kappa in the ACInterface as shown in the following figure\uff1a\n\n\nDo you have any suggestions\uff1f",
                          "url": "https://github.com/idaholab/moose/discussions/22664#discussioncomment-4113612",
                          "updatedAt": "2022-11-11T03:56:21Z",
                          "publishedAt": "2022-11-11T03:51:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so is eps supposed to be the same as kappa? Pardon my ignorance.\nI would start from a working example, then make the minimal amounts of changes by replacing the object that defines kappa with a slightly modified version",
                          "url": "https://github.com/idaholab/moose/discussions/22664#discussioncomment-4184543",
                          "updatedAt": "2022-11-19T15:14:46Z",
                          "publishedAt": "2022-11-19T15:14:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "biaogxb"
                          },
                          "bodyText": "Ok, thank you. If there is any progress, I hope you can remind me. Thank you very much\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/22664#discussioncomment-4194823",
                          "updatedAt": "2022-11-21T11:52:41Z",
                          "publishedAt": "2022-11-21T11:52:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I won\u2019t be working on this @biaogxb . Please feel free to let us know your progress with this",
                          "url": "https://github.com/idaholab/moose/discussions/22664#discussioncomment-4199800",
                          "updatedAt": "2022-11-21T22:59:52Z",
                          "publishedAt": "2022-11-21T22:59:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Without \"Node Sets\"",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "All,\nI am using a mesh file generated by CUBIT and the MOOSE run generates a strange result.\nI removed \"Node Sets\" and then the result looks good.\nPlease let me know if MOOSE can run without \"Node Sets\" while \"Side Sets\" are kept.\nPlease help,\nS. Thomas",
          "url": "https://github.com/idaholab/moose/discussions/22744",
          "updatedAt": "2022-12-05T18:36:40Z",
          "publishedAt": "2022-11-18T00:55:24Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe should be able to load both node sets and side sets from a cubit generated mesh.\nThere must be something else wrong, like the boundary conditions are not set on the proper sideset.\nPlease note that MOOSE automatically converts nodesets to sidesets at the end of the mesh generation process\nsee this page\nhttps://mooseframework.inl.gov/source/mesh/MooseMesh.html#more_detail\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22744#discussioncomment-4192022",
                  "updatedAt": "2022-11-21T04:59:05Z",
                  "publishedAt": "2022-11-21T04:59:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you very much Guillaume.\nI would like to use this mesh file without Node Sets because it seems working.\nPlease let me know if it is OK.\nSincerely,\nS. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/22744#discussioncomment-4199474",
                          "updatedAt": "2022-11-21T21:48:27Z",
                          "publishedAt": "2022-11-21T21:48:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If the mesh file has the side sets you need then it should work.\nyou will get an error if you try to apply a boundary condition or an interface kernel on a boundary that does not exist\nyou should also be able to see what side set and node set exist in paraview so there s really no way to get it wrong",
                          "url": "https://github.com/idaholab/moose/discussions/22744#discussioncomment-4199586",
                          "updatedAt": "2022-11-21T22:08:39Z",
                          "publishedAt": "2022-11-21T22:08:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE on WSL2/Ubuntu-20.04",
          "author": {
            "login": "oMuransky"
          },
          "bodyText": "Hi Guys,\nI'm trying to repeat the MOOSE installation process from a few of weeks ago on WSL2/Ubuntu but it does not work anymore. When running \"make\" I'm getting a fatal error (missing file:  MooseRevision.h)\nMy current installation process on clean WSL2/Ubuntu:\n#---------------\n# Update Ubuntu & Install pre-requisites \n#---------------\nsudo apt update \nsudo apt upgrade\nsudo apt install build-essential python3 libmpich-dev git python-is-python3 cmake m4 python3-dev \nsudo apt install liblapack-dev libblas-dev libssl-dev bison flex\ncd ~\n#---------------\n# Install/Update cmake\n#---------------\nwget https://github.com/Kitware/CMake/releases/download/v3.23.0/cmake-3.23.0.tar.gz\ntar -zxvf cmake-3.23.0.tar.gz \ncd cmake-3.23.0/\n./bootstrap\nmake\nsudo make install\n#---------------\n# Remove mpich & Install openmpi\n#---------------\nsudo apt-get purge --auto-remove mpich \nsudo apt install openmpi-bin\nwhich runmpi\nrunmpi --version\n#---------------\n# Install MOOSE\n#---------------\nmkdir moose\ncd moose\ngit clone https://github.com/idaholab/moose.git\ncd moose/\ncd scripts/\n./update_and_rebuild_petsc.sh --download-mumps=no --with-mumps=no\n./update_and_rebuild_libmesh.sh \ncd ../framework/\nmake -j 8 <== fails here (fatal error: MooseRevision.h: No such file or directory)",
          "url": "https://github.com/idaholab/moose/discussions/22764",
          "updatedAt": "2022-11-21T21:18:03Z",
          "publishedAt": "2022-11-20T21:09:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Can you scroll up and check if there are any other errors or warnings further up?",
                  "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4190354",
                  "updatedAt": "2022-11-20T21:11:57Z",
                  "publishedAt": "2022-11-20T21:11:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "oMuransky"
                          },
                          "bodyText": "Hello Daniel,\nNo errors or warnings during the \"moose make\" process, however, a few warnings during the \"./update_and_rebuild_libmesh.sh\" process (attached) - not sure why I'm getting these hdf5 warnings because it is installing the hdf5 while running \"./update_and_rebuild_petsc.sh --download-mumps=no --with-mumps=no\"",
                          "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4190387",
                          "updatedAt": "2022-11-20T21:22:50Z",
                          "publishedAt": "2022-11-20T21:22:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this mooserevision.h missing error is a missing python package",
                          "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4191800",
                          "updatedAt": "2022-11-21T03:57:08Z",
                          "publishedAt": "2022-11-21T03:57:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "see this\n#22035 (reply in thread)",
                          "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4191808",
                          "updatedAt": "2022-11-21T03:57:54Z",
                          "publishedAt": "2022-11-21T03:57:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "oMuransky"
                  },
                  "bodyText": "Thanks for pointing me to this thread, Guillaume. Interesting, I installed \"python3-dev\", but the \"packaging\" was still missing (this is new). All what needs to be done is: \"pip install packaging\" and then the \"moose make\" process runs without errors. Many thanks.",
                  "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4191973",
                  "updatedAt": "2022-11-21T04:42:18Z",
                  "publishedAt": "2022-11-21T04:42:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "oMuransky"
                  },
                  "bodyText": "The following process installs NEML, MOOSE, DEER, BLACKBEAR, and links them. Works for me on a clean WSL2/Ubunutu-20.04 (today).\n#---------------\nUpdate Ubuntu & Install pre-requisites\n#---------------\nsudo apt update\u200b\nsudo apt upgrade\nsudo apt install build-essential python3 libmpich-dev git python-is-python3 cmake m4 python3-dev\u200b\nsudo apt install liblapack-dev libblas-dev libssl-dev bison flex\ncd ~\u200b\n#---------------\nInstall required python packages\n#---------------\npip install packaging\n#---------------\nInstall/update cmake\n#---------------\nwget https://github.com/Kitware/CMake/releases/download/v3.23.0/cmake-3.23.0.tar.gz\ntar -zxvf cmake-3.23.0.tar.gz\ncd cmake-3.23.0/\n./bootstrap\nmake\nsudo make install\n#---------------\nRemove MPICH and install OPENMPI (not required)\n#---------------\nsudo apt-get purge --auto-remove mpich\nsudo apt install openmpi-bin\n#---------------\nExport paths in .bashrc file or .bash_profile\n#---------------\nexport MOOSE_DIR=$MOOSE_DIR/home/path-to-moose/moose\nexport NEML_DIR=$NEML_DIR/home/path-to-neml/neml\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH/home/path-to-neml/neml\nsource ~/.bashrc\n#---------------\nInstall NEML\n#---------------\nmkdir moose\u200b\ncd moose\ngit clone https://github.com/Argonne-National-Laboratory/neml.git\ncd neml/\ncmake .\nmake -j 8\n#---------------\nInstall MOOSE\n#---------------\ncd ..\ngit clone https://github.com/idaholab/moose.git\ncd moose/\ncd scripts/\n./update_and_rebuild_petsc.sh --download-mumps=no --with-mumps=no\n./update_and_rebuild_libmesh.sh\nexport MOOSE_DIR=/home/path-to-moose/moose\ncd ../framework/\nmake -j 8\n#---------------\nInstall DEER\n#---------------\ncd ..\ngit clone https://github.com/Argonne-National-Laboratory/deer.git\ncd deer/\nmake -j 8\n#---------------\nInstall BLACKBEAR\n#---------------\ncd ..\ngit clone https://github.com/idaholab/blackbear.git\ncd blackbear/\ngit submodule init\ngit submodule update contrib/neml\nmake -j 8",
                  "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4198845",
                  "updatedAt": "2022-11-24T21:17:23Z",
                  "publishedAt": "2022-11-21T20:15:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Do you think the swap between MPICH and OpenMPI was necessary? We've swapped back and forth over the years. This is more of a curiosity, than troubleshooting question. Cheers!",
                          "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4199149",
                          "updatedAt": "2022-11-21T21:00:35Z",
                          "publishedAt": "2022-11-21T21:00:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oMuransky"
                          },
                          "bodyText": "Hi Jason, we are trying to test the openmpi, because we do have some memory leak when running crystal plasticity simulations in DEER - it seems to be related to MPI, but I'm unsure as yet if replacing MPICH with OpenMPI will sort the problem. Cheers",
                          "url": "https://github.com/idaholab/moose/discussions/22764#discussioncomment-4199273",
                          "updatedAt": "2022-11-21T21:18:04Z",
                          "publishedAt": "2022-11-21T21:18:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to create a rigid body?",
          "author": {
            "login": "Wang-Yihu"
          },
          "bodyText": "How to create a rigid body in MOOSE tensor mechanics? I try to make a material of 1000e9 Pa youngs_modulus or 0.4999 poissons_ratio, but it cannot get converge.\nHow to create a rigid body in MOOSE Multiphysics?",
          "url": "https://github.com/idaholab/moose/discussions/22750",
          "updatedAt": "2022-12-10T07:26:24Z",
          "publishedAt": "2022-11-18T14:43:18Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@bwspenc @recuero",
                  "url": "https://github.com/idaholab/moose/discussions/22750#discussioncomment-4179104",
                  "updatedAt": "2022-11-18T17:16:28Z",
                  "publishedAt": "2022-11-18T17:16:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "bwspenc"
                  },
                  "bodyText": "We don't currently have a rigid body capability. This would be a fairly major undertaking, and we don't really have a need for this for currently funded projects, so I don't anticipate that this is something we would develop in the near future.\nIn the mean time, I think your best bet is to set the Young's modulus to a high value as you suggested. Setting the Poisson's ratio to something close to 0.5 won't make the block rigid -- it will just make it nearly incompressible and make the problem ill conditioned. I guess I don't know what the stiffnesses of your other materials is, so it's hard to say whether the high Young's modulus you suggested would be an issue. You'll generally have better luck converging problems with poor conditioning using LU rather than iterative preconditioners. Using automatic scaling can help too. These settings in your Executioner block might be helpful, although I can't say for sure since I haven't seen the rest of the input:\n  automatic_scaling = true\n  compute_scaling_once = true\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       superlu_dist",
                  "url": "https://github.com/idaholab/moose/discussions/22750#discussioncomment-4198943",
                  "updatedAt": "2022-11-21T20:31:36Z",
                  "publishedAt": "2022-11-21T20:31:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to define an variable coupled AD ElasticityTensor correctly?",
          "author": {
            "login": "echo1115"
          },
          "bodyText": "Hi all,\nI want to define an variable (or aux) coupled AD ElasticityTensor, but it seems that most ElasticityTensor classes in MOOSE are variable (or aux) independed , which I couldn't refer to clearly.\nThe poissons ratio and youngs modulus in my case  are:\npoissons_ratio = 0.23 ;\nyoungs_modulus= 3.0e10* exp(-porosity)* Mm  , where porosity = 0.8\nMm= (1.0+0.23F)(1.0+1.5e-4*(T-293.15)) , where T and F are variables to be coupled.\nI used much time to create such a class and experienced many compilation errors. Coincidentally, it can be compiled successfully now. However, I'm not sure if there are potential hidden errors in it that will make my future calculations wrong. So I paste my h file and C file here.\nActurally, I'm quite uncertain about whether I should define the\n\n_temp and _fluence as 'ADVariableValue ' ?\n_porosity as 'Real' ?\n_youngs_modulus and _poissons_ratio as 'ADReal' ?\nmm as 'ADReal'?\n\nThe current way i defined them was just because the compilation succeeded. Maybe someone can address my concerns. Thanks in advance.\nADComputeVariableCoupledElasticityTensor.h :\n#pragma once\n\n#include \"ComputeElasticityTensorBase.h\"\n\nclass ADComputeVariableCoupledElasticityTensor : public ADComputeElasticityTensorBase\n{\npublic:\n  static InputParameters validParams();\n\n  ADComputeVariableCoupledElasticityTensor(const InputParameters & parameters);\n\nprotected:\n  virtual void computeQpElasticityTensor() override;\n\n  /*new parameters*/\n  const ADVariableValue & _temp;\n  const ADVariableValue & _fluence;\n  const Real & _porosity;\n\n  ADReal _youngs_modulus;\n  ADReal _poissons_ratio;\n\n  using ADComputeElasticityTensorBase::name;\n  using ADComputeElasticityTensorBase::_elasticity_tensor_name;\n  using ADComputeElasticityTensorBase::issueGuarantee;\n  using ADComputeElasticityTensorBase::isParamValid;\n  using ADComputeElasticityTensorBase::_elasticity_tensor;\n  using ADComputeElasticityTensorBase::_qp;\n  using ADComputeElasticityTensorBase::_effective_stiffness;\n};\n\nADComputeVariableCoupledElasticityTensor.C :\n#include \"ADComputeVariableCoupledElasticityTensor.h\"\n#include \"MooseVariable.h\"\n#include \"Coupleable.h\"\n\nregisterMooseObject(\"myApp\", ADComputeVariableCoupledElasticityTensor);\n\nInputParameters\nADComputeVariableCoupledElasticityTensor::validParams()\n{\n  InputParameters params = ADComputeElasticityTensorBase::validParams();\n  params.addClassDescription(\"Compute an elasticity tensor.\");\n\n  params.addCoupledVar(\"temperature\", 1000.0, \"Coupled temperature in units of Kelvin\");\n  params.addCoupledVar(\"fluence\",0.0,\"fluence.\");\n  params.addParam<Real>(\"porosity\",0.8,\" porosity\");\n\n  return params;\n}\n\nADComputeVariableCoupledElasticityTensor::ADComputeVariableCoupledElasticityTensor(\n    const InputParameters & parameters)\n    : ADComputeElasticityTensorBase(parameters),\n\n    _temp(adCoupledValue(\"temperature\")),\n    _fluence(adCoupledValue(\"fluence\")),\n    _porosity(getParam<Real>(\"porosity\"))\n{\n  // all tensors created by this class are always isotropic\n  issueGuarantee(_elasticity_tensor_name, Guarantee::ISOTROPIC);\n}\n\nvoid\nADComputeVariableCoupledElasticityTensor::computeQpElasticityTensor()\n{\n    ADReal mm;\n    mm = (1.0+0.23*_fluence[_qp])*(1.0+1.5e-4*(_temp[_qp]-293.15));\n    _youngs_modulus = 3.0e10*exp(-_porosity)*mm;\n    _poissons_ratio = 0.23;\n  // Assign elasticity tensor at a given quad point\n  _elasticity_tensor[_qp].fillSymmetricIsotropicEandNu(_youngs_modulus, _poissons_ratio);\n}",
          "url": "https://github.com/idaholab/moose/discussions/22587",
          "updatedAt": "2022-11-21T07:18:24Z",
          "publishedAt": "2022-11-03T16:57:37Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAll the variable and number types seem appropriate.\nUsing ADReal for _youngs_modulus correctly makes sure the derivatives in mm are not lost when computing the young s modulus.\n_poissons_ratio does not need to be an ADReal, it could be a Real. This is inconsequential though.\nUsing ADVariableValue for _temp and _fluence correctly makes sure the variables carry the derivative information.\nIf you are investigating issues with your Jacobian, please use the Jacobian analyzer.\nhttps://mooseframework.inl.gov/help/development/analyze_jacobian.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22587#discussioncomment-4191341",
                  "updatedAt": "2022-11-21T01:52:49Z",
                  "publishedAt": "2022-11-21T01:52:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "echo1115"
                          },
                          "bodyText": "Thanks for your reply and suggestions! @GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/22587#discussioncomment-4192701",
                          "updatedAt": "2022-11-21T07:17:38Z",
                          "publishedAt": "2022-11-21T07:17:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}