{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMi0wMVQwMzozMjoyMi0wNjowMM2a_g=="
    },
    "edges": [
      {
        "node": {
          "title": "How add a hinges in line element's nodes",
          "author": {
            "login": "andrey1887"
          },
          "bodyText": "Hello. Help me please. How i can define a hinges at nodes of line elements, corresponding to selected DOF?",
          "url": "https://github.com/idaholab/moose/discussions/26218",
          "updatedAt": "2023-12-01T22:16:59Z",
          "publishedAt": "2023-12-01T16:48:07Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "andrey1887"
                  },
                  "bodyText": "",
                  "url": "https://github.com/idaholab/moose/discussions/26218#discussioncomment-7734660",
                  "updatedAt": "2023-12-01T22:17:00Z",
                  "publishedAt": "2023-12-01T22:16:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Combining regular and biased meshes in 2D and 3D.",
          "author": {
            "login": "EdSheltonUKAEA"
          },
          "bodyText": "I need some help and advice on how to create efficient meshes in 2D and 3D, if possible using the built-in MOOSE meshing tools.  (But if there's an easy-to-learn alternative which I can use to create a mesh file which I then pull in to my MOOSE input file that could work too.)\nI've really only worked in 1D with MOOSE before, almost exclusively using GeneratedMeshGenerator with combinations of regular and biased meshes.\nBut now I need 2D and 3D models initially for squares and cubes (or at least a quadrant of a square and an octant of a cube assuming symmetry at mid-point lines and planes).  GeneratedMeshGenerator explicitly says it can do this and I can produce a simple squares, rectangles or cubiod boxes.  But I want to be able to model concentric squares within squares and boxes within boxes for different mesh blocks and materials.  These would have finer or biased meshes close to the interfaces between layers.  I can't see a quick way to do this with GeneratedMeshGenerator as I would have to stitch together a fairly complicated arrangement of rectangles or cuboids.\nAnd another probably more important challenge is that a 1D model with 1000 elements (and solves quite quickly) when extended to be the same in 2D and 3D gives 10^6 and 10^9 elements respectively.  This makes solving really slow (especially for 3D) and seems very inefficient as the elements could be much coarser further from the centre (similar to a cylindrical or spherical radial mesh).  So I think I need to try some alternative elements types, but again have no experience doing this having just used GeneratedMeshGenerator in 1D with default settings.\nAny tips or suggestions on what mesh types and tools I could start using to do this?  Any examples of this type of mesh which others have built?  Is there a useful tutorial or video anywhere?\nThanks in advance for any help!",
          "url": "https://github.com/idaholab/moose/discussions/26216",
          "updatedAt": "2023-12-01T15:36:05Z",
          "publishedAt": "2023-12-01T15:24:51Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nGeneratedMeshGenerator is indeed to simplistic if you want gradings in the cell density across the geometry.\nHowever, CartesianMeshGenerator will let you have different densities.\nhttps://mooseframework.inl.gov/source/meshgenerators/CartesianMeshGenerator.html\nIt still is not the best, there will be regions that are over-discretized all the way to the boundary, but it will be better.\nI think the best way to do these boxes with a center that is much finer than the outer rectangular shells is a combination of the CartesianMG with different subdomain IDs in regions and a uniform grid + a RefineBlockGenerator\nhttps://mooseframework.inl.gov/source/meshgenerators/RefineBlockGenerator.html\nThis will let you select the subdomain near the center and apply mesh refinement there. The mesh wont be conformal anymore, but it's in a way that is supported by MOOSE/libmesh (h-refinement)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26216#discussioncomment-7730843",
                  "updatedAt": "2023-12-01T15:36:06Z",
                  "publishedAt": "2023-12-01T15:36:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Viscous flow over a base",
          "author": {
            "login": "AdrienWehrle"
          },
          "bodyText": "Hi everyone,\nI'm working on a mesh representing a viscous material and I'd like the latter to flow over the equivalent of a rock base/bed.\nI thought of swapping all elements with the \"bottom\" boundary to a new subdomain ID to which I could give rock properties instead of the viscous ones and hence move the material/bed boundary one element up. But I couldn't find how to do so...\nThe end goal is to implement a Coulomb model at the interface between the viscous material and a rock base, at the bottom of my current mesh. But maybe there is actually a better way to do it from the beginning than changing subdomain IDs?\nSo far I've only found solutions for a friction law between two media that are directly described in the input mesh.\nThank you a lot in advance for your help!",
          "url": "https://github.com/idaholab/moose/discussions/26187",
          "updatedAt": "2023-12-01T15:18:26Z",
          "publishedAt": "2023-11-29T15:07:21Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe only tool to change subdomain IDs dynamically currently is:\nhttps://mooseframework.inl.gov/source/userobjects/CoupledVarThresholdElementSubdomainModifier.html\nhttps://mooseframework.inl.gov/source/userobjects/CutElementSubdomainModifier.html (in XFEM module)\nIf you are thinking of stopping the simulation and restarting, you can use the mesh generator to change subdomain ids:\nhttps://mooseframework.inl.gov/source/meshgenerators/ParsedSubdomainMeshGenerator.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7706004",
                  "updatedAt": "2023-11-29T15:10:58Z",
                  "publishedAt": "2023-11-29T15:10:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Thank you a lot! I think both of those objects wouldn't work for me unfortunately as the bottom of my mesh is not a regular plan and hence can't be selected with a bounding box...\nZooming out, do you know if I could actually implement viscoucs flow over a hard bed with a Coulomb model at the bottom of my mesh without explicitly modeling the bed itself?\nFor example, my mesh is in contact with water at the front and I implemented the influence of water as a pressure on the side, without implementing the water body itself.",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7706380",
                          "updatedAt": "2023-11-29T15:38:51Z",
                          "publishedAt": "2023-11-29T15:38:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so if the delineation boundary is complicated, do you think you could represent it with a mesh-division object?\nhttps://mooseframework.inl.gov/syntax/MeshDivisions/index.html\nThat s a pretty general system.\nthen we can make a new subdomainID changer based on the mesh-division.\n\nFor example, my mesh is in contact with water at the front and I implemented the influence of water as a pressure on the side, without implementing the water body itself.\n\nYes maybe using a MultiApp approach. Make the water body be simulated in another app and only send the data you need on a somewhat regular basis?",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7706492",
                          "updatedAt": "2023-11-29T15:48:06Z",
                          "publishedAt": "2023-11-29T15:47:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "I've added a simple version of the mesh here: https://github.com/AdrienWehrle/mastodon/blob/devel/meshes/test_bed.e As you can see, the last layer of elements is 500m thick and the \"bottom\" boundary is on the top face of this layer, which corresponds to my rock base. Next step is to assign it a different subdomain ID than the rest of the material in the input file so I can give it a very high viscosity.\nAn example of input file I'm working with right now is here: https://github.com/AdrienWehrle/mastodon/blob/devel/inputs/viscous_deformation/boundary_coupling/mooseice_vd_flow_transient_simpg.i\nMaybe that's easier for you to see if this is possible with existing objects or needs development?",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722546",
                          "updatedAt": "2023-11-30T21:19:23Z",
                          "publishedAt": "2023-11-30T21:19:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "it looks like the opposite of this one https://mooseframework.inl.gov/source/meshgenerators/BreakBoundaryOnSubdomainGenerator.html would be perfect, i.e. something like \"BreakSubdomainOnBoundaryGenerator\"...",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722582",
                          "updatedAt": "2023-11-30T21:25:27Z",
                          "publishedAt": "2023-11-30T21:25:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So you need a single layer of element to have this different block ID? sort of a boundary layer?",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722734",
                          "updatedAt": "2023-11-30T21:52:41Z",
                          "publishedAt": "2023-11-30T21:52:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Exactly @GiudGiud !",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722761",
                          "updatedAt": "2023-11-30T21:57:24Z",
                          "publishedAt": "2023-11-30T21:57:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "In this case, the bottom layer. Or maybe it's easier to stitch an additional one but I doubt it on such a complex delineation...",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722782",
                          "updatedAt": "2023-11-30T22:01:27Z",
                          "publishedAt": "2023-11-30T22:01:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@aprilnovak @eshemon  is a BoundaryLayerSubdomainIDGenerator (changes the subdomain ID near boundaries) on your radar by any chance?\nOtherwise I can make it.",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7722845",
                          "updatedAt": "2023-11-30T22:12:14Z",
                          "publishedAt": "2023-11-30T22:12:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "No, we don't have that on the radar at this point. Tagging @miaoyinb for awareness if you go ahead and implement!",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7729236",
                          "updatedAt": "2023-12-01T13:02:02Z",
                          "publishedAt": "2023-12-01T13:02:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Thanks a lot to you all! At the end for the moment I decided to subdivide my blocks at the mesh generation step, and then apply the variables, kernels etc... to each existing subdomain ID! Thank you a lot for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/26187#discussioncomment-7730662",
                          "updatedAt": "2023-12-01T15:18:27Z",
                          "publishedAt": "2023-12-01T15:18:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Running the tutorials in MOOSE",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I have some questions.\n\n\nAfter creating my application on MOOSE how do I run the test examples in the MOOSE repository in my application? I followed the MOOSE workshop 2023 and I made the logan1.i  file and some other changes but it seems I was not committing the new additions and I got a lot of issues with my MOOSE.\n\n\nThis is a follow-up question can i copy let's say the step01 directory into my application and create the logan1.i file so it does not affect my MOOSE in general?",
          "url": "https://github.com/idaholab/moose/discussions/26207",
          "updatedAt": "2023-12-01T14:56:33Z",
          "publishedAt": "2023-11-30T16:09:43Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You need to compile an executable then use it on the input files.\nPlease elaborate on the issues if you need help there\n\n\nyes that s not going to affect MOOSE. Moving input files will not break the code",
                  "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720149",
                  "updatedAt": "2023-11-30T16:45:13Z",
                  "publishedAt": "2023-11-30T16:45:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "(python-stack) [emmanuel324@tinkercliffs1 step01_diffusion]$ make -j4\nMakefile:20: /home/emmanuel324/projects/belson/logan1/../..//framework/build.mk: No such file or directory\nMakefile:21: /home/emmanuel324/projects/belson/logan1/../..//framework/moose.mk: No such file or directory\nMakefile:41: /home/emmanuel324/projects/belson/logan1/../..//modules/modules.mk: No such file or directory\nMakefile:49: /home/emmanuel324/projects/belson/logan1/../..//framework/app.mk: No such file or directory\nmake: *** No rule to make target `/home/emmanuel324/projects/belson/logan1/../..//framework/app.mk'.  Stop.\nSo from the snippet above, I copied the step01_diffusion folder into my application and I was trying to compile an executable by running make -j4. That's what I did in the original step01_diffusion in the MOOSE repository and it creates  the darcy_thermo_mech-opt",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720368",
                          "updatedAt": "2023-11-30T17:03:40Z",
                          "publishedAt": "2023-11-30T17:03:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "there needs to be a makefile to be able to use make",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720482",
                          "updatedAt": "2023-11-30T17:15:29Z",
                          "publishedAt": "2023-11-30T17:15:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes, there is a makefile in the step01_diffusion folder I copied to my application.\nIn it original directory in the MOOSE when I run make in the step01_diffusion folder it works but when I copied the same step01_diffusion folder into my application and use make it does not work as shown in the previous submission.",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720541",
                          "updatedAt": "2023-11-30T17:21:15Z",
                          "publishedAt": "2023-11-30T17:21:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh ok. Can you set MOOSE_DIR to the moose folder that you are using to store moose?\nThe makefile will need it",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720590",
                          "updatedAt": "2023-11-30T17:26:23Z",
                          "publishedAt": "2023-11-30T17:26:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I do not think I understand what you mean.",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720649",
                          "updatedAt": "2023-11-30T17:32:16Z",
                          "publishedAt": "2023-11-30T17:32:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "MOOSE_DIR is an environment variable in your system.\nlikely you should do:\nexport MOOSE_DIR = ~/projects/your_app/moose",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720669",
                          "updatedAt": "2023-11-30T17:33:54Z",
                          "publishedAt": "2023-11-30T17:33:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "(python-stack) [emmanuel324@tinkercliffs1 moose]$ export MOOSE_DIR = ~/projects/belson/moose\n-bash: export: =': not a valid identifier -bash: export: /home/emmanuel324/projects/belson/moose': not a valid identifier",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720710",
                          "updatedAt": "2023-11-30T17:37:30Z",
                          "publishedAt": "2023-11-30T17:37:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "export MOOSE_DIR=\"~/projects/your_app/moose\"\n\nmaybe?\nthis is linux stuff, you should google it on the side to make it work",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720747",
                          "updatedAt": "2023-11-30T17:41:43Z",
                          "publishedAt": "2023-11-30T17:41:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I am on an HPC cluster.",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7720867",
                          "updatedAt": "2023-11-30T17:55:08Z",
                          "publishedAt": "2023-11-30T17:55:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Okay. If I want to use the original MOOSE directory, what is the best and right way to commit any new input files I create in there or any new changes to prevent the warning of committing the changes?",
                          "url": "https://github.com/idaholab/moose/discussions/26207#discussioncomment-7723835",
                          "updatedAt": "2023-12-01T01:19:08Z",
                          "publishedAt": "2023-12-01T01:19:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to compute second derivative in q-points",
          "author": {
            "login": "andrey1887"
          },
          "bodyText": "Help me please. I need to compute second derivative in q-points. It's line element with Hermite third order shape function.",
          "url": "https://github.com/idaholab/moose/discussions/26146",
          "updatedAt": "2023-12-01T14:55:23Z",
          "publishedAt": "2023-11-25T20:50:49Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIn the coupleable interface you should find a routine to get the Hessian. Maybe it s called coupledHessian I can check tomorrow evening\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7668989",
                  "updatedAt": "2023-11-26T00:41:09Z",
                  "publishedAt": "2023-11-26T00:41:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Actually it s called coupledSecond\nhttps://mooseframework.org/getting_started/new_users.html#create-an-app",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7669138",
                          "updatedAt": "2023-11-26T01:48:14Z",
                          "publishedAt": "2023-11-26T01:48:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you, @GiudGiud. I would like to clarify: is it suitable for the next case. In ComputeIncrementalBeamStrain::computeQpStrain() a gradients of displacements and rotations are computed:\nconst RealVectorValue grad_disp_0(1.0 / _original_length[0] * (_disp1 - _disp0));\nconst RealVectorValue grad_rot_0(1.0 / _original_length[0] * (_rot1 - _rot0));\nconst RealVectorValue avg_rot(\n      0.5 * (_rot0(0) + _rot1(0)), 0.5 * (_rot0(1) + _rot1(1)), 0.5 * (_rot0(2) + _rot1(2)));\n\nI consider it like as the first derivatives. If we have 1 q-point it is appropriate solution.\nBut to implement beam model based on Euler-Bernoulli theory, where shear deformations are neglected, the second derivative of rotation is needed to calculate shear forces Q =  EI\u03b8\".\nSo i need to use Hermite shape functions. And then, in computeQpStrain() instead of existing gradient calculation with linear shape function for transverse displacements and rotations:\n\nI will to define third order Hermite shape function manually, to retrieve q-point values, and also first and second derivatives\n\nIs there a more appropriate way to obtain second derivatives for this case, than manual processing of shape function.",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7682098",
                          "updatedAt": "2023-11-27T15:08:18Z",
                          "publishedAt": "2023-11-27T15:08:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would try coupledSecond first. This is the cannon way of retrieving second derivatives. And if there's issues with either Hermite shape functions or beam elements we should know and fix them\nany reason you cannot just increase the order on the shape functions you were using previously instead of switching to Hermite?",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7682216",
                          "updatedAt": "2023-11-27T15:17:45Z",
                          "publishedAt": "2023-11-27T15:17:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you @GiudGiud. A Hermite's shape functions are needed because they provide \u04211 continuity.\nCould gradients in the snippet below be calculated using coupledGradient?\n\n  \n    \n      moose/modules/tensor_mechanics/src/materials/ComputeIncrementalBeamStrain.C\n    \n    \n        Lines 241 to 245\n      in\n      d62c3f0\n    \n  \n  \n    \n\n        \n          \n           const RealVectorValue grad_disp_0(1.0 / _original_length[0] * (_disp1 - _disp0)); \n        \n\n        \n          \n           const RealVectorValue grad_rot_0(1.0 / _original_length[0] * (_rot1 - _rot0)); \n        \n\n        \n          \n           const RealVectorValue avg_rot( \n        \n\n        \n          \n               0.5 * (_rot0(0) + _rot1(0)), 0.5 * (_rot0(1) + _rot1(1)), 0.5 * (_rot0(2) + _rot1(2)));",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7682531",
                          "updatedAt": "2023-11-27T15:40:28Z",
                          "publishedAt": "2023-11-27T15:40:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ah probably not otherwise they would have been.\nand that s likely because _disp1 is not a MOOSE variable, just a class attribute that gets set.\nThen you are right, you wont be able to use coupledSecond. You ll want to compute the second derivative manually just like they computed the gradients manually",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7682633",
                          "updatedAt": "2023-11-27T15:51:21Z",
                          "publishedAt": "2023-11-27T15:51:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Ok. Thank you @GiudGiud.",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7683080",
                          "updatedAt": "2023-11-27T16:30:50Z",
                          "publishedAt": "2023-11-27T16:30:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "andrey1887"
                  },
                  "bodyText": "So, a Hermit third order shape functions are needed, but if i try to change even one of variables:\n  [disp_x]\n    order = FIRST\n    family = HERMITE\n  []\n\ni get the next error:\n*** ERROR ***                                                                                                                         \nstd::bad_alloc                                                                                                                        \n \nStack frames: 7\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: void mooseError<char const*>(char const*&&)\n3: /home/and/projects/moose/framework/libmoose-opt.so.0(+0x92678b) [0x7fab9fdeb78b]\n4: main\n5: __libc_start_main\n6: ../thin_walled-opt(+0x33ef) [0x55a3d35673ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nTell me please: What is the right way to use Hermite shape functions for beam?",
                  "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7694690",
                  "updatedAt": "2023-11-28T16:55:17Z",
                  "publishedAt": "2023-11-28T16:55:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Only 3rd order hermite are supported iirc",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7694789",
                          "updatedAt": "2023-11-28T17:04:02Z",
                          "publishedAt": "2023-11-28T17:04:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "@GiudGiud , thank you. But now i have another error:\n30 Nonlinear |R| = 2.205375e+01\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 30\n Solve Did NOT Converge!\nAborting as solve did not converge\n\n\n*** ERROR ***                                                                                                                         \nThe following error occurred in the object \"ConstantDT\", of type \"ConstantDT\".                                                        \n                                                                                                                                      \nSolve failed and timestep already at or below dtmin, cannot continue!                                                                 \n\nStack frames: 12\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: callMooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, MooseApp*)\n3: /home/and/projects/moose/framework/libmoose-opt.so.0(+0x9c4301) [0x7fa7596f9301]\n4: /home/and/projects/moose/framework/libmoose-opt.so.0(+0x1bf45d7) [0x7fa75a9295d7]\n5: TimeStepper::computeStep()\n6: Transient::execute()\n7: MooseApp::executeExecutioner()\n8: MooseApp::run()\n9: main\n10: __libc_start_main\n11: ../thin_walled-opt(+0x33ef) [0x55ea26ed03ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\n[Variables]\n  [disp_x]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [disp_y]\n    order = THIRD\n    family = HERMITE\n  []\n  [disp_z]\n    order = THIRD\n    family = HERMITE\n  []\n  [rot_x]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [rot_y]\n    order = THIRD\n    family = HERMITE\n  []\n  [rot_z]\n    order = THIRD\n    family = HERMITE\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7694919",
                          "updatedAt": "2023-11-28T17:19:45Z",
                          "publishedAt": "2023-11-28T17:16:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "that s the solver not converging.\nI would recommend going through our 'solver fails' troubleshooting page first\nhttps://mooseframework.inl.gov/moose/application_usage/failed_solves.html",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7695392",
                          "updatedAt": "2023-11-28T18:04:50Z",
                          "publishedAt": "2023-11-28T18:04:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you @GiudGiud . I will try it.",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7696598",
                          "updatedAt": "2023-11-28T19:52:44Z",
                          "publishedAt": "2023-11-28T19:52:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Hello. @GiudGiud, i runed the Jacobian Debugger for THIRD HERMITE shape functions and got a following:\nKernel for variable 'disp_x':\n  (0,0) On-diagonal Jacobian is wrong (off by 50.0 %)\n\nKernel for variable 'disp_y':\n  (1,1) On-diagonal Jacobian is questionable (off by 14.85 %)\n  (1,5) Off-diagonal Jacobian for variable 'rot_z' is wrong (off by 29.3 %)\n\nKernel for variable 'disp_z':\n  (2,2) On-diagonal Jacobian is questionable (off by 14.85 %)\n  (2,4) Off-diagonal Jacobian for variable 'rot_y' is wrong (off by 29.3 %)\n\nKernel for variable 'rot_x':\n  (3,3) On-diagonal Jacobian is wrong (off by 50.0 %)\n\nKernel for variable 'rot_y':\n  (4,2) Off-diagonal Jacobian for variable 'disp_z' is inexact (off by 4.654 %)\n  (4,4) On-diagonal Jacobian is wrong (off by 29.3 %)\n\nKernel for variable 'rot_z':\n  (5,1) Off-diagonal Jacobian for variable 'disp_y' is inexact (off by 4.654 %)\n  (5,5) On-diagonal Jacobian is wrong (off by 29.3 %)\n\nKernel for variable 'disp_x':\n  (0,0) On-diagonal Jacobian is wrong (off by 50.0 %)\n\nKernel for variable 'disp_y':\n  (1,1) On-diagonal Jacobian is questionable (off by 14.85 %)\n  (1,5) Off-diagonal Jacobian for variable 'rot_z' is wrong (off by 29.3 %)\n\nKernel for variable 'disp_z':\n  (2,2) On-diagonal Jacobian is questionable (off by 14.85 %)\n  (2,4) Off-diagonal Jacobian for variable 'rot_y' is wrong (off by 29.3 %)\n\nKernel for variable 'rot_x':\n  (3,3) On-diagonal Jacobian is wrong (off by 50.0 %)\n\nKernel for variable 'rot_y':\n  (4,2) Off-diagonal Jacobian for variable 'disp_z' is inexact (off by 4.654 %)\n  (4,4) On-diagonal Jacobian is wrong (off by 29.3 %)\n\nKernel for variable 'rot_z':\n  (5,1) Off-diagonal Jacobian for variable 'disp_y' is inexact (off by 4.654 %)\n  (5,5) On-diagonal Jacobian is wrong (off by 29.3 %)\n\nIn case of FIRST LAGRANGE an output is the next:\nNo errors detected. :-)\nNo errors detected. :-)",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7703326",
                          "updatedAt": "2023-11-29T11:06:59Z",
                          "publishedAt": "2023-11-29T11:06:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "i have added output for sizes of test and phi functions in Jacobian computation process:\n  std::cout << \"_test.size() =\" << _test.size();\n  std::cout << \" _phi.size() =\" << _phi.size() << std::endl;\n\nfor (unsigned int i = 0; i < _test.size(); ++i)\n  {\n    for (unsigned int j = 0; j < _phi.size(); ++j)\n    {\n      if (_component < 3)\n        _local_ke(i, j) = (i == j ? 1 : -1) * _K11[0](_component, _component);\n      else\n      {\n        if (i == j)\n          _local_ke(i, j) = _K22[0](_component - 3, _component - 3);\n        else\n          _local_ke(i, j) = _K22_cross[0](_component - 3, _component - 3);\n      }\n    }\n  }\n\nand it was the next:\n_test.size() =4 _phi.size() =4         # HERMITE 3\n_test.size() =2 _phi.size() =2         # LAGRANGE 1\n\nI think, that for cubic Hermite approximation, 4-node line element is implied.\nAnd local stiffness matrix becomes 24x24 instead of 12x12 for 2-node element.\nNow i see two way to solve this issue (i need cubic approximation for 2-node element):\n\nchange an algorithm of Jacobian computation\nchange q-rule for element - 2 q-points is enough for 3-order polynomial (but what i can change _test function size?)\n\n@GiudGiud, what do you think about it?",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7704268",
                          "updatedAt": "2023-11-29T12:50:54Z",
                          "publishedAt": "2023-11-29T12:42:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Changing the Q rule is pretty easy.\nYou can look at the Quadrature block in the executioner and specify which one you want\nOr you can implement a new one in that same system",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7704798",
                          "updatedAt": "2023-11-29T13:26:54Z",
                          "publishedAt": "2023-11-29T13:26:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you, @GiudGiud . I try to specify it in the input file:\n  [./Quadrature]\n    type = GAUSS\n    order = FIRST         # order = THIRD also tried\n  [../]\n\nbut _phi and _test -functions sizes haven't changed.",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7704982",
                          "updatedAt": "2023-11-29T13:53:32Z",
                          "publishedAt": "2023-11-29T13:46:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes that s expected.\nI was replying to part of your previous message not the bigger picture of the whole thread.\nYou can use any quadrature rule you like, that changed where the equations are evaluated to perform the integration but it doesn't change the shape functions of anything",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7705017",
                          "updatedAt": "2023-11-29T13:52:25Z",
                          "publishedAt": "2023-11-29T13:50:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@roystgnr we would like to use a different FE family for the test functions and the variable (different Galerkin method?). How do we do that?",
                          "url": "https://github.com/idaholab/moose/discussions/26146#discussioncomment-7705066",
                          "updatedAt": "2023-11-29T13:56:17Z",
                          "publishedAt": "2023-11-29T13:55:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Moose-Input-Files: Handing Lists of Blocks",
          "author": {
            "login": "jmeier"
          },
          "bodyText": "Dear Moose-Community,\nI have a model with a large number of blocks. The geometry (nodes, elements, ...) is currently prepared outside of Moose in a GMSH file and this GMSH file is then imported into Moose using the FileMeshGenerator.\nProperties etc. are assigned to the blocks in various commands in the Moose input file. To avoid having to do this individually for each block, I use variables that contain lists of block names.\nI would like to maintain these lists outside of the Moose input file.\nQuestion 1: Can additional lists of blocks be transferred to the Moose in a GMSH file? The assignment of several \"PhysicalNames\" per block is rejected with an error during import in Moose.\nQuestion 2: Can, for example, a list of block names from a JSON file be read into a Moose variable using JSONFileReader and then used? I haven't found anything about this in my search so far.\nQuestion 3: Of course I can also have block lists written (automatically) to an *.i file and load this via \"!import\". Unfortunately, I get a message if I do not use all variables. Basically, I think this behaviour of warning of unused variables is very good. But how can I suppress the message for specific variables that they are not used?",
          "url": "https://github.com/idaholab/moose/discussions/26205",
          "updatedAt": "2023-12-01T14:45:45Z",
          "publishedAt": "2023-11-30T14:16:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nNot that I know of. The gmsh reader is in libmesh, feel free to add features there\nI have never heard of anyone doing that. You absolutely could do it, but then you would need to modify the BlockRestrictableInterface to accept a list of blocks from JSON instead of from the input\nYou mean unused input parameters? Add -w on the command line to ignore that\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7719050",
                  "updatedAt": "2023-11-30T15:14:16Z",
                  "publishedAt": "2023-11-30T15:14:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Dear Guillaume,\nThank you very much for the very quick reply.\nRegarding 3: The switch \"-w\" converts the cancellation into a warning if there are any unused variables. However, I would like to completely deactivate this error/warning for some specific variables. Is it possible to create a fake user for a variable in the input file? Then it would not be unused from Moose's point of view and the usage of all other variables would continue to be monitored.\nJ\u00f6rg",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7719479",
                          "updatedAt": "2023-11-30T15:50:18Z",
                          "publishedAt": "2023-11-30T15:50:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There's nothing in MOOSE but feel free to hack the input.\nFor example, a, b and c are not used, but d is.\nyour input\na = 3\nb = 2\nc = 34\nd = ${fparse real_d_value + 0*a + 0*b + 0*c}\n\nthis wont complain that a,b and c are unused. But they wont matter.\nYou can do the same with strings by specifying a dummy object that is not used (a Function?) and give it some block lists you dont use elsewhere",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7719548",
                          "updatedAt": "2023-11-30T15:54:49Z",
                          "publishedAt": "2023-11-30T15:54:49Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ABallisat"
                          },
                          "bodyText": "Have you considered using a scripting language to automate the generation of the entire .i files? Using Python or similar makes this trivial, and if you are (perhaps) using the GMSH Python interface already it will be pretty easy to link together. That would give you the granularity of control you need for generating complex input files. I have found this makes handling input file that can run to thousands of lines much easier to wrangle and debug. I think you are hinting at this in question 3 but if you generate the whole input file then you can use some logic to choose which variables get added.",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7720326",
                          "updatedAt": "2023-11-30T16:59:28Z",
                          "publishedAt": "2023-11-30T16:59:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There are various python codes for that.\nsee moose/python folder or see pygriffin (if you have access to that, never used it)",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7720661",
                          "updatedAt": "2023-11-30T17:33:10Z",
                          "publishedAt": "2023-11-30T17:33:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Following your solution for variables, @GiudGiud, I wrote the following input file code snippet. The code is working inside my \"primary\" input file (the one I specify when calling the moose app).\n# Code snippet for the definition of variables (integer, \n# double, string, array) and their use with \"fake users\".\n# Even if these variables are not used elsewhere in the \n# input file, they do not generate an error message \n# for \"unused variables\".\n\nfooInt = 7\nfooDbl = 3.3\nfooStr = \"blubb bb 6\"\nfooArr = 'blubb blubb'\n\n[Functions]\n\t\n\t[FakeUser_fooInt]\n\t\ttype = ParsedFunction\n\t\texpression = 'a'\n\t\tsymbol_names = 'a'\n\t\tsymbol_values = '${fooInt}'\n\t[]\n\t\n\t[FakeUser_fooDbl]\n\t\ttype = ParsedFunction\n\t\texpression = 'a'\n\t\tsymbol_names = 'a'\n\t\tsymbol_values = '${fooDbl}'\n\t[]\n\t\n\t[FakeUser_fooStr]\n\t\ttype = ParsedFunction\n\t\texpression = 'a'\n\t\tsymbol_names = 'a'\n\t\tsymbol_values = '1'\n\t\tcontrol_tags = ${fooStr}\n\t[]\n\t\n\t[FakeUser_fooArr]\n\t\ttype = ParsedFunction\n\t\texpression = 'a'\n\t\tsymbol_names = 'a'\n\t\tsymbol_values = '1'\n\t\tcontrol_tags = ${fooArr}\n\t[]\n\n[]\n\nBut when I move the code to a \"secondary\" input file (one I include into my primary input file using !include I get the following error:\n*** ERROR ***\n/home/user/projects/moose_bare_tmech/models/tunnel-groups.i:12.3: no variable 'fooInt' found for substitution expression\n\nI assume this behaviour is not intentional?\nThe motivation for my questions above is that I can have parts of my input file created automatically (and then included via !include). For the creation of complete input files I probably need some more experience in Moose. Thanks for pointing out the Python codes @ABallisat and @GiudGiud.",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7725725",
                          "updatedAt": "2023-12-01T06:34:43Z",
                          "publishedAt": "2023-12-01T06:20:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what's the order of includes?\nfooInt = 7\nfooDbl = 3.3\nfooStr = \"blubb bb 6\"\nfooArr = 'blubb blubb'\n\n!include other_file_with_the_functions.i\n\n?\n@brandonlangley @joshuahansel this is something that got looked at recently right?",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7729412",
                          "updatedAt": "2023-12-01T13:23:22Z",
                          "publishedAt": "2023-12-01T13:23:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "I moved all of the code above (variables and fake-users) into the include. The idea is to integrate the externally automatically generated variables and fake users into my Moose model with one include command.\nHowever, I think I found the reason for the error cited above: The \"secondary\" input file was saved as UTF8 (not ASCII). This leads to the effect that Moose prepends a space character in front of the variable name (e.g. ' fooInt' and not 'fooInt'). With this change, the include is now working. Thanks for your support!",
                          "url": "https://github.com/idaholab/moose/discussions/26205#discussioncomment-7730308",
                          "updatedAt": "2023-12-01T14:45:39Z",
                          "publishedAt": "2023-12-01T14:45:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to avoid mulitiple declaration using master action syntax?",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "I need to run elastoplasticity simulation with linear isotropic hardening. After reading the documentation, I think the material FiniteStrainPlasticMaterial is what I need. But when I run the simulation, it reports error \"The following material properties are declared on block 19 by multiple materials moose\".\n\nAnd the following is my input file:\n[Mesh]\n  type = FileMesh\n  file = crack.msh\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Modules/TensorMechanics/Master]\n  [./block1]\n    strain = FINITE\n    add_variables = true\n    generate_output = 'stress_yy strain_yy vonmises_stress max_principal_stress effective_plastic_strain'\n  [../]\n[]\n\n[Materials]\n  [./fplastic]\n    type = FiniteStrainPlasticMaterial\n    block = all\n    yield_stress='0. 445. 0.05 610. 0.1 680. 0.38 810. 0.95 920. 2. 950.'\n  [../]\n  [./elasticity_tensor]\n    type = ComputeElasticityTensor\n    block = all\n    C_ijkl = '2.827e5 1.21e5 1.21e5 2.827e5 1.21e5 2.827e5 0.808e5 0.808e5 0.808e5'\n    fill_method = symmetric9\n  [../]\n  [./strain]\n    type = ComputeFiniteStrain\n    block = all\n    displacements = 'disp_x disp_y'\n  [../]\n[]\n\n[BCs]\n  [yfix]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [ydisp]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = top\n    function = '0.001*t'\n  []\n[]\n\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  dt = 0.25\n  end_time = 20\n\n  solve_type = 'PJFNK'\n\n  petsc_options = '-snes_ksp_ew'\n  petsc_options_iname = '-pc_type -sub_pc_type -pc_asm_overlap -ksp_gmres_restart'\n  petsc_options_value = 'asm lu 1 101'\n[]\n\n[Postprocessors]\n  [./ave_stress_yy_top]\n    type = SideAverageValue\n    variable = stress_yy\n    boundary = top\n  [../]\n  [./ave_strain_yy_top]\n    type = SideAverageValue\n    variable = strain_yy\n    boundary = top\n  [../]\n  [./ave_max_pstress_top]\n    type = SideAverageValue\n    variable = max_principal_stress\n    boundary = top\n  [../]\n  [./ave_estrain_top]\n    type = SideAverageValue\n    variable = effective_plastic_strain\n    boundary = top\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n  perf_graph = true\n  csv = true\n  print_linear_residuals = false\n[]\n\nI know the reason is that some properties are both declared in master action and FiniteStrainPlasticMaterial. How can I avoid this mutiple declaration while still output the variables in generate output? Thanks a lot!",
          "url": "https://github.com/idaholab/moose/discussions/26214",
          "updatedAt": "2023-12-01T14:16:58Z",
          "publishedAt": "2023-12-01T11:22:06Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "RWTHLHK"
                  },
                  "bodyText": "I just solved the problem. I delete the strain block in materials definition, because in mater action the finite strain is already computed.",
                  "url": "https://github.com/idaholab/moose/discussions/26214#discussioncomment-7728561",
                  "updatedAt": "2023-12-01T11:37:55Z",
                  "publishedAt": "2023-12-01T11:37:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Naiver Stokes Module IntegralDirectedSurfaceForce",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I am getting the following error: A 'IntegralDirectedSurfaceForce' is not a registered object. There seems to be a Naiver Stokes Module associated with the postprocessor. What do I need to do to get access to this post processor? I am performing the modeling in the Combined Module.",
          "url": "https://github.com/idaholab/moose/discussions/26181",
          "updatedAt": "2023-12-01T13:37:13Z",
          "publishedAt": "2023-11-29T03:53:22Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCombined module should include the NavierStokes module. So it should be available.\nWhich executable are you using? and can you check with ldd (otool on mac) to see if NS is properly linked in\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26181#discussioncomment-7699455",
                  "updatedAt": "2023-11-29T03:58:27Z",
                  "publishedAt": "2023-11-29T03:58:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "I looked over the code for IntegralDirectedSurfaceForce and I see that it was developed only for use with the finite volume code of NS.",
                          "url": "https://github.com/idaholab/moose/discussions/26181#discussioncomment-7724728",
                          "updatedAt": "2023-12-01T03:40:45Z",
                          "publishedAt": "2023-12-01T03:40:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Well even if it's designed for Finite volume, you should not get a \"not registered object\" error.\nBut if you are not going to use it then I guess it doesnt matter anymore",
                          "url": "https://github.com/idaholab/moose/discussions/26181#discussioncomment-7729557",
                          "updatedAt": "2023-12-01T13:37:14Z",
                          "publishedAt": "2023-12-01T13:37:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "INS pressure boundary condition with gravity",
          "author": {
            "login": "Eilloo"
          },
          "bodyText": "Hi all,\nI have a question about properly setting outlet boundary conditions in the INS module when the 'INSADGravityForce' kernel is being used.\nWhen gravity is enabled, there is naturally a pressure gradient throughout the fluid domain. Setting a constant pressure at the outlet results in back-flow, which is expected due to the pressure difference inside the fluid domain at the top and bottom of the outlet.\nTo avoid this problem, we can instead account for the hydrostatic pressure at the outlet by setting p = p_0 + rho*g*(h-h_ref), where p is the fixed pressure at the outlet, p_0 is the pressure you would specify if gravity wasn't included, rho is the fluid density, g is gravity, and (h-h_ref) is the distance to some reference height.\nIf we consider the simple case where h_ref = 0, p_0 = 0, and gravity acts in the negative y direction, this becomes p = rho*g*y. We can also initialise the pressure in the fluid domain to be rho*g*y.\nHowever, when I do this, I see immediate pressure oscillations in space at the outlet which eventually prevent the simulation from converging. I am using PSPG stabilisation without which the oscillations are much worse.\nI have also tried using a finer mesh, as well as setting the inlet velocity to zero, Neither of these changes the behaviour at the outlet.\nAm I treating this boundary correctly, and is there anything else I can try to prevent these pressure oscillations?\nThanks!\n(Below are two images, one showing the initialised domain, and the other showing the first time step. The inlet is a constant velocity inlet at the bottom left, and the pressure outlet is as described in the top right. I have also included the input file for reference.)\n\n\nvel_x = 1\nfilename = './example_output'\n\n[Mesh]\n    [main]\n        type = GeneratedMeshGenerator\n        dim = 2\n        xmin = 0\n        xmax = 15\n        ymin = 0\n        ymax = 5\n        nx = 150\n        ny = 50\n    []\n    [block_to_remove_left]\n        type = ParsedSubdomainMeshGenerator\n        combinatorial_geometry = 'x<5&y>1'\n        input = main\n        block_name = 'left_to_delete'\n        block_id = 99\n    []\n    [delete_left_block]\n        type = BlockDeletionGenerator\n        input = block_to_remove_left\n        block = 'left_to_delete'\n        new_boundary = 'left_cutWalls'\n    []\n    [block_to_remove_right]\n        type = ParsedSubdomainMeshGenerator\n        combinatorial_geometry = 'x>10&y<4'\n        input = delete_left_block\n        block_id = 98\n        block_name = 'right_to_delete'\n    []\n    [delete_right_block]\n        type = BlockDeletionGenerator\n        input = block_to_remove_right\n        block = 'right_to_delete'\n        new_boundary = 'right_cutWalls'\n    []\n    [inletPipe_topSideset]\n        type = ParsedGenerateSideset\n        input = delete_right_block\n        included_boundaries = left_cutWalls\n        combinatorial_geometry = 'x<=5'\n        new_sideset_name = 'inletPipe_top'\n    []\n    [leftWall]\n        type = ParsedGenerateSideset\n        input = inletPipe_topSideset\n        included_boundaries = left_cutWalls\n        combinatorial_geometry = 'y>=1'\n        new_sideset_name = leftWall\n    []\n    [outletPipe_bottomSideset]\n        type = ParsedGenerateSideset\n        input = leftWall\n        included_boundaries = right_cutWalls\n        combinatorial_geometry = 'x>=10'\n        new_sideset_name = 'outletPipe_bottom'\n    []\n    [rightWall]\n        type = ParsedGenerateSideset\n        input = outletPipe_bottomSideset\n        included_boundaries = right_cutWalls\n        combinatorial_geometry = 'y<=4'\n        new_sideset_name = 'rightWall'\n    []\n    [inlet]\n        type = ParsedGenerateSideset\n        input = rightWall\n        combinatorial_geometry = 'y<=1'\n        included_boundaries = 'left'\n        new_sideset_name = 'inlet'\n    []\n    [outlet]\n        type = ParsedGenerateSideset\n        input = inlet\n        combinatorial_geometry = 'y>=4'\n        included_boundaries = 'right'\n        new_sideset_name = 'outlet'\n    []\n    [pressurePin_sideset]\n        type = ExtraNodesetGenerator\n        input = outlet\n        coord = '0 0'\n        new_boundary = 'pressurePinPoint'\n    []\n[]\n\n[Variables]\n    [velocity]\n        family = LAGRANGE_VEC\n    []\n    [pressure]\n    []\n[]\n\n[Functions]\n    #Simple ramp function at the velocity inlet to help convergence\n    rampTime = 1\n    [vel_ramp]\n        type = ParsedFunction\n        expression = 'if(t<${rampTime},(t/${rampTime})*${vel_x},${vel_x})'\n    []\n[]\n\n[ICs]\n    [velocity]\n        type = VectorConstantIC\n        x_value = 0\n        y_value = 0\n        variable = velocity\n    []\n    [pressure]\n        type = FunctionIC\n        variable = pressure\n        function = '-9.81*y'    #rho = 1\n    []\n[]\n\n[Kernels]\n    [vel_time]\n        type = INSADMomentumTimeDerivative\n        variable = velocity\n    []\n      [fluid_mass]\n        type = INSADMass\n        variable = pressure\n    []\n    [momentum_advection]\n        type = INSADMomentumAdvection\n        variable = velocity\n    []\n    [momentum_pressure]\n        type = INSADMomentumPressure\n        variable = velocity\n        pressure = pressure\n    []\n    [momentum_viscous]\n        type = INSADMomentumViscous\n        variable = velocity\n    []\n    [momentum_supg]\n        type = INSADMomentumSUPG\n        variable = velocity\n        velocity = velocity\n    []\n    [mass_pspg]\n        type = INSADMassPSPG\n        variable = pressure\n    []\n    [gravity]\n        type = INSADGravityForce\n        variable = velocity\n        gravity = '0 -9.81 0'\n    []\n[]\n\n[BCs]\n    [inlet_vel]\n        type = VectorFunctionDirichletBC\n        variable = velocity\n        function_x = vel_ramp\n        boundary = 'inlet'\n    []\n    [pressureGradOutlet]                #Accounts for hydrostatic pressure, given rho = 1\n        type = ADFunctionDirichletBC\n        variable = pressure\n        function = '-9.81*y'\n        boundary = 'outlet'\n    []\n    [free_slip_topBottom]\n        type = ADVectorFunctionDirichletBC\n        variable = velocity\n        boundary = 'top bottom inletPipe_top outletPipe_bottom'\n        function_y = 0\n        set_y_comp = true\n        set_x_comp = false\n    []\n    [free_slip_leftRight]\n        type = ADVectorFunctionDirichletBC\n        variable = velocity\n        boundary = 'leftWall rightWall'\n        function_x = 0\n        set_y_comp = false\n        set_x_comp = true\n    []\n[]\n\n[Materials]\n    [fluid]\n        type = ADGenericConstantMaterial\n        prop_names = 'rho mu T cp k D alpha'\n        prop_values = '1 1.789e-5 288 1005 0.026 0.01 1'\n    []\n    [ins_mat]\n        type = INSADStabilized3Eqn\n        velocity = velocity\n        pressure = pressure\n        temperature = '288'\n        alpha = 1.0\n    []\n[]\n\n[Preconditioning]\n    [precond]\n        type = SMP\n        full = true\n    []\n[]\n\n[Executioner]\n    type = Transient\n    end_time = 30\n    solve_type = NEWTON\n    nl_rel_tol = 1e-9\n    nl_max_its = 15\n    l_tol = 1e-10\n    l_max_its = 50\n\n    automatic_scaling = true\n    line_search = default\n    \n    petsc_options_iname = '-pc_type -pc_factor_shift_type'\n    petsc_options_value = 'lu       NONZERO'\n\n    dtmax = 0.1\n    [TimeStepper]\n        type = SolutionTimeAdaptiveDT\n        dt = 0.001\n    []\n[]\n\n[Outputs]\n    [Exodus]\n        type = Exodus\n        file_base = ${filename}\n    []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/26157",
          "updatedAt": "2023-12-01T13:26:26Z",
          "publishedAt": "2023-11-27T14:18:01Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@lindsayad",
                  "url": "https://github.com/idaholab/moose/discussions/26157#discussioncomment-7682715",
                  "updatedAt": "2023-11-27T15:57:19Z",
                  "publishedAt": "2023-11-27T15:57:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "If you want to impose the pressure condition strongly with a Dirichlet condition, then you should not integrate the pressure by parts. So in a GlobalParams block, I would put integrate_p_by_parts = false. Because right now you are getting competing conditions with your Dirichlet BC and with the natural condition at the outlet for the momentum equation which is:\np*n - n * mu \\nabla u = \\vec{0}\nwhere n is the normal vector. I won't guarantee that this will fix your problem, but it is the first thing I would try",
                  "url": "https://github.com/idaholab/moose/discussions/26157#discussioncomment-7684649",
                  "updatedAt": "2023-11-27T20:14:19Z",
                  "publishedAt": "2023-11-27T19:18:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Ah, makes sense - I believe that's exactly the problem, thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/26157#discussioncomment-7729446",
                          "updatedAt": "2023-12-01T13:26:25Z",
                          "publishedAt": "2023-12-01T13:26:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Hermite element in MOOSE",
          "author": {
            "login": "ZhouXD1989"
          },
          "bodyText": "Hello all,\nI am trying to develop an element to deal with C1 continuity problem in moose. Beam element with Hermite interpolation seems to be a good example for me. However, I checked the beam element in moose, it uses the Lagrange interpolation for both displacements and rotations, as shown in the following:\nhttps://mooseframework.inl.gov/modules/tensor_mechanics/beam_vandv.html\nWhy is the beam element different from the commonly used beam element? Is there a reference for this beam element?\nIs there an element in moose with Hermite interpolation?\nThank you very much!\nBest wishes,\nXiandong",
          "url": "https://github.com/idaholab/moose/discussions/16391",
          "updatedAt": "2023-12-01T09:32:22Z",
          "publishedAt": "2020-12-04T18:16:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "I can partially answer your question. If I remember correctly, MOOSE's Hermite shape function does not work with displaced mesh. A displaced mesh (current configuration) is needed for large deformation problem. Like what you found,  the current implementation of beam element in MOOSE separates displacement and rotation variables, which allows for using C0 Lagrange shape function.  This is basically a mixed/split formulation of a high-order PDE. Other examples can be found in MOOSE to solve 4th order Cahn-Hilliard equation in both split and total formulation (use Hermite).",
                  "url": "https://github.com/idaholab/moose/discussions/16391#discussioncomment-162267",
                  "updatedAt": "2023-08-29T15:49:18Z",
                  "publishedAt": "2020-12-07T19:49:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZhouXD1989"
                  },
                  "bodyText": "Dear Wen Jiang,\n\nI tried the total formulation with Hermite element. It works well. Thanks a\nlot!\n\nBest wishes,\nXiandong\n\nWen Jiang <notifications@github.com> \u4e8e2020\u5e7412\u67087\u65e5\u5468\u4e00 \u4e0b\u53488:49\u5199\u9053\uff1a\n\u2026\n I can partially answer your question. If I remember correctly, MOOSE's\n Hermite shape function does not work with displaced mesh. A displaced mesh\n (current configuration) is needed for large deformation problem. Like what\n you found, the current implementation of beam element in MOOSE separates\n displacement and rotation variables, which allows for using C0 Lagrange\n shape function. This is basically a mixed/split formulation of a high-order\n PDE. Other examples can be found in MOOSE to solve 4th order Cahn-Hilliard\n equation in both split and total formulation (use Hermite).\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#16391 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ALDXGIFD2YTKTZPNIIWUDYLSTUWUBANCNFSM4UNZAXCA>\n .\n\n\n-- \nBest regards,\nXiandong Zhou\nMechanics of Functional Materials, Institution of Materials Science, TU\nDarmstadt, Germany.\nE-mail: zhouxd22@g <taoyong@pku.edu.cn>mail.com",
                  "url": "https://github.com/idaholab/moose/discussions/16391#discussioncomment-198041",
                  "updatedAt": "2023-08-29T15:49:19Z",
                  "publishedAt": "2020-12-11T23:00:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Hello, @ZhouXD1989.  I currently try to implement Euler-Bernuolli beam with Hermite shape functions too. Can you tell me please, what's the difference compared to a C0 Timoshenko beam. I have changed computeStiffnessMatrix, but i can't understand how to pass it into local_ke in StressDivergenceBeam::computeJacobian.\nVariables in input file looks next:\n[Variables]\n\n  [disp_x]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [disp_y]\n    order = THIRD\n    family = HERMITE\n  []\n  [disp_z]\n    order = THIRD\n    family = HERMITE\n  []\n  [rot_x]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [rot_y]\n    order = THIRD\n    family = HERMITE\n  []\n  [rot_z]\n    order = THIRD\n    family = HERMITE\n  []\n[]\n\nIs that right?",
                          "url": "https://github.com/idaholab/moose/discussions/16391#discussioncomment-7727344",
                          "updatedAt": "2023-12-01T09:35:50Z",
                          "publishedAt": "2023-12-01T09:32:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}