{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0xMi0wMVQxMDo1MDo0My0wNjowMM4AOKq6"
    },
    "edges": [
      {
        "node": {
          "title": "Creation/Usage of Autogenerated Variables",
          "author": {
            "login": "MikeLeimon"
          },
          "bodyText": "Greetings All,\nI am working on a project where I have a set of known species which I must track (for now let's say it's on the order of ten different species). If possible, I would like to auto-generate variables for all of these species and have an expectation that they exist within every block. Recently, I explored using Actions to auto-generate these variables for all of these species and I think I was able to do this successfully.\nThe first issue I have is that I am not sure how to connect kernels to these auto-generated variables. Furthermore, I have situations in which one species type can transform into one of the other species types. How would I go about accessing those auto-generated variables from within an interface?\nAt the end of the day, this effort (should I be successful) will result in a drastic simplification to the model inputs. Fundamentally, I suspect the MOOSE framework is likely capable of accomplishing the workflow I am intending, however I am not experienced enough to know how to approach this.\nI do apologize if my questions here have been overly vague, but I very much appreciate any assistance you can provide.\nMany thanks,\n~Mike",
          "url": "https://github.com/idaholab/moose/discussions/19538",
          "updatedAt": "2022-09-01T03:08:35Z",
          "publishedAt": "2021-12-03T20:05:27Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "An easy example to look at in regards to adding both variables and kernels from an action is in https://github.com/idaholab/moose/blob/next/test/src/actions/AddLotsOfDiffusion.C.\nThis is a test object that simply adds a ton of variables and for each variable adds a diffusion kernel and a boundary condition. I think this should be enough to send you in the right direction, and I'm glad to answer more questions once you get a better idea.\nCan you comment more on what you mean about species transformation?",
                  "url": "https://github.com/idaholab/moose/discussions/19538#discussioncomment-1746534",
                  "updatedAt": "2023-11-30T20:14:44Z",
                  "publishedAt": "2021-12-03T20:18:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "MikeLeimon"
                          },
                          "bodyText": "Thank you so much for the quick response!\nAs an example of a species transformation. Lets say that some species I was tracking were: H, H2, H2O, O, and O2. A species transformation (as I described above) could be characterized as: 2H + O -> H2O. This would result in a decrease in the species variable values for H and O, and an increase in the species variable value for H2O.",
                          "url": "https://github.com/idaholab/moose/discussions/19538#discussioncomment-1746578",
                          "updatedAt": "2023-11-30T20:14:46Z",
                          "publishedAt": "2021-12-03T20:30:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Ahh, duh. I was thinking much more general. Sorry about that.\nI think what I'm looking for more then is in regards to this comment:\n\nHow would I go about accessing those auto-generated variables from within an interface?\n\nWhat kind of interface, what does it do? What are you trying to do to the variables? etc",
                          "url": "https://github.com/idaholab/moose/discussions/19538#discussioncomment-1746608",
                          "updatedAt": "2023-11-30T20:14:46Z",
                          "publishedAt": "2021-12-03T20:35:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MikeLeimon"
                          },
                          "bodyText": "Right now I'm focusing on a Sievert interface. Ultimately, I have a case where I have a vapor phase species which can move/transform into a different species within an adjacent block. This is of course the first step though. When it is all said and done, there will be lots of different transformations between the entire set of autogenerated species. Given all the book-keeping that will need to be done, I view this part as being both very tedious and error prone if not done in an automated fashion.\nFor now, I'm going to spend a bit of time looking at the example you mentioned earlier, I'll be sure to drop more questions for you should they come up. Also, thanks again for your feedback. It is very much appreciated.",
                          "url": "https://github.com/idaholab/moose/discussions/19538#discussioncomment-1746657",
                          "updatedAt": "2023-11-30T20:14:47Z",
                          "publishedAt": "2021-12-03T20:52:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Absolutely, glad to help.\nAdmittedly, I'm not very familiar of what we do in the framework for these physics but have you taken a look at the chemical reactions physics module? https://mooseframework.inl.gov/modules/chemical_reactions/\nI'm not sure if you're just trying to solve ODEs or more, but said module should at least be able to give you suggestions on how to manage species in a generalized manner.",
                          "url": "https://github.com/idaholab/moose/discussions/19538#discussioncomment-1746685",
                          "updatedAt": "2023-11-30T20:14:48Z",
                          "publishedAt": "2021-12-03T21:00:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Non convergence with modification of PenaltyInterfaceDiffusion",
          "author": {
            "login": "Chaoyue-Liu"
          },
          "bodyText": "Hello,\nI am doing modification with the PenaltyInterfaceDiffusion kernel to achieve a function making the flux on the interface of two domains equals to exp(u-u_neighbor). However, the solver cannot reach convergence. I don't know if PenaltyInterface is the right way to do this or I write something wrong within the code.\nHere is an illustration of the model:\n\nHere is my repository for the files:\nhttps://github.com/Chaoyue-Liu/test.git\nAny suggestions will be appreciated! Thank you.\nChao",
          "url": "https://github.com/idaholab/moose/discussions/19525",
          "updatedAt": "2022-10-04T20:01:56Z",
          "publishedAt": "2021-12-02T17:38:47Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "I suggest you write your own interface kernel deriving from InterfaceKernel without modifying the existing PenaltyInterfaceDiffusion. PenaltyInterfaceDiffusion is used to enforce the equal (jump) value constraint on the variables. In your new class, the residual on element and neighbor will be something like :\nr = _test[_i][_qp] * (exp(_u[_qp] - _neighbor_value[_qp]));\n\nand\nr = _test_neighbor[_i][_qp] * (exp(_u[_qp] - _neighbor_value[_qp]));\n\nDouble check the sign in those residual. I am not quite understand your definition of normal, e.g. the convention for the direction definition.\nYou need to derive the Jacobian as well, e.g., take the derivative of r respect to _u and _neighbor_value.",
                  "url": "https://github.com/idaholab/moose/discussions/19525#discussioncomment-1739099",
                  "updatedAt": "2022-10-04T20:02:22Z",
                  "publishedAt": "2021-12-02T18:04:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "Thanks jiangwen for the prompt reply. I checked my residual and Jacobian again, I think it's fine which I post below, in case I did something wrong:\nmy RESIDUAL:\njump_value =  exp(_u[_qp] - _neighbor_value[_qp]);\nswitch (type)\n{\ncase Moose::Element:\nr = _test[_i][_qp] * _penalty * jump_value;\nbreak;\ncase Moose::Neighbor:\n  r = _test_neighbor[_i][_qp] * -_penalty * jump_value ;\n  break;\n\n}\nmy JACOBIAN:\nswitch (type)\n{\ncase Moose::ElementElement:\njac = _test[_i][_qp] * _penalty * _phi[_j][_qp] * exp(_u[_qp] - _neighbor_value[_qp]);\nbreak;\ncase Moose::ElementNeighbor:\n  jac = _test[_i][_qp] * _penalty * -_phi_neighbor[_j][_qp] * exp(_u[_qp] - _neighbor_value[_qp]);\n  break;\n\ncase Moose::NeighborElement:\n  jac = _test_neighbor[_i][_qp] * -_penalty * _phi[_j][_qp] * exp(_u[_qp] - _neighbor_value[_qp]);\n  break;\n\ncase Moose::NeighborNeighbor:\n  jac = _test_neighbor[_i][_qp] * -_penalty * -_phi_neighbor[_j][_qp] * exp(_u[_qp] - _neighbor_value[_qp]);\n  break;\n\n}\nAlso I tested other formula e.g. _u[_qp]*_u[_qp}-_u_neighbor[_qp], which works fine. But when it comes to exponential or sin or square function, it becomes non convergence.",
                          "url": "https://github.com/idaholab/moose/discussions/19525#discussioncomment-1739172",
                          "updatedAt": "2022-10-04T20:02:48Z",
                          "publishedAt": "2021-12-02T18:16:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "use penalty = 1.\napply the chain rule in your Jacobian calculation. For example, d(exp(f))/dx = exp(f) df/dx.",
                          "url": "https://github.com/idaholab/moose/discussions/19525#discussioncomment-1739358",
                          "updatedAt": "2022-10-04T20:03:01Z",
                          "publishedAt": "2021-12-02T18:50:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "use penalty = 1.\n\napply the chain rule in your Jacobian calculation. For example, d(exp(f))/dx = exp(f) df/dx.\n\n\n\n\nyes, that's what I did. It just don't converge somehow.",
                          "url": "https://github.com/idaholab/moose/discussions/19525#discussioncomment-1742649",
                          "updatedAt": "2022-10-04T20:03:01Z",
                          "publishedAt": "2021-12-03T08:55:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "I checked the model again. Turns out I made a silly mistake. The code modification is fine, instead, the sign of my neumann boundary condition is wrong. Thanks for the help!",
                          "url": "https://github.com/idaholab/moose/discussions/19525#discussioncomment-1743978",
                          "updatedAt": "2022-10-04T20:03:01Z",
                          "publishedAt": "2021-12-03T13:20:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Abstraction of dual user object types through a common base class",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Hi,\nI am trying to develop a new \"transfer\" class which directly push the user object variables on to the multi-apps. Here is the block i am interested in.\n\n[UserObjects]\n[stress_tensor]\ntype = StressTensorUO\nstress_variable = 'stress_xx_av'\n[]\n[def_coords]\ntype = DefCoordsUO\nstress_variable = 'stress_xx_av'\n[]\n[]\n[Transfers]\n[transfer_qty_fwd]\ntype = MultiAppTransferQuantity_UO\ndirection = to_multiapp\nuser_objects_name = \"stress_tensor def_coords\"\nuser_object_types = \"StressTensorUO DefCoordsUO\"\nsubapp_index = 0\nmulti_app = sub\n[]\n[]\n\nOne common issue being that, how to create an user object variable that can open up access to data inside both stress_tensor  and def_coords through an universal type. In order to address that, i created a common base class \"MultiAppUserObjBase\" and asked my user object classes to derive from this base class. When i try to access the user object data through this base class object (as given below), from my transfer class, i am getting undefined reference, which is quite understandable.\n\nFEProblemBase &  problem =  *_from_problems[0];\n_transfer_uo[0] = &problem.getUserObject(_uo_names[0]);\nfor (auto i:_transfer_uo[0]->_stress_vec){\nprintf(\"New Stress Vector: %f\",i)\n}\n\n\n/home/abalasub/Working/Projects/moose/framework/src/transfers/MultiAppTransferQuantity_UO.C: In member function \u2018virtual void MultiAppTransferQuantity_UO::executeToMultiapp()\u2019:\n/home/abalasub/Working/Projects/moose/framework/src/transfers/MultiAppTransferQuantity_UO.C:80:32: error: \u2018const class MultiAppUserObjBase\u2019 has no member named \u2018_stress_vec\u2019\nfor (auto i:_transfer_uo[0]->_stress_vec){\n^~~~~~~~~~~\nmake: *** [/home/abalasub/Working/Projects/moose/framework/build/unity_src/transfers_Unity.x86_64-pc-linux-gnu.opt.lo] Error 1\n\nPossibly i am missing something here, may be an upcasting to the child objects, which i am not very sure. The attached files might give you idea of the developments that has happened in this work. Your inputs here will be highly appreciated.\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/19485",
          "updatedAt": "2023-11-09T21:32:29Z",
          "publishedAt": "2021-11-25T13:35:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "abarun22"
                  },
                  "bodyText": "Sorry about that. Here are the attachments missing from my previous post.\n25112021.zip",
                  "url": "https://github.com/idaholab/moose/discussions/19485#discussioncomment-1700476",
                  "updatedAt": "2023-11-09T21:32:41Z",
                  "publishedAt": "2021-11-25T13:43:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat do you mean by UO variables? Are they auxiliary variables? These can be transfered already.\nI'd be a little wary of inheriting from two unrelated systems (UOs and transfers). It often works, but you have to be careful to consider all the interactions.\nI think the cleaner code would use composition instead of inheritance. The transfer would have a UO parameter, and would access the things it needs to transfer from the UO using accessor to the UO's member variables.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19485#discussioncomment-1742099",
                  "updatedAt": "2023-11-09T21:32:43Z",
                  "publishedAt": "2021-12-03T06:41:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "initQpStatefulProperties() was not overridden in the derived class",
          "author": {
            "login": "ritamcj"
          },
          "bodyText": "Hi everyone,\nI am simulating nucleation and growth for a polycrystal and trying to assign crystallographic orientations to new grains. I am attempting to read the updated orientation tensor from phase field into FiniteStrainUObasedCP in tensor mechanics. When I try input the \"old\" state property, I see the error as attached.\n\nI came across this discussion https://groups.google.com/g/moose-users/c/96d0ZUsyJQ0 and understood the cause of this error. I then tried to initialize the tensor in initQpStatefulProperties() as _crysrot_nuclei[_qp].setToIdentity(); but this didn't work as attached. I tried numerous other approaches but none worked.\n\nWhen I tried to read the current state property, I ran into \"Cyclic dependency detected in object ordering:\", possibly due to reading a variable calculated at \"timestep_end\" inside a function that is called at \"timestep_begin\".\n\nKindly let me know possible approaches to solve this problem. Any help is greatly appreciated.\nWarm regards,\nRitam Chatterjee",
          "url": "https://github.com/idaholab/moose/discussions/19450",
          "updatedAt": "2022-06-18T07:56:34Z",
          "publishedAt": "2021-11-22T14:31:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Rittam\nHave you looked through other examples in the code for doing this?\nThere are plenty in tensor_mechanics/src/materials.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1683088",
                  "updatedAt": "2022-06-18T07:56:59Z",
                  "publishedAt": "2021-11-22T17:43:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Guillaume,\nThank you for your response. I will search in the mentioned folder.\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1683121",
                          "updatedAt": "2022-06-18T07:57:01Z",
                          "publishedAt": "2021-11-22T17:49:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Guillaume,\nI looked into various files such as Eshelbytensor.C, RankTwoInvariant.C etc., and tried various approaches but couldn't solve this error. Basically, if I declare a property in a file in phase field at the end of a time step, how do I import its value to a file in tensor mechanics at the beginning of the next time step? Hence, an old stateful property is to be imported.\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1686939",
                          "updatedAt": "2022-06-18T07:57:01Z",
                          "publishedAt": "2021-11-23T11:27:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "To import a previous time step material property, you can use getMaterialPropertyOld<return type (Real, ADReal..., same as the one it was declared with)>(\"name_in_input_file OR name_of_the_property\")",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1688326",
                          "updatedAt": "2022-06-18T07:57:01Z",
                          "publishedAt": "2021-11-23T15:20:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "@ritamcj, when you do _crysrot_nuclei[_qp].setToIdentity(); and you see error messages containing 'this' argument discards qualifiers, you probably mistakenly declared the material property _crysrot_nuclei as const in the header file.",
                  "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1728261",
                  "updatedAt": "2022-06-18T07:57:01Z",
                  "publishedAt": "2021-12-01T13:17:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Gary,\nThank you for your reply. You are right. However, when I remove const from the header file, I get the error as in the screenshot. I think const is required when importing an old state property.\nI basically want to import an old state property from the phase field module to ComputeElasticitytensorCP, which runs at the beginning of a time step. But, this calls initQpStatefulProperties() and tries to override it. I don't know how to solve this. I declared the property in phase field as _crysrot_nuclei(declareProperty<RankTwoTensor>(\"crysrot_nuclei\")) and then read the old state property as _crysrot_nuclei_old(getMaterialPropertyOld<RankTwoTensor>(\"crysrot_nuclei\")). Do let me know any mistake in my approach.\nWarm regards,\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1730436",
                          "updatedAt": "2022-06-18T07:57:01Z",
                          "publishedAt": "2021-12-01T18:38:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "The type should be a const reference in this case.",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1730506",
                          "updatedAt": "2022-06-18T07:59:56Z",
                          "publishedAt": "2021-12-01T18:58:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "The old property _crysrot_nuclei_old should be a const reference. The property itself _crysrot_nuclei that you declared should be a reference. If it still doesn't work, could you paste the relevant pieces of your constructor, initQpStatefulProperties call, and header file here?\nThere is very likely a minor mistake in your header that is easy to identify.",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1733736",
                          "updatedAt": "2022-06-18T07:59:56Z",
                          "publishedAt": "2021-12-02T01:04:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Gary,\nI will take care to follow the guidelines next time. I have attached some pseudo code that will help understand the issue and my approach. I am trying to declare a property called Euler_angles_nuclei in Euler_nuclei.C in phase field and am trying to read it's old state value in elasticity_tensor.C in tensor mechanics. I have not explicitly called initQpStatefulProperties in elasticity_tensor.C. It is being called inside FiniteStrainUObasedCP in tensor mechanics. I hope the example files are easily understandable.\nWarm regards,\nRitam\nEuler_nuclei_Cfile.txt\nEuler_nuclei_hfile.txt\nelasticity_tensor_Cfile.txt\nelasticity_tensor_hfile.txt",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1739006",
                          "updatedAt": "2022-08-04T09:18:32Z",
                          "publishedAt": "2021-12-02T17:47:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "The framework is designed in the following way:\n\nOnly the object that declares the material property can assign values to it.\nObjects can request material properties, gaining read-only access to their values.\nWhen any object (including the object that declares it) requests the old value of a material property, that property becomes \"stateful\".\nAll stateful material properties must be initialized within the initQpStatefulProperties call.  Due to rules 1 & 2, you can only do this in the object that declares the material property.",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1741607",
                          "updatedAt": "2022-08-04T09:18:32Z",
                          "publishedAt": "2021-12-03T03:42:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "By read-only, I mean const MaterialProperty<> & -- you can't write to a const reference.\nAnother issue I noticed is that you are mixing material property types. Your Euler_angles_nuclei was declared as RealVectorValues in Euler_nuclei.h but is retrieved as RankTwoTensors in elasticity_tensor.C. If the types don't match, the framework cannot locate the material property you request.",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1741621",
                          "updatedAt": "2022-08-04T09:18:32Z",
                          "publishedAt": "2021-12-03T03:46:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Gary,\nThank you for the detailed explanation, especially point 4. I now understand that I'll have to try a different approach. I mistakenly retrieved the property as a rank two tensor while setting up the pseudo code. Many thanks for your suggestions.\nWarm regards,\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1741924",
                          "updatedAt": "2022-08-04T09:18:37Z",
                          "publishedAt": "2021-12-03T05:52:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Please also follow the posting guidelines #18270 -- don't upload screenshotd, instead use the native markdown code formatting.",
                  "url": "https://github.com/idaholab/moose/discussions/19450#discussioncomment-1733751",
                  "updatedAt": "2022-06-18T07:59:56Z",
                  "publishedAt": "2021-12-02T01:06:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "November 2021 News",
          "author": {
            "login": "cticenhour"
          },
          "bodyText": "The November 2021 MOOSE Newsletter has been released! A summary of the content is below:\n\nMOOSE Conda Packages Now Compatible with Xcode Newer Than 12.4, MacOS Monterey\nLegacy Input Parameter Deprecation\nMOOSE Improvements\n\nWeakly compressible fully-coupled implementation of the Navier Stokes equations\nWeakly compressible fully-coupled implementation of the porous media equations\nRenameBlockGenerator update\n\n\nlibMesh update summary\nSummary of bug fixes and minor enhancements",
          "url": "https://github.com/idaholab/moose/discussions/19531",
          "updatedAt": "2024-07-25T18:52:51Z",
          "publishedAt": "2021-12-02T23:42:39Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Compilation terminated while building the test problems on the Moose installation guide website",
          "author": {
            "login": "troyNCSU"
          },
          "bodyText": "Hi,\nI have encountered a problem while I try to build the testing problem mentioned on the getting started installation page. The following error messages show up on the terminal window. If you could help me in this regard, that will be great.\nThanks,\nTuhin\nError messages:\nake: execvp: python-config: Permission denied\nmake: execvp: python-config: Permission denied\n/projects/moose/moosetools/contrib/hit/hit.cpp:4:10: fatal error: Python.h: No such file or directory\n4 | #include \"Python.h\"\n|          ^~~~~~~~~~",
          "url": "https://github.com/idaholab/moose/discussions/18208",
          "updatedAt": "2022-07-03T21:30:49Z",
          "publishedAt": "2021-06-29T22:04:36Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAre you following the Conda install path?\nWhich operating system is that for?\nThe permission denied error is odd too.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-940571",
                  "updatedAt": "2022-07-03T21:30:54Z",
                  "publishedAt": "2021-06-29T22:32:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Actually @troyNCSU could you please let us know how you solved the problem in this thread? This will help future WSL users and will help me help them. Even if it was something super simple, it s very valuable",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-941557",
                          "updatedAt": "2022-07-03T21:31:00Z",
                          "publishedAt": "2021-06-30T06:10:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Or was it just changing the working directory?",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-941558",
                          "updatedAt": "2022-07-03T21:31:10Z",
                          "publishedAt": "2021-06-30T06:10:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "troyNCSU"
                  },
                  "bodyText": "Hi Guillaume,\n\nThank you for the quick response. I just followed the instructions\nmentioned on the getting started webpage on the Ubuntu terminal window. I\nhave not changed anything for the Conda install path.\n\nThe base operating system is Windows-10, but I have installed Ubuntu 20.04\nWSL and used this for the Moose installation.\n\nIn addition, I just want to mention that I also followed the instructions\nmentioned under the Build Issue on the Moose Troubleshooting page\n<https://mooseframework.inl.gov/help/troubleshooting.html#condaissues>. All\nthe steps there were carried out successfully.\n\nThanks,\nTuhin\n\u2026\nOn Tue, Jun 29, 2021 at 6:32 PM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n Are you following the Conda install path?\n Which operating system is that for?\n\n The permission denied error is odd too.\n\n Guillaume\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#18208 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AQVVBOPBJ5BWKGINDAJJSFLTVJCZVANCNFSM47RDANEA>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-940596",
                  "updatedAt": "2022-07-03T21:31:10Z",
                  "publishedAt": "2021-06-29T22:43:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok that's good.\nJust checking your environment:\nwhat does echo $LIBMESH_DIR; echo $MOOSE_DIR return ?\nwhat does which python return?\nwhat does ls -l return? (do you have permission to write in the folder you're working in)\nCan you locate the python.h header on your system? You can use locate Python.h",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-940743",
                          "updatedAt": "2022-07-03T21:31:10Z",
                          "publishedAt": "2021-06-30T00:06:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "troyNCSU"
                          },
                          "bodyText": "Hi Guillaume,\nHere are the answers to your questions:\necho $LIBMESH_DIR\n/home/$user/miniconda3/libmesh\necho $MOOSE_DIR\n... returns blank! ...\nwhich python\n/home/$user/miniconda3/bin/python\nls -l\n-rw-r--r-- 1 $user $user 94235922 Jun 27 23:43 Miniconda3-latest-Linux-x86_64.sh\ndrwxr-xr-x 1 $user $user      512 Jun 29 17:36 miniconda3\ndrwxr-xr-x 1 $user $user      512 Jun 27 23:54 projects\nlocate Python.h\n/home/$user/miniconda3/include/python3.8/Python.h\n/home/$user/miniconda3/pkgs/python-3.8.5-h7579374_1/include/python3.8/Python.h\nThanks,\nTuhin",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-940838",
                          "updatedAt": "2022-07-03T21:31:10Z",
                          "publishedAt": "2021-06-30T00:56:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Well looks like you have permissions in projects, and that the header reported missing is available.\nSo maybe the wrong compiler is used? That would be odd because it looks like your environment is well set up.\nWhat do echo $CXX and which mpicxx return ?\n$user is an odd username. I wonder if that's the issue.",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-940992",
                          "updatedAt": "2022-07-03T21:31:10Z",
                          "publishedAt": "2021-06-30T02:07:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "troyNCSU"
                          },
                          "bodyText": "Hi Guillaume,\nI would like to inform you that the problem has got resolved. The working directory has been updated and now the test runs are running perfectly. Thanks for helping me out, I really appreciate it.\nThanks,\nTuhin",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-941030",
                          "updatedAt": "2022-12-27T18:10:03Z",
                          "publishedAt": "2021-06-30T02:35:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Glad to hear it. Thanks for letting us know\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-941124",
                          "updatedAt": "2022-12-27T18:10:03Z",
                          "publishedAt": "2021-06-30T03:18:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "troyNCSU"
                  },
                  "bodyText": "How exactly the problem has been resolved is still mysterious. Earlier the\nPython.h file was not accessible, after running several commands as you\nsuggested in the earlier posts, it looks like the file has got accessible\nand the test problem build has done successfully.\n\u2026\nOn Wed, Jun 30, 2021 at 2:10 AM Guillaume Giudicelli < ***@***.***> wrote:\n Or was it just changing the working directory?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#18208 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AQVVBOPREIACTLCY4PZIROTTVKYOPANCNFSM47RDANEA>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-943753",
                  "updatedAt": "2022-07-03T21:31:10Z",
                  "publishedAt": "2021-06-30T14:40:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "We were able to resolve this problem with Python.h, building MOOSE and getting MPI to work.  They didn't have a symbolic link between python and python3 in their moose conda env bin.  They deleted that conda env and  reinstalled it with moose-tools and moose-libmesh and the link is now there and everything is working.  Their previous moose conda env was from October so maybe this link between python and python3 was recently added.  They were using WSL ubuntu which doesn't have python defined at all, it only has python3 and there is no symbolic link between the two.",
                  "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-1738048",
                  "updatedAt": "2022-07-03T21:31:10Z",
                  "publishedAt": "2021-12-02T15:47:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Great thanks for reporting this! Marking this as the answer since we did not really find a reason for why it had started working earlier, except that the procedure had been re-done.",
                          "url": "https://github.com/idaholab/moose/discussions/18208#discussioncomment-1738673",
                          "updatedAt": "2022-07-03T21:31:10Z",
                          "publishedAt": "2021-12-02T17:14:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The X11 connection broke (error 1).",
          "author": {
            "login": "wowodejiajia"
          },
          "bodyText": "Dear MOOSE developers,\nI ran it on Peacock for two days and then reported an error.  How can I solve it?\n(moose) phlab@DESKTOP-PRQA4JN:~/projects/donkey/problems$ peacock -i ex02.i\nQStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-phlab'\nFound executable: /home/phlab/projects/donkey/donkey-opt\nExodus filenames: ['peacock_run_exe_tmp_ex02_other.e']\nPostprocessor filenames: ['peacock_run_exe_tmp_ex02_out.csv']\nRunning command: mpiexec -n 16 /home/phlab/projects/donkey/donkey-opt Outputs/csv=true -i peacock_run_exe_tmp_ex02.i\nWorking directory: /home/phlab/projects/donkey/problems\nThe X11 connection broke (error 1). Did the X11 server die?",
          "url": "https://github.com/idaholab/moose/discussions/19522",
          "updatedAt": "2022-07-25T14:59:12Z",
          "publishedAt": "2021-12-02T03:51:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nhard to know. Maybe it did.\nYou should try to recover from the checkpoint or exodus output, see this page:\nhttps://mooseframework.inl.gov/application_usage/restart_recover.html\nand see if the simulation runs well again or if it dies (and that s what caused the broken connection?)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19522#discussioncomment-1734818",
                  "updatedAt": "2022-09-27T03:46:15Z",
                  "publishedAt": "2021-12-02T04:33:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wowodejiajia"
                          },
                          "bodyText": "Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/19522#discussioncomment-1735477",
                          "updatedAt": "2022-09-27T03:46:21Z",
                          "publishedAt": "2021-12-02T08:05:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Adding Fourier noise to a material property",
          "author": {
            "login": "vermaprk"
          },
          "bodyText": "I have material property 'c'. I want another material property 'c_true' which has a Fourier noise in material property 'c'.\nI have already defined the function Fourier noise. But how do I add it to my material property c_true?",
          "url": "https://github.com/idaholab/moose/discussions/19523",
          "updatedAt": "2022-12-03T07:23:37Z",
          "publishedAt": "2021-12-02T04:26:05Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "you can use a ParsedMaterial to define c_sum = c + c_noise\nhttps://mooseframework.inl.gov/source/materials/ParsedMaterial.html",
                  "url": "https://github.com/idaholab/moose/discussions/19523#discussioncomment-1734815",
                  "updatedAt": "2023-07-13T21:33:13Z",
                  "publishedAt": "2021-12-02T04:30:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "vermaprk"
                          },
                          "bodyText": "Yes, I tried doing that but it makes the calculations very slow. Is there any efficient way to add Fourier noise or any other noise (https://mooseframework.inl.gov/moose/source/functions/FourierNoise.html) to directly operate on material  property 'c' and give new material property c_true ?",
                          "url": "https://github.com/idaholab/moose/discussions/19523#discussioncomment-1735015",
                          "updatedAt": "2023-07-13T21:33:13Z",
                          "publishedAt": "2021-12-02T05:59:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think you'll have to code your own material if you want to make it fast",
                          "url": "https://github.com/idaholab/moose/discussions/19523#discussioncomment-1735058",
                          "updatedAt": "2023-07-13T21:33:13Z",
                          "publishedAt": "2021-12-02T06:12:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Random Number function",
          "author": {
            "login": "vermaprk"
          },
          "bodyText": "I want to create a function which randomly takes value between 0.5 to 1. Are there such kind of inbuilt functions. Can I use ParsedFunction and provide value as random? Please help I am new to moose.",
          "url": "https://github.com/idaholab/moose/discussions/19516",
          "updatedAt": "2022-09-28T07:33:12Z",
          "publishedAt": "2021-12-01T11:21:41Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@zachmprince\nI dont think we have that right now.\nFunctionIC has the code for doing this though, you could port it to a function",
                  "url": "https://github.com/idaholab/moose/discussions/19516#discussioncomment-1731715",
                  "updatedAt": "2022-09-28T07:33:19Z",
                  "publishedAt": "2021-12-01T21:08:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Transfer of a variable's derivative in MultiApp",
          "author": {
            "login": "lekah"
          },
          "bodyText": "Novice user alert \ud83d\ude04\nI have a master application in MOOSE that needs to access not just the (aux)variable y of a sub-application, but also the derivative of that variable, dy/dc, where c is another variable. How can I do that?\nI didn't find any good way of doing that via the transfer mechanism. I can transfer the derivative separately, but then I don't know how to inform MOOSE that this thing I transferred is actually a derivative of y.\nHope that was clear!\nAny hints are appreciated, thank you so much!",
          "url": "https://github.com/idaholab/moose/discussions/19509",
          "updatedAt": "2022-07-08T08:03:52Z",
          "publishedAt": "2021-11-30T18:12:20Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nTransferring it separately is the way to go here.\nNote that auxvariables don't hold derivative information (they only hold a single field for their value, even when trying to use AD), so you ll have to code in your derivative explicitly in the kernels.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1724617",
                  "updatedAt": "2022-07-08T08:03:51Z",
                  "publishedAt": "2021-11-30T20:33:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lekah"
                          },
                          "bodyText": "Hi Giullaume,\nthanks for the answer. The variable and derivative are calculated as a material property, I just copy them into AuxVariables for the transfer. I managed to transfer them separately into the master application (again into auxvariables). What is a good way to \"assemble\" them again into MaterialProperty plus the derivative in the Master application?\nLeonid",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1724661",
                          "updatedAt": "2022-07-08T08:03:51Z",
                          "publishedAt": "2021-11-30T20:43:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can use a MaterialRealAux to define material properties from auxiliary variables",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1724676",
                          "updatedAt": "2022-07-08T08:03:51Z",
                          "publishedAt": "2021-11-30T20:46:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lekah"
                          },
                          "bodyText": "Thanks for you answer, Guillaume!\nIn the documentation , it is written that The MaterialRealAux AuxKernel is used to output material properties as an element-level, constant variable. . I am using that in the subapplication to  assign a material's property to a variable (and the derivative to another variable).\nThe thing missing for me is the reverse operation (in the master application): assigning an AuxVariable as a materialProperty, and another AuxVariable as the derivative of that MaterialProperty. Do you know of a way to do that?",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1726784",
                          "updatedAt": "2022-07-08T08:03:51Z",
                          "publishedAt": "2021-12-01T08:22:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh good point.\nto copy an auxvariable into a material property you can use DerivativeParsedMaterial\nhttps://mooseframework.inl.gov/source/materials/DerivativeParsedMaterial.html\nbut you wont be able to set the derivative, the code will try to compute it itself.\nYour solution below works",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1729489",
                          "updatedAt": "2022-10-15T02:36:35Z",
                          "publishedAt": "2021-12-01T16:46:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you could also have used 2 parsedmaterials to define the property and its derivative. When setting the derivative, use the name that is used to retrieve that derivative in the kernels",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1729517",
                          "updatedAt": "2022-10-15T02:36:00Z",
                          "publishedAt": "2021-12-01T16:48:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lekah"
                          },
                          "bodyText": "Ah, that's a good idea. Well, since I implemented a class now I will stick to that, but using 2 parsed materials and hacking the name would have been an easier way!",
                          "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1729528",
                          "updatedAt": "2022-10-15T02:35:57Z",
                          "publishedAt": "2021-12-01T16:50:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lekah"
                  },
                  "bodyText": "So, together with @GiudGiud  's answer I found a solution.\nIn the subapplication, copy (field and derivative) from MaterialsProperty to AuxVariable using MaterialRealAux.\nTransfer from AuxVariable in subapplication to AuxVariable in master application (field and derivatives separately).\nTransfer from AuxVariable to MaterialsProperty and declare PropertyDerivative (had to write my own class for that).",
                  "url": "https://github.com/idaholab/moose/discussions/19509#discussioncomment-1729462",
                  "updatedAt": "2022-07-08T08:03:50Z",
                  "publishedAt": "2021-12-01T16:42:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}