{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wMi0xNlQxNDo1Njo1OS0wNjowMM4AXvfv"
    },
    "edges": [
      {
        "node": {
          "title": "WritableVariable access",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI'm using UserObjects to read from and write to AuxVariables. For writing purposes I use WritableVariables. The Problem I'm facing is following error\n*** ERROR ***\n'calc_sense' already obtained a writable reference to 'dV'. Only one object can obtain such a reference per variable and subdomain in a simulation.\n\nThe workflow of the simulation is:\n\nCalculate the initial value of a scalar and an elemental AuxVariable in a UserObject and write them. The elemental AuxVariable uses a WritableVariable reference.\nRead the value from the elemental AuxVariable in a second UserObject, do some modifications and write it back using a WritableVariable reference once again (which is where the error occurs).\nRead both the scalar and the elemental AuxVariable again for the final computation.\n\nIs there a way to get this working as it is? Or do I have to split my UserObject into an AuxScalarKernel and an elemental AuxKernel?",
          "url": "https://github.com/idaholab/moose/discussions/26816",
          "updatedAt": "2024-02-19T09:28:28Z",
          "publishedAt": "2024-02-15T11:08:48Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis check was added on purpose to avoid execution ordering issues.\nThe cleanest way forward here would be to turn one of your user objects into auxiliary kernels. These are the cannon way of setting auxiliary variables.\nIf you can't do that, I d just comment out the check in the framework and make sure things are still computed in the expected order\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26816#discussioncomment-8478544",
                  "updatedAt": "2024-02-15T11:30:11Z",
                  "publishedAt": "2024-02-15T11:30:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Ok thanks. I'll contemplate the switch to AuxKernels since that would also resolve the other issue I'm having  (#26806). I just thought it'd be neat to compute the scalar value and the matching elemental value in one object.\nI'm controlling the execution order through setting the execution order group, so there shouldn't be any issues there.",
                          "url": "https://github.com/idaholab/moose/discussions/26816#discussioncomment-8478594",
                          "updatedAt": "2024-02-15T11:35:46Z",
                          "publishedAt": "2024-02-15T11:35:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "For now I decided to just go with the \"comment out\" option so I don't have to refactor my code.",
                          "url": "https://github.com/idaholab/moose/discussions/26816#discussioncomment-8514887",
                          "updatedAt": "2024-02-19T09:28:28Z",
                          "publishedAt": "2024-02-19T09:28:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "sensitivity analysis",
          "author": {
            "login": "Ating24"
          },
          "bodyText": "When I was training a polynomial chaotic proxy model using an old version of MOOSE, I used 120 CPUs to calculate one example, but in the end, only one CPU was allocated to this example for calculation",
          "url": "https://github.com/idaholab/moose/discussions/26834",
          "updatedAt": "2024-02-19T01:13:38Z",
          "publishedAt": "2024-02-18T02:29:53Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "grmnptr"
                  },
                  "bodyText": "Please update your moose, managing the number of processors per app was added in 2021 to the stochastic tools module. Originally, the batch-reset/restore options used one process per app.",
                  "url": "https://github.com/idaholab/moose/discussions/26834#discussioncomment-8504426",
                  "updatedAt": "2024-02-18T02:34:10Z",
                  "publishedAt": "2024-02-18T02:34:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ating24"
                          },
                          "bodyText": "Is there any other way to set a single instance CPU on the old MOOSE? Does having too many polynomial chaotic trainers affect computational efficiency?",
                          "url": "https://github.com/idaholab/moose/discussions/26834#discussioncomment-8504439",
                          "updatedAt": "2024-02-18T02:36:57Z",
                          "publishedAt": "2024-02-18T02:36:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ating24"
                          },
                          "bodyText": "For example, modifying the batch-reset/restore  ?",
                          "url": "https://github.com/idaholab/moose/discussions/26834#discussioncomment-8504459",
                          "updatedAt": "2024-02-18T02:45:00Z",
                          "publishedAt": "2024-02-18T02:44:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ating24"
                          },
                          "bodyText": "Can we use code modification to make batch reset/restore options use multiple CPUs?",
                          "url": "https://github.com/idaholab/moose/discussions/26834#discussioncomment-8511197",
                          "updatedAt": "2024-02-19T01:13:38Z",
                          "publishedAt": "2024-02-19T01:13:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "'darcy_thermo_mech' tutorials not compiling, but 'examples' are compiling?",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "I'm working on a Linux laptop and following the MOOSE VIrtual Workshop (Summer 2020), and for some reason I cannot compile the darcy_thermo_mech/step01_diffusion file.\nI have made sure that I am in the correct directory, which is /projects/moose/tutorials/darcy_thermo_mech/step01_diffusion. I have also made sure that I have executed conda activate moose. However, when I execute the command make, I get the following error message/output:\nNot compiling MOOSE with NEML2 because NEML2_DIR is not a valid NEML2 checkout and/or libtorch is not enabled.\nLinking Library /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la...\nlibtool: warning: library '/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la' was moved.\nlibtool: warning: library '/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/heat_transfer/lib/libheat_transfer-opt.la' was moved.\n/bin/grep: /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la: No such file or directory\n/bin/sed: can't read /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la: No such file or directory\nlibtool:   error: '/home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la' is not a valid libtool archive\nmake: *** [/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/app.mk:370: /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la] Error 1\n\nIt is important to mention that after I installed MOOSE, I changed the 'projects' directory to 'projects_MOOSE' just as I thought this was a better name. But then as I realised a lot of the examples on the MOOSE website run with the directory titled 'projects', I changed the name back. But even still, I was able to compile the first three examples in projects/moose/examples after doing this and they all worked perfectly fine? So how can I get the tutorial examples to work/compile?\nNote: I changed the 'projects' directory back to 'projects_MOOSE' and then tried to compile the step01_diffusion application again, and got a slightly different error message (see below). It seems like MOOSE doesn't like the fact that I've changed the 'projects' directory to 'projects_MOOSE' after installation?\nNot compiling MOOSE with NEML2 because NEML2_DIR is not a valid NEML2 checkout and/or libtorch is not enabled.\nSymlinking MOOSE configure /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//framework/build/header_symlinks/MooseConfig.h\nLinking Library /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la...\nlibtool: warning: library '/home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/tensor_mechanics/lib/libtensor_mechanics-opt.la' was moved.\n/bin/grep: /home/enk001/projects/moose/modules/tensor_mechanics/lib/libtensor_mechanics-opt.la: No such file or directory\n/bin/sed: can't read /home/enk001/projects/moose/modules/tensor_mechanics/lib/libtensor_mechanics-opt.la: No such file or directory\nlibtool:   error: '/home/enk001/projects/moose/modules/tensor_mechanics/lib/libtensor_mechanics-opt.la' is not a valid libtool archive\nmake: *** [/home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//framework/app.mk:370: /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la] Error 1\n\nI was also curious: Do Peacock and Paraview come with the MOOSE installation? Or do I have to install them separately to view results generated in MOOSE?\nThanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/26832",
          "updatedAt": "2024-02-18T21:47:10Z",
          "publishedAt": "2024-02-17T21:04:59Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhen did you download moose?\nThe tutorials were not building for a week last week, that got fixed\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503498",
                  "updatedAt": "2024-02-17T21:25:49Z",
                  "publishedAt": "2024-02-17T21:25:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "I downloaded MOOSE on Friday (two days ago)? Should I update conda and MOOSE and retry? Am I right in saying that it shouldn't matter that I changed the directory name from 'projects' to 'projects_MOOSE'?\nIf I update conda and MOOSE, do you know how much GB this will use? I am currently hotspotting my laptop's internet connection with my mobile phone, and I have a monthly limit of 100 GB so I don't want to chew into this too much?",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503509",
                          "updatedAt": "2024-02-17T21:29:01Z",
                          "publishedAt": "2024-02-17T21:28:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Friday should have been fine.\nI'll check the tutorials when I get back.\nFor now can you use the next branch instead of the master branch (use git checkout next)",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503601",
                          "updatedAt": "2024-02-17T22:01:47Z",
                          "publishedAt": "2024-02-17T22:01:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Renaming the projects folder is totally ok\nAnd a full moose and libmesh will be a couple GB if you started from fresh. For an update probably under a GB",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503605",
                          "updatedAt": "2024-02-17T22:03:10Z",
                          "publishedAt": "2024-02-17T22:03:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Renaming the projects folder is totally ok\nAnd a full moose and libmesh will be a couple GB if you started from fresh. For an update probably under a GB",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503606",
                          "updatedAt": "2024-02-17T22:03:10Z",
                          "publishedAt": "2024-02-17T22:03:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "I switched to the next branch using git checkout next, but ultimately I got a similar error message (see below) when trying to compile step01_diffusion:\nNot compiling MOOSE with NEML2 because NEML2_DIR is not a valid NEML2 checkout and/or libtorch is not enabled.\nChecking if header needs updating: /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/include/base/MooseRevision.h...\nSymlinking MOOSE configure /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/build/header_symlinks/MooseConfig.h\nCreating Unity /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/build/unity_src/userobjects_Unity.C\nCompiling C++ (in opt mode) /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/build/unity_src/userobjects_Unity.C...\nLinking Library /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/libmoose-opt.la...\nLinking Library /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la...\nlibtool: warning: library '/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la' was moved.\nlibtool: warning: library '/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/heat_transfer/lib/libheat_transfer-opt.la' was moved.\n/bin/grep: /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la: No such file or directory\n/bin/sed: can't read /home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la: No such file or directory\nlibtool:   error: '/home/enk001/projects_MOOSE/moose/tutorials/darcy_thermo_mech/../..//modules/ray_tracing/lib/libray_tracing-opt.la' is not a valid libtool archive\nmake: *** [/home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//framework/app.mk:370: /home/enk001/projects/moose/tutorials/darcy_thermo_mech/../..//modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.la] Error 1",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503632",
                          "updatedAt": "2024-02-17T22:12:06Z",
                          "publishedAt": "2024-02-17T22:12:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Some of the warnings are detecting this moving around.\nDid you build moose then change the project folder name?\nIf so you want to git clean -xfD the repo then build again (save all your work first with git commit -a)",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503809",
                          "updatedAt": "2024-02-17T23:01:02Z",
                          "publishedAt": "2024-02-17T22:59:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Yes I built MOOSE using the following code:\nmkdir -p ~/projects\ncd ~/projects\ngit clone https://github.com/idaholab/moose.git\ncd moose\ngit checkout master\n\nThen I changed the directory 'projects' to 'projects_MOOSE'.",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503817",
                          "updatedAt": "2024-02-17T23:01:47Z",
                          "publishedAt": "2024-02-17T23:01:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Did you 'make' before or after changing the projects folder?",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503828",
                          "updatedAt": "2024-02-17T23:04:01Z",
                          "publishedAt": "2024-02-17T23:04:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "So would I execute the following code? (see below):\ngit clean -xfD\ngit commit -a\ngit clone https://github.com/idaholab/moose.git\ncd moose\ngit checkout master\n\nI'm kind of new to git so learning this too.",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503830",
                          "updatedAt": "2024-02-17T23:04:29Z",
                          "publishedAt": "2024-02-17T23:04:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "I executed the code below immediately after installing MOOSE.\ncd ~/projects/moose/test\nmake -j 6\n\nI then changed the projects folder and then tried to 'make' with the tutorial step01_diffusion example and it failed. But I was able to 'make' the first three 'examples' even after changing the projects folder?",
                          "url": "https://github.com/idaholab/moose/discussions/26832#discussioncomment-8503841",
                          "updatedAt": "2024-02-17T23:07:11Z",
                          "publishedAt": "2024-02-17T23:07:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "mixed usage of AD and non-AD materials and kernels",
          "author": {
            "login": "Bearunner"
          },
          "bodyText": "Dear all,\nI add one finite element AD kernel and use it with other non-AD kenels in Porous Flow.\nI need to use the AD and non-AD property 'PorousFlow_fluid_phase_density_nodal' in these kernels. When I run my input, I get the following message:\n\nThe requested AD material property 'PorousFlow_fluid_phase_density_nodal' of type 'std::vector'\nis already retrieved or declared as a non-AD property of type 'std::vector'.\n\nIt seems it is not allowed to use the AD and non-AD property 'PorousFlow_fluid_phase_density_nodal' in one input file.\nIs there a solution for this? Are the AD materials and kernels only used in finite volume parts of Porous flow modules in its current status?\nThanks.\nB",
          "url": "https://github.com/idaholab/moose/discussions/26830",
          "updatedAt": "2024-02-18T19:57:11Z",
          "publishedAt": "2024-02-17T11:11:14Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is a material to create the converted AD or non AD version of a property.\nIt s the MaterialADConvertor and it s counterpart for the other direction of conversion\nhttps://mooseframework.inl.gov/source/materials/MaterialADConverter.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8501041",
                  "updatedAt": "2024-02-17T14:17:08Z",
                  "publishedAt": "2024-02-17T14:17:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "thanks for your tips.\nI add the following contents in my input.\n [convert_to_AD]\n   type = MaterialADConverter\n \treg_props_in = 'PorousFlow_fluid_phase_density_nodal'\n \tad_props_out = 'AD_PorousFlow_fluid_phase_density_nodal'\n []\n\nAnd I change\n_fluid_density_node(getADMaterialProperty<std::vector>(\"PorousFlow_fluid_phase_density_nodal\")),\ninto\n_fluid_density_node(getADMaterialProperty<std::vector>(\"AD_PorousFlow_fluid_phase_density_nodal\")),\nin my own AD kernel.\nWhen I run my input, I get the following error:\n***** ERROR ***\nThe following error occurred in the object \"PorousFlow_density_nodal_all\", of type \"PorousFlowJoiner\".\n\nThe declared non-AD material property 'PorousFlow_fluid_phase_density_nodal' of type 'std::vector<double>'\nis already retrieved or declared as a non-AD property of type 'double'.\n\nI want to use MaterialProperty (\"PorousFlow_fluid_phase_density_nodal\") in non-AD Kernel and  ADMaterialProperty(\"AD PorousFlow_fluid_phase_density_nodal\") in AD Kernel.\nIt seems that every property can only be one type of AD or non-AD, not both types in one input file.\nCould you please help with this? Maybe adding a new AD material is an easier way?\nThanks again.\nB",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8502826",
                          "updatedAt": "2024-02-18T04:26:01Z",
                          "publishedAt": "2024-02-17T19:39:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The error is complaining about a difference between a vector and a double (single floating point number) type\nSo this is not about AD conversion anymore\nyou need to re examine the types for the creation and consumption of the material properties. And make sure they match with your code.",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8503933",
                          "updatedAt": "2024-02-17T23:36:49Z",
                          "publishedAt": "2024-02-17T23:36:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I think that both the AD and non-AD material property have the same name, so this won't work? I'm guessing that you have both of these\n[fluid]\n  type = PorousFlowSingleComponentFluid\n[]\n[adfluid]\n  type = ADPorousFlowSingleComponentFluid\n[]\n\nbut they both make a material with the same name, and then the other objects don't know which to access?\nUnfortunately, you might have to modify the code to do this. Perhaps we should add an ad_ to the front of the material property name when the ad version is used? @GiudGiud - do you think this is the way to go? It wouldn't be hard to do. I hadn't considered someone trying to use both AD and non-AD version of a material at the same time.",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8504724",
                          "updatedAt": "2024-02-18T04:21:54Z",
                          "publishedAt": "2024-02-18T04:21:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont think the prefix is necessary unless\n\nyou start doing this in normal operations\nyou do not let users specify the names they want for material properties.\n\nThe MaterialADConverter lets you use one of the two Materials and manually add the prefix there. Then in AD objects you specify the prefix\nFrom the error message mentioning 'double' vs std::vector I dont think this is just AD vs non-AD anymore",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8504773",
                          "updatedAt": "2024-02-18T04:41:46Z",
                          "publishedAt": "2024-02-18T04:41:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "Thanks for your tips @GiudGiud and @cpgr .\n\n\nTo avoid both the AD and non-AD material properties having the same name, I added a new property named 'for_AD_PorousFlow_fluid_phase_density_nodal' totally same to the 'PorousFlow_fluid_phase_density_nodal' in Material: PorousFlowActionBase.C\n_density(_compute_rho_mu\n? (_nodal_material ? &this->template declareGenericProperty<Real, is_ad>(\n\"PorousFlow_fluid_phase_density_nodal\" + _phase)\n: &this->template declareGenericProperty<Real, is_ad>(\n\"PorousFlow_fluid_phase_density_qp\" + _phase))\n: nullptr),\n_for_AD_density(_compute_rho_mu\n? (_nodal_material ? &this->template declareGenericProperty<Real, is_ad>(\n\"for_AD_PorousFlow_fluid_phase_density_nodal\" + _phase)\n: &this->template declareGenericProperty<Real, is_ad>(\n\"for_AD_PorousFlow_fluid_phase_density_qp\" + _phase))\n: nullptr),\n\n\nin Material: PorousFlowSingleComponentFluid.C\n(*_density)[_qp] = _fp.rho_from_p_T(_porepressure[_qp][_phase_num] * _pressure_to_Pascals,\n                                    _temperature[_qp] + _t_c2k);\n\n(*_for_AD_density)[_qp] = _fp.rho_from_p_T(_porepressure[_qp][_phase_num] * _pressure_to_Pascals,\n                                                                        _temperature[_qp] + _t_c2k);\n\nin Action: PorousFlowAddMaterialJoiner.C\n        if (params.get<bool>(\"compute_density_and_viscosity\"))\n        {\n          if (at_nodes)\n          {\n            addJoiner(at_nodes,\n                      is_ad,\n                      \"PorousFlow_fluid_phase_density_nodal\",\n                      \"PorousFlow_density_nodal_all\");\n            addJoiner(at_nodes,\n                       is_ad,\n                      \"for_AD_PorousFlow_fluid_phase_density_nodal\",\n                      \"for_AD_PorousFlow_density_nodal_all\");\n\nin Action: PorousFlowSinglePhaseBase.C\nconst bool compute_rho_mu_qp = _deps.dependsOn(_included_objects, \"density_qp\") ||\n_deps.dependsOn(_included_objects, \"for_AD_density_qp\") ||\n_deps.dependsOn(_included_objects, \"viscosity_qp\");\nThe above information is the main part of the newly added property named 'for_AD_PorousFlow_fluid_phase_density_nodal', some similar codes are not shown here.\n\n\nThe new property 'for_AD_PorousFlow_fluid_phase_density_nodal' has the same type of 'std::vector' to 'PorousFlow_fluid_phase_density_nodal'   as shown in PorousFlowMassTimeDerivative.C\n_fluid_density(_multiply_by_density ? &getMaterialProperty<std::vector>(\n\"PorousFlow_fluid_phase_density_nodal\")\n: nullptr),\n\n\nI use the MaterialADConverter\n[convert_to_AD]\ntype = MaterialADConverter\nreg_props_in = 'for_AD_PorousFlow_fluid_phase_density_nodal'\nad_props_out = 'AD_PorousFlow_fluid_phase_density_nodal'\n[]\nto get the 'AD_PorousFlow_fluid_phase_density_nodal' required in my own AD kernel.\n_ad_fluid_density_node(getADMaterialProperty<std::vector<Real>>(\"AD_PorousFlow_fluid_phase_density_nodal\")),\n\nBut I still get the following error information:\n*** ERROR ***\nThe following error occurred in the object \"PorousFlow_density_nodal_all\", of type \"PorousFlowJoiner\".\nThe declared non-AD material property 'PorousFlow_fluid_phase_density_nodal' of type 'std::vector'\nis already retrieved or declared as a non-AD property of type 'double'.",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8508668",
                          "updatedAt": "2024-02-18T17:50:31Z",
                          "publishedAt": "2024-02-18T17:47:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "you declare it as a Real\n_density(_compute_rho_mu\n? (_nodal_material ? &this->template declareGenericProperty<Real, is_ad>(\n\"PorousFlow_fluid_phase_density_nodal\" + _phase)\n\nand retrieve it as a vector\n_ad_fluid_density_node(getADMaterialProperty<std::vector<Real>>(\"AD_PorousFlow_fluid_phase_density_nodal\")),\n\nthat s the problem",
                  "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8508918",
                  "updatedAt": "2024-02-18T18:20:14Z",
                  "publishedAt": "2024-02-18T18:20:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "Thanks a lot.  Yes, you are right! It solves.",
                          "url": "https://github.com/idaholab/moose/discussions/26830#discussioncomment-8509629",
                          "updatedAt": "2024-02-18T19:57:11Z",
                          "publishedAt": "2024-02-18T19:57:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Reading files on the go rather than pre-read everything before simulation starts",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI'm working on mining hydro simulation in transient, I need to update the damage (via PropertyReadFile > GenericConstantArray > PorousFlowPorosityConstCSV) file at every time step vai Controls, it appears that MOOSE read all the 50+ files at once at the beginning which take so much RAM. is there a way to make it read the data on the go?\nor is there any other ways to work around this?\nThank you guys!\nexample of the input file below:\n\n[./damage_read_EXCHG_0001_LOGPCOMBINED]\ntype = PropertyReadFile\nprop_file_name = 'EXCHG_0001_LOGPCOMBINED.inp'\nnprop = 1\n read_type = element\n[../]\n[./damage_read_EXCHG_0002_LOGPCOMBINED]\ntype = PropertyReadFile\nprop_file_name = 'EXCHG_0002_LOGPCOMBINED.inp'\nnprop = 1\n read_type = element\n[../]\n[./damage_read_EXCHG_0003_LOGPCOMBINED]\ntype = PropertyReadFile\nprop_file_name = 'EXCHG_0003_LOGPCOMBINED.inp'\nnprop = 1\n read_type = element\n[../]\n[./damage_read_EXCHG_0004_LOGPCOMBINED]\ntype = PropertyReadFile\nprop_file_name = 'EXCHG_0004_LOGPCOMBINED.inp'\nnprop = 1\n read_type = element\n[../]\n\n[Controls]\n[controls_EXCHG_0001_LOGPCOMBINED]\ntype = ConditionalFunctionEnableControl\nenable_objects = 'Materials::damage_EXCHG_0001_LOGPCOMBINED UserObjects::damage_read_EXCHG_0001_LOGPCOMBINED BCs::drain_DRAINSRFUG_Y2017_M08'\nconditional_function = 'if(t>= 0 & t< 0.08,1,0)'\nexecute_on = 'TIMESTEP_BEGIN'\n[]\n[controls_EXCHG_0002_LOGPCOMBINED]\ntype = ConditionalFunctionEnableControl\nenable_objects = 'Materials::damage_EXCHG_0002_LOGPCOMBINED UserObjects::damage_read_EXCHG_0002_LOGPCOMBINED BCs::drain_DRAINSRFUG_Y2017_M09'\nconditional_function = 'if(t>= 0.08 & t< 0.17,1,0)'\nexecute_on = 'TIMESTEP_BEGIN'\n[]\n[controls_EXCHG_0003_LOGPCOMBINED]\ntype = ConditionalFunctionEnableControl\nenable_objects = 'Materials::damage_EXCHG_0003_LOGPCOMBINED UserObjects::damage_read_EXCHG_0003_LOGPCOMBINED BCs::drain_DRAINSRFUG_Y2017_M10'\nconditional_function = 'if(t>= 0.17 & t< 0.25,1,0)'\nexecute_on = 'TIMESTEP_BEGIN'\n[]\n[controls_EXCHG_0004_LOGPCOMBINED]\ntype = ConditionalFunctionEnableControl\nenable_objects = 'Materials::damage_EXCHG_0004_LOGPCOMBINED UserObjects::damage_read_EXCHG_0004_LOGPCOMBINED BCs::drain_DRAINSRFUG_Y2017_M11'\nconditional_function = 'if(t>= 0.25 & t< 0.33,1,0)'\nexecute_on = 'TIMESTEP_BEGIN'\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23170",
          "updatedAt": "2024-02-18T07:51:26Z",
          "publishedAt": "2023-01-16T01:11:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI would write a derived class of PropertyReadFile that would not read on initialSetup but read on timestepSetup instead, with a boolean to only read once.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-4699955",
                  "updatedAt": "2023-01-16T18:18:00Z",
                  "publishedAt": "2023-01-16T18:17:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud,\nHow do I actually implement this into MOOSE object? for example the PropertyReadFile \nI looked into its source file, I don't see anything related to the initialSetup at all\nwhere do i place virtual void timestepSetup(); into the source file? there is no example at all :(\nhttps://mooseframework.inl.gov/source/interfaces/SetupInterface.html\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5249644",
                          "updatedAt": "2023-03-09T05:01:18Z",
                          "publishedAt": "2023-03-09T05:01:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "https://mooseframework.inl.gov/docs/doxygen/moose/classSetupInterface.html#aa801b019cc7b06131dcacb126f616270\nthey are virtual, and unimplemented for that object.\nSo you can implement them and then they will run.\nReading might not have been on initialSetup, it s been a while since I was in that code",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5249711",
                          "updatedAt": "2023-03-09T05:07:28Z",
                          "publishedAt": "2023-03-09T05:07:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "So the simplest way would be make a copy of PropertyReadFile and put it into virtual void timestepSetup(); ?\ncoz even though I tried exceute_on = 'none' it still read the file during the initial setup",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5249800",
                          "updatedAt": "2023-03-09T05:11:43Z",
                          "publishedAt": "2023-03-09T05:11:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "well right now it (readData) is in the constructor so you can't stop that by not executing",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5250011",
                          "updatedAt": "2023-03-09T05:35:34Z",
                          "publishedAt": "2023-03-09T05:35:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud, I'm a bit confused, so what do you think is the best/simplest way to solve this issue?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5250061",
                          "updatedAt": "2023-03-09T05:44:17Z",
                          "publishedAt": "2023-03-09T05:44:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "move (and possibly adapt) the readData call from the constructor to a new timestepStep() routine seems like a workable solution.\nYou ll want to make it your own object (eg make a copy and change the name) in your own app though",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5250430",
                          "updatedAt": "2023-03-09T06:18:03Z",
                          "publishedAt": "2023-03-09T06:18:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud I managed to create a copy of readfile object, i'm still confused on where to i put it into timestepStep()\nlooking at SetupInterface.C (or .h) they look empty to me, still not exactly sure what to do.\nRegards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5301604",
                          "updatedAt": "2023-03-14T10:27:46Z",
                          "publishedAt": "2023-03-14T10:27:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "They are empty in timestepSetup() in the interface, at that point it's just an insertion point, but you can override them and place what you want \"done at the beginning of every time step\" in those routines.\nMaybe start by adding this to your class:\nvoid\nMyReader::timestepSetup()\n{\n  _console << \"Going to setup here\" << std::endl;\n}\n\nand see if it gets triggered at the moments desired",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5307896",
                          "updatedAt": "2023-03-14T14:42:26Z",
                          "publishedAt": "2023-03-14T14:42:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "sorry for being such a pain @GiudGiud\nit still read the data at the start, seems like the original .h file of PropertyReadFile.h has these line that does it:\nclass PropertyReadFileBE : public GeneralUserObject\n{\npublic:\n  static InputParameters validParams();\n\n  PropertyReadFileBE(const InputParameters & parameters);\n  virtual ~PropertyReadFileBE() {}\n \n  virtual void initialize() {}\n  virtual void execute() {}\n  virtual void finalize() {}\n\n  virtual void timestepSetup();  <<<<< I added this so the line you suggested works\n\nI tried to get rid and it wont compile, so i keep it there.\nhere is my PropertyReadFileBE.C (I just added BE at the end of the name)\n....\n...\n  params.addParam<bool>(\n      \"use_zero_based_block_indexing\", true, \"Are the blocks numbered starting at zero?\");\n  return params;\n}\n\nPropertyReadFileBE::PropertyReadFileBE(const InputParameters & parameters)\n  : GeneralUserObject(parameters),\n    _prop_file_name(getParam<FileName>(\"prop_file_name\")),\n    _reader(_prop_file_name),\n\n    _read_type(getParam<MooseEnum>(\"read_type\").getEnum<ReadTypeEnum>()),\n    _use_random_tesselation(getParam<bool>(\"use_random_voronoi\")),\n    _rand_seed(getParam<unsigned int>(\"rand_seed\")),\n    _rve_type(getParam<MooseEnum>(\"rve_type\")),\n    _block_zero(getParam<bool>(\"use_zero_based_block_indexing\")),\n    _ngrain(isParamValid(\"ngrain\") ? getParam<unsigned int>(\"ngrain\")\n                                   : getParam<unsigned int>(\"nvoronoi\")),\n    _mesh(_fe_problem.mesh()),\n    _nprop(getParam<unsigned int>(\"nprop\")),\n    _nvoronoi(isParamValid(\"ngrain\") ? getParam<unsigned int>(\"ngrain\")\n                                     : getParam<unsigned int>(\"nvoronoi\")),\n    _nblock(getParam<unsigned int>(\"nblock\"))\n{\n  if (!_use_random_tesselation && parameters.isParamSetByUser(\"rand_seed\"))\n    paramError(\"rand_seed\",\n               \"Random seeds should only be provided if random tesselation is desired\");\n\n  Point mesh_min, mesh_max;\n  for (unsigned int i : make_range(Moose::dim))\n  {\n    mesh_min(i) = _mesh.getMinInDimension(i);\n    mesh_max(i) = _mesh.getMaxInDimension(i);\n  }\n  _bounding_box = MooseUtils::buildBoundingBox(mesh_min, mesh_max);\n\n  readData();\n}\n\nvoid\nPropertyReadFileBE::timestepSetup()\n{\n  _console << \"Going to setup here\" << std::endl;\n}\n\nmaybe I put it at the wrong location?\nThank you!\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5316673",
                          "updatedAt": "2023-03-15T03:17:34Z",
                          "publishedAt": "2023-03-15T03:17:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nreadData(); is in the constructor and reads the data on construction (at the beginning)\nNow that you have a timestepSetup routine I suggest you move readData() there:\nso\n....\n  }\n  _bounding_box = MooseUtils::buildBoundingBox(mesh_min, mesh_max);\n  // I deleted readData from the constructor\n}\n\nvoid\nPropertyReadFileBE::timestepSetup()\n{\n  _console << \"Going to setup here\" << std::endl;\n  readData();\n\n}",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-5317224",
                          "updatedAt": "2023-03-15T05:11:06Z",
                          "publishedAt": "2023-03-15T05:10:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "Hi @GiudGiud\na quick question, so do the very first file will always be read at the setup stage? or at timestep_begin?\nSo i'm making the version where it read file according to the vector of time (just in case the simulation does not converge, so it wont mess up the sequence of files), but I find that the very first file doesn't follow/print the same stuff as later time_steps\n  [damage_read]\n    type = PropertyReadFileTimeBased\n    prop_file_name = 'damage_01.csv damage_01.csv damage_02.csv damage_03.csv damage_04.csv damage_05.csv'\n    time_per_file = ' 0 1  2  3  4  5'  **for some reason I need to specify time/file at timestep = 0, so the sequence is correct\n    nprop = 1\n    read_type = element\n    execute_on = 'TIMESTEP_BEGIN'\n  []\n\nBelow is the console, please dont mind a lot of printing, i will clean those up later, but yeh at timestep = 1, it doesn't even say it read damage_01.csv, but it already read (i check the results and they are fine).\n  Time Step 0, time = 0\n\nTime Step 1, time = 1, dt = 1\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 1\nCurrent file index before loop: 1\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 0, Index check: 1\nChecking against time point: 3 for file index 3\nCondition checks for i = 3: Time check: 0, Index check: 1\nChecking against time point: 4 for file index 4\nCondition checks for i = 4: Time check: 0, Index check: 1\nChecking against time point: 5 for file index 5\nCondition checks for i = 5: Time check: 0, Index check: 1\n    |residual|_2 of individual variables:\n               porepressure: 3.43178e+14\n 0 Nonlinear |R| = 3.431779e+14\n      0 Linear |R| = 3.431779e+14\n      1 Linear |R| = 2.124006e+05\n    |residual|_2 of individual variables:\n               porepressure: 212400\n 1 Nonlinear |R| = 2.124004e+05\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 1\n Solve Converged!\n\nTime Step 2, time = 2, dt = 1\n\n\n*** Info ***\nLast file specified has been read. The file will no longer be updated.\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 2\nCurrent file index before loop: 1\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 1, Index check: 1\nEntering condition with i = 2\n_current_file_index 2\nReading property file: /home/moose/Hydro_Krw_test/damage_02.csv\n    |residual|_2 of individual variables:\n               porepressure: 212400\n 0 Nonlinear |R| = 2.124004e+05\n      0 Linear |R| = 2.124004e+05\n      1 Linear |R| = 3.901731e+04\n      2 Linear |R| = 9.621996e+03\n      3 Linear |R| = 1.966464e+03\n      4 Linear |R| = 2.637169e+02\n      5 Linear |R| = 3.926322e+01\n      6 Linear |R| = 5.147039e+00\n      7 Linear |R| = 8.759880e-01\n    |residual|_2 of individual variables:\n               porepressure: 3.18096\n 1 Nonlinear |R| = 3.180957e+00\n      0 Linear |R| = 3.180957e+00\n      1 Linear |R| = 3.025171e-01\n      2 Linear |R| = 7.013113e-02\n      3 Linear |R| = 1.055615e-02\n      4 Linear |R| = 1.993528e-03\n      5 Linear |R| = 4.139998e-04\n      6 Linear |R| = 9.753651e-05\n      7 Linear |R| = 1.894626e-05\n    |residual|_2 of individual variables:\n               porepressure: 0.117958\n 2 Nonlinear |R| = 1.179585e-01\n      0 Linear |R| = 1.179585e-01\n      1 Linear |R| = 3.312861e-03\n      2 Linear |R| = 5.910309e-04\n      3 Linear |R| = 1.415426e-04\n      4 Linear |R| = 4.362087e-05\n      5 Linear |R| = 9.878118e-06\n      6 Linear |R| = 1.942041e-06\n      7 Linear |R| = 2.944773e-07\n    |residual|_2 of individual variables:\n               porepressure: 0.0989395\n 3 Nonlinear |R| = 9.893953e-02\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 3\n Solve Converged!\n\nTime Step 3, time = 2.5, dt = 0.5\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 2.5\nCurrent file index before loop: 2\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 1, Index check: 0\nChecking against time point: 3 for file index 3\nCondition checks for i = 3: Time check: 0, Index check: 1\nChecking against time point: 4 for file index 4\nCondition checks for i = 4: Time check: 0, Index check: 1\nChecking against time point: 5 for file index 5\nCondition checks for i = 5: Time check: 0, Index check: 1\n    |residual|_2 of individual variables:\n               porepressure: 0.1821\n 0 Nonlinear |R| = 1.820995e-01\n      0 Linear |R| = 1.820995e-01\n      1 Linear |R| = 8.930544e-02\n      2 Linear |R| = 2.800941e-02\n      3 Linear |R| = 5.765832e-03\n      4 Linear |R| = 1.428966e-03\n      5 Linear |R| = 2.960613e-04\n      6 Linear |R| = 6.701613e-05\n      7 Linear |R| = 1.169207e-05\n      8 Linear |R| = 2.058197e-06\n      9 Linear |R| = 4.380740e-07\n    |residual|_2 of individual variables:\n               porepressure: 0.0841133\n 1 Nonlinear |R| = 8.411329e-02\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 1\n Solve Converged!\n\nTime Step 4, time = 3, dt = 0.5\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 3\nCurrent file index before loop: 2\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 1, Index check: 0\nChecking against time point: 3 for file index 3\nCondition checks for i = 3: Time check: 1, Index check: 1\nEntering condition with i = 3\n_current_file_index 3\nReading property file: /home/moose/Hydro_Krw_test/damage_03.csv\n    |residual|_2 of individual variables:\n               porepressure: 0.0841146\n 0 Nonlinear |R| = 8.411465e-02\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 0\n Solve Converged!\n\nTime Step 5, time = 3.5, dt = 0.5\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 3.5\nCurrent file index before loop: 3\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 1, Index check: 0\nChecking against time point: 3 for file index 3\nCondition checks for i = 3: Time check: 1, Index check: 0\nChecking against time point: 4 for file index 4\nCondition checks for i = 4: Time check: 0, Index check: 1\nChecking against time point: 5 for file index 5\nCondition checks for i = 5: Time check: 0, Index check: 1\n    |residual|_2 of individual variables:\n               porepressure: 0.0841146\n 0 Nonlinear |R| = 8.411465e-02\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 0\n Solve Converged!\n\nTime Step 6, time = 4, dt = 0.5\ntest test\n time_size: 6\n file_size: 6\nContents of _time_per_file: 0 1 2 3 4 5 \nAt Time Step: 4\nCurrent file index before loop: 3\nChecking against time point: 0 for file index 0\nCondition checks for i = 0: Time check: 1, Index check: 0\nChecking against time point: 1 for file index 1\nCondition checks for i = 1: Time check: 1, Index check: 0\nChecking against time point: 2 for file index 2\nCondition checks for i = 2: Time check: 1, Index check: 0\nChecking against time point: 3 for file index 3\nCondition checks for i = 3: Time check: 1, Index check: 0\nChecking against time point: 4 for file index 4\nCondition checks for i = 4: Time check: 1, Index check: 1\nEntering condition with i = 4\n_current_file_index 4\nReading property file: /home/moose/Hydro_Krw_test/damage_04.csv\n    |residual|_2 of individual variables:\n               porepressure: 0.0841146\n 0 Nonlinear |R| = 8.411465e-02\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 0\n Solve Converged!\n\n\nhere is the .C (this version is probs good for the main MOOSE as well :) )\n#include \"PropertyReadFileTimeBased.h\"\n\n\nregisterMooseObject(\"moose_behApp\", PropertyReadFileTimeBased);\n\n\nInputParameters\nPropertyReadFileTimeBased::validParams()\n{\n  InputParameters params = PropertyReadFile::validParams();\n  params.addParam<std::vector<Real>>(\"time_per_file\", \"Vector of timesteps at which to switch property files\");\n\n\n  return params;\n}\n\nPropertyReadFileTimeBased::PropertyReadFileTimeBased(const InputParameters & parameters)\n  : PropertyReadFile(parameters),\n  _time_per_file(getParam<std::vector<Real>>(\"time_per_file\")),\n  _current_time(0), // Initialize _current_time\n  _initialize_called_once(declareRestartableData<bool>(\"initialize_called\", false))\n{\n\n}\n\n\nvoid PropertyReadFileTimeBased::initialize()\n{\n\n  _console << \"test test\" << std::endl;\n\n  _console << \" time_size: \" << _time_per_file.size() << std::endl;\n  _console << \" file_size: \" << _prop_file_names.size() << std::endl;\n  \n    // if (!_initialize_called_once)\n    // {\n    //     _initialize_called_once = true;\n    //     return;\n    // }\n\n    // Update _current_time to the current simulation time\n    _current_time = _fe_problem.time();\n    // Print the contents of _time_per_file for debugging\n    _console << \"Contents of _time_per_file: \";\n    for (size_t i = 0; i < _time_per_file.size(); ++i) {\n        _console << _time_per_file[i] << \" \";\n    }\n    _console << std::endl;\n\n\n    // _console << \"Before loop - Current time: \" << _current_time << \", Current file index: \" << _current_file_index << std::endl;\n\n    _console << \"At Time Step: \" << _current_time << std::endl;\n    _console << \"Current file index before loop: \" << _current_file_index << std::endl; \n    for (size_t i = 0; i < _time_per_file.size(); ++i)\n    {\n        // If the current time is equal to or has just surpassed a specified time point\n        // and we haven't switched to this file yet\n        // _console << \"Condition checks for i = \" << i << \": Time check: \" << (_current_time >= _time_per_file[i]) << \", Index check: \" << (_current_file_index < i) << std::endl;\n        _console << \"Checking against time point: \" << _time_per_file[i] << \" for file index \" << i << std::endl;\n        _console << \"Condition checks for i = \" << i << \": Time check: \" << (_current_time >= _time_per_file[i]) << \", Index check: \" << (_current_file_index < i) << std::endl;\n        if (_current_time >= _time_per_file[i] && _current_file_index < i)\n        {\n            _console << \"Entering condition with i = \" << i << std::endl;\n            // Update the current file index to this new index\n            _current_file_index = i;\n            \n            _console << \"_current_file_index \" << _current_file_index << std::endl;\n\n            // Ensure the new file index is within the bounds of the files list\n            if (_current_file_index < _prop_file_names.size())\n            {\n                // Print the name of the file that is about to be read\n                _console << \"Reading property file: \" << _prop_file_names[_current_file_index] << std::endl;\n\n                // Set the new file name for the reader and read the data\n                _reader.setFileName(_prop_file_names[_current_file_index]);\n                readData();\n\n                _current_file_index = _current_file_index - 1;\n                \n            }\n            else\n            {\n                _console << \"Specified time exceeds available files. No new file will be read.\" << std::endl;\n            }\n\n            // Since we've found the file to switch to, break out of the loop\n            break;\n        }\n    }\n}\n\nThank you,\nTrai",
                  "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8341690",
                  "updatedAt": "2024-02-02T03:33:06Z",
                  "publishedAt": "2024-02-02T03:33:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It s read on setup.\nSo yes you may be seeing oddities there. You could add a Boolean parameter to choose between doing the first reading on setup and on first execution",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8341813",
                          "updatedAt": "2024-02-02T03:56:58Z",
                          "publishedAt": "2024-02-02T03:56:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "You could add a Boolean parameter to choose between doing the first reading on setup and on first execution\n\nHi @GiudGiud\nI spent an hr looking for this, how do I do this? and what are the options available?\ncouldn't find the guide anywhere.\nThank you!\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8342262",
                          "updatedAt": "2024-02-02T05:27:43Z",
                          "publishedAt": "2024-02-02T05:27:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I meant coding that boolean. It hasn't been added yet",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8342272",
                          "updatedAt": "2024-02-02T05:29:43Z",
                          "publishedAt": "2024-02-02T05:29:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in the header add const bool _load_on_construction;\nin the validParams, add params.addParam<bool>(\"load_file_on_construction\", \"Whether to load the file on construction of the reader\");\nthen in the constructor you add\n _load_on_construction(getParam<bool>(\"load_on_construction\");\n\nand now you can use this boolean to modify the logic on when to read",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8342394",
                          "updatedAt": "2024-02-02T05:48:58Z",
                          "publishedAt": "2024-02-02T05:48:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud\nsorry for asking again, I thought I could do it but I couldn't\nHow to make it execute at the timestep_begin since the first file? I still notice that the first file is still required during the initial setup.\nThank you\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8475284",
                          "updatedAt": "2024-02-15T05:48:27Z",
                          "publishedAt": "2024-02-15T05:48:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No worries. I ll put up a PR to moose for this.",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8478652",
                          "updatedAt": "2024-02-15T11:43:31Z",
                          "publishedAt": "2024-02-15T11:43:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Thank you @GiudGiud !",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8478701",
                          "updatedAt": "2024-02-15T11:48:47Z",
                          "publishedAt": "2024-02-15T11:48:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud\nThank you for quickly added that option to PropertyReadFile\nHowever, I got an error then I set load_first_file_on_construction = false\nwhen load_first_file_on_construction = true there is no problem the script read file as expected\n*** ERROR ***\nThe supplied index 1 is out-of-range for the available data in file '/home/moose/Hydro_Krw_test/damage_01.csv' which contains 0 items.\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 1\n\n\n*** ERROR ***\nThe supplied index 9 is out-of-range for the available data in file '/home/moose/Hydro_Krw_test/damage_01.csv' which contains 0 items.\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 2\n\n\n*** ERROR ***\nThe supplied index 0 is out-of-range for the available data in file '/home/moose/Hydro_Krw_test/damage_01.csv' which contains 0 items.\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 3\n\n\n*** ERROR ***\nThe supplied index 2 is out-of-range for the available data in file '/home/moose/Hydro_Krw_test/damage_01.csv' which contains 0 items.\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8486579",
                          "updatedAt": "2024-02-15T23:23:10Z",
                          "publishedAt": "2024-02-15T23:23:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you need to make sure to use the object after the file has been read.\nSo execute the user object as early as possible to read the file.\nforce_preaux = true and maybe a execute_on = TIMESTEP_BEGIN at least",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8487317",
                          "updatedAt": "2024-02-16T01:54:45Z",
                          "publishedAt": "2024-02-16T01:54:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "yep I used both, still gives the same error when load_first_file_on_construction = false\n  [damage_read]\n    type = PropertyReadFile\n    prop_file_name = 'damage_01.csv damage_02.csv damage_03.csv damage_04.csv damage_05.csv'\n    nprop = 1\n    read_type = element\n    execute_on = 'TIMESTEP_BEGIN'\n    load_first_file_on_construction = false\n    force_preaux = true\n  []\n\nbut it's okay, I can work around this\nThank you!\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/23170#discussioncomment-8505434",
                          "updatedAt": "2024-02-18T07:51:26Z",
                          "publishedAt": "2024-02-18T07:51:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to set the number of parallel CPUs for older versions of MOOSE",
          "author": {
            "login": "Ating24"
          },
          "bodyText": "I used an older version of MOOSE on the cluster for sensitivity analysis (which had invalid min/max_procs_per-app values), and used a total of 80 CPUs to calculate 256 sample data. I want to calculate 2 samples at a time, with 40 CPUs per sample. Or calculate one sample at a time, one CPU per sample. How do I operate it?",
          "url": "https://github.com/idaholab/moose/discussions/26824",
          "updatedAt": "2024-02-18T02:39:31Z",
          "publishedAt": "2024-02-16T05:47:53Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "grmnptr"
                  },
                  "bodyText": "Please update your moose version, the control over processor per app was introduced in 2021. If you don't have access to that, I am afraid we cannot help you.",
                  "url": "https://github.com/idaholab/moose/discussions/26824#discussioncomment-8504449",
                  "updatedAt": "2024-02-18T02:39:41Z",
                  "publishedAt": "2024-02-18T02:39:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Questions about natural boundary condition and non-zero normal stress in INSAD",
          "author": {
            "login": "doquang"
          },
          "bodyText": "Hi,\nI am trying to extend the INSAD module to include natural boundary conditions for the mass equation and non-zero normal stress for the momentum equation. See https://github.com/doquang/slip_flow. It seems to work for the low Re case (rho=400), but doesn't converge for the rho=1000 case. I'm wondering,\n\nIs the way I'm doing it correct?\nIf correct, is there any way to improve convergence?\nFor the working cases (rho=400). I still see some normal flow through the surface 100. Is that acceptable?\n\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/26826",
          "updatedAt": "2024-02-17T23:01:32Z",
          "publishedAt": "2024-02-16T10:05:07Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "I don't know what surface 100 is, but these results look reasonable to me with an initial eye test. If you submit a pull request to MOOSE I will give it a detailed look-over.\nI am not surprised that you are having problems converging with a Reynolds number of 1000. You probably need more diffusion which is typically achieved by adding a turbulence model",
                  "url": "https://github.com/idaholab/moose/discussions/26826#discussioncomment-8492062",
                  "updatedAt": "2024-02-16T12:41:28Z",
                  "publishedAt": "2024-02-16T12:41:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "doquang"
                          },
                          "bodyText": "@lindsayad - Please see the PR ##26827",
                          "url": "https://github.com/idaholab/moose/discussions/26826#discussioncomment-8493860",
                          "updatedAt": "2024-02-16T15:09:56Z",
                          "publishedAt": "2024-02-16T15:09:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "doquang"
                          },
                          "bodyText": "@lindsayad - I have to create a new PR #26833",
                          "url": "https://github.com/idaholab/moose/discussions/26826#discussioncomment-8503814",
                          "updatedAt": "2024-02-17T23:01:33Z",
                          "publishedAt": "2024-02-17T23:01:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Anyone running moose applications through visual studio code?",
          "author": {
            "login": "adhithya96"
          },
          "bodyText": "I saw a thread where someone had mentioned about using files like launch.json, task.json but it's  not working for me.",
          "url": "https://github.com/idaholab/moose/discussions/26823",
          "updatedAt": "2024-02-17T04:59:38Z",
          "publishedAt": "2024-02-16T05:11:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@loganharbour @dschwen  do you know someone who uses this",
                  "url": "https://github.com/idaholab/moose/discussions/26823#discussioncomment-8494023",
                  "updatedAt": "2024-02-16T15:26:14Z",
                  "publishedAt": "2024-02-16T15:26:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "adhithya96"
                          },
                          "bodyText": "I'm new to moose. I wanted to understand how to use a debugger so that I can understand the workflow for developing application. I have found Ubuntu's gdb debugger for now which I'm using.",
                          "url": "https://github.com/idaholab/moose/discussions/26823#discussioncomment-8498880",
                          "updatedAt": "2024-02-17T04:59:39Z",
                          "publishedAt": "2024-02-17T04:59:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Installation Issue: MOOSE Installation Fails on Linux Ubuntu 22.04.3 as libgcc-ng >=12 does not exist",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "I am a Linux user and I am trying to install MOOSE. I have closely followed the installation instructions on the MOOSE website (https://mooseframework.inl.gov/getting_started/installation/conda.html), but I get the following error message when I execute the command \u00a0conda create -n moose moose-dev=2024.01.23 in my terminal:\nChannels:\n - https://conda.software.inl.gov/public\n - defaults\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: failed\n\nLibMambaUnsatisfiableError: Encountered problems while solving:\n  - nothing provides libgcc-ng >=12 needed by moose-wasp-2023.11.29-build_0\n\nCould not solve for environment specs\nThe following package could not be installed\n\u2514\u2500 moose-dev 2024.01.23**  is not installable because it requires\n   \u2514\u2500 moose-wasp 2023.11.29.* , which requires\n      \u2514\u2500 libgcc-ng >=12 , which does not exist (perhaps a missing channel). \n\nIt seems the issue is that libgcc-ng >=12 does not seem to exist or is not detectable? Can anyone tell me how I can resolve this issue, as I desperately need to install MOOSE asap. Thanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/26822",
          "updatedAt": "2024-02-19T14:06:33Z",
          "publishedAt": "2024-02-16T03:28:13Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "It might be that you are using an installation of Conda that does not include the conda-forge channel? Like Anaconda's main channel or something.\nYou might need to add conda-forge and then our channel:\nconda config --add channels conda-forge\nconda config --set channel_priority strict\nconda config --add channels https://conda.software.inl.gov/public\n\nchannel_priority strict will be necessary in your case I think\n\nRef: https://conda-forge.org/docs/user/tipsandtricks/#why-does-that-happen\n\n\n--add channel https://conda.software.inl.gov/public should be added again, to be at the top priority.",
                  "url": "https://github.com/idaholab/moose/discussions/26822#discussioncomment-8493350",
                  "updatedAt": "2024-02-16T14:28:01Z",
                  "publishedAt": "2024-02-16T14:28:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Thanks very much. Adding conda-forge using conda config --add channels conda-forge worked. I didn't execute the other two commands you suggested as I tried this before your reply. But this still produced a successful installation. Thanks for your response!",
                          "url": "https://github.com/idaholab/moose/discussions/26822#discussioncomment-8497888",
                          "updatedAt": "2024-02-16T23:40:10Z",
                          "publishedAt": "2024-02-16T23:40:10Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Implementation of spectral boundary intergal and possible link to BOOST c++ library",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Hi all, I would like to implement spectral boundary integral (see Appendix B in the reference article: https://onlinelibrary.wiley.com/doi/full/10.1002/nag.2865), which involves complex values, time integration, inverse laplace transform, etc, just as a startup question, does MOOSE currently have sufficient functionality to implement it? I know the BOOST c++ library has special functions that could be suitable here, but I wonder how should I include the library within MOOSE? Thanks in advance for any suggestions!",
          "url": "https://github.com/idaholab/moose/discussions/26820",
          "updatedAt": "2024-02-16T20:56:59Z",
          "publishedAt": "2024-02-15T21:39:17Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "We do not currently support using complex numbers in our MOOSE systems. @cticenhour has looked into that but I always forget what the status of it is. libMesh certainly supports configuring with complex numbers but we just haven't propagated that support into MOOSE. If you were writing custom user objects or something then you could certainly do whatever you want with <complex>.\nThe easiest way to bring in boost into MOOSE is to configure libmesh pointing at a boost installation with the configure argument --with-boost[=ARG] where you can supply an installation directory for boost if it's in a non-standard location",
                  "url": "https://github.com/idaholab/moose/discussions/26820#discussioncomment-8486896",
                  "updatedAt": "2024-02-16T00:29:34Z",
                  "publishedAt": "2024-02-16T00:29:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "It has been so long now since I was able to work on that that I am going to have to think hard on it... As you implied, getting PETSc and libMesh built wasn't a problem, but I think propagating the fact that Number is how a complex quality through all of our typedefs and templated methods was just a huge lift. My memory tells me that I started that conversion process, and I think I got hung up on the Residual and Jacobian methods and how to properly populate the matrices. I'm still interested in doing the work, but I might need to apply for some funding to have time to do it. It'll become more important to have that capability in future fusion projects I think.",
                          "url": "https://github.com/idaholab/moose/discussions/26820#discussioncomment-8494418",
                          "updatedAt": "2024-02-16T16:00:09Z",
                          "publishedAt": "2024-02-16T16:00:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "To echo something @lindsayad said that is more useful to @chunhuizhao478 for the moment - I used <complex> in many objects in the electromagnetics module to do complex calculations under the hood, and then had the object output the portion of the calculation I needed (imaginary or real) to the variable representing that portion of the calculation.",
                          "url": "https://github.com/idaholab/moose/discussions/26820#discussioncomment-8494437",
                          "updatedAt": "2024-02-16T16:01:32Z",
                          "publishedAt": "2024-02-16T16:01:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks @cticenhour and @lindsayad for your help! I wonder if @cticenhour could direct me some examples you have? Thanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/26820#discussioncomment-8496952",
                          "updatedAt": "2024-02-16T20:50:19Z",
                          "publishedAt": "2024-02-16T20:50:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "VectorEMRobinBC (source code link for current version) is one example object where we have to do this. More usage and object examples can be found through the https://mooseframework.inl.gov/modules/electromagnetics page.",
                          "url": "https://github.com/idaholab/moose/discussions/26820#discussioncomment-8497008",
                          "updatedAt": "2024-02-16T20:57:00Z",
                          "publishedAt": "2024-02-16T20:56:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}