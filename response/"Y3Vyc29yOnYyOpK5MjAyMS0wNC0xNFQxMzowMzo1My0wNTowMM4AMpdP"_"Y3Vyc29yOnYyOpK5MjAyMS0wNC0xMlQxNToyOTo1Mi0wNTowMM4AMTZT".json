{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wNC0xMlQxNToyOTo1Mi0wNTowMM4AMTZT"
    },
    "edges": [
      {
        "node": {
          "title": "Setting up tutorial repository",
          "author": {
            "login": "Draper18"
          },
          "bodyText": "Hello,\nI am trying to get a repository set up so that I can continue with the moose tutorial but I am having some problems. It made the babbler folder but there is nothing in it. Below is the error messages that I am receiving. Any help is greatly appreciated!",
          "url": "https://github.com/idaholab/moose/discussions/17532",
          "updatedAt": "2022-10-31T15:37:40Z",
          "publishedAt": "2021-04-07T17:43:23Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "The error suggests that your projects directory has been made into a git repository somehow, as the script runs the command git status to check for that. If you run ls -la ~/projects in your Terminal, do you see a .git directory listed?",
                  "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581207",
                  "updatedAt": "2022-10-31T15:37:41Z",
                  "publishedAt": "2021-04-07T18:06:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Draper18"
                          },
                          "bodyText": "Nothing that looks like a git repository. I do have the babbler folder set up as a git repository. Could that be the reason for the error?",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581226",
                          "updatedAt": "2024-06-01T22:25:32Z",
                          "publishedAt": "2021-04-07T18:11:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "No, the stork script is meant to create a directory and initialize it as a git repository before filling in the things you need to set up a basic app. If .git doesn't exist in projects , then the git status command should throw fatal: not a git repository (or any of the parent directories): .git in that directory, which then prompts the stork script to proceed. You might perform a sanity check that this is the case by running git status in ~/projects.\nNext thing to try - just to confirm something weird isn't going on in your Terminal instance, close the Terminal window you have open and start a new one. While in ~/projects I would perform the command rm -rf babbler to remove the babbler directory altogether and try running the stork script again. If this gives you the same error, we'll need to dive a little deeper to figure out what's going on.",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581274",
                          "updatedAt": "2022-10-31T15:37:45Z",
                          "publishedAt": "2021-04-07T18:25:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "One more thing that just occurred to me. This error could also occur if your home directory was initialized as a git repo (since projects exists within that directory). Run ls -la ~ in your Terminal - do you see a .git?",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581301",
                          "updatedAt": "2022-10-31T15:37:49Z",
                          "publishedAt": "2021-04-07T18:30:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Draper18"
                          },
                          "bodyText": "When I run the ls -la ~ I do see a .git",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581915",
                          "updatedAt": "2022-10-31T15:37:50Z",
                          "publishedAt": "2021-04-07T21:01:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "This is the root cause of the error. Your home directory should not be made into a git repository, so I would recommend removing the ~/.git directory:\nrm -rf ~/.git\n\nAfter removing it, you should be able to try using the stork script again.",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-581993",
                          "updatedAt": "2022-10-31T15:38:23Z",
                          "publishedAt": "2021-04-07T21:25:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "@Draper18 just checking in - were you able to get things going with that suggestion?",
                          "url": "https://github.com/idaholab/moose/discussions/17532#discussioncomment-610572",
                          "updatedAt": "2022-10-31T15:38:25Z",
                          "publishedAt": "2021-04-14T15:06:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE INSTALLATION",
          "author": {
            "login": "kwarteng10"
          },
          "bodyText": "I am trying to install MOOSE on my computer and I run into an error message when I tried downloading the  MOOSE conda packages, please find the error message below\nAn HTTP error occurred when trying to retrieve this URL.                                                                                                                                                                                     HTTP errors are often intermittent, and a simple retry will get you on your way.                                                                                                                                                             'https://conda.anaconda.org/idaholab/linux-64'",
          "url": "https://github.com/idaholab/moose/discussions/17602",
          "updatedAt": "2024-10-21T07:25:34Z",
          "publishedAt": "2021-04-14T10:21:38Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Did you try again?\nWe have no control over 'the cloud' where these files are stored. Anaconda at times can run into connectivity issues, and the error supplied is often the correct course of action (trying again... immediately).",
                  "url": "https://github.com/idaholab/moose/discussions/17602#discussioncomment-609970",
                  "updatedAt": "2024-10-21T07:25:34Z",
                  "publishedAt": "2021-04-14T13:22:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "kwarteng10"
                  },
                  "bodyText": "Yes I tried on my personal computer and its working fine\nThank you\n\u2026\nOn Wed, 14 Apr 2021 at 21:22, Jason Miller ***@***.***> wrote:\n Did you try again?\n\n We have no control over 'the cloud' where these files are stored. Anaconda\n at times can run into connectivity issues, and the error supplied is often\n the correct course of action (trying again... immediately).\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#17602 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AORERKCD3EVCM3DJSGWKS73TIWJKRANCNFSM425C3TPQ>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/17602#discussioncomment-610343",
                  "updatedAt": "2024-10-21T07:25:38Z",
                  "publishedAt": "2021-04-14T14:23:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The parameters in \"ACGrGrPoly\" kernel",
          "author": {
            "login": "wenpeng231024"
          },
          "bodyText": "Dear MOOSE Group,\nI am trying to use \"ACGrGrPoly\" kernel to describe multiple grains and bubbles. The parameters mu, gamma, and kappa are different for matrix/matrix and matrix/bubble. So my question is how to set these parameters for  \"ACGrGrPoly\" kernel in the MOOSE? I found maybe the \"GBAnisotropy\" can do this. But how to specify the order of parameters for matrix/matrix and matrix/bubble?\nThanks,\nPeng",
          "url": "https://github.com/idaholab/moose/discussions/17488",
          "updatedAt": "2022-07-18T22:43:45Z",
          "publishedAt": "2021-04-02T13:46:01Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "SudiptaBiswas"
                  },
                  "bodyText": "You could use 'ACGrGrMulti' which allows you to provide multiple gamma values and corresponding order parameters.",
                  "url": "https://github.com/idaholab/moose/discussions/17488#discussioncomment-602314",
                  "updatedAt": "2022-07-18T22:43:45Z",
                  "publishedAt": "2021-04-12T21:32:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wenpeng231024"
                          },
                          "bodyText": "Many thanks for your response. I found \"ACGrGrMulti\" is used for a multiple Grand Potential model. Does it also work for the KKS model? Because I use the KKS model.\nBest,\nPeng",
                          "url": "https://github.com/idaholab/moose/discussions/17488#discussioncomment-605493",
                          "updatedAt": "2022-07-18T22:44:44Z",
                          "publishedAt": "2021-04-13T15:30:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "MOOSE does not have the multi-phase 'KKS' model. For multi-phase, multi-order parameter cases, we use the grand potential model. However, think of ACGrGrMulti as an extension of ACGrGrPoly with multiple gamma inputs. So, if you were using ACGrGrPoly earlier, you can substitute it with ACGrGrMulti.",
                          "url": "https://github.com/idaholab/moose/discussions/17488#discussioncomment-605553",
                          "updatedAt": "2022-07-18T22:44:44Z",
                          "publishedAt": "2021-04-13T15:45:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wenpeng231024"
                          },
                          "bodyText": "Ok. I see. I will try it. Thanks very much.\nPeng",
                          "url": "https://github.com/idaholab/moose/discussions/17488#discussioncomment-606700",
                          "updatedAt": "2022-07-18T22:44:49Z",
                          "publishedAt": "2021-04-13T20:39:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A better way to do stabilization",
          "author": {
            "login": "reverendbedford"
          },
          "bodyText": "Stabilization\nA lot of different physics problems require stabilization.  The example I'm most familiar with is incompressible deformation in solid mechanics where you need to alter the finite element space to produce non-pathological results for some problems.  The classical way to do this for hexes is B_bar or F_bar (small/large deformations) methods, where you average the volumetric components of the shape function gradients over each element.  But plenty of other physics have similar problems and solutions, for example stabilization advection equations like in the Navier Stokes module through upwinding, Petrov-Galerkin, GLS, etc.\nHow we do stabilization now\nCurrently MOOSE users tend to do this in Kernel/Material land.  For example, you can implement B_bar methods by averaging the volumetric strain over the element, using that strain in the stress update, and adding a bunch of terms to the kernel Jacobian to account for the averaging.\nI would argue that's the \"old\" way to think of things (i.e. changing the material kinematics) and produces not-very-clean code.  For example, you might have more than one kernel implementing similar physics (advection-diffusion-reaction and Navier-Stokes or the new total and updated Lagrangian kernels I've proposed for tensor mechanics, for example) and the variants could be stabilized with the same scheme.  But if you're doing it in materials/kernels you would have to write it twice.  It also tends to lead towards ugly code.  For example, in B_bar the stabilization actually happens in the strain calculator but you need to know what happened, i.e. what type of stabilization, in the kernel.\nA better way to do it\nA better way to think of stabilization might be as altering the underlying finite element space, i.e. the test and trial functions themselves.  A more \"natural\" method for doing stabilization would then be some class (a subclass of variable, I guess) that alters the test and trial functions and their gradients coming from libmesh to provide the stabilization.  This type of implementation would greatly simplify things on the material/kernel side -- you would use exactly the same implementation for stabilized and unstabilized versions, you wouldn't need to \"know\" about stabilization at all -- and make it much easier to add/try out new stabilization techniques.\nUnfortunately my MOOSE skills aren't developed enough to know how to do this/how easy this is/if it's even possible.  At a minimum this class would need to:\n\nBe interchangeable with the existing Variable system (i.e. provide variable values and gradients and test/trial function values and derivatives).\nHave access to more than one variable -- for example, B_bar stabilization would need to know about all three displacement components in a solids kernel (i.e. disp_x, disp_y, disp_z).\nTake constant stabilization parameters.\n\nA more sophisticated version would do these things plus:\n\nAccess constant or lagged material properties to set appropriate values for stabilization parameters.\nFor the most modern methods use some weird FE spaces, often involving bubble functions.  This isn't my area, others may know more.  The advantage is typically they can provide \"optimal\" stabilization without any tuning parameters.\n\nAt this point I'm just looking for comments on:\n\nIf this is a good idea\nIf it's possible\nWould it require libmesh modifications (I don't think so...)",
          "url": "https://github.com/idaholab/moose/discussions/17569",
          "updatedAt": "2022-07-12T13:41:45Z",
          "publishedAt": "2021-04-11T15:40:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "This is an interesting thought, @reverendbedford .   My unthinking response is: is it possilbe do use this approach for advection stabilization, such as full upwinding or KT or RDG, eg see my explanation of KT at https://mooseframework.inl.gov/modules/porous_flow/kt_worked.html ?  I don't see exactly how your idea works.  Would evaluating your test functions involve assessing advective flows in neighbouring elements?",
                  "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-597551",
                  "updatedAt": "2022-07-12T13:40:32Z",
                  "publishedAt": "2021-04-12T00:19:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "@reverendbedford do you have any ideas on how to modify the finite element space for appropriate stabilization? I guess the modification might depend on your materials, i.e. volumetric locking, shearing locking etc.",
                  "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-597886",
                  "updatedAt": "2022-07-12T13:40:32Z",
                  "publishedAt": "2021-04-12T03:43:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I agree with @jiangwen84 here. Almost always, it seems to me, the method of stabilization is dependent on the physics.",
                          "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-600528",
                          "updatedAt": "2022-07-12T13:40:32Z",
                          "publishedAt": "2021-04-12T15:13:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "It doesn't seem overly natural to me to have this done at the Variable level although maybe I could be convinced.\nA leading obstacle to me to some generic implementation is that a classic Petrov-Galerkin implementation for, say, stabilizing CFEM Navier-Stokes equations has a form like:\ntest_star = test + tau * grad_test * velocity\nHowever, this doesn't really apply for terms that are integrated by parts, e.g. the viscous term or even the pressure term. So then one still has to be aware of the physics that they are doing. I just think it's hard to fully automate. You mentioned a stabilization for solid mechanics...that's clearly different from the stabilization I posted above with a velocity. To generalize it perhaps you could create some interface that takes a lambda that would implement the stabilization you want...but then again you are requiring somebody to do some thinking.\nFWIW we do have some general objects that are meant to help application developers with stabilization. But these are still kernels. They are ADKernelStabilized.[hC] and ADKernelSUPG.[hC], the latter of which implements a stabilization method which is virtual in ADKernelStabilized. We use these in the navier_stokes module for CFEM.",
                  "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-600519",
                  "updatedAt": "2022-07-12T13:40:34Z",
                  "publishedAt": "2021-04-12T15:11:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "reverendbedford"
                  },
                  "bodyText": "I agree that the stabilization will still ultimately depend on the physics, but I guess my argument is that multiple implementations of similar physics might want to use the same stabilization scheme.  So for example I have my updated and total Lagrangian solids kernels and both could use the same stabilization even though the weak residuals look very different.\nThat said, my initial argument was Petrov-Galerkin where you can alter the test functions and not touch anything on the material/kernel side.  But I see your point, you still need to know when/how to apply it in kernel-space.\nInterestingly the classical way to stabilize solids is to alter the trial functions, not the test functions.  This may mean it propagates through the formulation easier.  But it also may mean this would be too specialized to be worth the effort.  Either way, let me do some math, I'll post the results here.",
                  "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-602923",
                  "updatedAt": "2022-07-12T13:41:15Z",
                  "publishedAt": "2021-04-13T02:37:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I think some equations can greatly help here. I get that your approach would benefit stabilization implementations in MOOSE in general, but it may be easier if we first limit our discussion to a very specific stabilization. I guess we are mostly interested in mechanics for now, so how about just a few equations on how you want to B-bar? If we find a path forward we can then talk about advection stabilizations.",
                          "url": "https://github.com/idaholab/moose/discussions/17569#discussioncomment-606623",
                          "updatedAt": "2022-07-12T13:41:16Z",
                          "publishedAt": "2021-04-13T20:23:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Restart the simulation problem (loading Auxvariable - SECOND/MONOMIAL)",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi MOOSE users,\nI've been trying to make my simulation restartable.\n\nI have set my 'Auxvaribales' to be SECOND/MONOMIAL\nbut when I call it using\n[./stress_zz]\n    order = SECOND\n    family = MONOMIAL\n    initial_from_file_var = stress_zz\n   initial_from_file_timestep = 5\n  [../]\n\nIt gives out this error message:\nError! Trying to copy elemental solution into a variable that is not of CONSTANT MONOMIAL type. [0] ../src/mesh/exodusII_io.C, line 671, compiled Feb 16 2021 at 16:53:25 \nI need the stress_old to calculate the stress for the next time step (incremental workflow), hence I need to import the stress from an input file.\nNote that: the restart work fine with 'Variables' like disp_z\nalso, it works fine if 'Auxvaribales' is in CONSTANT/MONOMIAL, which I do not want.\nThanks guys!",
          "url": "https://github.com/idaholab/moose/discussions/17574",
          "updatedAt": "2022-06-16T00:08:28Z",
          "publishedAt": "2021-04-12T05:14:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "My guess would be that we can't store second order monomials in exodus files because it's not supported by this file format.\n@rwcarlsen can you please confirm/infirm?\nYou could try using checkpoint restart instead?",
                  "url": "https://github.com/idaholab/moose/discussions/17574#discussioncomment-598109",
                  "updatedAt": "2022-06-16T00:08:31Z",
                  "publishedAt": "2021-04-12T05:46:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rwcarlsen"
                          },
                          "bodyText": "The state of this kind of functionality has evolved gradually over the years. It should work, but you do have to set discontinuous = true in the exodus output section of the input file.  Also - there is this somewhat recent issue that might be relevant: #13200.",
                          "url": "https://github.com/idaholab/moose/discussions/17574#discussioncomment-600353",
                          "updatedAt": "2022-06-16T00:08:31Z",
                          "publishedAt": "2021-04-12T14:45:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Please let us know if discontinuous=true does not work, I ll add it to the issue\nThe restart (checkpoint) system is the better solution here, it is not limited by the limitations of exodus.",
                          "url": "https://github.com/idaholab/moose/discussions/17574#discussioncomment-600991",
                          "updatedAt": "2022-06-16T00:08:32Z",
                          "publishedAt": "2021-04-12T16:35:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi guys, thank you for your suggestion, but discontinuous = true doesn't fix the problem.\nnot sure if I can use 'Checkpoint' without having to use initial_from_file_var and initial_from_file_timestep, and just bring the whole Auxvariables from previous simulation to the new simulation",
                          "url": "https://github.com/idaholab/moose/discussions/17574#discussioncomment-602734",
                          "updatedAt": "2022-06-16T00:08:32Z",
                          "publishedAt": "2021-04-13T01:04:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rwcarlsen"
                          },
                          "bodyText": "Did you read #13200? It seems like that might be related to your problem.",
                          "url": "https://github.com/idaholab/moose/discussions/17574#discussioncomment-605343",
                          "updatedAt": "2022-06-16T00:08:39Z",
                          "publishedAt": "2021-04-13T15:04:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Purpose of \"defineLegacyParams\"",
          "author": {
            "login": "ke7kto"
          },
          "bodyText": "I am making my own simple class based on some of the classes in the framework (basically just mashing together the SplineFunction and PiecewiseTabular classes to try to get splines based on a data file), and I noticed the line\ndefineLegacyParams(<ClassName>)\nI thought I heard that the defineLegacyParams could be avoided in new code, so I tried removing it. This led to a linker error, with the compiler apparently not actually compiling validParams from the template declaration. Re-inserting the defineLegacyParams allowed my app to compile successfully. Eliminating both the template declaration and defineLegacyParams also compiles successfully.\nWhat is the purpose of defineLegacyParams and the template declaration? Are they both essential, or can they both be avoided?",
          "url": "https://github.com/idaholab/moose/discussions/17588",
          "updatedAt": "2023-05-23T02:15:32Z",
          "publishedAt": "2021-04-12T22:38:05Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "The old valid parameters used to be stored in the open namespace as a template specialization. The new valid parameters sit in a public, static member function. When you are creating new objects, there is no need to use the defineLegacyParams() macro. It is only used for backwards compatibility for folks that derive from the framework objects and do not use the new valid parameters syntax (public, static member function).\nLet's say you have an object, MyObject that derives from SomeBase. You should have in the header:\n#include \"SomeBase.h\"\n\nclass MyObject : public SomeBase\n{\npublic:\n  static InputParameters validParams();\n\n  <rest of class>\n};\n\nand in the source:\n#include \"MyObject.h\"\n\nInputParameters\nMyObject::validParams()\n{\n  auto params = SomeBase::validParams();\n  <add additional params>\n  return params;\n}\n\n<continuation of class>\n\nand that's it for the InputParameter declaration.\nCan you share the relevant portion of your object that is failing with the case where you said you \"tried removing it\"?",
                  "url": "https://github.com/idaholab/moose/discussions/17588#discussioncomment-603012",
                  "updatedAt": "2023-05-23T02:16:09Z",
                  "publishedAt": "2021-04-13T03:40:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ke7kto"
                          },
                          "bodyText": "I can do that\nheader file\nclass SplineCSVFunction;\n\n//This section requires declareLegacyParams in the .C file \ntemplate <>\nInputParameters validParams<SplineCSVFunction>();\n//End section\n\n/**\n * Function that uses spline interpolation\n */\nclass SplineCSVFunction : public Function\n{\npublic:\n  static InputParameters validParams();\n...\n\nWithout the declareLegacyParams macro called in the .C file, the following output results:\nUsing HIT from /home/me/source/moose/framework/contrib/hit\nCreating Unity /home/me/Documents/MooseProjects/per_capsule/build/unity_src/functions_Unity.C\nCompiling C++ (in opt mode) /home/me/Documents/MooseProjects/per_capsule/build/unity_src/functions_Unity.C...\nLinking Library /home/me/Documents/MooseProjects/per_capsule/lib/libper_capsule-opt.la...\nLinking Executable /home/me/Documents/MooseProjects/per_capsule/per_capsule-opt...\n/bin/ld: /home/me/Documents/MooseProjects/per_capsule/lib/libper_capsule-opt.so: undefined reference to `InputParameters \nvalidParams<SplineCSVFunction>()'\ncollect2: error: ld returned 1 exit status\nmake: *** [/home/me/source/moose/framework/app.mk:407: \n/home/me/Documents/MooseProjects/per_capsule/per_capsule-opt] Error 1\n\nthis stackoverflow thread was helpful to me in explaining that the compiler won't complain if there is no formal declaration of a function that matches the template, which leads to the less helpful/intuitive linker error.",
                          "url": "https://github.com/idaholab/moose/discussions/17588#discussioncomment-604973",
                          "updatedAt": "2023-05-23T02:16:44Z",
                          "publishedAt": "2021-04-13T13:57:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "From what you posted, all you need at the top of the header is:\n/**\n * Function that uses spline interpolation\n */\nclass SplineCSVFunction : public Function\n{\npublic:\n  static InputParameters validParams();\n...\n\n\nRemove everything above it. That is, remove both forward declaration of the class:\nclass SplineCSVFunction;\n\nand forward declaration of template:\ntemplate <>\nInputParameters validParams<SplineCSVFunction>();\n\nThey are for the \"legacy\" valid parameters syntax.",
                          "url": "https://github.com/idaholab/moose/discussions/17588#discussioncomment-605119",
                          "updatedAt": "2023-05-23T02:16:52Z",
                          "publishedAt": "2021-04-13T14:29:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "I think it's about time to remove all that legacy params stuff\n\u2026\nOn Tue, Apr 13, 2021, 8:29 AM Logan Harbour ***@***.***> wrote:\n From what you posted, all you need at the top of the header is:\n\n /**\n  * Function that uses spline interpolation\n  */\n class SplineCSVFunction : public Function\n {\n public:\n   static InputParameters validParams();\n ...\n\n\n Remove everything above it. That is, remove both forward declaration of\n the class:\n\n class SplineCSVFunction;\n\n and forward declaration of template:\n\n template <>\n InputParameters validParams<SplineCSVFunction>();\n\n They are for the \"legacy\" valid parameters syntax.\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#17588 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AABRMPVTPR5NKZNUBNJX25DTIRIMNANCNFSM422FKKUQ>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/17588#discussioncomment-605153",
                  "updatedAt": "2023-05-23T02:17:14Z",
                  "publishedAt": "2021-04-13T14:35:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Is that you offering to do it? :-) Nonetheless, I agree. But, we do have multiple applications we test that still use it...",
                          "url": "https://github.com/idaholab/moose/discussions/17588#discussioncomment-605171",
                          "updatedAt": "2023-05-23T02:17:16Z",
                          "publishedAt": "2021-04-13T14:38:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Porous_flow simulation with Segmentation fault: 11",
          "author": {
            "login": "wjin33"
          },
          "bodyText": "Hi,\nI am using Porous Flow/Falcon to run brine flow and heat transfer problems. Prepared input file with water as the fluid runs ok, yet, switched to brine as the injection/extraction files have this error:\nSegmentation fault: 11\nPlease help.\nMany thanks!\nAttached is the input file, I have to change the file type to be able to upload.\nCranfield_HT_season_caps_brine_newboundary_coarse.log\ninput.",
          "url": "https://github.com/idaholab/moose/discussions/17503",
          "updatedAt": "2022-07-04T08:38:26Z",
          "publishedAt": "2021-04-03T15:46:01Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Your input file uses an exodus mesh, so i can't be exactly sure what your problem is, but i believe your problem is in your PorousFlowUnsaturated block.  Instead of fp = brine, you need to specify\n  fluid_properties_type = PorousFlowBrine\n  nacl_name = f_nacl\n\nSee the doco at https://mooseframework.inl.gov/source/actions/PorousFlowFullySaturated.html .\nThere are other things you might like to change about your input file.  Eg, the f_nacl is mass fraction, so setting it as 0.62 means you're simulating with 62% of salt.  You'll probably also want to use PorousFlowFullySaturated, as that is more efficient and suited to your case (above doco).\nWhen you use these Actions, you do not need to supply any FluidProperties, since PorousFlow does it all for you (see the \"Materials Added\" section of the above documentation).  If you like, you can supply a custom fluid_properties_type if the ones automatically built by PorousFlow are too slow or don't suit you for some reason.\na",
                  "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-567606",
                  "updatedAt": "2022-07-04T08:38:28Z",
                  "publishedAt": "2021-04-04T11:05:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Did this work, @wjin33 ?",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-572893",
                          "updatedAt": "2022-07-04T08:38:30Z",
                          "publishedAt": "2021-04-06T03:34:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wjin33"
                          },
                          "bodyText": "No, it does not work, @WilkAndy. I tried both the fullysaturated action and the fluid-type lines. Before posting the question here, I have already tried different actions and input lines for brine. All failed.\nI combined both the exodus mesh file and the input file here. Please kindly take a look.\nArchive.zip",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-576169",
                          "updatedAt": "2022-07-04T08:38:29Z",
                          "publishedAt": "2021-04-06T17:40:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Cranfield_HT_season_caps_brine_newboundary_coarse.txt\nHi @wjin33 , i wonder whether you need to update MOOSE.  Your input file works fine for me, after i've removed the EnthalpySink stuff, which i don't have in standard porous_flow.  So there could be something wrong with the EnthalpySink.  The input file that works is found attached (it doesn't converge well, but that's probably due to the missing EnthalpySink).\na",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-576985",
                          "updatedAt": "2022-07-10T18:47:36Z",
                          "publishedAt": "2021-04-06T21:06:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Did updating MOOSE work, @wjin33 ?",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-582889",
                          "updatedAt": "2022-10-07T12:54:09Z",
                          "publishedAt": "2021-04-08T05:05:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wjin33"
                          },
                          "bodyText": "Dear Andy @WilkAndy, I have already updated the MOOSE, and it works for water with my kernel \"EnthalpSink\". Upon your suggestions, I removed the  EnthalpSink with PorousFlowPolyLineSink, and I can simulate the brine without error. Many thanks.\nI double-checked my kernel and attached them for your reference. I think there are two aspects that may contribute to the  error:\n\nI am using the SinglePhaseFluidProperties to calculate the enthalpy injection, which works fine for water97 equation of state.  Yet, for brine, this is not properly implemented.\nI did not calculate the Jacobian for this kernel.\n\nAny comments are appreciated.\nThanks,\nWencheng\nEnthalpySink.zip",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-601050",
                          "updatedAt": "2022-10-07T12:54:10Z",
                          "publishedAt": "2021-04-12T16:47:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Is EnthalpySink trying to accomplish the same thing as @andrsd #17235 ?   If so, just take something like https://www.ratebeer.com/Ratings/Beer/Beer-Ratings.asp?BeerID=84035 and sit with him until it's done.",
                          "url": "https://github.com/idaholab/moose/discussions/17503#discussioncomment-602641",
                          "updatedAt": "2022-10-07T12:54:10Z",
                          "publishedAt": "2021-04-12T23:56:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Setting up Atom - trouble with rtags",
          "author": {
            "login": "swonner"
          },
          "bodyText": "I am a new user, and am working my way through tutorial 1. I have a windows system (WSL1), and am using Ubuntu. I am currently following the steps to set up Setup Atom Editor for MOOSE. However, I seem to be having some trouble setting up the source navigation with rtags. I keep getting the error:  \"Could NOT find llvm-config executable and LIBCLANG_CXXFLAGS is not set\". How should I fix this problem?\nUpdate:  I was able to resolve this issue by installing llvm with \"sudo apt-get install llvm\". However, now I am getting the error: \" Failed to compile small clang test app. It's likely that the include file <clang-c/Index.h> could not be found! Maybe you need to install the clang development package (delete the CMakeCache.txt file before trying to run cmake again after installation)?.\"\nI have tried the following: \"sudo apt-get install llvm-dev\", \" sudo apt install clang\", \"sudo apt-get install clang\", \"sudo apt-get install libclang-dev\", but the error persists. Any advice on how to proceed?",
          "url": "https://github.com/idaholab/moose/discussions/17585",
          "updatedAt": "2022-06-23T15:14:49Z",
          "publishedAt": "2021-04-12T19:04:35Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "@dschwen",
                  "url": "https://github.com/idaholab/moose/discussions/17585#discussioncomment-602626",
                  "updatedAt": "2022-06-23T15:14:56Z",
                  "publishedAt": "2021-04-12T23:47:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ray tracing compilation error (constexpr mixedPackSize())",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hey everyone,\nAny hints on how to fix this:\nray_tracing/build/header_symlinks/RayTracingPackingUtils.h:211:1: note: \u2018constexpr std::size_t RayTracingPackingUtils::mixedPackSize() [with BufferType = double; InputTypes = {short unsigned int, bool, unsigned int, unsigned int, unsigned int}; std::size_t = long unsigned int]\u2019 is not usable as a constexpr function because:\n mixedPackSize()\n ^\n/datasets/work/en-cmrp/work/apps/projects/projects_wil04q/moose/framework/build.mk:122: recipe for target '/datasets/work/en-cmrp/work/apps/projects/projects_wil04q/moose/modules/ray_tracing/build/unity_src/raytracing_Unity.x86_64-pc-linux-gnu.dbg.lo' failed\nmake: *** [/datasets/work/en-cmrp/work/apps/projects/projects_wil04q/moose/modules/ray_tracing/build/unity_src/raytracing_Unity.x86_64-pc-linux-gnu.dbg.lo] Error 1\n\na",
          "url": "https://github.com/idaholab/moose/discussions/17576",
          "updatedAt": "2021-04-12T21:31:14Z",
          "publishedAt": "2021-04-12T08:45:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "This is a duplicate of #17568. Continuing conversation over there.\nResolution:\n#17568 (comment)",
                  "url": "https://github.com/idaholab/moose/discussions/17576#discussioncomment-600266",
                  "updatedAt": "2021-04-12T16:58:45Z",
                  "publishedAt": "2021-04-12T14:30:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "@WilkAndy I'm glad to help with getting your compile going:\n\nIf you're using conda libMesh, you'll need to temporarily cherry-pick the first commit in #17582, which is 6c53994\nIf you're not using conda libMesh, you'll need to recompile libMesh by introducing the change to scripts/update_and_rebuild_libmesh.sh in 40bdca0\n\nWe're in the middle of system maintenance so either one of those PRs won't be merged in the near future.",
                          "url": "https://github.com/idaholab/moose/discussions/17576#discussioncomment-601100",
                          "updatedAt": "2021-04-12T17:01:26Z",
                          "publishedAt": "2021-04-12T17:01:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks @loganharbour .   Probably this works.  Unfortunately my HPC's compiler is not C++14 .    Sigh.... i bet this is going to be a saga.",
                          "url": "https://github.com/idaholab/moose/discussions/17576#discussioncomment-602308",
                          "updatedAt": "2021-04-12T21:31:01Z",
                          "publishedAt": "2021-04-12T21:31:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "chemical potential in coupled phase field/mechanics problems",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "In a coupled phase field/mechanics problem, should the chemical potential be defined as the derivative of the total system energy or just the chemical energy (as its name implies)? My understanding is that it's the total because for example in the CH equation you have df_chem/dc and dE_d/dc and so you supply the total energy to the SplitCHParsed kernel.\nBut for KKS problems, in the examples that I've seen, the CH kernels take just the chemical energies rather than the total. Is that because the free energy is differentiated with respect to the phase concentrations (rather than total), so other terms drop out? And as for the AC equation, it seems to matter if doing KHS or VTS interpolation? See here and here.\nCan someone help me understand how to properly use the chemical potential?",
          "url": "https://github.com/idaholab/moose/discussions/17022",
          "updatedAt": "2022-09-29T16:21:13Z",
          "publishedAt": "2021-02-16T20:34:19Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "You are correct, as far as that the derivative of the total system energy determines the chemical potential. For a KKS simulation you would have an elastic energy E which might depend on the global concentration variables. You need to apply the chain rule to compute the derivative of the elastic energy w.r.t the phase concentrations. In pure phase regions those derivatives would vanish for the inactive phases (as their phase concentration do not contribute to the global concentration because their switching function is zero). Within interfaces you'd have contributions from all phases. BUT, if I'm not mistaken, due to the linearity of the dependence of the global concentration on the phase concentrations you can basically take the derivative of the mechanical energy w.r.t the global concentration and multiply it with each phase's switching function to get the mechanical chemical potential contribution for that phase.",
                  "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-381747",
                  "updatedAt": "2022-07-18T07:12:01Z",
                  "publishedAt": "2021-02-18T17:30:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Interesting @dschwen. What's the best way to go about this in MOOSE? I have a working example using the WBM formulation. Will the parsed materials system do the chain rule if I swap out my kernels for KKS kernels? Or do I need to make phase-specific elastic+chemical energies? That would make it more like a VTS interpolation rather than KHS, right?\nAlso I noticed that in @laagesen 's paper (https://doi.org/10.1016/j.commatsci.2017.08.005), equation 11 states the chemical potentials are taken using just the chemical energy? I didn't see any mention of mechanical energy in the original KKS paper.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-382171",
                          "updatedAt": "2022-07-18T07:12:01Z",
                          "publishedAt": "2021-02-18T19:42:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xueyang94"
                          },
                          "bodyText": "The stiffness tensor and elastic strain can be interpolated to created global tensor and strain. The stress is then determined as a global stress. The elastic free energy is calculated using the KHS model. The chemical potential includes both the chemical energy and the elastic energy. This is published in a recent paper by Dr. Simon that might of help: [https://www.sciencedirect.com/science/article/pii/S0927025620302810]",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-386978",
                          "updatedAt": "2022-07-18T07:12:02Z",
                          "publishedAt": "2021-02-19T21:17:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "thanks @xueyang94 . That paper uses the Grand Potential formulation but I'm asking about KKS. Are they similar enough to apply the same logic? Right now I'm just trying to understand how to implement my system in MOOSE using WBM and KKS, both with KHS and VTS mechanical interpolation - so 4 different combinations. I was hoping to keep my comparison small but I will consider Grand Potential if it isn't much more work.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-387065",
                          "updatedAt": "2022-07-18T07:12:02Z",
                          "publishedAt": "2021-02-19T21:48:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xueyang94"
                          },
                          "bodyText": "For the KKS and Grand Potential model (GPM), one can be used to derive another. They also use the same interfacial concentration partition condition, which is assuming the same chemical potential across the interface. So I would say they are similar enough that the same logic of handling the elastic energies can apply, just that GPM doesn't need to solve for phase concentration variables. The downside of GPM is that inverting the chemical and elastic energies from concentration-dependent to chemical potential-dependent can be a pain sometimes, so the energy form used in GPM is restricted. In terms of the WBM, since the interfacial concentration is defined in a different way, I am unsure if the same logic can be applied. Either way, interesting topic and good luck.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-387560",
                          "updatedAt": "2022-07-24T19:23:47Z",
                          "publishedAt": "2021-02-20T03:28:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "I'm not sure such a consideration has been published before... I'm available as a co-author ;-)",
                  "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-381754",
                  "updatedAt": "2022-07-18T12:23:48Z",
                  "publishedAt": "2021-02-18T17:32:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Hi @jessecarterMOOSE - in the work we have done up until now such as the paper that you mentioned, we have only rigorously considered order parameter dependent eigenstrains. So, in that case when you take the derivative of the elastic energy term w.r.t. concentration you get zero- meaning only the chemical energy contributes to chemical potential for both VTS and KHS schemes. The elastic strain energy term affects the evolution equation for the order parameter though.\nIf you wanted to consider a concentration-dependent eigenstrain, it's not totally clear to me off-hand whether you would include the elastic energy contribution when setting up the chemical potential constraint. It would really only be feasible for the VTS scheme, because in the VTS scheme there is a per-phase elastic energy defined. Whereas in the KHS scheme there is a global elastic energy defined and it isn't really separated out on a per-phase basis. Since more authors in the literature have used the KHS scheme, I would guess most have not included an elastic energy contribution to the chemical potential constraint equation.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-395937",
                          "updatedAt": "2022-07-18T12:23:48Z",
                          "publishedAt": "2021-02-23T00:56:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Thanks for your perspective @laagesen. I do indeed have a concentration-dependent eigenstrain so you understand the problem I'm trying to navigate.\nLooking at the KKS KHS example example, I see how the global elastic energy term gets added to the AC equation. I suppose I could do something similar for the CH equation. In addition, I could also define some DerivativeSumMaterials that combine my chemical and elastic energies for each phase, and use those as the free energies in the chemical potential constraint. The only problem is that I'm not sure what the \"right\" solution looks like.\nI see in the KKS VTS example that you combined the chemical and elastic energies in each phase, but is that out of necessity or no? It seems you could still have only passed the chemical free energy of each phase to the chemical potential constraint kernel.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-451556",
                          "updatedAt": "2022-07-18T12:23:54Z",
                          "publishedAt": "2021-03-08T20:19:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Right, for the VTS example I could have passed the chemical energy directly to the constraint kernel.\nFor your case of a concentration-dependent eigenstrain, most work I've seen uses the KHS scheme and only considers the chemical part of the free energy in the constraint. So I think you would be safe to do that, but I'm not sure it's fundamentally the right answer. What about trying it both ways and comparing the result for some simple test cases? You could even do something similar to our 2017 paper and the test cases we did there. It would be interesting to see which approach affected the interfacial energy the most; that is probably the right way to assess which approach works best, figure out which results in an interfacial energy that is closest to the values you set as input parameters. This could be the basis of a pretty interesting follow-on paper to the 2017 paper, actually...",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-456252",
                          "updatedAt": "2022-07-18T12:23:54Z",
                          "publishedAt": "2021-03-09T17:22:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "simopier"
                          },
                          "bodyText": "@jessecarterMOOSE, I come late to the party, but I met the same challenge during my Ph.D. work (with which you are very familiar). I ended up including the elastic contribution in the \"total\" potential constraint equation of the KKS model. I remember doing a few test simulations to select the best approach but never considered publishing the results. If this problem is still relevant to you, I would be happy to chat with you about it and maybe get something worth publishing.",
                          "url": "https://github.com/idaholab/moose/discussions/17022#discussioncomment-602038",
                          "updatedAt": "2022-07-24T19:25:30Z",
                          "publishedAt": "2021-04-12T20:29:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}