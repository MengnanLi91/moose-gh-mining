{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNS0wMlQwOTo1MzoxOC0wNTowMM4ATpl0"
    },
    "edges": [
      {
        "node": {
          "title": "Grain growth model with inclination dependence",
          "author": {
            "login": "oarcelus"
          },
          "bodyText": "Hi I am new to MOOSE and I would like to use it for developin a multi-phase field model for grain growth with inclination dependence. I would like to basically reproduce the results shown in this paper (https://doi.org/10.1016/j.actamat.2020.02.043). I have read the documentation quite extensively and followed some tutorials and examples, but I find that many of the parts regarding multi-phase field models are still not totally documented and I find myself lost in trying to implement the model.\nCould I get some basic guidance into trying to implement this? I am particularly interested in including the grain-boundary energy terms shown into the linked paper (Seciton 2.2), into the Free-Energy expression.",
          "url": "https://github.com/idaholab/moose/discussions/24134",
          "updatedAt": "2023-06-24T22:34:02Z",
          "publishedAt": "2023-04-20T08:27:26Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@dschwen @permcody any thoughts?",
                  "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5676267",
                  "updatedAt": "2023-04-20T17:01:10Z",
                  "publishedAt": "2023-04-20T17:01:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@jiangwen84 @laagesen",
                          "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5759680",
                          "updatedAt": "2023-04-29T02:58:51Z",
                          "publishedAt": "2023-04-29T02:58:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hi @oarcelus, thanks for your interest in the MOOSE framework! As you noted, we do not have much implemented in the phase-field module for multi-phase field models such as the one you linked to. I wonder if you have considered a multi-order parameter approach instead? We do have a lot more implemented in MOOSE using a multi-order parameter strategy, primarily using this model:\nhttps://journals.aps.org/prb/abstract/10.1103/PhysRevB.78.024113\nThis model can include misorientation and inclination dependence. So, I think that either a multi-phase field or multi-order parameter approach could simulate the physics you are interested in; there would just be a lot more already implemented if you chose the multi-order parameter approach. There might still be some code that would need to be implemented depending on what inclination-dependent features you want to add, there would just be a lot more you could build on.",
                  "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5783738",
                  "updatedAt": "2023-05-02T17:45:47Z",
                  "publishedAt": "2023-05-02T17:45:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "oarcelus"
                  },
                  "bodyText": "Hi @laagesen, thank you for your comment. In fact, I read the paper you just linked, as well as the last one by N. Moelans (https://www.sciencedirect.com/science/article/pii/S0264127522002131?via%3Dihub) for which I found some MOOSE implementation (https://github.com/PengWei97/yinglong), which apparently also solves for some known issue regarding the use of GrainTracker and GBAnisotropy? (not sure of this latter one).\nIn any case, I am still a bit confused about all this digging (jumping fresh into this giant software can be confusing...). So I will post a few more questions here:\n\n\nI fail to understand the difference between 'multi-phase' and 'multi-order parameter'. In which way the paper I originally linked is considered 'multi-phase' and the ones by N.Moelans are not? They both state some sort of free energy and they solve for the time evolution of non-conserved parameters through a first derivative of time and a functional derivative of the free-energy with respect to the order parameters. The only difference I see is that in the paper I linked there are some extra-higher order terms, which will probably be a nightmare to treat in code, but other than that nothing more.\n\n\nThe 'GrainTracker' functionallity is 'in principle' only used to improve the computational performance of the models right? You could in principle make a grain growth model considering explicitly all of the order parameters, then a single Kernel would take care of all the interactions, since they are the same. What the GrainTracker does is to make it so that no two order parameters are contiguous (so that tails do not overlap), and you can reduce their number.  If so, is there any functionallity to merge grains as there is in GrainTracker, but without actually using GrainTracker?\n\n\nIn the link I originally sent there is some pretty straightforward formulas linking the grain-boundary energy to the grain inclination, making it a continuous function. Is there a way of implementing this in a simple way? I guess that I also have an understanding gap between the terms 'misorientation' and 'inclination'.\n\n\nSorry for the long post, but these conversations are really useful to me, and thanks again for the response!",
                  "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5784265",
                  "updatedAt": "2023-05-02T20:00:37Z",
                  "publishedAt": "2023-05-02T18:40:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Let me try to answer questions by number:\n\nMulti-phase field models usually refers to models where the phase field represents the phase fraction and the phase-fields are required to sum to 1 at every position. Multi-order parameter models do not enforce such a restriction. Some people feel that in the multi-phase field models, the direct correspondence between the phase field variables and phase fraction makes the model more physical, but I think that if you are interested in simulating grain growth, it is more important that the Allen-Cahn evolution equations approach the evolution equations for grain growth in the sharp interface limit (for grain growth, this is that grain boundary velocity is proportional to local curvature). This has been done in the Moelans paper I referred to, I am sure it has also been done for multi-phase field models but I don't know a good reference for that off-hand. Several years ago there was a paper comparing multi-phase field and multi-order parameter approaches for simulating grain growth, I believe Steinbach and Moelans were among the co-authors, so if you do a search of Web of Science you can probably track that down (sorry I don't have the reference handy off hand here either).\nYou are right on the purpose of the GrainTracker. The only thing I would say is I am not sure what you mean by \"a single Kernel would take care of all the interactions\" - a Kernel in MOOSE parlance represents a single term in an equation. So if you had Allen-Cahn equations for every order parameter, you would need additional kernels to represent each term in each Allen-Cahn equation. This may be confusing because adding Kernels is hidden in the grain growth example input files because we use Actions, namely the PolycrystalKernelAction, which automates adding kernels to the input files.\nMisorientation vs. inclination has to do with the 5 degrees of freedom of a grain boundary, which you may want to refer to a materials science textbook on. I believe misorientation refers to the 3 possible ways (angles) of orienting the crystals relative to each other, while inclination refers to the plane that cuts the two crystals which I think are two. If you can post an example of exactly what type of function you are wanting to implement, I can try to give some more specifics on how it could be implemented or if we have something similar already implemented.",
                          "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5808797",
                          "updatedAt": "2023-05-04T18:55:10Z",
                          "publishedAt": "2023-05-04T18:55:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ykvishal"
                          },
                          "bodyText": "Just to want to give the reference mentioned in point 1\nMoelans, Nele, Frank Wendler, and Britta Nestler. \"Comparative study of two phase-field models for grain growth.\" Computational Materials Science 46.2 (2009): 479-490. https://www.sciencedirect.com/science/article/abs/pii/S092702560900158X",
                          "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5809970",
                          "updatedAt": "2023-05-04T21:25:11Z",
                          "publishedAt": "2023-05-04T21:25:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5809975",
                          "updatedAt": "2023-05-04T21:26:10Z",
                          "publishedAt": "2023-05-04T21:26:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "especially since I was incorrect on the co-authors! :-)",
                          "url": "https://github.com/idaholab/moose/discussions/24134#discussioncomment-5810009",
                          "updatedAt": "2023-05-04T21:32:07Z",
                          "publishedAt": "2023-05-04T21:32:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Thermal contact analytical benchmark",
          "author": {
            "login": "KamalnathOSU"
          },
          "bodyText": "Dear all,\nSomewhere in the MOOSE documentation or an MOOSE-based app documentation, I remember seeing a benchmark for thermal contact problem. The example was modelling two bars (made of aluminum and steel) in contact and heat was flowing in from one end. At the contact between aluminum and steel, there is a discontinuity in temperature. Assuming that the bars were infinite analytical solution was derived and compared with MOOSE solution. They both agreed very well.\nEven after hours of searching it, I am not able to find it. Can anybody help ?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/24273",
          "updatedAt": "2023-05-04T18:49:17Z",
          "publishedAt": "2023-05-04T15:47:45Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "We have this detailed verification problem and accompanying analytical solution in MALAMUTE that @cticenhour prepared: https://mooseframework.inl.gov/malamute/verification/thermal_contact_verification.html If that is the benchmark problem to which you were referring, would you move any follow-on discussion to the MALAMUTE-specific discussion please?\nWe also have the analytical solution for heat transfer as a function of pressure on this documentation page in MOOSE: https://mooseframework.inl.gov/source/userobjects/GapFluxModelPressureDependentConduction.html and the regression test is linked on that page.\nHope this helps,\nStephanie",
                  "url": "https://github.com/idaholab/moose/discussions/24273#discussioncomment-5807332",
                  "updatedAt": "2023-05-04T16:01:43Z",
                  "publishedAt": "2023-05-04T16:01:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "Thank you Stephanie @sapitts . That's the one I wanted.",
                          "url": "https://github.com/idaholab/moose/discussions/24273#discussioncomment-5808753",
                          "updatedAt": "2023-05-04T18:49:18Z",
                          "publishedAt": "2023-05-04T18:49:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "can't call computeOffDiagJacobian in a Kernel?",
          "author": {
            "login": "bylore"
          },
          "bodyText": "My kernel inherits Kernel and I override thest three functions\n  virtual Real computeQpResidual() override;\n  virtual Real computeQpJacobian() override;\n  virtual Real computeQpOffDiagJacobian(unsigned int jvar) override;\n\ncomputeQpResidual() and computeQpJacobian() work well, but computeQpOffDiagJacobian() doesn't seem to be getting called.\nCould you guys give me any help?",
          "url": "https://github.com/idaholab/moose/discussions/24268",
          "updatedAt": "2023-05-04T15:49:30Z",
          "publishedAt": "2023-05-04T14:44:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "bylore"
                  },
                  "bodyText": "`class TermiteStressCoupleElectricFieldOffDiag : public Kernel\n{\npublic:\nstatic InputParameters validParams();\nTermiteStressCoupleElectricFieldOffDiag(const InputParameters & parameters);\nprotected:\nvirtual Real computeQpResidual() override;\nvirtual Real computeQpJacobian() override;\nvirtual Real computeQpOffDiagJacobian(unsigned int jvar) override;\n/// Base name of the material system that this kernel applies to\nconst std::string _base_name;\n/// An integer corresponding to the direction this kernel acts in\nconst unsigned int _component;\nconst unsigned int _ep_var; //index of the coupled variable electric potential\nconst MaterialProperty & _d_stress_d_efield;\n};`\n`Real\nTermiteStressCoupleElectricFieldOffDiag::computeQpResidual()\n{\n//std::cout << \"222\" << std::endl;\nreturn 0.0;\n}\nReal\nTermiteStressCoupleElectricFieldOffDiag::computeQpJacobian()\n{\n//std::cout << \"333\" << std::endl;\nreturn 0.0;\n}\nReal\nTermiteStressCoupleElectricFieldOffDiag::computeQpOffDiagJacobian(unsigned int jvar)\n{\nstd::cout << \"444\" << std::endl;\nif (jvar == _ep_var)\n{\nReal val = 0.0;\nfor (unsigned int j=0; j<Moose::dim; ++j)\nfor(unsigned int k=0; k<Moose::dim; ++k)\n{\n//std::cout << _d_stress_d_efield[_qp](_component, j, k) << std::endl;\nval -= _d_stress_d_efield[_qp](_component, j, k) * _grad_test[_j]_qp * _grad_test[_i]_qp;\n}\nreturn val;\n}\n// Returns if coupled variable is not electric potential\nreturn 0.0;\n}`",
                  "url": "https://github.com/idaholab/moose/discussions/24268#discussioncomment-5806572",
                  "updatedAt": "2023-05-04T14:46:40Z",
                  "publishedAt": "2023-05-04T14:46:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "\"444\" can not be printed in my test simulation.",
                          "url": "https://github.com/idaholab/moose/discussions/24268#discussioncomment-5806590",
                          "updatedAt": "2023-05-04T14:47:48Z",
                          "publishedAt": "2023-05-04T14:47:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What kind of preconditioning are you using?\nhow many non linear variables do you have?",
                          "url": "https://github.com/idaholab/moose/discussions/24268#discussioncomment-5806637",
                          "updatedAt": "2023-05-04T14:52:31Z",
                          "publishedAt": "2023-05-04T14:52:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "By default MOOSE only assembles the variable-wise block diagonal Jacobian, thus this function is not called. If you switch Executioner/solve_type to NEWTON, or add a preconditioner block with SMP and turn the full coupling on, you will see this function being called.",
                          "url": "https://github.com/idaholab/moose/discussions/24268#discussioncomment-5806696",
                          "updatedAt": "2023-05-04T14:57:39Z",
                          "publishedAt": "2023-05-04T14:57:38Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "@GiudGiud, hi, my confusion has been pointed out by @YaqiWang. Thank you guys for the reply and answer!",
                          "url": "https://github.com/idaholab/moose/discussions/24268#discussioncomment-5807285",
                          "updatedAt": "2023-05-04T15:49:30Z",
                          "publishedAt": "2023-05-04T15:49:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can we update multiple auxvariables at once from a single pluggable system ?",
          "author": {
            "login": "KamalnathOSU"
          },
          "bodyText": "Dear MOOSE team,\nIn my simulation, based on the thermo-mechanical history of each node, I am calculating a few properties like grain_size and yield strength on each node. I have an external C library which can calculate these properties ( Discussion: #24129 ). The API of the external C library allows to me calculate several properties at once (let's say five properties).  I want to store all these properties in individual auxvariables. As the API calls are expensive, I dont want to call the API functions in five times in five different auxkernels for each timestep. Is there any alternative ?",
          "url": "https://github.com/idaholab/moose/discussions/24258",
          "updatedAt": "2023-05-03T20:55:52Z",
          "publishedAt": "2023-05-03T19:41:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAuxKernels are meant to set the value of only one variable, so that would be one API call by variable\nWould you want to use an array variable to store everything as components of variables?\nThe alternatives are:\n\nfollow the same design as the SolutionUO, with one UO doing the reading and kernels being able to leverage what the UO has read without re-reading\nmake a user object that sets the 5 variables in one go\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796098",
                  "updatedAt": "2023-05-03T19:43:59Z",
                  "publishedAt": "2023-05-03T19:43:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "Thank you very much for your prompt response !! I really appreciate it.\n\"Would you want to use an array variable to store everything as components of variables?\"\nCan the array variable hold 5 components ? If so, can define and update array variables ?",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796115",
                          "updatedAt": "2023-05-03T19:46:56Z",
                          "publishedAt": "2023-05-03T19:46:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "An array variable/aux variable can hold as many components controlled by an input parameter components. computeValue virtual function in ArrayAuxKernel returns RealEigenVector in size of number of components. It is used to update all components simultaneously. One caveat of using array variables is detailed here: #22921 although you can always use ArrayVariableComponent to put one component of an array variable into a normal variable.",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796287",
                          "updatedAt": "2023-05-03T20:05:20Z",
                          "publishedAt": "2023-05-03T20:05:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@dschwen do you want to talk about writableCoupledValues? In theory aux kernels can write multiple aux variables but we may remove that capability. User objects can definitely write to multiple aux variables",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796303",
                          "updatedAt": "2023-05-03T20:07:16Z",
                          "publishedAt": "2023-05-03T20:07:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "It is possibly better to have an accessor in the user object and let the aux kernel make use of that accessor.",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796317",
                          "updatedAt": "2023-05-03T20:09:36Z",
                          "publishedAt": "2023-05-03T20:09:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "@YaqiWang I have never user Array variable before. Is there any example of its usage in heat_conduction (or) phase_field module which I can take a look ?\n@lindsayad @GiudGiud  As writable \"writableCoupledValues\" might be removed in future, I think I would with this option \"make a user object that sets the 5 variables in one go\". Can you point me towards some userobjects in MOOSE that assigns multiple AuxVariables ?",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796410",
                          "updatedAt": "2023-05-03T20:22:44Z",
                          "publishedAt": "2023-05-03T20:22:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "I am not aware of examples of using array aux kernels in modules. But this FunctionArrayAux in MOOSE framework should give you an idea on how it works. You can search through inputs to find how FunctionArrayAux is used.",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796514",
                          "updatedAt": "2023-05-03T20:36:18Z",
                          "publishedAt": "2023-05-03T20:36:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Oops I goofed on the name. There is getWritableCoupledVariables, writableVariable, and writableCoupledValue",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796600",
                          "updatedAt": "2023-05-03T20:45:39Z",
                          "publishedAt": "2023-05-03T20:45:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Here's an example of a .C file and accompanying input file if you wanted to update nodal variables (e.g. Lagrange). You can add arbitrarily many coupled variables in your input parameters block",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796648",
                          "updatedAt": "2023-05-03T20:51:31Z",
                          "publishedAt": "2023-05-03T20:51:31Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "@lindsayad Thank you. In the documentation, I saw that [writableCoupledValue] is(https://mooseframework.inl.gov/docs/doxygen/moose/classCoupleable.html#aae21e308b8620ce460b24a03cdb7e186) is deprecated. So I should go with writableVariable ?",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796657",
                          "updatedAt": "2023-05-03T20:53:02Z",
                          "publishedAt": "2023-05-03T20:53:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "@lindsayad : Thank you again. I didn't see your last response on the example file *.C earlier.",
                          "url": "https://github.com/idaholab/moose/discussions/24258#discussioncomment-5796678",
                          "updatedAt": "2023-05-03T20:55:28Z",
                          "publishedAt": "2023-05-03T20:55:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "No output file after running the code \"make -j8 ./ex01-opt -i ex01.i\" in example 1 in moose example 1",
          "author": {
            "login": "ykzhu2019"
          },
          "bodyText": "Hi,\nIn the Example 1: As Simple As It Gets,\nI ran the code \"cd ~/projects/moose/examples/ex01_inputfile\nmake -j8\n./ex01-opt -i ex01.i\"\nAn error message pops out:\nprojects/moose/libmesh/installed/libtool: No such file or directory\nmake: *** [/Users/ykzhu/projects/moose/framework/build/unity_src/linesearches_Unity..opt.lo] Error 127\ndyld[4056]: Library not loaded: '@rpath/libvtkIOCore-9.1.1.dylib'\nI think because the running is not successful, there is no output file.\nI saw the same problem when running all other examples.\nDo you have clue how to solve the issue?\nThanks.\nZack",
          "url": "https://github.com/idaholab/moose/discussions/24250",
          "updatedAt": "2023-05-03T15:49:54Z",
          "publishedAt": "2023-05-03T08:11:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "Do you have your venv active?",
                  "url": "https://github.com/idaholab/moose/discussions/24250#discussioncomment-5788666",
                  "updatedAt": "2023-05-03T08:18:23Z",
                  "publishedAt": "2023-05-03T08:18:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ykzhu2019"
                          },
                          "bodyText": "I actually just figured it out.  My shell was not configured properly. Running \"conda init zsh\" and \"conda activate moose\" solved the issue.  Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/24250#discussioncomment-5788932",
                          "updatedAt": "2023-05-03T08:51:26Z",
                          "publishedAt": "2023-05-03T08:51:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "No problem.",
                          "url": "https://github.com/idaholab/moose/discussions/24250#discussioncomment-5788959",
                          "updatedAt": "2023-05-03T08:53:39Z",
                          "publishedAt": "2023-05-03T08:53:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "a Kernel for del(V) * del(a function of T)",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Dear Moose experts,\nHello.\nI want to solve the below heat conduction equation. In order to solve the equation, I have to custom(make) a kernel for myself or use a kernel that has been already made and used.\n\nSo, there are two variables V(voltage), and T(temperature).\nMaybe, I can use the HeatConductionTimeDerivative, HeatConduction, JouleHeatingSource, and MatDiffusion kernels to solve the equation.\nThe problem is the -sigma*del(V)*del(pi) term.\nIs there any kernel that the Moose provides? Should I make a new one for myself?\nIn addition, if I have wrong thinking or derivative formula, please feel free to tell me.\nFor your information, another equation is -sigma*del^2(V)=0; a current continuity equation that has no time derivative.",
          "url": "https://github.com/idaholab/moose/discussions/24245",
          "updatedAt": "2023-05-03T03:23:27Z",
          "publishedAt": "2023-05-02T13:22:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis last term does not look familiar so I m going to venture that we do not have a premade version.\nMaking kernels should not be difficult if you followed the tutorial.\nThere's also plenty of examples.\nAn option btw, is to use an integration by parts on that term that will avoid requiring to take the derivative of that term.\nInstead you would have J Pi grad_test for the residual\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24245#discussioncomment-5782795",
                  "updatedAt": "2023-05-02T16:02:54Z",
                  "publishedAt": "2023-05-02T16:02:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Thank you so much!",
                          "url": "https://github.com/idaholab/moose/discussions/24245#discussioncomment-5787009",
                          "updatedAt": "2023-05-03T03:23:28Z",
                          "publishedAt": "2023-05-03T03:23:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "dt suddenly reduces to 1e-13 and program stops working. How can I fix this issue?",
          "author": {
            "login": "K-Komal-98"
          },
          "bodyText": "I am working on a dendrite growth problem in solid state electrolyte.\nThere are two input files:\nwithout mechanics.\nThis works well even beyond 17000 time steps\nwith mechanics.\nThe input file is exactly same as the above one with just the tensor mechanics included in it. I have consistently used the normalization parameters. This works well upto 169 time steps and suddenly dt reduces to 1e-13.\nI have followed the instructions given in this link but couldn't solve the issue: https://mooseframework.inl.gov/application_usage/failed_solves.html\nI am attaching the input files for both the parts and marked the added part in between --------------\nInput file WITHOUT MECHANICS:\ninput_without_mechanics.txt\nInput file WITH MECHANICS:\ninput_with_mechanics.txt\nThis is my thesis work. Can you please guide me what can I do to solve this issue?",
          "url": "https://github.com/idaholab/moose/discussions/24232",
          "updatedAt": "2023-06-24T19:50:19Z",
          "publishedAt": "2023-04-30T19:34:41Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you reduce the problem down to <5k dofs and use these preconditioning options:\n  petsc_options = '-pc_svd_monitor'\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'svd'\n\nthis will tell us more about the conditioning of the matrix\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5767914",
                  "updatedAt": "2023-04-30T20:52:54Z",
                  "publishedAt": "2023-04-30T20:52:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Hi Guillaume,\nThanks for the suggestions.\nI gave 2 runs on hpc with 40 cores:\n\nReduced the dofs to 13000 by reducing the number of points. The program worked for 65 time steps and then reduces the time step until 1e-13.\nReduced the dofs to 13000 and used the preconditioning as per your instructions. It has been more than 40 mins. It seems like linear solve is taking too long to solve. Here is the attached file.\ntest.txt\n\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768458",
                          "updatedAt": "2023-05-01T00:06:14Z",
                          "publishedAt": "2023-05-01T00:06:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "13k is still too many.\n5k is almost a hard maximum, we usually advise 1k dofs for SVD",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768489",
                          "updatedAt": "2023-05-01T00:25:00Z",
                          "publishedAt": "2023-05-01T00:24:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Now, the dofs are less than 5000. It stopped running after 3 iterations. Here is the attached file.\ntest.txt",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768744",
                          "updatedAt": "2023-05-01T01:44:09Z",
                          "publishedAt": "2023-05-01T01:44:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok no insights for this log unfortunately.\nCan you please attach the log for the original large failing case as well?",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768769",
                          "updatedAt": "2023-05-01T01:52:39Z",
                          "publishedAt": "2023-05-01T01:52:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "Here is the log test.txt\nThanks!",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768881",
                  "updatedAt": "2023-05-01T02:36:08Z",
                  "publishedAt": "2023-05-01T02:36:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The convergence history seems quite rough. But it makes progress.\nWhen it goes bad, you get   Linear solve did not converge due to DIVERGED_NANORINF iterations 0\nthis makes me think one of the models in the calculation is returning a NaN\nYou could compile in debug mode and add run with --trap-fpe on the command line. This may be able to find where it's happening",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5768902",
                          "updatedAt": "2023-05-01T02:46:17Z",
                          "publishedAt": "2023-05-01T02:46:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "This is the command line I gave. Can you confirm if it's the correct way to write as it runs upto 2 iterations and then ends.\nmpirun -machinefile $PBS_NODEFILE -n 40 /home/mkankani21/offline/nucleation_bm/nucleation_bm-opt --trap-fpe -i input_var_dt.i> test.txt",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5770811",
                  "updatedAt": "2023-05-01T11:03:10Z",
                  "publishedAt": "2023-05-01T11:03:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does it end with a trapping of a floating point exception? Or with nothing useful?\nIt's correct except you should use a debug executable, not the opt one",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5780424",
                          "updatedAt": "2023-05-02T12:31:55Z",
                          "publishedAt": "2023-05-02T12:31:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "I will make the debug executable and share the results. One doubt I have is that while making the debug executable, by any chance does it modify other files?",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5783262",
                          "updatedAt": "2023-05-02T16:48:47Z",
                          "publishedAt": "2023-05-02T16:48:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "The system runs for 2 iterations and this is what I get. Am I missing something?\nFloating point exception signaled (\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\ninvalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n[25] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n[29] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n[36] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n[39] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n[37] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n[28] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\n\nFloating point exception signaled (invalid floating point operation)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n[38] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 25\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 28\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 29\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 36\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 37\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 38\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 39\n[16:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 16\n[17:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 17\n[18:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 18\n[19:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 19\n[9:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 9\n[11:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 11\n[13:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 13\n[15:hpc857] unexpected disconnect completion event from [28:hpc858]\nAssertion failed in file ../../src/mpid/ch3/channels/nemesis/netmod/dapl/dapl_conn_rc.c at line 1182: 0\ninternal ABORT - process 15",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5783784",
                  "updatedAt": "2023-05-02T18:10:16Z",
                  "publishedAt": "2023-05-02T17:50:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so trap-fpe doesnt catch it but it s telling you to catch it in a debugger.\nplease follow the instructions to do it",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5783928",
                          "updatedAt": "2023-05-02T18:02:49Z",
                          "publishedAt": "2023-05-02T18:02:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if you're not familiar with debugging, here's a good start\nhttps://mooseframework.inl.gov/application_development/debugging.html",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784003",
                          "updatedAt": "2023-05-02T18:10:05Z",
                          "publishedAt": "2023-05-02T18:10:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "I followed the instructions. I am attaching the file. Let me know if I am in the right direction.\ndebug.txt",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784261",
                  "updatedAt": "2023-05-02T18:40:10Z",
                  "publishedAt": "2023-05-02T18:40:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "add this breakpoint too break libmesh_handleFPE\nalso once it breaks, please post the backtrace",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784297",
                          "updatedAt": "2023-05-02T18:43:51Z",
                          "publishedAt": "2023-05-02T18:43:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "Do I have to just enter this command in gdb mode or something else also has to be done? I followed the previous steps and I am not sure if it is working differently.\nThis is what I have done, it is debugging\n(gdb) break libmesh_handleFPE\nFunction \"libmesh_handleFPE\" not defined.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 2 (libmesh_handleFPE) pending.\n(gdb) r\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/mkankani21/offline/nucleation_bm/./nucleation_bm-dbg -i input_var_dt.i",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784383",
                  "updatedAt": "2023-05-02T18:53:42Z",
                  "publishedAt": "2023-05-02T18:53:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this should be fine",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784404",
                          "updatedAt": "2023-05-02T18:56:26Z",
                          "publishedAt": "2023-05-02T18:56:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "Here it is:\nTime Step 1, time = 1, dt = 1\nComputing Initial Residual\n  Computing Residual......                                                           [ 36.69 s] [    9 MB]\nFinished Computing Initial Residual                                                  [ 36.69 s] [    9 MB]\nComputing Residual......                                                             [ 38.56 s] [  -10 MB]\n\n0 Nonlinear |R| = 3.239109e+06\nComputing Jacobian.................                                                  [ 92.32 s] [   64 MB]\n0 Linear |R| = 3.239109e+06\n1 Linear |R| = 4.968937e-08\nComputing Residual......                                                             [ 36.71 s] [    4 MB]\n\n1 Nonlinear |R| = 6.198875e+03\nComputing Jacobian................                                                   [ 86.68 s] [    0 MB]\n0 Linear |R| = 6.198875e+03\n1 Linear |R| = 1.008331e-09\nProgram received signal SIGFPE, Arithmetic exception.\nFunctionParserBase::Eval (this=0x36e0f10, Vars=0x36bd590)\nat ../../../contrib/fparser/fparser.cc:2985\n2985\t              Stack[SP-1] = Stack[SP] / Stack[SP-1]; --SP; break;",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784430",
                  "updatedAt": "2023-05-02T18:59:09Z",
                  "publishedAt": "2023-05-02T18:59:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do you get a longer backtrace? with bt",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784454",
                          "updatedAt": "2023-05-02T19:01:46Z",
                          "publishedAt": "2023-05-02T19:01:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Yes. Here it is:\n(gdb) bt\n#0  FunctionParserBase::Eval (this=0x36e0f10, Vars=0x36bd590)\nat ../../../contrib/fparser/fparser.cc:2985\n#1  0x00007fffedf37b4a in FunctionParserADBase::Eval (this=0x36e0f10,\nVars=0x36bd590) at ../../../contrib/fparser/fparser_ad.cc:644\n#2  0x00007ffff3367da3 in FunctionParserUtils::evaluate (\nthis=0x36dd6f0, parser=..., name=...)\nat /home/mkankani21/offline/moose/framework/src/utils/FunctionParserUtils.C:102\n#3  0x00007ffff2bbdc1e in DerivativeParsedMaterialHelperTempl::computeQpProperties (this=0x36dc6b0)\nat /home/mkankani21/offline/moose/framework/src/materials/DerivativeParsedMaterialHelper.C:286\n#4  0x00007ffff2ba3974 in Material::computeProperties (this=0x36dc6b0)\nat /home/mkankani21/offline/moose/framework/src/materials/Material.C:132\n#5  0x00007ffff2fcf106 in MaterialData::reinit<std::vector<std::shared_ptr, std::allocator<std::shared_ptr > > > (this=0x31456e0,\nmats=...)\nat /home/mkankani21/offline/moose/framework/build/header_symlinks/MaterialData.h:458\n#6  0x00007ffff2f8bb14 in FEProblemBase::reinitMaterials (this=0x312d250,\nblk_id=0, tid=0, swap_stateful=true)\nat /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:3246",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784490",
                          "updatedAt": "2023-05-02T19:06:55Z",
                          "publishedAt": "2023-05-02T19:06:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "there s your problem\none of your derivativeParsedMaterial has a floating point exception, probably a division by 0\ncan you paste them here? -> I went to have a look. Not super clear which one, any luck for you?",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784597",
                          "updatedAt": "2023-05-02T19:42:37Z",
                          "publishedAt": "2023-05-02T19:26:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "actually if you are still in the debbuger, it would really help to find the name of the material",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784723",
                          "updatedAt": "2023-05-02T19:42:14Z",
                          "publishedAt": "2023-05-02T19:42:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "yes, I am still in the debugger. What shall I do next?",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784737",
                          "updatedAt": "2023-05-02T19:43:46Z",
                          "publishedAt": "2023-05-02T19:43:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "info local (or locals?) with gdb\nor fr v with lldb",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784761",
                          "updatedAt": "2023-05-02T19:47:14Z",
                          "publishedAt": "2023-05-02T19:47:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "or maybe b  Material::computeProperties\nthen continue\non the next break name()\nhopefully still the same material that is buggy",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784767",
                          "updatedAt": "2023-05-02T19:48:10Z",
                          "publishedAt": "2023-05-02T19:48:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "There were still more. From which line did you find out the division error?\n(gdb) bt\n#0  FunctionParserBase<double>::Eval (this=0x36e0f10, Vars=0x36bd590)\n    at ../../../contrib/fparser/fparser.cc:2985\n#1  0x00007fffedf37b4a in FunctionParserADBase<double>::Eval (this=0x36e0f10, \n    Vars=0x36bd590) at ../../../contrib/fparser/fparser_ad.cc:644\n#2  0x00007ffff3367da3 in FunctionParserUtils<false>::evaluate (\n    this=0x36dd6f0, parser=..., name=...)\n    at /home/mkankani21/offline/moose/framework/src/utils/FunctionParserUtils.C:102\n#3  0x00007ffff2bbdc1e in DerivativeParsedMaterialHelperTempl<false>::computeQpProperties (this=0x36dc6b0)\n    at /home/mkankani21/offline/moose/framework/src/materials/DerivativeParsedMaterialHelper.C:286\n#4  0x00007ffff2ba3974 in Material::computeProperties (this=0x36dc6b0)\n    at /home/mkankani21/offline/moose/framework/src/materials/Material.C:132\n#5  0x00007ffff2fcf106 in MaterialData::reinit<std::vector<std::shared_ptr<MaterialBase>, std::allocator<std::shared_ptr<MaterialBase> > > > (this=0x31456e0, \n    mats=...)\n    at /home/mkankani21/offline/moose/framework/build/header_symlinks/MaterialData.h:458\n#6  0x00007ffff2f8bb14 in FEProblemBase::reinitMaterials (this=0x312d250, \n    blk_id=0, tid=0, swap_stateful=true)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:3246\n---Type <return> to continue, or q <return> to quit---return\n#7  0x00007ffff26b4b49 in ComputeResidualThread::onElement (\n    this=0x7fffffffa7d0, elem=0x1189690)\n    at /home/mkankani21/offline/moose/framework/src/loops/ComputeResidualThread.C:144\n#8  0x00007ffff2707976 in ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator() (\n    this=0x7fffffffa7d0, range=..., bypass_threading=false)\n    at /home/mkankani21/offline/moose/framework/build/header_symlinks/ThreadedElementLoopBase.h:226\n#9  0x00007ffff2547595 in libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeResidualThread> (range=..., body=...)\n    at /home/mkankani21/offline/moose/scripts/../libmesh/installed/include/libmesh/threads_pthread.h:380\n#10 0x00007ffff2515188 in NonlinearSystemBase::computeResidualInternal (\n    this=0x3145b90, tags=...)\n    at /home/mkankani21/offline/moose/framework/src/systems/NonlinearSystemBase.C:1483\n#11 0x00007ffff250fba3 in NonlinearSystemBase::computeResidualTags (\n    this=0x3145b90, tags=...)\n    at /home/mkankani21/offline/moose/framework/src/systems/NonlinearSystemBase.C:742\n#12 0x00007ffff2fa10fd in FEProblemBase::computeResidualTags (this=0x312d250, \n---Type <return> to continue, or q <return> to quit---return\n    tags=...)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:5626\n#13 0x00007ffff2f9fcb2 in FEProblemBase::computeResidualInternal (\n    this=0x312d250, soln=..., residual=..., tags=...)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:5464\n#14 0x00007ffff2f9f760 in FEProblemBase::computeResidual (this=0x312d250, \n    soln=..., residual=...)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:5419\n#15 0x00007ffff2f9f54d in FEProblemBase::computeResidualSys (this=0x312d250, \n    soln=..., residual=...)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:5394\n#16 0x00007ffff25055fb in ComputeResidualFunctor::residual (this=0x3147358, \n    soln=..., residual=..., sys=...)\n    at /home/mkankani21/offline/moose/framework/src/systems/ComputeResidualFunctor.C:23\n#17 0x00007fffedb3c5f6 in libMesh::libmesh_petsc_snes_residual (\n    snes=0x4ef2f00, x=0x42a7b40, r=0x42a8220, ctx=0x3148360)\n    at ../src/solvers/petsc_nonlinear_solver.C:163\n#18 0x00007fffe9e3400e in SNESComputeFunction (snes=0x4ef2f00, x=0x42a7b40, \n---Type <return> to continue, or q <return> to quit---return\n    y=0x42a8220)\n    at /home/mkankani21/offline/moose/petsc/src/snes/interface/snes.c:2471\n#19 0x00007fffe9e573f8 in SNESLineSearchApply_BT (linesearch=0x4294d00)\n    at /home/mkankani21/offline/moose/petsc/src/snes/linesearch/impls/bt/linesearchbt.c:147\n#20 0x00007fffe9e5d54c in SNESLineSearchApply (linesearch=0x4294d00, \n    X=X@entry=0x32aca70, F=F@entry=0x7c8ad0, fnorm=fnorm@entry=0x7fffffffc2e8, \n    Y=Y@entry=0x4eecd50)\n    at /home/mkankani21/offline/moose/petsc/src/snes/linesearch/interface/linesearch.c:619\n#21 0x00007fffe9e77125 in SNESSolve_NEWTONLS (snes=0x4ef2f00)\n    at /home/mkankani21/offline/moose/petsc/src/snes/impls/ls/ls.c:239\n#22 0x00007fffe9e44987 in SNESSolve (snes=0x4ef2f00, b=0x0, x=<optimized out>)\n    at /home/mkankani21/offline/moose/petsc/src/snes/interface/snes.c:4809\n#23 0x00007fffedb404a9 in libMesh::PetscNonlinearSolver<double>::solve (\n    this=0x3148360, pre_in=..., x_in=..., r_in=...)\n    at ../src/solvers/petsc_nonlinear_solver.C:976\n#24 0x00007fffedbcaa83 in libMesh::NonlinearImplicitSystem::solve (\n    this=0x3147390) at ../src/systems/nonlinear_implicit_system.C:191\n#25 0x00007ffff1fea642 in TimeIntegrator::solve (this=0x32f0010)\n    at /home/mkankani21/offline/moose/framework/src/timeintegrators/TimeIntegrator.C:54\n#26 0x00007ffff2509bce in NonlinearSystem::solve (this=0x3145b90)\n---Type <return> to continue, or q <return> to quit---return\n    at /home/mkankani21/offline/moose/framework/src/systems/NonlinearSystem.C:195\n#27 0x00007ffff2f9bf74 in FEProblemBase::solve (this=0x312d250)\n    at /home/mkankani21/offline/moose/framework/src/problems/FEProblemBase.C:5131\n#28 0x00007ffff27173b2 in FEProblemSolve::solve (this=0x32e3160)\n    at /home/mkankani21/offline/moose/framework/src/executioners/FEProblemSolve.C:253\n#29 0x00007ffff271b8f7 in FixedPointSolve::solveStep (this=0x32e3540, \n    begin_norm=@0x24ce250: 0, end_norm=@0x2007900: 0, transformed_dofs=...)\n    at /home/mkankani21/offline/moose/framework/src/executioners/FixedPointSolve.C:393\n#30 0x00007ffff271ad0c in FixedPointSolve::solve (this=0x32e3540)\n    at /home/mkankani21/offline/moose/framework/src/executioners/FixedPointSolve.C:274\n#31 0x00007ffff28d88be in TimeStepper::step (this=0x36abce0)\n    at /home/mkankani21/offline/moose/framework/src/timesteppers/TimeStepper.C:161\n#32 0x00007ffff2729acd in Transient::takeStep (this=0x32e2e70, input_dt=-1)\n    at /home/mkankani21/offline/moose/framework/src/executioners/Transient.C:444\n#33 0x00007ffff2728e17 in Transient::execute (this=0x32e2e70)\n    at /home/mkankani21/offline/moose/framework/src/executioners/Transient.C:329---Type <return> to continue, or q <return> to quit---return\n\n#34 0x00007ffff329236b in MooseApp::executeExecutioner (this=0x80b4b0)\n    at /home/mkankani21/offline/moose/framework/src/base/MooseApp.C:1095\n#35 0x00007ffff3294f9a in MooseApp::run (this=0x80b4b0)\n    at /home/mkankani21/offline/moose/framework/src/base/MooseApp.C:1410\n#36 0x000000000040a010 in main (argc=3, argv=0x7fffffffe2b8)\n    at /home/mkankani21/offline/nucleation_bm/src/main.C:33",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784792",
                          "updatedAt": "2023-05-02T19:54:59Z",
                          "publishedAt": "2023-05-02T19:51:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont know that it s a division error. I know it s a floating point exception.\nIt s hitting the floating point exception breakpoint, that's how I know",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784826",
                          "updatedAt": "2023-05-02T19:55:33Z",
                          "publishedAt": "2023-05-02T19:55:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "K-Komal-98"
                  },
                  "bodyText": "I gave two commands:\ninfo local\nb  Material::computeProperties\n\nAm I missing something?\n(gdb) info local\nbyteCode = 0x36e30d0\nimmed = 0x36ddbf0\nbyteCodeSize = 55\nIP = 18\nDP = 1\nSP = 5\nAutoDeallocStack = {ptr = 0x42aa7f0}\nStack = @0x7fffffffa1c0: 0x42aa7f0\n(gdb) b  Material::computeProperties\nBreakpoint 3 at 0x7ffff2ba37cf: file /home/mkankani21/offline/moose/framework/src/materials/Material.C, line 106.",
                  "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784832",
                  "updatedAt": "2023-05-02T19:59:05Z",
                  "publishedAt": "2023-05-02T19:55:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you can press c to continue to the next breakpoint",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784859",
                          "updatedAt": "2023-05-02T19:59:22Z",
                          "publishedAt": "2023-05-02T19:59:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "we want the name of the material causing the FPE (floating point exception) so you can know where to look",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784864",
                          "updatedAt": "2023-05-02T19:59:47Z",
                          "publishedAt": "2023-05-02T19:59:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Entered c\n(gdb) c\nContinuing.\nComputing Residual\n\nFloating point exception signaled (invalid floating point operation)!\nTo track this down, compile in debug mode, then in gdb do:\nbreak libmesh_handleFPE\nrun ...\nbt\nStack frames: 40\n0: libMesh::print_trace(std::ostream&)\n1: libMesh::MacroFunctions::report_error(char const*, int, char const*, char const*)\n2: /home/mkankani21/offline/moose/scripts/../libmesh/installed/lib/libmesh_dbg.so.0(+0x15a728f) [0x7fffecfb528f]\n3: /lib64/libpthread.so.0(+0xf100) [0x7fffe4ed5100]\n4: FunctionParserBase::Eval(double const*)\n5: FunctionParserADBase::Eval(double const*)\n6: FunctionParserUtils::evaluate(std::shared_ptr<FunctionParserADBase >&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)\n7: DerivativeParsedMaterialHelperTempl::computeQpProperties()\n8: Material::computeProperties()\n9: void MaterialData::reinit<std::vector<std::shared_ptr, std::allocator<std::shared_ptr > > >(std::vector<std::shared_ptr, std::allocator<std::shared_ptr > > const&)\n10: FEProblemBase::reinitMaterials(unsigned short, unsigned int, bool)\n11: ComputeResidualThread::onElement(libMesh::Elem const*)\n12: ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n13: void libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeResidualThread>(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, ComputeResidualThread&)\n14: NonlinearSystemBase::computeResidualInternal(std::set<unsigned int, std::less, std::allocator > const&)\n15: NonlinearSystemBase::computeResidualTags(std::set<unsigned int, std::less, std::allocator > const&)\n16: FEProblemBase::computeResidualTags(std::set<unsigned int, std::less, std::allocator > const&)\n17: FEProblemBase::computeResidualInternal(libMesh::NumericVector const&, libMesh::NumericVector&, std::set<unsigned int, std::less, std::allocator > const&)\n18: FEProblemBase::computeResidual(libMesh::NumericVector const&, libMesh::NumericVector&)\n19: FEProblemBase::computeResidualSys(libMesh::NonlinearImplicitSystem&, libMesh::NumericVector const&, libMesh::NumericVector&)\n20: ComputeResidualFunctor::residual(libMesh::NumericVector const&, libMesh::NumericVector&, libMesh::NonlinearImplicitSystem&)\n21: libmesh_petsc_snes_residual\n22: SNESComputeFunction\n23: /home/mkankani21/offline/moose/petsc/arch-moose/lib/libpetsc.so.3.16(+0xd2d3f8) [0x7fffe9e573f8]\n24: SNESLineSearchApply\n25: /home/mkankani21/offline/moose/petsc/arch-moose/lib/libpetsc.so.3.16(+0xd4d125) [0x7fffe9e77125]\n26: SNESSolve\n27: libMesh::PetscNonlinearSolver::solve(libMesh::SparseMatrix&, libMesh::NumericVector&, libMesh::NumericVector&, double, unsigned int)\n28: libMesh::NonlinearImplicitSystem::solve()\n29: TimeIntegrator::solve()\n30: NonlinearSystem::solve()\n31: FEProblemBase::solve()\n32: FEProblemSolve::solve()\n33: FixedPointSolve::solveStep(double&, double&, std::set<unsigned long, std::less, std::allocator > const&)\n34: FixedPointSolve::solve()\n35: TimeStepper::step()\n36: Transient::takeStep(double)\n37: Transient::execute()\n38: MooseApp::executeExecutioner()\n39: MooseApp::run()\n.[0] ../src/base/libmesh.C, line 134, compiled Oct  7 2022 at 16:28:19\nBreakpoint 1, 0x00007fffe5cd47f0 in PMPI_Abort ()\nfrom /home/gmaurya20/local/mpich-3.4.2/mpich/lib/libmpi.so.12",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784878",
                          "updatedAt": "2023-05-02T20:02:00Z",
                          "publishedAt": "2023-05-02T20:01:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok no luck. Well we know one DerivativeParsedMaterial is out of bounds / causing some FPE issues. You ll have to look at them and see which ones that would be",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5784933",
                          "updatedAt": "2023-05-02T20:10:08Z",
                          "publishedAt": "2023-05-02T20:10:08Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Thankyou for your patience! I am just few steps away. I would request you to help me in what should I fix.\nThese are the two DerivativeParsedMaterial blocks that I have added in the existing problem that works fine. Probably eta is causing the problem as it ranges from 0 to 1. Is that causing a problem?\n[./one_minus_h_eta]\n    type = DerivativeParsedMaterial\n    f_name = one_minus_h\n    args = 'eta'\n    function = '1-h'\n    material_property_names = 'h'\n  [../]\n  [./var_dependence]\n    type = DerivativeParsedMaterial\n    f_name = var_dep\n    args = 'eta'\n    function = eta\n    derivative_order = 1\n  [../]",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5785003",
                          "updatedAt": "2023-05-02T20:32:43Z",
                          "publishedAt": "2023-05-02T20:20:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "these functions look fine actually.\nUnless eta or h is NaN which would mean the variable value has a Nan",
                          "url": "https://github.com/idaholab/moose/discussions/24232#discussioncomment-5785110",
                          "updatedAt": "2023-05-02T20:33:54Z",
                          "publishedAt": "2023-05-02T20:33:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Rolling and Forging",
          "author": {
            "login": "KamalnathOSU"
          },
          "bodyText": "Hi all,\nHas anybody tried to simulated hot rolling process and forging process using MOOSE ? If so, can you guys point me towards the relevant literature / example files in MOOSE ?",
          "url": "https://github.com/idaholab/moose/discussions/24238",
          "updatedAt": "2023-05-08T20:09:30Z",
          "publishedAt": "2023-05-01T15:17:16Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "https://mooseframework.inl.gov/source/materials/ComputeMultipleInelasticStress.html\nhttps://mooseframework.inl.gov/source/materials/crystal_plasticity/ComputeMultipleCrystalPlasticityStress.html\nhttps://mooseframework.inl.gov/source/materials/ADViscoplasticityStressUpdate.html\nhttps://mooseframework.inl.gov/source/materials/lagrangian/ComputeSimoHughesJ2PlasticityStress.html",
                  "url": "https://github.com/idaholab/moose/discussions/24238#discussioncomment-5780678",
                  "updatedAt": "2023-05-02T12:58:12Z",
                  "publishedAt": "2023-05-02T12:58:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "Thank you. I will take a look at these reference",
                          "url": "https://github.com/idaholab/moose/discussions/24238#discussioncomment-5784029",
                          "updatedAt": "2023-05-02T18:13:23Z",
                          "publishedAt": "2023-05-02T18:13:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Isotropic Elasticity Tensor as a function of space.",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi,\nI am trying to model 2D elasticity problem where the Poisson's ratio is constant (in space), whereas the Young's modulus is varying. So I used functions to define Young's modulus as a function in space and used GenericFunctionRankTwoTensor to define the material properties.\nI am getting the following error when trying to run the executable:\n\n\n\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\nMaterial property 'elasticity_tensor', requested by 'stress' is not defined on block 0\nMaterial property 'elasticity_tensor', requested by 'stress_face' is not defined on block 0\nMaterial property 'elasticity_tensor', requested by 'stress_neighbor' is not defined on block 0\nthe part of the input file that shows the error is as follows:\n\n[Functions]\n    [./E]\n    type = ParsedFunction\n    value = 'x'\n    [../]\n[]\n\n[AuxVariables]\n    [stress_xx]\n    order=constant\n    family=MONOMIAL\n    []\n[]\n\n[AuxKernels]\n    [aux_stress_xx]\n    type=RankTwoScalarAux\n    variable=stress_xx\n    rank_two_tensor=stress\n    execute_on=timestep_end\n    scalar_type=AxialStress\n    []\n[]\n\n[Kernels]\n    [TensorMechanics]\n    add_variables = true\n    displacements = 'dispx dispy'\n    []\n  \n    [body_force]\n    type=BodyForce\n     variable=dispx\n    value=10e3\n    []\n[]\n\n[Materials]\n\n    [elasticity_tensor]\n    type = GenericFunctionRankTwoTensor\n    tensor_name = function\n    tensor_functions = 'E 0 0 0 0 0 \n                        0 E 0 0 0 0\n                        0 0 E 0 0 0\n                        0 0 0 1 0 0\n                        0 0 0 0 1 0\n                        0 0 0 0 0 1'\n             \n[]\n\nAny suggestion on fixing this?\nThanks.",
          "url": "https://github.com/idaholab/moose/discussions/18682",
          "updatedAt": "2023-05-02T15:12:47Z",
          "publishedAt": "2021-08-23T19:37:40Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "elasticity_tensor is defined as a RankFourTensor in MOOSE-TensorMechanics\nMaybe you can try ComputeVariableIsotropicElasticityTensor, see https://mooseframework.inl.gov/source/materials/ComputeVariableIsotropicElasticityTensor.html",
                  "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-1224212",
                  "updatedAt": "2022-06-13T08:28:22Z",
                  "publishedAt": "2021-08-23T19:49:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "Is there a similar kernel for transverse isotropic material?",
                          "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-1335348",
                          "updatedAt": "2022-06-13T08:28:24Z",
                          "publishedAt": "2021-09-15T19:54:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "@AlexCHEN-Engineer I don't think we have one in tensor_mechanics. You can follow ComputeVariableIsotropicElasticityTensor to define your own ComputeVariableOrthotropicElasticityTensor. In validParams(), instead of requesting youngs_modulus and poissons_ratio, you would request 9 independent material properties.\nAlternatively, you can use DenseMatrix<Real> instead of RankFourTensor to define the orthotropic elasticity tensor to save you some memory, with Hill notation.\nIn the end, if you are happy with your implementation, and you think it could be useful for other users, you are welcome to submit a pull request!",
                          "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-1336198",
                          "updatedAt": "2022-06-13T08:28:24Z",
                          "publishedAt": "2021-09-16T02:08:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "@hugary1995  @AlexCHEN-Engineer : Is such a temperature dependent Orthotropic elasticity material already a part of MOOSE now ?",
                          "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-5756031",
                          "updatedAt": "2023-04-28T15:35:45Z",
                          "publishedAt": "2023-04-28T15:35:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "No, I am not aware of any plan to extend the support of temperature-dependent anisotropic elasticity in tensor_mechanics.\nIn the long term you may consider using https://github.com/idaholab/blackbear. I think you are familiar with deer, and @reverendbedford and I are deprecating deer in favor of blackbear, where we might have more flexibility in supporting your specific needs.",
                          "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-5759375",
                          "updatedAt": "2023-04-29T00:50:12Z",
                          "publishedAt": "2023-04-29T00:50:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Great! Definitely looking forward to it :)\nThanks :)",
                          "url": "https://github.com/idaholab/moose/discussions/18682#discussioncomment-5782240",
                          "updatedAt": "2023-05-02T15:12:48Z",
                          "publishedAt": "2023-05-02T15:12:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about CentralDifference Solver Implementation",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Hi all, I'm a bit confused about the implementation in central difference solver and hope someone could clarify it. In the CentralDifference.h, we have the following code snippet for evaluating  u_dot and  u_dotdot:\ntemplate <typename T, typename T2, typename T3, typename T4, typename T5>\nvoid\nCentralDifference::computeTimeDerivativeHelper(T & u_dot,\n                                               T2 & u_dotdot,\n                                               const T3 & u_old,\n                                               const T4 & u_old_old,\n                                               const T5 & u_old_old_old) const\n{\n  // computing first derivative\n  // using the Central Difference method\n  // u_dot_old = (first_term - second_term) / 2 / dt\n  //       first_term = u\n  //      second_term = u_older\n  u_dot = u_old;\n  u_dot -= u_old_old_old; // 'older than older' solution\n  u_dot *= 1.0 / (2.0 * _dt);\n\n  // computing second derivative\n  // using the Central Difference method\n  // u_dotdot_old = (first_term - second_term + third_term) / dt / dt\n  //       first_term = u\n  //      second_term = 2 * u_old\n  //       third_term = u_older\n  u_dotdot = u_old;\n  u_dotdot -= u_old_old;\n  u_dotdot -= u_old_old;\n  u_dotdot += u_old_old_old;\n  u_dotdot *= 1.0 / (_dt * _dt);\n}\n\nHowever, the u_old is extracted from _solution_old which is the solution from previous time step (?), say n, that makes the evaluation as follows:\n$$ \\dot{u_{n-1}} = \\frac{u_n - u_{n-2}}{\\Delta t} $$\n$$\\ddot{u_{n-1}} =  \\frac{u_n - 2u_{n-1} + u_{n-2}}{\\Delta t^2} $$\nThis is different from the equation on website page https://mooseframework.inl.gov/source/timeintegrators/CentralDifference.html. I expect given the weak from with inertia term $\\rho \\ddot{u}$, the $\\ddot{u}$ would first express as terms with $u_{n+1}, u_{n}, u_{n-1}$ and we solve for $u_{n+1}$, but it seems like here we get $\\ddot{u}$ directly through previous values and fit it into the weak form? Thanks in advance.",
          "url": "https://github.com/idaholab/moose/discussions/24243",
          "updatedAt": "2023-06-24T22:33:19Z",
          "publishedAt": "2023-05-01T23:21:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe documentation is wrong.\nAs it it s implemented, the CentralDifference time integrator is an explicit time integrator, it does use u(t+dt) (u_n+1)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24243#discussioncomment-5780304",
                  "updatedAt": "2023-05-02T12:21:02Z",
                  "publishedAt": "2023-05-02T12:21:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "We followed these notes when implementing the central difference scheme: https://people.duke.edu/~hpgavin/StructuralDynamics/NumericalIntegration.pdf\n@permcody might still have the \"permission to include\" from Prof. Gavin, so @GiudGiud we might just provide a link to these notes in our doco page.",
                  "url": "https://github.com/idaholab/moose/discussions/24243#discussioncomment-5780491",
                  "updatedAt": "2023-05-02T12:39:45Z",
                  "publishedAt": "2023-05-02T12:39:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi Gray, thanks for sharing this. The equations in the note is consistent with the website. The part I still not sure about is the implementation in the code, it seems like u_old is not $u_{n+1}$, or it appears to be the case?",
                          "url": "https://github.com/idaholab/moose/discussions/24243#discussioncomment-5781998",
                          "updatedAt": "2023-05-02T14:55:01Z",
                          "publishedAt": "2023-05-02T14:53:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}