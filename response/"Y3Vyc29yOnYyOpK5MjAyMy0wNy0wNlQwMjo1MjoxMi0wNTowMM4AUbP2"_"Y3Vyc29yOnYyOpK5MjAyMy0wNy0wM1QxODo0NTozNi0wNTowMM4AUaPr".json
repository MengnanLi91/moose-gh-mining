{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNy0wM1QxODo0NTozNi0wNTowMM4AUaPr"
    },
    "edges": [
      {
        "node": {
          "title": "Heat extraction in a doublet",
          "author": {
            "login": "Josselin-76"
          },
          "bodyText": "Dear community,\nI am modeling a doublet in a monolayer reservoir only in TH.\n\nMy injection work perfectly however my extraction does not work. The temperature a the production well is heavily increasing over time instead of remaining constant and then cooling.\nI have used all the available approaches in Point and line sources/sinks.\n\nInjection in DirichletBC : imposing water pressure and temperature at the well imposing water pressure at the production well\n\n\n\n\nInjection with [PorousFlowPointEnthalpySourceFromPostprocessor] and extraction with [PorousFlowPointSourceFromPostprocessor]\n\n\n\n\nInjection with [PorousFlowPointSourceFromPostprocessor] and extraction with [PorousFlowPeacemanBorehole]\n\n\n\nInjection with water pressure PorousFlowSquarePulsePointSource, temperature Dirichlet BC, extraction PorousFlowSquarePulsePointSource\n\n\n\n\nInjection with [PorousFlowPointSourceFromPostprocessor]  and production with PorousFlowSquarePulsePointSource\n\n\nCan you please help with that, in an ideal world I would like to inject with [PorousFlowPointEnthalpySourceFromPostprocessor and extract with PorousFlowSquarePulsePointSource.\nThank you\nHere is my code\nAquifer_TH.txt\nMesh\nmesh.txt",
          "url": "https://github.com/idaholab/moose/discussions/24878",
          "updatedAt": "2023-07-10T09:57:03Z",
          "publishedAt": "2023-06-30T09:05:20Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDisclaimer: not a subject matter expert\nSo the extraction is a point source (sink).\nIs the mesh resolved enough near the extraction point?\n@cpgr (a SME)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24878#discussioncomment-6339052",
                  "updatedAt": "2023-07-02T23:43:07Z",
                  "publishedAt": "2023-07-02T23:43:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Josselin-76"
                          },
                          "bodyText": "Thanks for the answer.\nIt is not mesh/node dependent. When refining and increasing the size of the refined zone, the extraction temperature still increases.",
                          "url": "https://github.com/idaholab/moose/discussions/24878#discussioncomment-6340887",
                          "updatedAt": "2023-07-03T06:38:13Z",
                          "publishedAt": "2023-07-03T06:38:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "You need to make sure that you are producing both mass and heat, so need two production sources/wells - one for mass, one for heat. The PorousFlowSquarePulsePointSource doesn't have an option to easily do enthalpy (probably something I should add). You might be able to use the two 'source from post processor' point sources as sinks (just use a -ve mass flux).\nI think the Paceman borehole approach should have worked though?",
                          "url": "https://github.com/idaholab/moose/discussions/24878#discussioncomment-6368503",
                          "updatedAt": "2023-07-06T00:29:01Z",
                          "publishedAt": "2023-07-06T00:29:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Perhaps like\n[DirakKernels]\n  [fluid_source]\n    type = PorousFlowPointSourceFromPostprocessor\n    variable = pwater\n    mass_flux = mass_flux_in\n    point = '5150 5000 500'\n  []\n  [enthalpy_source]\n    type = PorousFlowPointEnthalpySourceFromPostprocessor\n    variable = temp\n    mass_flux = mass_flux_in\n    point = '5150 5000 500'\n    T_in = T_in\n    pressure = pwater\n    fp = water\n  []\n  [fluid_sink]\n    type = PorousFlowPointSourceFromPostprocessor\n    point = '4850 5000 500'\n    variable = pwater\n    mass_flux = mass_flux_out #[kg/s]\n  []\n  [enthalpy_sink]\n    type = PorousFlowPointEnthalpySourceFromPostprocessor\n    variable = temp\n    mass_flux = mass_flux_out\n    point = '4850 5000 500'\n    T_in = temp_pro\n    pressure = pwater\n    fp = water\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24878#discussioncomment-6369404",
                          "updatedAt": "2023-07-06T03:25:51Z",
                          "publishedAt": "2023-07-06T03:25:50Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Applicability of MOOSE electrical module in PLASMA flow control",
          "author": {
            "login": "Badtreater"
          },
          "bodyText": "Dear researchers and developers,\nthank you guys so much for providing the open-source PLASMA simulation codes. I am a novice in PLASMA research and working hard to complete my doctoral studies.However, due to my poor ability on programming of finite element solvers, it has been hard to complete the simulation code of PLASMA completely on my own. To be honest, I was very excited when I first saw Zapdos. I thought it might help me to supplement my lack of simulation.\nTo get back to the point, I hope to use Zapdos to complete the simulation work in the literature[1], but unfortunately, due to a lack of understanding of the underlying solver, I am unable to make a judgment on whether Zapdos can correctly complete this simulation process. I am eager to receive your answers on the applicability of the Zapdos underlying solver to the simulation of PLASMA flow control actuators. If the work can proceed, I also hope to include the reference of Zapdos in my own paper when publishing articles in the future. Thank you so much. The reference is attached in the email.\nReference\n[1]Kunwar Pal Singh, Subrata Roy; Modeling plasma actuators with air chemistry for effective flow control. Journal of Applied Physics 15 June 2007; 101 (12): 123308. https://doi.org/10.1063/1.2749467",
          "url": "https://github.com/idaholab/moose/discussions/24885",
          "updatedAt": "2023-07-05T17:27:54Z",
          "publishedAt": "2023-07-02T06:41:02Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Hi @Badtreater as your question is more about Zapdos, can you open a discussion on the Zapdos repository? https://github.com/shannon-lab/zapdos/discussions",
                  "url": "https://github.com/idaholab/moose/discussions/24885#discussioncomment-6365693",
                  "updatedAt": "2023-07-05T17:27:55Z",
                  "publishedAt": "2023-07-05T17:27:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "AD Dynamics Issues",
          "author": {
            "login": "maxnezdyur"
          },
          "bodyText": "A previous discussion reminded me a weird issues I have had with AD and Dynamics in MOOSE. Let know if I didn't set something up correctly and that led me to these problems!  Issue 1 is makes me worry that I am just missing something simple.\nIssue 1: ADIntertial Force\nbeta = 0.25\ngamma = 0.5\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    xmax = 0.30\n    ymax = 0.5\n    nx = 15\n    ny = 25\n    elem_type = QUAD4\n    boundary_name_prefix = flexible\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    strain = FINITE\n    add_variables = true\n    use_automatic_differentiation = false\n  []\n[]\n\n[Kernels]\n    [inertia_x]\n      type = ADInertialForce #Converting to InertialForce will fix this problem\n      variable = disp_x\n    []\n    [inertia_y]\n      type = ADInertialForce #Converting to InertialForce will fix this problem\n      variable = disp_y\n  []\n[]\n\n[Materials]\n  [elastic_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e+4\n    poissons_ratio = 0.4\n  []\n  [stress]\n    type = ComputeFiniteStrainElasticStress\n  []\n  [density]\n    type = ADGenericConstantMaterial # Convert to Generic\n    prop_names = 'density'\n    prop_values = '1'\n  []\n[]\n\n[BCs]\n  [hold_x]\n    type = ADDirichletBC\n    boundary = 'flexible_bottom'\n    variable = disp_x\n    value = 0\n  []\n  [hold_y]\n    type = ADDirichletBC\n    boundary = 'flexible_bottom'\n    variable = disp_y\n    value = 0\n  []\n\n  [Pressure]\n    [push]\n      function = 50 # This can be set to as low as 1e-4 and still cause problems \n      boundary = 'flexible_left '\n      use_automatic_differentiation = true\n      use_displaced_mesh = true\n    []\n  []\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 1\n  dt = 1e-2\n  solve_type = 'NEWTON'\n  petsc_options = '-snes_converged_reason -ksp_converged_reason '\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_type -pc_factor_shift_type -pc_factor_shift_amount'\n  petsc_options_value = 'lu       superlu_dist                  NONZERO 1e-15'\n\n  line_search = 'none'\n  nl_abs_tol = 1e-7\n  nl_rel_tol = 1e-6\n\n  [TimeIntegrator]\n    type = NewmarkBeta\n    beta = ${beta}\n    gamma = ${gamma}\n  []\n[]\n\n[Outputs]\n  [exo]\n    type = Exodus\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  file_base = \"ad\"\n  print_linear_residuals = false\n[]\n\n\nAD Convergence (input file above): Solve doesn't converge, time drops until errors out.\nEven If you set nl_forced_its = 5 and the pressure to even 1e-8, the solution will not converge. Need the nl_forced_its to keep it from converging before Newton Loops.\nTime Step 1, time = 0.01, dt = 0.01\n 0 Nonlinear |R| = 4.924429e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 1 Nonlinear |R| = 5.849474e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 2 Nonlinear |R| = 6.403490e+01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 3 Nonlinear |R| = 7.578755e+02\n  Linear solve converged due to CONVERGED_RTOL iterations 1\nCannot take square root of a number less than or equal to zero in the calculation of C3_test for the Rashid approximation for the rotation tensor. This zero or negative number may occur when elements become heavily distorted.\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 3\n Solve Did NOT Converge!\nAborting as solve did not converge\n\nConverting ADInertialForce to InertialForce (along with density to generic)\n\nTime Step 1, time = 0.01, dt = 0.01\n 0 Nonlinear |R| = 4.924429e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 1 Nonlinear |R| = 1.724298e-01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 2 Nonlinear |R| = 6.018986e-04\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 3 Nonlinear |R| = 1.211764e-05\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 4 Nonlinear |R| = 2.224675e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 4\n Solve Converged!\n\nIssue 2:  decomposition_method = EigenSolution with AD\nSame problem as before commenting out decomposition_method = EigenSolution will allow for convergence.\nbeta = 0.25\ngamma = 0.5\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    xmax = 0.30\n    ymax = 0.5\n    nx = 15\n    ny = 25\n    elem_type = QUAD4\n    boundary_name_prefix = flexible\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    strain = FINITE\n    decomposition_method = EigenSolution # Using TaylorExpansion Works\n    add_variables = true\n    use_automatic_differentiation = true\n  []\n[]\n\n[Kernels]\n    [inertia_x]\n      type = InertialForce\n      variable = disp_x\n    []\n    [inertia_y]\n      type = InertialForce\n      variable = disp_y\n  []\n[]\n\n[Materials]\n  [elastic_tensor]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 1e+4\n    poissons_ratio = 0.4\n  []\n  [stress]\n    type = ADComputeFiniteStrainElasticStress\n  []\n  [density]\n    type = GenericConstantMaterial\n    prop_names = 'density'\n    prop_values = '1'\n  []\n[]\n\n[BCs]\n  [hold_x]\n    type = ADDirichletBC\n    boundary = 'flexible_bottom'\n    variable = disp_x\n    value = 0\n  []\n  [hold_y]\n    type = ADDirichletBC\n    boundary = 'flexible_bottom'\n    variable = disp_y\n    value = 0\n  []\n\n  [Pressure]\n    [push]\n      function = 50\n      boundary = 'flexible_left '\n      use_automatic_differentiation = true\n      use_displaced_mesh = true\n    []\n  []\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 1\n  dt = 1e-1\n  solve_type = 'NEWTON'\n  petsc_options = '-snes_converged_reason -ksp_converged_reason '\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_type -pc_factor_shift_type -pc_factor_shift_amount'\n  petsc_options_value = 'lu       superlu_dist                  NONZERO 1e-15'\n\n  line_search = 'none'\n  nl_abs_tol = 1e-7\n  nl_rel_tol = 1e-6\n\n  [TimeIntegrator]\n    type = NewmarkBeta\n    beta = ${beta}\n    gamma = ${gamma}\n  []\n[]\n\n[Outputs]\n  [exo]\n    type = Exodus\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  file_base = \"ad\"\n  print_linear_residuals = false\n[]\n\n\nFor case 2: using the action below to replace the Kernel and \"Master\" action will also cause convergence problems that don't exist with the nonAD version.\n[Modules/TensorMechanics/DynamicMaster]\n  [all]\n    strain = FINITE\n    decomposition_method = EigenSolution #Using TaylorExpansion Works\n    add_variables = true\n    use_automatic_differentiation = true\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24850",
          "updatedAt": "2023-07-05T17:26:58Z",
          "publishedAt": "2023-06-28T18:18:59Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "For 1, is the density scaling important in IntertialForce? and does it depend on nonlinear variables? It s always retrieved as non AD in the kernel.\nThere's also a time derivative that is always non AD in that kernel (even for the AD version), could be worth investigating",
                  "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6311016",
                  "updatedAt": "2023-06-29T03:49:35Z",
                  "publishedAt": "2023-06-29T03:49:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "ya the _u_dotdot_factor is non-AD so the AD version of this kernel misses all the Jacobians, I think. @dschwen converted this kernel to AD I believe.",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6329325",
                          "updatedAt": "2023-06-30T20:53:58Z",
                          "publishedAt": "2023-06-30T20:53:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Thanks for reporting @maxnezdyur  I ll create an issue",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6339038",
                          "updatedAt": "2023-07-02T23:36:22Z",
                          "publishedAt": "2023-07-02T23:36:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Perfect! For issue 2: without a damper I get the below convergence behavior,\nTime Step 1, time = 0.1, dt = 0.1\n 0 Nonlinear |R| = 4.924429e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 1 Nonlinear |R| = 1.008616e+04\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 2 Nonlinear |R| = 1.297856e+05\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n[0] ../src/fe/fe_map.C, line 2052, compiled May 16 2023 at 01:11:16\nWARNING:  inverse_map of physical point (x,y,z)=(-1.80029, -0.171967,        0) is not on element.\n  Elem Information\n   id()=30, unique_id()=446, subdomain_id()=0, processor_id()=0\n   type()=QUAD4\n   dim()=2\n\nbut just using damper we get the below convergence behaviour. I don't know if the AD version is creating a \"bad\" Jacobain on the first iteration that is just causing too large of a skewed element. By \"bad\" I think if there is some non-smooth areas then AD can mess up and that's what I think could be happening here. I am not well-versed in AD so take with a grain of salt!\nTime Step 1, time = 0.1, dt = 0.1\n 0 Nonlinear |R| = 4.924429e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n Damping factor: 0.0209218\n 1 Nonlinear |R| = 1.792842e+02\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n Damping factor: 0.236394\n 2 Nonlinear |R| = 1.363874e+02\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n Damping factor: 0.373013\n 3 Nonlinear |R| = 8.525810e+01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n Damping factor: 0.482742\n 4 Nonlinear |R| = 4.425347e+01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n Damping factor: 0.618914\n 5 Nonlinear |R| = 1.704042e+01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 6 Nonlinear |R| = 3.041272e-01\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 7 Nonlinear |R| = 3.687925e-05\n  Linear solve converged due to CONVERGED_RTOL iterations 1\n 8 Nonlinear |R| = 9.387999e-11\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 8\n Solve Converged!\n\nAgain as before, nonAD converges(5 NL iterations).",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6344921",
                          "updatedAt": "2023-07-03T14:44:00Z",
                          "publishedAt": "2023-07-03T14:43:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think this is the same problem.\nThe kernel should not be very hard to fix tbh",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6353331",
                          "updatedAt": "2023-07-04T12:46:50Z",
                          "publishedAt": "2023-07-04T12:46:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "@GiudGiud Just to confirm before I forget about this issue, Issue 2 occurs when running\n[Modules/TensorMechanics/Master]\n  [all]\n    strain = FINITE\n    decomposition_method = EigenSolution # Using TaylorExpansion Works\n    add_variables = true\n    use_automatic_differentiation = true\n  []\n[]\n\n[Kernels]\n    [inertia_x]\n      type = InertialForce\n      variable = disp_x\n    []\n    [inertia_y]\n      type = InertialForce\n      variable = disp_y\n  []\n[]\n\nwhich uses no ADInterialForce. Instead just uses AD stress divergence with the EigenSolution decomposition method. I am not sure if this is the same problem.",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6354183",
                          "updatedAt": "2023-07-04T14:14:22Z",
                          "publishedAt": "2023-07-04T14:12:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh my bad then it must be a separate issue",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6358388",
                          "updatedAt": "2023-07-05T03:57:51Z",
                          "publishedAt": "2023-07-05T03:57:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@hugary1995 any thoughts on this one?",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6358423",
                          "updatedAt": "2023-07-05T04:05:49Z",
                          "publishedAt": "2023-07-05T04:05:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I'm a bit confused. You had AD/non-AD, damper/no-damper, EigenSolution/TaylorExpansion. I lost track of which combination works and which doesn't.",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6362903",
                          "updatedAt": "2023-07-05T13:25:10Z",
                          "publishedAt": "2023-07-05T13:25:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "For this issue we can actually ignore the InterialForce, problem is still there. So for the static problem, the table below shows the combinations and whether they converge.\n\n\n\nCombination\nConverges\n\n\n\n\nAD/ EigenSolution/No Damper\nNo\n\n\nAD/ EigenSolution/Damper\nYes\n\n\nAD/TaylorExpansion\nYes\n\n\nnon-AD/ All Cases\nYes\n\n\n\nOnly ran the damper on the AD/ EigenSolution case to show that the problem can converge.",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6363210",
                          "updatedAt": "2023-07-05T13:50:09Z",
                          "publishedAt": "2023-07-05T13:49:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "uhhh so this is not a dynamics issue per se, is it? I assume by \"AD\" and \"non-AD\" you are referring to the AD/non-AD constitutive models, am I right?",
                          "url": "https://github.com/idaholab/moose/discussions/24850#discussioncomment-6363393",
                          "updatedAt": "2023-07-05T14:07:14Z",
                          "publishedAt": "2023-07-05T14:07:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to install a specified version of MOOSE?",
          "author": {
            "login": "LuMeHa12138"
          },
          "bodyText": "Reason\nDue to certain special reasons, I would like to install a specific version of MOOSE, especially the old version (with modified InputParameter template).\nI searched some issues and found the Issue #21548.\nThe questioner attempted to use the git command to return the version but encountered some problems. I sent a private message to him, and he said that he still hasn't solved the problem.\nAnd I also found there are several versions in the Release Page, but I can not find some install tutorials about them.\nSo I still have not a good idea about it, and I hope the official can provide relevant tutorials for the users, please!\nIf this type of tutorial needs to be tailored to different versions, please prioritize providing some guidance for that version snapshot-20-10-27.\nThank you!!!",
          "url": "https://github.com/idaholab/moose/discussions/24895",
          "updatedAt": "2023-08-07T09:59:11Z",
          "publishedAt": "2023-07-03T16:18:39Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nA discussions post is more appropriate here, I converted it.\nYou can do this easily by checking out an earlier commit with git checkout <commit_hash>\nDo you have a link to this branch? snapshot-20-10-27\nI can advise you on the commit from there.\nNote that we do not recommend doing this at all. You will miss out on years of bug fixes.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6349166",
                  "updatedAt": "2023-07-04T04:00:50Z",
                  "publishedAt": "2023-07-04T04:00:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "LuMeHa12138"
                          },
                          "bodyText": "Thank you for your answer. I took your advice. So I took these steps as follow:\n\n(moose_old) lmh@ubuntu:~/projects$ git clone https://github.com/idaholab/moose.git\ncd moose && git checkout b57161c\ngit clean -nxfd && git clean -xfd && scripts/update_and_rebuild_libmesh.sh\nIt prompts that  \u201cIf you did not run the update_and_rebuild_petsc.sh script yet, please run it before building libMesh\u201d\nSo I took the next.\nscripts/update_and_rebuild_petsc.sh\nIt prompts that \"python3 is missing distutils.sysconfig, Skipping...\nError! Could not locate Python (with distutils.sysconfig)! Please install and have python3, python, or python2 (with distutils.sysconfig) in PATH.\"\nSo I took the next\nsudo apt install python3-pip && sudo pip install disutils\nscripts/update_and_rebuild_petsc.sh\nIn the end, it prompts a configure mistake about petsc. I put this log file here.\nCould you please give me some guidance about it?\n\nconfigure.log",
                          "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6351730",
                          "updatedAt": "2023-07-04T09:47:41Z",
                          "publishedAt": "2023-07-04T09:47:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "'InShell' object has no attribute 'isAlive'  File \"/home/lmh/projects/moose/petsc/config/configure.py\", line 451, in petsc_configure\n\nSee this post\njupyter-vim/jupyter-vim#51\nyou ll need to go rename this call from isAlive to is_alive.\nAnd this is the first of many issues you'll hit by using an old version\nwhat's the issue with using the current MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6353299",
                          "updatedAt": "2023-07-04T12:42:43Z",
                          "publishedAt": "2023-07-04T12:42:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "It's entirely possible GCC 11.3.0 (released Apr 2022) is too new a compiler to build this hash of MOOSE. I know this, as we have ran into GCC 11.x issues in the past (a year or so ago).\nUbuntu 22.04 LTS comes with 11.2 (I am not willing to install a non-LTS version, so I will have to stick with 22.04). I am assuming you are using Ubuntu 22.10 or 23.04 (non-LTS versions) (reference: https://wiki.ubuntu.com/Releases)? I am only curious if we have to delve into this even more.\nI am making points about the version of GCC you are using due to the non-presence of mpicc as described below. I am not sure if you are wanting to use Conda, or your system compilers?\nWhile setting up my environment, I realized the following occurred in your log:\n\u276f cat configure.log | grep mpicc\nChecking for program /home/lmh/projects/moose/python/peacock/mpicc...not found\nChecking for program /home/lmh/miniconda3/envs/moose_old/bin/mpicc...not found\nChecking for program /home/lmh/miniconda3/condabin/mpicc...not found\nChecking for program /usr/local/sbin/mpicc...not found\nChecking for program /usr/local/bin/mpicc...not found\nChecking for program /usr/sbin/mpicc...not found\nChecking for program /usr/bin/mpicc...not found\nChecking for program /sbin/mpicc...not found\nChecking for program /bin/mpicc...not found\nChecking for program /usr/games/mpicc...not found\nChecking for program /usr/local/games/mpicc...not found\nChecking for program /snap/bin/mpicc...not found\nChecking for program /snap/bin/mpicc...not found\nChecking for program /home/lmh/projects/moose/petsc/lib/petsc/bin/win32fe/mpicc...not found\n  Unable to find programs ['mpicc'] providing listing of each search directory to help debug\n\nMy concerns:\nChecking for program /home/lmh/miniconda3/envs/moose_old/bin/mpicc...not found\n\nA moose_old Conda environment still lingers among your PATH. Which in and of itself is odd, that 1, it exists when it possibly should not? And 2, should exist and does not contain an mpicc binary. Maybe this directory has been deleted?\nI think the best path forward, is to install the oldest possible moose-mpich moose-tools package we have, and go from there.\nconda config --add channels https://conda.software.inl.gov/archive             # An older channel we do not advertise\nmamba create -n moose_old moose-tools=2021.07.14 moose-mpich python=3.7 cmake  # overwrite `moose_old`\nmamba activate old_mpich\nexport METHODS=opt METHOD=opt MOOSE_JOBS=6                                     #  to speed up the build process\nThis above will install an environment which should work with that older version of PETSc you are trying to build...\nBut as @GiudGiud asked, the absolute best option is to know why you cannot use the latest version of MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6364151",
                          "updatedAt": "2023-07-05T15:14:34Z",
                          "publishedAt": "2023-07-05T15:12:21Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "LuMeHa12138"
                          },
                          "bodyText": "Thank you for your reply.\nI have tried to complete the installation of this version of Moose in the past few days.\nI would like to share the specific process.\n\nI installed Python 3.7.6 in the Conda environment(moose_ old ), supplemented with gfortran, bison, and flex.\nI ran the script to rebuild petsc using the following command:\n./scripts/update_and_rebuild_petsc.sh -- download-mpich=1-- download-cmake=1-- with-fc-dir=/usr/bin/gfortran\nI ran the script to rebuild libmesh:\n./scripts/update_and_rebuild_ libmesh.sh\n\nEverything runs well, although there are too many moose tests failed to trigger a warning. I still successfully compiled my previous MooseApp in this version of Moose environment as expected and ran through the example to obtain similar results.\nThe following are my specific moose environment version for reference.\nFramework Information:\nMOOSE Version:    git commit b57161c on 2020-10-24\nLibMesh Version:   f33331f6ebb0f31dff7526106268ca0c4300049e\nPETSc Version:      3.13.3\nSLEPc Version:      3.13.3\nNext, I will answer your question (why not use the latest moose). I have been developing my own MooseApp in the old version of Moose environment before. Now I want to install the same version of the environment in a new location to run my MooseApp.\nIn the end, I am curious about some methods you mentioned for installing older versions. Can you provide some pages for placing relevant content on the Moose official website or open up those old installation tutorial pages for reference.\nThank you\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6365104",
                          "updatedAt": "2023-07-05T16:37:17Z",
                          "publishedAt": "2023-07-05T16:37:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "./scripts/update_and_rebuild_petsc.sh -- download-mpich=1\n\nworks for PETSc, but this will not get MPICH for anything except PETSc. You need to provide a system-wide version of MPI instead, so MPI becomes available to libMesh, MOOSE, etc.\nEverything will build fine, because libMesh does not require MPI in order to be built. While actually running MOOSE does. So, the errors you are getting when running tests (running moose), are expected.\nIronically, later versions of these scripts your are running have sanity checks in them to alert you, in the event you try to build libMesh without MPI.\nCreating instructional pages on how to use older versions of MOOSE is a good idea, but would be problematic. We can only go back so far, and unfortunately in your case, you're going back far enough where we were just beginning to use Conda. We made a lot of mistakes creating those packages back then. So we moved them out from the public channel, into a separate 'archive' channel. That is: they cannot coexist in the same public channel (https://conda.software.inl.gov/public). Doing so causes all sorts of conflicting headaches. Basically what I am trying to say is, even if we created instructions on how to use older versions of MOOSE, the version you want would be beyond the scope of what we'd support showing folks how to do.\nFor example, in your case, you need to install a version of Python that has reached end of life (https://endoflife.date/python 3.7 is now EOL as of the end of June). When this happens, some maintainers will go so far as to physically remove packages from Conda-Forge (something we cannot prevent).\nGoing through the instructions I wrote earlier, it would seem all the necessary Conda packages are still available, and everything builds fine for me:\n(testing) [ubuntu-22][~/projects/3rd/moose/test]> ./moose_test-opt -h\nSLEPc Release Version 3.13.3, unknown\n       The SLEPc Team\n    slepc-maint@upv.es\n https://slepc.upv.es\nSee docs/manual.html for help.\n<trimmed>\n\n\n(testing) [ubuntu-22][~/projects/3rd/moose/test]> git rev-parse HEAD\nb57161c312e90a33cf73fcf5f8ce9c0191af6155\n\n\n(testing) [ubuntu-22][~/projects/3rd/moose/test]> mamba list | grep moose\nmoose-mpich               3.3.2                   build_7    https://conda.software.inl.gov/archive\nmoose-tools               2021.07.14       py37hedbaeeb_0    https://conda.software.inl.gov/archive\n\n\n(testing) [ubuntu-22][~/projects/3rd/moose/test]> ./run_tests -j 12\ndgkernels/2d_diffusion_dg.no_additional_rms_distributed ........................ [MESH_MODE!=DISTRIBUTED] SKIP\ndgkernels/2d_diffusion_dg.proper_ghosting_with_action_serial_distributed ....... [MESH_MODE!=DISTRIBUTED] SKIP\ndgkernels/2d_diffusion_dg.proper_ghosting_with_action_parallel_distributed ..... [MESH_MODE!=DISTRIBUTED] SKIP\n\n<trimmed>\n\nmaterials/derivative_material_interface.ad_mutliblock ..................................................... OK\nmaterials/derivative_material_interface.ad_warn ........................................................... OK\n--------------------------------------------------------------------------------------------------------------\nRan 2395 tests in 184.5 seconds.\n2395 passed, 58 skipped, 0 pending, 0 failed\n(testing) [ubuntu-22][~/projects/3rd/moose/test]>",
                          "url": "https://github.com/idaholab/moose/discussions/24895#discussioncomment-6365394",
                          "updatedAt": "2023-07-05T17:02:51Z",
                          "publishedAt": "2023-07-05T17:02:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to define different mesh resolutions",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nI need to apply to different mesh resolutions to the domain in the pictures. I believe moose has this already but I could not find an example.  Could someone give some direction?",
          "url": "https://github.com/idaholab/moose/discussions/21976",
          "updatedAt": "2023-07-05T15:27:54Z",
          "publishedAt": "2022-08-30T22:09:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to either use adaptivity or the RefineBlockGenerator.\nhttps://mooseframework.inl.gov/source/meshgenerators/RefineBlockGenerator.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21976#discussioncomment-3513198",
                  "updatedAt": "2022-08-30T23:39:15Z",
                  "publishedAt": "2022-08-30T23:39:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Adaptivity documentation is here\nhttps://mooseframework.inl.gov/syntax/Adaptivity/index.html\nyou ll want to set the marker uniformly by blocks",
                          "url": "https://github.com/idaholab/moose/discussions/21976#discussioncomment-3513203",
                          "updatedAt": "2022-08-30T23:40:19Z",
                          "publishedAt": "2022-08-30T23:40:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Hello\nYou ll want to either use adaptivity or the RefineBlockGenerator. https://mooseframework.inl.gov/source/meshgenerators/RefineBlockGenerator.html\nGuillaume\n\nThanks, @GiudGiud , that helps.",
                          "url": "https://github.com/idaholab/moose/discussions/21976#discussioncomment-3519379",
                          "updatedAt": "2022-08-31T16:06:35Z",
                          "publishedAt": "2022-08-31T16:06:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "Any example combining  SubdomainBoundingBoxGenerator and RefineBlockGenerator inside a GeneratedMeshGenerator.\nIt never worked for me !\nregrads,",
                          "url": "https://github.com/idaholab/moose/discussions/21976#discussioncomment-6364286",
                          "updatedAt": "2023-07-05T15:15:28Z",
                          "publishedAt": "2023-07-05T15:15:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "need a MWE if something doesn't work",
                          "url": "https://github.com/idaholab/moose/discussions/21976#discussioncomment-6364433",
                          "updatedAt": "2023-07-05T15:27:55Z",
                          "publishedAt": "2023-07-05T15:27:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Slow calculation of Jacobian and Residuals in a multi-element tensile test",
          "author": {
            "login": "miguelespadero"
          },
          "bodyText": "Hi everyone,\nI am simulating a simple tensile test in a cube. I am using a UMAT where a plastic model is implemented which depends on the  microstructure evolution defined by different functions. To read the initial particle distribution and the thermal parameters I have implemented the UEXTERNALDB subroutine as well.\nMy first approach was to use only one element and compare the results and running times with the same ABAQUS model. The MOOSE simulation took less time to finish  and the results were similar. However, I tried to built the cube with 125 elements and now, the MOOSE model takes hours to finish while ABAQUS only needs some minutes. The problems seem to be in some increments where the simulation takes ages to calculate the Jacobian and the residuals as the outputs are:\nComputing Jacobian...\nComputing initial Residuals....\nHow could it be this massive difference in times between one single element and 125 elements in MOOSE while ABAQUS can manage it much faster? Is there any way to optimise the building of the Jacobian and the calculation of the Residuals?\nAlso, I have tried to run the code with different solver types but there is not a significant difference in time.\nThis is the current input file that I am running:\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 3\n    xmin = -0.5\n    xmax = 0.5\n    ymin = -0.5\n    ymax = 0.5\n    zmin = -0.5\n    zmax = 0.5\n    nx = 5\n    ny = 5\n    nz = 5\n  []\n[]\n\n[Functions]\n  [top_pull]\n    type = ParsedFunction\n    expression = 0.1*t\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    add_variables = true\n    strain = SMALL\n    incremental = true\n    generate_output = 'stress_xx stress_yy stress_zz stress_xy stress_xz stress_yz strain_xx strain_yy strain_zz strain_xy strain_xz strain_yz'\n\n  []\n[]\n\n[BCs]\n  [y_pull_function]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = top\n    function = top_pull\n  []\n  [x_bot]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0.0\n  []\n  [y_bot]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0.0\n  []\n  [z_bot]\n    type = DirichletBC\n    variable = disp_z\n    boundary = front\n    value = 0.0\n  []\n[]\n\n[Materials]\n  # 1. active for umat calculation\n  [umat]\n    type = AbaqusUMATStress\n    constant_properties = '210000 0.3 7e10'\n    plugin = '../plugins/plastic_MESC_UEXTERNALDB'\n    num_state_vars = 300\n    use_one_based_indexing = true\n  []\n  [density]\n    type = GenericConstantMaterial\n    prop_names = 'density'\n    prop_values = '7.9e-9'\n  []\n[]\n\n[UserObjects]\n  [uexternaldb]\n    type = AbaqusUExternalDB\n    plugin = '../plugins/plastic_MESC_UEXTERNALDB'\n    execute_on = 'INITIAL TIMESTEP_END TIMESTEP_BEGIN FINAL'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options = '-snes_ksp_ew'\n  petsc_options_iname = '-ksp_gmres_restart'\n  petsc_options_value = '101'\n\n  line_search = 'none'\n\n  l_max_its = 100\n  nl_max_its = 100\n  nl_abs_tol = 5e-3\n  l_tol = 5e-3\n  start_time = 0.0\n  end_time = 0.5\n  num_steps = 1000\n  dt = 0.001\n[]\n\n\n\n[Outputs]\n  exodus = true\n[]\n\nCheers,\nMiguel",
          "url": "https://github.com/idaholab/moose/discussions/24859",
          "updatedAt": "2023-07-05T13:24:59Z",
          "publishedAt": "2023-06-29T10:18:39Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you turn on the perf_graph in the Outputs block (perf_graph = true) and report back?\nYou may need to manage its parameters to get something more informative\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6316344",
                  "updatedAt": "2023-06-29T14:49:27Z",
                  "publishedAt": "2023-06-29T14:49:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "miguelespadero"
                          },
                          "bodyText": "Hi Guillaume,\nThank you so much for your suggestion. I included the command and this is the output:\n\nIt seems that it takes a long time to calculate the residuals. Do you have any advice to improve the calculations?\nCheers,\nMiguel",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6325931",
                          "updatedAt": "2023-06-30T13:20:13Z",
                          "publishedAt": "2023-06-30T13:20:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If your Jacobian is correct you could switch from pjfnk to Newton s method.\nsimilarly you should try to define a good preconditioner to limit the number of linear iterations\nDo you get any extra performance from running with a second processor in parallel?",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6326030",
                          "updatedAt": "2023-06-30T13:31:33Z",
                          "publishedAt": "2023-06-30T13:31:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "miguelespadero"
                          },
                          "bodyText": "I tried Newton's method already and I did not observe any significant improvement but I have not looked at the preconditioner and likely it would help so I will do it and let you know how it works.\nIn terms of parallelisation, I have run the code using 1 cpu and 4 cpus and I see an important different of times but still very far from the times needed in ABAQUS.\nThanks again for the help.",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6326086",
                          "updatedAt": "2023-06-30T13:37:41Z",
                          "publishedAt": "2023-06-30T13:37:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you attach the full log (including linear residuals, turn this on in outputs block) please",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6326524",
                          "updatedAt": "2023-06-30T14:21:12Z",
                          "publishedAt": "2023-06-30T14:21:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "miguelespadero"
                          },
                          "bodyText": "Here you have a couple of steps with the residuals. The step 20 is pretty fast and the problem starts in step 21 as you can see, it takes longer times to calculate the residuals. I could put all the steps if you want but the total number is 500.\nTime Step 20, time = 0.02, dt = 0.001\n 0 Nonlinear |R| = 2.419514e+01\n      0 Linear |R| = 2.419514e+01\n      1 Linear |R| = 7.562830e+00\n      2 Linear |R| = 4.468782e+00\n 1 Nonlinear |R| = 4.467567e+00\n      0 Linear |R| = 4.467567e+00\n      1 Linear |R| = 2.911796e+00\n      2 Linear |R| = 1.390537e+00\n      3 Linear |R| = 8.394318e-01\n      4 Linear |R| = 5.671264e-01\n 2 Nonlinear |R| = 5.672205e-01\n      0 Linear |R| = 5.672205e-01\n      1 Linear |R| = 4.231169e-01\n      2 Linear |R| = 2.846194e-01\n      3 Linear |R| = 1.641943e-01\n      4 Linear |R| = 1.081654e-01\n      5 Linear |R| = 5.000838e-02\n      6 Linear |R| = 3.955218e-02\n      7 Linear |R| = 3.289030e-02\n      8 Linear |R| = 2.292007e-02\n      9 Linear |R| = 1.560080e-02\n 3 Nonlinear |R| = 1.559954e-02\n      0 Linear |R| = 1.559954e-02\n      1 Linear |R| = 1.257071e-02\n      2 Linear |R| = 8.611914e-03\n      3 Linear |R| = 7.162845e-03\n      4 Linear |R| = 5.899635e-03\n      5 Linear |R| = 3.942903e-03\n      6 Linear |R| = 2.619013e-03\n      7 Linear |R| = 1.485168e-03\n      8 Linear |R| = 9.618016e-04\n      9 Linear |R| = 6.850465e-04\n     10 Linear |R| = 3.664634e-04\n     11 Linear |R| = 2.042341e-04\n     12 Linear |R| = 1.131079e-04\n     13 Linear |R| = 6.866153e-05\n     14 Linear |R| = 3.672291e-05\n 4 Nonlinear |R| = 3.673377e-05\n Solve Converged!\n\nTime Step 21, time = 0.021, dt = 0.001\nCurrently Executing\n    Computing Residual............                                                       [ 67.82 s] [   66 MB]\n 0 Nonlinear |R| = 2.373507e+01\n    Computing Jacobian............                                                       [ 66.29 s] [   66 MB]\n      0 Linear |R| = 2.373507e+01\n    Computing Residual............                                                       [ 65.51 s] [   66 MB]\n      1 Linear |R| = 8.485281e+00\n    Computing Residual............                                                       [ 65.31 s] [   66 MB]\n      2 Linear |R| = 5.287884e+00\n    Computing Residual........                                                           [ 46.78 s] [   66 MB]\n 1 Nonlinear |R| = 5.264824e+00\n    Computing Jacobian........                                                           [ 45.83 s] [   66 MB]\n      0 Linear |R| = 5.264824e+00\n    Computing Residual........                                                           [ 46.04 s] [   66 MB]\n      1 Linear |R| = 2.694732e+00\n    Computing Residual........                                                           [ 46.35 s] [   66 MB]\n      2 Linear |R| = 1.719698e+00\n    Computing Residual........                                                           [ 45.88 s] [   66 MB]\n      3 Linear |R| = 8.336064e-01\n    Computing Residual........                                                           [ 46.04 s] [   66 MB]\n      4 Linear |R| = 5.542710e-01\n    Computing Residual.....                                                              [ 31.81 s] [   66 MB]\n 2 Nonlinear |R| = 5.542813e-01\n    Computing Jacobian.....                                                              [ 32.71 s] [   66 MB]\n      0 Linear |R| = 5.542813e-01\n    Computing Residual.....                                                              [ 32.70 s] [   66 MB]\n      1 Linear |R| = 4.237759e-01\n    Computing Residual.....                                                              [ 32.05 s] [   66 MB]\n      2 Linear |R| = 2.560537e-01\n    Computing Residual.....                                                              [ 34.55 s] [   66 MB]\n      3 Linear |R| = 1.647004e-01\n    Computing Residual..........                                                         [ 55.62 s] [   66 MB]\n      4 Linear |R| = 9.388096e-02\n    Computing Residual..........                                                         [ 58.44 s] [   66 MB]\n      5 Linear |R| = 4.825423e-02\n    Computing Residual..........                                                         [ 57.71 s] [   66 MB]\n      6 Linear |R| = 3.967171e-02\n    Computing Residual.................                                                  [ 94.62 s] [   66 MB]\n      7 Linear |R| = 3.105722e-02\n    Computing Residual................                                                   [ 89.93 s] [   66 MB]\n      8 Linear |R| = 2.252641e-02\n    Computing Residual...........                                                        [ 61.94 s] [   66 MB]\n      9 Linear |R| = 1.492767e-02\n    Computing Residual.........                                                          [ 54.38 s] [   66 MB]\n     10 Linear |R| = 9.015453e-03\n    Computing Residual..........                                                         [ 56.75 s] [   66 MB]\n 3 Nonlinear |R| = 9.013840e-03\n    Computing Jacobian..........                                                         [ 59.95 s] [   66 MB]\n      0 Linear |R| = 9.013840e-03\n    Computing Residual...........                                                        [ 60.15 s] [   66 MB]\n      1 Linear |R| = 6.953443e-03\n    Computing Residual..........                                                         [ 56.74 s] [   66 MB]\n      2 Linear |R| = 5.287121e-03\n    Computing Residual.........                                                          [ 54.36 s] [   66 MB]\n      3 Linear |R| = 3.937276e-03\n    Computing Residual.........                                                          [ 54.76 s] [   66 MB]\n      4 Linear |R| = 3.086377e-03\n    Computing Residual..........                                                         [ 55.09 s] [   66 MB]\n      5 Linear |R| = 2.247253e-03\n    Computing Residual..........                                                         [ 59.77 s] [   66 MB]\n      6 Linear |R| = 1.485827e-03\n    Computing Residual...........                                                        [ 60.09 s] [   66 MB]\n      7 Linear |R| = 8.922686e-04\n    Computing Residual...........                                                        [ 64.81 s] [   66 MB]\n      8 Linear |R| = 6.142020e-04\n    Computing Residual.................                                                  [ 92.62 s] [   66 MB]\n      9 Linear |R| = 4.753922e-04\n    Computing Residual............                                                       [ 69.45 s] [   66 MB]\n     10 Linear |R| = 3.086371e-04\n    Computing Residual...........                                                        [ 62.38 s] [   66 MB]\n     11 Linear |R| = 1.946717e-04\n    Computing Residual...........                                                        [ 61.91 s] [   66 MB]\n     12 Linear |R| = 1.227705e-04\n    Computing Residual..........                                                         [ 57.26 s] [   66 MB]\n     13 Linear |R| = 7.601391e-05\n    Computing Residual.........                                                          [ 55.22 s] [   66 MB]\n     14 Linear |R| = 4.976311e-05\n    Computing Residual..........                                                         [ 55.95 s] [   66 MB]\n     15 Linear |R| = 3.393169e-05\n    Computing Residual...........                                                        [ 61.84 s] [   66 MB]\n     16 Linear |R| = 2.443343e-05\n    Computing Residual...........                                                        [ 62.30 s] [   66 MB]\n     17 Linear |R| = 1.498240e-05\n    Computing Residual..........                                                         [ 59.86 s] [   66 MB]\n     18 Linear |R| = 8.638496e-06\n    Computing Residual...........                                                        [ 61.04 s] [   66 MB]\n 4 Nonlinear |R| = 8.637881e-06\n Solve Converged!\n  Finished Solving",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6326596",
                          "updatedAt": "2023-07-02T23:38:59Z",
                          "publishedAt": "2023-06-30T14:29:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You could try LU preconditioning. Since your system is small it should be fast to form",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6327042",
                          "updatedAt": "2023-06-30T15:25:11Z",
                          "publishedAt": "2023-06-30T15:25:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'm suggesting this because I see a lot of linear iterations, and if the Jacobian is well formed, LU will only take a single iteration to solve the linear problem.\nYou ll want to enable this with:\npetsc_options_iname = '-pc_type'\npetsc_options_value = 'lu'\n\n(or something close, check the syntax)",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6339046",
                          "updatedAt": "2023-07-02T23:40:56Z",
                          "publishedAt": "2023-07-02T23:40:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "miguelespadero"
                  },
                  "bodyText": "I have removed the preconditions line that I had before in my line and I added the commands you suggested. Now, it runs much slower than before, the residuals are very large and it only can do a couple of steps in some hours. This is the input file modified as you suggested:\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 3\n    xmin = -0.5\n    xmax = 0.5\n    ymin = -0.5\n    ymax = 0.5\n    zmin = -0.5\n    zmax = 0.5\n    nx = 5\n    ny = 5\n    nz = 5\n  []\n[]\n\n[Functions]\n  [top_pull]\n    type = ParsedFunction\n    expression = 0.1*t\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    add_variables = true\n    strain = SMALL\n    incremental = true\n    generate_output = 'stress_xx stress_yy stress_zz stress_xy stress_xz stress_yz strain_xx strain_yy strain_zz strain_xy strain_xz strain_yz'\n\n  []\n[]\n\n[BCs]\n  [y_pull_function]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = top\n    function = top_pull\n  []\n  [x_bot]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0.0\n  []\n  [y_bot]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0.0\n  []\n  [z_bot]\n    type = DirichletBC\n    variable = disp_z\n    boundary = front\n    value = 0.0\n  []\n[]\n\n[Materials]\n  # 1. active for umat calculation\n  [umat]\n    type = AbaqusUMATStress\n    constant_properties = '210000 0.3 7e10'\n    plugin = '../plugins/plastic_MESC_UEXTERNALDB'\n    num_state_vars = 300\n    use_one_based_indexing = true\n  []\n  [density]\n    type = GenericConstantMaterial\n    prop_names = 'density'\n    prop_values = '7.9e-9'\n  []\n[]\n\n[UserObjects]\n  [uexternaldb]\n    type = AbaqusUExternalDB\n    plugin = '../plugins/plastic_MESC_UEXTERNALDB'\n    execute_on = 'INITIAL TIMESTEP_END TIMESTEP_BEGIN FINAL'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n\n  line_search = 'none'\n\n  l_max_its = 100\n  nl_max_its = 100\n  nl_abs_tol = 5e-3\n  l_tol = 5e-3\n  start_time = 0.0\n  end_time = 0.5\n  num_steps = 1000\n  dt = 0.001\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    petsc_options_iname = '-pc_type'\n    petsc_options_value = 'lu'\n  []\n[]\n\n\n\n[Outputs]\n  exodus = true\n  perf_graph = true\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6343080",
                  "updatedAt": "2023-07-03T13:48:34Z",
                  "publishedAt": "2023-07-03T10:59:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What does the convergence history look like now?\nI'd expect to see only one linear iteration per nonlinear iteration",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6344427",
                          "updatedAt": "2023-07-03T13:48:59Z",
                          "publishedAt": "2023-07-03T13:48:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "miguelespadero"
                          },
                          "bodyText": "It failed in step two because it could not converge. Maybe I made some mistake because there are plenty of linear iterations per nonlinear ones.  Besides, the residuals are much bigger than before as you can see:\nTime Step 2, time = 4.39453e-06, dt = 4.88281e-07\n 0 Nonlinear |R| = 2.853797e+06\n      0 Linear |R| = 2.853797e+06\n      1 Linear |R| = 2.516746e+06\n      2 Linear |R| = 2.339958e+06\n      3 Linear |R| = 2.293868e+06\n      4 Linear |R| = 2.272957e+06\n      5 Linear |R| = 2.249006e+06\n      6 Linear |R| = 2.247475e+06\n      7 Linear |R| = 2.225163e+06\n      8 Linear |R| = 2.174825e+06\n      9 Linear |R| = 2.078817e+06\n     10 Linear |R| = 2.018119e+06\n     11 Linear |R| = 1.995916e+06\n     12 Linear |R| = 1.953789e+06\n     13 Linear |R| = 1.776226e+06\n     14 Linear |R| = 1.644113e+06\n     15 Linear |R| = 1.580233e+06\n     16 Linear |R| = 1.547447e+06\n     17 Linear |R| = 1.528984e+06\n     18 Linear |R| = 1.513439e+06\n     19 Linear |R| = 1.444174e+06\n     20 Linear |R| = 1.177479e+06\n     21 Linear |R| = 7.030795e+05\n     22 Linear |R| = 3.365340e+05\n     23 Linear |R| = 1.515652e+05\n     24 Linear |R| = 7.961616e+04\n     25 Linear |R| = 3.615647e+04\n     26 Linear |R| = 1.648018e+04\n     27 Linear |R| = 6.378392e+03\n 1 Nonlinear |R| = 2.235826e+06\n      0 Linear |R| = 2.235826e+06\n      1 Linear |R| = 2.067793e+06\n      2 Linear |R| = 2.067785e+06\n      3 Linear |R| = 2.039051e+06\n      4 Linear |R| = 1.949775e+06\n      5 Linear |R| = 1.807638e+06\n      6 Linear |R| = 1.709072e+06\n      7 Linear |R| = 1.611147e+06\n      8 Linear |R| = 1.586622e+06\n      9 Linear |R| = 1.581832e+06\n     10 Linear |R| = 1.560546e+06\n     11 Linear |R| = 1.560546e+06\n     12 Linear |R| = 1.549474e+06\n     13 Linear |R| = 1.543415e+06\n     14 Linear |R| = 1.543349e+06\n     15 Linear |R| = 1.540325e+06\n     16 Linear |R| = 1.538806e+06\n     17 Linear |R| = 1.537874e+06\n     18 Linear |R| = 1.534492e+06\n     19 Linear |R| = 1.529624e+06\n     20 Linear |R| = 1.528245e+06\n     21 Linear |R| = 1.523371e+06\n     22 Linear |R| = 1.518437e+06\n     23 Linear |R| = 1.509081e+06\n     24 Linear |R| = 1.506102e+06\n     25 Linear |R| = 1.495432e+06\n     26 Linear |R| = 1.490988e+06\n     27 Linear |R| = 1.463427e+06\n     28 Linear |R| = 1.433129e+06\n     29 Linear |R| = 1.344752e+06\n  Linear solve did not converge due to DIVERGED_BREAKDOWN iterations 30",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6347889",
                          "updatedAt": "2023-07-05T04:07:23Z",
                          "publishedAt": "2023-07-03T22:46:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This does not look right indeed.\nDid you build the kernels and BCs yourself or did you use premade ones?",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6348299",
                          "updatedAt": "2023-07-04T00:43:54Z",
                          "publishedAt": "2023-07-04T00:43:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "miguelespadero"
                          },
                          "bodyText": "I used premade ones as I am a beginner in MOOSE. I think they are working fine because when I do the simulation with only one element it works fine and even faster than ABAQUS. I do not know, maybe I can try another number of elements or something to see if it is only a problem with this element configuration.",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6350664",
                          "updatedAt": "2023-07-04T07:54:08Z",
                          "publishedAt": "2023-07-04T07:54:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So to troubleshoot failed solves, we have this general page.\nIn particular, this non-convergence with LU makes me think the Jacobian is wrong / the numerical problem is ill-posed\nhttps://mooseframework.inl.gov/application_usage/failed_solves.html",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6358427",
                          "updatedAt": "2023-07-05T04:07:07Z",
                          "publishedAt": "2023-07-05T04:07:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh can you try to either use full = true in the Preconditioning\nOR\nswitch to Newton's method?\nWe may be trying to solve with only the diagonal of the Jacobian here",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6358436",
                          "updatedAt": "2023-07-05T04:08:41Z",
                          "publishedAt": "2023-07-05T04:08:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "miguelespadero"
                  },
                  "bodyText": "I have switched to Newton's method and now it is quicker than the latest attempt and it does only one linear iteration but still failing in the second step.\nTime Step 2, time = 7.8125e-06, dt = 1e-12\n 0 Nonlinear |R| = 7.624294e+02\n      0 Linear |R| = 7.624294e+02\n      1 Linear |R| = 1.493914e-13\n 1 Nonlinear |R| = 1.512010e+02\n      0 Linear |R| = 1.512010e+02\n      1 Linear |R| = 6.172415e-14\n 2 Nonlinear |R| = 7.986250e+02\n      0 Linear |R| = 7.986250e+02\n      1 Linear |R| = 2.938827e-13\n 3 Nonlinear |R| = 2.020146e+02\n      0 Linear |R| = 2.020146e+02\n      1 Linear |R| = 1.923356e-13\n 4 Nonlinear |R| = 8.618186e+02\n      0 Linear |R| = 8.618186e+02\n      1 Linear |R| = 8.408018e-13\n 5 Nonlinear |R| = 2.686310e+02\n      0 Linear |R| = 2.686310e+02\n      1 Linear |R| = 1.291346e-13\n 6 Nonlinear |R| = 9.460937e+02\n      0 Linear |R| = 9.460937e+02\n      1 Linear |R| = 2.267074e-13\n 7 Nonlinear |R| = 3.567014e+02\n      0 Linear |R| = 3.567014e+02\n      1 Linear |R| = 2.084952e-13\n 8 Nonlinear |R| = 1.051352e+03\n      0 Linear |R| = 1.051352e+03\n      1 Linear |R| = 7.254985e-13\n 9 Nonlinear |R| = 4.682993e+02\n      0 Linear |R| = 4.682993e+02\n      1 Linear |R| = 4.165622e-13\n10 Nonlinear |R| = 1.179760e+03\n      0 Linear |R| = 1.179760e+03\n      1 Linear |R| = 3.034074e-13\n11 Nonlinear |R| = 6.060231e+02\n      0 Linear |R| = 6.060231e+02\n      1 Linear |R| = 4.205243e-13\n12 Nonlinear |R| = 1.334773e+03\n      0 Linear |R| = 1.334773e+03\n      1 Linear |R| = 4.823665e-13\n13 Nonlinear |R| = 7.734967e+02\n      0 Linear |R| = 7.734967e+02\n      1 Linear |R| = 6.140910e-13\n14 Nonlinear |R| = 1.520902e+03\n      0 Linear |R| = 1.520902e+03\n      1 Linear |R| = 1.066225e-12\n15 Nonlinear |R| = 9.754574e+02\n      0 Linear |R| = 9.754574e+02\n      1 Linear |R| = 9.599530e-13\n16 Nonlinear |R| = 1.743719e+03\n      0 Linear |R| = 1.743719e+03\n      1 Linear |R| = 9.758175e-13\n17 Nonlinear |R| = 1.217835e+03\n      0 Linear |R| = 1.217835e+03\n      1 Linear |R| = 5.131143e-13\n18 Nonlinear |R| = 2.009975e+03\n      0 Linear |R| = 2.009975e+03\n      1 Linear |R| = 6.408469e-13\n19 Nonlinear |R| = 1.507885e+03\n      0 Linear |R| = 1.507885e+03\n      1 Linear |R| = 1.117775e-12\n20 Nonlinear |R| = 2.327783e+03\n      0 Linear |R| = 2.327783e+03\n      1 Linear |R| = 8.307381e-13\n21 Nonlinear |R| = 1.854377e+03\n      0 Linear |R| = 1.854377e+03\n      1 Linear |R| = 7.911716e-13\n22 Nonlinear |R| = 2.706847e+03\n      0 Linear |R| = 2.706847e+03\n      1 Linear |R| = 1.405448e-12\n23 Nonlinear |R| = 2.267844e+03\n      0 Linear |R| = 2.267844e+03\n      1 Linear |R| = 1.445880e-12\n24 Nonlinear |R| = 3.158756e+03\n      0 Linear |R| = 3.158756e+03\n      1 Linear |R| = 1.685105e-12\n25 Nonlinear |R| = 2.760894e+03\n      0 Linear |R| = 2.760894e+03\n      1 Linear |R| = 1.550019e-12\n26 Nonlinear |R| = 3.697337e+03\n      0 Linear |R| = 3.697337e+03\n      1 Linear |R| = 1.764655e-12\n27 Nonlinear |R| = 3.348584e+03\n      0 Linear |R| = 3.348584e+03\n      1 Linear |R| = 2.334624e-12\n28 Nonlinear |R| = 4.339070e+03\n      0 Linear |R| = 4.339070e+03\n      1 Linear |R| = 1.556040e-12\n29 Nonlinear |R| = 4.048881e+03\n      0 Linear |R| = 4.048881e+03\n      1 Linear |R| = 1.382577e-12\n30 Nonlinear |R| = 5.103595e+03\n      0 Linear |R| = 5.103595e+03\n      1 Linear |R| = 4.249580e-12\n31 Nonlinear |R| = 4.883204e+03\n      0 Linear |R| = 4.883204e+03\n      1 Linear |R| = 2.326262e-12\n32 Nonlinear |R| = 6.014312e+03\n      0 Linear |R| = 6.014312e+03\n      1 Linear |R| = 4.396180e-12\n33 Nonlinear |R| = 5.877081e+03\n      0 Linear |R| = 5.877081e+03\n      1 Linear |R| = 2.745691e-12\n34 Nonlinear |R| = 7.099097e+03\n      0 Linear |R| = 7.099097e+03\n      1 Linear |R| = 5.263402e-12\n35 Nonlinear |R| = 7.060925e+03\n      0 Linear |R| = 7.060925e+03\n      1 Linear |R| = 3.233967e-12\n36 Nonlinear |R| = 8.391155e+03\n      0 Linear |R| = 8.391155e+03\n      1 Linear |R| = 3.156857e-12\n37 Nonlinear |R| = 8.470970e+03\n      0 Linear |R| = 8.470970e+03\n      1 Linear |R| = 2.859434e-12\n38 Nonlinear |R| = 9.930036e+03\n      0 Linear |R| = 9.930036e+03\n      1 Linear |R| = 4.351306e-12\n39 Nonlinear |R| = 1.015037e+04\n      0 Linear |R| = 1.015037e+04\n      1 Linear |R| = 7.455740e-12\n40 Nonlinear |R| = 1.176284e+04\n      0 Linear |R| = 1.176284e+04\n      1 Linear |R| = 5.781891e-12\n41 Nonlinear |R| = 1.215054e+04\n      0 Linear |R| = 1.215054e+04\n      1 Linear |R| = 3.938999e-12\n42 Nonlinear |R| = 1.394568e+04\n      0 Linear |R| = 1.394568e+04\n      1 Linear |R| = 1.310911e-11\n43 Nonlinear |R| = 1.453269e+04\n      0 Linear |R| = 1.453269e+04\n      1 Linear |R| = 7.625331e-12\n44 Nonlinear |R| = 1.654537e+04\n      0 Linear |R| = 1.654537e+04\n      1 Linear |R| = 5.259497e-12\n45 Nonlinear |R| = 1.736974e+04\n      0 Linear |R| = 1.736974e+04\n      1 Linear |R| = 2.301316e-11\n46 Nonlinear |R| = 1.964148e+04\n      0 Linear |R| = 1.964148e+04\n      1 Linear |R| = 9.060474e-12\n47 Nonlinear |R| = 2.074854e+04\n      0 Linear |R| = 2.074854e+04\n      1 Linear |R| = 6.521796e-12\n48 Nonlinear |R| = 2.332879e+04\n      0 Linear |R| = 2.332879e+04\n      1 Linear |R| = 7.852884e-12\n49 Nonlinear |R| = 2.477251e+04\n      0 Linear |R| = 2.477251e+04\n      1 Linear |R| = 3.089877e-11\n50 Nonlinear |R| = 2.772017e+04\n      0 Linear |R| = 2.772017e+04\n      1 Linear |R| = 1.783683e-11\n51 Nonlinear |R| = 2.956483e+04\n      0 Linear |R| = 2.956483e+04\n      1 Linear |R| = 1.233809e-11\n52 Nonlinear |R| = 3.295004e+04\n      0 Linear |R| = 3.295004e+04\n      1 Linear |R| = 8.835609e-12\n53 Nonlinear |R| = 3.527219e+04\n      0 Linear |R| = 3.527219e+04\n      1 Linear |R| = 3.154702e-11\n54 Nonlinear |R| = 3.917849e+04\n      0 Linear |R| = 3.917849e+04\n      1 Linear |R| = 6.735100e-11\n55 Nonlinear |R| = 4.206930e+04\n      0 Linear |R| = 4.206930e+04\n      1 Linear |R| = 3.033611e-11\n56 Nonlinear |R| = 4.659618e+04\n      0 Linear |R| = 4.659618e+04\n      1 Linear |R| = 1.963117e-11\n57 Nonlinear |R| = 5.016423e+04\n      0 Linear |R| = 5.016423e+04\n      1 Linear |R| = 5.543458e-11\n58 Nonlinear |R| = 5.543017e+04\n      0 Linear |R| = 5.543017e+04\n      1 Linear |R| = 2.933938e-11\n59 Nonlinear |R| = 5.980476e+04\n      0 Linear |R| = 5.980476e+04\n      1 Linear |R| = 5.610551e-11\n60 Nonlinear |R| = 6.595087e+04\n      0 Linear |R| = 6.595087e+04\n      1 Linear |R| = 2.484258e-11\n61 Nonlinear |R| = 7.128599e+04\n      0 Linear |R| = 7.128599e+04\n      1 Linear |R| = 3.436964e-11\n62 Nonlinear |R| = 7.848034e+04\n      0 Linear |R| = 7.848034e+04\n      1 Linear |R| = 5.894589e-11\n63 Nonlinear |R| = 8.495938e+04\n      0 Linear |R| = 8.495938e+04\n      1 Linear |R| = 1.270064e-10\n64 Nonlinear |R| = 9.340209e+04\n      0 Linear |R| = 9.340209e+04\n      1 Linear |R| = 7.097677e-11\n65 Nonlinear |R| = 1.012435e+05\n      0 Linear |R| = 1.012435e+05\n      1 Linear |R| = 3.235095e-11\n66 Nonlinear |R| = 1.111729e+05\n      0 Linear |R| = 1.111729e+05\n      1 Linear |R| = 4.201746e-11\n67 Nonlinear |R| = 1.206367e+05\n      0 Linear |R| = 1.206367e+05\n      1 Linear |R| = 4.154513e-11\n68 Nonlinear |R| = 1.323368e+05\n      0 Linear |R| = 1.323368e+05\n      1 Linear |R| = 4.157740e-11\n69 Nonlinear |R| = 1.437328e+05\n      0 Linear |R| = 1.437328e+05\n      1 Linear |R| = 1.046256e-10\n70 Nonlinear |R| = 1.575415e+05\n      0 Linear |R| = 1.575415e+05\n      1 Linear |R| = 1.173673e-10\n71 Nonlinear |R| = 1.712387e+05\n      0 Linear |R| = 1.712387e+05\n      1 Linear |R| = 6.151794e-11\n72 Nonlinear |R| = 1.875586e+05\n      0 Linear |R| = 1.875586e+05\n      1 Linear |R| = 9.812131e-11\n73 Nonlinear |R| = 2.039964e+05\n      0 Linear |R| = 2.039964e+05\n      1 Linear |R| = 1.066554e-10\n74 Nonlinear |R| = 2.233070e+05\n      0 Linear |R| = 2.233070e+05\n      1 Linear |R| = 1.172566e-10\n75 Nonlinear |R| = 2.430085e+05\n      0 Linear |R| = 2.430085e+05\n      1 Linear |R| = 1.427435e-10\n76 Nonlinear |R| = 2.658809e+05\n      0 Linear |R| = 2.658809e+05\n      1 Linear |R| = 9.547983e-11\n77 Nonlinear |R| = 2.894694e+05\n      0 Linear |R| = 2.894694e+05\n      1 Linear |R| = 3.268181e-10\n78 Nonlinear |R| = 3.165836e+05\n      0 Linear |R| = 3.165836e+05\n      1 Linear |R| = 1.250886e-10\n79 Nonlinear |R| = 3.448012e+05\n      0 Linear |R| = 3.448012e+05\n      1 Linear |R| = 2.937354e-10\n80 Nonlinear |R| = 3.769671e+05\n      0 Linear |R| = 3.769671e+05\n      1 Linear |R| = 1.732532e-10\n81 Nonlinear |R| = 4.106976e+05\n      0 Linear |R| = 4.106976e+05\n      1 Linear |R| = 2.471654e-10\n82 Nonlinear |R| = 4.488797e+05\n      0 Linear |R| = 4.488797e+05\n      1 Linear |R| = 2.198909e-10\n83 Nonlinear |R| = 4.891758e+05\n      0 Linear |R| = 4.891758e+05\n      1 Linear |R| = 4.323833e-10\n84 Nonlinear |R| = 5.345229e+05\n      0 Linear |R| = 5.345229e+05\n      1 Linear |R| = 3.012287e-10\n85 Nonlinear |R| = 5.826380e+05\n      0 Linear |R| = 5.826380e+05\n      1 Linear |R| = 1.973101e-10\n86 Nonlinear |R| = 6.365180e+05\n      0 Linear |R| = 6.365180e+05\n      1 Linear |R| = 3.659766e-10\n87 Nonlinear |R| = 6.939452e+05\n      0 Linear |R| = 6.939452e+05\n      1 Linear |R| = 3.288369e-10\n88 Nonlinear |R| = 7.579874e+05\n      0 Linear |R| = 7.579874e+05\n      1 Linear |R| = 2.949151e-10\n89 Nonlinear |R| = 8.265045e+05\n      0 Linear |R| = 8.265045e+05\n      1 Linear |R| = 3.557147e-10\n90 Nonlinear |R| = 9.026493e+05\n      0 Linear |R| = 9.026493e+05\n      1 Linear |R| = 4.817280e-10\n91 Nonlinear |R| = 9.843738e+05\n      0 Linear |R| = 9.843738e+05\n      1 Linear |R| = 4.283672e-10\n92 Nonlinear |R| = 1.074932e+06\n      0 Linear |R| = 1.074932e+06\n      1 Linear |R| = 3.970388e-10\n93 Nonlinear |R| = 1.172385e+06\n      0 Linear |R| = 1.172385e+06\n      1 Linear |R| = 9.633580e-10\n94 Nonlinear |R| = 1.280109e+06\n      0 Linear |R| = 1.280109e+06\n      1 Linear |R| = 5.560774e-10\n95 Nonlinear |R| = 1.396295e+06\n      0 Linear |R| = 1.396295e+06\n      1 Linear |R| = 9.102578e-10\n96 Nonlinear |R| = 1.524460e+06\n      0 Linear |R| = 1.524460e+06\n      1 Linear |R| = 6.095508e-10\n97 Nonlinear |R| = 1.662955e+06\n      0 Linear |R| = 1.662955e+06\n      1 Linear |R| = 1.178458e-09\n98 Nonlinear |R| = 1.815467e+06\n      0 Linear |R| = 1.815467e+06\n      1 Linear |R| = 8.265435e-10\n99 Nonlinear |R| = 1.980530e+06\n      0 Linear |R| = 1.980530e+06\n      1 Linear |R| = 7.670179e-10\n100 Nonlinear |R| = 2.162036e+06\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 100\n Solve Did NOT Converge!\n  Finished Solving                                                                       [  7.15 s] [   71 MB]\nAborting as solve did not converge",
                  "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6360164",
                  "updatedAt": "2023-07-05T16:41:23Z",
                  "publishedAt": "2023-07-05T08:14:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok the linear solves are now as expected!\nnow it s just the nonlinear solve that s not converging.\nThere s a section about that in the troubleshooting page I linked to earlier if you don\u2019t mind trying that",
                          "url": "https://github.com/idaholab/moose/discussions/24859#discussioncomment-6362899",
                          "updatedAt": "2023-07-05T13:25:00Z",
                          "publishedAt": "2023-07-05T13:24:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Tresca yielding criteria",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Dear MOOSEers,\nAre there any tresca-yielding-criteria related documents/codes implemented in MOOSE? The plasticity modulus in MOOSE now is using Von-Mises yielding criteria, I want to use Tresca one, how should it be adapted to it? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24864",
          "updatedAt": "2023-07-05T12:22:44Z",
          "publishedAt": "2023-06-29T16:03:55Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "This may be a question for @jasondhales, @bwspenc and @jiangwen84. Before they reply you with a more definitive answer, I think it will be difficult because many classes in the tensor_mechanics are hard-coded with the Mises flow. I often just write a plasticity model from scratch if I need tresca's flow (the radial return utilities are still applicable in that case).",
                  "url": "https://github.com/idaholab/moose/discussions/24864#discussioncomment-6318889",
                  "updatedAt": "2023-06-29T19:51:05Z",
                  "publishedAt": "2023-06-29T19:51:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thanks @hugary1995 , could you kindly share the code of it?  I tried to adapt the von-mises one to Tresca, where I changed the yielding function,  but it seems not work.",
                          "url": "https://github.com/idaholab/moose/discussions/24864#discussioncomment-6343459",
                          "updatedAt": "2023-07-03T11:47:10Z",
                          "publishedAt": "2023-07-03T11:47:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "@hugary1995 Or which part should be changed from von-mises modules? Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/24864#discussioncomment-6362288",
                          "updatedAt": "2023-07-05T12:22:45Z",
                          "publishedAt": "2023-07-05T12:22:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "CavityPressure Issues",
          "author": {
            "login": "jin0123456"
          },
          "bodyText": "Hello,\nWhen I used CavityPressure as the boundary condition of the gas cavity, there was a problem of non-convergence in the calculation. But when I set the cavity pressure boundary to constant pressure using Pressure,  the calculation converged. What's the problem?\nHere is my input file.\ninit_temp = 565.75 # K\ninit_cavity = 500.0\ninit_pressure = 4.0e6 # Pa\nrad_fuel = 4.096e-3 # m\nouter_pressure = 15.5e6\n[Mesh]\n  type = FileMesh\n  file = geometry/cz_no_butterfly.e\n  coord_type = RZ\n\n  patch_update_strategy = iteration\n  ghosting_patch_size = 1000\n[]\n\n[GlobalParams]\n  displacements = 'disp_r disp_z'\n[]\n\n[AuxVariables]\n  [temp]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = ${init_temp}\n  []\n\n  [burnup_per]\n    order = FIRST\n    family = MONOMIAL\n    initial_condition = 0.0\n  []\n\n  [porosity]\n    order = FIRST\n    family = MONOMIAL\n    initial_condition = 0.0\n  []\n\n## gas release auxkernel\n  [input_material]\n     order = FIRST\n     family = MONOMIAL\n     initial_condition = 0.0\n  []\n  [q_v]\n    order = FIRST\n    family = MONOMIAL\n    initial_condition = 0.0\n  []\n  [fission_rate]\n    order = FIRST\n    family = MONOMIAL\n    initial_condition = 0.0\n  []\n[]\n\n[AuxKernels]\n  [burnup_per_aux]\n   type = BurnupPerAux\n   block = 'fuel'\n   q_vol = q_v_fun\n   variable = burnup_per\n  []\n\n  [porosity]\n    type = ParsedAux\n    expression = 0.05\n    variable = porosity\n    block = 'fuel'\n  []\n## gas release auxkernel\n  [gas_release_aux]\n    type = GasReleaseAux\n    burnup = burnup_per\n    q_max = q_max\n    vol_fission = vol_fission\n    TD = 95\n    rad_fuel = ${rad_fuel}\n    variable = input_material\n  []\n  [q_v_aux]\n    type = FunctionAux\n    function = q_v_fun\n    variable = q_v\n  []\n  [fission_rate_aux]\n    type = ParsedAux\n    variable = fission_rate\n    coupled_variables = 'q_v'\n    expression = 'q_v / 3.28451e-11' # 3.28451e-11 is once fission release energy\n  []\n[]\n\n[Contact]\n  [gap_contact]\n    primary = 'clad_inside'\n    secondary = 'fuel_outer'\n    model = frictionless\n    penalty = 5e5\n    formulation = penalty\n    tangential_tolerance = 1e-6\n    normal_smoothing_distance = 1e-6\n  []\n  [element]\n    primary = 'element_down'\n    secondary = 'element_top'\n    model = glued\n    penalty = 1e9\n    normalize_penalty = true\n    tangential_tolerance = 1e-3\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [fuel]\n    strain = FINITE\n    add_variables = true\n    eigenstrain_names = 'thermal_expansion_eigenstrain'\n    generate_output = ' stress_zz vonmises_stress'\n    block = 'fuel'\n  []\n  [clad]\n    strain = FINITE\n    add_variables = true\n    eigenstrain_names = 'thermal_expansion_eigenstrain'\n    generate_output = ' stress_zz vonmises_stress creep_strain_xx'\n    block = 'clad'\n  []\n[]\n\n[Materials]\n  inactive = 'UO2_radial_return_stress UO2_power_law_creep UO2_solid_swelling UO2_gas_swelling'\n  [UO2_density]\n    type = UO2Density\n    temperature = temp\n    block = 'fuel'\n  []\n  [CZ_density]\n    type = CZDensity\n    temperature = temp\n    block = 'clad'\n  []\n  [UO2_elasticity_tensor]\n    type = ComputeVariableIsotropicElasticityTensor\n    args = temp\n    youngs_modulus = youngs_modulus\n    poissons_ratio = poissons_ratio\n    block = 'fuel'\n  []\n  [UO2_elasticity_material]\n    type = UO2ElasticityMaterial\n    temperature = temp\n    density_per = 95\n    block = 'fuel'\n  []\n  [Zr4_elasticity_tensor]\n    type = ComputeVariableIsotropicElasticityTensor\n    args = temp\n    youngs_modulus = youngs_modulus\n    poissons_ratio = poissons_ratio\n    block = 'clad'\n  []\n  [Zr4_elasticity_material]\n    type = CZElasticityMaterial\n    temperature = temp\n    block = 'clad'\n  []\n  \n  [UO2_thermal_expansion]\n    type = ComputeUO2InstantaneousThermalExpansionEigenstrain\n    stress_free_temperature = 293.\n    temperature = temp\n    eigenstrain_name = thermal_expansion_eigenstrain\n    block = 'fuel'\n  []\n  [UO2_radial_return_stress]\n    type = ComputeMultipleInelasticStress\n    inelastic_models = 'UO2_power_law_creep'\n    tangent_operator = elastic\n    block = 'fuel'\n  []\n  [UO2_power_law_creep]\n    type = UO2CreepStressUpdate\n    temperature = temp\n    fission_rate = fission_rate\n    q_v_fun = q_v_fun\n    density_percent = 95\n    block = 'fuel'\n  []\n  [UO2_solid_swelling]\n    type = ComputeInstantaneousSolidSwellingEigenstrain\n    burnup = burnup_per\n    eigenstrain_name = solid_swelling_eigenstrain\n    block = 'fuel'\n  []\n  [UO2_gas_swelling]\n    type = ComputeInstantaneousGasSwellingEigenstrain\n    burnup = burnup_per\n    temperature = temp\n    eigenstrain_name = gas_swelling_eigenstrain\n    block = 'fuel'\n  []\n  \n  [Zr4_thermal_expansion]\n    type = ComputeCZThermalExpansionEigenstrain\n    stress_free_temperature = 293.\n    temperature = temp\n    eigenstrain_name = thermal_expansion_eigenstrain\n    block = 'clad'\n  []\n  [CZ_radial_return_stress]\n    type = ComputeMultipleInelasticStress\n    inelastic_models = 'CZ_power_law_creep'\n    tangent_operator = elastic\n    block = 'clad'\n  []\n  [CZ_power_law_creep]\n    type = CZPowerLawCreepStressUpdate\n    temperature = temp\n    neu_flux_function = neu_flux_fun\n    block = 'clad'\n    max_inelastic_increment = 0.01\n    absolute_tolerance = 1e-5\n    relative_tolerance = 1e-5\n    substep_strain_tolerance = 0.001\n  []\n  [small_stress]\n    type = ComputeFiniteStrainElasticStress\n    block = 'fuel'\n  []\n[]\n\n[BCs]\n  active = 'inside coolant_pressure pellet_bottom_disp'\n\n  [coolant_pressure]\n    type = Pressure\n    function = outer_pressure\n    boundary = outer\n    variable = disp_r\n  []\n  [inside]\n    type = Pressure\n    function = init_pressure\n    boundary = 'clad_inside fuel_outer'\n    variable = disp_r\n  []\n\n  [CavityPressure]\n    [cavity_pressure]\n      boundary = 'fuel_outer clad_inside'\n      initial_temperature = ${init_cavity}\n      temperature = ave_temp_clad_inside_top# use clad top temperature as average temperature\n      material_input = inputmaterial \n      volume = volume_tol\n      initial_pressure = ${init_pressure} \n      R = 8.314472\n      output = ppress\n    []\n  []\n\n  [pellet_bottom_disp]\n    type = DirichletBC\n    variable = disp_z\n    boundary = 'pin_bottom'\n    value = 0.0\n    preset = true\n  []\n[]\n\n[Functions]\n  [q_v_fun]\n    type = PiecewiseMulticonstant\n    data_file = power/B-A17.txt\n    direction = 'left left'\n  []\n  [neu_flux_fun]\n    type = PiecewiseConstant\n    data_file = neu_flux/B-A17.txt\n    format = rows\n  []\n  [outer_pressure]\n    type = PiecewiseLinear\n    x = '0 38528676.0 38528750.0 38528800.0'\n    y = '${outer_pressure} ${outer_pressure} 0.1e6 0.1e6'\n  []\n  [init_pressure]\n    type = PiecewiseLinear\n    #x = '0 38528676.0 38528750.0 38528800.0'\n    #y = '${init_pressure} ${init_pressure} 0.1e6 0.1e6'\n    x = '0 38528676.0 38528750.0 38528800.0'\n    y = '2e6 9e6 0.1e6 0.0e6'\n  []\n[]\n\n[Postprocessors]\n## gas release postprocessors\n  [q_max] ## get the mox volume power\n    type = ElementExtremeValue\n    variable = q_v\n    value_type = max\n  []\n  [vol_fission] ## get the volume fission unit[fission/s]\n    type = ElementIntegralVariablePostprocessor\n    variable = fission_rate\n    block = 'fuel'\n  []\n  [inputmaterial]\n    type = ElementAverageValue\n    variable = input_material\n    block = fuel\n    execute_on = 'timestep_end'\n  []\n  [ave_temp_clad_inside_top]\n    type = SideAverageValue\n    boundary = 'plenum_top'\n    execute_on = 'initial linear'\n    variable = temp\n  []\n  [volume_tol]\n    type = InternalVolume\n    boundary = 'clad_inside fuel_outer fuel_top plenum_top'\n    execute_on = 'initial linear'\n  []\n[]\n\n[Preconditioning/smp]\n  type = SMP\n  full = true\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  start_time = 0.\n  end_time = 38528800\n  dt = 864000\n  nl_abs_tol = 1e-4\n  nl_rel_tol = 1e-4\n  l_tol = 1e-4\n  l_max_its = 30\n  nl_max_its = 30\n\n  petsc_options_iname = '-pc_type -pc_fator_mat_solver_package'\n  petsc_options_value = 'lu        superlu_dist'\n  line_search = 'none'\n  #petsc_options = '-pc_svd_monitor'\n  #petsc_options_iname = '-pc_type'\n  #petsc_options_value = 'svd'\n[]\n\n[Outputs]\n  exodus = true\n  print_linear_residuals = true\n[]\n\n[Debug]\n show_var_residual_norms = true\n[]\n\nI hope someone can solve my problem. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24899",
          "updatedAt": "2023-07-05T03:54:21Z",
          "publishedAt": "2023-07-05T03:17:44Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nTo diagnose non-convergence issues you may use this page:\nhttps://mooseframework.inl.gov/application_usage/failed_solves.html\nOtherwise, you'll want to have a look at the differences between the two models. I think the CavityPressure allows for more degrees of freedom by having the gas change P and T ?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24899#discussioncomment-6358367",
                  "updatedAt": "2023-07-05T03:54:22Z",
                  "publishedAt": "2023-07-05T03:54:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Enable Coupleable in PenaltyEqualValueConstriant",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "I would like to modify the PenaltyEqualValueConstriant to include a coupledValue, however, I received the error message error: use of undeclared identifier 'coupledValue'.\nIs there a way to modify the files to include Coupleable functionality? Thanks!\n//* All rights reserved, see COPYRIGHT for full restrictions\n//* https://github.com/idaholab/moose/blob/master/COPYRIGHT\n//*\n//* Licensed under LGPL 2.1, please see LICENSE for details\n//* https://www.gnu.org/licenses/lgpl-2.1.html\n\n#pragma once\n\n#include \"MortarConstraint.h\"\n#include \"ADMortarConstraint.h\"\n\n// Forward declaration\ntemplate <bool is_ad>\nusing MortarConstraintTempl =\n    typename std::conditional<is_ad, ADMortarConstraint, MortarConstraint>::type;\n\n/**\n * Constrain the value of a variable to be the same on both sides of an\n * interface using a generalized force stemming from a penalty-based enforcement.\n */\ntemplate <bool is_ad>\nclass PenaltySlipConstraintTempl : public MortarConstraintTempl<is_ad>\n{\npublic:\n  static InputParameters validParams();\n\n  PenaltySlipConstraintTempl(const InputParameters & parameters);\n\nprotected:\n  GenericReal<is_ad> computeQpResidual(Moose::MortarType mortar_type) final;\n  GenericReal<is_ad> computeQpJacobian(Moose::ConstraintJacobianType jacobian_type,\n                                       unsigned int jvar);\n\n  /// Penalty value used to enforce the constraint\n  const Real _penalty_value;\n  const VariableValue & _slip_iter;\n\n  using MortarConstraintTempl<is_ad>::_u_primary;\n  using MortarConstraintTempl<is_ad>::_u_secondary;\n  using MortarConstraintTempl<is_ad>::_test_primary;\n  using MortarConstraintTempl<is_ad>::_test_secondary;\n  using MortarConstraintTempl<is_ad>::_qp;\n  using MortarConstraintTempl<is_ad>::_i;\n  using MortarConstraintTempl<is_ad>::_j;\n};\n\ntypedef PenaltySlipConstraintTempl<false> PenaltySlipConstraint;\ntypedef PenaltySlipConstraintTempl<true> ADPenaltySlipConstraint;\n\n#include \"PenaltySlipConstraint.h\"\n#include \"CZMComputeDisplacementJumpBase.h\"\n#include \"FEProblemBase.h\"\n\nregisterMooseObject(\"farms_rsfApp\", PenaltySlipConstraint);\nregisterMooseObject(\"farms_rsfApp\", ADPenaltySlipConstraint);\n\ntemplate <bool is_ad>\nInputParameters\nPenaltySlipConstraintTempl<is_ad>::validParams()\n{\n  InputParameters params = MortarConstraintTempl<is_ad>::validParams();\n  params.addClassDescription(\n      \"PenaltySlipConstraint enforces solution continuity between secondary and \"\n      \"primary sides of a mortar interface using a penalty approach (no Lagrange multipliers \"\n      \"needed)\");\n  params.addRequiredRangeCheckedParam<Real>(\n      \"penalty_value\",\n      \"penalty_value>0\",\n      \"Penalty value used to impose a generalized force capturing the mortar constraint equation\");\n  params.addRequiredCoupledVar(\"slip_iter\",\"slip value at current iteration\");\n  return params;\n}\n\ntemplate <bool is_ad>\nPenaltySlipConstraintTempl<is_ad>::PenaltySlipConstraintTempl(\n    const InputParameters & parameters)\n  : MortarConstraintTempl<is_ad>(parameters),\n    _penalty_value(this->template getParam<Real>(\"penalty_value\")),\n    _slip_iter(coupledValue(\"slip_iter\"))\n{\n}\n\ntemplate <bool is_ad>\nGenericReal<is_ad>\nPenaltySlipConstraintTempl<is_ad>::computeQpResidual(Moose::MortarType mortar_type)\n{\n\n  switch (mortar_type)\n  {\n    case Moose::MortarType::Secondary:\n    {\n      auto residual =\n          -(_u_primary[_qp] - _u_secondary[_qp] - _slip_iter[_qp]) * _penalty_value * _test_secondary[_i][_qp];\n\n      return residual;\n    }\n\n    case Moose::MortarType::Primary:\n    {\n      auto residual =\n          (_u_primary[_qp] - _u_secondary[_qp] - _slip_iter[_qp]) * _penalty_value * _test_primary[_i][_qp];\n\n      return residual;\n    }\n\n    default:\n      return 0;\n  }\n}\n\ntemplate <>\nADReal\nPenaltySlipConstraintTempl<true>::computeQpJacobian(\n    Moose::ConstraintJacobianType /*jacobian_type*/, unsigned int /*jvar*/)\n{\n  mooseError(\"ADPenaltySlipConstraint does not implement manual Jacobian calculation.\");\n}\n\ntemplate <>\nReal\nPenaltySlipConstraintTempl<false>::computeQpJacobian(\n    Moose::ConstraintJacobianType jacobian_type, unsigned int jvar)\n{\n  typedef Moose::ConstraintJacobianType JType;\n\n  switch (jacobian_type)\n  {\n    case JType::SecondarySecondary:\n      if (jvar == _secondary_var.number())\n        return (*_phi)[_j][_qp] * _penalty_value * _test_secondary[_i][_qp];\n      break;\n\n    case JType::SecondaryPrimary:\n      if (jvar == _primary_var.number())\n        return -(*_phi)[_j][_qp] * _penalty_value * _test_secondary[_i][_qp];\n      break;\n\n    case JType::PrimarySecondary:\n      if (jvar == _secondary_var.number())\n        return -(*_phi)[_j][_qp] * _penalty_value * _test_primary[_i][_qp];\n      break;\n\n    case JType::PrimaryPrimary:\n      if (jvar == _primary_var.number())\n        return (*_phi)[_j][_qp] * _penalty_value * _test_primary[_i][_qp];\n      break;\n\n    default:\n      return 0;\n  }\n\n  return 0;\n}\n\ntemplate class PenaltySlipConstraintTempl<false>;\ntemplate class PenaltySlipConstraintTempl<true>;",
          "url": "https://github.com/idaholab/moose/discussions/24894",
          "updatedAt": "2023-07-04T14:14:56Z",
          "publishedAt": "2023-07-04T01:10:20Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThat's odd. You should only see that if your class does NOT inherit the Coupleable interface.\nIf it does not, then adding it as a parent class is the fix.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348664",
                  "updatedAt": "2023-07-04T02:00:17Z",
                  "publishedAt": "2023-07-04T02:00:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi, how should I \"adding it as a parent class\"? I tried to add include Coupleable in the source file but it doesn't work",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348686",
                          "updatedAt": "2023-07-04T02:04:34Z",
                          "publishedAt": "2023-07-04T02:04:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it's not the fix\nMortarConstraint already inherits coupleable\nsee\nhttps://mooseframework.inl.gov/docs/doxygen/moose/classMortarConstraintBase.html",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348886",
                          "updatedAt": "2023-07-04T02:48:16Z",
                          "publishedAt": "2023-07-04T02:48:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do this:\nthis->template  coupledValue\ninstead of\ncoupledValue",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348888",
                          "updatedAt": "2023-07-04T03:54:28Z",
                          "publishedAt": "2023-07-04T02:48:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "I tried and get the error:\nCreating Unity /Users/andyz/projects/farms_rsf/build/unity_src/materials_2d_explicit_CZM_Unity.C\nCreating Unity /Users/andyz/projects/farms_rsf/build/unity_src/constraints_Unity.C\nCompiling C++ (in opt mode) /Users/andyz/projects/farms_rsf/build/unity_src/materials_2d_explicit_CZM_Unity.C...\nCompiling C++ (in opt mode) /Users/andyz/projects/farms_rsf/build/unity_src/constraints_Unity.C...\nIn file included from /Users/andyz/projects/farms_rsf/build/unity_src/constraints_Unity.C:2:\n/Users/andyz/projects/farms_rsf/src/constraints/PenaltySlipConstraint.C:30:31: error: 'coupledValue' following the 'template' keyword does not refer to a template\n    _slip_iter(this->template coupledValue(\"slip_iter\"))\n                     ~~~~~~~~ ^\n/Users/andyz/projects/farms_rsf/src/constraints/PenaltySlipConstraint.C:106:16: note: in instantiation of member function 'PenaltySlipConstraintTempl<false>::PenaltySlipConstraintTempl' requested here\ntemplate class PenaltySlipConstraintTempl<false>;\n               ^\n/Users/andyz/projects/moose/framework/build/header_symlinks/Coupleable.h:192:33: note: declared as a non-template here\n  virtual const VariableValue & coupledValue(const std::string & var_name,\n                                ^\nIn file included from /Users/andyz/projects/farms_rsf/build/unity_src/constraints_Unity.C:2:\n/Users/andyz/projects/farms_rsf/src/constraints/PenaltySlipConstraint.C:30:31: error: 'coupledValue' following the 'template' keyword does not refer to a template\n    _slip_iter(this->template coupledValue(\"slip_iter\"))\n                     ~~~~~~~~ ^\n/Users/andyz/projects/farms_rsf/src/constraints/PenaltySlipConstraint.C:107:16: note: in instantiation of member function 'PenaltySlipConstraintTempl<true>::PenaltySlipConstraintTempl' requested here\ntemplate class PenaltySlipConstraintTempl<true>;\n               ^\n/Users/andyz/projects/moose/framework/build/header_symlinks/Coupleable.h:192:33: note: declared as a non-template here\n  virtual const VariableValue & coupledValue(const std::string & var_name,\n                                ^\n2 errors generated.",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348902",
                          "updatedAt": "2023-07-04T02:52:35Z",
                          "publishedAt": "2023-07-04T02:52:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Yeah, it does seems to inherit already, however I never find a similar allocation using coupled value in the pre-existing functions",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6348927",
                          "updatedAt": "2023-07-04T03:00:44Z",
                          "publishedAt": "2023-07-04T03:00:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "seems to find it then!\nyeah I think it wasnt the solution now, what was I thinking",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6349107",
                          "updatedAt": "2023-07-04T03:46:49Z",
                          "publishedAt": "2023-07-04T03:46:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "But how should I get it then?",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6349125",
                          "updatedAt": "2023-07-04T03:51:16Z",
                          "publishedAt": "2023-07-04T03:51:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what do you get for coupledValue ? what error?",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6349135",
                          "updatedAt": "2023-07-04T03:54:13Z",
                          "publishedAt": "2023-07-04T03:54:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "It is not finding error;\n\n/Users/andyz/projects/farms_rsf/src/constraints/PenaltySlipConstraint.C:28:16: error: use of undeclared identifier 'coupledValue'\n    _slip_iter(coupledValue(\"slip_iter\"))\n               ^\n1 error generated.\nmake: *** [/Users/andyz/projects/moose/framework/build.mk:149: /Users/andyz/projects/farms_rsf/build/unity_src/constraints_Unity.arm64-apple-darwin20.0.0.opt.lo] Er",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6349155",
                          "updatedAt": "2023-07-04T03:59:03Z",
                          "publishedAt": "2023-07-04T03:59:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "well. Not sure I understand what's going on",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6349196",
                          "updatedAt": "2023-07-04T04:07:32Z",
                          "publishedAt": "2023-07-04T04:07:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Add\nusing MortarConstraintTempl<is_ad>::coupledValue;\nin the header, or use\nthis->coupledValue(\"slip_iter\")\nBoth should work.",
                  "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6351832",
                  "updatedAt": "2023-07-04T09:58:47Z",
                  "publishedAt": "2023-07-04T09:58:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks! It works\nprotected:\n  GenericReal<is_ad> computeQpResidual(Moose::MortarType mortar_type) final;\n  GenericReal<is_ad> computeQpJacobian(Moose::ConstraintJacobianType jacobian_type,\n                                       unsigned int jvar);\n\n  /// Penalty value used to enforce the constraint\n  const Real _penalty_value;\n  const VariableValue _slip_iter;\n\n  using MortarConstraintTempl<is_ad>::_u_primary;\n  using MortarConstraintTempl<is_ad>::_u_secondary;\n  using MortarConstraintTempl<is_ad>::_test_primary;\n  using MortarConstraintTempl<is_ad>::_test_secondary;\n  using MortarConstraintTempl<is_ad>::_qp;\n  using MortarConstraintTempl<is_ad>::_i;\n  using MortarConstraintTempl<is_ad>::_j;\n  using MortarConstraintTempl<is_ad>::coupledValue;\n};",
                          "url": "https://github.com/idaholab/moose/discussions/24894#discussioncomment-6354202",
                          "updatedAt": "2023-07-04T14:14:50Z",
                          "publishedAt": "2023-07-04T14:14:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue of Preset option in DirichletBC and Explicit Solver",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Hi all, I would like to ask a possible workaround to pass aux variable (from sub app) to DirichletBC. Specifically, I have the following code to extract variable from sub app:\n[Transfers]\n    [pull_resid]\n        type = MultiAppCopyTransfer\n        from_multi_app = sub_app\n        source_variable = 'disp_plusminus_sub_scaled_x'\n        variable = 'disp_plusminus_scaled_x'\n        execute_on = 'INITIAL TIMESTEP_BEGIN'\n    []\n\nwhere disp_plusminus_scaled_x will be enforced as DirichletBC using a custom one which basically pass variable into the BC:\n  [./assignbc_primary_x]\n        type = CoupledVarDirichletBC\n        variable = disp_x\n        preset_value = disp_plusminus_scaled_x\n        boundary = 'Block0_Block1'\n        preset = false\n  []\n\nThe current approach is to set preset=false which allows the BC to be set during the system solve (if preset = true then it will be set before TIMESTEP_BEGIN, which gives 0 in return since the aux variable hasn't received the value from sub app yet)\nThere are two questions:\n\nWhat does preset = false do? Is it safe to use this option.\nIs there a way to pass the value to BC but remain preset = true, which is the default option in Nodal BC.\n\nThanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/24858",
          "updatedAt": "2023-07-03T23:45:36Z",
          "publishedAt": "2023-06-29T04:59:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\n\npreset=true means that we enforce the value of the variable directly, and remove the dof from the equations (reducing the number of equations to solve)\nfalse means we dont do that, and we solve an equation at the boundary\nIt's safe, and even necessary when enforcing the constraint (for example on a displacement) directly leads to conditioning/mesh issues\n\n\nYou could initialize the auxvariable to something good. Maybe from a restart file using SolutionIC ?\n\n\nwhat is coupledVarDirichletBC? There's matchedValueBC for this\n\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6316047",
                  "updatedAt": "2023-06-29T14:29:11Z",
                  "publishedAt": "2023-06-29T14:29:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks Guid! MatchedValueBC seems to perform the same as \"weakly-enforced\" boundary condition. However, I'm looking for  \"strongly-enforced\" boundary condition at each time step at the interface using explicit scheme. As I chatted with Peter and Alex, this may not be an easy task.",
                          "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6327134",
                          "updatedAt": "2023-06-30T15:34:43Z",
                          "publishedAt": "2023-06-30T15:34:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "chunhuizhao478"
                  },
                  "bodyText": "I have the following minimum script using CentralDifference and DirichletBC, but as I changed the option from preset=false to preset=true, the results are a bit weird for preset=true , could someone take a look at it? Thanks!\n[Mesh]\n    [./msh]\n        type = GeneratedMeshGenerator\n        dim = 2\n        nx = 10\n        ny = 10\n        xmin = -500\n        xmax = 500\n        ymin = -500\n        ymax = 500\n    [../]\n    [./new_block]\n        type = ParsedSubdomainMeshGenerator\n        input = msh\n        combinatorial_geometry = 'y<0'\n        block_id = 1\n    []\n    #add \"Block0_Block1\" and \"Block1_Block0\" interfaces\n    [./split]\n        type = BreakMeshByBlockGenerator\n        input = new_block\n        split_interface = true\n        add_interface_on_two_sides = true\n    []\n[]\n\n[GlobalParams]\n    displacements = 'disp_x disp_y'\n[]\n\n[Variables]\n    [./disp_x]\n        order = FIRST\n        family = LAGRANGE\n    [../]\n    [./disp_y]\n        order = FIRST\n        family = LAGRANGE\n    [../]\n[]\n\n[Modules]\n    [./TensorMechanics]\n        [./Master]\n        [./all]\n            strain = SMALL\n            displacements = 'disp_x disp_y'\n            planar_formulation = PLANE_STRAIN\n        [../]\n        [../]\n    [../]\n[]\n\n[Materials]\n    [elasticity]\n        type = ComputeIsotropicElasticityTensor\n        lambda = 1\n        shear_modulus = 1\n        use_displaced_mesh = false\n    []\n    [stress]\n        type = ComputeLinearElasticStress\n    []\n    [density]\n        type = GenericConstantMaterial\n        prop_names = density\n        prop_values = 1\n    []\n[]\n\n[Kernels]\n    [./inertia_x]\n        type = InertialForce\n        use_displaced_mesh = false\n        variable = disp_x\n    []\n    [./inertia_y]\n        type = InertialForce\n        use_displaced_mesh = false\n        variable = disp_y\n    []\n[]\n\n[BCs]\n    [./dirichlet_primary_x]\n        type = DirichletBC\n        variable = disp_x\n        boundary = 'Block0_Block1'\n        value = 1\n        preset = false\n    []\n    [./dirichlet_secondary_x]\n        type = DirichletBC\n        variable = disp_x\n        boundary = 'Block1_Block0'\n        value = -1\n        preset = false\n    []\n    [./dirichlet_primary_y]\n        type = DirichletBC\n        variable = disp_y\n        boundary = 'Block0_Block1'\n        value = 0\n        preset = false\n    []\n    [./dirichlet_secondary_y]\n        type = DirichletBC\n        variable = disp_y\n        boundary = 'Block1_Block0'\n        value = 0\n        preset = false\n    []\n[]\n\n[Executioner]\n    type = Transient\n    dt = 1\n    num_steps = 1\n    [TimeIntegrator]\n        type = CentralDifference\n        solve_type = lumped\n    []\n[]\n\n[Outputs]\n    exodus = true\n    interval = 1\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6327170",
                  "updatedAt": "2023-06-30T15:41:11Z",
                  "publishedAt": "2023-06-30T15:37:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "preset=false gives desired results, the interface displaces 1.\n\npreset=true gives weird results, the interface displaces 0, while the interior nodes displaces 0.0001 (seems to me like 1 / (100 * 100), where 100 is the element length), which is not going to happen for explicit scheme with lumped mass option, something is wrong here.",
                          "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6327230",
                          "updatedAt": "2023-06-30T15:46:04Z",
                          "publishedAt": "2023-06-30T15:45:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "central difference doesn't work with preset=true",
                  "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6329219",
                  "updatedAt": "2023-06-30T20:35:16Z",
                  "publishedAt": "2023-06-30T20:35:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks Gary!",
                          "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6329501",
                          "updatedAt": "2023-06-30T21:27:05Z",
                          "publishedAt": "2023-06-30T21:27:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Is there an issue for this?",
                          "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6339035",
                          "updatedAt": "2023-07-02T23:35:33Z",
                          "publishedAt": "2023-07-02T23:35:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "So the algorithm we follow separates the evaluations on the interface and set the outcome interface displacement as strong Dirichlet BC, the preset=false weakly enforces the value which may or may not contributes to the mismatch issue I'm facing.",
                          "url": "https://github.com/idaholab/moose/discussions/24858#discussioncomment-6348092",
                          "updatedAt": "2023-07-03T23:45:37Z",
                          "publishedAt": "2023-07-03T23:45:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}