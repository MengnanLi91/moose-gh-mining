{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wOC0wNVQwOTozNjoxNC0wNTowMM4AUy9E"
    },
    "edges": [
      {
        "node": {
          "title": "MOOSE website & conda packages currently unavailable in some geographical regions",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "We are aware of a service interruption in some countries. We are in contact with INL information management to resolve this.\n\nThe MOOSE website is partially unreachable\nconda/mamba packages cannot be downloaded\n\nI would strongly advise you do not attempt to update MOOSE or your application if you reside in the affected countries until this is resolved, as you will not be able to update the moose-libmesh package.\nIf you need access to the documentation, please build it locally:\ncd moose/modules\nmake -j 6\ncd doc\npython moosedocs.py build --serve\n\"navigate to the IP shown in the terminal using your internet browser\"\n\nThank you to the community members who reported this issue.",
          "url": "https://github.com/idaholab/moose/discussions/25165",
          "updatedAt": "2023-09-01T19:58:35Z",
          "publishedAt": "2023-08-09T21:21:25Z",
          "category": {
            "name": "Show and tell"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Function Parser syntax: \"and\" and \"or\" conditions in if statements; exponents",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "How are these handled? I have a function in my input file that uses both and I'm getting an error. Say I wanted to type a function:\nIF\n(condition1 OR condition2), action1,\nELSE\naction 2\nWould it be typed like:\nif ((condition1 or condition 2), action1, action2) ? What is used in MOOSE to denote and/or? I tried typing them out/using && || respectively and neither worked. Specifically, I have this line of code and it's throwing an error:\nexpression = 'if ( (x<((-gb_width/2)+(-z*tan(theta)))) || (x>((gb_width/2)+(z*tan(theta)))), k_bulk, k_gb)'\nAlso, to raise a value to a power, is it simply the \"^\" character? I looked through the examples on the parsed function page and saw the expressions actually typed out (e.g xxx instead of x^3), so I wanted to be sure.",
          "url": "https://github.com/idaholab/moose/discussions/25161",
          "updatedAt": "2023-08-09T19:30:57Z",
          "publishedAt": "2023-08-09T19:10:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Use | for or, and & for and\ndocumentation:\nhttps://fparser.readthedocs.io/en/latest/",
                  "url": "https://github.com/idaholab/moose/discussions/25161#discussioncomment-6683860",
                  "updatedAt": "2023-08-09T19:16:06Z",
                  "publishedAt": "2023-08-09T19:16:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "an example in the framework here\ntest/tests/meshgenerators/compute_node_position/2d.i",
                          "url": "https://github.com/idaholab/moose/discussions/25161#discussioncomment-6683866",
                          "updatedAt": "2023-08-09T19:17:11Z",
                          "publishedAt": "2023-08-09T19:17:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "perfect, thanks!!",
                          "url": "https://github.com/idaholab/moose/discussions/25161#discussioncomment-6683981",
                          "updatedAt": "2023-08-09T19:30:32Z",
                          "publishedAt": "2023-08-09T19:30:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use getPostprocessorValue in preconditioners",
          "author": {
            "login": "nuomi68"
          },
          "bodyText": "Hello,everyone.\nI want to adjust my preprocessing matrix based on different post-processing values.owever, inherited from MoosePreconditioner, getPostprocessorValue is not available. What should I do to use getPostprocessorValue in preconditioners.\nWhen I try\nmyPreconditioner::myPreconditioner(const InputParameters & params)\n  : MoosePreconditioner(params),\n  _pp(isParamValid(\"pp_name\") ? getPostprocessorValue(\"pp_name\"):0)\n{}\n\nAfter compiling I get an error :'getPostprocessorValue' was not declared in this scope; did you mean 'PostprocessorValue'?",
          "url": "https://github.com/idaholab/moose/discussions/25063",
          "updatedAt": "2023-08-08T19:00:52Z",
          "publishedAt": "2023-07-31T16:18:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I think it s called getPostprocessorValueByName",
                  "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6597317",
                  "updatedAt": "2023-07-31T16:43:13Z",
                  "publishedAt": "2023-07-31T16:43:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Using getPostprocessorValueByName got the same error:'getPostprocessorValueByName' was not declared in this scope; did you mean 'PostprocessorValue'?\nDo I need to inherit something other than MoosePreconditioner",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6597447",
                          "updatedAt": "2023-07-31T17:00:47Z",
                          "publishedAt": "2023-07-31T17:00:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Oh yes you need to inherit from an interface as well\ncalled PostprocessorInterface most likely",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6597503",
                          "updatedAt": "2023-07-31T17:07:15Z",
                          "publishedAt": "2023-07-31T17:07:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Note that preconditioners are constructed before postprocessors so you won't be able to retrieve a reference to the postprocessor or its value during the construction phase",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6597790",
                          "updatedAt": "2023-07-31T17:45:41Z",
                          "publishedAt": "2023-07-31T17:45:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "nuomi68"
                  },
                  "bodyText": "I try to inherit PostprocessorInterface. Able to compile, but a segment error occurs during execution.\nAs @lindsayad said, preconditioners are constructed before postprocessors so you won't be able to retrieve a reference to the postprocessor or its value during the construction phase. Can I use getPostprocessorValue in Preconditioners? I do not need the postprocessor values to participate in the calculation of the preprocessing matrix, just choose SMP(false) or SMP(true) according to the different postprocessor values.\nIf I don't reference the postprocessors value during construction. According to the postprocessors value of the previous time step, the preprocessing matrix of the current time step is selected. Is this feasible and how can I achieve it?\nCode snippet with a segment error  after execution\n#include \"MoosePreconditioner.h\"\n#include \"PostprocessorInterface.h\"\nclass CombinationSingleMatrixPreconditioner : public PostprocessorInterface,public MoosePreconditioner\n{\npublic:\n\n  static InputParameters validParams();\n  \n  const  PostprocessorValue & _pp;\n  CombinationSingleMatrixPreconditioner(const InputParameters & params);\n};\n\nCombinationSingleMatrixPreconditioner::CombinationSingleMatrixPreconditioner(const InputParameters & params)\n  : PostprocessorInterface(this),MoosePreconditioner(params),\n    _pp(isParamValid(\"pp_name\") ? getPostprocessorValue(\"pp_name\"):0)\n{\n  NonlinearSystemBase & nl = _fe_problem.getNonlinearSystemBase();\n  unsigned int n_vars = nl.nVariables();\n  const auto & libmesh_system = nl.system();\n  auto cm = std::make_unique<CouplingMatrix>(n_vars);\n\n  if ( _pp>1.0)\n  {\n    // put 1s on diagonal\n    for (unsigned int i = 0; i < n_vars; ++i)\n      (*cm)(i, i) = 1;\n\n  }\n  else\n  {\n    for (unsigned int i = 0; i < n_vars; ++i)\n      for (unsigned int j = 0; j < n_vars; ++j)\n        (*cm)(i, j) = 1;\n  }\n\n}",
                  "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6607750",
                  "updatedAt": "2023-08-01T16:22:54Z",
                  "publishedAt": "2023-08-01T16:22:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Can I use getPostprocessorValue in Preconditioners?\n\nNo, not in the constructor, as I said. What you want to do is currently difficult to implement in a MoosePreconditioner class. Perhaps the easiest way would be to create your own class derived from FEProblem and override computeResidualTags and computeJacobianTags. You could add a parameter which is your postprocessor name. And then you could post scale your residuals and Jacobian/preconditioning matrices however you see fit, presumably after calling down to the base class:\nvoid\nCustomProblem::computeResidualTags(...)\n{\n  FEProblem::computeResidualTags(tags);\n  /* <do your postprocessor scaling here> */\n}\n\nvoid\nCustomProblem::computeJacobianTags(...)\n{\n  FEProblem::computeJacobianTags(tags);\n  /* <do your postprocessor scaling here> */\n}",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6608214",
                          "updatedAt": "2023-08-01T17:09:35Z",
                          "publishedAt": "2023-08-01T17:09:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It would be slow but you could use getPostprocessorValue very late during the execution of the preconditioner.\nIf there is an initialSetup routine (I don\u2019t think there is for preconditioners) we would delay that function call there for objects that are constructed after postprocessors",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6609406",
                          "updatedAt": "2023-08-01T19:41:06Z",
                          "publishedAt": "2023-08-01T19:41:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If you also inherit from Preconditioner<Number>, then you do have these additional APIs available to you\n  /**                                                                                                                                                                                                                                         \n   * Computes the preconditioned vector \\p y based on input vector \\p                                                                                                                                                                         \n   * x. This is usually done by solving \\f$ Py=x \\f$ to get the                                                                                                                                                                               \n   * action of \\f$ P^-1 x \\f$.                                                                                                                                                                                                                \n   */\n  virtual void apply(const NumericVector<T> & x, NumericVector<T> & y) = 0;\n\n  /**                                                                                                                                                                                                                                         \n   * Release all memory and clear data structures.                                                                                                                                                                                            \n   */\n  virtual void clear () {}\n\n  /**                                                                                                                                                                                                                                         \n   * Initialize data structures if not done so already.                                                                                                                                                                                       \n   *                                                                                                                                                                                                                                          \n   * \\note This MUST be called before the preconditioning object is used.                                                                                                                                                                     \n   */\n  virtual void init () {}\n\n  /**                                                                                                                                                                                                                                         \n   * This is called every time the \"operator might have changed\".                                                                                                                                                                             \n   *                                                                                                                                                                                                                                          \n   * This is where you need to fill in your preconditioning matrix.                                                                                                                                                                           \n   */\n  virtual void setup () {}\nbut I would be very nervous about applying a scaling postprocessor while preconditioning that is not also present in the evaluation of your residual and/or your Jacobian/Amat if you're not using a matrix-free method",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6610126",
                          "updatedAt": "2023-08-01T21:25:53Z",
                          "publishedAt": "2023-08-01T21:25:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thanks very much for your help, now I seem to be able to change the preprocessing matrix. But the program didn't work properly after the change. Since my ability is really poor and I have tried many methods to make the program normal, I feel that I am now very close to achieving what I want to achieve. I want your help again.\nI tried to adjust the preprocessing with different solution times, which was relatively easy. Because my understanding of MOOSEFramework is not deep enough, I only modified cm and did not make other changes.\n#include \"CSMPProblem.h\"\n\n#include \"Assembly.h\"\n#include \"AuxiliarySystem.h\"\n#include \"MooseEigenSystem.h\"\n#include \"NonlinearSystem.h\"\n#include \"LineSearch.h\"\n#include \"MooseEnum.h\"\n\nregisterMooseObject(\"MooseApp\", CSMPProblem);\n\nInputParameters\nCSMPProblem::validParams()\n{\n  InputParameters params = FEProblem::validParams();\n  params.addClassDescription(\"A normal (default) Problem object that contains a single \"\n                             \"NonlinearSystem and a single AuxiliarySystem object.\");\n  params.addParam<Real>(\"reference_time\", -1e10,\"By comparing the time, do not change the PC at the same time\");\n\n  return params;\n}\n\nCSMPProblem::CSMPProblem(const InputParameters & parameters)\n  : FEProblem(parameters),\n  _reference_time(getParam<Real>(\"reference_time\"))\n{\n}\n\nvoid\nCSMPProblem::computeResidualTags(const std::set<TagID> & tags)\n{\n  FEProblem::computeResidualTags(tags);\n  /* <do your postprocessor scaling here> */\n  if (_reference_time!=time())\n  {\n    NonlinearSystemBase & nl = getNonlinearSystemBase();\n    unsigned int n_vars = nl.nVariables();\n    const auto & libmesh_system = nl.system();\n    auto cm = std::make_unique<CouplingMatrix>(n_vars);\n    if (time()<999)\n    {\n      for (unsigned int i = 0; i < n_vars; ++i)\n        (*cm)(i, i) =  1;\n        mooseWarning(time(),\"false\");\n    }\n    else\n    {\n      for (unsigned int i = 0; i < n_vars; ++i)\n        for (unsigned int j = 0; j < n_vars; ++j)\n          (*cm)(i, j) = 1;\n          mooseWarning(time(),\"true\");\n    }\n\n    for (const auto i : make_range(numNonlinearSystems()))\n    {\n      if (i == libMesh::cast_int<unsigned int>(numNonlinearSystems() - 1))\n        setCouplingMatrix(std::move(cm), i);\n      else\n        setCouplingMatrix(std::make_unique<CouplingMatrix>(*cm), i);\n    }\n    _reference_time=time();\n  }\n}\n\nI got an error after running a 3D example of mechanical thermal coupling\nTime Step 1, time = 0.05, dt = 0.05\n\n\n*** Warning ***\nThe following warning occurred in the object \"MOOSE Problem\", of type \"CSMPProblem\".\n\n0.05false\n 0 Nonlinear |R| = 5.623515e+05\nWe caught a libMesh error in ThreadedElementLoopBase:Assertion `_row_i < _mat.size()' failed.\n_row_i = 0\n_mat.size() = 0\n\n\nStack frames: 39\n0: libMesh::print_trace(std::ostream&)\n1: libMesh::MacroFunctions::report_error(char const*, int, char const*, char const*, std::ostream&)\n2: /home/lwz/projects/moose/framework/libmoose-dbg.so.0(+0x22aceee) [0x7fffefe79eee]\n3: Assembly::cacheJacobianBlock(libMesh::DenseMatrix<double>&, MooseVariableBase const&, MooseVariableBase const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned int)\n4: /home/lwz/projects/moose/framework/libmoose-dbg.so.0(+0x22d2720) [0x7fffefe9f720]\n5: Assembly::cacheJacobian()\n6: FEProblemBase::cacheJacobian(unsigned int)\n7: ComputeJacobianThread::postElement(libMesh::Elem const*)\n8: ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n9: NonlinearThread::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n10: /home/lwz/projects/moose/framework/libmoose-dbg.so.0(+0x1e23f19) [0x7fffef9f0f19]\n11: NonlinearSystemBase::computeJacobianInternal(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n12: NonlinearSystemBase::computeJacobianTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n13: FEProblemBase::computeJacobianTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n14: CSMPProblem::computeJacobianTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n\nI feel like I should initialize something, but I can't find it. look forward to your help once again.",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6640793",
                          "updatedAt": "2023-08-04T17:06:04Z",
                          "publishedAt": "2023-08-04T17:04:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "so you want to change the block structure of your matrix on the fly based on the postprocessor value? That will require an equation systems reinit for one. And then there is a lot of state that gets set during the initial setup of the problem, and some of it involves the coupling matrix. It may or may not be possible to to adjust that state after initial setup",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6640977",
                          "updatedAt": "2023-08-04T17:30:17Z",
                          "publishedAt": "2023-08-04T17:30:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Yes, for example, I use SMP(full=true) for the first time step and SMP(full=false) for the second time step.I use fewer Jacobi blocks in the second time step, relative to the first time step. Because calculating the Jacobian matrix is relatively time-consuming, so I want to compute less Jacobi blocks, is that possible?",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6641100",
                          "updatedAt": "2023-08-04T17:46:58Z",
                          "publishedAt": "2023-08-04T17:46:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If your code is public on github or gitlab then I can try to do some exploration",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6641387",
                          "updatedAt": "2023-08-04T18:26:56Z",
                          "publishedAt": "2023-08-04T18:26:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "I followed your instructions and built my own custom question.I uploaded the code file to github. Thank you for taking the time to help me",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6642167",
                          "updatedAt": "2023-08-04T20:16:54Z",
                          "publishedAt": "2023-08-04T20:16:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Try nuomi68/CSMPProblem#1",
                          "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6672681",
                          "updatedAt": "2023-08-08T19:00:53Z",
                          "publishedAt": "2023-08-08T19:00:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "nuomi68"
                  },
                  "bodyText": "My toggle preprocessing in the constructor doesn't work, so what can I do, reconstruct the preprocessing matrix at the beginning of each time step.",
                  "url": "https://github.com/idaholab/moose/discussions/25063#discussioncomment-6607945",
                  "updatedAt": "2023-08-01T17:04:48Z",
                  "publishedAt": "2023-08-01T16:40:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How are AuxVariables calculated from material (qp) data?",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "Is this documented anywhere? Maybe in libMesh? For instance I have a MaterialRealAux. The documentation says it is \"volume-averaged\", but the material property is defined point-wise (ie no shape functions). Tried to reverse-engineer this by taking the qp values from my material (got them from a VPP) and doing a simple average, but that does not match the value of my constant monomial aux variable on that element. Also how does it work for a higher-order aux variable?",
          "url": "https://github.com/idaholab/moose/discussions/25099",
          "updatedAt": "2023-08-15T21:49:15Z",
          "publishedAt": "2023-08-03T18:05:52Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You can compute the value of the material property at quadrature points then project back to some families. AuxKernels do that all the time, not just material properties aux\ni don\u2019t think we d\u00e9tail this in the documentation",
                  "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6630690",
                  "updatedAt": "2023-08-03T18:10:11Z",
                  "publishedAt": "2023-08-03T18:09:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "What's done for a simple constant monomial? Can you point to where this is done in the code? Looks like the Auxkernel returns the value, but I can't tell where that gets consumed.",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6630769",
                          "updatedAt": "2023-08-03T18:18:36Z",
                          "publishedAt": "2023-08-03T18:18:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in AuxKernel.C it gets consumed. There's a special case for const monomial",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6631413",
                          "updatedAt": "2023-08-03T19:57:49Z",
                          "publishedAt": "2023-08-03T19:57:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Is this the special case for const monomial? Looks like it's still doing some kind of quadrature. What rule does it use for monomials? I'm interested in both constant and first order.",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6631619",
                          "updatedAt": "2023-08-03T20:28:32Z",
                          "publishedAt": "2023-08-03T20:28:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yeah it s using the quadrature to compute an average\n1st order is right below. It attempts to do a least square-error minimizing projection",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6631861",
                          "updatedAt": "2023-08-03T21:09:17Z",
                          "publishedAt": "2023-08-03T21:05:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Follow up: what gets saved in the Exodus file at nodes for the elemental variable? Does it do some kind of averaging of each element's projection to the node (for all elements that contain the node)? If so, is it just a straight arithmetic average?",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641184",
                          "updatedAt": "2023-08-04T18:00:11Z",
                          "publishedAt": "2023-08-04T18:00:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That s a different topic.\nfor constant monomials, nothing I think. We would just do cell data. We don\u2019t need to have nodal data.\nbtw If you are trying to do projections between families you should use the ProjectionAux instead of relying on the auxkernel logic to do the right thing.\nFor higher order or different elemental families, it depends. Roy will know for each, which one do you care about?",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641659",
                          "updatedAt": "2023-08-04T19:21:59Z",
                          "publishedAt": "2023-08-04T19:06:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Right now I'm working backwards by taking the nodal values that are in the Exodus file for my material property and working backwards to try and figure out how they were calculated based on my qp. I'm really only interested up to first order, as well as the patch recovery method",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641816",
                          "updatedAt": "2023-08-04T19:27:20Z",
                          "publishedAt": "2023-08-04T19:27:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you put it in a nodal auxiliary variable, then use the ProjectionAux (which evaluates the nodal variable at qps then does the least square fitting), and see if that looks good for you?",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641826",
                          "updatedAt": "2023-08-04T19:28:32Z",
                          "publishedAt": "2023-08-04T19:28:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Oh can you do nodal aux variables from material properties? Didn't think about that. Still trying to figure out what my options are. Are there examples of that?",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641849",
                          "updatedAt": "2023-08-04T19:31:09Z",
                          "publishedAt": "2023-08-04T19:31:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh yeah no actually you cant.\nNot right now\nWe have a plan for functor material properties to be nodal though",
                          "url": "https://github.com/idaholab/moose/discussions/25099#discussioncomment-6641877",
                          "updatedAt": "2023-08-04T19:33:31Z",
                          "publishedAt": "2023-08-04T19:33:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The following material properties are declared on block 0 by multiple materials:",
          "author": {
            "login": "batodon"
          },
          "bodyText": "I'm reopening this ticket: #21477 because there wasn't a solution and I had the same error (shown below) after running my input file (attached).\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nThe following material properties are declared on block 0 by multiple materials:\n  Material Property             Material Objects\n  creep_strain                  EpsK_modLubby2 EspM_modLubby2 all_strain creep_strain_xx_all creep_strain_yy_all creep_strain_zz_all elastic_strain_yy_all stress_yy_all\n  effective_creep_strain        EpsK_modLubby2 EspM_modLubby2 all_strain creep_strain_xx_all creep_strain_yy_all creep_strain_zz_all elastic_strain_yy_all stress_yy_all\n\n\nStack frames: 14\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: callMooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, MooseApp*)\n3: /home/iyevugah/MOOSE/projects/moose/framework/libmoose-opt.so.0(+0x731b76) [0x7f986210ab76]\n4: FEProblemBase::checkDependMaterialsHelper(std::map<unsigned short, std::vector<std::shared_ptr<MaterialBase>, std::allocator<std::shared_ptr<MaterialBase> > >, std::less<unsigned short>, std::allocator<std::pair<unsigned short const, std::vector<std::shared_ptr<MaterialBase>, std::allocator<std::shared_ptr<MaterialBase> > > > > > const&)\n5: FEProblemBase::checkProblemIntegrity()\n6: Action::timedAct()\n7: ActionWarehouse::executeActionsWithAction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n8: ActionWarehouse::executeAllActions()\n9: MooseApp::runInputFile()\n10: MooseApp::run()\n11: main\n12: __libc_start_main\n13: ../simple_creep-opt(+0x33ef) [0x560f521c53ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor",
          "url": "https://github.com/idaholab/moose/discussions/22281",
          "updatedAt": "2023-08-07T22:34:16Z",
          "publishedAt": "2022-10-02T23:39:57Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ajacquey"
                  },
                  "bodyText": "I think you just need to add a base_name in your two materials  EpsK_modLubby2 and EspM_modLubby2 to differentiate the names given to the material properties (creep_strain).\nSee here for some info.",
                  "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-3789252",
                  "updatedAt": "2022-10-03T17:09:00Z",
                  "publishedAt": "2022-10-03T17:09:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "great! I got it. It works now. Thanks, @ajacquey \ud83d\udc4d :)",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-3789328",
                          "updatedAt": "2022-10-03T17:20:13Z",
                          "publishedAt": "2022-10-03T17:20:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nI saw the fix for this error was to add a base name to the materials. I was wondering if this was how you added them, as I am still receiving the error. I am trying to add two different heat sources as they have different paths and different parameters. Thank you.\nWendy\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nThe following material properties are declared on block 1 by multiple materials:\n  Material Property             Material Objects\n  volumetric_heat               volumetric_heat_1 volumetric_heat_2 \n\n  [volumetric_heat_1]\n    type = FunctionPathEllipsoidHeatSource\n    rx = ${r_x_1}\n    ry = ${r_y_1}\n    rz = ${r_z_1}\n    power = ${power_1}\n    efficiency = 0.8\n    factor = 0.5\n    function_x = heat_source_x_1\n    function_y = heat_source_y_1\n    function_z = heat_source_z_1\n    base_name = 'pass_1'\n  []\n\n  [volumetric_heat_2]\n    type = FunctionPathEllipsoidHeatSource\n    rx = ${r_x_2}\n    ry = ${r_y_2}\n    rz = ${r_z_2}\n    power = ${power_2}\n    efficiency = 0.8\n    factor = 0.5\n    function_x = heat_source_x_2\n    function_y = heat_source_y_2\n    function_z = heat_source_z_2\n    base_name = 'pass_2'\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6653051",
                          "updatedAt": "2023-08-06T22:43:41Z",
                          "publishedAt": "2023-08-06T22:43:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @Wendy-Ji. That\u2019s right. Have you tried using different or same blocks? Perhaps you can specify block =0 for [volumetric_heat_1] and block =1 for [volumetric_heat_2].",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6653112",
                          "updatedAt": "2023-08-06T23:04:18Z",
                          "publishedAt": "2023-08-06T23:04:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nFor my simulation I am modelling several passes on the same specimen, so I do need to apply the heat source to the same block. Since I do need to modify, for example, the powers in different passes, I think I need two different material blocks. I wasn't sure how else to implement this.\nWendy",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6653211",
                          "updatedAt": "2023-08-06T23:36:19Z",
                          "publishedAt": "2023-08-06T23:36:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nthere is no base_name parameter for this material\nhowever there is the declare_suffix parameter that you can use to disambiguate\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6654207",
                          "updatedAt": "2023-08-07T03:14:36Z",
                          "publishedAt": "2023-08-07T03:14:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nI have tried using the declare_suffix parameter, and the error is no longer there, but it looks like the second volumetric heat is not being read in. When I check them individually they seem to work, but in the below code for example, it looks like the first heat source heats the model, 'turns off' (moves far from the model at x= -1000), and the second heat source never 'turns on'. I was wondering what the problem here is? Thank you.\nWendy\n  [volumetric_heat_1]\n    type = FunctionPathEllipsoidHeatSource\n    rx = ${r_x_1}\n    ry = ${r_y_1}\n    rz = ${r_z_1}\n    power = ${power_1}\n    efficiency = 0.8\n    factor = 0.5\n    function_x = heat_source_x_1\n    function_y = heat_source_y_1\n    function_z = heat_source_z_1\n  []\n\n  [volumetric_heat_2]\n    type = FunctionPathEllipsoidHeatSource\n    rx = ${r_x_2}\n    ry = ${r_y_2}\n    rz = ${r_z_2}\n    power = ${power_2}\n    efficiency = 0.8\n    factor = 0.5\n    function_x = heat_source_x_2\n    function_y = heat_source_y_2\n    function_z = heat_source_z_2\n    declare_suffix = 'pass_2'\n  []\n\n[heat_source_x_1]\n    type = PiecewiseLinear\n    x = '0 58.27 58.28'\n    y = '0 0 -1000'\n  []\n  [heat_source_y_1]\n    type = PiecewiseLinear\n    x = '0 58.27'\n    y = '-3.91 -3.91'\n  []\n  [heat_source_z_1]\n    type = PiecewiseLinear\n    x= '0 58.27'\n    y = '-37 37'\n  []\n  [heat_source_x_2]\n    type = PiecewiseLinear\n    x = '1159.99 1160 1219.84 1219.85'\n    y = '-1000 0 0 -1000'\n  []\n  [heat_source_y_2]\n    type = PiecewiseLinear\n    x= '1160 1219.84'\n    y = '-2.05 -2.05'\n  []\n  [heat_source_z_2]\n    type = PiecewiseLinear\n    x= '1160 1219.84'\n    y = '-38 38'\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6655159",
                          "updatedAt": "2023-08-07T06:34:08Z",
                          "publishedAt": "2023-08-07T06:34:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You need to add a kernel for each heat source.\nAdding materials only makes the quantity available, it doesnt add it to the equations",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6660106",
                          "updatedAt": "2023-08-07T15:29:54Z",
                          "publishedAt": "2023-08-07T15:29:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nThank you, I see I forgot to add the suffixes to the kernels. Thank you so much for your help.\nWendy",
                          "url": "https://github.com/idaholab/moose/discussions/22281#discussioncomment-6663232",
                          "updatedAt": "2023-08-07T22:34:16Z",
                          "publishedAt": "2023-08-07T22:34:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Subdomain definitions in Periodic constraints",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Dear all,\nI am trying one of the constraint methods defined here https://mooseframework.inl.gov/source/constraints/PeriodicSegmentalConstraint.html to assign the periodic boundary conditions for my model whose mesh is contained in an exodus file. I am kind of stuck at how the parameters 'primary_subdomain' and 'secondary_subdomain', can be determined given that my mesh is not generated by moose and that the usage of 'SubdomainIDGenerator' can be in question. Could someone give some insights on how these parameters can be worked out for an external mesh?\nFYI, i had to look for various other methods of assigning periodic BC's, as the standard ones does not seem to reproduce periodicity when the mesh is refined. The square block example listed here can be looked upon that explains this problem.\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/25126",
          "updatedAt": "2023-08-07T16:31:54Z",
          "publishedAt": "2023-08-07T15:32:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nExternal meshes should also have subdomains.\nDo all your elements belong in the same subdomain in your mesh?\nAs mentioned in #18380, refinement is only likely to be supported if the nodes still line up, eg if the refinement is the same on both sides of the periodic boundary\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25126#discussioncomment-6660178",
                  "updatedAt": "2023-08-07T15:36:01Z",
                  "publishedAt": "2023-08-07T15:36:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi @GiudGiud,\nWell, i did create a single block for the whole FE in my model. Is that what you are referring to as subdomain? Looking at this, i guess that you want me to create a block (through curve) each for the periodic boundaries and use that in 'PeriodicSegmentalConstraint'.\nConcerning the refinement, as you can see the nodes still line up on that model in #18380, sadly the results aren't as good as the coarse model.",
                          "url": "https://github.com/idaholab/moose/discussions/25126#discussioncomment-6660429",
                          "updatedAt": "2023-08-07T16:00:54Z",
                          "publishedAt": "2023-08-07T16:00:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yes a subdomain is the same thing as a block.\nI m not familiar enough with PeriodicSegmentalConstraint\ncan you describe how you are planning to use it and we can tag an expert to validate that",
                          "url": "https://github.com/idaholab/moose/discussions/25126#discussioncomment-6660669",
                          "updatedAt": "2023-08-07T16:31:55Z",
                          "publishedAt": "2023-08-07T16:31:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Steay Calculation in THM",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "@joshuahansel  Hi Josh, I found the error in my code and I've fixed it. Now I'm testing the affect of some coefficients in the equations. I need the steady results but it costs so much time because I can only get the steady results by transient calculation(the benchmark has quite a number of channels).\nSo can you give any advice about how to change current FlowChannel1Phase into a steady version?\nEthan",
          "url": "https://github.com/idaholab/moose/discussions/25117",
          "updatedAt": "2023-08-07T13:28:49Z",
          "publishedAt": "2023-08-06T12:18:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "In general, you can:\n\nmake a Steady solve from a Transient one by removing time derivative kernels\nmake a Steady solve from a Transient one using a very very large dt (at the denominator in time derivatives)\n\nFor THM in particular I m not sure\nDoes THM not let you simply select a Steady executioner?",
                  "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6652014",
                  "updatedAt": "2023-08-06T17:41:03Z",
                  "publishedAt": "2023-08-06T17:38:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Thanks Giud.\n\nmake a Steady solve from a Transient one using a very very large dt (at the denominator in time derivatives)\n\nFor this strategy, the subchannel code can't solve the case whose dt is very large now.\n\nmake a Steady solve from a Transient one by removing time derivative kernels\n\nAnd for this one, I've tried to comment out the time derivative kernel in FlowModelSinglePhase. But the calculation does not converge when I try a single pipe steady case. Should I comment out the code which is related to the initial conditions?\n\nDoes THM not let you simply select a Steady executioner?\n\nI think not. When I select the steady executioner, the error info is:\n*** ERROR ***\nThe following error occurred in the object \"THM:problem\", of type \"THMProblem\".\n\nVector tag 'TIME' does not exist.\n\nThis may occur if you have a TimeKernel in your problem but did not specify a transient executioner.",
                          "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6653593",
                          "updatedAt": "2023-08-07T01:22:15Z",
                          "publishedAt": "2023-08-07T01:22:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you try initializing very close to the solution?\nSteady problem are harder to solve than Transient problems, initialization will help",
                          "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6654198",
                          "updatedAt": "2023-08-07T03:13:07Z",
                          "publishedAt": "2023-08-07T03:13:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "As for your error message, are you using an up-to-date version of THM? Steady support for FlowChannel1Phase was added roughly two months ago. It does require a decent initial guess to be successful (for example, don't guess the velocity to be zero). We have not exercised it much yet.",
                          "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6658409",
                          "updatedAt": "2023-08-07T12:59:48Z",
                          "publishedAt": "2023-08-07T12:59:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "Note that there are a lot of components that still do not support Steady. These should be able to be extended by optionally adding time kernels, as was done for FlowChannel1Phase.",
                          "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6658433",
                          "updatedAt": "2023-08-07T13:01:23Z",
                          "publishedAt": "2023-08-07T13:01:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud @joshuahansel I didn't check the update of THM recently. I will have a try in the up-to-date version of THM firstly.\nThank you all :)",
                          "url": "https://github.com/idaholab/moose/discussions/25117#discussioncomment-6658747",
                          "updatedAt": "2023-08-07T13:28:49Z",
                          "publishedAt": "2023-08-07T13:28:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Porous Flow] How to use persistent variable Zi for simulations involving more than one fluid component",
          "author": {
            "login": "batodon"
          },
          "bodyText": "During single or immiscible multiphase reactive transport simulation involving different fluid components, the geochemistry module provides updated mass fractions to the porous flow module as follows (See the GeoTes simulation, for example):\n[massfrac_from_geochem]\n  type = MultiAppCopyTransfer\n  source_variable = 'massfrac_Na massfrac_Cl massfrac_SiO2'\n  variable = 'f0 f1 f2'\n  from_multi_app = react\n[]\n\nIn miscible multiphase reactive transport flow, when we use the persistent variable Zi instead of the mass fraction, how does the persistent variable gets updated for the different components? Do we use three persistent variables (i.e., Zi, Zii, Ziii), each per component in the porous flow module or one suffices? For example:\nDifferent persistent variable Z for each component:\n  [massfrac_from_geochem]\n    type = MultiAppCopyTransfer\n    source_variable = 'massfrac_Na massfrac_Cl massfrac_SiO2'\n    variable = 'zi zii ziii'  \n    from_multi_app = react\n  []\n\nOne persistent variable Z for all components:\n  [massfrac_from_geochem]\n    type = MultiAppCopyTransfer\n    source_variable = = 'massfrac_Na massfrac_Cl massfrac_SiO2'\n    variable = 'zi zi zi'  \n    from_multi_app = react\n  []\n\nI ask because I\u2019m getting the following convergence error when I use a different persistent variable, Z, for each component:\n  Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                 PC failed due to FACTOR_OUTMEMORY\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n Solve Did NOT Converge!",
          "url": "https://github.com/idaholab/moose/discussions/25118",
          "updatedAt": "2023-08-06T23:29:53Z",
          "publishedAt": "2023-08-06T23:29:52Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Error \"trying to load vector name\"",
          "author": {
            "login": "Wendy-Ji"
          },
          "bodyText": "Hello,\nIn my output, I occasionally get the error shown in the image below. My run will then abort (see second image). When this error appears, usually I rerun the same input files and the error will no longer appear for the next run. I haven't been able to recreate this error deliberately. I was wondering if anyone knows what the issue could be? Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/25006",
          "updatedAt": "2023-08-06T22:29:03Z",
          "publishedAt": "2023-07-21T04:07:30Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nthis looks concerning, as if the name of the file was corrupted somehow.\nis this a recent version of moose?\nare you running a module or an an application?\nWhich MPI is this? Do you mind reporting on the output of the diagnostics script in moose/scripts?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6518321",
                  "updatedAt": "2023-07-22T20:48:51Z",
                  "publishedAt": "2023-07-22T20:48:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Wendy-Ji"
                  },
                  "bodyText": "Hello Guillaume,\nI last updated moose around three weeks ago. I'm not sure which version this is. I am running an application. I am using OpenMPI 4.1.2. Below is some of the output of the diagnostics script. Thank you.\nWendy",
                  "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6523974",
                  "updatedAt": "2023-07-24T02:28:26Z",
                  "publishedAt": "2023-07-24T02:28:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nIt would be better to paste the whole text from this\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6526166",
                          "updatedAt": "2023-07-24T07:44:30Z",
                          "publishedAt": "2023-07-24T07:44:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nHere is the whole text. I've deleted some of the addresses. Thank you.\nWendy\nNo LSB modules are available.\n\nSystem Arch: Distributor ID: Ubuntu Description: Ubuntu 22.04.2 LTS Release: 22.04 Codename: jammy\n\nMOOSE Package Version: Custom Build\n\nCPU Count: 192\n\nMemory Free: 723119.227 MB\n\n$CC not set\n\nMPICC:\nwhich mpicc:\n        /usr/bin/mpicc\nmpicc -show:\n        gcc -I/usr/lib/x86_64-linux-gnu/openmpi/include -I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi -L/usr/lib/x86_64-linux-gnu/openmpi/lib -lmpi\n\nCOMPILER gcc:\ngcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nPython:\n        /usr/bin/python\n        Python 3.10.6\n\nMODULES NOT AVAILABLE\n\nPETSC_DIR not set\n\nENVIRONMENT:\nSHELL=/bin/sh\nGTK_MODULES=appmenu-gtk-module\nPWD=/home/jiw/Software/moose/scripts\nLOGNAME=jiw\nXDG_SESSION_TYPE=tty\nMOOSE_DIR=/home/jiw/Software/moose\nMOTD_SHOWN=pam\nHOME=/home/jiw\nLANG=en_US.UTF-8\nLS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:\nBLACKBEAR_DIR=/home/jiw/Software/blackbear\nhttps_proxy=\nSSH_CONNECTION=\nNEML_DIR=/home/jiw/Software/neml\nLESSCLOSE=/usr/bin/lesspipe %s %s\nXDG_SESSION_CLASS=user\nTERM=xterm-256color\nLESSOPEN=| /usr/bin/lesspipe %s\nUSER=jiw\nSHLVL=1\nUBUNTU_MENUPROXY=1\nXDG_SESSION_ID=7666\nhttp_proxy=\nLD_LIBRARY_PATH=/home/jiw/Software/neml\nXDG_RUNTIME_DIR=/run/user/40698\nSSH_CLIENT=\nXDG_DATA_DIRS=/usr/share/gnome:/home/jiw/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop\nPATH=/home/jiw/.local/bin:/home/jiw/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\nDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/40698/bus\nSSH_TTY=/dev/pts/0\nOLDPWD=/home/jiw/Software\n_=/usr/bin/env",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6545796",
                          "updatedAt": "2023-07-26T12:01:01Z",
                          "publishedAt": "2023-07-26T00:42:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Since you are setting MOOSE_DIR, BLACKBEAR_DIR, and NEML_DIR, you will need to keep all three of these updated meticulously (I see no use of submodules except with PETSc and libMesh, and therefor you'll need to choose a version of MOOSE which is supposed to work with BLACKBEAR).\nThe very short LD_LIBRARY_PATH may be of concern. Since I see you have a PATH set to something generic looking into your home directory ~/.local/bin, but no corresponding LD_LIBRARY_PATH pointing to it. We can ignore this for now.\nI think the most important issue might be the fact you don't have any of the common CC, CXX, FC, etc variables set. That would cause strange occurrences when building libMesh without MPI (as this diagnostic report suggests), and then with MPI for the applications. I would suggest setting these variables, and rebuild libMesh.",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6550806",
                          "updatedAt": "2023-07-26T12:16:15Z",
                          "publishedAt": "2023-07-26T12:16:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nI have tried setting the CC variable to the path to gcc. The following now appears in the diagnostics.\nVariable `which $CC` check:\n/usr/bin/gcc\n\n$CC --version:\ngcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nWhen I tried to rebuild libMesh, it said to first rebuild PETSc. I'm not sure whether I was meant to get this warning.\n***** WARNING: CC (set to /usr/bin/gcc) found in environment variables - ignoring \nuse ./configure CC=$CC if you really want to use that value ******\n\nI just let it finish rebuilding, and then rebuilt libmesh. The error from before (with the symbols) still appears in the output.\nI then tried setting the CXX variable to the path to g++, but then libmesh was unable to rebuild.\n---------------------------------------------\n----- Configuring for optional packages -----\n---------------------------------------------\nchecking for built-in XDR support... no\nchecking for XDR support in /usr/include/tirpc... yes\nchecking for boostlib >= 1.57.0... yes\n<<< Using external boost installation >>>\nchecking for boost::movelib::unique_ptr support... yes\nnote: Checking /lib and /include for MPI\nnote: Could not find /lib/libmpi(.a/.so/.dylib)\n/usr/bin/g++ Compiler Does NOT Support MPI...\n<<< Found PETSc 3.16.6 installation in /home/jiw/Software/moose/scripts/../petsc ... >>>\nchecking whether we can compile a trivial PETSc program... no\nchecking for TAO support via PETSc... no\nconfigure: error: *** PETSc was not found, but --enable-petsc-required was specified.\nRunning make -j 96...\nmake: *** No targets specified and no makefile found.  Stop.\n\nI'm not sure what to set the variables (CC, CXX, FC, etc.) to, or what the rest of the variables are. Thank you.\nWendy",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6572066",
                          "updatedAt": "2023-07-28T05:01:56Z",
                          "publishedAt": "2023-07-28T05:01:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Set CC to mpicc, CXX to mpicxx and FC to mpif90",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6573083",
                          "updatedAt": "2023-07-28T07:38:19Z",
                          "publishedAt": "2023-07-28T07:38:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "/usr/bin/g++ Compiler Does NOT Support MPI...\n\nthis is part of your issue. You have to use mpi-wrapped compilers, not straight gcc/g++",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6584937",
                          "updatedAt": "2023-07-29T22:38:17Z",
                          "publishedAt": "2023-07-29T22:38:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nI have set the CC, CXX, and FC variables. I am still receiving the error, though this has again occurred at a point where the simulation has previously successfully run. Thank you.\nWendy\n*** ERROR ***\nTrying to load vector name Y\ufffd\u03b9^F\ufffd\ufffd\ufffd\ufffd^G{;I\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd6\ufffd\ufffd\n^F \ufffd    .\ufffd<\u032d\ufffd\ufffd\ufffdD\ufffd<$^T^Zr\ufffd\u0158<4\ufffd^W\ufffd^L\ufffdv<Y\u0632ku&\ufffd<\ufffd^Z\ufffd\ufffd\ufffd^R\ufffd<T\ufffd9V\ufffd^S\ufffd<\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd<Fs\ufffdq\ufffd\ufffd\ufffd<e\ufffdW\u05c6\ufffd\ufffd<^T^Q\ufffd^N\ufffd\u0323\ufffd\ufffd\ufffd{^R\ufffdG\ufffd<`\ufffd\ufffd\ufffd`y[\ufffd\ufffd$:\ufffd<^D^V\u0520\ufffd^W\ufffd\ufffd^@L[^T\ufffd^]^V\ufffdb7\ufffd^E\ufffd6\ufffd<^D\ufffd\ufffd^N\ufffd\ufffds\ufffd 0^E\ufffd`\ufffd\ufffd\ufffd^T\ufffd\ufffdS^T\ufffdo<-xE,S\ufffd\ufffd<\ufffd\ufffdi\ufffd\ufffd\ufffd\ufffd<x\ufffd\ufffd^O\ufffd<\ufffd\ufffdkv\ufffd\u0440H\ufffd\ufffd^U^GS^Y\ufffd6\ufffd<\ufffd\ufffd\ufffdg\ufffdx\ufffd<\ufffd5>qA\u04a9\ufffdZr7^B\ufffd\ufffd\ufffd\ufffd^Pvx\ufffd^@\ufffdC<\ufffd\ufffd\ufffds;\ufffd\ufffd\ufffd `Q\ufffdA\"\ufffd\ufffd\ufffd\ufffd\ufffd^Qm\ufffd\ufffd\ufffd\ufffd*\ufffd$^Gfx<\ufffdn~^G\ufffdh\ufffd\ufffdf\\\ufffdM^UN\ufffd<\ufffd^U\ufffd^S&r\ufffd\ufffdx\ufffd\ufffd^S\ufffd^E\ufffd\ufffdY\ufffd\ufffdV\u0167\ufffd\ufffd\ufffdb1{\ufffd\ufffd\ufffd<>\ufffd\ufffd^?>\ufffd\ufffd^P\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u032d<e\ufffd\ufffdh~\ufffd\ufffd\ufffd^E\ufffd\ufffdi\ufffd%\ufffd<\ufffd\ufffd\ufffda^O\ufffd\ufffd\ufffd^O%\ufffd^O\ufffd^?\ufffd\ufffd\u045dr@\ufffdK\ufffd<\ufffd\ufffd\ufffd\n\u0468\ufffd\ufffdg\ufffd\ufffdK^Z\ufffd<^G\ufffd\ufffd\ufffd^XB\ufffd<r\ufffdu\ufffdYB\ufffd<^TEV\ufffd\ufffd\ufffd\ufffd<\ufffdw\ufffdAW\ufffd\ufffd\ufffd\ufffdV\ufffd \u0637\ufffd<\ufffd\ufffdr^T\ufffd)\ufffd\ufffdp\ufffdfj^?h\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd \ufffd\ufffdr\ufffd\ufffdG^Q\ufffd<\ufffd\ufffd;M^[\ufffd\ufffd<^V^Rf\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd^F\ufffd\ufffdl5\ufffd<>\ufffd\ufffd\ufffd~\ufffdo\ufffd\ufffdf<\ufffd\u0220:\ufffd\ufffd\ufffd<\u053b\ufffd\ufffday\ufffd<H^C0\ufffdO2z<;^N+\ufffd\ufffd\u01f6<j+\ufffd4\ufffd-\ufffd<\ufffd\u017b\ufffd\ufffd\ufffd\ufffd\ufffd@\ufffdY\ufffd\ufffd\ufffd{<\ufffd?KE\ufffd\ufffd\ufffd\ufffd3l\ufffds\ufffd <\ufffd^Oc\u02c1\ufffd\ufffd\ufffd^]\ufffd\ufffd\ufffd+[\ufffd<\ufffd\ufffd}\ufffdW<\ufffd\ufffd\ufffd^_^C\ufffd\ufffdE\ufffd\ufffd^>/\ufffdt\ufffd<^R\u04fa\u01aaU\ufffd<\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffd<\ufffd=^KN^R@\ufffd\ufffd\ufffd\u0719=^P[\ufffd<^E4^_\ufffd\ufffd^Lz\ufffd\ufffd\ufffd\ufffd51c\ufffd\ufffd\ufffd uV\ufffd\ufffd\ufffd\ufffd\ufffd^N}\ufffd^FF\ufffd<\u041b\ufffd\ufffd^^'\ufffd\ufffd\ufffd|\ufffd\ufffdf\u0230<\ufffdjC\ufffd'\ufffd~\ufffd\ufffdt\ufffd\ufffd\ufffd\uf53c^Q\ufffdG\ufffd\ufffd\u03f9\ufffd\ufffd1N>\ufffdI\ufffd<\ufffd6\ufffdx\ufffdv\ufffd<\ufffd\ufffd  >QE\ufffd<\ufffd\ufffd\ufffd^S\ufffd\u020b\ufffd\ufffd^\ufffd3^[\ufffd\ufffd\ufffd\ufffd4`\ufffd^B`\ufffd<\ufffd\ufffdR\ufffd\ufffdx\ufffd<\u0636{\ufffdYO\ufffd<3\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffdtb\ufffd\ufffd\ufffd\ufffd<Cb\ufffd^DB\u7e7cP\ufffd\ufffdD^C\ufffdD\ufffd*\ufffd\ufffd^K\ufffdw\ufffd<1\ufffd\ufffd\ufffd6\u072f\ufffd\ufffd\ufffdr\ufffd>q\ufffd\ufffd\ufffd<^Q\ufffd<\ufffd^R\ufffd\ufffd<\u02ba\ufffd\ufffd\ufffd8\ufffd\ufffd\ufffda\ufffd}\n\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffdg\ufffd<\ufffd\u042f\ufffd^EmI<\ufffd>\ufffd\ufffdr\ufffd\ufffd<\ufffd\ufffd\ufffd\ue065\ufffd<]\ufffd1-\ufffd\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd\u02a7<\ufffdW0dcp\ufffd\ufffdP+F\ufffdu}\ufffd\ufffd^H^W\ufffd/^P(\ufffd<4!\ufffd\ufffd2\ufffd\ufffd\ufffd$\ufffd$\u0201/\ufffd\ufffd0\ufffd\\\ufffd^A\ufffd\ufffd<r\ufffd\u04c0\ufffds\ufffd<\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffd<\ufffd[>\ufffd\ufffd6^\ufffd<^B=\ufffdB\ufffdR\ufffd\ufffd\u0600\ufffd\ufffds\ufffds\ufffd*\ufffdZq\ufffd^K\ufffd<\ufffd\ufffd\ufffd|;^]\ufffd<\ufffd6 \ufffd\ufffd\ufffd\ufffd<\ufffd\u054e\ufffd\ufffd\ufffd\u02bch&NAS\ufffd\ufffd\ufffdO\ufffdX\ufffd^L\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<j\ufffd\ufffd\ufffd^N/\ufffd<\ufffd^Z\ufffd\ufffd^M\u00ef<\ufffd?\ufffd\ufffdV+\ufffd<4M^M\ufffd\ufffd\ufffd\ufffd\ufffdh>^@^@^@RHS VectorX7J\ufffdL\ufffd\u02bcRK\ufffd\ufffd\ufffd^A\ufffd\ufffdO^_\ufffdB\ufffd\u06c8\ufffd#vd\ufffd,\ufffd\ufffd<N53^Y>^H\u00fcr^|@\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffdT3t\ufffd<\ufffd}\ufffd{\ufffda\ufffd<\ufffd\ufffd\ufffd\ufffd!\ufffd\ufffd\ufffd^V\ufffd^@\ufffd\ufffd^Y\ufffd<`\u06de%^R\u04b4\ufffd(\ufffdI_9%\ufffd\ufffd>\ufffd\ufffd      \ufffd^L\ufffd\ufffd^A^S\ufffd\ufffd\u3273\ufffd^A\ufffd^@\ufffd\ufffdT\ufffd<`\ufffd,\ufffd^M\u0613\ufffd7^V\ufffdak\ufffd\ufffd<\ufffd\ufffd\ufffd}^T\ufffd\ufffd<`@\ufffd|+\ufffd\ufffd\ufffd\ufffd\ufffdB[@8\ufffd\ufffd8\ufffd\n^?q\ufffdz\ufffdl\ufffd\ufffd^_@C\ufffd<\ufffd^L\ufffd\ufffd3\n\ufffd\ufffdbO)\ufffd^\ufffd\ufffd<L^S\u060fH\ufffd\u013c\ufffd=\ufffd\ufffd\ufffd`\ufffd\ufffd\u07ad(\ufffdZF\ufffd\ufffd\ufffd^O\ufffd0^C^Q\ufffd<\ufffd\ufffd\ufffd^[\ufffd^C^?\ufffd:L:\u048c\ufffd\ufffd\ufffd\ufffdu\ufffd\u0647\u527cI\ufffdM\ufffdm=\ufffd\ufffd$\ufffd\ufffd.!e\ufffd\ufffdVO=W^?O\ufffd<\ufffd\ufffd2^B_\ufffd\ufffd\ufffd\ufffd<F\ufffdo^YV<2\ufffdP\udbbf\udeb2<\n\ufffd[\u00bc\ufffdeH\ufffd^@\ufffd\ufffd<\"^\ufffd\ufffd\\\ufffd\ufffd\ufffdH^^3\ufffdla\ufffd<l^@F\ufffd1^S\ufffd<N\ufffd\ufffdr\ufffd\ufffd\ufffd<\ufffd\u05d1\ufffd^R^G\ufffd\ufffd^Vd\ufffd\u04cbW\ufffd<^^\ufffd^[\ufffd^XD\ufffd<+\ufffd\ufffd\ufffd\ufffd%\ufffd\ufffd,^^*\ufffd\ufffd^P\ufffd\ufffdZ-<T\ufffd\u0570<oyc^V)\ufffd\ufffd\ufffd\ufffd}N\ufffdg\u00e9>\ufffd\ufffd^^\ufffd\ufffd\ufffd<8to$^K\ufffd\ufffd\ufffd\ufffd^Z\u00c2^N\ufffd\ufffd\ufffd^@\ufffd\u066d\ufffd^Z\ufffd<^A^W\ufffd6\ufffd\ufffd<\ufffd\ufffdX]\ufffd*\ufffd<\ufffd\ufffd\ufffd~J\ufffd\ufffd\ufffd\ufffd\ufffd.n{\ufffd\ufffd< X'\ufffd<v\ufffd\ufffd^ZQ\u0468{|\ufffd<\ufffd\ufffd\ufffd\ufffd^F\ue9bchG\ufffd{=^?\ufffd<\ufffd \ufffdI\ufffd+\ufffd<2^W\ufffd?n\u072b>\ufffd<\ufffd\u06dfKob\ufffd<\ufffd \ufffd[\ufffd<\ufffd\ufffd\ufffd\ufffdA}\ufffd<6\ufffd\ufffdJ'\u017a<\ufffd^N!\ufffdY\ufffdm<\ufffd\ufffd\ufffd\ufffd\"\ufffd\ufffd<\ufffd\ufffd ^EV\u787c\ufffd^B\ufffd\ufffd\ufffd$\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd^P\ufffd\ufffd?mX\ufffd^Y\ufffd\ufffd<1\ufffdCT^?^H\ufffd\ufffdP^?N\ufffd\ufffd^Dc\ufffdB\ufffd\u060fSB\ufffd\ufffd\ufffd\ufffd\ufffdr\ufffd5\ufffd^F \ufffd    .\ufffd<\u032d\ufffd\ufffd\ufffdD\ufffd<$^T^Zr\ufffd\u0158<4\ufffd^W\ufffd^L\ufffdv<Y\u0632ku&\ufffd<\ufffd^Z\ufffd\ufffd\ufffd^R\ufffd<T\ufffd9V\ufffd^S\ufffd<\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd<Fs\ufffdq\ufffd\ufffd\ufffd<e\ufffdW\u05c6\ufffd\ufffd<^T^Q\ufffd^N\ufffd\u0323\ufffd\ufffd\ufffd{^R\ufffdG\ufffd<`\ufffd\ufffd\ufffd`y[\ufffd\ufffd$:\ufffd<^D^V\u0520\ufffd^W\ufffd\ufffd^@L[^T\ufffd^]^V\ufffdb7\ufffd^E\ufffd6\ufffd<^D\ufffd\ufffd^N\ufffd\ufffds\ufffd 0^E\ufffd`\ufffd\ufffd\ufffd^T\ufffd\ufffdS^T\ufffdo<-xE,S\ufffd\ufffd<\ufffd\ufffdi\ufffd\ufffd\ufffd\ufffd<x\ufffd\ufffd^O\ufffd<\ufffd\ufffdkv\ufffd\u0440H\ufffd\ufffd^U^GS^Y\ufffd6\ufffd<\ufffd\ufffd\ufffdg\ufffdx\ufffd<\ufffd5>qA\u04a9\ufffdZr7^B\ufffd\ufffd\ufffd\ufffd^Pvx\ufffd^@\ufffdC<\ufffd\ufffd\ufffds;\ufffd\ufffd\ufffd `Q\ufffdA\"\ufffd\ufffd\ufffd\ufffd\ufffd^Qm\ufffd\ufffd\ufffd\ufffd*\ufffd$^Gfx<\ufffdn~^G\ufffdh\ufffd\ufffdf\\\ufffdM^UN\ufffd<\ufffd^U\ufffd^S&r\ufffd\ufffdx\ufffd\ufffd^S\ufffd^E\ufffd\ufffdY\ufffd\ufffdV\u0167\ufffd\ufffd\ufffdb1{\ufffd\ufffd\ufffd<>\ufffd\ufffd^?>\ufffd\ufffd^P\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u032d<e\ufffd\ufffdh~\ufffd\ufffd\ufffd^E\ufffd\ufffdi\ufffd%\ufffd<\ufffd\ufffd\ufffda^O\ufffd\ufffd\ufffd^O%\ufffd^O\ufffd^?\ufffd\ufffd\u045dr@\ufffdK\ufffd<\ufffd\ufffd\ufffd\n\u0468\ufffd\ufffdg\ufffd\ufffdK^Z\ufffd<^G\ufffd\ufffd\ufffd^XB\ufffd<r\ufffdu\ufffdYB\ufffd<^TEV\ufffd\ufffd\ufffd\ufffd<\ufffdw\ufffdAW\ufffd\ufffd\ufffd\ufffdV\ufffd \u0637\ufffd<\ufffd\ufffdr^T\ufffd)\ufffd\ufffdp\ufffdfj^?h\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffd \ufffd\ufffdr\ufffd\ufffdG^Q\ufffd<\ufffd\ufffd;M^[\ufffd\ufffd<^V^Rf\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd^F\ufffd\ufffdl5\ufffd<>\ufffd\ufffd\ufffd~\ufffdo\ufffd\ufffdf<\ufffd\u0220:\ufffd\ufffd\ufffd<\u053b\ufffd\ufffday\ufffd<H^C0\ufffdO2z<;^N+\ufffd\ufffd\u01f6<j+\ufffd4\ufffd-\ufffd<\ufffd\u017b\ufffd\ufffd\ufffd\ufffd\ufffd@\ufffdY\ufffd\ufffd\ufffd{<\ufffd?KE\ufffd\ufffd\ufffd\ufffd3l\ufffds\ufffd <\ufffd^Oc\u02c1\ufffd\ufffd\ufffd^]\ufffd\ufffd\ufffd+[\ufffd<\ufffd\ufffd}\ufffdW<\ufffd\ufffd\ufffd^_^C\ufffd\ufffdE\ufffd\ufffd^>/\ufffdt\ufffd<^R\u04fa\u01aaU\ufffd<\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffd<\ufffd=^KN^R@\ufffd\ufffd\ufffd\u0719=^P[\ufffd<^E4^_\ufffd\ufffd^Lz\ufffd\ufffd\ufffd\ufffd51c\ufffd\ufffd\ufffd uV\ufffd\ufffd\ufffd\ufffd\ufffd^N}\ufffd^FF\ufffd<\u041b\ufffd\ufffd^^'\ufffd\ufffd\ufffd|\ufffd\ufffdf\u0230<\ufffdjC\ufffd'\ufffd~\ufffd\ufffdt\ufffd\ufffd\ufffd\uf53c^Q\ufffdG\ufffd\ufffd\u03f9\ufffd\ufffd1N>\ufffdI\ufffd<\ufffd6\ufffdx\ufffdv\ufffd<\ufffd\ufffd  >QE\ufffd<\ufffd\ufffd\ufffd^S\ufffd\u020b\ufffd\ufffd^\ufffd3^[\ufffd\ufffd\ufffd\ufffd4`\ufffd^B`\ufffd<\ufffd\ufffdR\ufffd\ufffdx\ufffd<\u0636{\ufffdYO\ufffd<3\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffdtb\ufffd\ufffd\ufffd\ufffd<Cb\ufffd^DB\u7e7cP\ufffd\ufffdD^C\ufffdD\ufffd*\ufffd\ufffd^K\ufffdw\ufffd<1\ufffd\ufffd\ufffd6\u072f\ufffd\ufffd\ufffdr\ufffd>q\ufffd\ufffd\ufffd<^Q\ufffd<\ufffd^R\ufffd\ufffd<\u02ba\ufffd\ufffd\ufffd8\ufffd\ufffd\ufffda\ufffd}\n\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffdg\ufffd<\ufffd\u042f\ufffd^EmI<\ufffd>\ufffd\ufffdr\ufffd\ufffd<\ufffd\ufffd\ufffd\ue065\ufffd<]\ufffd1-\ufffd\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd\u02a7<\ufffdW0dcp\ufffd\ufffdP+F\ufffdu}\ufffd\ufffd^H^W\ufffd/^P(\ufffd<4!\ufffd\ufffd2\ufffd\ufffd\ufffd$\ufffd$\u0201/\ufffd\ufffd0\ufffd\\\ufffd^A\ufffd\ufffd<r\ufffd\u04c0\ufffds\ufffd<\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffd<\ufffd[>\ufffd\ufffd6^\ufffd<^B=\ufffdB\ufffdR\ufffd\ufffd\u0600\ufffd\ufffds\ufffds\ufffd*\ufffdZq\ufffd^K\ufffd<\ufffd\ufffd\ufffd|;^]\ufffd<\ufffd6 \ufffd\ufffd\ufffd\ufffd<\ufffd\u054e\ufffd\ufffd\ufffd\u02bch&NAS\ufffd\ufffd\ufffdO\ufffdX\ufffd^L\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<j\ufffd\ufffd\ufffd^N/\ufffd<\ufffd^Z\ufffd\ufffd^M\u00ef<\ufffd?\ufffd\ufffdV+\ufffd<4M^M\ufffd\ufffd\ufffd\ufffd\ufffdh>^@^@^@RHS Vector^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^>\n\n--------------------------------------------------------------------------\nMPI_ABORT was invoked on rank 0 in communicator MPI_COMM_WORLD\nwith errorcode 1.\n\nNOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.\nYou may or may not see output from other processes, depending on\nexactly when Open MPI kills them.\n--------------------------------------------------------------------------",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6602103",
                          "updatedAt": "2023-08-01T06:48:47Z",
                          "publishedAt": "2023-08-01T06:48:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "With the variables now set, can you post the new diagnostic log?\n/home/jiw/Software/moose/scripts/libmesh_diagnostic.log\n\nAlso, can you display what libraries your application is linking to? You can do so through the use of ldd. Since I don't know what application you are running, I'll demonstrate with moose_test-opt:\nldd /home/jiw/Software/moose/test/moose_test-opt\nPlease replace the above with your application!",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6604902",
                          "updatedAt": "2023-08-01T12:12:19Z",
                          "publishedAt": "2023-08-01T12:12:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Hello,\nI am using the blackbear app (libraries are shown first). I am also using a custom app I've called tg4 (libraries shown second). I tried getting the diagnostics log but I got permission denied. I will try and figure out how to get the diagnostics log.\n\nI'm also not sure if this is relevant, but for a different simulation which previously showed this same error, I fixed some of the input file and the error now shows that it is unable to load vector name 'SOLUTION STATE 2'.  I'm not sure how to fix this. I can start a new discussion for that if it doesn't really relate to this.\nThank you.\nWendy\n:/data2/jiw$ ldd ~/Software/blackbear/blackbear-opt\n        linux-vdso.so.1 (0x00007ffe6cde1000)\n        libblackbear_test-opt.so.0 => /data2/jiw/Software/blackbear/test/lib/libblackbear_test-opt.so.0 (0x00007f9c909da000)\n        libblackbear-opt.so.0 => /data2/jiw/Software/blackbear/lib/libblackbear-opt.so.0 (0x00007f9c9084e000)\n        libmodule_loader_with_ray_st_hc_tm_con_misc_xfem-opt.so.0 => /home/jiw/Software/moose/modules/module_loader/lib/libmodule_loader_with_ray_st_hc_tm_con_misc_xfem-opt.so.0 (0x00007f9c9082c000)\n        libxfem-opt.so.0 => /home/jiw/Software/moose/modules/xfem/lib/libxfem-opt.so.0 (0x00007f9c90570000)\n        libmisc-opt.so.0 => /home/jiw/Software/moose/modules/misc/lib/libmisc-opt.so.0 (0x00007f9c904d1000)\n        libcontact-opt.so.0 => /home/jiw/Software/moose/modules/contact/lib/libcontact-opt.so.0 (0x00007f9c902d0000)\n        libtensor_mechanics-opt.so.0 => /home/jiw/Software/moose/modules/tensor_mechanics/lib/libtensor_mechanics-opt.so.0 (0x00007f9c8f4af000)\n        libheat_conduction-opt.so.0 => /home/jiw/Software/moose/modules/heat_conduction/lib/libheat_conduction-opt.so.0 (0x00007f9c8f135000)\n        libstochastic_tools-opt.so.0 => /home/jiw/Software/moose/modules/stochastic_tools/lib/libstochastic_tools-opt.so.0 (0x00007f9c8eb96000)\n        libray_tracing-opt.so.0 => /home/jiw/Software/moose/modules/ray_tracing/lib/libray_tracing-opt.so.0 (0x00007f9c8e9b5000)\n        libmoose-opt.so.0 => /home/jiw/Software/moose/framework/libmoose-opt.so.0 (0x00007f9c8c5c7000)\n        libpcre-opt.so.0 => /home/jiw/Software/moose/framework/contrib/pcre/libpcre-opt.so.0 (0x00007f9c8c599000)\n        libhit-opt.so.0 => /home/jiw/Software/moose/framework/contrib/hit/libhit-opt.so.0 (0x00007f9c8c546000)\n        libneml-opt.so.0 => /home/jiw/Software/neml/libneml-opt.so.0 (0x00007f9c8c2e7000)\n        libmesh_opt.so.0 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0 (0x00007f9c8af4c000)\n        libnetcdf.so.13 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libnetcdf.so.13 (0x00007f9c8ae2d000)\n        libsz.so.2 => /lib/x86_64-linux-gnu/libsz.so.2 (0x00007f9c8ae10000)\n        libtimpi_opt.so.11 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libtimpi_opt.so.11 (0x00007f9c8adef000)\n        libslepc.so.3.16 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libslepc.so.3.16 (0x00007f9c8aa3a000)\n        libpetsc.so.3.16 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libpetsc.so.3.16 (0x00007f9c892a6000)\n        libHYPRE-2.23.0.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libHYPRE-2.23.0.so (0x00007f9c88e94000)\n        libstrumpack.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libstrumpack.so (0x00007f9c885ad000)\n        libsuperlu_dist.so.7 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libsuperlu_dist.so.7 (0x00007f9c88493000)\n        libhdf5_hl.so.200 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libhdf5_hl.so.200 (0x00007f9c8846d000)\n        libhdf5.so.200 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libhdf5.so.200 (0x00007f9c87fe2000)\n        libparmetis.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libparmetis.so (0x00007f9c87f9f000)\n        libmetis.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libmetis.so (0x00007f9c87f39000)\n        libX11.so.6 => /lib/x86_64-linux-gnu/libX11.so.6 (0x00007f9c87df9000)\n        libmpi_usempif08.so.40 => /lib/x86_64-linux-gnu/libmpi_usempif08.so.40 (0x00007f9c87dbb000)\n        libmpi_usempi_ignore_tkr.so.40 => /lib/x86_64-linux-gnu/libmpi_usempi_ignore_tkr.so.40 (0x00007f9c87daf000)\n        libmpi_mpifh.so.40 => /lib/x86_64-linux-gnu/libmpi_mpifh.so.40 (0x00007f9c87d47000)\n        libmpi.so.40 => /lib/x86_64-linux-gnu/libmpi.so.40 (0x00007f9c87c10000)\n        libopen-rte.so.40 => /lib/x86_64-linux-gnu/libopen-rte.so.40 (0x00007f9c87b53000)\n        libopen-pal.so.40 => /lib/x86_64-linux-gnu/libopen-pal.so.40 (0x00007f9c87aa0000)\n        libhwloc.so.15 => /lib/x86_64-linux-gnu/libhwloc.so.15 (0x00007f9c87a44000)\n        libevent_core-2.1.so.7 => /lib/x86_64-linux-gnu/libevent_core-2.1.so.7 (0x00007f9c87a0f000)\n        libevent_pthreads-2.1.so.7 => /lib/x86_64-linux-gnu/libevent_pthreads-2.1.so.7 (0x00007f9c87a08000)\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f9c879ec000)\n        libgfortran.so.5 => /lib/x86_64-linux-gnu/libgfortran.so.5 (0x00007f9c87711000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f9c876f1000)\n        libquadmath.so.0 => /lib/x86_64-linux-gnu/libquadmath.so.0 (0x00007f9c876a9000)\n        libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f9c8747f000)\n        libtirpc.so.3 => /lib/x86_64-linux-gnu/libtirpc.so.3 (0x00007f9c8744f000)\n        libmpi_cxx.so.40 => /lib/x86_64-linux-gnu/libmpi_cxx.so.40 (0x00007f9c87435000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f9c8734e000)\n        libgomp.so.1 => /lib/x86_64-linux-gnu/libgomp.so.1 (0x00007f9c87304000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9c870dc000)\n        libaec.so.0 => /lib/x86_64-linux-gnu/libaec.so.0 (0x00007f9c870d1000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f9c90a68000)\n        libxcb.so.1 => /lib/x86_64-linux-gnu/libxcb.so.1 (0x00007f9c870a7000)\n        libudev.so.1 => /lib/x86_64-linux-gnu/libudev.so.1 (0x00007f9c8707d000)\n        libgssapi_krb5.so.2 => /lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f9c87027000)\n        libXau.so.6 => /lib/x86_64-linux-gnu/libXau.so.6 (0x00007f9c87021000)\n        libXdmcp.so.6 => /lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007f9c87019000)\n        libkrb5.so.3 => /lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f9c86f4e000)\n        libk5crypto.so.3 => /lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f9c86f1f000)\n        libcom_err.so.2 => /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f9c86f17000)\n        libkrb5support.so.0 => /lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f9c86f09000)\n        libbsd.so.0 => /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f9c86ef1000)\n        libkeyutils.so.1 => /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f9c86eea000)\n        libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f9c86ed6000)\n        libmd.so.0 => /lib/x86_64-linux-gnu/libmd.so.0 (0x00007f9c86ec7000)\n\n        linux-vdso.so.1 (0x00007ffc8c9da000)\n        libtg4_test-opt.so.0 => /data2/jiw/M3Jobs/custom_app/tg4/test/lib/libtg4_test-opt.so.0 (0x00007f4270eb7000)\n        libtg4-opt.so.0 => /data2/jiw/M3Jobs/custom_app/tg4/lib/libtg4-opt.so.0 (0x00007f4270e3f000)\n        libmodule_loader_with_ls_ray_hc_tm-opt.so.0 => /home/jiw/Software/moose/modules/module_loader/lib/libmodule_loader_with_ls_ray_hc_tm-opt.so.0 (0x00007f4270e1c000)\n        libtensor_mechanics-opt.so.0 => /home/jiw/Software/moose/modules/tensor_mechanics/lib/libtensor_mechanics-opt.so.0 (0x00007f426fffd000)\n        libheat_conduction-opt.so.0 => /home/jiw/Software/moose/modules/heat_conduction/lib/libheat_conduction-opt.so.0 (0x00007f426fc83000)\n        libray_tracing-opt.so.0 => /home/jiw/Software/moose/modules/ray_tracing/lib/libray_tracing-opt.so.0 (0x00007f426faa2000)\n        liblevel_set-opt.so.0 => /home/jiw/Software/moose/modules/level_set/lib/liblevel_set-opt.so.0 (0x00007f426f9ca000)\n        libmoose-opt.so.0 => /home/jiw/Software/moose/framework/libmoose-opt.so.0 (0x00007f426d5da000)\n        libpcre-opt.so.0 => /home/jiw/Software/moose/framework/contrib/pcre/libpcre-opt.so.0 (0x00007f426d5ac000)\n        libhit-opt.so.0 => /home/jiw/Software/moose/framework/contrib/hit/libhit-opt.so.0 (0x00007f426d55b000)\n        libmesh_opt.so.0 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0 (0x00007f426c1c0000)\n        libnetcdf.so.13 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libnetcdf.so.13 (0x00007f426c0a1000)\n        libsz.so.2 => /lib/x86_64-linux-gnu/libsz.so.2 (0x00007f426c084000)\n        libtimpi_opt.so.11 => /home/jiw/Software/moose/scripts/../libmesh/installed/lib/libtimpi_opt.so.11 (0x00007f426c061000)\n        libslepc.so.3.16 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libslepc.so.3.16 (0x00007f426bcae000)\n        libpetsc.so.3.16 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libpetsc.so.3.16 (0x00007f426a51a000)\n        libHYPRE-2.23.0.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libHYPRE-2.23.0.so (0x00007f426a108000)\n        libstrumpack.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libstrumpack.so (0x00007f4269821000)\n        libsuperlu_dist.so.7 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libsuperlu_dist.so.7 (0x00007f4269707000)\n        libhdf5_hl.so.200 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libhdf5_hl.so.200 (0x00007f42696df000)\n        libhdf5.so.200 => /data2/jiw/Software/moose/petsc/arch-moose/lib/libhdf5.so.200 (0x00007f4269256000)\n        libparmetis.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libparmetis.so (0x00007f4269213000)\n        libmetis.so => /data2/jiw/Software/moose/petsc/arch-moose/lib/libmetis.so (0x00007f42691ad000)\n        libX11.so.6 => /lib/x86_64-linux-gnu/libX11.so.6 (0x00007f426906d000)\n        libmpi_usempif08.so.40 => /lib/x86_64-linux-gnu/libmpi_usempif08.so.40 (0x00007f426902f000)\n        libmpi_usempi_ignore_tkr.so.40 => /lib/x86_64-linux-gnu/libmpi_usempi_ignore_tkr.so.40 (0x00007f4269021000)\n        libmpi_mpifh.so.40 => /lib/x86_64-linux-gnu/libmpi_mpifh.so.40 (0x00007f4268fbb000)\n        libmpi.so.40 => /lib/x86_64-linux-gnu/libmpi.so.40 (0x00007f4268e84000)\n        libopen-rte.so.40 => /lib/x86_64-linux-gnu/libopen-rte.so.40 (0x00007f4268dc7000)\n        libopen-pal.so.40 => /lib/x86_64-linux-gnu/libopen-pal.so.40 (0x00007f4268d14000)\n        libhwloc.so.15 => /lib/x86_64-linux-gnu/libhwloc.so.15 (0x00007f4268cb8000)\n        libevent_core-2.1.so.7 => /lib/x86_64-linux-gnu/libevent_core-2.1.so.7 (0x00007f4268c81000)\n        libevent_pthreads-2.1.so.7 => /lib/x86_64-linux-gnu/libevent_pthreads-2.1.so.7 (0x00007f4268c7c000)\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f4268c60000)\n        libgfortran.so.5 => /lib/x86_64-linux-gnu/libgfortran.so.5 (0x00007f4268985000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f4268965000)\n        libquadmath.so.0 => /lib/x86_64-linux-gnu/libquadmath.so.0 (0x00007f426891d000)\n        libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f42686f1000)\n        libtirpc.so.3 => /lib/x86_64-linux-gnu/libtirpc.so.3 (0x00007f42686c3000)\n        libmpi_cxx.so.40 => /lib/x86_64-linux-gnu/libmpi_cxx.so.40 (0x00007f42686a9000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f42685c2000)\n        libgomp.so.1 => /lib/x86_64-linux-gnu/libgomp.so.1 (0x00007f4268578000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4268350000)\n        libaec.so.0 => /lib/x86_64-linux-gnu/libaec.so.0 (0x00007f4268345000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f4270ef9000)\n        libxcb.so.1 => /lib/x86_64-linux-gnu/libxcb.so.1 (0x00007f426831b000)\n        libudev.so.1 => /lib/x86_64-linux-gnu/libudev.so.1 (0x00007f42682f1000)\n        libgssapi_krb5.so.2 => /lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f426829b000)\n        libXau.so.6 => /lib/x86_64-linux-gnu/libXau.so.6 (0x00007f4268295000)\n        libXdmcp.so.6 => /lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007f426828d000)\n        libkrb5.so.3 => /lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f42681c2000)\n        libk5crypto.so.3 => /lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f4268193000)\n        libcom_err.so.2 => /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f426818b000)\n        libkrb5support.so.0 => /lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f426817d000)\n        libbsd.so.0 => /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f4268165000)\n        libkeyutils.so.1 => /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f426815e000)\n        libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f426814a000)\n        libmd.so.0 => /lib/x86_64-linux-gnu/libmd.so.0 (0x00007f426813b000)",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6605297",
                          "updatedAt": "2023-08-01T12:54:31Z",
                          "publishedAt": "2023-08-01T12:54:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "You can cat the file to read it:\ncat /home/jiw/Software/moose/scripts/libmesh_diagnostic.log",
                          "url": "https://github.com/idaholab/moose/discussions/25006#discussioncomment-6606491",
                          "updatedAt": "2023-08-01T14:39:17Z",
                          "publishedAt": "2023-08-01T14:39:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FVTwoVarContinuityConstraint problems",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "Hi,\nI am having some problems with FVTwoVarContinuityConstraint, and I can't figure out what is going wrong. The relevant parts of my input file is modeled after test/tests/fviks/continuity/test.i, which I replicate below. There is no doubt in my mind that the offending block is [FVInterfaceKernels] and FVTwoVarContinuityConstraint - if I disable just about everything else, the error is there; only when I comment out FVTwoVarContinuityConstraint does the error go away and iterations converge. The error is\n\"Time Step 1, time = 0.0001, dt = 0.0001\n 0 Nonlinear |R| = 1.120103e+03\n  Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                 PC failed due to SUBPC_ERROR\"\n\nAny help or insight will be greatly appreciated!\nHere are the relevant blocks from the input file:\n[Mesh]\n  [./mesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 100\n    ny = 100\n    nz = 20\n    xmin = -50\n    xmax = 50\n    ymin = -50\n    ymax = 50\n    zmin = -10\n    zmax = 10\n  [../]  \n  [./vacuum_box]\n    type = SubdomainBoundingBoxGenerator\n    input = mesh\n    bottom_left = '-50 -50 -10'\n    top_right = '50 50 10'\n    block_id = 2\n    block_name = vacuum \n  [../]\n  [./brick]\n    type = SubdomainBoundingBoxGenerator\n    input = vacuum_box\n    bottom_left = '-10 -10 -1.5'\n    top_right = '10 10 1.5'\n    block_id = 1\n    block_name = brick\n  [../]\n  [.sidesets]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = brick\n    primary_block = 'brick'\n    paired_block = 'vacuum'\n    new_boundary = '7'\n  [../]\n[]\n[Variables]\n  [./phi1]\n# potential inside\n    type = MooseVariableFVReal\n    two_term_boundary_expansion = true\n    block = '1'\n    initial_condition = 1.\n  [../]\n  [./phi2]\n# potential outside\n    type = MooseVariableFVReal\n    two_term_boundary_expansion = true\n    block = '2'\n    initial_condition = 0.\n  [../]\n  [./lambda]\n   type = MooseVariableScalar\n  [../]\n[]\n[FVInterfaceKernels]\n  [./continuity]\n   type = FVTwoVarContinuityConstraint\n   variable1 = phi1\n   variable2 = phi2\n   subdomain1 = '1'\n   subdomain2 = '2'\n   boundary = '7'\n   lambda = 'lambda'\n  [../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/25054",
          "updatedAt": "2023-08-05T14:36:17Z",
          "publishedAt": "2023-07-28T17:50:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI added back some kernels and an executioner to get this input working again.\nAnd it works fine :O\nSo could you please paste the non-working input here?\nworking one from yours for reference:\n[Mesh]\n  [mesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 100\n    ny = 100\n    nz = 20\n    xmin = -50\n    xmax = 50\n    ymin = -50\n    ymax = 50\n    zmin = -10\n    zmax = 10\n  []\n  [vacuum_box]\n    type = SubdomainBoundingBoxGenerator\n    input = mesh\n    bottom_left = '-50 -50 -10'\n    top_right = '50 50 10'\n    block_id = 2\n    block_name = vacuum\n  []\n  [brick]\n    type = SubdomainBoundingBoxGenerator\n    input = vacuum_box\n    bottom_left = '-10 -10 -1.5'\n    top_right = '10 10 1.5'\n    block_id = 1\n    block_name = brick\n  []\n  [.sidesets]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = brick\n    primary_block = 'brick'\n    paired_block = 'vacuum'\n    new_boundary = '7'\n  []\n[]\n[Variables]\n  [phi1]\n# potential inside\n    type = MooseVariableFVReal\n    two_term_boundary_expansion = true\n    block = '1'\n    initial_condition = 1.\n  []\n  [phi2]\n# potential outside\n    type = MooseVariableFVReal\n    two_term_boundary_expansion = true\n    block = '2'\n    initial_condition = 0.\n  []\n  [lambda]\n   type = MooseVariableScalar\n  []\n[]\n[FVInterfaceKernels]\n  [continuity]\n   type = FVTwoVarContinuityConstraint\n   variable1 = phi1\n   variable2 = phi2\n   subdomain1 = '1'\n   subdomain2 = '2'\n   boundary = '7'\n   lambda = 'lambda'\n  []\n[]\n\n[FVKernels]\n  [diff_left]\n    type = FVDiffusion\n    variable = phi1\n    coeff = 'left'\n    block = 1\n  []\n  [diff_right]\n    type = FVDiffusion\n    variable = phi2\n    coeff = 'right'\n    block = 2\n  []\n[]\n\n[Materials]\n  [block0]\n    type = ADGenericFunctorMaterial\n    block = '1'\n    prop_names = 'left'\n    prop_values = '1'\n  []\n  [block1]\n    type = ADGenericFunctorMaterial\n    block = '2'\n    prop_names = 'right'\n    prop_values = '1'\n  []\n[]\n\n\n[Executioner]\n  type = Steady\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type'\n  petsc_options_value = 'asm lu NONZERO'\n[]\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6585115",
                  "updatedAt": "2023-07-29T23:53:10Z",
                  "publishedAt": "2023-07-29T23:53:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Thanks, Guillaume. I'm going to be out for a few days and will check this out by the end of the week.",
                          "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6589349",
                          "updatedAt": "2023-07-30T20:57:14Z",
                          "publishedAt": "2023-07-30T20:57:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Hi Guillaume. I tested your version with the diffusion kernel and asm preconditioner. Works fine. Then I changed the preconditioner in my old version to asm and it worked (albeit slowly). It seems like it's the bjacobi preconditioner that causes the error.",
                          "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6641093",
                          "updatedAt": "2023-08-04T17:45:52Z",
                          "publishedAt": "2023-08-04T17:45:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Can you list all your PETSc options?",
                          "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6641113",
                          "updatedAt": "2023-08-04T17:49:22Z",
                          "publishedAt": "2023-08-04T17:49:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "bjacobi will probably be pretty ineffectual on this problem as a given block of unknowns will require data from connected neighbors. ASM, which has a default overlap of 1 (e.g. graph connections one edge/\"neighbor\" away), should work better and it does. ILU also seems to work plenty well as the sub-block solver here, especially if you increase the gmres restart count, e.g. -ksp_gmres_restart 300. That takes less time in the initial preconditioning setup than the full LU factorization",
                          "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6641360",
                          "updatedAt": "2023-08-04T18:23:38Z",
                          "publishedAt": "2023-08-04T18:23:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Thanks, Alex. I switched to asm and also did some other tweaks and I think this particular problem is laid to rest.",
                          "url": "https://github.com/idaholab/moose/discussions/25054#discussioncomment-6646022",
                          "updatedAt": "2023-08-05T14:36:15Z",
                          "publishedAt": "2023-08-05T14:36:14Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}