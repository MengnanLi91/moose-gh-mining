{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wMi0yNFQxNDozMDoyMy0wNjowMM4AOoWm"
    },
    "edges": [
      {
        "node": {
          "title": "Cannot compile the test file",
          "author": {
            "login": "frysally"
          },
          "bodyText": "Hello!\nI followed the instructions and installed MOOSE, and successfully built a simple hello_world example (https://mooseframework.inl.gov/help/troubleshooting.html#buildissues). But when I input 'make -j4' under the test folder, someting went wrong. I have tried \u201cmake clobberall\u201d, \"git clean -xfd\", and \u201cmake cleanall\u201d, but the issue is still there.\nI always appreciate your help!\nHere is the error message:\nLinking Library /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.la...\nLinking Library /storage/home/rxf5261/work/moose/moose/test/lib/libmoose_test-opt.la...\nLinking Executable /storage/home/rxf5261/work/moose/moose/test/moose_test-opt...\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/test/src/.libs/main.x86_64-conda-linux-gnu.opt.o: in function `_GLOBAL__sub_I_main.C':\nmain.C:(.text.startup._GLOBAL__sub_I_main.C+0x196): undefined reference to `libMesh::PerfLog::PerfLog(std::string const&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserADBase<double>::AutoDiff(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserBase<double>::AddConstant(std::string const&, double)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserBase<double>::ParseAndDeduceVariables(std::string const&, std::vector<std::string, std::allocator<std::string> >&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::write_global_data(std::vector<double, std::allocator<double> > const&, std::vector<std::string, std::allocator<std::string> > const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::NonlinearImplicitSystem::NonlinearImplicitSystem(libMesh::EquationSystems&, std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `std::string libMesh::Utility::enum_to_string<libMesh::ParallelType>(libMesh::ParallelType)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshBase::has_elem_integer(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::PreconditionerType libMesh::Utility::string_to_enum<libMesh::PreconditionerType>(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::Nemesis_IO::read(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserBase<long>::Parse(std::string const&, std::string const&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::get_elem_var_names()'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::BoundaryInfo::get_sideset_name(short) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::EquationSystems::write(std::string const&, libMesh::XdrMODE, unsigned int, bool) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::BoundaryInfo::nodeset_name(short)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::add_matrix(std::string const&, libMesh::ParallelType, libMesh::MatrixBuildType)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::write_information_records(std::vector<std::string, std::allocator<std::string> > const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::add_variables(std::vector<std::string, std::allocator<std::string> > const&, libMesh::FEType const&, std::set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserBase<double>::Parse(std::string const&, std::string const&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::BoundaryInfo::sideset_name(short)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::get_global_var_names()'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshOutput<libMesh::MeshBase>::write_equation_systems(std::string const&, libMesh::EquationSystems const&, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::copy_scalar_solution(libMesh::System&, std::vector<std::string, std::allocator<std::string> >, std::vector<std::string, std::allocator<std::string> >, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::remove_matrix(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::read(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::BoundaryInfo::get_id_by_name(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::CheckpointIO::cleanup(std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::BoundaryInfo::get_nodeset_name(short) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::copy_nodal_solution(libMesh::System&, std::string, std::string, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshBase::subdomain_name(unsigned short) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshBase::get_elem_integer_index(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::write_timestep(std::string const&, libMesh::EquationSystems const&, int, double, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `std::string libMesh::Utility::enum_to_string<libMesh::FEFamily>(libMesh::FEFamily)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::Nemesis_IO::write_global_data(std::vector<double, std::allocator<double> > const&, std::vector<std::string, std::allocator<std::string> > const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::TransientSystem<libMesh::ExplicitSystem>::TransientSystem(libMesh::EquationSystems&, std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::remove_vector(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `std::string libMesh::Utility::enum_to_string<libMesh::Order>(libMesh::Order)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/test/lib/libmoose_test-opt.so: undefined reference to `libMesh::demangle(char const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::has_variable(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::Quality::name(libMesh::ElemQuality)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `std::string libMesh::Utility::enum_to_string<libMesh::ElemType>(libMesh::ElemType)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `FunctionParserBase<long>::ParseAndDeduceVariables(std::string const&, std::vector<std::string, std::allocator<std::string> >&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshBase::get_id_by_name(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::write_timestep_discontinuous(std::string const&, libMesh::EquationSystems const&, int, double, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ExodusII_IO::copy_elemental_solution(libMesh::System&, std::string, std::string, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::MeshBase::get_info(unsigned int, bool) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::System::variable_number(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::RadialBasisInterpolation<3u, libMesh::WendlandRBF<3u, 2u> >::interpolate_field_data(std::vector<std::string, std::allocator<std::string> > const&, std::vector<libMesh::Point, std::allocator<libMesh::Point> > const&, std::vector<double, std::allocator<double> >&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `libMesh::ElemType libMesh::Utility::string_to_enum<libMesh::ElemType>(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefined reference to `void libMesh::EquationSystems::read<double>(std::string const&, libMesh::XdrMODE, unsigned int, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `FunctionParserADBase<double>::JITCompileHelper(std::string const&, std::string const&, std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/test/lib/libmoose_test-opt.so: un\ndefined reference to `libMesh::Order libMesh::Utility::string_to_enum<libMesh::Order>(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::LinearImplicitSystem::LinearImplicitSystem(libMesh::EquationSystems&, std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `void libMesh::EquationSystems::read<double>(std::string const&, unsigned int, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::Nemesis_IO::write_timestep(std::string const&, libMesh::EquationSystems const&, int, double)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::System::add_variable(std::string const&, libMesh::Order, libMesh::FEFamily, std::set<unsigned short, std::less<un\nsigned short>, std::allocator<unsigned short> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::System::add_vector(std::string const&, bool, libMesh::ParallelType)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::ExodusII_IO::set_output_variables(std::vector<std::string, std::allocator<std::string> > const&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::EigenSystem::EigenSystem(libMesh::EquationSystems&, std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::MeshBase::add_elem_integer(std::string const&, bool, unsigned long)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::FEFamily libMesh::Utility::string_to_enum<libMesh::FEFamily>(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `FunctionParserADBase<double>::RegisterDerivative(std::string const&, std::string const&, std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::MeshfreeInterpolation::add_field_data(std::vector<std::string, std::allocator<std::string> > const&, std::vector<\nlibMesh::Point, std::allocator<libMesh::Point> > const&, std::vector<double, std::allocator<double> > const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::ExodusII_IO::set_extra_integer_vars(std::vector<std::string, std::allocator<std::string> > const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::System::attach_assemble_function(void (*)(libMesh::EquationSystems&, std::string const&))'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::PetscVector<double>::print_matlab(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::PerfLog::get_perf_info() const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::ExplicitSystem::ExplicitSystem(libMesh::EquationSystems&, std::string const&, unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::MeshBase::subdomain_name(unsigned short)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::ExodusII_IO::get_nodal_var_names()'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::EquationSystems::write(std::string const&, unsigned int, bool) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/test/lib/libmoose_test-opt.so: un\ndefined reference to `libMesh::System::add_variable(std::string const&, libMesh::FEType const&, std::set<unsigned short, std::less<unsigned \nshort>, std::allocator<unsigned short> > const*)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::System::get_vector(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::CheckpointIO::write(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `FunctionParserADBase<double>::AddVariable(std::string const&)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::TransientSystem<libMesh::NonlinearImplicitSystem>::TransientSystem(libMesh::EquationSystems&, std::string const&,\n unsigned int)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::InverseDistanceInterpolation<3u>::interpolate_field_data(std::vector<std::string, std::allocator<std::string> const&, std::vector<libMesh::Point, std::allocator<libMesh::Point> > const&, std::vector<double, std::allocator<double> >&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::System::get_vector(std::string const&) const'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::Nemesis_IO::set_output_variables(std::vector<std::string, std::allocator<std::string> > const&, bool)'\n/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/ld: /storage/home/rxf5261/work/moose/moose/framework/libmoose-opt.so: undefi\nned reference to `libMesh::ExodusII_IO::write(std::string const&)'\ncollect2: error: ld returned 1 exit status\nmake: *** [/storage/home/rxf5261/work/moose/moose/framework/app.mk:407: /storage/home/rxf5261/work/moose/moose/test/moose_test-opt] Error 1",
          "url": "https://github.com/idaholab/moose/discussions/20426",
          "updatedAt": "2022-07-14T21:48:00Z",
          "publishedAt": "2022-03-01T01:47:55Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you try updating MOOSE (and possibly libmesh too if it doesnt work)?\nSeems like there's a lot of missing libmesh functions in these error messages.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20426#discussioncomment-2269812",
                  "updatedAt": "2022-07-14T21:47:56Z",
                  "publishedAt": "2022-03-01T01:51:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Store several specific output into *.e format",
          "author": {
            "login": "hokonkim"
          },
          "bodyText": "Hello!\nI have a question about storing the result file (*.e).\nAfter the simulation, I want to store all output value into csv.\nBut simultaneously I would like to store the result for several specific time step.\ne.g, 10 time steps.\nAll output value for 10 time steps.\n5 results for every 2 step.\nIs this possible? If yes, how can I get this?\nI always appreciate your help.\nSincerely,\nHokon Kim",
          "url": "https://github.com/idaholab/moose/discussions/20421",
          "updatedAt": "2024-03-18T17:05:56Z",
          "publishedAt": "2022-02-28T22:00:54Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nJust create more than one CSV block in [Outputs].\n[Outputs]\n  [csv_all]\n    type = CSV\n  []\n  [csv_others]\n    type = CSV\n# use start/end  _step (or _time) + interval to do what you want\n\n  []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20421#discussioncomment-2268994",
                  "updatedAt": "2024-03-18T17:06:04Z",
                  "publishedAt": "2022-02-28T22:05:31Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Note that step 1-10 then every five steps might not be possible with just the parameters we have now. You ll have to either change those parameters (not too hard coding), create a custom EXECUTE_ON (also not too hard coding), OR just have 3 CSV blocks and merge two of them afterwards",
                          "url": "https://github.com/idaholab/moose/discussions/20421#discussioncomment-2269008",
                          "updatedAt": "2024-03-18T17:06:12Z",
                          "publishedAt": "2022-02-28T22:09:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with MOOSE installation on INL machine for BISON building.",
          "author": {
            "login": "lyon69FR"
          },
          "bodyText": "Hi everyone,\nI am currently trying to build BISON on INL machine SAWTOOTH3.\nI followed the procedure (with PETSc module version 3.11.4-GCC) given in: https://mooseframework.inl.gov/bison/getting_started/hpc_new_clone.html.\nAll steps ran successfully until I built BISON. All of the errors displayed are reported on the file attached.\nThe error may stem from MOOSE installation. This is why I followed option 3 in  the procedure:\nhttps://mooseframework.inl.gov/docs/PRs/20068/site/getting_started/installation/inl_hpc_install_moose.html\nThis time too occurred an error, reported on the file attached.\nDo you have any idea about this error coming from ?\nThank you in advance for your answer.\nVincent GAUTHIER.\nbuilding_bison.docx",
          "url": "https://github.com/idaholab/moose/discussions/20413",
          "updatedAt": "2022-08-11T17:40:07Z",
          "publishedAt": "2022-02-25T23:39:57Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Vincent\nIf you really do want to use the conda install, and suffer the performance penalty, you will have to purge that environment as you seem to have a broken mamba cache. This usually stems from a user interrupt in previous mamba commands.\nThe preferred way would be for you to install your own petsc. The petsc module is really old. I updated this PR, this is now option 2 on that webpage you linked.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20413#discussioncomment-2255400",
                  "updatedAt": "2022-08-11T17:40:33Z",
                  "publishedAt": "2022-02-26T06:17:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lyon69FR"
                          },
                          "bodyText": "Hi Guillaume,\nI tried to install my own petsc with option 2, but I ended up with the same error message when I built BISON. (in the file attached).\nBuilding PETSc.docx",
                          "url": "https://github.com/idaholab/moose/discussions/20413#discussioncomment-2257687",
                          "updatedAt": "2022-08-11T17:40:33Z",
                          "publishedAt": "2022-02-26T19:06:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "let's just set up a call and check what's wrong. If that works for you, can you please email me some of your availabilities this week?",
                          "url": "https://github.com/idaholab/moose/discussions/20413#discussioncomment-2263552",
                          "updatedAt": "2022-08-11T17:40:33Z",
                          "publishedAt": "2022-02-28T06:24:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to assign value?",
          "author": {
            "login": "amosaha"
          },
          "bodyText": "Hello\uff0c\nI have a set of 1D data along the z axis and then need to interpolate to the 2D boundaries of a 3D grid, how can I achieve this?",
          "url": "https://github.com/idaholab/moose/discussions/20416",
          "updatedAt": "2022-04-05T03:07:06Z",
          "publishedAt": "2022-02-28T02:43:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nIs this to initialize a variable? I ll assume so.\nUse a FunctionIC to initialize the variable\nhttps://mooseframework.inl.gov/source/ics/FunctionIC.html\nwith a PiecewiseConstant function with axis = z\nhttps://mooseframework.inl.gov/source/functions/PiecewiseConstant.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20416#discussioncomment-2263539",
                  "updatedAt": "2022-02-28T06:20:51Z",
                  "publishedAt": "2022-02-28T06:20:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Inquiry about BC in CH model",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nI have a question about the boundary condition. If I don't set the boundary condition in the input file, what is the boundary condition that will be applied by default?\nBest regards,\nHaiying",
          "url": "https://github.com/idaholab/moose/discussions/20410",
          "updatedAt": "2022-06-17T08:11:15Z",
          "publishedAt": "2022-02-25T16:58:42Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "No flux",
                  "url": "https://github.com/idaholab/moose/discussions/20410#discussioncomment-2252830",
                  "updatedAt": "2022-06-17T08:11:15Z",
                  "publishedAt": "2022-02-25T16:59:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "So, this is for left, right, top and down boundary?",
                          "url": "https://github.com/idaholab/moose/discussions/20410#discussioncomment-2252935",
                          "updatedAt": "2022-06-17T08:11:15Z",
                          "publishedAt": "2022-02-25T17:16:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "For the concentration on the top and bottom boundary, what value should I set?",
                          "url": "https://github.com/idaholab/moose/discussions/20410#discussioncomment-2253273",
                          "updatedAt": "2022-06-17T08:11:16Z",
                          "publishedAt": "2022-02-25T18:11:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "any boundary that does not have a boundary condition will effectively have a no-flux BC.\nThere's more than one CH model. Which one are you talking about?",
                          "url": "https://github.com/idaholab/moose/discussions/20410#discussioncomment-2255404",
                          "updatedAt": "2022-06-17T08:11:16Z",
                          "publishedAt": "2022-02-26T06:20:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "error message when running the input file",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nI got an error message when running my input file in supercomputing center. The following screenshot shows the error:\n\nWhy is this? My simulation stops and would not run.\nDoes anyone have any suggestions about this?\nThank you very much.\nBest regards,\nHaiying",
          "url": "https://github.com/idaholab/moose/discussions/20406",
          "updatedAt": "2022-09-29T19:57:59Z",
          "publishedAt": "2022-02-24T23:32:54Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this for MOOSE or a MOOSE derived app?\nPlease follow those instructions to get a backtrace for the error\nhttps://mooseframework.inl.gov/application_development/debugging.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20406#discussioncomment-2249292",
                  "updatedAt": "2022-09-29T19:58:02Z",
                  "publishedAt": "2022-02-25T06:15:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "Is there more to the error message that may be explaining the issue? When MOOSE throws an error, typically the actual user-friendly error message is printed before the MPI Abort, like this:\nA 'PeripheralRingMeshGenerator' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\n--------------------------------------------------------------------------\nMPI_ABORT was invoked on rank 0 in communicator MPI_COMM_WORLD\nwith errorcode 1.\n\nNOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.\nYou may or may not see output from other processes, depending on\nexactly when Open MPI kills them.\n\nHere, the actual error message is telling you that A 'PeripheralRingMeshGenerator' is not a registered object., which you may not notice if you just look at the very end of the error message that talks about MPI. Some new users I've helped have missed the actual error message like this.\nIs there other info in your error message? If not, then @GiudGiud's suggestion of a backtrace is the best thing to do.",
                          "url": "https://github.com/idaholab/moose/discussions/20406#discussioncomment-2254493",
                          "updatedAt": "2022-09-29T19:58:05Z",
                          "publishedAt": "2022-02-25T22:53:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Solve did not converge",
          "author": {
            "login": "Salma-Mao"
          },
          "bodyText": "Dear everyone,\nI am new to MOOSE. When I am trying  to compile the project  GrandPotentialPlanarGrowth.i, I find that the example does not converge. What can I do to resolve this problem.\n\nThanks,\nMS",
          "url": "https://github.com/idaholab/moose/discussions/20394",
          "updatedAt": "2022-07-06T11:55:10Z",
          "publishedAt": "2022-02-24T14:41:40Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ykvishal"
                  },
                  "bodyText": "I could run this simulation.",
                  "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2245953",
                  "updatedAt": "2022-07-06T11:55:29Z",
                  "publishedAt": "2022-02-24T18:17:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@shuine-09\nPlease see this page to diagnose convergence issues.\nhttps://mooseframework.inl.gov/application_usage/failed_solves.html\n@ykvishal and @shuine-09 anything particular in how you ran the case (#mpi, threads?, old MOOSE version or new one?) ?",
                  "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2246293",
                  "updatedAt": "2022-07-06T11:55:39Z",
                  "publishedAt": "2022-02-24T19:16:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ykvishal"
                          },
                          "bodyText": "In my case, I installed MOOSE 2 weeks ago. Also I could run this input file with single core, 2 cores and 12 cores. It worked all the time. Although, the number of time-steps were different in all cases.",
                          "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2246409",
                          "updatedAt": "2022-07-06T11:55:34Z",
                          "publishedAt": "2022-02-24T19:39:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "I run this simulation again.\n\nHowever, When  output files are opened   by ParaView 5.10.0, I get the Error. Did the Error mean that the solve did not converge?",
                          "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2248217",
                          "updatedAt": "2022-07-06T11:55:35Z",
                          "publishedAt": "2022-02-25T02:55:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That version of paraview isn\u2019t compatible with moose because we name side sets and nodesets the same for the most part.\nPlease either downgrade or upgrade",
                          "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2248266",
                          "updatedAt": "2022-07-06T11:56:05Z",
                          "publishedAt": "2022-02-25T03:03:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "The version of ParaView have been changed. And the output has been opened successfully. Thanks for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/20394#discussioncomment-2248786",
                          "updatedAt": "2022-07-06T11:56:08Z",
                          "publishedAt": "2022-02-25T03:31:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with compiling my own project",
          "author": {
            "login": "Salma-Mao"
          },
          "bodyText": "Dear everyone,\nI am new to MOOSE. I am trying create a new project. However, when I am trying to compile the project I am getting:\nroot@dfec67e2b373:/usr/local/workspase#  cd phasefield1/\nroot@dfec67e2b373:/usr/local/workspase/phasefield1# make -j4\nUsing HIT from /opt/moose/framework/contrib/hit\nChecking if header needs updating: /opt/moose/framework/include/base/MooseRevision.h...\nroot@dfec67e2b373:/usr/local/workspase/phasefield1#\n\nI do not know what is the matter. Anyone can help me with the problem.\nthanks,\nMS",
          "url": "https://github.com/idaholab/moose/discussions/20380",
          "updatedAt": "2022-08-27T08:51:57Z",
          "publishedAt": "2022-02-23T07:59:31Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "Looks like you're using docker. Did you use stork to create your application?\nSee https://mooseframework.inl.gov/getting_started/new_users.html#create-an-app. You should run /opt/moose/scripts/stork.sh <APPNAME> in whatever directory where you want your application to be made.",
                  "url": "https://github.com/idaholab/moose/discussions/20380#discussioncomment-2237113",
                  "updatedAt": "2022-08-27T08:52:32Z",
                  "publishedAt": "2022-02-23T14:57:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "I have created the application in the same way. However, when I compile the project I get the problem.",
                          "url": "https://github.com/idaholab/moose/discussions/20380#discussioncomment-2242212",
                          "updatedAt": "2022-08-27T08:52:32Z",
                          "publishedAt": "2022-02-24T08:19:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "# cd ~\n# ls\n# /opt/moose/scripts/stork.sh foo\nInitialized empty Git repository in /root/foo/.git/\n\n*** Please tell me who you are.\n\nRun\n\n  git config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\n\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\n\nfatal: unable to auto-detect email address (got 'root@60046d880d48.(none)')\nMOOSE app created in '/root/foo'\n\nTo store your changes on github:\n    1. log in to your account\n    2. Create a new repository named foo\n    3. in this terminal run the following commands:\n         cd /root/foo\n         git remote add origin https://github.com/YourGitHubUserName/foo\n         git commit -m \"initial commit\"\n         git push -u origin main\n\nTo automatically enforce MOOSE C++ code style in your commits, run:\n\n    cd /root/foo\n    ./scripts/install-format-hook.sh\n\n# cd foo\n# ls\nLICENSE  Makefile  README.md  doc  include  run_tests  scripts\tsrc  test  testroot  unit\n# make -j 12\nChecking if header needs updating: /opt/moose/framework/include/base/MooseRevision.h...\nRebuilding symlinks in /opt/moose/modules/module_loader/build/header_symlinks\nRebuilding symlinks in /root/foo/build/header_symlinks\nCompiling C++ with suffix (in opt mode) /opt/moose/modules/module_loader/src/ModulesApp.C...\nCompiling C++ (in opt mode) /root/foo/src/base/fooApp.C...\nCompiling C++ (in opt mode) /root/foo/src/main.C...\nCompiling C++ (in opt mode) /root/foo/test/src/base/fooTestApp.C...\nLinking Library /opt/moose/modules/module_loader/lib/libmodule_loader_with-opt.la...\nLinking Library /root/foo/lib/libfoo-opt.la...\nLinking Library /root/foo/test/lib/libfoo_test-opt.la...\nLinking Executable /root/foo/foo-opt...\n# ./run_tests\ntest:kernels/simple_diffusion.test ........................................................................ OK\n--------------------------------------------------------------------------------------------------------------\nRan 1 tests in 0.3 seconds. Average test time 0.2 seconds, maximum test time 0.2 seconds.\n1 passed, 0 skipped, 0 pending, 0 failed\n\nWorks without issue for me.",
                          "url": "https://github.com/idaholab/moose/discussions/20380#discussioncomment-2244686",
                          "updatedAt": "2022-08-27T08:52:32Z",
                          "publishedAt": "2022-02-24T15:10:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "Thanks for your help. I have solved the problem. Thanks again.",
                          "url": "https://github.com/idaholab/moose/discussions/20380#discussioncomment-2248142",
                          "updatedAt": "2022-09-15T10:26:49Z",
                          "publishedAt": "2022-02-25T02:32:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to add this equation to the kernel?",
          "author": {
            "login": "YuhangNIU"
          },
          "bodyText": "Hello all,\nI have a small question. Suppose that one-dimensional geometry is divided into n elements. The equation in element i (0<i<n) is:\n\nCould anyone kindly tell me how to add this problem to the kernel?",
          "url": "https://github.com/idaholab/moose/discussions/20353",
          "updatedAt": "2022-07-14T02:43:11Z",
          "publishedAt": "2022-02-21T13:54:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you write this [a,b,c] stencil as a gradient / laplacian / other known operator or is it arbitrary?\nDo you want to use a finite volume or finite element discretization?\nFor the d term, you can use:\nhttps://mooseframework.inl.gov/source/kernels/BodyForce.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2222133",
                  "updatedAt": "2022-07-14T02:43:11Z",
                  "publishedAt": "2022-02-21T15:50:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Hi,\nThanks for your reply. These parameters (a, b, c, d) are constant. By the way, the variable in this equation is W.\nI think any discretization is acceptable, as long as it can be expressed in this equation.  I don't know how the kernel can be constructed.\nThank you,\nYuhang",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2224957",
                          "updatedAt": "2022-07-14T02:43:11Z",
                          "publishedAt": "2022-02-22T00:58:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "This is neither FE nor FV, but looks more like finite differencing. What's your motivation of using moose?",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2225179",
                          "updatedAt": "2022-07-14T02:44:21Z",
                          "publishedAt": "2022-02-22T02:04:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "I want to develop a similar equation based on moose.\nDoes it mean that moose can not solve this equation?",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2226844",
                          "updatedAt": "2022-07-14T02:44:21Z",
                          "publishedAt": "2022-02-22T08:26:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Yuhang,\nIf you are okay with any discretization, then please show us the equation you want to solve for -- the equation before discretization, not the equation shown in your original post. Then we can tell you which kernels to use.",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2230845",
                          "updatedAt": "2022-07-14T02:44:35Z",
                          "publishedAt": "2022-02-22T18:25:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "I just want to solve this equation, but I do not know how to express this equation before discretization. Can it be solved with MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2233071",
                          "updatedAt": "2022-07-14T02:44:35Z",
                          "publishedAt": "2022-02-23T01:40:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It can be solved by MOOSE a priori, but it would be easier with the undiscretized form of the equation.\nA few questions,\nl and i are indexes for two spatial dimensions?\nWhat are the variables you want to solve for here? Since you have two PDEs, we cant have too many variables, otherwise the problem will be underdetermined. I count rho, h, W, but seems WBE, Q, T, P and C could also be variables? Or are they constants?",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2233994",
                          "updatedAt": "2022-07-14T02:44:49Z",
                          "publishedAt": "2022-02-23T06:47:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Thanks for your reply.\nThe index of l means that this equation is for liquid, so it is nothing special. And i  represents the index of 1D elements.\nThe variables of these two PDEs are W and h, so other parameters can be regarded as constant.",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2234060",
                          "updatedAt": "2022-07-14T02:44:57Z",
                          "publishedAt": "2022-02-23T07:03:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Besides, if W < 0, the second term on the right of Eq.2 can be expressed as: W(i)*h(i+1). However, the h value of i + 1 element (_u[qp+1]) is unknown in this time step, resulting in divergence. How to solve this problem\uff1f",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2234107",
                          "updatedAt": "2022-07-14T02:44:57Z",
                          "publishedAt": "2022-02-23T07:16:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Thanks for your reply. The index of l means that this equation is for liquid, so it is nothing special. And i represents the index of 1D elements. The variables of these two PDEs are W and h, so other parameters can be regarded as constant.\n\nso the d(rho V/m) / dt term is 0? if all of these are constant\nIf the XX_i-1 - XX_i terms can be written as gradients, then this is solvable. If not, it's a little problematic that it's only on one side of the 1D element.",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2237516",
                          "updatedAt": "2022-07-14T02:44:58Z",
                          "publishedAt": "2022-02-23T15:56:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Yes, the d(rho V/m) / dt term is 0.\nI was confused that the gradient is defined as d(u) / dx in 1D element, but the Eq.(1) and Eq.(2) only can be written as d(u).\nI think it might be written as grad(u) * dx, but how to define dx in moose?",
                          "url": "https://github.com/idaholab/moose/discussions/20353#discussioncomment-2240580",
                          "updatedAt": "2022-07-14T02:45:04Z",
                          "publishedAt": "2022-02-24T01:37:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow: masking areas for conductive flow/transport",
          "author": {
            "login": "garciapintado"
          },
          "bodyText": "Dear all,\nI am using the PorousFlow module, and wondering if you could advise on a way to simulate that some blocks are completely impervious. That is, I would like thermal diffusion to act in all the domain, but to be able to constrain the blocks for Darcy flow, so that conductive heat and advective transport in only simulated in the permeable domain. To use a negligible porosity [let's say 1.0E-2] in the assumed impervious areas prevents convergence in my attempts.\nMany thanks,\nJavier GP",
          "url": "https://github.com/idaholab/moose/discussions/20139",
          "updatedAt": "2022-06-23T13:27:36Z",
          "publishedAt": "2022-01-26T14:38:27Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou should be able to block-restrict some physics. I'm not sure how it's done for porous flow. What does your input file look like? Do you have a large [Kernels] section with each term in the equations or is there a [PorousFlow] block (action) that handles the equations ?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2051384",
                  "updatedAt": "2022-06-23T13:27:36Z",
                  "publishedAt": "2022-01-26T14:42:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Guillaume,\nMany thanks for the reply [sorry, I was aiming to ask for a general Q&A Modules, not specifically for Navier-Stokes].\nI am new to MOOSE, and trying to find my way through it.\nThe PorousFlow modules has several actions,  which handle the equations.\nI\u2019m using the PorousFlowFullySaturated action. Here, the heat equation in this includes (apart from the mechanical advection) both heat conduction  and heat advection by Darcy flow (each with its specific kernel).\nFollowing your suggestion, if you could point to some example in MOOSE (not necessarily related to the PorousFlow module) where some of the physics are restricted to specific blocks this would be great help. Basically, I'd need some blocks to be only subject to head conduction.\nJavier",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2052954",
                          "updatedAt": "2022-06-24T09:26:45Z",
                          "publishedAt": "2022-01-26T18:05:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No worries.\nAbout block restriction of physics, here's an example:\nhttps://github.com/idaholab/moose/blob/06bc1f73f0d4dfb3d01ce9ba77d6bb97346e07eb/test/tests/kernels/block_kernel/block_kernel_test.i\nthe body force is restricted to only a single subdomain.\nBut it's not always that simple, sometimes you'll need to add boundary conditions to restrict physics to some subdomains. It's the case for finite volume navier stokes (not the same as porous flow as you know)\nBut please see @WilkAndy 's answer",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2061210",
                          "updatedAt": "2022-06-24T09:26:44Z",
                          "publishedAt": "2022-01-27T18:32:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "The easiest thing is to set permeability zero or very low in those impermeable blocks.\nAlmost definitely this will work well, but before doing this, just make sure your physics is going to work properly.  For instance, it sounds like you're doing a thermal-hydraulic simulation.  If you set permeability = 0 in some blocks, and then reduce/increase the temperature when using a high-precision equation of state for your fluid, then you might start to probe the limits of the EOS's validity.",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2053946",
                  "updatedAt": "2022-06-24T09:26:37Z",
                  "publishedAt": "2022-01-26T20:48:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy,\nMany thanks! Yes, the goal is to get hydrothermal (TH) simulations. I have also tried to put vanishingly small values for permeability in these \"impervious\" blocks, and this is preventing convergence in my tests.\nRegarding the EOS, I am using by now SimpleFluidProperties because the P&T go outside range in the very first step when using the Water97FluidProperties EOS [I\u2019ve even tried widely extrapolated tabulated EOS].\nI'll try to play with the temperature, review the BCs for inconsistencies, and come back with more tests in the background...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2057260",
                          "updatedAt": "2022-06-24T09:26:37Z",
                          "publishedAt": "2022-01-27T09:43:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OK, i hope you work it out soon.  Putting perm = 0 should work well in most (all?) situations, so you've probably got something \"suboptimal\" in your model.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2057308",
                          "updatedAt": "2022-06-24T09:26:37Z",
                          "publishedAt": "2022-01-27T09:52:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Perhaps you need to consider whether those blocks are really \"impervious\".  If so, how did the water get in there?  When you heat/cool the water, it will try to expand/contract, but by setting perm=0, you're keeping its volume constant (assuming you're using fixed porosity).  That will create very large pressure changes and possibly phase changes, both of which are difficult to solve numerically.\nIf water truly exists inside the impermeable block, but its porepressure is not of great concern to you, perhaps you could: (i) use 0 = porosity = permeability = tortuosity = dispersivity (perhaps you don't have the latter two), which means numerically there is no water in the block, so MOOSE's water differential equation will always be zero, but you'll have to modify your matrix thermal conductivity to account for the thermal conductivity of the water that you've artificially removed; (ii) use a different PorousFlowPorosity class, where porosity can increase with temperature and porepressure changes, but that will probably lead to poor convergence; (iii) set the thermal expansion of water to zero (try this with fixed porosity initially).",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2062096",
                          "updatedAt": "2022-06-24T09:26:37Z",
                          "publishedAt": "2022-01-27T21:04:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy & Guillaume,\nMany thanks! I'll explain myself:\nMy idea here is to to see if MOOSE-PorousFlow can be used (I\u2019d guess it can) to replace (and expand with Geochemical reactive transport) and existing geothermal module that I have coded and coupled to a visco-elasto-plastic model of  continental spreading, all in Matlab. The model is 2D and the spatial domain is  (initially; then it grows with the computation) generally up to 150 km depth and ~400 km wide. In Matlab, this is now done with operator splitting where the mechanical part runs at ~10000 year time step and,  separately, the hydrothermal part (which runs at a much smaller, adaptive, timestep) is a computational bottleneck. I\u2019m sending a snapshot of a situation (the plot is up to 35 km depth but the total domain is up to 150km) , where hydrothermal flow has been active for a couple of million years. This model should continue to run up to ~80Myr. So, I though  to keep the mechanical part (at least by now) in Matlab and use MOOSE for the hydrothermal flow and geochemistry. A big part of this domain is upwelling mantle.  Everywhere higher than ~800\u00baC should have a closure of its porosity. However, as thermal diffusion affects all the domain, all of it has to be passed to MOOSE. So, I thought it would be way more computationally efficient (and probably stable) if all the subdomain warmer than given isotherm (let\u2019s say 800\u00baC) could be masked out of the computations for porepressure and heat advection (as well as, eventually, the geochemical transport). Not only the DOFs would me highly reduced, but I\u2019d presume that convergence could also be better. In addition the P,T values below that isotherm go way beyond the validity of the IAPWS-97, implying the need for way-off tabulated extrapolation of the EOS. Computationally-wise, I feel it would  be better to just mask out these deep areas and only consider them for the thermal conduction [if possible in MOOSE+PorousFlow] rather than setting a negligible porosity and permeability and keeping all Kernels, FluidProperties... acting on them. But maybe I\u2019m wrong.\n\n\u2026",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2064733",
                          "updatedAt": "2023-03-20T12:27:34Z",
                          "publishedAt": "2022-01-28T08:03:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "That is a fascinating application, thank you for explaining.  I want to help you, but it's the end of our week here in Australia.  I'll write more on Monday, but for now, i suggest the \"mask\" has porosity = 0 = permeability.  Sure, you'll get better performance by just having no fluid-flow there, and we can look at that next week, but can you run your sim with SimpleFluidProperties, and that porosity=0=perm idea, and see what happens?",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2065018",
                          "updatedAt": "2023-03-20T12:40:07Z",
                          "publishedAt": "2022-01-28T08:55:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Thanks!! I'll try as you indicate...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2065259",
                          "updatedAt": "2023-03-20T12:43:26Z",
                          "publishedAt": "2022-01-28T09:41:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "So, how did this go, @garciapintado ?\nI'm interested in the mechanical coupling.  If the mechanics increases permeability or porosity without directly impacting fluid pressure, then that will prob be fine.  But if the mechanics changes porosity, which consequently changes porepressure (fluid mass conservation) then i feel MOOSE will struggle compared with usual flow simulations.  Eg, suddenly halving porosity, while not allowing fluid to move (because of the operator split) will increase porepressure by about 1GPa.\nAlso, i wonder about the T>800degC + porosity idea.  How are you implementing this in MOOSE?\nI'm keen to help - tell me your current progress.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2077768",
                          "updatedAt": "2023-03-20T12:43:32Z",
                          "publishedAt": "2022-01-30T20:54:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy and Guillaume,\nAs suggested by @WilkAndy, trying understand the issues for lack of convergence in my original problem above, I\u2019ve done a number of synthetic tests in  a rectangular box with four horizontal layers, with a] using simple and Tabulated IAPWS97 fluid properties, b] different temperature gradients, and c] different domain depths.\nAll of these use the PorousFlowFullySaturated in PorousFlow module. Top pressure is atmospheric and then subject to gravity. Initial conditions match boundary conditions, so they should be taken as best-case scenario. All simulations are \u2018ThermoHydro\u2019 and Boundary conditions in these synthetic tests are all DirichletBC. Simulation time is 10 kyr [as would be in my original application, with IterationAdaptiveDT.\nPorosity, permeability, rock internal energy and rock-grain thermal conductivity are all as in my original problem [although I have one layer less here, as I\u2019ve removed the sediment]. The approach for material properties is to set vey low permeabilities for\nthe areas where I\u2019d like to prevent flow (but all relevant Kernels for fluid advection still apply everywhere).\nThe average vertical thermal gradient in my original setup is about 1300/150000 [K.m-1], but his is very irregular as shown in my previous message. All runs are executed as \u201cmpi exec -np -4 \u2026\u201d, which for nonlinear variables leads to Num Local DOFs between 13266 & 15398 for the shallow, and standard domain sizes, respectively.\nTest-specifics are:\nFluidProperties:          simple fluid, and Tabulated  IAPWS97\nDepths:                       150 km [as my standard domain], and 16 km [as the subdomain for advective fluid flow would commonly have].\nthermal gradients y:  as seen in the summary table below.\nSummary of runs [in some cases, that are perhaps more relevant, I\u2019ve included the computation time]. YES/NO indicates convergence.\n16  km depth domain [the shallow one]:\nSimpleFluidProperties TabulatedIAPWS97\ngrad_T_y   300/150000 [K.m-1]               YES                            YES                      # way lower than my original thermal gradient\ngrad_T_y   1300/150000 [K.m-1]              YES                           YES  [229 s ]      # ~average of my original thermal gradient  [417.15 K at the bottom]\ngrad_T_y   8000/150000 [K.m-1]              untested                   YES  [288 s ]      # ~average of my original thermal gradient  [1131.15 K at the bottom] This COVERS our range of fluid temperatures\ngrad_T_y   12500/150000 [K.m-1]            YES                           NO                       #  exaggerated thermal gradient such that the maximum temperatures at the bottom math those in my original setup.\n150 km depth domain [approximating the original one]:\nSimpleFluidProperties TabulatedIAPWS97\ngrad_T_y   42/150000 [K.m-1]              YES                              YES [331 s]           #  way-lower than my original thermal gradient [320 K at the bottom]\ngrad_T_y   300/150000 [K.m-1]            YES                              YES [357 s]          # lower than my original thermal gradient          [578 K at the bottom]\ngrad_T_y   600/150000 [K.m-1]            untested                      YES [788 s]*        # lower than my original thermal gradient          [878 K at the bottom]\ngrad_T_y   1300/150000 [K.m-1]          YES [366 s]                 NO                        #  ~average of my original thermal gradient\n*in this test, the initial steps converge, up to Time Step 7, time = 1.27e+07, dt = 6.4e+06, when some messages start to indicate:\n\u201cTemperature -1500.82 is outside the range of tabulated temperature (273.15, 5273.15).\nTemperature -530.591 is outside the range of tabulated temperature (273.15, 5273.15).\n\u2026\u201d\nthen the solver does not converge and eventually, after cutting the time step, the iterations go on and the simulation finally converges. Note that the maximum temperatures should be well within the limits of of the original EOS.\nSo, [provided my input files are fine] it seems that the thermal gradient is not an issue in these simulations, but the problem is either the wide range of P,T values, or the extrema of P,T.\nIn the real problem, I\u2019d need to use tabulated IAPWS97 EOS.\nOne note is that the extrapolation of the Water97 properties is simplistic. I\u2019ve just extrapolated toward higher temperatures and lower and higher pressures without any slope in the extrapolation [i.e. just keeping the last available values in each side in the original Water97 produced EOS tables. Would it be possible that these  0.0 derivatives for the thermodynamic properties as a function for high T values [the extrapolated ones] is related to the lack of convergence? I\u2019d be surprised as the high pressure is equally present in the lower grad_T_y tests for the {150km,TabulatedIAPWS97} tests, and it hits extrapolated values at the bottom of the domain.  As an example, I\u2019m pasting the PT plot for density [the T range goes until 5000\u00baC and the pressure up to 1800 MPa to guarantee it covers any possible value in our original domain.\n\nIn any case, the test {16km, grad_T_y=8000/150000 K.m-1, TabulatedIAPWS97} does converge and covers well the range of temperatures we would have in our hydrothermal problem. So, it seems that it is a combination of high temperatures and high pressures what leads to the lack of convergence.\nDoes this overall support the idea that masking deep areas in my original domain, so they are taken out of the advective flow and transport calculation [applying on heat conduction in them] is the approach to go for? If so, is this feasible in PorousFlow as it stands now?\nIn this as the case, computing-wise according to the closest scenario here would likely be the {16km, grad_T_y=8000/150000 K.m-1, TabulatedIAPWS97} , the computing time would be fine for us [this would need to be executed for any single timestep of our mechanical model].\nI have more notes, but not sure if they are relevant now [our real case scenario is more entangled and would need addition of specific parametrisation\u2026 but that\u2019s another topic]\nI can send the input files for these synthetic runs [and for my original run as well].\nMaybe this conversation is a bit off-topic here and it should be taken out of \u201cQ&A Modules: Navier-Stokes\u201d?\nJavier",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2080364",
                          "updatedAt": "2023-03-20T12:43:32Z",
                          "publishedAt": "2022-01-31T10:12:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy,\nJust missed your last message. Well, you see I\u2019ve been doing simple TH synthetic tests.\nI have not modified any C++ code in MOOSe by now [actually I only know the basic of C++]. I had planned that if these tests work fine (so we go ahead with MOOSE), I\u2019d add a new material with the parametrization I\u2019ve put in Matlab, where for a start I used your own PorousFlowPorosity formulation [the fluid, thermal and mechanical parts], and modified some minor things that did not seem to fit our problem. Basically, I just used the volumetric\ndeformation [the dynamical pressure term] for the porosity mechanical factor, and then I added a factor dependent of the strain rate [i.e. its 2nd invariant] for the permeability, after apply a Kozeny-Carman formulation [also borrowed from your own code]. This seems to do what we expected in general terms in our Matlab code. I could add the details, but it s a quite simple thing.\nSo, in our case, the mechanics would change porosity [and permeability], and this is key for our simulations to work and properly develop the fluid convection cells.\nAbout the \u00a0\u201cT>800degC + porosity idea\u201d, you\u2019ve got me. I need to look at that\u2026\nI am enthusiastic about the prospect of MOOSE, if each 10 kyr of hydrothermal simulations [i.e. a single timestep of the mechanical model] could go down to about 3 minutes computing time within a single computing node this would allow us to do the runs [including ensembles] we need! [each of these 10 kyr now takes us 30\u2019 in Matlab with similar number of processors, which make the computing impractical].\nI\u2019m going to check what I have for the high-temperature porosity\u2026\nJavier\n[needless to say that if you find the application interesting and we manage to put this into work in MOOSE, we would be more than happy if you did not mind to coauthor derived results]. I also find myself the application fascinating...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2080632",
                          "updatedAt": "2022-09-07T01:23:50Z",
                          "publishedAt": "2022-01-31T10:53:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "I have checked. In the simulation for the plot I sent for our real case [the matlab simulation]. I just had the trace of the volumetric strain contributing to the mechanical effect on the porosity:\nvolumetric_strain = -1 / (bulk_modulus * (Pd - Pd_ref)),\nwhere Pd is the mechanical model pressure. The fluid and thermal effect as in PorousflowPorosity,  and then the simplistic approach of setting a fixed positive lower threshold of the resulting porosity for vey low values [I\u2019m aware this is not good convergence-wise in MOOSE], which I guess is what you were asking for. So, no great idea here. But as I've seen I believe we rarely hit these low values in our zone of interest.\nThen, for the permeability, the Kozeny-Carman permeability, [after your kozeny_carman_phi0] and after this permeability (K) has been calculated, it is multiplied by a factor which result from a function [a Gaussian-like increase, as the classical Gaussian variograms] dependent on the ratio of the [IInd invariant] of the plastic strain rate to a nominal value [which is around the maximum value we normally have around big faults with highly localised deformation for this class of model].\nAll in all, the permeability becomes clearly higher on active faults in the brittle domain, and then decrease when the faults become inactive. Part of this idea is to emulate the fault remineralisation effect that we are lacking in our model. That is, we cannot use total accumulated strain to control permeability as we would be neglecting the remineralisation in abandoned faults which would seal them for our geological timescales.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2082102",
                          "updatedAt": "2022-09-07T01:24:00Z",
                          "publishedAt": "2022-01-31T14:54:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "OK, I'll try first if with an updated, hopefully better, extrapolation of the EOS and fixed porosity the synthetic test for its most realistic scenario  converges.\nOn alternative (3), I'm already passing stuff from matlab to MOOSE through EXODUS files [not in these synthetic but in the real case on which I initially failed to make it converge], prepared through an intermediate python script [called by matlab], using the package \"exomerge\" from Sandia NL, where I am passing full ICs files for temperature and porepressure, as well as nodesets for BCs ---I still haven't figured out how to prepare sidesets, but with nodeset BCs it is working for me by now---]. So, I believe all what could be needed as input could be automated as well.\nOn BCs my question is more about how MOOSE works when only some blocks are selected for a specific Kernel computation. That is, should the BCs be on nodes pertaining to these selected sub-blocks (either in their boundary or within their boundaries), or the BCs should be defined everywhere in the complete mesh [if so, in my mind I can just think off DirichletBC]. But don't bother in answering this [don't want to take an excess of your time], I'll do my homework with MOOSE. I would for sure need help on unravelling  PorousFlowFullySaturated into the list of Kernels and Materials. But also, I'll start by studying it a bit more.",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2086853",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-01T07:28:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "If a Variable exists on some blocks only, then the remainder of the mesh is invisible to it.  Eg, if P lives on some blocks then fluid will flow in those blocks only: as far as the fluid is concerned, it will see a domain with \"holes\" (the masked areas), so it will flow around those holes.  The BCs should only be defined where the Variable exists: so if parts of your original boundary get masked, you'll have to create a new exodus boundary that consists of only the non-masked parts, and apply the DirichletBC there only.\nI was pretty careful in describing all the Kernels and Materials added by the Action in the documentation https://mooseframework.inl.gov/source/actions/PorousFlowFullySaturated.html .    Hopefully i didn't omit anything!",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2087683",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-01T10:00:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Hello Andy,\nA \"better\" extrapolation of the thermodynamic tables has not reached a good end [I've tried several regression types, and some \"parsimonious\" extrapolation following the minimal slope in the borders of the original thermodynamic tables, and nothing seems to be able to solve the convergence problem when both high P and  high T live together in the domain. Extrapolating with small slopes initially does not hit crazy values of temperature, but ultimately makes the run so slow that I had to stopped it. So, from everything I've tried still the 0-derivative extrapolation is the one which takes the simulations further.\nSo, I've gone for  option [3] [mask the deepest block ---'mantle'---so no porepressure lives there.\nI've now run the synthetic [4 layer on top of each other] indicating manually the Kernels and Material brought by the action PorousFlowFullySaturated [BTW, the documentation is also great!]. So, I've reproduced my former synthetic tests. Up to here, everything seems great.\nYet, now I'm stuck in how to specify that one variable [porepressure in this case]\u00a0only lives in some blocks. I do not seem to find this in the documentation. So, I am getting a lot of errors, that I believe come because the porepressure Variable is seen everywhere:\nMaterial property 'PorousFlow_saturation_qp', requested by 'lambda_mantle' is not defined on block mantle\nMaterial property 'PorousFlow_saturation_qp', requested by 'lambda_mantle_neighbor' is not defined on block mantle\n...\nMaterial property 'dPorousFlow_porepressure_nodal_dvar', requested by 'PorousFlow_density_nodal_all' is not defined on block mantle\n...\nand so on.  Is there any example where a variable only exists in some subDomain blocks? I really can't find it. Maybe I'm looking at the wrong places...",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2103337",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-03T12:14:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Ah!, I can send the synthetic input file",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2103348",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-03T12:16:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "To clarify, I'm specifying the blocks where porepressure should live [as found in some previous conversation]:\n...\n[Variables]\n[porepressure]\nblock = 'lcrust ucrust unsat'     # 'mantle' not included\nfamily = LAGRANGE\norder = SECOND\n[]\n[temperature]\nfamily = LAGRANGE\norder = SECOND\nscaling = 1E-08\n[]\n[]\n...\nbut still it seems that porepressure, saturation, fluid_phase_density, fluid_phase_enthalpy... are requested to be defined in the 'mantle' block, where not flow is supposed to happen. That is, I've specified block = 'lcrust ucrust unsat' in all kernels related to fluid transport and related materials.\nThe only two Kernels I've left applied to all the domain are related to transient heat conduction:\n[heat_time_derivative]\ntype = PorousFlowEnergyTimeDerivative\nvariable = temperature\n[]\n[heat_conduction]\ntype = PorousFlowHeatConduction\nvariable = temperature\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2103712",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-03T13:25:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @garciapintado , there is no example of the porepressure Variable living only on a subdomain, sorry.  I see your problem, and hopefully it's easy to fix.\nThe problem is that those PorousFlowEnergyTimeDerivative and PorousFlowHeatConduction assume there is fluid in their domain: the heat content and heat conduction depend on fluid properties such as the internal energy of the fluid and its thermal conductivity.  Even if the porosity is zero, so there is zero contribution from the fluid, there is no way of telling MOOSE to ignore the fluid: it wants to calculate the fluid contribution (which is zero) and add that zero to the physics.\nThe way forward is to use different Kernels in the mantle, for instance HeatCapacityConductionTimeDerivative and HeatConduction.  (Since the heat-conduction equation equals the diffusion equation (mathematically, i mean) there are actually lots of equivalent options here, such as CoefTimeDerivative and Diffusion.)  Hopefully the documentation (especially the tutorial) should help: https://mooseframework.inl.gov/modules/heat_conduction/index.html\nYou must also block-restrict your Materials.  All PorousFlow... Materials must have: block = 'lcrust ucrust unsat'.  You've probably got that already.\nFinally, you may want to have porepressure exist in the mantle too, just so you keep a record of its value prior to masking.  You can do that by not block-restricting it, but giving it different physics in the mantle, viz a CoefTimeDerivative Kernel with a very small Coefficient.  The reason for the small coefficient is so the nodes on the boundary of the mantle and lcrust are virtually unimpacted by this Kernel (otherwise the physics won't be porous flow).  Calculate \"very small\" by making a rough calculation of the PorousFlowTimeDerivative Kernel's coefficient (porosity * fluid_density) and multiply by, say, 1E-9.   This CoefTimeDerivative Kernel will ensure porepressure remains fixed in the mantle.  Perhaps you won't need to do this, dependening on how your matlab-moose coupling works.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2106764",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-03T21:05:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Many thanks! I had not picked up that different Kernels for a similar purpose, and all acting on the same variable, could be selected on different blocks. I'll try this...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2108916",
                          "updatedAt": "2023-01-02T01:25:38Z",
                          "publishedAt": "2022-02-04T07:07:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "By the way, who are you?  You're obviously quite experienced with numerical modelling - it'd be nice to know where you're from, what you're researching, etc.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2108932",
                          "updatedAt": "2022-09-07T01:26:43Z",
                          "publishedAt": "2022-02-04T07:10:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Thanks! Not terribly expert but trying to surf the waves :-)... I am Javier Garc\u00eda-Pintado [Spanish], and work in MARUM (an excellence center in environmental marine sciences in Bremen, Germany, with a high percentage of resources going to experimental research [from biogeochemists to robotics people], and some resources for numerical analysis ---as my part---. I went into academia after some years in private industry in Spain (as mining engineer), and after a [more experimental than numerical] PhD in ephemeral rivers water quality, I moved to Reading (UK) to the Data Assimilation Research Center [DARC; most people there are mathematicians], and stayed there for 7 years working on assimilation of Synthetic Aperture Radar with the SWE [2D water shallow water equations] for flood forecast. However, for personal reasons [Brexit came to Europe, and then first my wife and then myself were offered to come to MARUM] we decided to move to Germany, and I had to change topics again. Now I work on the modelling of ocean basins within the MARUM cluster in collaboration with climate people, marine biogeochemists...  The overarching goal in my part is to evaluate feedbacks between the formation of ocean basins at geological timescales [that's why we have our 2D viscoelastoplastic deformation model] and submarine hydrothermal systems [with implications for global reconstructions of heat release in relation natural climate variability, the initiation of life in cold-water submarine hydrothermal vents, black-smokers...]. So, after all these moves we're working in this great hybrid environment... AFAIK, what we are trying to do [now with your help] would become the first THM modelling at this broad scale for ocean basins.\nMy idea of trying MOOSE came because it clear that we need to go HPC [and MOOSE is so neatly done!]. Then, as geochemistry is added, the DOFs will highly increase so a proper scaling of the computing will be a must. I'm crossing fingers that this will work...\nI've seen that in CSIRO, Mining Geomechanics, you are mostly mathematicians and mining engineers [which for me is a coincidence as I do not work formally as mining engineer, despite being one].\nCheers.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2109489",
                          "updatedAt": "2022-09-07T01:26:43Z",
                          "publishedAt": "2022-02-04T09:08:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy,\nAfter looking a bit at the code and the options you mentioned I chose to attempt a simple modification to your own Kernel PorousFlowEnergyTimeDerivative as I saw that HeatCapacityConductionTimeDerivative does not include the density, and also under the hope that this would be more seamless integrated within PorousFlow (as temperature seems to be recognised a a PorousFlow variable?). Basically I added a boolean parameter neglect_porosity to the Kernel, which if false sets the number of phases to 0 and I saw that then you consider that there is not fluid present in the object.\nSo, I\u2019m calling the version allowing this HeatCapacityConductionTimeDerivativeNopore for the mantle block with neglect_porosity=true.\nAs for PorousFlowHeatHeatConduction, I believe that now it does not generate any issue [I\u2019ve just added a negligible  PorousFlowPorosityConst porosity], and then a PorousFlowThermalConductivityFromPorosity for the mantle.\nWith this, plus making the Variable pore pressure available in all domain as well as initialising it in all the domain and adding the \u2018mantle\u2019 block to Material PorousFlow1PhaseFullySaturated, I\u2019ve got to get rid of the initialisation errors.\nBut still, something I\u2019ve done must be non-sensical, as I am getting the error:\n\u201cLinear solve did not converge due to DIVERGED_PC_FAILED iterations 0\nPC failed due to FACTOR_OUTMEMORY\u201d\nMaybe the added neglect_porosity is not working as I expected?\nNote that if I activate all blocks for all the kernels, the same simulation runs fine with the same preconditioning and Executioner.\nI\u2019m struggling to understand why this error, with all the environment [C++ & MOOSE] new to me\u2026\nFollowing the posting guidelines by @GiudGiud and guessing this is at this stage a convergence error, I am sending a link to GitHub repository, where I've put the files in case you could help: https://github.com/garciapintado/MOOSE_porous_flow_stuff\nsyn00.i : generates the mesh\nsyn08.i : all blocks active; converges very well\nsyn09.i : inactive Kernels for advective flow in the mantle: gives the error indicated above\nPorousFlowEnergyTimeDerivativeNopore.h : exactly as yours but with extra parameter to neglect porosity\nPorousFlowEnergyTimeDerivativeNopore.C:  \u201c                \u201c                  \"\nHave a nice weekend,\nJavier",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2113165",
                          "updatedAt": "2022-09-07T01:26:48Z",
                          "publishedAt": "2022-02-04T17:56:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hello Andy,\nAs in this setup the thermal advection kernel is only applied to some subdomain blocks (everywhere expect in the mantle), but the thermal conduction is applied everywhere, I am wondering if the issue may come from the thermal boundary conditions, which are specified for the top and bottom boundaries of the overall domain. Could it be that this is clashing with the subdomain application of the thermal advection?\nMany thanks!\nJavier",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2123495",
                          "updatedAt": "2022-09-07T01:29:14Z",
                          "publishedAt": "2022-02-07T08:26:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "The problem appears to be that mumps cannot invert Ax=b, which suggests your Jacobian is bad, or your mesh is bad.  I'm not sure what's wrong.  Can you try with the HeatCapacityConductionTimeDerivative Kernel instead?  (I don't actually see the problem with your new Kernel, however.)  Can you try to make the Variables order = first instead?   It could be related to the TVD advection: can you try to turn that off (use full upwinding intead)?",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2124067",
                          "updatedAt": "2022-09-07T01:29:14Z",
                          "publishedAt": "2022-02-07T10:04:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Hello,\nI\u2019ve tried all the last indications [it would be very unlikely that the mesh has any issue as when all blocks are considered it works fine].\nNote: I am not sure about how to add the input of HeatCapacityConductionTimeDerivative [as there is no example, and HeatCapacity is an extensive property] , but I\u2019ve seen a SpecificHeatConductionTimeDerivate  which I understand [and I think the intent of using this is what you mean?].\nSo, I\u2019ve tried the SpecificHeatConductionTimeDerivative\u00a0Kernel in the mantle, and making the variables LAGRANGE; 1st order as well. I\u2019ve also tried the full-unwinding.\nNone of the modifications, one-by-one, seems to work. I am pasting here the input file, in case it is useful. As it is, including that the last modifications, the initialisation goes through, but the convergence error persists.\nI\u2019ve also done an alternative attempt, which I\u2019ll comment in a separate post to avoid mixing details\n[Mesh]\n[gen]\ntype = GeneratedMeshGenerator\ndim = 2\nxmin = -200000\nxmax =  200000\nymin = -150000\nymax =   0\nelem_type = TRI3\nnx = 100\nny = 75\n[]\n[lcrust]\ntype = SubdomainBoundingBoxGenerator\ninput = 'gen'\nblock_id = 1\n#block_name = lcrust\nbottom_left = '-200000 -40000 0'\ntop_right = '200000 -20000 0'\n[]\n[ucrust]\ntype = SubdomainBoundingBoxGenerator\ninput = 'lcrust'\nblock_id = 2\n#block_name = ucrust\nbottom_left = '-200000 -20000 0'\ntop_right = '200000 -10000 0'\n[]\n[unsat]\ntype = SubdomainBoundingBoxGenerator\ninput = 'ucrust'\nblock_id = 3\n#block_name = unsat\nbottom_left = '-200000 -10000 0'\ntop_right = '200000 0 0'\n[]\n[rename]\ntype = RenameBlockGenerator\ninput = 'unsat'\nold_block = '0 1 2 3'\nnew_block = 'mantle lcrust ucrust unsat'\n[]\n[topnopore]\ntype = SideSetsBetweenSubdomainsGenerator\ninput = 'rename'\nnew_boundary = 'top_nopore'\nprimary_block = 'mantle'\npaired_block = 'lcrust'\n[]\n[]\n[GlobalParams]\nPorousFlowDictator = dictator\ngravity = '0 -9.81 0'              # make global, so no need to add it to the userobject requiring it\n[]\n[UserObjects]\n[dictator]\ntype = PorousFlowDictator\nporous_flow_vars = 'porepressure temperature'\nnumber_fluid_phases = 1\nnumber_fluid_components = 1\n[]\n[]\n[Variables]\n[porepressure]\nblock = 'mantle lcrust ucrust unsat'   # blocks where this variable exists\nfamily = LAGRANGE\norder = FIRST\n[]\n[temperature]\nfamily = LAGRANGE\norder = FIRST\nscaling = 1E-08\n[]\n[]\n[Kernels] # as added by the action [PorousFlowFullySaturated]\n[pp_time_derivative]\ntype = PorousFlowMassTimeDerivative\nblock = 'lcrust ucrust unsat'\nvariable = porepressure\n[]\n[pp_upwind_advectiveflux_kernel]\ntype = PorousFlowFullySaturatedAdvectiveFlux\nblock = 'lcrust ucrust unsat'\nvariable = porepressure\n[]\n[heat_time_derivative]\ntype = PorousFlowEnergyTimeDerivative\nblock = 'lcrust ucrust unsat'\nvariable = temperature\n[]\n[heat_time_derivative_nopore]\ntype = SpecificHeatConductionTimeDerivative\nblock = 'mantle'\nvariable = temperature\nlumping = true\ndensity = density_mantle\nspecific_heat = specific_heat_mantle\n[]\n[heat_conduction]\ntype = PorousFlowHeatConduction\nvariable = temperature\n[]\n[heat_upwind_advectiveflux_kernel]\ntype = PorousFlowFullySaturatedUpwindHeatAdvection\nblock = \"lcrust ucrust unsat\"\nvariable = temperature\n[]\n[]\n[ICs]\n[porepressure_IC]\ntype = FunctionIC\n#block = \"lcrust ucrust unsat\"\nvariable = porepressure               # [Pa]\nfunction = '9.81*(-y)*1000'\n[]\n[temperature_IC]\ntype = FunctionIC\nvariable = temperature\nfunction = '273.15+5+(-y)*600/150000'     # => 878.15 = 273.15+5+600 at the bottom\n[]\n[]\n[BCs]\n[Ptop]\ntype = DirichletBC\nvariable = porepressure\nvalue = 101325.0                       # [Pa] 1 atm\nboundary = top\n[]\n[Ttop]\ntype = DirichletBC\nvariable = temperature\nvalue = 278.15                         #\nboundary = top\n[]\n[Tbot]\ntype = DirichletBC\nvariable = temperature\nvalue = 878.15\nboundary = top_nopore\n[]\n[]\n[Modules]\n[FluidProperties]\n[the_simple_fluid]\ntype = SimpleFluidProperties\nbulk_modulus = 2E9\nviscosity = 1.0E-3\ndensity0 = 1000.0\n[]\n[]\n[]\n[Materials]\n[materials_mantle]\ntype = GenericConstantMaterial\nblock = mantle\nprop_names = 'thermal_conductivity_mantle specific_heat_mantle density_mantle'\nprop_values = '3.3 1200.0 3360.0'\n[]\n[porosity_mantle]\ntype = PorousFlowPorosityConst                  # 'at_nodes=False' by default\nblock = mantle\nporosity = 0.03\n[]\n[porosity_lcrust]\ntype = PorousFlowPorosity\nblock = lcrust\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.66E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[porosity_ucrust]\ntype = PorousFlowPorosity\nblock = ucrust\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.38E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[porosity_unsat]\ntype = PorousFlowPorosity\nblock = unsat\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.38E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[permeability_mantle]\nblock = mantle\ntype = PorousFlowPermeabilityConst    # 'at_nodes=False' by default\npermeability = '1.0E-18 0 0 0 1.0E-18 0 0 0 1.0E-18'\n[]\n[permeability_lcrust]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = lcrust\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 9.0E-16\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[permeability_ucrust]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = ucrust\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 1.0E-15\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[permeability_unsat]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = unsat\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 1.0E-22\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[internal_energy_mantle]                # 'at_nodes=True' by default\ntype = PorousFlowMatrixInternalEnergy #\u00a0this Material calculated the internal energy of solid rock grains\nblock = mantle                        # internal_energy [J.K-1.m-3] = density*specific_heat_capacity\ndensity = 3360.0                      # [kg.m-3] density of rock grains\nspecific_heat_capacity = 1200.0       # [J.kg-1.K-1] specific heat capacity of rock grains\n[]\n[internal_energy_lcrust]\ntype = PorousFlowMatrixInternalEnergy #\u00a0this Material calculated the internal energy of solid rock grains\nblock = lcrust\ndensity = 2850.0                      # [kg.m-3] density of rock grains\nspecific_heat_capacity = 1200.0       # [J.kg-1.K-1] specific heat capacity of rock grains\n[]\n[internal_energy_ucrust]\ntype = PorousFlowMatrixInternalEnergy #\u00a0this Material calculated the internal energy of solid rock grains\nblock = ucrust\ndensity = 2700.0                      # [kg.m-3] density of rock grains\nspecific_heat_capacity = 1200.0       # [J.kg-1.K-1] specific heat capacity of rock grains\n[]\n[internal_energy_unsat]\ntype = PorousFlowMatrixInternalEnergy #\u00a0this Material calculated the internal energy of solid rock grains\nblock = unsat\ndensity = 2700.0                      # [kg.m-3] density of rock grains\nspecific_heat_capacity = 1200.0       # [J.kg-1.K-1] specific heat capacity of rock grains\n[]\n[lambda_mantle]\ntype = PorousFlowThermalConductivityFromPorosity # rock-fluid combined thermal conductivity by weighted sum of rock and fluid conductivities\nblock = mantle\nlambda_f = '3.3 0 0 0 3.3 0 0 0 3.3'\nlambda_s = '3.3 0 0 0 3.3 0 0 0 3.3'\n[]\n[lambda_lcrust]\ntype = PorousFlowThermalConductivityFromPorosity\nblock = lcrust\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.5 0 0 0 2.5 0 0 0 2.5'\n[]\n[lambda_ucrust]\ntype = PorousFlowThermalConductivityFromPorosity\nblock = ucrust\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.3 0 0 0 2.3 0 0 0 2.3'\n[]\n[lambda_unsat]\ntype = PorousFlowThermalConductivityFromPorosity\nblock = unsat\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.3 0 0 0 2.3 0 0 0 2.3'\n[]\n[porepressure_material]\ntype = PorousFlow1PhaseFullySaturated # at_nodes=false by default\nblock = 'mantle lcrust ucrust unsat'\nporepressure = porepressure\n[]\n[temperature_material]\ntype = PorousFlowTemperature          # at_nodes=false by default\ntemperature = temperature\n[]\n[massfrac]\ntype = PorousFlowMassFraction         # at_nodes=false by default\nblock = 'lcrust ucrust unsat'         # list of blocks where this object applies to\n# mass_fraction_vars # nod needed when num_phases=num_component\n[]\n[simple_fluid]\ntype = PorousFlowSingleComponentFluid      # see documentation for this material regarding the choice of units\nblock = 'lcrust ucrust unsat'\nfp = the_simple_fluid                      # this Material is at_nodes=false by default\nphase = 0\n[]\n[simple_fluid_noflow]\ntype = PorousFlowSingleComponentFluid      # see documentation for this material regarding the choice of units\nblock = 'mantle'\nfp = the_simple_fluid                      # this Material is at_nodes=false by default\nphase = 0\n[]\n[effective_fluid_pressure] # create effective fluid pressure [requested by PorousFlowPorosity even it has not mechanical coupling]\nblock = 'lcrust ucrust unsat'\ntype = PorousFlowEffectiveFluidPressure\n[]\n[nearest_qp]\ntype = PorousFlowNearestQp                 #\u00a0atNodes=false by default\nblock = 'mantle lcrust ucrust unsat'       # should mantle be neglected here?\n[]\n[relperm] # required by PorousFlowDarcyVelocityComponent AuxKernels\ntype = PorousFlowRelativePermeabilityConst # atNodes=false by default\nblock = 'mantle lcrust ucrust unsat'       # ERROR when mantle not specified\nphase = 0\nkr = 1\n[]\n[]\n[Preconditioning]\nactive = smp_lu_mumps\n[smp_lu_mumps]\ntype = SMP\nfull = true\npetsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\npetsc_options_value = 'lu       mumps'\n[]\n[]\n[Executioner]\ntype = Transient\nsolve_type = Newton\nend_time = 315576000000      # [s] 10000 year\n#end_time = 1E6              # [s] ~[12 days]\ndtmax = 3.2E10               # [s] ~1000 year. advanced parameter. Maximum timestep size in an adaptive run. Default to 1E30\nnl_max_its = 25              # solver parameter. Max Nonlinear Iterations. Default to 50\nl_max_its = 100              # solver parameter. Max Linear Iterations. Default to 10000\nnl_abs_tol = 1E-06           # solver parameter. Nonlinear absolute tolerance. Default to 1E-50\nnl_rel_tol = 1E-08           # solver parameter. Nonlinear Relative Tolerance. Default to 1E-08\nscheme = 'implicit-euler'    # the default TimeIntegrator\n[TimeStepper]                #\u00a0TimeStepper subsystem [block always nested within the Executioner block]\ntype = IterationAdaptiveDT # adjust the timestep based on the number of iterations\noptimal_iterations = 10    # target number of nonlinear iterations\ndt = 1E5                   # ~[27 h]\ngrowth_factor = 2\ncutback_factor = 0.5\n[]\n[]\n[Outputs]\n[ou]\ntype = Exodus\n#output_material_properties = true\n[]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2126980",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-07T16:50:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Hello,\nAnd this is an alternative attempt. Here I thought about constraining the variables controlled by the PorousFlow dictator {porepressure, temperature} to the PorousFlow subdomains (everywhere but the mantle). That is, neither in their definition nor everywhere else they are supposed to exist in the mantle. None of the related Kernels or Materials makes any reference to the mantle [at least not on purpose].\nThen I\u2019ve created and alternative variable, non-controlled by the PorousFlow dictator, named {temperature_mantle} which only exists in the mantle, and is subject only to conductive evolution, through the use of non PorousFlow Kernels: SpecificHeatConductionTimeDerivative and HeatConduction [after your previous indications], with their specific non-PorousFlow parameters.\nAlso, there is now an additional internal side between the mantle and the above domain (the one that house be visible by the PorousFlow dictator). And there are boundary conditions specific to temperature and to temperature_mantle. Step-by-step, to remove any possibility of creating an error because of any interaction between temperature and temperature_mantle, they are not coupled. I would not know, anyway, how to coupled them yet, but I guess this should be possible somehow through their common boundary. So, I\u2019d just expect them to evolve as independent variables.\nThat is: the aim of the test is [a] to see if PorousFlow can work only on a subdomain(s), and [b] if this worked, then I'd expect the overall \u201cmultiphysics\u201d problem could be approached with the current PorousFlow+MOOSE [i.e. only heat conduction in the mantle, and the THC \u2014thermo-hydro-chemical problem everywhere else\u2014], provided that later on temperatureand temperature_mantle can be coupled, so their coupling would substitute the values at their common boundary.\nWell, unfortunately, PorousFlow gives an error again at initialisation of Materials:\n\u2026\nMaterial property 'dPorousFlow_porepressure_nodal_dvar', requested by 'PorousFlow_density_nodal_all' is not defined on block mantle\nMaterial property 'dPorousFlow_saturation_nodal_dvar', requested by 'PorousFlow_density_nodal_all' is not defined on block mantle\nMaterial property 'dPorousFlow_temperature_nodal_dvar', requested by 'PorousFlow_density_nodal_all' is not defined on block mantle\n\u2026\nIt appears that at initialisation, PorousFlowDictator is forcing some Action to occur everywhere in the domain [perhaps PorousFlowAddMaterialAction or  PorousFlowAddMaterialJoiner?]. If this is so, it seems that as it stands, it can\u2019t be constrained to work in specific subdomains, preventing it from multiphysics coupling with adjacent domains. Could this be so?\nIf so, and there is anything I could do to help adding this possibility [facing my severe lack of C++ knowledge], please let me know.\nI am pasting the self-contained input file for this test.\n[Mesh]\n[gen]\ntype = GeneratedMeshGenerator\ndim = 2\nxmin = -200000\nxmax =   200000\nymin = -150000\nymax =   0\nelem_type = TRI6\nnx = 100\nny = 75\n[]\n[lcrust]\ntype = SubdomainBoundingBoxGenerator\ninput = 'gen'\nblock_id = 1\nbottom_left = '-200000 -40000 0'\ntop_right = '200000 -20000 0'\n[]\n[ucrust]\ntype = SubdomainBoundingBoxGenerator\ninput = 'lcrust'\nblock_id = 2\nbottom_left = '-200000 -20000 0'\ntop_right = '200000 -10000 0'\n[]\n[unsat]\ntype = SubdomainBoundingBoxGenerator\ninput = 'ucrust'\nblock_id = 3\nbottom_left = '-200000 -10000 0'\ntop_right = '200000 0 0'\n[]\n[rename]\ntype = RenameBlockGenerator\ninput = 'unsat'\nold_block = '0 1 2 3'\nnew_block = 'mantle lcrust ucrust unsat'\n[]\n[topnopore]\ntype = SideSetsBetweenSubdomainsGenerator\ninput = 'rename'\nnew_boundary = 'top_nopore'\nprimary_block = 'mantle'\npaired_block = 'lcrust'\n[]\n[]\n[GlobalParams]\nPorousFlowDictator = dictator\ngravity = '0 -9.81 0'              # make global, so no need to add it to the userobject requiring it\n[]\n[UserObjects]\n[dictator]\ntype = PorousFlowDictator\nporous_flow_vars = 'porepressure temperature'\nnumber_fluid_phases = 1\nnumber_fluid_components = 1\n[]\n[pp_KT_advectiveflux_onecomp_userobj]\ntype = PorousFlowAdvectiveFluxCalculatorSaturated       # [1-phase, 1-comp, fully saturated] one kernel for each fluid component\nblock = 'lcrust ucrust unsat'                           # OPTIONAL, list of blocks that this object will be applied to\nflux_limiter_type = superbee\nmultiply_by_density = true # default. Implies the advective flux is multiplied by density, so it is a mass flux\n[]\n[heat_KT_advectiveflux_userobj]\ntype = PorousFlowAdvectiveFluxCalculatorSaturatedHeat\nblock = 'lcrust ucrust unsat'\nflux_limiter_type = superbee\nmultiply_by_density = true # default. Implies the advective flux is multiplied by density, so it is a mass flux\n[]\n[]\n[Variables]\n[porepressure]\nblock = 'lcrust ucrust unsat'   # blocks where this variable exists\nfamily = LAGRANGE\norder = SECOND\n[]\n[temperature]                     # [K] parsed initial condition in the ICs block below\nblock = 'lcrust ucrust unsat'    # blocks where this variable exists\nfamily = LAGRANGE\norder = SECOND\nscaling = 1E-08                  # this variable scaling brings the residual R_T to the same order of magnitude that the Pressure residual R_P\n[]\n[temperature_mantle]               # [K] parsed initial condition in the ICs block below\nblock = 'mantle'                 # blocks where this variable exists\nfamily = LAGRANGE\norder = SECOND\nscaling = 1E-08                  # this variable scaling brings the residual R_T to the same order of magnitude that the Pressure residual R_P\n[]\n[]\n[Kernels] # as added by the action [PorousFlowFullySaturated]\n[pp_time_derivative]                         # one kernel for each fluid component\ntype = PorousFlowMassTimeDerivative        # these kernels lump the fluid-component mass to the nodes to ensure superior numerical stabilization\nblock = 'lcrust ucrust unsat'\nvariable = porepressure\n[]\n[pp_KT_advectiveflux_kernel]\ntype = PorousFlowFluxLimitedTVDAdvection                              # one kernel for each fluid component\nblock = 'lcrust ucrust unsat'\nadvective_flux_calculator = pp_KT_advectiveflux_onecomp_userobj  # PorousFlowAdvectiveFluxCalculator UserObjectName\nvariable = porepressure\n[]\n[heat_time_derivative]\ntype = PorousFlowEnergyTimeDerivative      # this kernel lumps the heat energy-density to the nodes to ensure superior numerical stabilization\nblock = 'lcrust ucrust unsat'\nvariable = temperature\n# save_in = # name of auxiliary variable to save this Kernel residual contributions to.\n[]\n[heat_conduction]\ntype = PorousFlowHeatConduction\nblock = 'lcrust ucrust unsat'\nvariable = temperature\n[]\n[heat_KT_advectiveflux_kernel]\ntype = PorousFlowFluxLimitedTVDAdvection                          # one kernel for each fluid component\nblock = \"lcrust ucrust unsat\"\nadvective_flux_calculator = heat_KT_advectiveflux_userobj         # PorousFlowAdvectiveFluxCalculator UserObjectName\nvariable = temperature\n[]\n[heat_time_derivative_mantle]\ntype = SpecificHeatConductionTimeDerivative\nblock = 'mantle'\nvariable = temperature_mantle\nlumping = true\ndensity = density_mantle\nspecific_heat = specific_heat_mantle\n[]\n[heat_conduction_mantle]\ntype = HeatConduction\nblock = 'mantle'\nvariable = temperature_mantle\ndiffusion_coefficient = thermal_conductivity_mantle\n[]\n[]\n[ICs]\n[porepressure_IC]\ntype = FunctionIC\nblock = \"lcrust ucrust unsat\"\nvariable = porepressure               # [Pa]\nfunction = '9.81*(-y)*1000'\n[]\n[temperature_IC]\ntype = FunctionIC\nblock = \"lcrust ucrust unsat\"\nvariable = temperature\nfunction = '273.15+5+(-y)600/150000'     # => 878.15 = 273.15+5+600 at the bottom [273.15+5+600/15000040000]\n[]\n[temperature_mantle_IC]\ntype = FunctionIC\nblock = \"mantle\"\nvariable = temperature_mantle\nfunction = '273.15+5+(-y)600/150000'     # => 878.15 = 273.15+5+600 at the bottom [273.15+5+600/15000040000]\n[]\n[]\n[BCs]\n[Ptop]\ntype = DirichletBC                     # this is a NodalBC\nvariable = porepressure\nvalue = 101325.0                       # [Pa] 1 atm\nboundary = top\n[]\n[Ttop]\ntype = DirichletBC\nvariable = temperature\nvalue = 278.15                         #\nboundary = top\n[]\n[Tbot]\ntype = DirichletBC\nvariable = temperature\nvalue = 438.15  # matching grad_T_y = 600/150000\nboundary = top_nopore\n[]\n[Ttop_mantle]\ntype = DirichletBC\nvariable = temperature_mantle\nvalue = 438.15  # matching grad_T_y = 600/150000\nboundary = top_nopore\n[]\n[Tbot_mantle]\ntype = DirichletBC\nvariable = temperature_mantle\nvalue = 878.15  # matching grad_T_y = 600/150000\nboundary = bottom\n[]\n[]\n[Modules]\n[FluidProperties]\n[the_simple_fluid]\ntype = SimpleFluidProperties\nbulk_modulus = 2E9\nviscosity = 1.0E-3\ndensity0 = 1000.0\n[]\n[]\n[]\n[Materials]\n[materials_mantle]\ntype = GenericConstantMaterial\nblock = mantle\nprop_names = 'thermal_conductivity_mantle specific_heat_mantle density_mantle'\nprop_values = '3.3 1200.0 3360.0'\n[]\n[porosity_lcrust]\ntype = PorousFlowPorosity\nblock = lcrust\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.66E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[porosity_ucrust]\ntype = PorousFlowPorosity\nblock = ucrust\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.38E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[porosity_unsat]\ntype = PorousFlowPorosity\nblock = unsat\nporosity_zero = 0.05\nthermal = true\nthermal_expansion_coeff = 3.38E-05\nreference_temperature = 273.15\nfluid = true\nsolid_bulk = 10.E09\nbiot_coefficient = 0.8\nbiot_coefficient_prime = 0.8\nmechanical = false\n[]\n[permeability_lcrust]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = lcrust\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 9.0E-16\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[permeability_ucrust]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = ucrust\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 1.0E-15\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[permeability_unsat]\ntype = PorousFlowPermeabilityKozenyCarman\nblock = unsat\nn = 3\nm = 2\nphi0 = 0.05\nk0 = 1.0E-22\nporoperm_function = 'kozeny_carman_phi0'\n[]\n[internal_energy_lcrust]\ntype = PorousFlowMatrixInternalEnergy\nblock = lcrust\ndensity = 2850.0                      # [kg.m-3] density of rock grains\nspecific_heat_capacity = 1200.0       # [J.kg-1.K-1] specific heat capacity of rock grains\n[]\n[internal_energy_ucrust]\ntype = PorousFlowMatrixInternalEnergy\ndensity = 2700.0\nspecific_heat_capacity = 1200.0\n[]\n[internal_energy_unsat]\ntype = PorousFlowMatrixInternalEnergy\nblock = unsat\ndensity = 2700.0\nspecific_heat_capacity = 1200.0\n[]\n[lambda_lcrust]\ntype = PorousFlowThermalConductivityFromPorosity\nblock = lcrust\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.5 0 0 0 2.5 0 0 0 2.5'\n[]\n[lambda_ucrust]\ntype = PorousFlowThermalConductivityFromPorosity\nblock = ucrust\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.3 0 0 0 2.3 0 0 0 2.3'\n[]\n[lambda_unsat]\ntype = PorousFlowThermalConductivityFromPorosity # rock-fluid combined thermal conductivity by weighted sum of rock and fluid conductivities\nblock = unsat\nlambda_f = '0.56 0 0 0 0.56 0 0 0 0.56'\nlambda_s = '2.3 0 0 0 2.3 0 0 0 2.3'\n[]\n[porepressure_material]\ntype = PorousFlow1PhaseFullySaturated # at_nodes=false by default\nblock = 'lcrust ucrust unsat'\nporepressure = porepressure\n[]\n[temperature_material]\ntype = PorousFlowTemperature          # at_nodes=false by default\nblock = 'lcrust ucrust unsat'                            # I think I would not need this here, as temperature exists in all blocks\ntemperature = temperature\n[]\n[massfrac]\ntype = PorousFlowMassFraction         # at_nodes=false by default\nblock = 'lcrust ucrust unsat'         # list of blocks where this object applies to\n[]\n[simple_fluid]\ntype = PorousFlowSingleComponentFluid      # see documentation for this material regarding the choice of units\nblock = 'lcrust ucrust unsat'\nfp = the_simple_fluid                      # this Material is at_nodes=false by default\nphase = 0\n[]\n[effective_fluid_pressure] # create effective fluid pressure [is requested by PorousFlowPorosity even it has not mechanical coupling]\nblock = 'lcrust ucrust unsat'\ntype = PorousFlowEffectiveFluidPressure\n[]\n[nearest_qp]\ntype = PorousFlowNearestQp                 #\u00a0atNodes=false by default\nblock = 'lcrust ucrust unsat'       # should mantle be neglected here?\n[]\n[relperm] # required by PorousFlowDarcyVelocityComponent AuxKernels\ntype = PorousFlowRelativePermeabilityConst # atNodes=false by default\nblock = 'lcrust ucrust unsat'       # ERROR when mantle not specified\nphase = 0\nkr = 1                                     # default, anyway\n[]\n[]\n[Preconditioning]\nactive = smp_lu_mumps\n[smp_lu_mumps]\ntype = SMP\nfull = true\npetsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\npetsc_options_value = 'lu       mumps'\n[]\n[]\n[Executioner]\ntype = Transient\nsolve_type = Newton\nend_time = 315576000000      # [s] 10000 year\n#end_time = 1E6              # [s] ~[12 days]\ndtmax = 3.2E10               # [s] ~1000 year. advanced parameter. Maximum timestep size in an adaptive run. Default to 1E30\nnl_max_its = 25              # solver parameter. Max Nonlinear Iterations. Default to 50\nl_max_its = 100              # solver parameter. Max Linear Iterations. Default to 10000\nnl_abs_tol = 1E-06           # solver parameter. Nonlinear absolute tolerance. Default to 1E-50\nnl_rel_tol = 1E-08           # solver parameter. Nonlinear Relative Tolerance. Default to 1E-08\nscheme = 'implicit-euler'    # the default TimeIntegrator\n[TimeStepper]                #\u00a0TimeStepper subsystem [block always nested within the Executioner block]\ntype = IterationAdaptiveDT # adjust the timestep based on the number of iterations\noptimal_iterations = 10    # target number of nonlinear iterations\ndt = 1E5                   # ~[27 h]\ngrowth_factor = 2\ncutback_factor = 0.5\n[]\n[]\n[Outputs]\n[ou]\ntype = Exodus\n#output_material_properties = true\n[]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2127470",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-07T17:59:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @garciapintado .  This looks like a bug to me.  We need to look into it.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2128553",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-07T20:51:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Hi @cpgr , i think we need to fix a bug in PorousFlow .   The problem is when the PorousFlow Variables are block restricted.  MOOSE then complains it needs certain Materials on blocks where the PorousFlow Variables do not exist.  For instance, if the PorousFlow Variables (and Materials, etc) do not appear on block = mantle, then MOOSE spits back things like:\nMaterial property 'dPorousFlow_porepressure_nodal_dvar', requested by 'PorousFlow_density_nodal_all' is not defined on block mantle\nMaterial property 'dPorousFlow_porepressure_nodal_dvar', requested by 'PorousFlow_density_nodal_all_face' is not defined on block mantle\nMaterial property 'dPorousFlow_porepressure_nodal_dvar', requested by 'PorousFlow_density_nodal_all_neighbor' is not defined on block mantle\n\nNote the _face and _neighbor in the last two messages.  What is this?!\n(It appears that the \"core\" variables, such as PorousFlow_porepressure_nodal are not needed, but the derivatives dPorousFlow_porepressure_nodal_dvar are, but there are quite a few error messages, so i could just be missing something.)\nHopefully today i'll have time to create a simple example.",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2128558",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-07T20:52:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "It must have something to do with the nodal materials that we use. Hopefully it isn't too tricky to get to the bottom of.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2129069",
                          "updatedAt": "2022-06-26T08:48:13Z",
                          "publishedAt": "2022-02-07T22:26:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @WilkAndy & @cpgr,  Many thanks for looking into this!",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2130972",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-08T06:55:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @cpgr .  I believe the problem is in the Joiners.  As far as i can see PorousFlowAddMaterialJoiner.C does not take into account block-restricted materials.  I think every time we addJoiner we'll have to pass block-restrictions along.  Do you agree with this?  I'm going to start coding it now, but would be good to have your confirmation.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138298",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-09T04:04:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "@garciapintado , i've got a fix for this.  It will take some time for it to appear in MOOSE: perhaps 1 week?  If you are in a hurry i can tell you how to get my code.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138627",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:26:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "How fast! Many thanks! I think I can wait for a week to just do the git pull and in the meantime try to learn how to add an extra material myself through an Exodus input file [a REAL volumetric strain field which would replace the one currently taken from the mechanical coupling for PorousFlowPorosity, plus another REAL field to be used as factor for the permeability]. Basic stuff, but my first attempt to do some actual C++ MOOSE coding, and I have to do it anyway.\nShall we close this discussion as the masking topic is answered, or keep it open to follow up further steps in this MOOSE+PorousFlow application?",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2139477",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T07:59:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks for finding the bug, @garciapintado  !",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2140060",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T09:41:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Oh, I wasn't expecting this!\nSo if I understand this, the joiner makes a material everywhere, even where a variable and subsequent nodal material aren't even present? It all works when there is the same material defined on different blocks, as long as it is on all blocks, but fails when one block doesn't have that material (like in the example above).\nHopefully you can propagate the block info easily enough.",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138319",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-09T04:12:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OK, good to have your confirmation, thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138326",
                          "updatedAt": "2022-06-26T08:48:13Z",
                          "publishedAt": "2022-02-09T04:13:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Good sleuthing Andy!",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138348",
                          "updatedAt": "2022-06-26T08:48:13Z",
                          "publishedAt": "2022-02-09T04:19:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yea, i think i'm going to have to create that info in the PorousFlowDictator.  Otherwise i have to query all Materials, looking for, eg, all the PorousFlowPorosity, and take a union of all their blocks.  That would be quite ugly code just to get around this case we've never seen in the history of PorousFlow.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138352",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-09T04:21:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "So something like a pf_blocks = 'block0 block1' in the dictator and then use that in the joiner materials?",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138434",
                          "updatedAt": "2022-09-23T07:38:12Z",
                          "publishedAt": "2022-02-09T04:45:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yea.  Maybe i'm being lazy and not querying all the Materials multiple times.  What do you think?",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138600",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:22:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Anyway, i implemented the Dictator idea and it works, so i know the Joiners were the problem",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138614",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:24:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "This is probably the easiest fix.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138647",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:30:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Heheheh, now i'm thinking i'm being lazy!!",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138651",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:31:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Efficient sounds better",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138677",
                          "updatedAt": "2022-09-07T01:30:21Z",
                          "publishedAt": "2022-02-09T05:38:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Fixing this problem in #20260",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2138633",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-09T05:27:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yea, good, let's close",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2140018",
                          "updatedAt": "2022-06-26T08:48:13Z",
                          "publishedAt": "2022-02-09T09:33:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Hi @garciapintado - how is your modelling going?",
                  "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2225641",
                  "updatedAt": "2022-06-26T08:48:12Z",
                  "publishedAt": "2022-02-22T04:03:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @WilkAndy! I was preparing the matlab side of it, and when I went to update MOOSE by the end of last week, it turned out the the idaholab server was down. It seems that the issue has been solved tonight [German time] (#20351). So I'm trying back right now...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2226368",
                          "updatedAt": "2022-06-26T08:48:12Z",
                          "publishedAt": "2022-02-22T07:04:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @WilkAndy, I believe it should work for me now!\nA simple 2D test works as expected [temperature only controlled by diffusion in the mantle, and Porous flow for the top layers, and porepressure only existing in the top layers]. A bit more complicated tests are crashing but this must be my mistake. So I'll try to figure out the errors and hopefully come back with something more realistic running...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2227473",
                          "updatedAt": "2022-07-29T02:16:45Z",
                          "publishedAt": "2022-02-22T10:09:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @WilkAndy. Just to say that I've got a \"realistic\" synthetic domain running with tabulated fluid properties [water97]. Now, as the [synthetic] 'mantle' is not considered, the high pressure and temperature values that led to the previous crashes are not there anymore. This is great news to me!\nI'll go on now with the real case simulations. One note is that I am using constant porosity and permeability [haven't managed to make it run with PorousFlowPorosity]. But in the application I'll pass constant fields of porosity & permeability pre-calculated in Matlab as 1st step to circumvent this...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2229872",
                          "updatedAt": "2022-07-29T02:16:58Z",
                          "publishedAt": "2022-02-22T16:12:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @WilkAndy. Only to report that I later noticed that geothermal gradients were not realistic in my synthetic tests. For geothermal gradients going to about 800 \u00baC at 120km depth the runs worked well, but when I changed that to a more standard [~1300\u00baC at 120 km depth]. The solver did not converge at all, often with warnings about water temperature being below the minimum for the EOS [eventually I got rid of these warning by extrapolating ---with 0-slope the tabulated EOS also towards lower temperature values, but still this did not solve the convergence problems]. The limiting gradient for converging runs was that to reach ~900\u00baC at 120 km depth].\nSo, I've been struggling with that [plus another matlab settings for the coupling]. In the end I've just now tried to switch from the Kuzmin-Turek stabilization to a full upwinding for both fluid pressure and temperature, and it turns out that now the runs converge very well for the more realistic geothermal gradient.\nSo, this is just to let you know that the full upwinding schemes  converge better than KZ in these synthetic tests. I'll go now, finally, for the real case scenario with input from matlab... I'd presume that the more complicated new part for me will be to set the BCs, as some areas are under the ocean [for which Dirichlet are not OK for outflow pressures and temperatures --- the venting areas---], and  some other are actually subaerial in the sides of the domain [actually I am still unsure if it is possible to go ahead with fully saturated flow, which I'd like if possible]. Anyway, I'll report results...",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2244428",
                          "updatedAt": "2022-07-29T02:17:41Z",
                          "publishedAt": "2022-02-24T14:33:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Sorry, just to note thatt KZ stabilisation with flux limiter VanLeer also converges very well (3 times slower than full upwinding but very fast still). So, the issue seemed to be the \"superbee\" flux limiter I was using before.",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2244589",
                          "updatedAt": "2022-07-29T02:17:42Z",
                          "publishedAt": "2022-02-24T14:57:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OK, that's good news about the flux limiter, but .... i don't understand it!   I'll have to have a think :-)",
                          "url": "https://github.com/idaholab/moose/discussions/20139#discussioncomment-2246753",
                          "updatedAt": "2022-07-29T02:17:47Z",
                          "publishedAt": "2022-02-24T20:30:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}