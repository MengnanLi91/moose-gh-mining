{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNS0zMVQxODoxODozOC0wNTowMM4AZvxt"
    },
    "edges": [
      {
        "node": {
          "title": "updated MOOSE and it doesnt converge when PorousFlowMassTimeDerivative is active",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI have just updated MOOSE to the latest version and for some reason when have PorousFlowMassTimeDerivative in my input file (to make simulation transient) it won't converge at all, the steady-state run works fine:\n  [PorousFlowMassTimeDerivative]\n    type = PorousFlowMassTimeDerivative\n    ### see https://mooseframework.inl.gov/source/kernels/PorousFlowMassTimeDerivative.html\n    variable = porepressure_L1\n    fluid_component = 0\n    multiply_by_density = true\n  []\n\nHere is the input: https://github.com/Traiwit/public_moose_beh/blob/main/input_file_transient_doesnt_converge.i\nNot sure if this is related to New initial residual evaluation behaviour\nor the node number system has been updated (since we have nodal-constraints action)  [this shouldnt be the case since SS run works fine], etc\nI can confirm the only difference between these 2 runs are the moose-submodule (current vs 8c776d8)\nold moose 8c776d8\nTime Step 1, time = 1.833, dt = 0.083\n\n  Executing Controls.                                                                    [ 10.28 s] [52180 MB]\n\n\n\n    Computing Initial Residual\n      Computing Residual..                                                               [ 19.04 s] [52364 MB]\n    Finished Computing Initial Residual                                                  [ 19.04 s] [52364 MB]\n    Computing Residual..                                                                 [ 18.69 s] [52365 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.38048e+13\n\n 0 Nonlinear |R| = 7.380481e+13\n\n    Computing Jacobian\n      Executing Controls.                                                                [ 10.19 s] [52365 MB]\n    Still Computing Jacobian...                                                          [ 33.42 s] [52365 MB]\n\n      0 Linear |R| = 7.380481e+13\n      1 Linear |R| = 3.720675e+11\n      2 Linear |R| = 1.254415e+11\n      3 Linear |R| = 4.925024e+10\n      4 Linear |R| = 1.800967e+10\n      5 Linear |R| = 6.676370e+09\n      6 Linear |R| = 6.396018e+09\n      7 Linear |R| = 2.179829e+09\n      8 Linear |R| = 7.906879e+08\n      9 Linear |R| = 3.987515e+08\n     10 Linear |R| = 3.036119e+08\n     11 Linear |R| = 2.503080e+08\n     12 Linear |R| = 1.728642e+08\n     13 Linear |R| = 1.051660e+08\n     14 Linear |R| = 7.462272e+07\n     15 Linear |R| = 5.744832e+07\n     16 Linear |R| = 3.984994e+07\n     17 Linear |R| = 2.520098e+07\n     18 Linear |R| = 1.940504e+07\n     19 Linear |R| = 1.580070e+07\n     20 Linear |R| = 1.343324e+07\n     21 Linear |R| = 1.171208e+07\n     22 Linear |R| = 1.042212e+07\n     23 Linear |R| = 9.357395e+06\n     24 Linear |R| = 7.844318e+06\n     25 Linear |R| = 5.975674e+06\n\n\n    Computing Residual..                                                                 [ 18.90 s] [52427 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.59173e+12\n\n 1 Nonlinear |R| = 5.591733e+12\n\n    Computing Jacobian\n      Executing Controls.                                                                [ 10.25 s] [52427 MB]\n    Still Computing Jacobian..                                                           [ 27.18 s] [52427 MB]\n\n      0 Linear |R| = 5.591733e+12\n      1 Linear |R| = 2.817171e+10\n      2 Linear |R| = 9.503947e+09\n      3 Linear |R| = 3.756188e+09\n      4 Linear |R| = 1.379314e+09\n      5 Linear |R| = 5.133807e+08\n      6 Linear |R| = 4.920184e+08\n      7 Linear |R| = 1.665441e+08\n      8 Linear |R| = 5.878113e+07\n      9 Linear |R| = 2.709168e+07\n     10 Linear |R| = 1.963950e+07\n     11 Linear |R| = 1.666981e+07\n     12 Linear |R| = 1.305705e+07\n     13 Linear |R| = 9.731031e+06\n     14 Linear |R| = 8.192687e+06\n     15 Linear |R| = 7.326149e+06\n     16 Linear |R| = 6.166595e+06\n     17 Linear |R| = 5.082912e+06\n     18 Linear |R| = 4.561948e+06\n     19 Linear |R| = 3.949898e+06\n     20 Linear |R| = 3.315544e+06\n     21 Linear |R| = 2.682667e+06\n     22 Linear |R| = 2.105884e+06\n     23 Linear |R| = 1.629972e+06\n     24 Linear |R| = 1.090884e+06\n     25 Linear |R| = 7.046941e+05\n     26 Linear |R| = 5.332410e+05\n\n\n    Computing Residual.                                                                  [ 18.72 s] [52429 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 1.35934e+08\n\n 2 Nonlinear |R| = 1.359343e+08\n\n    Computing Jacobian\n      Executing Controls.                                                                [ 10.29 s] [52429 MB]\n    Still Computing Jacobian..                                                           [ 27.06 s] [52429 MB]\n\n      0 Linear |R| = 1.359343e+08\n      1 Linear |R| = 2.827777e+07\n      2 Linear |R| = 4.020453e+06\n      3 Linear |R| = 1.296405e+06\n      4 Linear |R| = 6.605339e+05\n      5 Linear |R| = 5.785215e+05\n      6 Linear |R| = 5.690869e+05\n      7 Linear |R| = 5.125083e+05\n      8 Linear |R| = 3.985427e+05\n      9 Linear |R| = 2.934734e+05\n     10 Linear |R| = 2.456820e+05\n     11 Linear |R| = 2.184374e+05\n     12 Linear |R| = 1.821157e+05\n     13 Linear |R| = 1.597602e+05\n     14 Linear |R| = 1.465883e+05\n     15 Linear |R| = 1.274646e+05\n     16 Linear |R| = 1.068457e+05\n     17 Linear |R| = 9.477471e+04\n     18 Linear |R| = 8.117203e+04\n     19 Linear |R| = 6.081105e+04\n     20 Linear |R| = 5.248531e+04\n     21 Linear |R| = 5.027332e+04\n     22 Linear |R| = 4.894493e+04\n     23 Linear |R| = 4.779100e+04\n     24 Linear |R| = 4.736635e+04\n     25 Linear |R| = 4.736106e+04\n     26 Linear |R| = 4.640053e+04\n     27 Linear |R| = 4.391674e+04\n     28 Linear |R| = 4.152090e+04\n     29 Linear |R| = 3.880270e+04\n     30 Linear |R| = 3.563013e+04\n     31 Linear |R| = 3.402201e+04\n     32 Linear |R| = 3.273588e+04\n     33 Linear |R| = 3.184190e+04\n     34 Linear |R| = 3.097622e+04\n     35 Linear |R| = 3.061087e+04\n     36 Linear |R| = 3.055569e+04\n     37 Linear |R| = 3.044372e+04\n     38 Linear |R| = 3.043495e+04\n     39 Linear |R| = 3.041891e+04\n     40 Linear |R| = 3.030292e+04\n     41 Linear |R| = 2.995032e+04\n     42 Linear |R| = 2.935002e+04\n     43 Linear |R| = 2.849810e+04\n     44 Linear |R| = 2.753399e+04\n     45 Linear |R| = 2.655116e+04\n     46 Linear |R| = 2.602818e+04\n     47 Linear |R| = 2.588978e+04\n     48 Linear |R| = 2.581278e+04\n     49 Linear |R| = 2.566896e+04\n     50 Linear |R| = 2.556381e+04\n     51 Linear |R| = 2.554928e+04\n     52 Linear |R| = 2.554926e+04\n     53 Linear |R| = 2.554362e+04\n     54 Linear |R| = 2.553974e+04\n     55 Linear |R| = 2.553580e+04\n     56 Linear |R| = 2.550884e+04\n     57 Linear |R| = 2.540196e+04\n     58 Linear |R| = 2.527670e+04\n     59 Linear |R| = 2.517381e+04\n     60 Linear |R| = 2.511611e+04\n     61 Linear |R| = 2.510296e+04\n     62 Linear |R| = 2.509814e+04\n     63 Linear |R| = 2.501215e+04\n     64 Linear |R| = 2.495319e+04\n     65 Linear |R| = 2.493811e+04\n     66 Linear |R| = 2.493588e+04\n     67 Linear |R| = 2.492640e+04\n     68 Linear |R| = 2.492364e+04\n     69 Linear |R| = 2.492111e+04\n     70 Linear |R| = 2.491984e+04\n     71 Linear |R| = 2.491982e+04\n     72 Linear |R| = 2.491821e+04\n     73 Linear |R| = 2.491074e+04\n     74 Linear |R| = 2.489401e+04\n     75 Linear |R| = 2.487410e+04\n     76 Linear |R| = 2.485212e+04\n     77 Linear |R| = 2.483084e+04\n     78 Linear |R| = 2.480848e+04\n     79 Linear |R| = 2.479260e+04\n     80 Linear |R| = 2.478150e+04\n     81 Linear |R| = 2.477475e+04\n     82 Linear |R| = 2.477202e+04\n     83 Linear |R| = 2.477006e+04\n     84 Linear |R| = 2.476879e+04\n     85 Linear |R| = 2.476818e+04\n     86 Linear |R| = 2.476797e+04\n     87 Linear |R| = 2.476795e+04\n     88 Linear |R| = 2.476791e+04\n     89 Linear |R| = 2.476761e+04\n     90 Linear |R| = 2.476662e+04\n     91 Linear |R| = 2.476600e+04\n     92 Linear |R| = 2.476569e+04\n     93 Linear |R| = 2.476560e+04\n     94 Linear |R| = 2.476560e+04\n     95 Linear |R| = 2.476557e+04\n     96 Linear |R| = 2.476557e+04\n     97 Linear |R| = 2.476539e+04\n     98 Linear |R| = 2.476505e+04\n     99 Linear |R| = 2.476452e+04\n    100 Linear |R| = 2.476369e+04\n  Linear solve did not converge due to DIVERGED_ITS iterations 100\n\n\n    Computing Residual..                                                                 [ 18.70 s] [52433 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 1.44824e+07\n\n 3 Nonlinear |R| = 1.448238e+07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 3\n\n Solve Converged!\n\n  Finished Solving                                                                       [261.26 s] [52433 MB]\n\ncurrent moose\n\nTime Step 1, time = 1.833, dt = 0.083\n\n  Executing Controls                                                                     [  9.73 s] [50506 MB]\n\n\n\n    Computing Pre-SMO Residual\n      Computing Residual..                                                               [ 18.68 s] [50693 MB]\n\nPre-SMO residual: 7.38819e+13\n\n    Finished Computing Pre-SMO Residual                                                  [ 18.68 s] [50693 MB]\n    Computing Residual..                                                                 [ 18.76 s] [50693 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.38817e+13\n\n 0 Nonlinear |R| = 7.388166e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.60 s] [50693 MB]\n    Still Computing Jacobian...                                                          [ 32.91 s] [50693 MB]\n\n      0 Linear |R| = 7.388166e+13\n      1 Linear |R| = 3.733504e+11\n      2 Linear |R| = 1.260424e+11\n      3 Linear |R| = 4.926991e+10\n      4 Linear |R| = 2.267720e+10\n      5 Linear |R| = 2.057737e+10\n      6 Linear |R| = 6.759040e+09\n      7 Linear |R| = 2.566590e+09\n      8 Linear |R| = 1.444516e+09\n      9 Linear |R| = 1.132049e+09\n     10 Linear |R| = 9.045942e+08\n     11 Linear |R| = 5.844577e+08\n     12 Linear |R| = 3.965591e+08\n     13 Linear |R| = 3.287753e+08\n     14 Linear |R| = 2.822538e+08\n     15 Linear |R| = 2.378113e+08\n     16 Linear |R| = 2.113608e+08\n     17 Linear |R| = 1.973534e+08\n     18 Linear |R| = 1.887242e+08\n     19 Linear |R| = 1.823290e+08\n     20 Linear |R| = 1.769259e+08\n     21 Linear |R| = 1.713424e+08\n     22 Linear |R| = 1.675969e+08\n     23 Linear |R| = 1.651754e+08\n     24 Linear |R| = 1.629609e+08\n     25 Linear |R| = 1.612301e+08\n     26 Linear |R| = 1.596335e+08\n     27 Linear |R| = 1.583508e+08\n     28 Linear |R| = 1.572229e+08\n     29 Linear |R| = 1.555715e+08\n     30 Linear |R| = 1.538618e+08\n     31 Linear |R| = 1.528400e+08\n     32 Linear |R| = 1.518562e+08\n     33 Linear |R| = 1.511202e+08\n     34 Linear |R| = 1.500224e+08\n     35 Linear |R| = 1.487995e+08\n     36 Linear |R| = 1.487269e+08\n     37 Linear |R| = 1.480599e+08\n     38 Linear |R| = 1.472862e+08\n     39 Linear |R| = 1.462387e+08\n     40 Linear |R| = 1.444704e+08\n     41 Linear |R| = 1.422823e+08\n     42 Linear |R| = 1.407045e+08\n     43 Linear |R| = 1.385644e+08\n     44 Linear |R| = 1.348543e+08\n     45 Linear |R| = 1.311320e+08\n     46 Linear |R| = 1.277760e+08\n     47 Linear |R| = 1.222609e+08\n     48 Linear |R| = 1.136556e+08\n     49 Linear |R| = 1.060376e+08\n     50 Linear |R| = 9.879759e+07\n     51 Linear |R| = 9.275633e+07\n     52 Linear |R| = 8.905395e+07\n     53 Linear |R| = 8.635530e+07\n     54 Linear |R| = 8.394804e+07\n     55 Linear |R| = 8.191572e+07\n     56 Linear |R| = 7.972789e+07\n     57 Linear |R| = 7.660939e+07\n     58 Linear |R| = 7.330479e+07\n     59 Linear |R| = 6.986137e+07\n     60 Linear |R| = 6.453021e+07\n     61 Linear |R| = 6.167031e+07\n     62 Linear |R| = 5.946889e+07\n     63 Linear |R| = 5.747792e+07\n     64 Linear |R| = 5.617373e+07\n     65 Linear |R| = 5.533845e+07\n     66 Linear |R| = 5.522277e+07\n     67 Linear |R| = 5.446259e+07\n     68 Linear |R| = 5.359906e+07\n     69 Linear |R| = 5.249143e+07\n     70 Linear |R| = 5.143509e+07\n     71 Linear |R| = 5.025167e+07\n     72 Linear |R| = 4.886324e+07\n     73 Linear |R| = 4.731705e+07\n     74 Linear |R| = 4.606945e+07\n     75 Linear |R| = 4.516937e+07\n     76 Linear |R| = 4.457003e+07\n     77 Linear |R| = 4.397629e+07\n     78 Linear |R| = 4.324198e+07\n     79 Linear |R| = 4.268887e+07\n     80 Linear |R| = 4.217426e+07\n     81 Linear |R| = 4.165707e+07\n     82 Linear |R| = 4.122138e+07\n     83 Linear |R| = 4.074918e+07\n     84 Linear |R| = 4.034092e+07\n     85 Linear |R| = 3.999418e+07\n     86 Linear |R| = 3.953260e+07\n     87 Linear |R| = 3.912674e+07\n     88 Linear |R| = 3.886832e+07\n     89 Linear |R| = 3.859983e+07\n     90 Linear |R| = 3.835384e+07\n     91 Linear |R| = 3.819630e+07\n     92 Linear |R| = 3.803917e+07\n     93 Linear |R| = 3.785614e+07\n     94 Linear |R| = 3.769001e+07\n     95 Linear |R| = 3.766517e+07\n     96 Linear |R| = 3.755430e+07\n     97 Linear |R| = 3.743751e+07\n     98 Linear |R| = 3.732686e+07\n     99 Linear |R| = 3.722430e+07\n    100 Linear |R| = 3.714092e+07\n  Linear solve did not converge due to DIVERGED_ITS iterations 100\n\n\n    Computing Residual..                                                                 [ 18.20 s] [50756 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.24332e+13\n\n 1 Nonlinear |R| = 7.243324e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.68 s] [50756 MB]\n    Still Computing Jacobian..                                                           [ 25.82 s] [50756 MB]\n\n      0 Linear |R| = 7.243324e+13\n      1 Linear |R| = 3.654422e+11\n      2 Linear |R| = 1.236631e+11\n      3 Linear |R| = 4.898308e+10\n      4 Linear |R| = 2.257844e+10\n      5 Linear |R| = 2.049187e+10\n      6 Linear |R| = 6.793798e+09\n      7 Linear |R| = 2.558853e+09\n      8 Linear |R| = 1.413870e+09\n      9 Linear |R| = 1.096966e+09\n     10 Linear |R| = 8.745039e+08\n     11 Linear |R| = 5.561600e+08\n     12 Linear |R| = 3.591150e+08\n     13 Linear |R| = 2.859984e+08\n     14 Linear |R| = 2.308822e+08\n     15 Linear |R| = 1.719023e+08\n     16 Linear |R| = 1.310853e+08\n     17 Linear |R| = 1.052678e+08\n     18 Linear |R| = 8.684565e+07\n     19 Linear |R| = 7.352416e+07\n     20 Linear |R| = 6.265816e+07\n     21 Linear |R| = 4.994757e+07\n     22 Linear |R| = 4.077404e+07\n     23 Linear |R| = 3.483568e+07\n     24 Linear |R| = 2.939342e+07\n     25 Linear |R| = 2.464322e+07\n     26 Linear |R| = 1.976382e+07\n     27 Linear |R| = 1.610597e+07\n     28 Linear |R| = 1.430543e+07\n     29 Linear |R| = 1.283520e+07\n     30 Linear |R| = 1.182885e+07\n     31 Linear |R| = 1.139516e+07\n     32 Linear |R| = 1.098219e+07\n     33 Linear |R| = 1.077064e+07\n     34 Linear |R| = 1.059577e+07\n     35 Linear |R| = 1.045275e+07\n     36 Linear |R| = 1.044920e+07\n     37 Linear |R| = 1.035980e+07\n     38 Linear |R| = 1.028193e+07\n     39 Linear |R| = 1.023212e+07\n     40 Linear |R| = 1.018970e+07\n     41 Linear |R| = 1.014876e+07\n     42 Linear |R| = 1.011777e+07\n     43 Linear |R| = 1.009521e+07\n     44 Linear |R| = 1.006856e+07\n     45 Linear |R| = 1.003647e+07\n     46 Linear |R| = 1.001605e+07\n     47 Linear |R| = 9.995897e+06\n     48 Linear |R| = 9.968740e+06\n     49 Linear |R| = 9.945233e+06\n     50 Linear |R| = 9.917240e+06\n     51 Linear |R| = 9.878895e+06\n     52 Linear |R| = 9.833167e+06\n     53 Linear |R| = 9.767643e+06\n     54 Linear |R| = 9.663246e+06\n     55 Linear |R| = 9.543895e+06\n     56 Linear |R| = 9.405934e+06\n     57 Linear |R| = 9.129376e+06\n     58 Linear |R| = 8.747407e+06\n     59 Linear |R| = 8.387055e+06\n     60 Linear |R| = 8.091923e+06\n     61 Linear |R| = 7.952405e+06\n     62 Linear |R| = 7.804966e+06\n     63 Linear |R| = 7.637440e+06\n     64 Linear |R| = 7.501918e+06\n     65 Linear |R| = 7.475204e+06\n     66 Linear |R| = 7.408377e+06\n     67 Linear |R| = 7.305041e+06\n     68 Linear |R| = 7.190163e+06\n\n\n    Computing Residual..                                                                 [ 18.77 s] [50759 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.98022e+13\n\n 2 Nonlinear |R| = 6.980222e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.65 s] [50759 MB]\n    Still Computing Jacobian..                                                           [ 26.46 s] [50759 MB]\n\n      0 Linear |R| = 6.980222e+13\n      1 Linear |R| = 3.523360e+11\n      2 Linear |R| = 1.187674e+11\n      3 Linear |R| = 4.641056e+10\n      4 Linear |R| = 2.063926e+10\n      5 Linear |R| = 1.931454e+10\n      6 Linear |R| = 6.399603e+09\n      7 Linear |R| = 2.429474e+09\n      8 Linear |R| = 1.354337e+09\n      9 Linear |R| = 1.054395e+09\n     10 Linear |R| = 8.387192e+08\n     11 Linear |R| = 5.331993e+08\n     12 Linear |R| = 3.459104e+08\n     13 Linear |R| = 2.724231e+08\n     14 Linear |R| = 2.161811e+08\n     15 Linear |R| = 1.582752e+08\n     16 Linear |R| = 1.207155e+08\n     17 Linear |R| = 9.847684e+07\n     18 Linear |R| = 8.300487e+07\n     19 Linear |R| = 6.952539e+07\n     20 Linear |R| = 5.737831e+07\n     21 Linear |R| = 4.456699e+07\n     22 Linear |R| = 3.531113e+07\n     23 Linear |R| = 2.937306e+07\n     24 Linear |R| = 2.428257e+07\n     25 Linear |R| = 2.005064e+07\n     26 Linear |R| = 1.566085e+07\n     27 Linear |R| = 1.257040e+07\n     28 Linear |R| = 1.087213e+07\n     29 Linear |R| = 9.516468e+06\n     30 Linear |R| = 8.617314e+06\n     31 Linear |R| = 8.176587e+06\n     32 Linear |R| = 7.735984e+06\n     33 Linear |R| = 7.516513e+06\n     34 Linear |R| = 7.344059e+06\n     35 Linear |R| = 7.315355e+06\n     36 Linear |R| = 7.220488e+06\n     37 Linear |R| = 7.122507e+06\n     38 Linear |R| = 7.039379e+06\n     39 Linear |R| = 6.982167e+06\n     40 Linear |R| = 6.928032e+06\n\n\n    Computing Residual..                                                                 [ 18.46 s] [50760 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.716e+13\n\n 3 Nonlinear |R| = 6.716001e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.72 s] [50760 MB]\n    Still Computing Jacobian..                                                           [ 26.36 s] [50760 MB]\n\n      0 Linear |R| = 6.716001e+13\n      1 Linear |R| = 3.390190e+11\n      2 Linear |R| = 1.140532e+11\n      3 Linear |R| = 4.465943e+10\n      4 Linear |R| = 1.980442e+10\n      5 Linear |R| = 1.858126e+10\n      6 Linear |R| = 6.166643e+09\n      7 Linear |R| = 2.344652e+09\n      8 Linear |R| = 1.307791e+09\n      9 Linear |R| = 1.017537e+09\n     10 Linear |R| = 8.055736e+08\n     11 Linear |R| = 5.118278e+08\n     12 Linear |R| = 3.359680e+08\n     13 Linear |R| = 2.659011e+08\n     14 Linear |R| = 2.072922e+08\n     15 Linear |R| = 1.470151e+08\n     16 Linear |R| = 1.106445e+08\n     17 Linear |R| = 9.089508e+07\n     18 Linear |R| = 7.785710e+07\n     19 Linear |R| = 6.623703e+07\n     20 Linear |R| = 5.475839e+07\n     21 Linear |R| = 4.218830e+07\n     22 Linear |R| = 3.348988e+07\n     23 Linear |R| = 2.813884e+07\n     24 Linear |R| = 2.337734e+07\n     25 Linear |R| = 1.914206e+07\n     26 Linear |R| = 1.476005e+07\n     27 Linear |R| = 1.211351e+07\n     28 Linear |R| = 1.102093e+07\n     29 Linear |R| = 1.032689e+07\n     30 Linear |R| = 9.896076e+06\n     31 Linear |R| = 9.675687e+06\n     32 Linear |R| = 9.395628e+06\n     33 Linear |R| = 9.204130e+06\n     34 Linear |R| = 9.024043e+06\n     35 Linear |R| = 8.972721e+06\n     36 Linear |R| = 8.894957e+06\n     37 Linear |R| = 8.800796e+06\n     38 Linear |R| = 8.732640e+06\n     39 Linear |R| = 8.694064e+06\n     40 Linear |R| = 8.660222e+06\n     41 Linear |R| = 8.633437e+06\n     42 Linear |R| = 8.622732e+06\n     43 Linear |R| = 8.616945e+06\n     44 Linear |R| = 8.612579e+06\n     45 Linear |R| = 8.609495e+06\n     46 Linear |R| = 8.608607e+06\n     47 Linear |R| = 8.608599e+06\n     48 Linear |R| = 8.608420e+06\n     49 Linear |R| = 8.607592e+06\n     50 Linear |R| = 8.604176e+06\n     51 Linear |R| = 8.592342e+06\n     52 Linear |R| = 8.558983e+06\n     53 Linear |R| = 8.488054e+06\n     54 Linear |R| = 8.368367e+06\n     55 Linear |R| = 8.226839e+06\n     56 Linear |R| = 8.044048e+06\n     57 Linear |R| = 7.561557e+06\n     58 Linear |R| = 6.753114e+06\n     59 Linear |R| = 5.816972e+06\n\n\n    Computing Residual.                                                                  [ 18.21 s] [50762 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.45144e+13\n\n 4 Nonlinear |R| = 6.451436e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.75 s] [50762 MB]\n    Still Computing Jacobian..                                                           [ 26.18 s] [50762 MB]\n\n      0 Linear |R| = 6.451436e+13\n      1 Linear |R| = 3.256762e+11\n      2 Linear |R| = 1.093830e+11\n      3 Linear |R| = 4.278308e+10\n      4 Linear |R| = 1.906654e+10\n      5 Linear |R| = 1.798952e+10\n      6 Linear |R| = 5.994491e+09\n      7 Linear |R| = 2.275242e+09\n      8 Linear |R| = 1.270941e+09\n      9 Linear |R| = 9.881745e+08\n     10 Linear |R| = 7.873919e+08\n     11 Linear |R| = 5.030104e+08\n     12 Linear |R| = 3.316261e+08\n     13 Linear |R| = 2.631256e+08\n     14 Linear |R| = 2.087163e+08\n     15 Linear |R| = 1.506486e+08\n     16 Linear |R| = 1.138164e+08\n     17 Linear |R| = 9.376965e+07\n     18 Linear |R| = 8.172976e+07\n     19 Linear |R| = 7.112791e+07\n     20 Linear |R| = 5.961880e+07\n     21 Linear |R| = 4.714547e+07\n     22 Linear |R| = 3.867749e+07\n     23 Linear |R| = 3.321782e+07\n     24 Linear |R| = 2.783046e+07\n     25 Linear |R| = 2.213689e+07\n     26 Linear |R| = 1.608261e+07\n     27 Linear |R| = 1.217810e+07\n     28 Linear |R| = 1.002160e+07\n     29 Linear |R| = 8.105572e+06\n     30 Linear |R| = 6.832895e+06\n     31 Linear |R| = 6.156868e+06\n\n\n    Computing Residual..                                                                 [ 18.48 s] [50764 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.18675e+13\n\n 5 Nonlinear |R| = 6.186752e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.62 s] [50764 MB]\n    Still Computing Jacobian..                                                           [ 26.54 s] [50764 MB]\n\n      0 Linear |R| = 6.186752e+13\n      1 Linear |R| = 3.121567e+11\n      2 Linear |R| = 1.053992e+11\n      3 Linear |R| = 4.146173e+10\n      4 Linear |R| = 1.830122e+10\n      5 Linear |R| = 1.731596e+10\n      6 Linear |R| = 5.781862e+09\n      7 Linear |R| = 2.193993e+09\n      8 Linear |R| = 1.220005e+09\n      9 Linear |R| = 9.472894e+08\n     10 Linear |R| = 7.487798e+08\n     11 Linear |R| = 4.688921e+08\n     12 Linear |R| = 3.040223e+08\n     13 Linear |R| = 2.423569e+08\n     14 Linear |R| = 1.932007e+08\n     15 Linear |R| = 1.402663e+08\n     16 Linear |R| = 1.056736e+08\n     17 Linear |R| = 8.533132e+07\n     18 Linear |R| = 7.253285e+07\n     19 Linear |R| = 6.303904e+07\n     20 Linear |R| = 5.368170e+07\n     21 Linear |R| = 4.175618e+07\n     22 Linear |R| = 3.306897e+07\n     23 Linear |R| = 2.783436e+07\n     24 Linear |R| = 2.281090e+07\n     25 Linear |R| = 1.779244e+07\n     26 Linear |R| = 1.269714e+07\n     27 Linear |R| = 9.307828e+06\n     28 Linear |R| = 7.685094e+06\n     29 Linear |R| = 6.157873e+06\n\n\n    Computing Residual.                                                                  [ 18.65 s] [50765 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.92214e+13\n\n 6 Nonlinear |R| = 5.922141e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.62 s] [50765 MB]\n    Still Computing Jacobian..                                                           [ 26.02 s] [50765 MB]\n\n      0 Linear |R| = 5.922141e+13\n      1 Linear |R| = 2.988746e+11\n      2 Linear |R| = 1.011788e+11\n      3 Linear |R| = 3.971373e+10\n      4 Linear |R| = 1.731784e+10\n      5 Linear |R| = 1.649016e+10\n      6 Linear |R| = 5.505707e+09\n      7 Linear |R| = 2.080908e+09\n      8 Linear |R| = 1.162502e+09\n      9 Linear |R| = 9.029988e+08\n     10 Linear |R| = 7.145095e+08\n     11 Linear |R| = 4.498287e+08\n     12 Linear |R| = 2.944696e+08\n     13 Linear |R| = 2.346165e+08\n     14 Linear |R| = 1.883611e+08\n     15 Linear |R| = 1.389579e+08\n     16 Linear |R| = 1.052216e+08\n     17 Linear |R| = 8.342113e+07\n     18 Linear |R| = 6.927081e+07\n     19 Linear |R| = 5.945320e+07\n     20 Linear |R| = 5.097309e+07\n     21 Linear |R| = 4.056180e+07\n     22 Linear |R| = 3.266478e+07\n     23 Linear |R| = 2.752025e+07\n     24 Linear |R| = 2.250288e+07\n     25 Linear |R| = 1.796434e+07\n     26 Linear |R| = 1.269930e+07\n     27 Linear |R| = 8.887491e+06\n     28 Linear |R| = 7.050097e+06\n     29 Linear |R| = 5.634193e+06\n\n\n    Computing Residual..                                                                 [ 18.83 s] [50765 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.65763e+13\n\n 7 Nonlinear |R| = 5.657626e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.73 s] [50765 MB]\n    Still Computing Jacobian..                                                           [ 26.50 s] [50765 MB]\n\n      0 Linear |R| = 5.657626e+13\n      1 Linear |R| = 2.858632e+11\n      2 Linear |R| = 9.671258e+10\n      3 Linear |R| = 3.800687e+10\n      4 Linear |R| = 1.646923e+10\n      5 Linear |R| = 1.577033e+10\n      6 Linear |R| = 5.270549e+09\n      7 Linear |R| = 1.990804e+09\n      8 Linear |R| = 1.101216e+09\n      9 Linear |R| = 8.523076e+08\n     10 Linear |R| = 6.756843e+08\n     11 Linear |R| = 4.300816e+08\n     12 Linear |R| = 2.803099e+08\n     13 Linear |R| = 2.230871e+08\n     14 Linear |R| = 1.768939e+08\n     15 Linear |R| = 1.265775e+08\n     16 Linear |R| = 9.443118e+07\n     17 Linear |R| = 7.614234e+07\n     18 Linear |R| = 6.418230e+07\n     19 Linear |R| = 5.503160e+07\n     20 Linear |R| = 4.683723e+07\n     21 Linear |R| = 3.699839e+07\n     22 Linear |R| = 3.003246e+07\n     23 Linear |R| = 2.565558e+07\n     24 Linear |R| = 2.094222e+07\n     25 Linear |R| = 1.652051e+07\n     26 Linear |R| = 1.182082e+07\n     27 Linear |R| = 8.326162e+06\n     28 Linear |R| = 6.466828e+06\n     29 Linear |R| = 4.983476e+06\n\n\n    Computing Residual..                                                                 [ 19.18 s] [50766 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.39316e+13\n\n 8 Nonlinear |R| = 5.393161e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.79 s] [50766 MB]\n    Still Computing Jacobian..                                                           [ 26.10 s] [50766 MB]\n\n      0 Linear |R| = 5.393161e+13\n      1 Linear |R| = 2.721092e+11\n      2 Linear |R| = 9.159563e+10\n      3 Linear |R| = 3.587168e+10\n      4 Linear |R| = 1.324932e+10\n      5 Linear |R| = 4.271664e+09\n      6 Linear |R| = 1.759343e+09\n      7 Linear |R| = 1.282957e+09\n      8 Linear |R| = 1.274304e+09\n      9 Linear |R| = 1.006418e+09\n     10 Linear |R| = 8.243501e+08\n     11 Linear |R| = 6.019760e+08\n     12 Linear |R| = 3.690396e+08\n     13 Linear |R| = 2.606965e+08\n     14 Linear |R| = 2.106334e+08\n     15 Linear |R| = 1.628711e+08\n     16 Linear |R| = 1.203183e+08\n     17 Linear |R| = 9.253857e+07\n     18 Linear |R| = 7.536836e+07\n     19 Linear |R| = 6.163290e+07\n     20 Linear |R| = 5.261479e+07\n     21 Linear |R| = 4.251854e+07\n     22 Linear |R| = 3.182510e+07\n     23 Linear |R| = 2.524098e+07\n     24 Linear |R| = 2.062385e+07\n     25 Linear |R| = 1.673889e+07\n     26 Linear |R| = 1.332470e+07\n     27 Linear |R| = 9.811176e+06\n     28 Linear |R| = 7.799290e+06\n     29 Linear |R| = 6.242724e+06\n     30 Linear |R| = 4.961267e+06\n\n\n    Computing Residual..                                                                 [ 18.51 s] [50767 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.1285e+13\n\n 9 Nonlinear |R| = 5.128504e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.60 s] [50767 MB]\n    Still Computing Jacobian..                                                           [ 26.28 s] [50767 MB]\n\n      0 Linear |R| = 5.128504e+13\n      1 Linear |R| = 2.592503e+11\n      2 Linear |R| = 8.723042e+10\n      3 Linear |R| = 3.416652e+10\n      4 Linear |R| = 1.259428e+10\n      5 Linear |R| = 4.079403e+09\n      6 Linear |R| = 1.674010e+09\n      7 Linear |R| = 1.196978e+09\n      8 Linear |R| = 1.194240e+09\n      9 Linear |R| = 9.585337e+08\n     10 Linear |R| = 7.888072e+08\n     11 Linear |R| = 5.819862e+08\n     12 Linear |R| = 3.658361e+08\n     13 Linear |R| = 2.637431e+08\n     14 Linear |R| = 2.131924e+08\n     15 Linear |R| = 1.628966e+08\n     16 Linear |R| = 1.183153e+08\n     17 Linear |R| = 9.154716e+07\n     18 Linear |R| = 7.724322e+07\n     19 Linear |R| = 6.587665e+07\n     20 Linear |R| = 5.693803e+07\n     21 Linear |R| = 4.701185e+07\n     22 Linear |R| = 3.752199e+07\n     23 Linear |R| = 3.139946e+07\n     24 Linear |R| = 2.647978e+07\n     25 Linear |R| = 2.140018e+07\n     26 Linear |R| = 1.581000e+07\n     27 Linear |R| = 1.113488e+07\n     28 Linear |R| = 8.973949e+06\n     29 Linear |R| = 7.136740e+06\n     30 Linear |R| = 5.654792e+06\n     31 Linear |R| = 4.894344e+06\n\n\n    Computing Residual.                                                                  [ 18.32 s] [50767 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 4.8637e+13\n\n10 Nonlinear |R| = 4.863702e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.69 s] [50767 MB]\n    Still Computing Jacobian..                                                           [ 26.29 s] [50767 MB]\n\n      0 Linear |R| = 4.863702e+13\n      1 Linear |R| = 2.455052e+11\n      2 Linear |R| = 8.290248e+10\n      3 Linear |R| = 3.245398e+10\n      4 Linear |R| = 1.194027e+10\n      5 Linear |R| = 3.863013e+09\n      6 Linear |R| = 1.582437e+09\n      7 Linear |R| = 1.125791e+09\n      8 Linear |R| = 1.124910e+09\n      9 Linear |R| = 9.138065e+08\n     10 Linear |R| = 7.526897e+08\n     11 Linear |R| = 5.506308e+08\n     12 Linear |R| = 3.354266e+08\n     13 Linear |R| = 2.354881e+08\n     14 Linear |R| = 1.896384e+08\n     15 Linear |R| = 1.472313e+08\n     16 Linear |R| = 1.101864e+08\n     17 Linear |R| = 8.457774e+07\n     18 Linear |R| = 6.844279e+07\n     19 Linear |R| = 5.599294e+07\n     20 Linear |R| = 4.756799e+07\n     21 Linear |R| = 3.826863e+07\n     22 Linear |R| = 2.909173e+07\n     23 Linear |R| = 2.307805e+07\n     24 Linear |R| = 1.845484e+07\n     25 Linear |R| = 1.487552e+07\n     26 Linear |R| = 1.189793e+07\n     27 Linear |R| = 9.044232e+06\n     28 Linear |R| = 7.253943e+06\n     29 Linear |R| = 5.666078e+06\n     30 Linear |R| = 4.588173e+06\n\n\n    Computing Residual..                                                                 [ 18.66 s] [50767 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 4.59913e+13\n\nThank you guys!\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/27743",
          "updatedAt": "2024-06-03T16:50:59Z",
          "publishedAt": "2024-05-30T12:38:24Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can check whether the new initial residual behavior is causing the problem by reverting to the old one\nIt s a parameter in the Problem. Something like use_smo_residual",
                  "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9606990",
                  "updatedAt": "2024-05-30T14:45:54Z",
                  "publishedAt": "2024-05-30T14:45:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I tried to add use_pre_SMO_residual to [Executioner] > doesn't help\nI also add TIMESTEP_BEGIN to all the execute_on flags > doesn't help\nI now will try to output the results at every NONLINEAR step to see what's wrong with it, maybe the IC isnt projected properly (just a guess)",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9611590",
                          "updatedAt": "2024-05-31T01:12:49Z",
                          "publishedAt": "2024-05-31T01:12:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "update: IC seems to be projected correctly. I dont know where to look anymore",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9611856",
                          "updatedAt": "2024-05-31T02:02:50Z",
                          "publishedAt": "2024-05-31T02:02:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@lindsayad @cpgr any relevant change you can think of with regards to porous flow or transients?\nOtherwise you will have to git-bisect this. It s a good skill to have when working with codes being updated all the time",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9611901",
                          "updatedAt": "2024-05-31T02:09:43Z",
                          "publishedAt": "2024-05-31T02:09:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I don't think anything has changed with that kernel? It looks like the initial residual is the same in both cases, just that the solver isn't converging with the newer moose?",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9612161",
                          "updatedAt": "2024-05-31T03:01:13Z",
                          "publishedAt": "2024-05-31T03:01:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Maybe petsc defaults changed then.\n@lindsayad any known changes to hypre and or the bt line search?\nOn travel rn, I can't really deep dive into this. Sorry for tagging everyone",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9612652",
                          "updatedAt": "2024-05-31T03:51:01Z",
                          "publishedAt": "2024-05-31T03:51:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The initial residual evaluations are all different in the last few printed digits, between old moose, new moose pre-smo, and new moose post-smo, which concerns me a bit.\nboomeramg does appear to be a mediocre preconditioner here. To test whether the \"physics\"/residuals have truly changed I would try to run with a stronger preconditioner, see if you can get the solve to converge, and then see whether the results are the same as before within tolerance. If you cannot get a converged result even with a stronger preconditioner, I would test whether your preconditioning matrix is a good representation of the operator using -snes_test_jacobian on a smaller problem.\nA bisect can be a good debugging choice. I might give it a shot here",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9621637",
                          "updatedAt": "2024-05-31T17:32:26Z",
                          "publishedAt": "2024-05-31T17:32:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It's doubtful that there have been significant changes to the bt or boomeramg behavior otherwise I think we would have picked it up in our test harness, which runs tens of thousands of tests of bt and hundreds (to thousands?) of tests of boomeramg",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9621658",
                          "updatedAt": "2024-05-31T17:35:50Z",
                          "publishedAt": "2024-05-31T17:35:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Thanks @lindsayad\na quick note that: I have tried 3 of my most used line_searchs (bt, default, none), and none of them works.\nI will try different preconditioners first thing on Monday, do you have any suggestion on the 'stronger preconditioner' for this kind of problem?",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9627857",
                          "updatedAt": "2024-06-01T10:59:00Z",
                          "publishedAt": "2024-06-01T10:58:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Strongest of them all is LU, the direct solve.\nThere are others, best place to find a list is the petsc documentation",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9628040",
                          "updatedAt": "2024-06-01T11:26:52Z",
                          "publishedAt": "2024-06-01T11:26:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "LU with new MOOSE is the same, doesn't converge as fast as the old one, I also tested LU with old moose too, it works fine (though Linear is 3x slower than boomeramg).\ndoes this mean we can no longer update MOOSE with our framework? :(\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       superlu_dist'\n\nNEW MOOSE\nTime Step 1, time = 1.833, dt = 0.083\n\n  Executing Controls                                                                     [  9.77 s] [50703 MB]\nStill Executing\n\n\n    Computing Pre-SMO Residual\n      Computing Residual..                                                               [ 18.65 s] [50887 MB]\n\nPre-SMO residual: 7.37815e+13\n\n    Finished Computing Pre-SMO Residual                                                  [ 18.65 s] [50887 MB]\n    Computing Residual..                                                                 [ 18.89 s] [50887 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.37812e+13\n\n 0 Nonlinear |R| = 7.378121e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.67 s] [50887 MB]\n    Still Computing Jacobian...                                                          [ 33.11 s] [50888 MB]\n\n      0 Linear |R| = 7.378121e+13\n      1 Linear |R| = 7.224564e+08\n      2 Linear |R| = 4.517806e+08\n      3 Linear |R| = 2.755802e+08\n      4 Linear |R| = 1.715852e+08\n      5 Linear |R| = 1.090529e+08\n      6 Linear |R| = 7.703619e+07\n      7 Linear |R| = 5.484187e+07\n      8 Linear |R| = 3.883476e+07\n      9 Linear |R| = 2.761240e+07\n     10 Linear |R| = 1.913435e+07\n     11 Linear |R| = 1.414515e+07\n     12 Linear |R| = 1.029032e+07\n     13 Linear |R| = 7.354585e+06\n\n\n    Computing Residual..                                                                 [ 18.89 s] [57121 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.23365e+13\n\n 1 Nonlinear |R| = 7.233654e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.70 s] [57121 MB]\n    Still Computing Jacobian..                                                           [ 26.55 s] [57121 MB]\n\n      0 Linear |R| = 7.233654e+13\n      1 Linear |R| = 8.493424e+07\n      2 Linear |R| = 3.804190e+07\n      3 Linear |R| = 2.238004e+07\n      4 Linear |R| = 1.394998e+07\n      5 Linear |R| = 8.803479e+06\n      6 Linear |R| = 5.838163e+06\n\n\n    Computing Residual.                                                                  [ 18.29 s] [58961 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.97083e+13\n\n 2 Nonlinear |R| = 6.970831e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.62 s] [58961 MB]\n    Still Computing Jacobian..                                                           [ 26.13 s] [58961 MB]\n\n      0 Linear |R| = 6.970831e+13\n      1 Linear |R| = 6.668169e+07\n      2 Linear |R| = 2.899589e+07\n      3 Linear |R| = 1.658519e+07\n      4 Linear |R| = 1.037247e+07\n      5 Linear |R| = 6.731574e+06\n\n\n    Computing Residual..                                                                 [ 18.94 s] [59878 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.7069e+13\n\n 3 Nonlinear |R| = 6.706898e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.90 s] [59878 MB]\n    Still Computing Jacobian..                                                           [ 26.72 s] [59878 MB]\n\n      0 Linear |R| = 6.706898e+13\n      1 Linear |R| = 5.853017e+07\n      2 Linear |R| = 2.509843e+07\n      3 Linear |R| = 1.418646e+07\n      4 Linear |R| = 8.796225e+06\n      5 Linear |R| = 5.813480e+06\n\n\n    Computing Residual..                                                                 [ 18.25 s] [58177 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.44263e+13\n\n 4 Nonlinear |R| = 6.442625e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.73 s] [58177 MB]\n    Still Computing Jacobian..                                                           [ 26.32 s] [58177 MB]\n\n      0 Linear |R| = 6.442625e+13\n      1 Linear |R| = 5.370269e+07\n      2 Linear |R| = 2.269698e+07\n      3 Linear |R| = 1.262268e+07\n      4 Linear |R| = 7.771930e+06\n      5 Linear |R| = 5.258773e+06\n\n\n    Computing Residual..                                                                 [ 18.72 s] [58212 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 6.17824e+13\n\n 5 Nonlinear |R| = 6.178240e+13\n\n    Computing Jacobian\n      Executing Controls                                                                 [  9.75 s] [58212 MB]\n    Still Computing Jacobian..                                                           [ 26.41 s] [58212 MB]\n\n      0 Linear |R| = 6.178240e+13\n      1 Linear |R| = 5.060584e+07\n      2 Linear |R| = 2.105833e+07\n      3 Linear |R| = 1.154436e+07\n      4 Linear |R| = 7.103242e+06\n      5 Linear |R| = 4.848216e+06\n\n\n    Computing Residual..                                                                 [ 18.58 s] [58204 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.91384e+13\n\n 6 Nonlinear |R| = 5.913837e+13\n\n\nOLD MOOSE\nTime Step 1, time = 1.833, dt = 0.083\n\n  Executing Controls.                                                                    [ 10.32 s] [51943 MB]\nStill Executing\n\n\n    Computing Initial Residual\n      Computing Residual..                                                               [ 18.44 s] [52127 MB]\n    Finished Computing Initial Residual                                                  [ 18.44 s] [52127 MB]\n    Computing Residual..                                                                 [ 18.50 s] [52127 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 7.38571e+13\n\n 0 Nonlinear |R| = 7.385710e+13\n\n    Computing Jacobian\n      Executing Controls.                                                                [ 10.32 s] [52127 MB]\n    Still Computing Jacobian...                                                          [ 33.29 s] [52127 MB]\n\n      0 Linear |R| = 7.385710e+13\n      1 Linear |R| = 7.855156e+05\n\n\n    Computing Residual..                                                                 [ 18.66 s] [58217 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 5.60373e+12\n\n 1 Nonlinear |R| = 5.603726e+12\n\n    Computing Jacobian\n      Executing Controls                                                                 [ 10.31 s] [58217 MB]\n    Still Computing Jacobian..                                                           [ 27.18 s] [58217 MB]\n\n      0 Linear |R| = 5.603726e+12\n      1 Linear |R| = 6.451680e+05\n      2 Linear |R| = 4.458695e+05\n\n\n    Computing Residual..                                                                 [ 18.80 s] [59223 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 1.36234e+08\n\n 2 Nonlinear |R| = 1.362341e+08\n\n    Computing Jacobian\n      Executing Controls.                                                                [ 10.39 s] [59223 MB]\n    Still Computing Jacobian..                                                           [ 26.71 s] [59223 MB]\n\n      0 Linear |R| = 1.362341e+08\n      1 Linear |R| = 4.066199e+05\n      2 Linear |R| = 3.234215e+05\n      3 Linear |R| = 1.943913e+05\n      4 Linear |R| = 1.410199e+05\n      5 Linear |R| = 1.037333e+05\n      6 Linear |R| = 7.518390e+04\n      7 Linear |R| = 6.061207e+04\n      8 Linear |R| = 4.375346e+04\n      9 Linear |R| = 3.213887e+04\n     10 Linear |R| = 2.460722e+04\n     11 Linear |R| = 1.756851e+04\n     12 Linear |R| = 1.311850e+04\n     13 Linear |R| = 1.033245e+04\n     14 Linear |R| = 8.159011e+03\n     15 Linear |R| = 6.508643e+03\n     16 Linear |R| = 5.297628e+03\n     17 Linear |R| = 4.313794e+03\n     18 Linear |R| = 3.619521e+03\n     19 Linear |R| = 3.064195e+03\n     20 Linear |R| = 2.552919e+03\n     21 Linear |R| = 2.136533e+03\n     22 Linear |R| = 1.721225e+03\n     23 Linear |R| = 1.396275e+03\n     24 Linear |R| = 1.181121e+03\n     25 Linear |R| = 1.004560e+03\n     26 Linear |R| = 8.520538e+02\n     27 Linear |R| = 7.239743e+02\n     28 Linear |R| = 5.975601e+02\n     29 Linear |R| = 5.065385e+02\n     30 Linear |R| = 4.423927e+02\n     31 Linear |R| = 4.147861e+02\n     32 Linear |R| = 3.838739e+02\n     33 Linear |R| = 3.505910e+02\n     34 Linear |R| = 3.172726e+02\n     35 Linear |R| = 2.844019e+02\n     36 Linear |R| = 2.534234e+02\n     37 Linear |R| = 2.232146e+02\n     38 Linear |R| = 1.903955e+02\n     39 Linear |R| = 1.598086e+02\n     40 Linear |R| = 1.353412e+02\n     41 Linear |R| = 1.158487e+02\n     42 Linear |R| = 1.016411e+02\n     43 Linear |R| = 9.079836e+01\n     44 Linear |R| = 8.128283e+01\n     45 Linear |R| = 7.376355e+01\n     46 Linear |R| = 6.727641e+01\n     47 Linear |R| = 6.144152e+01\n     48 Linear |R| = 5.636334e+01\n     49 Linear |R| = 5.170980e+01\n     50 Linear |R| = 4.810660e+01\n     51 Linear |R| = 4.553270e+01\n     52 Linear |R| = 4.321538e+01\n     53 Linear |R| = 4.136687e+01\n     54 Linear |R| = 3.984164e+01\n     55 Linear |R| = 3.809011e+01\n     56 Linear |R| = 3.639156e+01\n     57 Linear |R| = 3.476702e+01\n     58 Linear |R| = 3.295809e+01\n     59 Linear |R| = 3.144161e+01\n     60 Linear |R| = 2.980657e+01\n     61 Linear |R| = 2.890483e+01\n     62 Linear |R| = 2.816320e+01\n     63 Linear |R| = 2.731606e+01\n     64 Linear |R| = 2.654921e+01\n     65 Linear |R| = 2.573235e+01\n     66 Linear |R| = 2.495380e+01\n     67 Linear |R| = 2.429884e+01\n     68 Linear |R| = 2.358182e+01\n     69 Linear |R| = 2.274787e+01\n     70 Linear |R| = 2.190322e+01\n     71 Linear |R| = 2.094684e+01\n     72 Linear |R| = 1.989099e+01\n     73 Linear |R| = 1.888768e+01\n     74 Linear |R| = 1.785988e+01\n     75 Linear |R| = 1.684688e+01\n     76 Linear |R| = 1.593716e+01\n     77 Linear |R| = 1.501599e+01\n     78 Linear |R| = 1.405044e+01\n     79 Linear |R| = 1.306158e+01\n\n\n    Computing Residual..                                                                 [ 18.88 s] [60118 MB]\n\n    |residual|_2 of individual variables:\n            porepressure_L1: 1.44824e+07\n\n 3 Nonlinear |R| = 1.448235e+07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 3\n\n Solve Converged!",
                          "url": "https://github.com/idaholab/moose/discussions/27743#discussioncomment-9641702",
                          "updatedAt": "2024-06-03T01:08:45Z",
                          "publishedAt": "2024-06-03T01:08:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to couple moose with an external Fortran program",
          "author": {
            "login": "lvkas521424"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello, everyone.  Currently I want to send a Fortran program to moose, how do I link his code to the .mk file of moose so that it compiles automatically? In C++ it looks like this\uff1a\n# source files\ntestcpp_srcfiles := $(shell find $(TESTCPP_DIR) -maxdepth 1 -name \"*.C\")\n\napp_HEADERS := $(shell find $(TESTCPP_DIR) -maxdepth 1 -name \"*.h\")\n\n# object files\nADDITIONAL_APP_OBJECTS     += $(patsubst %.C, %.$(obj-suffix), $(testcpp_srcfiles))\n\n# dependencies (C, C++ files only)\nADDITIONAL_APP_DEPS += $(patsubst %.C, %.$(obj-suffix).d, $(testcpp_srcfiles))\n\nAnd I have no problem running it that way. Is this the correct way to write Fortran?\nTESTFORTRAN_DIR  ?=$(MAGPIE_DIR)/contrib/testfortran\nADDITIONAL_CPPFLAGS += -DTESTFORTRAN_ENABLED\napp_INCLUDES   += -I $(TESTFORTRAN_DIR)/..\n\n# source files\ntestfortran_srcfiles := $(shell find $(TESTFORTRAN_DIR) -maxdepth 1 -name \"*.f90\")\n\n# app_HEADERS := $(shell find $(TESTFORTRAN_DIR) -maxdepth 1 -name \"*.mod\")\n\n# object files\nADDITIONAL_APP_OBJECTS     += $(patsubst %.f90, %.$(obj-suffix), $(testfortran_srcfiles))\n\n# dependencies (F90 files only)\nADDITIONAL_APP_DEPS += $(patsubst %.f90, %.$(obj-suffix).d, $(testfortran_srcfiles))\n\nBut after I run the make command it looks like this\n(moose) lvjiahui@lvkas:~/projects/magpie$ make -j2\nUsing moose framework at /home/lvjiahui/projects/magpie/moose\nChecking if header needs updating: /home/lvjiahui/projects/magpie/moose/framework/include/base/MooseRevision.h...\n(moose) lvjiahui@lvkas:~/projects/magpie$\n\nyours\nJiahuiLv",
          "url": "https://github.com/idaholab/moose/discussions/27770",
          "updatedAt": "2024-06-03T14:16:37Z",
          "publishedAt": "2024-06-03T14:09:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Applying traction/force boundary conditions in Peridynamics module",
          "author": {
            "login": "Narayanan1999"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI was able to apply displacement boundary conditions in Peridynamics module. But I am unable to apply traction boundary conditions. As suggested in one of the previous discussion, I have tried using 'Constantrate' for force boundary condition (for simple tension test). But, as the mesh size changes, the displacement order changes significantly in such a way that I couldn't corelate the mesh size with constant force applied. I also tried applying pressure condition in NOSPD, but it shows some segmentation fault error. In Peridynamics module also, there is no example for traction bcs.\nPlease help me in this. I need to know how  'Constantrate' kernel can be used for force loading. Secondly, how else a traction boundary condition can be applied (other than using Pressure BC). It would be very helpful if an input file for simple tension test can be shared.",
          "url": "https://github.com/idaholab/moose/discussions/27762",
          "updatedAt": "2024-06-03T14:00:32Z",
          "publishedAt": "2024-05-31T18:15:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@hchen139 @bwspenc",
                  "url": "https://github.com/idaholab/moose/discussions/27762#discussioncomment-9624479",
                  "updatedAt": "2024-05-31T23:08:24Z",
                  "publishedAt": "2024-05-31T23:08:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hchen139"
                  },
                  "bodyText": "I think you can applied traction boundary conditions in the PD module by either converting the traction to total force and distribute the force to nodes on the boundary and use the Constant Rate option, or construct fictitious finite elements for the boundary and use NeumannBC to apply as if you were doing FEA. For Constant Rate, you will need to update the value for different mesh density. For constructing fictitious finite element for PD, there are examples in the /tests/mesh directory.",
                  "url": "https://github.com/idaholab/moose/discussions/27762#discussioncomment-9649132",
                  "updatedAt": "2024-06-03T14:00:33Z",
                  "publishedAt": "2024-06-03T14:00:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Previously stored elements/nodes do not match the current element/nodes",
          "author": {
            "login": "jin0123456"
          },
          "bodyText": "Hello,\nI'm trying to recover a simulation when this error ocurred,\nRestartableEquationSystems::load(): Previously stored elements/nodes do not match the current element/nodes\nBut what I reloaded is the mesh from the last step,\n[Mesh]\n  [simple_mesh]\n    type = FileMeshGenerator\n    file = Rod-15309_thm_checkpoint_cp/0034-mesh.cpr\n  []\n[]\n\nSo what  does it represent?",
          "url": "https://github.com/idaholab/moose/discussions/27759",
          "updatedAt": "2024-06-03T08:12:26Z",
          "publishedAt": "2024-05-31T09:06:17Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nHow are you setting up the recovery?\nFrom the problem (as a restart) or from the command line?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9617400",
                  "updatedAt": "2024-05-31T11:29:34Z",
                  "publishedAt": "2024-05-31T11:29:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jin0123456"
                          },
                          "bodyText": "Sorry, I restarted the simulation by Problem.",
                          "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9617457",
                          "updatedAt": "2024-05-31T11:35:22Z",
                          "publishedAt": "2024-05-31T11:35:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What does your problem block look like ?\nCan you try a recover from the command line?",
                          "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9617514",
                          "updatedAt": "2024-05-31T11:40:25Z",
                          "publishedAt": "2024-05-31T11:40:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jin0123456"
                          },
                          "bodyText": "Problem block,\n[Problem]\n  restart_file_base = Rod-15309_thm_checkpoint_cp/LATEST\n  force_restart = true\n  coord_type = RZ\n[]\n\nMy first simulation ran really well, and I need to change some conditions based on results from the last step of the first simulation.\nSo I suppose I need restart?",
                          "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9617626",
                          "updatedAt": "2024-05-31T11:48:46Z",
                          "publishedAt": "2024-05-31T11:48:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "force_restart is only for restart from multiapps. I recommend you remove this unless this is in a multiapp",
                          "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9624555",
                          "updatedAt": "2024-05-31T23:19:15Z",
                          "publishedAt": "2024-05-31T23:19:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jin0123456"
                          },
                          "bodyText": "OK.",
                          "url": "https://github.com/idaholab/moose/discussions/27759#discussioncomment-9644804",
                          "updatedAt": "2024-06-03T08:12:27Z",
                          "publishedAt": "2024-06-03T08:12:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Q:] can the homogenization within new TM system be utilized to plasticity not only elasticity ?",
          "author": {
            "login": "Ttw0626"
          },
          "bodyText": "Dear TM-developers,\nIntroduction\nThe homogenization of new system is working well in all of the elasticity problem no matter small and finite strain,\nBut if I changed the material to plasticity, the average cell value (homogenzied) is not correct and only present\nthe elastic response.\nInteresting\nthe output of effective Plastic strain is correct.\nQ\ncould you as experts re-implement the plastic problem under the homogenization of new system ?\nBy the way\ndose this kind of method for presenting homogenization have bad-effect on the convergence of plastic problem especially in global (after assembly of finite element) ?\nhow to control this method related to the Macro-deformation gradient in finite strain ? especially in plasticity\nThanks so much\nbest regards,\ntianwen",
          "url": "https://github.com/idaholab/moose/discussions/25972",
          "updatedAt": "2024-06-03T07:48:02Z",
          "publishedAt": "2023-11-06T06:32:05Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Ttw0626"
                  },
                  "bodyText": "example.zip\nhere is test example, yeah, the homogeneous case is also sutiable to this homogenization system, I think.\nImportant Updating\nI read a kind of report from ANL \"Identify the influence of microstructure on mesoscale creep and fatigue damage\" in 2020\nalmost 4 years ago.\none of sentence from it is  The current MOOSE constraint system is unsuited for implementing Multiple points (dummy nodes) types of conditions in 3D and so we examined other approaches. by Andrea Rovinelli\nperhaps, I got misunderstanding for this homogenization system which should be fine at any material. I will check again.",
                  "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-7495357",
                  "updatedAt": "2023-11-07T12:34:59Z",
                  "publishedAt": "2023-11-07T06:55:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "RossMech"
                  },
                  "bodyText": "A question to your issue. Did it work in the end as planned? I would also like to make the creep/viscoplastic homogenization using the new kernel system.",
                  "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-8985329",
                  "updatedAt": "2024-04-02T14:58:48Z",
                  "publishedAt": "2024-04-02T14:58:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ttw0626"
                          },
                          "bodyText": "Dear Ross,\nhi\nanswer:\nthe implementation of my own material based on the new system was not going well, unfortunately.\nThe unconverged problem occured at the FEproblem issues, maybe due to the \"UserObjects\" of homogenization.\nBy the way, you could try your model (eg. the viscoplasticity). This homogenization theory was not based on boundary-integral implemented by multiple-point-constraints method common in commercial software, like abaqus Equation. though they are similar from theoretical part, the implementation has some problem for me.\nif you wanna focus on this point, see this report ANL \"Identify the influence of microstructure on mesoscale creep and fatigue damage\" in 2020.\nThanks\nkind regards,\ntianwen",
                          "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-9094566",
                          "updatedAt": "2024-04-12T10:51:38Z",
                          "publishedAt": "2024-04-12T10:51:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Dear Tianwen,\nthank you very much for your response. I will look into the report from ANL you mentioned.\nBest regards,\nRostyslav.",
                          "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-9139350",
                          "updatedAt": "2024-04-17T08:29:00Z",
                          "publishedAt": "2024-04-17T08:28:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "RossMech"
                  },
                  "bodyText": "I had the same problem with the standard creep model. If the homogeneous material properties are given into the homogenization framework, the system's output converges to the right value. However, if creep parameters vary across different blocks, the output diverges.",
                  "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-9189621",
                  "updatedAt": "2024-04-22T14:17:00Z",
                  "publishedAt": "2024-04-22T14:17:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ttw0626"
                  },
                  "bodyText": "Hi, moose-developers,\nsorry this borthering. my issues about this had already solved personally due to the problem of my code.\nthis discussion will be closed.\nThanks\ntianwen",
                  "url": "https://github.com/idaholab/moose/discussions/25972#discussioncomment-9644500",
                  "updatedAt": "2024-06-03T07:48:02Z",
                  "publishedAt": "2024-06-03T07:48:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Have difficulty to find tutorial to build model for fracture initial and propagation for Brazilian Test",
          "author": {
            "login": "miraboreasumr"
          },
          "bodyText": "Could anyone show me some tutorials about modeling the fracture initial and propagation? I have studied module combine and phase field, but haven't progressed. Thank you.\nEdit: I need to use Phase Field",
          "url": "https://github.com/idaholab/moose/discussions/27766",
          "updatedAt": "2024-06-02T04:37:27Z",
          "publishedAt": "2024-06-02T04:03:35Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere's also documentation on fracture in xfem and peri dynamics if I am not mistaken",
                  "url": "https://github.com/idaholab/moose/discussions/27766#discussioncomment-9634930",
                  "updatedAt": "2024-06-02T04:07:31Z",
                  "publishedAt": "2024-06-02T04:07:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "miraboreasumr"
                          },
                          "bodyText": "Hello\nThere's also documentation on fracture in xfem and peri dynamics if I am not mistaken\n\nThanks for the reply, I forgot to mention that I need to sue Phase Field",
                          "url": "https://github.com/idaholab/moose/discussions/27766#discussioncomment-9635082",
                          "updatedAt": "2024-06-02T04:37:04Z",
                          "publishedAt": "2024-06-02T04:37:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PressureBC on Annular Cylindrical Mesh Convergence Issue",
          "author": {
            "login": "agniksr"
          },
          "bodyText": "I am trying to simulate a pipe, in which a constant force is applied on its inner surface. I am trying to use the LinearPiecewise function alongside the PressureBC to do the same. However the solution does not seem to converge after the first time step. Also ,is there a way to define the boundary conditions in a better way (like in cylindrical coordinates) and is this the best way to create a annular cylinder.\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Mesh]\n        [annular]\n                type = AnnularMeshGenerator\n                nr = 10\n                rmin = 7.5\n                rmax = 10.0\n                nt = 40\n        []\n        [make3D]\n                type = MeshExtruderGenerator\n                extrusion_vector = '0 0 40'\n                num_layers = 10\n                bottom_sideset = 'bottom'\n                top_sideset = 'top'\n                input = annular\n        []\n[]\n\n[Variables]\n  [temp]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 300.0\n  []\n[]\n\n[Physics/SolidMechanics/QuasiStatic]\n  [all]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    use_automatic_differentiation = true\n  []\n[]\n\n[Functions]\n  [top_pull]\n    type = PiecewiseLinear\n    x = '0 1'\n    y = '1 1'\n  []\n[]\n\n[Kernels]\n  [heat]\n    type = Diffusion\n    variable = temp\n  []\n  [heat_ie]\n    type = TimeDerivative\n    variable = temp\n  []\n[]\n\n[BCs]\n  [x_top_pull]\n    type = ADPressure\n    variable = disp_x\n    boundary = rmin\n    factor = -10.0e6\n    function = top_pull\n  []\n  [y_top_pull]\n    type = ADPressure\n    variable = disp_y\n    boundary = rmin\n    factor = -10.0e6\n    function = top_pull\n  []\n  [z_top_pull]\n    type = ADPressure\n    variable = disp_z\n    boundary = rmin\n    factor = -10.0e6\n    function = top_pull\n  []\n  [temp_fix]\n    type = DirichletBC\n    variable = temp\n    boundary = 'rmin rmax'\n    value = 300.0\n  []\n  [top_fix]\n    type = DirichletBC\n    variable = disp_z\n    boundary = top\n    value = 0\n  []\n  [bottom_fix]\n    type = DirichletBC\n    variable = disp_z\n    boundary = bottom\n    value = 0\n  []\n[]\n\n[Materials]\n  [elasticity_tensor]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 9e10\n    poissons_ratio = 0.3\n  []\n  [radial_return_stress]\n    type = ADComputeMultipleInelasticStress\n    inelastic_models = 'power_law_creep'\n  []\n  [power_law_creep]\n    type = ADPowerLawCreepStressUpdate\n    coefficient = 1.0e-15\n    n_exponent = 4\n    activation_energy = 3.0e5\n    temperature = temp\n  []\n[]\n\n[Postprocessors]\n  [./Volume]\n    type = VolumePostprocessor\n    use_displaced_mesh = true\n    execute_on = 'initial timestep_end'\n  [../]\n  [./Volumetric_Strain]\n    type = ChangeOverTimePostprocessor\n    postprocessor = Volume\n    change_with_respect_to_initial = true\n    compute_relative_change = true\n    execute_on = 'initial timestep_end'\n  [../]\n  [./Strain_Rate]\n    type = ChangeOverTimePostprocessor\n    postprocessor = Volumetric_Strain\n    execute_on = 'initial timestep_end'\n  [../]\n[]\n\n[Executioner]\n  scheme = BDF2\n  type = Transient\n  solve_type = 'PJFNK'\n  l_tol = 1.0e-2\n  nl_rel_tol = 1.0e-4\n  start_time = 0.0\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  num_steps = 1e9\n  steady_state_detection = true\n  steady_state_tolerance = 1.0e-16\n  [./TimeStepper]\n   type = IterationAdaptiveDT\n   cutback_factor = 0.75\n   dt = 1.0\n   growth_factor = 1.2\n   optimal_iterations = 7\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n  [out]\n    type = Checkpoint\n    num_files = 1\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27684",
          "updatedAt": "2024-06-01T22:02:20Z",
          "publishedAt": "2024-05-21T06:07:22Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe do not support R-theta-z coodinates but you could define the problem in RZ coordinates.\nI think it would be a good check on your results as well.\nI dont see the interaction between temperature and displacements here? You should try to converge each problem independently first to identify issues\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9509487",
                  "updatedAt": "2024-05-21T14:35:03Z",
                  "publishedAt": "2024-05-21T14:35:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "Hey\nThanks for the reply.\nAs far as i know, the RZ coordinates rotates a 1d or 2d mesh, to create the cylindrical structure.  Would i be able to define the thickness radius and length of the pipe using this system?",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9516720",
                          "updatedAt": "2024-05-22T05:44:58Z",
                          "publishedAt": "2024-05-22T05:44:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "A 2D mesh in RZ can define both the radius (R direction, or x) and a length of a pipe (Z direction, or y)",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9522697",
                          "updatedAt": "2024-05-22T14:12:27Z",
                          "publishedAt": "2024-05-22T14:12:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "I do also want the pipe to have some thickness that is it should have some inner radius r, some outer radius R and some length l.",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9554493",
                          "updatedAt": "2024-05-25T08:33:21Z",
                          "publishedAt": "2024-05-25T08:33:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can model thickness too in RZ, it can be represented on the same axis as the radius",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9554833",
                          "updatedAt": "2024-05-25T10:11:32Z",
                          "publishedAt": "2024-05-25T10:11:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "how exactly would i do that? Could you show me an example or some test case?",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9557522",
                          "updatedAt": "2024-05-25T18:40:10Z",
                          "publishedAt": "2024-05-25T18:40:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "something like this?\nthickness_inner = 1\nthickness_mid = 2\nthickness_outer = 3\n[Mesh]\n  [cmg]\n    type = CartesianMeshGenerator\n    dim = 2\n    dx = '${thickness_inner} ${thickness_mid} ${thickness_outer}'\n    dy = '1.3'\n    ix = '2 2 10'\n    iy = '5'\n    subdomain_id = '0 1 2'\n  []\n  coord_type = 'RZ'\n[]\n\nmultiple regions (blocks) in x (=R) for each thickness",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9627388",
                          "updatedAt": "2024-06-01T09:37:32Z",
                          "publishedAt": "2024-06-01T09:37:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "Thanks for the reply!\nSo when i use  the coord_type = 'RZ' what exactly changes in this mesh. Like is x analogous to r and y to z? And how do the boundaries change? Does top become rmin and bottom become rmax, and something for left and right as well?",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9631044",
                          "updatedAt": "2024-06-01T18:11:06Z",
                          "publishedAt": "2024-06-01T18:11:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The dimensions and names are not affected.\nThe volume of the elements are changed",
                          "url": "https://github.com/idaholab/moose/discussions/27684#discussioncomment-9632698",
                          "updatedAt": "2024-06-01T22:04:08Z",
                          "publishedAt": "2024-06-01T22:02:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Potential error in PorousFlowUnsaturated Action: neglect residual_saturation for CapillaryPressureVG",
          "author": {
            "login": "amoure11"
          },
          "bodyText": "Hi,\nI might have found an error in the PorousFlowUnsaturated Action: I ran a simple example with constant fixed pressure P=-1E6, and with the following PorousFlowUnsaturated parameters:\n  relative_permeability_exponent = 3\n  relative_permeability_type = Corey\n  residual_saturation = 0.1\n  van_genuchten_alpha = 1E-6\n  van_genuchten_m = 0.6\n\nAccording to the van Genuchten expression S_eff = (1+(-alpha*P)^(1/(1-m))^(-m), I would get S_eff = 0.6597\nAccording to the effective saturation expression: S_eff = (S-S_res)/(1-S_res), I would get S = 0.6937\nI open the output (exodus) file, and saturation is ~0.66, which corresponds to S_eff, and not S.\nThus, I am assuming that the residual saturation (S_res) is not taken into account when computing the 'CapillaryPressureVG'\nCould you clarify this?\nFYI, I ran the same example without using the Action 'PorousFlowUnsaturated', and the saturation value in the output file is ~0.69.\n---------------------------- Example ----------------\n[Mesh]\n  [generate_mesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 20\n    xmin = -800\n    xmax = 800\n    ny = 20\n    ymin = -800\n    ymax = 800\n    nz = 15\n    zmin = -1200\n    zmax = 0\n  []\n  [aquifer]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 1\n    bottom_left = '-800 -800 -800'\n    top_right = '800 800 -400'\n    input = generate_mesh\n  []\n  [injection_area]\n    type = ParsedGenerateSideset\n    combinatorial_geometry = 'y<-799.9 & x>-200 & x<200'\n    included_subdomains = 1\n    new_sideset_name = 'injection_area'\n    input = 'aquifer'\n  []\n  [rename]\n    type = RenameBlockGenerator\n    old_block = '0 1'\n    new_block = 'caps aquifer'\n    input = 'injection_area'\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n[]\n\n[Variables]\n  [porepressure]\n    initial_condition = -1E6\n  []\n[]\n\n[PorousFlowUnsaturated]\n  porepressure = porepressure\n  coupling_type = Hydro\n  gravity = '0 0 0'\n  fp = the_simple_fluid\n  relative_permeability_exponent = 3\n  relative_permeability_type = Corey\n  residual_saturation = 0.1\n  van_genuchten_alpha = 1E-6\n  van_genuchten_m = 0.6\n  use_displaced_mesh = false\n[]\n\n[AuxVariables]\n  [saturation_aux]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n[]\n\n[AuxKernels]\n  [saturation_aux]\n    type = PorousFlowPropertyAux\n    variable = saturation_aux\n    property = saturation\n  []\n[]\n\n[FluidProperties]\n  [the_simple_fluid]\n    type = SimpleFluidProperties\n    bulk_modulus = 2E9\n    viscosity = 1.0E-3\n    density0 = 1000\n    thermal_expansion = 0.0002\n    cp = 4194\n    cv = 4186\n    porepressure_coefficient = 0\n  []\n[]\n\n[Materials]\n  [porosity]\n    type = PorousFlowPorosity\n    porosity_zero = 0.1\n  []\n  [permeability_aquifer]\n    type = PorousFlowPermeabilityConst\n    block = aquifer\n    permeability = '1E-14 0 0   0 1E-14 0   0 0 1E-14'\n  []\n  [permeability_caps]\n    type = PorousFlowPermeabilityConst\n    block = caps\n    permeability = '1E-15 0 0   0 1E-15 0   0 0 1E-16'\n  []\n[]\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  automatic_scaling = true\n  end_time = 1E6\n  dt = 1E6\n  nl_abs_tol = 1E-10\n  nl_rel_tol = 1E-5\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27693",
          "updatedAt": "2024-05-31T23:30:32Z",
          "publishedAt": "2024-05-22T18:37:42Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cpgr",
                  "url": "https://github.com/idaholab/moose/discussions/27693#discussioncomment-9526405",
                  "updatedAt": "2024-05-22T19:30:26Z",
                  "publishedAt": "2024-05-22T19:30:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@aikubo maybe is this something you have worked with?",
                          "url": "https://github.com/idaholab/moose/discussions/27693#discussioncomment-9526433",
                          "updatedAt": "2024-05-22T19:32:48Z",
                          "publishedAt": "2024-05-22T19:32:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Looks like a bug - the PorousFlowUnsaturated action doesn't pass the residual saturation to the VG capillary pressure userobject that it constructs. I think this is an easy fix if you want to have a go at it @amoure11. If not I'll eventually get around to it. Thanks for spotting this!",
                          "url": "https://github.com/idaholab/moose/discussions/27693#discussioncomment-9541830",
                          "updatedAt": "2024-05-24T02:22:43Z",
                          "publishedAt": "2024-05-24T02:22:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "amoure11"
                          },
                          "bodyText": "Thanks! No hurries from my side. Just wanted to make sure you are aware of this.",
                          "url": "https://github.com/idaholab/moose/discussions/27693#discussioncomment-9549391",
                          "updatedAt": "2024-05-24T16:04:22Z",
                          "publishedAt": "2024-05-24T16:04:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Created #27765 for the process. Thanks for reporting!",
                          "url": "https://github.com/idaholab/moose/discussions/27693#discussioncomment-9624629",
                          "updatedAt": "2024-05-31T23:30:32Z",
                          "publishedAt": "2024-05-31T23:30:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Simulating elasticity, expansion and stress on a solid whilst using Navier Stokes",
          "author": {
            "login": "oh304"
          },
          "bodyText": "Hey! I've been using Navier Stokes to simulate fluid flow in a reactor, which has so far been a success - thanks! I am now interested to see  the stresses and other thermal effects experienced by the solid.\nI have two INSFV variables for temperature - one representing the temperature of the fluid, and the other for the solid.\n[T]                                     \n    type = INSFVEnergyVariable\n    block = 'fuel_salt'\n    initial_condition = ${fuel_initial_temperature}\n[]\n[Ts]                                    \n    type = INSFVEnergyVariable\n    block = 'inconel_outer inconel_inner'\n    initial_condition = ${inconel_pipe_initial_temperature}\n[]\n\nI have implemented the SolidMechanics physics as such:\n[Physics]\n[SolidMechanics]\n[QuasiStatic]\n[./all]\nstrain = SMALL\nincremental = true\nadd_variables = true\neigenstrain_names = eigenstrain\ngenerate_output = 'strain_xx strain_yy'\n[../]\n[../]\n[../]\n[]\nAnd the thermal effects in the materials section:\n[elasticity_inconel]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 1e4\n    poissons_ratio = 0.3\n    block = 'inconel_outer inconel_inner'\n[]\n[expansion_inconel]\n    type = ADComputeThermalExpansionEigenstrain \n    temperature = 'Ts'\n    thermal_expansion_coeff = 1e-3\n    stress_free_temperature = 30\n    eigenstrain_name = thermal_expansion\n    block = 'inconel_outer inconel_inner'\n[]\n[stress_inconel]\n    type = ADComputeFiniteStrainElasticStress\n    block = 'inconel_outer inconel_inner'\n[]\n\nIs there anything I seem to be missing? The error I receive is 'Variable 'temperature' is of a different C++ type than you tried to fetch it as'. My apologies if I have missed something obvious!\nBest wishes,\nOscar",
          "url": "https://github.com/idaholab/moose/discussions/27732",
          "updatedAt": "2024-05-31T23:28:13Z",
          "publishedAt": "2024-05-29T12:54:45Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe solid mechanics physics is expecting a finite element variable, and you are defining it as a finite volume variable\nYou can either set up a multiapp for the solid thermo-mechanics or use different variables with separate domains of definition for the fluid and solid temperatures.\nThe temperature in the solid should be a finite element variable, and in the fluid a finite volume variable (what you have) if you use a finite volume discretization of the flow equations.\nSolving with two variables for temperature, one finite volume and one finite element should be possible. The connection should be done with boundary conditions or interface kernels\nI think there are quite a few examples of thermo-mechanics simulations with flow in a coolant channel (albeit using NekRS for flow instead of INSFV) in Cardinal (open-source application: https://github.com/neams-th-coe/cardinal/). That could be an inspiration\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27732#discussioncomment-9624613",
                  "updatedAt": "2024-06-01T07:08:52Z",
                  "publishedAt": "2024-05-31T23:28:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Block ids do not exist on mesh",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I am using an already generated mesh in a different simulation using the file mesh generator as below:\n[Mesh]\n  [file]\n      type = FileMeshGenerator\n      file = my_kks_noload_twophase_out.e-s180\n      use_for_exodus_restart = true\n  []\n[]\n\nMy new input script has block id = 1, which gives an error below. How do I make my mesh accept the new block id if what I am asking makes sense?\n the following blocks (ids) do not exist on the mesh: 1check_inp(moose_srv)\n    Blocks names (resp. ids) that do exist:  (0)\n\nI think this line of codes caused the issue:\n[eta1_gss]\n    type = MaterialStdVectorAux\n    variable = gss\n    property = slip_resistance\n    index = 0\n    block = 1\n    execute_on = timestep_end\n  []",
          "url": "https://github.com/idaholab/moose/discussions/27741",
          "updatedAt": "2024-05-31T23:18:38Z",
          "publishedAt": "2024-05-29T22:07:54Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt looks like something is listing the block id wrong / modifying the block id in the parameter.\nOr modifying the error message to mention something after \"1\"\nAre you using the moose server in any way?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9601440",
                  "updatedAt": "2024-05-30T05:46:08Z",
                  "publishedAt": "2024-05-30T05:38:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I do not understand your submission. Can you break it down if you don't mind?",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9601483",
                          "updatedAt": "2024-05-30T05:44:45Z",
                          "publishedAt": "2024-05-30T05:44:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you make a minimal example showing the problem ?\nI don't see why the name of the parameter is being modified",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9601498",
                          "updatedAt": "2024-05-30T05:47:13Z",
                          "publishedAt": "2024-05-30T05:47:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Below is a snippet of the whole input script. I was trying to modify the bicrystal crystal plasticity input script in the MOOSE repository for my already generated results from a previous kks simulation.\n[Mesh]\n  [./file]\n      type = FileMeshGenerator\n      file = my_kks_noload_twophase_out.e-s180\n      use_for_exodus_restart = true\n  [../]\n[]\n\n\n[Variables]\n  \n    # order parameter 1\n  [./eta0]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  \n    # order parameter 3\n  [./eta1]\n    order = FIRST\n    family = LAGRANGE\n      #initial_condition = 0.0\n  [../]\n  \n[]\n\n\n[AuxVariables]\n  [pk2]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [fp_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [eta0_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [eta0_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [eta1_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 1\n  []\n  [eta1_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 1\n  []\n\n  [./Energy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n\n  [./e_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  \n[]\n\n[Physics/SolidMechanics/QuasiStatic]\n  [eta0]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    generate_output = stress_xx\n    block = 0\n    base_name = eta0\n  []\n  [eta1]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    generate_output = stress_xx\n    block = 1\n    base_name = eta1\n  []\n[]\n\n\n\n[AuxKernels]\n  [pk2]\n    type = RankTwoAux\n    variable = pk2\n    rank_two_tensor = second_piola_kirchhoff_stress\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [fp_xx]\n    type = RankTwoAux\n    variable = fp_xx\n    rank_two_tensor = plastic_deformation_gradient\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [e_xx]\n    type = RankTwoAux\n    variable = e_xx\n    rank_two_tensor = total_lagrangian_strain\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [gss_eta0]\n    type = MaterialStdVectorAux\n    variable = eta0_gss\n    property = eta0_slip_resistance\n    index = 0\n    block = 0\n    execute_on = timestep_end\n  []\n  [slip_inc_eta0]\n    type = MaterialStdVectorAux\n    variable = eta0_slip_increment\n    property = eta0_slip_increment\n    index = 0\n    block = 0\n    execute_on = timestep_end\n  []\n  [gss_eta1]\n    type = MaterialStdVectorAux\n    variable = eta1_gss\n    property = eta1_slip_resistance\n    index = 0\n    block = 1\n    execute_on = timestep_end\n  []\n  [slip_inc_eta1]\n    type = MaterialStdVectorAux\n    variable = eta1_slip_increment\n    property = eta1_slip_increment\n    index = 0\n    block = 1\n    execute_on = timestep_end\n  []\n\n[]\n\n[BCs]\n  [symmy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [symmx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  []\n  \n\n  [tdisp]\n    type = FunctionDirichletBC\n    variable = disp_x\n    boundary = right\n    function = '0.01*t'\n  []\n[]\n\n[Materials]\n  [elasticity_tensor_eta0]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    base_name = eta0\n    block = 0\n  []\n  [stress_eta0]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_eta0'\n    tan_mod_type = exact\n    base_name = eta0\n    block = 0\n  []\n  [trial_xtalpl_eta0]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = eta0\n    block = 0\n  []\n  [elasticity_tensor_eta1]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 45.0\n    euler_angle_3 = 0.0\n    base_name = eta1\n    block = 1\n  []\n  [stress_eta1]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_eta1'\n    tan_mod_type = exact\n    base_name = eta1\n    block = 1\n  []\n  [trial_xtalpl_eta1]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 48\n    slip_sys_file_name = input_slip_sys_bcc48.txt\n    base_name = eta1\n    block = 1\n  []\n  \n\n  \n   # Switching functions for each phase\n  [./h0]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta0\n    all_etas = 'eta0 eta1'\n    h_name = h0\n  [../]\n  [./h1]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta1\n    all_etas = 'eta0 eta1'\n    h_name = h1\n  [../]\n  \n\n  # Generate the global stress from the phase stresses\n  [./global_stress]\n    type = MultiPhaseStressMaterial\n    phase_base = 'eta0 eta1'\n    h          = 'h0     h1'\n  [../]  \n  [./global_strain]\n    type = ComputeSmallStrain\n    displacements = 'disp_x disp_y'\n  [../]\n  \n[]\n\n[Kernels]\n [./eta0_dt]\n    type = TimeDerivative\n    variable = eta0\n  [../]\n  [./eta1_dt]\n    type = TimeDerivative\n    variable = eta1\n  [../]\n[]\n  \n\n[Postprocessors]\n  [eta0_stress_xx]\n    type = ElementAverageValue\n    variable = eta0_stress_xx\n    block = 0\n  []\n  [eta1_stress_xx]\n    type = ElementAverageValue\n    variable = eta1_stress_xx\n    block = 0\n  []\n  [pk2]\n    type = ElementAverageValue\n    variable = pk2\n  []\n  [fp_xx]\n    type = ElementAverageValue\n    variable = fp_xx\n  []\n  [e_xx]\n    type = ElementAverageValue\n    variable = e_xx\n  []\n  [eta0_gss]\n    type = ElementAverageValue\n    variable = eta0_gss\n    block = 0\n  []\n  [eta0_slip_increment]\n    type = ElementAverageValue\n    variable = eta0_slip_increment\n    block = 0\n  []\n  [eta1_gss]\n    type = ElementAverageValue\n    variable = eta1_gss\n    block = 1\n  []\n  [eta1_slip_increment]\n    type = ElementAverageValue\n    variable = eta1_slip_increment\n    block = 1\n  []\n  [./dofs]\n    type = NumDOFs\n  [../]\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_type -pc_asm_overlap -sub_pc_type -ksp_type  -ksp_gmres_restart '\n  petsc_options_value = ' lu            mumps            vinewtonrsls    2  lu    gmres  200 '\n  l_max_its = 50\n  nl_max_its = 25\n  l_tol = 1.0e-3\n  nl_rel_tol = 1.0e-6\n  nl_abs_tol = 1.0e-8\n\n  \n  end_time = 100\n\n   [./TimeStepper]\n     type = IterationAdaptiveDT\n     dt = 5e-4\n     cutback_factor = 0.8\n     growth_factor = 1.2\n     optimal_iterations = 20\n   [../]\n\n    [./Adaptivity]\n      initial_adaptivity = 0\n      refine_fraction = 0.7\n      coarsen_fraction = 0.1\n      max_h_level = 1\n    [../]\n[]\n\n[Preconditioning]\n    active = 'full'\n  [./full]\n    type = SMP\n    full = true\n  [../]\n  [./mydebug]\n    type = FDP\n    full = true\n  [../]\n[]\n\n\n\n[Outputs]\n  exodus = true\n    print_linear_residuals = true\n  [./table]\n    type = CSV\n    execute_on = timestep_end\n  [../]\n  [./checkpoint]\n    type = Checkpoint\n    num_files = 10\n    time_step_interval = 10\n  [../]\n[]\n\n[Debug]\n    show_var_residual_norms = true\n    show_mate\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9601613",
                          "updatedAt": "2024-05-30T06:05:24Z",
                          "publishedAt": "2024-05-30T06:05:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I created this new input script from the bicrystal model and I still get the same error about the block ID.\nBelow is the new input script\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  [file]\n      type = FileMeshGenerator\n      file = my_kks_noload_twophase_out.e-s180\n      use_for_exodus_restart = true\n  []\n[]\n\n[Variables]\n  [./eta0]\n    initial_from_file_var = eta1\n  [../]\n  \n  [./eta1]\n    initial_from_file_var = eta3\n  [../]\n[]\n\n[AuxVariables]\n  [pk2]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [fp_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [eta0_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [eta0_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [eta1_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 1\n  []\n  [eta1_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 1\n  []\n[]\n\n[Physics/SolidMechanics/QuasiStatic]\n  [eat0]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    generate_output = stress_xx\n    block = 0\n    base_name = eta0\n  []\n  [eta1]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    generate_output = stress_xx\n    block = 1\n    base_name = eta1\n  []\n[]\n\n[AuxKernels]\n  [pk2]\n    type = RankTwoAux\n    variable = pk2\n    rank_two_tensor = second_piola_kirchhoff_stress\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [fp_xx]\n    type = RankTwoAux\n    variable = fp_xx\n    rank_two_tensor = plastic_deformation_gradient\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [e_xx]\n    type = RankTwoAux\n    variable = e_xx\n    rank_two_tensor = total_lagrangian_strain\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [eta0_gss]\n    type = MaterialStdVectorAux\n    variable = eta0_gss\n    property = eta0_slip_resistance\n    index = 0\n    block = 0\n    execute_on = timestep_end\n  []\n  [eta0_slip_inc]\n    type = MaterialStdVectorAux\n    variable = eta0_slip_increment\n    property = eta0_slip_increment\n    index = 0\n    block = 0\n    execute_on = timestep_end\n  []\n  [eta1_gss]\n    type = MaterialStdVectorAux\n    variable = eta1_gss\n    property = eta1_slip_resistance\n    index = 0\n    block = 1\n    execute_on = timestep_end\n  []\n  [eta1_slip_inc]\n    type = MaterialStdVectorAux\n    variable = eta1_slip_increment\n    property = eta1_slip_increment\n    index = 0\n    block = 1\n    execute_on = timestep_end\n  []\n[]\n\n[BCs]\n  [symmy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [symmx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  []\n  [tdisp]\n    type = FunctionDirichletBC\n    variable = disp_x\n    boundary = right\n    function = '0.01*t'\n  []\n[]\n\n[Materials]\n  [eta0_elasticity_tensor]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    base_name = eta0\n    block = 0\n  []\n  [eta0_stress]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'eta0_trial_xtalpl'\n    tan_mod_type = exact\n    base_name = eta0\n    block = 0\n  []\n  [eta0_trial_xtalpl]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = eta0\n    block = 0\n  []\n  [eta1_elasticity_tensor]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 0.0\n    euler_angle_3 = 0.0\n    base_name = eta1\n    block = 1\n  []\n  [eta1_stress]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'eta1_trial_xtalpl'\n    tan_mod_type = exact\n    base_name = eta1\n    block = 1\n  []\n  [eta1_trial_xtalpl]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 48\n    slip_sys_file_name = input_slip_sys_bcc48.txt\n    base_name = eta1\n    block = 1\n  []\n[]\n\n[Kernels]\n  [eta0_dt]\n      type = TimeDerivative\n      variable = eta0\n  []\n  [eta1_dt]\n      type = TimeDerivative\n      variable = eta1\n  []\n[]\n\n[Postprocessors]\n  [eta0_stress_xx]\n    type = ElementAverageValue\n    variable = eta0_stress_xx\n    block = 0\n  []\n  [eta1_stress_xx]\n    type = ElementAverageValue\n    variable = eta1_stress_xx\n    block = 1\n  []\n  [pk2]\n    type = ElementAverageValue\n    variable = pk2\n  []\n  [fp_xx]\n    type = ElementAverageValue\n    variable = fp_xx\n  []\n  [e_xx]\n    type = ElementAverageValue\n    variable = e_xx\n  []\n  [eta0_gss]\n    type = ElementAverageValue\n    variable = eta0_gss\n    block = 0\n  []\n  [eta0_slip_increment]\n    type = ElementAverageValue\n    variable = eta0_slip_increment\n    block = 0\n  []\n  [eta1_gss]\n    type = ElementAverageValue\n    variable = eta1_gss\n    block = 1\n  []\n  [eta1_slip_increment]\n    type = ElementAverageValue\n    variable = eta1_slip_increment\n    block = 1\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  petsc_options_value = ' asm      2              lu            gmres     200'\n  nl_abs_tol = 1e-10\n  nl_rel_tol = 1e-10\n  nl_abs_step_tol = 1e-10\n  \n  end_time = 100\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 5e-4\n    cutback_factor = 0.75\n    growth_factor = 1.2\n    optimal_iterations = 20\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  perf_graph = true\n[]\n\nBelow is the error\nThe following error occurred in the MooseMesh 'mesh' of type MeshGeneratorMesh.check_inp(moose_srv)\nRequested subdomain 1 does not exist",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610591",
                          "updatedAt": "2024-05-30T22:03:39Z",
                          "publishedAt": "2024-05-30T22:03:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does subdomain 1 exist in the mesh?\nYou can declare it in the Mesh block if it does not exist at the beginning of the simulation but will appear later",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610605",
                          "updatedAt": "2024-05-30T22:05:23Z",
                          "publishedAt": "2024-05-30T22:05:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "No the subdomain 1 does not exist in the mesh. How do I declare it?",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610616",
                          "updatedAt": "2024-05-30T22:07:23Z",
                          "publishedAt": "2024-05-30T22:07:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "See the Mesh documentation there are two parameters to declare future subdomain names and ids",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610651",
                          "updatedAt": "2024-05-30T22:12:47Z",
                          "publishedAt": "2024-05-30T22:12:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "[Mesh]\n  [file]\n    type = FileMeshGenerator\n      file = my_kks_noload_twophase_out.e-s180\n      use_for_exodus_restart = true\n      block_id = '0 1'\n      block_name = 'eta0 eta1'\n\n      boundary_id = '0 1'\n      boundary_name = 'bottom left'\n  []\n \n[]\n\nI am fully not sure if this is the right way but I still have this error\nThe following error occurred in the MooseMesh 'mesh' of type MeshGeneratorMesh.check_inp(moose_srv)\nRequested subdomain 1 does not exist.",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610729",
                          "updatedAt": "2024-05-30T22:31:17Z",
                          "publishedAt": "2024-05-30T22:31:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I also modified it this way :\n[Mesh]\n  [file]\n    type = FileMeshGenerator\n      file = my_kks_noload_twophase_out.e-s180\n      use_for_exodus_restart = true\n  []\n  [eta0]\n    type = SubdomainIDGenerator\n    input = eta0\n    subdomain_id = 0\n  []\n\n  [eta1]\n    type = SubdomainIDGenerator\n    input = eta1\n    subdomain_id = 1\n  []\n \n[]\n\nand below is the error I get\nCyclic dependencies detected in mesh generation: eta0 <- eta0check_inp(moose_srv)",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9610853",
                          "updatedAt": "2024-05-30T23:02:14Z",
                          "publishedAt": "2024-05-30T23:02:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Use the add_subdomain_ids parameter",
                          "url": "https://github.com/idaholab/moose/discussions/27741#discussioncomment-9611311",
                          "updatedAt": "2024-05-31T00:18:30Z",
                          "publishedAt": "2024-05-31T00:18:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}