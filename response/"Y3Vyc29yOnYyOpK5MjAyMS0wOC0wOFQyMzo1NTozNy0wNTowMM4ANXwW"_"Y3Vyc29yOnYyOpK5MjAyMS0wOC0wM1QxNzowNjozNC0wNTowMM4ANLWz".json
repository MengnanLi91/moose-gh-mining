{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wOC0wM1QxNzowNjozNC0wNTowMM4ANLWz"
    },
    "edges": [
      {
        "node": {
          "title": "An error when compiling the application executable",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Hi Moose expert or user,\nI am studying how to creat a Moose application following this page (https://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/step01_moose_app.html). An error occurs when I try 'make -j4' in the step of Compile the Application Executable. There is no an executable (binary) file called babbler-opt. Could anyone help me fix this issue? Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/18537",
          "updatedAt": "2021-08-08T02:49:57Z",
          "publishedAt": "2021-08-05T20:13:52Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "xchengood"
                  },
                  "bodyText": "I fix this issue by myself. Thank everyone.",
                  "url": "https://github.com/idaholab/moose/discussions/18537#discussioncomment-1143593",
                  "updatedAt": "2021-08-08T02:49:56Z",
                  "publishedAt": "2021-08-08T02:49:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about the \"ComputeSurfaceTensionKKS\"",
          "author": {
            "login": "wenpeng231024"
          },
          "bodyText": "Dear MOOSE group,\nBased on the  Laplace equation, the surface tension is 2\u03b3/R. \u03b3 is the surface energy. 1/R is the curvature. In the \"ComputeSurfaceTensionKKS\" example, the calculated extra_stress in the interface is 2\u03b3/R or \u03b3?\n\nhttps://mooseframework.inl.gov/source/materials/ComputeSurfaceTensionKKS.html\nThanks,\nPeng",
          "url": "https://github.com/idaholab/moose/discussions/18432",
          "updatedAt": "2023-02-26T10:22:05Z",
          "publishedAt": "2021-07-25T16:46:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "@laagesen",
                  "url": "https://github.com/idaholab/moose/discussions/18432#discussioncomment-1058573",
                  "updatedAt": "2023-02-26T10:22:05Z",
                  "publishedAt": "2021-07-26T21:58:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "This form will give surface tension 2*gamma/R.",
                          "url": "https://github.com/idaholab/moose/discussions/18432#discussioncomment-1058730",
                          "updatedAt": "2023-05-23T01:14:25Z",
                          "publishedAt": "2021-07-26T23:13:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wenpeng231024"
                          },
                          "bodyText": "Got it! Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/18432#discussioncomment-1059592",
                          "updatedAt": "2023-05-23T01:14:25Z",
                          "publishedAt": "2021-07-27T01:06:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wenpeng231024"
                          },
                          "bodyText": "Can this equation reflect the curvature of the gas bubble? Because when I use this equation to calculate the surface tension for different size bubbles. I found no difference in surface tension for the different radius of the gas bubbles. I use (extra_stress_00+extra_stress_11)/2 to calculate the surface tension in 2D.\nThanks,\nPeng",
                          "url": "https://github.com/idaholab/moose/discussions/18432#discussioncomment-1140515",
                          "updatedAt": "2023-05-23T01:14:24Z",
                          "publishedAt": "2021-08-06T18:09:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "You will find a pressure dependence on the radius.",
                          "url": "https://github.com/idaholab/moose/discussions/18432#discussioncomment-1143500",
                          "updatedAt": "2023-05-23T01:14:38Z",
                          "publishedAt": "2021-08-08T00:33:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compute and track the ratio of the current timestep to the previous",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "For a time dependent solution of u, I would like to store the previous value of u and compare it to the current value of u. Another method would be to store the current value then compare it to the a subsequent u when the value of the subsequent u is greater than or less than a magnitude of the previously stored u. Is there a simple way to do this in MOOSE without having to create a C++ code using something like a \"do loop\" ?",
          "url": "https://github.com/idaholab/moose/discussions/18550",
          "updatedAt": "2023-06-12T06:00:42Z",
          "publishedAt": "2021-08-06T19:54:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Would any of these work for you:\nhttps://mooseframework.inl.gov/source/postprocessors/ChangeOverTimePostprocessor.html\nhttps://mooseframework.inl.gov/source/postprocessors/ChangeOverTimestepPostprocessor.html",
                  "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1140898",
                  "updatedAt": "2023-06-12T06:00:43Z",
                  "publishedAt": "2021-08-06T20:23:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Looks like it should do the trick. I will test it and provide an update on the result.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1140989",
                          "updatedAt": "2021-08-06T21:00:40Z",
                          "publishedAt": "2021-08-06T21:00:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "It would appear that using the ChangeOverTime or Timestep would work in conjunction with SolutionFunction. The problem is that when I use solution function as defined:\n[./solution_fcn]\ntype = SolutionFunction\nfrom_variable = u\nsolution = solution_uo\n[../]\nI get the following error: (Functions/solution_fcn/solution):  The requested UserObject with the name \"solution_uo\" was not found.",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1141059",
                          "updatedAt": "2021-08-06T21:38:52Z",
                          "publishedAt": "2021-08-06T21:38:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do you have a solution_uo somewhere? If not you need to add it\nBut I don't understand what the solution function is here for",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1141099",
                          "updatedAt": "2021-08-06T21:54:33Z",
                          "publishedAt": "2021-08-06T21:54:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "I copied this function from an example problem for SolutionFunction. The current site for it is under construction and there was not any real good instructions beyond the examples provided. There was also no other reference to the solution_uo. This function (SolutionFunction)seems to be the only one that I could find that will operate on a kernel variable.",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1141117",
                          "updatedAt": "2021-08-06T22:04:21Z",
                          "publishedAt": "2021-08-06T22:02:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "SolutionFunction is used to have the result of a previous solve, eg loaded using a solution user object, in a function.\nIt's not really for looking at older values within the same solve.\nThe two post processors I linked do that. What are you trying to get from this comparison of current and previous value? Examine convergence ?",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1141144",
                          "updatedAt": "2021-08-06T22:19:26Z",
                          "publishedAt": "2021-08-06T22:19:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Yes. I am looking to have a means to measure convergence/divergence of the current timestep solution to a reference timestep. The output would be in the form of the resulting ratio.",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143346",
                          "updatedAt": "2021-08-07T22:06:29Z",
                          "publishedAt": "2021-08-07T22:06:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Do you already know the solution at the reference timestep? Or are you computing it during the simulation (is it like the last one?)",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143355",
                          "updatedAt": "2022-11-21T17:02:43Z",
                          "publishedAt": "2021-08-07T22:19:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "The reference value is stored in solution during the solve. The first time step solution of u is the initial reference solution. The current solution is compared to the reference u and then becomes the new reference u etc.",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143375",
                          "updatedAt": "2022-11-21T17:02:43Z",
                          "publishedAt": "2021-08-07T22:40:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does it always become the new reference? If so then ChangeOverTimestep compares to the previous one.\nIf not, then I'd write a custom aux kernel based on SelfAux to save the reference value, then compare with a DifferencePostprocessor or a ParsedPostprocessor",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143380",
                          "updatedAt": "2022-11-21T17:02:43Z",
                          "publishedAt": "2021-08-07T22:44:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Yes it always become the new reference. Can ChangeOverTimestep be apples directly to a kernel variable u. It seems from the example for use of ChangeOverTimestep that it works only with a defined function. What would be the syntax required to have ChangeOverTimestep operate on the variable u?",
                          "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143402",
                          "updatedAt": "2023-06-12T06:00:43Z",
                          "publishedAt": "2021-08-07T22:58:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "So I'd recommend:\n\n\na SelfAux to save the variable value at TIMESTEP_BEGIN, to have the old value:\nhttps://mooseframework.inl.gov/source/auxkernels/SelfAux.html\n\n\nThen a ParsedAux to compute the difference, relative difference or whatever you need, and store it in another aux variable, at TIMESTEP_END for example.\n\n\nThen a ElementL1Error comparing the new aux variable to a 0 reference function.\nhttps://mooseframework.inl.gov/source/postprocessors/ElementL1Error.html\n\n\nIf you want an L2 error or something that already exists, you can skip step 2-3 and just use that.\nOr you could write your own postprocessor to do this. In which case, you can get old values of variables directly in the postprocessor using coupledValueOld",
                  "url": "https://github.com/idaholab/moose/discussions/18550#discussioncomment-1143426",
                  "updatedAt": "2023-06-12T06:00:46Z",
                  "publishedAt": "2021-08-07T23:08:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Stochastic: Strings in CSV sampler",
          "author": {
            "login": "MatiasAllay"
          },
          "bodyText": "Hi MOOSE,\nI have performed many simulations in steady state and now I would like to restart these simulations in transient state. The transient state simulation differs in many things with the steady simulation.\nI am using FileMeshGenerator to call the steady simulation, but since I have a large amount of files I would like to make this workflow automatic with stochastic. I thought on using  MultiAppCommandLineControl and CSVSampler, but this sampler does not take strings (the names of the transient state result files) as an input.\nIs there a way to go around this?\nThanks!\nMatias",
          "url": "https://github.com/idaholab/moose/discussions/18526",
          "updatedAt": "2022-07-14T19:24:44Z",
          "publishedAt": "2021-08-04T13:16:41Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "MatiasAllay"
                  },
                  "bodyText": "Hi MOOSE,\nI solved this with a Python script. The only downside is that I can't print on the console the simulation status/result. But I guess is okay.\nThanks!",
                  "url": "https://github.com/idaholab/moose/discussions/18526#discussioncomment-1137943",
                  "updatedAt": "2022-07-14T19:24:44Z",
                  "publishedAt": "2021-08-06T07:39:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Output free energy from GrainGrowthAction",
          "author": {
            "login": "KaijieNing"
          },
          "bodyText": "Hi, team,\nI am trying to figure out how to use the GrainGrowthAction in the phase-field module to simulate the polycrystal growth behavior.  I have the problem to output the free energy.\nIn the Materials property part of my input file, I can add constants L, kappa_op, mu, and gama_asymm to run the simulation. If I use the TotalFreeEngery type to output the free energy, it requires me to add the free energy function. But the GrainGrowth action should already have the free energy function. I do not know how can I use it. Is there a way to output the free energy? Attached is my input file.\nThanks very much.\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  nx = 50\n  ny = 50\n  nz = 0\n  xmin = 0\n  xmax = 100\n  ymin = 0\n  ymax = 100\n  zmin = 0\n  zmax = 0\n  elem_type = QUAD4\n[]\n\n[GlobalParams]\n  op_num = 3\n  var_name_base = gr\n[]\n\n[Variables]\n  [./PolycrystalVariables]\n  [../]\n[]\n\n[UserObjects]\n  [./voronoi]\n    type = PolycrystalVoronoi\n    rand_seed = 105\n    grain_num = 3\n    coloring_algorithm = bt\n  [../]\n[]\n\n[ICs]\n  [./PolycrystalICs]\n    [./PolycrystalColoringIC]\n      polycrystal_ic_uo = voronoi\n    [../]\n  [../]\n[]\n\n[AuxVariables]\n  [./bnds]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  \n  [./local_free_energy]\n    family = MONOMIAL\n    order = CONSTANT\n  [../]\n  \n[]\n\n\n[Modules]\n  [./PhaseField]\n    [./GrainGrowth]\n      variable_mobility = false\n      kappa = kappa_op\n      mobility = L           \n    [../]\n  [../]\n[]\n\n[AuxKernels]\n  [./BndsCalc]\n    type = BndsCalcAux\n    variable = bnds\n    execute_on = timestep_end\n  [../]\n\n  [./local_free_energy]\n    type = TotalFreeEnergy\n    variable = local_free_energy\n    f_name = F\n    kappa_names = 'kappa_op kappa_op kappa_op'\n    interfacial_vars ='gr0 gr1 gr2'   \n  [../]\n\n[]\n\n#[BCs]\n  #[./Periodic]\n    #[./All]\n     # auto_direction = 'x y'\n    #[../]\n # [../]\n#[]\n\n\n[Materials]\n  [./constant]\n    type = GenericConstantMaterial\n    prop_names  = 'L     kappa_op  mu   gamma_asymm'\n    prop_values = '1.0    2.0       1.0   1.5' \n  [../]  \n  [./free_energy]\n   type = DerivativeParsedMaterial\n   f_name = F                     \n   args = 'gr2 gr1 gr0'           \n   outputs = exodus\n  [../] \n\n[]\n\n[Postprocessors]\n  active = ''\n  [./ngrains]\n    type = FeatureFloodCount\n    variable = bnds\n    threshold = 0.7\n  [../]\n\n  [./total_free_energy]\n    type = ElementIntegralVariablePostprocessor\n    variable = local_free_energy\n  [../]\n  \n  [./total_gr0]\n    type = ElementIntegralVariablePostprocessor\n    variable = gr0\n  [../]\n  \n  [./total_gr1]\n    type = ElementIntegralVariablePostprocessor\n    variable = gr1\n  [../]\n\n  [./total_gr2]\n    type = ElementIntegralVariablePostprocessor\n    variable = gr2\n  [../]  \n[]\n\n[Preconditioning]\n  active = ''\n  [./SMP]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  scheme = 'bdf2'\n  solve_type = 'NEWTON'\n\n  petsc_options_iname = '-pc_type -ksp_gmres_restart -sub_ksp_type -sub_pc_type -pc_asm_overlap'\n  petsc_options_value = 'asm        31    preonly    ilu          1' \n\n  l_tol = 1.0e-4\n  l_max_its = 30\n  nl_max_its = 20\n  nl_rel_tol = 1.0e-9\n  start_time = 0.0\n  num_steps = 3\n  dt = 1\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  perf_graph = true\n  interval = 1\n[]",
          "url": "https://github.com/idaholab/moose/discussions/18518",
          "updatedAt": "2023-06-30T09:19:17Z",
          "publishedAt": "2021-08-03T18:20:39Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "If you set f_name = 0 you will get only the interfacial contributions, which should be all you need.",
                  "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1126892",
                  "updatedAt": "2023-06-30T09:19:32Z",
                  "publishedAt": "2021-08-03T18:31:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Actually, strike that. That definitely will not be enough! You could implement a Material class to compute the local free energy density, according to the equation for floc in https://mooseframework.inl.gov/moose/modules/phase_field/Grain_Growth_Model.html",
                          "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1126946",
                          "updatedAt": "2023-06-30T09:19:32Z",
                          "publishedAt": "2021-08-03T18:47:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Or derive from TotalFreeEnergyBase...",
                          "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1126961",
                          "updatedAt": "2023-06-30T09:19:32Z",
                          "publishedAt": "2021-08-03T18:49:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Thanks very much! I think I got your idea. Total free energy should include floc and fgrd. I wanted to use the existing MOOSE objects, so I added the expression for free energy function F in the Materials object (see below), and kept using the TotalFreeEnergy object.  Now I got the outputs from the .e file and was able to see it from Varaview. But I have a new problem that I could not output the .csv file though I set csv = true. So I have no information on total free energy and grain areas for me to plot out in Excel. Do I still have something else wrong with the input file?\n[./free_energy]\ntype = DerivativeParsedMaterial\nf_name = F\nargs = 'gr2 gr1 gr0'\nfunction = 'mu*((0.25gr2^4-0.5gr2^2)\n+(0.25gr1^4-0.5gr1^2)\n+(0.25gr0^4-0.5gr0^2)\n+gamma_asymm*((gr2^2)(gr1^2)\n+(gr2^2)(gr0^2)\n+(gr1^2)*(gr0^2))+0.25)'\nderivative_order = 2\nmaterial_property_names = 'mu gamma_asymm'\noutputs = exodus\n[../]",
                          "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1135851",
                          "updatedAt": "2023-06-30T09:19:32Z",
                          "publishedAt": "2021-08-05T17:26:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Hm, if you have Postrocessors and Outputs/csv=true, you should definitely get a CSV output file with the PP values in it.",
                          "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1136116",
                          "updatedAt": "2023-10-09T23:20:19Z",
                          "publishedAt": "2021-08-05T18:32:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Problem solved. I checked it again, and I realized that I should not use active = ' ' in the Postprocessors,  or I should set active for the outputs I wanted. Thanks very much.",
                          "url": "https://github.com/idaholab/moose/discussions/18518#discussioncomment-1137469",
                          "updatedAt": "2023-10-09T23:20:19Z",
                          "publishedAt": "2021-08-06T03:42:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Unable to find user object",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "Hello,\nIm trying to build and use a user object i defined using the action system but im running into this error when trying to access the object after i build it, Unable to find user object with name spec. I made a previous post about trying to have a user object add variables and was told that i should build the user object and adding the variables in an custom action block. See here #18483. Here is the code im using in my AddSpecies action.\n#include \"AddSpeciesAction.h\"\n#include \"SpeciesDefinition.h\"\n#include \"FEProblemBase.h\"\n#include \"AddVariableAction.h\"\n\nregisterMooseAction(\"moleApp\", AddSpeciesAction, \"add_variable\");\nregisterMooseAction(\"moleApp\", AddSpeciesAction, \"add_species_definition\");\n\nInputParameters\nAddSpeciesAction::validParams()\n{\n  InputParameters params = Action::validParams();\n  params.addRequiredParam<std::vector<std::string>>(\"species_names\", \"The species names\");\n  params.addParam<std::vector<std::string>>(\"phase_names\", \"Phase names for the species\");\n  params.addRequiredParam<std::vector<Real>>(\"molar_masses\", \"The molar masses of species\");\n  params.addClassDescription(\"Adds the species to the problem\");\n  return params;\n}\n\nAddSpeciesAction::AddSpeciesAction(const InputParameters & params)\n  : Action(params)\n{\n}\n\nvoid\nAddSpeciesAction::act()\n{\n  if (_current_task == \"add_species_definition\")\n  {\n    auto params = _factory.getValidParams(\"SpeciesDefinition\");\n    params.set<std::vector<std::string>>(\"species_names\") =\n      getParam<std::vector<std::string>>(\"species_names\");\n    params.set<std::vector<Real>>(\"molar_masses\") =\n      getParam<std::vector<Real>>(\"molar_masses\");\n    if (isParamValid(\"phase_names\"))\n      params.set<std::vector<std::string>>(\"phase_names\") =\n        getParam<std::vector<std::string>>(\"phase_names\");\n    _problem->addUserObject(\"SpeciesDefinition\", \"spec\", params);\n  }\n  else if (_current_task == \"add_variable\")\n  {\n    auto _vars = _problem->getUserObject<SpeciesDefinition>\n      (\"spec\").getSpeciesVarNames();\n    auto fe_type = AddVariableAction::feType(_pars);\n    auto type = AddVariableAction::determineType(fe_type, 1);\n    auto var_params = _factory.getValidParams(type);\n\n    var_params.applySpecificParameters(_pars, {\"family\", \"order\", \"scaling\"});\n\n    for (auto & var : _vars)\n      _problem->addVariable(type, var, var_params);\n  }\n}\n\nI added the following to my mainApp.C\n  registerSyntax(\"ConvectionAction\", \"Convection\");\n  registerSyntax(\"AddSpeciesAction\", \"AddSpecies\");\n  registerMooseObjectTask(\"add_species_definition\", AddSpeciesAction, false);\n  addTaskDependency(\"add_species_definition\", \"add_user_object\");\n\nIm not sure if there is some kinda order to when add_species_definition is being called after add_variable or something. Also, if i call _problem->getUserObject<SpeciesDefinition>(\"spec\") in other actions in my app will it return the correct user object that is created in this action?",
          "url": "https://github.com/idaholab/moose/discussions/18513",
          "updatedAt": "2022-12-02T09:57:08Z",
          "publishedAt": "2021-08-03T17:06:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Change\nregisterMooseObjectTask(\"add_species_definition\", AddSpeciesAction, false);\n\nto\nregisterTask(\"add_species_definition\", false);",
                  "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1127101",
                  "updatedAt": "2023-04-26T02:29:28Z",
                  "publishedAt": "2021-08-03T19:18:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "So this did not fix my issue. It still gives me the same error. On a side note, Im not exactly sure what line addTaskDependency(\"add_species_definition\", \"add_user_object\"); does but if i comment this line out, the code runs and gives me a different error. It seg falts on line _problem->addUserObject(\"SpeciesDefinition\", \"spec\", params);",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1131094",
                          "updatedAt": "2023-04-27T20:09:54Z",
                          "publishedAt": "2021-08-04T16:37:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Hmm. Can you share your repo?",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1131726",
                          "updatedAt": "2023-04-27T20:09:59Z",
                          "publishedAt": "2021-08-04T19:40:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "Unfortunately it is hosted on an internal ORNL git repo so I cannot. I can post my main apps C file and the header and C file for the action object, if that would help.",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1132002",
                          "updatedAt": "2023-04-27T20:10:00Z",
                          "publishedAt": "2021-08-04T21:01:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I think that your problem is that add_user_object (and hence add_species_definition) gets run after add_variables, see https://github.com/idaholab/moose/blob/next/framework/src/base/Moose.C.\naddTaskDependency(\"add_species_definition\", \"add_user_object\") does what you probably thought it does - it makes sure that the add_user_object task is run before your add_species_definition task runs. So you definitely want that line left in!\nYou could possibly just include the add variable code into the add_species_definition to fix it, or even make another task like add_species_variables to add your variables and make it depend on your add_species_definition task.",
                  "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1132912",
                  "updatedAt": "2023-04-27T20:10:01Z",
                  "publishedAt": "2021-08-05T04:35:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "This work! Thanks for your help. This also helped me understand what the addTaskDependency call means.",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1134646",
                          "updatedAt": "2023-04-27T20:10:02Z",
                          "publishedAt": "2021-08-05T13:14:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Adding variables in or after the add_user_object task seems a little dangerous, as by that time the setup_variables_complete task, the setup of the quadrature rules (dependent on variable order), and the setup of periodic BCs have already run and wouldn't know anything about the new variables.\nCan you infer the list of variable names to set up with out actually instantiating the user object? E.g. using a static member method?",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1135184",
                          "updatedAt": "2023-04-27T20:10:04Z",
                          "publishedAt": "2021-08-05T15:07:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "Oh ok i see what you are talking about. Yes i can infer the names, ill try to change the order of the calls making adding the variables dependent on add_variable",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1136599",
                          "updatedAt": "2023-04-27T20:10:05Z",
                          "publishedAt": "2021-08-05T21:15:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "@dschwen - good point!",
                          "url": "https://github.com/idaholab/moose/discussions/18513#discussioncomment-1136665",
                          "updatedAt": "2023-04-27T20:10:25Z",
                          "publishedAt": "2021-08-05T21:38:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Fluid Properties | Failed Compilation",
          "author": {
            "login": "rl3fz"
          },
          "bodyText": "Hello everyone!\nI tried to include the fluid properties module (switched from 'no' to 'yes' in my application's Makefile),\nbut when I tried to compile and test, it failed with the output: FAILED (Application not found)\nDoes anyone know how I can proceed? The application was working fine beforehand, and I updated MOOSE yesterday.\n(Any and all advice appreciated!)",
          "url": "https://github.com/idaholab/moose/discussions/18520",
          "updatedAt": "2024-06-19T22:02:27Z",
          "publishedAt": "2021-08-03T19:42:59Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "That's odd\nDid you run 'make clobberall' before rebuilding?",
                  "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1127283",
                  "updatedAt": "2024-06-19T22:02:31Z",
                  "publishedAt": "2021-08-03T19:59:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rl3fz"
                          },
                          "bodyText": "I had not, but I just tried that (along with make -j4 and ./run_tests -j4) and got the same result.",
                          "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1127420",
                          "updatedAt": "2024-06-19T22:02:35Z",
                          "publishedAt": "2021-08-03T20:36:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Might need to git clean -xfd (after committing ALL your changes and saving ALL your work)\nCould you please paste the the error message from the compilation\nThe FAILED error message just means an executable was not created",
                          "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1127642",
                          "updatedAt": "2024-06-19T22:02:35Z",
                          "publishedAt": "2021-08-03T21:31:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rl3fz"
                          },
                          "bodyText": "After all of the \"Creating Unity...\" lines, it showed the following:\n/home//miniconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home//miniconda3/envs/moose/lib/libgomp.so.1: undefined reference to clock_gettime@GLIBC_2.17' /home/****/miniconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/****/miniconda3/envs/moose/lib/libgomp.so.1: undefined reference to clock_getres@GLIBC_2.17'\n/home//miniconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home//miniconda3/envs/moose/lib/libgomp.so.1: undefined reference to aligned_alloc@GLIBC_2.16' /home/****/miniconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/****/miniconda3/envs/moose/lib/libgomp.so.1: undefined reference to secure_getenv@GLIBC_2.17'\ncollect2: error: ld returned 1 exit status\nmake: *** [/home//projects/moose/framework/moose.mk:374: /home//projects/moose/framework/contrib/exodiff/exodiff] Error 1\nmake: *** Waiting for unfinished jobs....",
                          "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1130112",
                          "updatedAt": "2024-06-19T22:02:40Z",
                          "publishedAt": "2021-08-04T12:52:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if you switch fluid_properties back does it work again?\nCan you compile in moose/framework/ ?\nDid you update Conda?\nThese errors really look like you have previously compiled binaries and updated your Conda environment. Running git clean -xfd in your app and in moose should help.",
                          "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1130871",
                          "updatedAt": "2024-06-19T22:02:50Z",
                          "publishedAt": "2021-08-04T15:42:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rl3fz"
                          },
                          "bodyText": "if you switch fluid_properties back does it work again?\n\nNo\n\nCan you compile in moose/framework/ ?\n\nNo\n\nDid you update Conda?\n\nNot since Monday, but after updating today, I was able to compile moose/framework/ , and my application (without fluid properties) compiled, so I tried including fluid properties again, and it worked!\nSeems I should be updating more frequently (or forgetting 'make clobberall' earlier really messed with the system), but I'll keep 'git clean -xfd' in mind for next time. Thank you!!\n(edited for clarity)",
                          "url": "https://github.com/idaholab/moose/discussions/18520#discussioncomment-1131580",
                          "updatedAt": "2024-06-19T22:03:03Z",
                          "publishedAt": "2021-08-04T18:55:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Phase Field GrainGrowth simulation coupled with temperature Gradient",
          "author": {
            "login": "zengfy-hust"
          },
          "bodyText": "Hello MOOSE\uff1a\nI\u3000recently\u3000make some effort in couping grainGrowth with temperature ,however ,some problems occured when I set the temperature gradient like following:\n[./TGradient]\ntype = ParsedFunction\nvalue = '450 + 0.12x'\n[../]\nthe following error occured after one perfect time step :\n\n\nwhen I changed the value to 450 + 0.02x,the simulation workes fine .could you tell me what is the peoblems ?\nany useful suggestions will be fine .",
          "url": "https://github.com/idaholab/moose/discussions/18260",
          "updatedAt": "2022-06-17T08:08:30Z",
          "publishedAt": "2021-07-05T13:20:24Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSorry we seemed to have missed this post.\n@jiangwen84  or @laagesen anything jumping to mind on this?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1024827",
                  "updatedAt": "2022-06-17T08:08:30Z",
                  "publishedAt": "2021-07-20T05:22:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "The error message is coming from GrainTracker. Probably something unphysical is happening at the higher value.",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1027126",
                          "updatedAt": "2022-06-17T08:08:31Z",
                          "publishedAt": "2021-07-20T16:06:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zengfy-hust"
                          },
                          "bodyText": "For your better understanding of my question ,I provide the input file I used here .Hope you could provide some help\n@GiudGiud @SudiptaBiswas\n1-350-70-texture.txt\ngrain_growth_temp_gradient.txt",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1030007",
                          "updatedAt": "2022-06-17T08:08:32Z",
                          "publishedAt": "2021-07-21T03:07:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I cant help, I dont know much about grain growth. @SudiptaBiswas anyone else we could tag here\n@zengfy-hust anything unphysical in the model outputs (print material properties, aux variables etc in an exodus file) before the failure?",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1121971",
                          "updatedAt": "2022-06-17T08:08:33Z",
                          "publishedAt": "2021-08-02T20:12:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "@zengfy-hust What does your grain structure and mesh look like? Clearly, you have a size issue in there. Why do you have split gains? They definitely could be the source of the error. Could you reproduce the error on a smaller/simpler problem? Couple of things you should try,\n\nRun the thermal gradient simulations without the EBSD reader. Try using Voronoi structure as a starting point. This would ensure that nothing unphysical is happening at that temperature.\nUse finer mesh and proper threshold for GrainTracker.  Try to avoid split grains.",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1126402",
                          "updatedAt": "2022-06-28T23:58:22Z",
                          "publishedAt": "2021-08-03T16:50:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zengfy-hust"
                          },
                          "bodyText": "thank you for your help ,I will work on the two options now ,and see if either of it  works.",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1128168",
                          "updatedAt": "2022-06-28T23:58:22Z",
                          "publishedAt": "2021-08-04T01:20:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "@GiudGiud how do you decide who to tag in discussions? Do you look at the git blame to find out who wrote the code in question?",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1130783",
                          "updatedAt": "2022-06-28T23:58:23Z",
                          "publishedAt": "2021-08-04T15:22:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Not always, I try to vary the people. Sometimes I get it wrong and tag people on a system they're not familiar with. My hope is they tag the right people after",
                          "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1130803",
                          "updatedAt": "2022-06-28T23:58:23Z",
                          "publishedAt": "2021-08-04T15:25:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "It looks like what's happening here is the subdivision of a grain into two grains. That new grain will have the next available ID, which is 281 in your case. The EBSDReader has no information (like Euler angles) on that new grain however, because it is not in the initial datafile.\nWithout seeing your input I must assume that you are using the EBSDReader as an euler_angle_provider. You need to create a new object derived from EulerAngleProvider and GrainDataTracker<T> that will work as your new grain tracker and Euler angle provider. In that class you can override the newGrain method to assign a new set of Euler angles to the new grain. You will also need to override getEulerAngles to return the angles from your EBSDReader (needs to be a parameter of this object) if the grain ID is below the getGrainNum() of the EBSDReader, and return your randomly created Euler angles otherwise.\nThe newGrain method you implement will automatically get called by the grain tracking system if a new previously unknown grain is discovered.\nNote that for now the new grain data cannot be connected to a previous grain, because currently we have no way of determining the pre-split grain ID. Maybe that is something we (or you) could work on (i.e to assign the split-off part the same orientation as the original grain).",
                  "url": "https://github.com/idaholab/moose/discussions/18260#discussioncomment-1130780",
                  "updatedAt": "2022-06-17T08:08:34Z",
                  "publishedAt": "2021-08-04T15:21:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "keep simulation running in transient (without changing anything)",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nFor some reason, when I keep my simulation running without changing anything it just won't converge after t=3, not sure what's a problem.\nThe simulation works fine with the steady-state type\nit's a basic flow simulation where left_BC is rhogh and right_BC is drainage\n   [./water_grad_y1]\n       type = FunctionDirichletBC\n       variable = porepressure\n       boundary = 'left'\n       function = watergrady1\n     [../]\n    \n\n          [./water_grad_right]\n            type = PorousFlowPiecewiseLinearSink\n          variable = porepressure\n          boundary = 'right'\n          pt_vals = '0 1e9' # x coordinates defining g\n          multipliers = '0 1e9' # y coordinates defining g\n          # PT_shift = 0  # BC pressure\n          flux_function = 1e-2 # Variable C\n          fluid_phase = 0\n          [../]\n\nthis is the Executioner block\n[Executioner]\n  type = Transient\n  start_time = 0\n  end_time = 10\n  dt = 1\n  solve_type = NEWTON\n  petsc_options = '-snes_converged_reason'\n  petsc_options_iname = '-pc_type -pc_hypre_type -pc_hypre_boomeramg_strong_threshold -pc_hypre_boomeramg_agg_nl  -pc_hypre_boomeramg_agg_num_paths -pc_hypre_boomeramg_max_levels  -pc_hypre_boomeramg_coarsen_type   -pc_hypre_boomeramg_interp_type -pc_hypre_boomeramg_P_max -pc_hypre_boomeramg_truncfactor'\n  petsc_options_value = 'hypre    boomeramg 0.5 4 5 25 HMIS  ext+i 2 0.3'\n  line_search = bt\n  nl_rel_tol = 5e-2\n  l_max_its = 20\n  nl_max_its = 1000\n[]\n\n\nmy objective is to make the simulation a quasi-steady state, where I change the value of block_BC when the simulation reaches the steady state.\nKind regards,\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/18472",
          "updatedAt": "2023-03-07T08:59:30Z",
          "publishedAt": "2021-07-29T06:33:09Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "The defaultnl_abs_tol = 1e-50 might be too small for you.",
                  "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1086470",
                  "updatedAt": "2023-03-07T08:59:37Z",
                  "publishedAt": "2021-07-29T10:22:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I agree.  You have probably reached steady-state but MOOSE still wants to reduce the residual, but can't due to precision loss.  You might find something useful at https://mooseframework.inl.gov/modules/porous_flow/convergence.html or maybe https://mooseframework.inl.gov/modules/porous_flow/nonlinear_convergence_problems.html .",
                          "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1122322",
                          "updatedAt": "2023-03-07T08:59:37Z",
                          "publishedAt": "2021-08-02T21:30:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi guys, so I make nl_abs_tol = 1e-5 and it works fine now (after a bit of fine-tuning)\nSo if I change anything after it reaches the steady-state, the residual will increase like to e-2 and this will be converged due to nl_rel_tol, but if it's at the steady-state, the system will be converged due to nl_abs_tol\nnot sure if this is the right way to do it, but it works for now.\nThank you all\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1127971",
                          "updatedAt": "2023-03-07T08:59:38Z",
                          "publishedAt": "2021-08-03T23:47:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yes, that is the correct way of setting the tolerances, according to me.  Choosing nl_abs_tol does usually require fine-tuning, since it depends on all your parameters (porosity, permeability, etc) and the size of your model.  Choosing nl_rel_tol is usually easier, since 1E-8 is usually sufficient to ensure reasonable solutions.",
                          "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1128039",
                          "updatedAt": "2023-03-07T08:59:50Z",
                          "publishedAt": "2021-08-04T00:17:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "nl_rel_tol = 5e-2 might be too high, you may be accepting totally unconverged solutions and putting the simulation in a bad spot\nSame for l_max_its of 20, this is really small.\nCan you try a smaller timestep? This could help as well",
                  "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1122172",
                  "updatedAt": "2023-03-07T09:00:13Z",
                  "publishedAt": "2021-08-02T21:03:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I agree with these comments too.",
                          "url": "https://github.com/idaholab/moose/discussions/18472#discussioncomment-1122323",
                          "updatedAt": "2023-03-07T09:00:15Z",
                          "publishedAt": "2021-08-02T21:30:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow - mass balance wont close",
          "author": {
            "login": "MatiasAllay"
          },
          "bodyText": "Hi,\nI'm sorry I have been asking so many simple questions. I appreciate a lot your help. I have a HM - RZ coordinates with a sink. The mass balance closes with hydro, but with mechanics somehow does not. Why is that? Here is my code\n[Mesh]\ntype = GeneratedMesh\ndim = 2\nnx = 10\nny = 1\nymax = 1\nxmax = 100\nxmin = 0.2\n[]\n[Problem]\ncoord_type = RZ\n[]\n[GlobalParams]\ndisplacements = 'disp_r disp_z'\nPorousFlowDictator = dictator\nbiot_coefficient = 1.0\n[]\n[Variables]\n[disp_r]\n[]\n[disp_z]\n[]\n[porepressure]\n[]\n[]\n[BCs]\n[sink]\ntype = PorousFlowSink\nvariable = porepressure\nflux_function = flux\nboundary = left\n[]\n[r]\ntype = FunctionDirichletBC\nvariable = disp_r\nfunction = 0\nboundary = 'right left'\n[]\n[z]\ntype = FunctionDirichletBC\nvariable = disp_z\nfunction = 0\nboundary = 'top bottom'\n[]\n[]\n[Modules]\n[FluidProperties]\n[the_simple_fluid]\ntype = SimpleFluidProperties\nbulk_modulus = 2E9\n[]\n[]\n[]\n[PorousFlowBasicTHM]\ncoupling_type = HydroMechanical\ndisplacements = 'disp_r disp_z'\nporepressure = porepressure\ngravity = '0 0 0'\nfp = the_simple_fluid\nmultiply_by_density = true\n[]\n[Materials]\n[elasticity_tensor]\ntype = ComputeIsotropicElasticityTensor\nbulk_modulus = 1.0E7\npoissons_ratio = 0.25\n[]\n[strain]\ntype = ComputeAxisymmetricRZSmallStrain\n[]\n[stress]\ntype = ComputeLinearElasticStress\n[]\n[porosity]\ntype = PorousFlowPorosityConst\nporosity = 0.1\n[]\n[biot_modulus]\ntype = PorousFlowConstantBiotModulus\nsolid_bulk_compliance = 1E-7\nfluid_bulk_modulus = 2E9\n[]\n[permeability]\ntype = PorousFlowPermeabilityConst\npermeability = '1E-13 0 0   0 1E-13 0   0 0 1E-13'\n[]\n[]\n[Postprocessors]\n[injection_area]\ntype = AreaPostprocessor\nboundary = left\nexecute_on = initial\n[]\n[fluid_mass0]\ntype = PorousFlowFluidMass\nexecute_on = timestep_begin\n[]\n[fluid_mass1]\ntype = PorousFlowFluidMass\nexecute_on = timestep_end\n[]\n[zmass_error]\ntype = FunctionValuePostprocessor\nfunction = mass_bal_fcn\nexecute_on = timestep_end\n[]\n[zinj_mass]\ntype = FunctionValuePostprocessor\nfunction = inj_mass\nexecute_on = timestep_end\n[]\n[]\n[Functions]\n[mass_bal_fcn]\ntype = ParsedFunction\nvalue = '(c - a)'\nvars = 'a c'\nvals = 'fluid_mass1 fluid_mass0'\n[]\n[inj_mass]\ntype = ParsedFunction\nvalue = 'flux * area'\nvars = 'flux area'\nvals = 'flux  injection_area'\n[]\n[flux]\ntype = ParsedFunction\nvals = injection_area\nvars = area\nvalue = '1E-5/area'\n[]\n[]\n[Preconditioning]\nactive = mumps\n[mumps]\ntype = SMP\nfull = true\npetsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\npetsc_options_value = ' lu       mumps'\n[]\n[]\n[Executioner]\ntype = Transient\nsolve_type = Newton\nend_time = 10\nnl_abs_tol = 1e-9\ndt = 1\n[]\n[Outputs]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/18302",
          "updatedAt": "2022-07-26T13:26:49Z",
          "publishedAt": "2021-07-10T16:49:47Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "There was a similar question earlier. Did you see #17530?",
                  "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-991267",
                  "updatedAt": "2022-07-26T13:27:09Z",
                  "publishedAt": "2021-07-11T22:48:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "Hi, yes I saw it thanks! But neither PorousFlowBasicTHM with multiply_by_density = true nor PorousFlowFullySaturated closes the mass balance. In X-Y coordinates, however, the mass balance closes.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-992401",
                          "updatedAt": "2022-07-26T13:27:10Z",
                          "publishedAt": "2021-07-12T07:58:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "@cpgr has partially answered your question: one fundamental problem is PorousFlowBasicTHM.  It is not designed for this sort of thing.  I should really add this to the documentation, https://mooseframework.inl.gov/source/actions/PorousFlowBasicTHM.html , because it has tripped me up too.  Note the time derivative of BasicTHM is \\dot{P}/M, while the PorousFlowFluidMass is calculating \\phi\\rho - so there's no reason why the latter should be conserved.  Simply change PorousFlowBasicTHM to PorousFlowFullySaturated (https://mooseframework.inl.gov/source/actions/PorousFlowFullySaturated.html).\n@cpgr : this raises things that have been nagging me for a while.  The problem is in PorousFlowVolumetricStrain.  In that class we calculate div(velocity).\n\nAn immediate problem is that in RZ coordinates we miss the u_r/r term, ooops\nPerhaps we should just utilize the user's calculation of total_strain, ie, replace the appropriate lines by _vol_total_strain_qp[_qp] = _total_strain[_qp].trace(); and total_strain_increment = _total_strain[_qp] - _total_strain_old[_qp];.  The user has defined what they mean by strain, so why not use it?\nThe reason we calculate in the current way is so our Jacobian is exact, while if we use the user's total strain, how would we get the derivatives?  We need at least d(vol_strain)/d(grad(u)).\nIn various cases we've assumed d(vol_strain)/du = 0, but in RZ (with the u_r/r term) that's not true, boohoo, and probably the case in finite strain nightmare land too, that requires extending other classes\nWhat the heck is that consistent_with_displaced_mesh that i put in?  It obviously works, but i can't figure out why.",
                  "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-991993",
                  "updatedAt": "2022-07-26T13:27:19Z",
                  "publishedAt": "2021-07-12T05:29:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I never understood consistent_with_displaced_mesh!\nUsing the given total strain sounds attractive. I wonder if we can get the derivatives approximately correct and whether this is enough for good convergence, at least for the small strain case.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-992108",
                          "updatedAt": "2022-07-26T13:27:20Z",
                          "publishedAt": "2021-07-12T06:18:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I think one of the reasons we \"custom coded\" PorousFlowVolumetricStrain was that the mechanical coupling in PorousFlow is really only meant for small strains.  It's difficult to remember that fact when presented with an all-singing-all-dancing code like PorousFlow.   Do you think \"AD\" will help with the derivatives, or will it be burdensome, or not work at all?",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-992147",
                          "updatedAt": "2022-07-26T13:27:19Z",
                          "publishedAt": "2021-07-12T06:33:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "Thanks Andy, I still cannot close the mass balance. But I assume that the PorousFlowFluidMass is not being computed somehow correctly and the injected fluid is indeed the one I am setting up in my code.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-992426",
                          "updatedAt": "2022-07-26T13:28:20Z",
                          "publishedAt": "2021-07-12T08:04:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I'm currently of the opinion that you have discovered a bug in PorousFlow, @MatiasAllay .  Some mechanically-coupled simulations will work fine, but I believe others will be buggy.    Thank you - i know it's super annoying for you, but it helps us.  I need to converse with @cpgr about the best way to fix this.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-995953",
                          "updatedAt": "2023-04-10T19:39:15Z",
                          "publishedAt": "2021-07-12T21:49:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "Hi @WilkAndy no is not annoying. Thank you and @cpgr for the great work.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-1000115",
                          "updatedAt": "2023-04-10T19:39:33Z",
                          "publishedAt": "2021-07-13T17:32:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "I'd appreciate if you can come back to this post once you fix the bug :)",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-1000172",
                          "updatedAt": "2023-04-10T19:39:42Z",
                          "publishedAt": "2021-07-13T17:47:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yep, will do",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-1001054",
                          "updatedAt": "2023-04-10T19:39:49Z",
                          "publishedAt": "2021-07-13T21:29:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @MatiasAllay .  The bug fix, #18359, has been merged into \"MOOSE next\".   Apologies for the amount of time it took to fix - due to computer issues outside my control.  The bug fix will slowly and automatically find its way into \"MOOSE master\" over the next day or so.",
                          "url": "https://github.com/idaholab/moose/discussions/18302#discussioncomment-1127762",
                          "updatedAt": "2023-04-10T19:39:52Z",
                          "publishedAt": "2021-08-03T22:06:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}