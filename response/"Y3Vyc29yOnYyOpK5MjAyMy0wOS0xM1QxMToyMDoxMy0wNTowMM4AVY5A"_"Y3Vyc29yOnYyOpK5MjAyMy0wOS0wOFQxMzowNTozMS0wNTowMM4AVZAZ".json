{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wOS0wOFQxMzowNTozMS0wNTowMM4AVZAZ"
    },
    "edges": [
      {
        "node": {
          "title": "Thermal-Hydraulics model problem: using the iteration algorithm to calculate Tw",
          "author": {
            "login": "SomnusYu"
          },
          "bodyText": "Hi all,\nI would like to use the Wolf-McCarthy correlation to calculate Tw by giving a constant wall heat flux in ThermalHydraulic model. The way is using this formula: Tw = qw / Hw + Tf.\nBut the Wolf-McCarthy correlation needs Tw to calculate Hw. So both Tw and Hw are unknown. Therefore, I need to use the iteration algorithm to calculate this.\nI changed the function in ADWallHeatTransferCoefficientWolfMcCarthyMaterial.C like this:\nvoid\nADWallHeatTransferCoefficientWolfMcCarthyMaterial::computeQpProperties()\n{\n  ADReal qw = 1.0e5; // given value\n  ADReal deta_Tw = 10.0; // just give an initial value\n  ADReal Tw_init = 500.0; // just give an initial value\n  ADReal Tw_itera;\n  ADReal Tw_calc = Tw_init;\n  ADReal Pr;\n  ADReal Re;\n  ADReal Nu;\n  while(deta_Tw > 0.01)\n  {\n    \n    Tw_itera = Tw_calc;\n    Pr = THM::Prandtl(_cp[_qp], _mu[_qp], _k[_qp]);\n    Re = std::max(1.0, THM::Reynolds(1., _rho[_qp], _vel[_qp], _D_h[_qp], _mu[_qp]));\n    Nu = 0.025 * std::pow(Re, 0.8) * std::pow(Pr, 0.4) *\n                std::pow(std::max(_T[_qp], Tw_itera) / _T[_qp], -0.55);\n    _Hw[_qp] = THM::wallHeatTransferCoefficient(Nu, _k[_qp], _D_h[_qp]);\n    \n    Tw_calc = qw / _Hw[_qp] + _T[_qp];\n\n    deta_Tw = std::abs(Tw_itera - Tw_calc);\n  }\n\n  _T_wall[_qp] = Tw_calc;\n}\n\nBut when I run the case, It is always in the state of \"Performing Initial Setup...\".\n\nWhat is the problem? Could anyone kindly tell me?\nBest regards!",
          "url": "https://github.com/idaholab/moose/discussions/25447",
          "updatedAt": "2023-09-13T17:03:42Z",
          "publishedAt": "2023-09-13T11:24:09Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYour algorithm is not converging and you're stuck in an infinite loop would be my guess.\nYou should:\n\nprint the values or use a debugger to see what is going on in the loop\nconsider using Newton's method instead of Picard as it converges faster\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25447#discussioncomment-6990666",
                  "updatedAt": "2023-09-13T13:52:03Z",
                  "publishedAt": "2023-09-13T13:52:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thank you for your suggestions.\nI have fixed this problem. The problem is that I give the wrong boundary condition.\nBy the way, what Newton's method should be in this example?\nThank you very much!",
                          "url": "https://github.com/idaholab/moose/discussions/25447#discussioncomment-6991955",
                          "updatedAt": "2023-09-13T15:27:53Z",
                          "publishedAt": "2023-09-13T15:27:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Newton-Raphson ?\nThe basic one for solving f(x) = 0",
                          "url": "https://github.com/idaholab/moose/discussions/25447#discussioncomment-6992026",
                          "updatedAt": "2023-09-13T15:32:56Z",
                          "publishedAt": "2023-09-13T15:32:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "I will have a try. Thank you very much!",
                          "url": "https://github.com/idaholab/moose/discussions/25447#discussioncomment-6992400",
                          "updatedAt": "2023-09-13T16:08:05Z",
                          "publishedAt": "2023-09-13T16:08:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error at Time Step 9 with Mesh Adaptation in Crystal Plasticity Simulation",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear MOOSE experts,\nWhen performing a crystal plasticity simulation with mesh adaptation enabled, I encountered an error at Time Step 9, time = 4.5, dt = 0.5. However, when I disable mesh adaptation, the simulation runs without issues. What could be the cause of this, and how can I resolve it? I will also attach my input file and the error message I get when using mesh adaptation below.\n# \u91c7\u7528moose\u81ea\u5e26\u7684\u7c7b\u548c\u5bf9\u8c61\n\nmy_filename = \"test5_mshAdp\"\nmy_filename2 = \"test5_mshAdp\"\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  elem_type = QUAD4\n  nx = 100\n  ny = 100\n  xmax = 100\n  ymax = 100\n  parallel_type = distributed\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[UserObjects]\n  [./prop_read]\n    type = PropertyReadFile # PropertyReadFile ElementPropertyReadFile\n    # need read\n    prop_file_name = 'euler_ang_test_200.txt'\n    # Enter file data as prop#1, prop#2, .., prop#nprop\n    nprop = 3\n    read_type = voronoi\n    nvoronoi = 50\n    use_random_voronoi = true\n    rand_seed = 100\n    rve_type = periodic\n  [../]\n[]\n\n[Variables]\n  [./disp_x]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./disp_y]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n[Modules/TensorMechanics/Master/all]\n  strain = FINITE\n  # use_displaced_mesh = true\n[]\n\n[AuxVariables]\n  [./pk2]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./fp_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./gss]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./slip_increment]\n   order = CONSTANT\n   family = MONOMIAL\n  [../]\n  [./stress_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n\n  [./euler1]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./euler2]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./euler3]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./crysrot11]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./pk2]\n   type = RankTwoAux\n   variable = pk2\n   rank_two_tensor = second_piola_kirchhoff_stress\n   index_j = 1\n   index_i = 1\n   execute_on = timestep_end\n  [../]\n  [./fp_yy]\n    type = RankTwoAux\n    variable = fp_yy\n    rank_two_tensor = plastic_deformation_gradient\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  [../]\n  [./e_yy]\n    type = RankTwoAux\n    variable = e_yy\n    rank_two_tensor = total_lagrangian_strain\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  [../]\n  [./gss]\n   type = MaterialStdVectorAux\n   variable = gss\n   property = slip_resistance\n   index = 0\n   execute_on = timestep_end\n  [../]\n  [./slip_inc]\n   type = MaterialStdVectorAux\n   variable = slip_increment\n   property = slip_increment\n   index = 0\n   execute_on = timestep_end\n  [../]\n  [./stress_yy]\n    type = RankTwoAux\n    variable = stress_yy\n    rank_two_tensor = stress\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  [../]  \n  [./stress_xx]\n    type = RankTwoAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    index_j = 0\n    index_i = 0\n    execute_on = timestep_end\n  [../]\n  [./euler1]\n    type = MaterialRealVectorValueAux\n    variable = euler1\n    property = Euler_angles\n    component = 0\n    execute_on = timestep_end\n  [../]\n  [./euler2]\n    type = MaterialRealVectorValueAux\n    variable = euler2\n    property = Euler_angles\n    component = 1\n    execute_on = timestep_end\n  [../]\n  [./euler3]\n    type = MaterialRealVectorValueAux\n    variable = euler3\n    property = Euler_angles\n    component = 2\n    execute_on = timestep_end\n  [../]\n  [./crysrot11]\n    type = RankTwoAux\n    variable = crysrot11\n    rank_two_tensor = crysrot\n    index_j = 0\n    index_i = 0\n    execute_on = timestep_end\n  [../]\n[]\n\n[BCs]\n  [./symmy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'bottom'\n    value = 0\n  [../]\n  [./symmx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'left'\n    value = 0\n  [../]\n  [./tdisp]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = top\n    function = '0.01*t'\n  [../]\n[]\n\n[Materials]\n  [./elasticity_tensor]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    read_prop_user_object = prop_read\n    \n  [../]\n  [./stress]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl'\n    tan_mod_type = exact\n    maximum_substep_iteration = 100\n  [../]\n  [./trial_xtalpl]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    slip_increment_tolerance = 0.1 # 2e-2\n    resistance_tol = 5.0e-2 # 2e-2\n  [../]\n[]\n\n[Postprocessors]\n  [./dofs]\n    type = NumDOFs\n  [../]\n  [./dt]\n    type = TimestepSize\n  [../]\n  [./run_time]\n    type = PerfGraphData\n    section_name = \"Root\"\n    data_type = total\n  [../]\n  [./stress_yy]\n    type = ElementAverageValue\n    variable = stress_yy\n  [../]\n  [./pk2]\n   type = ElementAverageValue\n   variable = pk2\n  [../]\n  [./fp_yy]\n    type = ElementAverageValue\n    variable = fp_yy\n  [../]\n  [./e_yy]\n    type = ElementAverageValue\n    variable = e_yy\n  [../]\n  [./gss]\n    type = ElementAverageValue\n    variable = gss\n  [../]\n  [./slip_increment]\n   type = ElementAverageValue\n   variable = slip_increment\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  petsc_options_value = ' asm      2              lu            gmres     200'\n  nl_abs_tol = 1e-10\n  nl_rel_step_tol = 1e-10\n  dtmax = 10.0\n  nl_rel_tol = 1e-10\n  dtmin = 0.5\n  start_time = 0.0\n  end_time = 100\n  \n  # num_steps = 10\n  nl_abs_step_tol = 1e-10\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 0.1 # Initial time step.  In this simulation it changes.\n    optimal_iterations = 6 # Time step will adapt to maintain this number of nonlinear iterations\n  [../]\n  [./Adaptivity]\n    # Block that turns on mesh adaptivity. Note that mesh will never coarsen beyond initial mesh (before uniform refinement)\n    initial_adaptivity = 2 # Number of times mesh is adapted to initial condition\n    refine_fraction = 0.7 # Fraction of high error that will be refined\n    coarsen_fraction = 0.1 # Fraction of low error that will coarsened\n    max_h_level = 4 # Max number of refinements used, starting from initial mesh (before uniform refinement)\n  [../]\n[]\n\n[Outputs]\n  [my_exodus]\n    file_base = ./ex_${my_filename2}/out_${my_filename} \n    # interval = 10\n    type = Nemesis\n    additional_execute_on = 'FINAL'\n  [../]\n  [./csv]\n    file_base = ./csv_${my_filename}/out_${my_filename}\n    # interval = 10\n    type = CSV\n  [../]\n  print_linear_residuals = false\n[]\nand\n*** Warning, This code is deprecated and will be removed in future versions:\n\"registerAll\" in Modules is deprecated. Please update your *App.C file to call the new templated \"registerAllObjects\" method (e.g. ModulesApp::registerAllobject<MyApp>(...))\n\n\n\ufffd[36m\n*** Info ***\nTensorMechanics Action: selecting 'incremental finite strain' formulation.\ufffd[39m\n\n\ufffd[33m\n*** Warning ***\nThe following warning occurred in the object \"prop_read\", of type \"PropertyReadFile\".\n\nData size in /home/pw-moose/projects/yinglong/examples/t3_coupled_cp_pf_2023/euler_ang_test_200.txt is larger than 50 objects, some data will not be used.\ufffd[39m\nUsing EXPERIMENTAL Stateful Material Property projection with Adaptivity!\nFramework Information:\nMOOSE Version:           git commit 9d7fcff781 on 2023-05-09\nLibMesh Version:         \nPETSc Version:           3.16.6\nSLEPc Version:           3.16.2\nCurrent Time:            Mon Sep 11 19:41:12 2023\nExecutable Timestamp:    Thu Sep  7 17:41:00 2023\n\nParallelism:\n  Num Processors:          30\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           distributed\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   \n    Total:                 10201\n    Local:                 377\n    Min/Max/Avg:           301/382/340\n  Elems:                   \n    Total:                 10000\n    Local:                 335\n    Min/Max/Avg:           324/342/333\n  Num Subdomains:          1\n  Num Partitions:          30\n  Partitioner:             parmetis\n\nNonlinear System:\n  Num DOFs:                20402\n  Num Local DOFs:          754\n  Variables:               { \"disp_x\" \"disp_y\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                110000\n  Num Local DOFs:          3685\n  Variables:               { \"pk2\" \"fp_yy\" \"e_yy\" \"gss\" \"slip_increment\" ... \"stress_xx\" \"euler1\" \"euler2\" \n                             \"euler3\" \"crysrot11\" } \n  Finite Element Types:    \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             IterationAdaptiveDT\n  TimeIntegrator:          ImplicitEuler\n  Solver Mode:             Preconditioned JFNK\n  MOOSE Preconditioner:    SMP\n\n\nTime Step 0, time = 0\n\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | dofs           | dt             | e_yy           | fp_yy          | gss            | pk2            |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n+----------------+----------------+----------------+----------------+\n| time           | run_time       | slip_increment | stress_yy      |\n+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n+----------------+----------------+----------------+----------------+\n\n\nTime Step 1, time = 0.5, dt = 0.5\n 0 Nonlinear |R| = \ufffd[32m1.439083e+04\ufffd[39m\n 1 Nonlinear |R| = \ufffd[32m1.361406e+03\ufffd[39m\n\n...\n\nTime Step 9, time = 4.5, dt = 0.5\n 0 Nonlinear |R| = \ufffd[32m1.099798e+04\ufffd[39m\n 1 Nonlinear |R| = \ufffd[32m1.471285e+03\ufffd[39m\n 2 Nonlinear |R| = \ufffd[32m8.691529e+02\ufffd[39m\n 3 Nonlinear |R| = \ufffd[32m6.493784e+02\ufffd[39m\n 4 Nonlinear |R| = \ufffd[32m5.602928e+02\ufffd[39m\n 5 Nonlinear |R| = \ufffd[32m4.784658e+02\ufffd[39m\n 6 Nonlinear |R| = \ufffd[32m4.339659e+02\ufffd[39m\n 7 Nonlinear |R| = \ufffd[33m4.216267e+02\ufffd[39m\n 8 Nonlinear |R| = \ufffd[32m3.996684e+02\ufffd[39m\n 9 Nonlinear |R| = \ufffd[32m3.157912e+02\ufffd[39m\n10 Nonlinear |R| = \ufffd[33m3.049493e+02\ufffd[39m\n11 Nonlinear |R| = \ufffd[33m2.901048e+02\ufffd[39m\n12 Nonlinear |R| = \ufffd[32m2.016366e+02\ufffd[39m\n13 Nonlinear |R| = \ufffd[32m1.310288e+02\ufffd[39m\n14 Nonlinear |R| = \ufffd[32m1.040611e+02\ufffd[39m\n15 Nonlinear |R| = \ufffd[32m3.983112e+01\ufffd[39m\n16 Nonlinear |R| = \ufffd[32m7.117200e-02\ufffd[39m\n17 Nonlinear |R| = \ufffd[32m7.214923e-07\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n  Finished Solving                                                                       [\ufffd[33m2639.65 s\ufffd[39m] [\ufffd[33m  251 MB\ufffd[39m]\n\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | dofs           | dt             | e_yy           | fp_yy          | gss            | pk2            |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   5.000000e-01 |   2.081602e+06 |   5.000000e-01 |   5.000140e-05 |   1.000000e+00 |   6.080000e+01 |   6.924013e+00 |\n|   1.000000e+00 |   8.836540e+05 |   5.000000e-01 |   1.000056e-04 |   1.000000e+00 |   6.080000e+01 |   1.384718e+01 |\n|   1.500000e+00 |   1.219618e+06 |   5.000000e-01 |   1.500126e-04 |   1.000000e+00 |   6.080000e+01 |   2.076857e+01 |\n|   2.000000e+00 |   1.959871e+06 |   5.000000e-01 |   2.000224e-04 |   1.000000e+00 |   6.080000e+01 |   2.768870e+01 |\n|   2.500000e+00 |   1.853261e+06 |   5.000000e-01 |   2.500350e-04 |   1.000000e+00 |   6.080000e+01 |   3.461224e+01 |\n|   3.000000e+00 |   1.906808e+06 |   5.000000e-01 |   3.000504e-04 |   1.000000e+00 |   6.080000e+01 |   4.153573e+01 |\n|   3.500000e+00 |   1.851434e+06 |   5.000000e-01 |   3.500687e-04 |   1.000000e+00 |   6.080000e+01 |   4.845926e+01 |\n|   4.000000e+00 |   1.903470e+06 |   5.000000e-01 |   4.000897e-04 |   1.000000e+00 |   6.080001e+01 |   5.537987e+01 |\n|   4.500000e+00 |   1.851696e+06 |   5.000000e-01 |   4.501135e-04 |   1.000000e+00 |   6.080002e+01 |   6.229262e+01 |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n+----------------+----------------+----------------+----------------+\n| time           | run_time       | slip_increment | stress_yy      |\n+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   5.000000e-01 |   2.527050e+03 |  -2.896106e-18 |   6.924539e+00 |\n|   1.000000e+00 |   3.298270e+03 |  -2.969393e-15 |   1.384929e+01 |\n|   1.500000e+00 |   5.116194e+03 |  -1.707840e-13 |   2.077331e+01 |\n|   2.000000e+00 |   8.876102e+03 |  -3.050932e-12 |   2.769712e+01 |\n|   2.500000e+00 |   1.155536e+04 |  -2.841447e-11 |   3.462540e+01 |\n|   3.000000e+00 |   1.519029e+04 |  -1.759100e-10 |   4.155467e+01 |\n|   3.500000e+00 |   1.889927e+04 |  -8.211753e-10 |   4.848505e+01 |\n|   4.000000e+00 |   2.189898e+04 |  -3.115068e-09 |   5.541356e+01 |\n|   4.500000e+00 |   2.454661e+04 |  -1.006797e-08 |   6.233523e+01 |\n+----------------+----------------+----------------+----------------+\n\n\n===================================================================================\n=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES\n=   PID 1028220 RUNNING AT pwmoose-PowerEdge-T640\n=   EXIT CODE: 9\n=   CLEANING UP REMAINING PROCESSES\n=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\n===================================================================================\nYOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application.\nPlease see the FAQ page for debugging suggestions\nAny suggestions or examples would be greatly appreciated. Thank you very much for your time and help.\nBest regards,\nwei",
          "url": "https://github.com/idaholab/moose/discussions/25444",
          "updatedAt": "2023-09-13T02:58:51Z",
          "publishedAt": "2023-09-12T01:37:58Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAh this is really unfortunate. Something is crashing, and with 30 parallel processes it will be a little hard to find.\nYou can try debugging in parallel following the instructions on this page:\nhttps://mooseframework.inl.gov/application_development/debugging.html\nIf you can run this same problem with a single process, it will be easier to debug\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25444#discussioncomment-6978723",
                  "updatedAt": "2023-09-12T13:00:38Z",
                  "publishedAt": "2023-09-12T13:00:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Signal 9 often means you ran out of memory. You might try my monitoring your memory usage with a computer resource application and confirm whether that might be the issue",
                          "url": "https://github.com/idaholab/moose/discussions/25444#discussioncomment-6980894",
                          "updatedAt": "2023-09-12T16:07:35Z",
                          "publishedAt": "2023-09-12T16:07:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Interestingly, there was no memory overflow; the highest memory usage observed was 12GB, whereas the server has a total of 188GB of memory. Additionally, I followed the approach suggested by ngrilli, which involves using Neper-generated microstructures in combination with mesh adaptation to run ComputeMultipleCrystalPlasticityStress, and it executed successfully.",
                          "url": "https://github.com/idaholab/moose/discussions/25444#discussioncomment-6985066",
                          "updatedAt": "2023-09-13T02:59:07Z",
                          "publishedAt": "2023-09-13T02:58:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Distributed mesh with element based material properties",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI'm trying to moved my simulation into distributed mesh to reduce RAM usage (as we approaching the upper limit)\nso I got an error at the PropertyReadFile\n*** ERROR ***\nThe following error occurred in the object \"flag_read_MDLCHG_FLAG_0039\", of type \"PropertyReadFile\".\n\nElement ID 36759009 greater than than total number of element in mesh: 9357805. Elements should be numbered consecutively.\n\n\n\n*** ERROR ***\nThe following error occurred in the object \"flag_read_MDLCHG_FLAG_0039\", of type \"PropertyReadFile\".\n\nElement ID 27351999 greater than than total number of element in mesh: 9357805. Elements should be numbered consecutively.\n\n\n\n*** ERROR ***\nThe following error occurred in the object \"flag_read_MDLCHG_FLAG_0039\", of type \"PropertyReadFile\".\n\nElement ID 16219069 greater than than total number of element in mesh: 9357805. Elements should be numbered consecutively.\n\n\nI run it with 4 cores, i guess Element ID are the multiple of 2 3 4 from an original ID?\nI checked the source code:\nit seems like the total Element ID is multiple by a number of cores?\nReal\nPropertyReadFile::getElementData(const Elem * elem, unsigned int prop_num) const\n{\n  unsigned int jelem = elem->id();\n  if (jelem >= _mesh.nElem())\n    mooseError(\"Element ID \",\n               jelem,\n               \" greater than than total number of element in mesh: \",\n               _mesh.nElem(),\n               \". Elements should be numbered consecutively.\");\n  return _reader.getData(jelem)[prop_num];\n}\n\nI even has:\n[Mesh] \nallow_renumbering = false\n\nis this a bug? because jelem = elem->id(); should not add extra element ID?\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/25440",
          "updatedAt": "2023-09-12T13:15:35Z",
          "publishedAt": "2023-09-11T12:03:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\ni think you should allow_renumbering to make sure to get consecutive element ids.\ni m wondering if we should force a renumbering step even\nAre you using  adaptivity?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6966957",
                  "updatedAt": "2023-09-11T12:08:48Z",
                  "publishedAt": "2023-09-11T12:08:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How are you mapping the ids and the elements when preparing the CSV file? You should have one value for each element but that seems tough to do with an arbitrary element numbering",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6966985",
                          "updatedAt": "2023-09-11T12:10:27Z",
                          "publishedAt": "2023-09-11T12:10:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "i think you should allow_renumbering to make sure to get consecutive element ids.\n\nHi @GiudGiud, i dont think so, the code itself even has a warning in there:\nvoid\nPropertyReadFile::readData()\n{\n  if (_read_type == ReadTypeEnum::ELEMENT && _mesh.getMesh().allow_renumbering())\n    mooseWarning(\"CSV data is sorted by element, but mesh element renumbering is on, be careful!\");\n\n  _reader.setFormatFlag(MooseUtils::DelimitedFileReader::FormatFlag::ROWS);\n  _reader.read();\n\nin the normal case it works perfectly fine, so each line of the .csv is the property value of each element_ID from 1 to n\nfor example\n0\n0\n1e-12\n2e-12\n0\n(so element ID 3 and 4 has value, the rest is 0)",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6967006",
                          "updatedAt": "2023-09-11T12:12:51Z",
                          "publishedAt": "2023-09-11T12:12:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "note that, in the normal case, I have element ID goes from 1 to n, so that way I can match the .csv with it",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6967024",
                          "updatedAt": "2023-09-11T12:16:07Z",
                          "publishedAt": "2023-09-11T12:16:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I added the warning about renumbering because I don\u2019t see how someone can predict how it will be renumbered.\nbut if you feel you can work with the post-renumbering ids you can try that",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6967234",
                          "updatedAt": "2023-09-11T12:36:47Z",
                          "publishedAt": "2023-09-11T12:36:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I run it with 4 cores, i guess Element ID are the multiple of 2 3 4 from an original ID?\n\nis that how the numbering works for a distrivuted mesh that is loaded from file  @roystgnr",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6967257",
                          "updatedAt": "2023-09-11T12:39:45Z",
                          "publishedAt": "2023-09-11T12:39:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I added the warning about renumbering because I don\u2019t see how someone can predict how it will be renumbered.\n\n\nbut if you feel you can work with the post-renumbering ids you can try that\n\nyep I turn it off as well, as mentioned above\nbut yeh now the element ID is kinda more than the total element number, which is kinda weird.\nmaybe I did it incorrectly? I just added --distributed-mesh at the end of the mpiexec line:\nmpiexec -n 4 ~/moose_beh/moose_beh-opt -i XXXXXXXX_R04H_M02_Nocap_transient_part3.i --distributed-mesh --t --color off --n-threads=4\nhere is my mesh block:\n\n### ################################################################### #######\n### MESH (NODE, ELEMENTS) AND\n### SETS (NSETS, ELSETS, SRFSETS,) AS WELL AS MPCS\n### ################################################################### #######\n[Mesh] \nallow_renumbering = false\n[mesh]\ntype = FileMeshGenerator\nallow_renumbering = false\nfile= XXXXXXXXXXX_G01HTv1_FT_MOOSEMESH_updated.inp\n[]\n### (optional) parsing sets\n[side_south]\n   type = ParsedGenerateSideset\n   input = mesh\n   combinatorial_geometry = 'y<=-1607.6' \n   new_sideset_name = 'BC_WALL_SOUTH' \n []\n [side_north]\n    type = ParsedGenerateSideset\n    input = side_south\n    combinatorial_geometry = 'y>=7772.2' \n    new_sideset_name = 'BC_WALL_NORTH' \n  []\n  [side_east]\n     type = ParsedGenerateSideset\n     input = side_north\n     combinatorial_geometry = 'x>=8520.4' \n     new_sideset_name = 'BC_WALL_EAST' \n   []\n   [side_west]\n      type = ParsedGenerateSideset\n      input = side_east\n      combinatorial_geometry = 'x<=-859.47' \n      new_sideset_name = 'BC_WALL_WEST' \n    []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6967694",
                          "updatedAt": "2023-09-11T13:22:49Z",
                          "publishedAt": "2023-09-11T13:22:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "is that how the numbering works for a distrivuted mesh that is loaded from file\n\nNot on purpose.  With renumbering disabled, the ids ought be the original ids (modulo whatever we need to get the file format to be happy with them, e.g. subtracting 1 to go from 1-based ExodusII counting to 0-base libMesh counting).  With renumbering enabled, the ids are going to end up sorted onto contiguous blocks on processors and aren't going to have much to do with the original ids.\nBut this is an Abaqus file?  I don't know how much love AbaqusIO has received, especially post-DistributedMesh.  I'm seeing us setting up an _abaqus_to_libmesh_elem_mapping as we add libMesh elements, for instance, rather than just simply pre-setting the libMesh element id to the Abaqus id like it should.  In that case, what's going to happen is that DistributedMesh::add_elem will try to pick an id in such a way that the synchronized addition of these elements can't possibly conflict with any possible parallel addition of other elements; it'll leave spaces in between the ids so that each processor can add its own elements as needed without a collision.  With N processors, the first added element ought to be getting id N+1, the next 2N+2, etc.\nThis ought to be a quick fix in libMesh abaqus_io.C, if @Traiwit can help me test it, but it'll probably be a month before the changes make it into MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6972703",
                          "updatedAt": "2023-09-11T22:19:13Z",
                          "publishedAt": "2023-09-11T22:19:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "Actually - do we know the range of Abaqus-allowed element numbers?  I'm assuming it's 1-based, and we'll want to do the same conversion to 0-based that we do with Exodus?",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6972717",
                          "updatedAt": "2023-09-11T22:23:07Z",
                          "publishedAt": "2023-09-11T22:23:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "Anyway, I'm just about done with work for the day, but I threw up libMesh/libmesh#3640 if you want to try it out.",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6972834",
                          "updatedAt": "2023-09-11T22:44:18Z",
                          "publishedAt": "2023-09-11T22:44:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @roystgnr @GiudGiud\nHow do I even modify libmesh from my end? note that I installed my MOOSE via mamba, I dont have access to go inside libmesh\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/25440#discussioncomment-6976192",
                          "updatedAt": "2023-09-12T08:26:12Z",
                          "publishedAt": "2023-09-12T08:26:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Best way to model Heat Conduction at an interface/thermal contact (SideSetHeatTransfer/GapHeatTransfer/Any better method)?",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I'd like to understand the best way to model heat transfer at an interface between two touching blocks using MOOSE.\nThe two blocks have different material properties and so there is a discontinuity in the temperature between them, therefore conductance (parameter I can supply) needs to be specified at the interface. Important to note that both blocks are touching. I have looked through a couple of options:\n\nGapHeatTransfer (https://mooseframework.inl.gov/syntax/ThermalContact/index.html):\n\nIn this option/example, it seems that the gap is not explicitly modeled, but you get to define a conductance, which I have. I was thinking this could potentially work for my case, since I'm modeling a \"gap\" of zero width (no gap). Looking at the syntax below:\n [ThermalContact]\n  [thermal_contact]\n    type = GapHeatTransfer\n    variable = temperature\n    primary = '101 201'\n    secondary = '100 200'\n    emissivity_primary = 0\n    emissivity_secondary = 0\n    gap_conductance = 1.0e9\n  []\n[]\n\nThe issue I'm running into here/not sure of is the use of \"primary\" and \"secondary\" to define the surfaces. I understand that they'd be there for cases where you actually are modeling a gap, such that the boundaries defined in \"primary\" and \"secondary\" would be the faces on either side of the gap. But when there is NO gap as in my case, how could this work? Would it be okay to define the same boundary for both \"primary\" and \"secondary\"? I did that and the solution converged, but before I start looking into whether the results are reasonable I want to be sure it's doing what I need it to do.\n\nSideSetHeatTransferKernel (https://mooseframework.inl.gov/source/interfacekernels/SideSetHeatTransferKernel.html)\n\nIn this case, the documentation is a little more robust and it seems like it's describing what I want as well. However, I ran into a couple of issues while trying to use it. I implemented:\n[InterfaceKernels]\n  [thermal_contact_conductance]\n    type = SideSetHeatTransferKernel\n    variable = temp\n    neighbor_var = temp\n    boundary = boundary_conductance\n    conductance = 3e-3\n  []\n[]\n\nAnd got an error saying that I couldn't use the same variable for either side of the discontinuity. So I edited my code and made two different variables for the two blocks in contact, but that didn't work either.\nThen I looked at the example, which changed the variable type to \"MONOMIAL\" with a comment that it did so to be able to properly model the discontinuity. But when I tried the same, other things broke (e.g, I got an error that I was trying to use nodal BCs with an \"elemental\" variable. I'm not 100% familiar with the theory behind that).\nSo I guess given my description, which one more accurately captures what I need, and what is the right syntax for implementation?",
          "url": "https://github.com/idaholab/moose/discussions/25215",
          "updatedAt": "2023-09-11T20:10:24Z",
          "publishedAt": "2023-08-15T14:42:56Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "For a conforming mesh (which it sounds like you have), e.g. a mesh where neighboring elements at the interface share the same face, the latter object (the interface kernel) is the way to go. That object does this error check which you are running into:\n  if (_var.number() == _neighbor_var.number() && _var.isNodal())\n    mooseError(\n        \"Variable and neighbor variable are the same, but they are not elemental variables.\");\nThis error check is there to ensure you can properly model a discontinuity in temperature. If you used the same Lagrange variable on both sides of the interface, you would be forcing the temperature value to be continuous there.\n\nSo I edited my code and made two different variables for the two blocks in contact, but that didn't work either.\n\nCan you share what error message you got?\n\nBut when I tried the same, other things broke (e.g, I got an error that I was trying to use nodal BCs with an \"elemental\" variable. I'm not 100% familiar with the theory behind that).\n\nElemental variables like monomials do not have degrees of freedom on nodes, which is where NodalBC objects are applied. It sounds like you are also trying to apply a NodalBC on the interface. I would not do that unless you have a good reason. The kernel you are trying to use should be sufficient on its own to ensure your system of equations have a unique solution.\nIf you do use a discontinuous finite element family you will need to use DGKernels on the interior of your domains/blocks. I don't know if that's what you want. Probably the easiest thing is two lagrange variables defined on either side of the interface.\nIt looks like @zachmprince was the original author of this object, so perhaps he has thoughts as well",
                  "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6732533",
                  "updatedAt": "2023-08-15T17:00:13Z",
                  "publishedAt": "2023-08-15T17:00:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "If you used the same Lagrange variable on both sides of the interface, you would be forcing the temperature value to be continuous there.\n\nI see, that makes sense. And yes, my mesh is conforming. I updated my input file to have two variables for either side of the interface, and added the interface kernel. Here's the error I got:\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nMaterial property 'gap_Tbulk', requested by 'thermal_contact_conductance' is not defined on boundary boundary_conductance\nMaterial property 'gap_h_primary', requested by 'thermal_contact_conductance' is not defined on boundary boundary_conductance\nMaterial property 'gap_h_neighbor', requested by 'thermal_contact_conductance' is not defined on boundary boundary_conductance\nMaterial property 'gap_emissivity_eff_primary', requested by 'thermal_contact_conductance' is not defined on boundary boundary_conductance\nMaterial property 'gap_emissivity_eff_neighbor', requested by 'thermal_contact_conductance' is not defined on boundary boundary_conductance\n\nwhich I don't know why I got, because according to the documentation, only neighbor_var and variable are required parameters. I wanted to just set all the properties to zero, but then there is gap_Tbulk which is supposed to be the bulk temperature of the gap. Except here, there's no gap.",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6732672",
                          "updatedAt": "2023-08-15T17:17:54Z",
                          "publishedAt": "2023-08-15T17:16:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Hmm yea how that kernel has coded up those parameters is a little unfortunate. I assume you only want to model conduction for now, and not radiation and convection? If so, then you can just add:\nTbulk_mat = 0\nh_primary = 0\nh_neighbor = 0\nemissivity_eff_primary = 0\nemissivity_eff_neighbor = 0\n\nto your input file block for that object",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6733193",
                          "updatedAt": "2023-08-15T18:27:11Z",
                          "publishedAt": "2023-08-15T18:27:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "So I tried that and the solution isn't converging at all. Material properties and everything are fine, I'm actually trying to replicate a simulation done in COMSOL. This is the COMSOL thermal contact documentation:\nhttps://doc.comsol.com/5.5/doc/com.comsol.help.heat/heat_ug_ht_features.09.074.html\nAnd I agree with you that SideSetHeatTransferKernel seems closest to what I'm looking for, but the solution doesn't converge.\nOn the other hand, using GapHeatTransfer as I described in the original post, i.e:\n[ThermalContact]\n  [thermal_contact]\n    type = GapHeatTransfer\n    variable = temp\n    primary = 'boundary_conductance'\n    secondary = 'boundary_conductance'\n    gap_conductance = 3e-5\n  []\n[]\n\nconverges. I looked through the values returned and saw that they are somewhat close to what I expect (\"somewhat\" because they're still a little off, I'll know for sure if they are fine after I figure out how to apply a heat source on a thin layer (here, if you can help #25200). Right now I'm testing with an upper layer that's thicker than its supposed to be).\nBut, even though it converges, the fact that the values are the same on both sides of the discontinuity means it isn't modeling the conductance correctly, right?",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6733363",
                          "updatedAt": "2023-08-15T18:49:48Z",
                          "publishedAt": "2023-08-15T18:49:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I would not expect that to work (e.g. provide the correct conduction flux at the interface) as the flux/residual is proportional to the difference between the interface temperatures, and that difference should be zero for a continuous variable.\nFor the interface kernel input, what does your mesh block look like? Does the variable parameter lie on the side of the boundary parameter? That is critical.",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6733484",
                          "updatedAt": "2023-08-15T19:04:39Z",
                          "publishedAt": "2023-08-15T19:04:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Here are some snippets from my input file and I'll try to describe them:\nSo I actually used MOOSE to redefine the blocks:\n  [sample_block]\n    type = SubdomainBoundingBoxGenerator\n    input = sample_mesh\n    block_id = 1\n    top_right = '40 20 0'\n    bottom_left = '-40 -20 -40'\n  []\n  [doping_block]\n    type = SubdomainBoundingBoxGenerator\n    input = sample_block\n    block_id = 2\t\n    top_right = '40 20 0.9'\n    bottom_left = '-40 -20 0'\n  []\n\nSuch that I have two blocks, one on top of the other. Then I define the layer between them also with MOOSE:\n  [conductance_area]\n    type = ParsedGenerateSideset\n\tinput = top_no_pump\n\tcombinatorial_geometry = '(z > 0-1e-8) & (z < 0+1e-8)'\n    new_sideset_name = boundary_conductance\n  []\n\nAnd my kernels:\n  [heat_conduction_doping]\n    type = ADHeatConduction\n    variable = temp_dop\n\tthermal_conductivity = k_dope\n\tblock = doping_material\n  []\n  [heat_conduction_sample]\n    type = ADHeatConduction\n    variable = temp_samp\n\tthermal_conductivity = k_samp\n\tblock = sample_material\n  []\n\nI also have kernels for the time dependent part too. But this is just to show how I applied different kernels for the different variables. I did this same \"separation\" for all the materials, BCs and ICs.",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6733570",
                          "updatedAt": "2023-08-15T19:13:37Z",
                          "publishedAt": "2023-08-15T19:12:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Do you have a MOOSE-only input you can share?",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6734195",
                          "updatedAt": "2023-08-15T20:37:33Z",
                          "publishedAt": "2023-08-15T20:37:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Sure, can I email it to you?",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6741195",
                          "updatedAt": "2023-08-16T14:00:09Z",
                          "publishedAt": "2023-08-16T14:00:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It's easier for me if you just share it here. Then I don't have to scp things",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6742363",
                          "updatedAt": "2023-08-16T15:45:05Z",
                          "publishedAt": "2023-08-16T15:45:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I attached them both (using SideSetHeatTransfer and GapHeatTransfer) + the mesh file they both use\n[files]\nthe thin layer is thicker than its supposed to be since I haven't figured out the ThinLayerHeatTransfer thing, and for some reason I noticed the Neumann condition (heat source) I applied seems to be cooling instead of heating (probably a sign or something missing somewhere) but other than that everything is as it should. thanks for your help",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6742516",
                          "updatedAt": "2023-08-19T07:37:49Z",
                          "publishedAt": "2023-08-16T16:00:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hi @lindsayad, I figured out a workaround that didn't involve using different variables. I modeled the thin layer as an unconnected mesh (i.e actually modeled a gap, see image). I then used GapHeatTransfer, since, if you directly specify the conductance, it converts that to Neumann conditions on each face. So the actual gap distance in my mesh is irrelevant. I was able to replicate the results just fine with minimal error (which I assume is due to mesh refinement, and/or the poor aspect ratio of the elements in the thin layer).\nIt would be nice if GapHeatTransfer could be extended/edited for a case like mine, but this workaround will do for now. It would also be nice if ThinLayerHeatTransfer could include an option to apply a surface heat source (right now only the option for a volumetric source exists). Thanks again for your help!!",
                          "url": "https://github.com/idaholab/moose/discussions/25215#discussioncomment-6766845",
                          "updatedAt": "2023-08-19T07:36:08Z",
                          "publishedAt": "2023-08-19T07:33:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Porous Flow: Simulation injection of CO2 into a pipe",
          "author": {
            "login": "Chengbin124"
          },
          "bodyText": "Hi,\nI use Porous Flow to simulate the injection of CO2 into a pipe filled with water. The CO2 is injected from top and water is forced out from bottom of the pipe.  I use sgas and pwater for the two phase model. For the boundary condition(where I suspect something is wrong), I use PorousFlowSink for injection, and PorousFlowOutflowBC for both water and CO2 outflow. But my results shows that there is leaky from side wall not from the bottom. Could somebody help me with it? Here are my input file and screenshot of my result.\n\nleaky.txt\nOr\n[Mesh]\n  [annular]\n    type = AnnularMeshGenerator\n    nr = 10\n    rmin = 0\n    rmax = 0.15\n    growth_r = 1.4\n    nt = 10\n    dmin = 0\n    dmax = 360\n  []\n  [make3D]\n    type = MeshExtruderGenerator\n    extrusion_vector = '0 0 30'\n    num_layers = 4\n    bottom_sideset = 'outflow_area'\n    top_sideset = 'injection_area'\n    input = annular\n  []\n  [shift_down]\n    type = TransformGenerator\n    transform = TRANSLATE\n    vector_value = '100 0 -3000'\n    input = make3D\n    show_info = true\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n  gravity = '0 0 -9.81'\n[]\n\n[Variables]\n  [pwater]\n  []\n  [sgas]\n    initial_condition = 1e-6\n  []\n[]\n\n[AuxVariables]\n  [massfrac_ph0_sp0]\n    initial_condition = 1 # all H20 in phase=0\n  []\n  [massfrac_ph1_sp0]\n    initial_condition = 0 # no H2O in phase=1\n  []\n  [pgas]\n    family = MONOMIAL\n    order = FIRST\n  []\n  [swater]\n    family = MONOMIAL\n    order = FIRST\n  []\n  [fluxes_water_out]\n  []\n  [fluxes_co2_out]\n  []\n[]\n\n[Kernels]\n  [mass_water_dot]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 0\n    variable = pwater\n  []\n  [flux_water]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 0\n    use_displaced_mesh = false\n    variable = pwater\n  []\n  [mass_co2_dot]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 1\n    variable = sgas\n  []\n  [flux_co2]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 1\n    use_displaced_mesh = false\n    variable = sgas\n  []\n[]\n\n[AuxKernels]\n  [pgas]\n    type = PorousFlowPropertyAux\n    property = pressure\n    phase = 1\n    variable = pgas\n  []\n  [swater]\n    type = PorousFlowPropertyAux\n    property = saturation\n    phase = 0\n    variable = swater\n  []\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pwater sgas'\n    number_fluid_phases = 2\n    number_fluid_components = 2\n  []\n  [pc]\n    type = PorousFlowCapillaryPressureConst\n    pc = 0\n  []\n[]\n\n[FluidProperties]\n  [water]\n    type = SimpleFluidProperties\n    bulk_modulus = 2.27e14\n    density0 = 1045\n    viscosity = 2.58e-4\n    cv = 4149.0\n    cp = 4149.0\n    porepressure_coefficient = 0.0\n    thermal_expansion = 0\n  []\n  [co2]\n    type = SimpleFluidProperties\n    bulk_modulus = 2.27e14\n    density0 = 479\n    viscosity = 0.0393e-3\n    cv = 2920.5\n    cp = 2920.5\n    porepressure_coefficient = 0.0\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = 313.15\n  []\n  [ppss]\n    type = PorousFlow2PhasePS\n    phase0_porepressure = pwater\n    phase1_saturation = sgas\n    capillary_pressure = pc\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n    mass_fraction_vars = 'massfrac_ph0_sp0 massfrac_ph1_sp0'\n  []\n  [water]\n    type = PorousFlowSingleComponentFluid\n    fp = water\n    phase = 0\n  []\n  [gas]\n    type = PorousFlowSingleComponentFluid\n    fp = co2\n    phase = 1\n  []\n  [porosity_reservoir]\n    type = PorousFlowPorosityConst\n    porosity = 0.15\n  []\n  [permeability_reservoir]\n    type = PorousFlowPermeabilityConst\n    permeability = '1e-12 0 0  0 1e-12 0  0 0 1e-12'\n  []\n  [relperm_liquid]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 1\n    phase = 0\n    s_res = 0\n    sum_s_res = 0\n  []\n  [relperm_gas]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 1\n    phase = 1\n    s_res = 0\n    sum_s_res = 0\n  []\n[]\n\n[ICs]\n  [./pwater_ic]\n    type = FunctionIC\n    variable = pwater\n    function = \"3.086e7 + 10251.45 * (z + 3000)\"\n  []\n[]\n\n[BCs]\n  [co2_injection]\n    type = PorousFlowSink\n    boundary = injection_area\n    variable = sgas\n    fluid_phase = 1\n    flux_function = 'min(t/100.0,1)*(-125.4848306867)'\n    save_in = fluxes_co2_out\n  []\n  [water_outflow]\n    type = PorousFlowOutflowBC\n    boundary = 'outflow_area' \n    mass_fraction_component = 0\n    variable = pwater\n    save_in = fluxes_water_out\n  []\n  [gas_outflow]\n    type = PorousFlowOutflowBC\n    boundary = 'outflow_area'\n    mass_fraction_component = 1\n    variable = sgas\n    save_in = fluxes_co2_out\n  []\n[]\n\n[Postprocessors]\n  [fluxes_out_top]\n    type = NodalSum\n    boundary = injection_area\n    variable = fluxes_co2_out\n  []\n  [fluxes_out_wall]\n    type = NodalSum\n    boundary = rmax\n    variable = fluxes_co2_out\n  []\n  [fluxes_out_wall_water]\n    type = NodalSum\n    boundary = rmax\n    variable = fluxes_water_out\n  []\n  [fluxes_out_bot]\n    type = NodalSum\n    boundary = outflow_area\n    variable = fluxes_co2_out\n  []\n  [p_bh_top]\n    type = PointValue\n    variable = 'pwater'\n    point = '100 0 -2970.1'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n  [p_bh_bot]\n    type = PointValue\n    variable = 'pwater'\n    point = '100 0 -2999.9'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n[]\n\n[VectorPostprocessors]\n  [ptsuss]\n    type = LineValueSampler\n    use_displaced_mesh = false\n    start_point = '100 0 -2970.1'\n    end_point = '100 0 -2999.9'\n    sort_by = z\n    num_points = 1000\n    outputs = csv\n    variable = 'pwater sgas swater'\n  []\n[]\n\n[Preconditioning]\n  active = 'smp'\n  [smp]\n    type = SMP\n    full = true\n    #petsc_options = '-snes_converged_reason -ksp_diagonal_scale -ksp_diagonal_scale_fix -ksp_gmres_modifiedgramschmidt -snes_linesearch_monitor'\n    petsc_options_iname = '-ksp_type -pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap -snes_atol -snes_rtol -snes_max_it'\n    petsc_options_value = 'gmres      asm      lu           NONZERO                   2               1E2       1E-5        500'\n  []\n  [mumps]\n    type = SMP\n    full = true\n    petsc_options = '-snes_converged_reason -ksp_diagonal_scale -ksp_diagonal_scale_fix -ksp_gmres_modifiedgramschmidt -snes_linesearch_monitor'\n    petsc_options_iname = '-ksp_type -pc_type -pc_factor_mat_solver_package -pc_factor_shift_type -snes_rtol -snes_atol -snes_max_it'\n    petsc_options_value = 'gmres      lu       mumps                         NONZERO               1E-5       1E2       50'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  end_time = 1.5768e8\n  #dtmax = 1e6\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    growth_factor = 1.1\n  []\n[]\n\n[Outputs]\n  print_linear_residuals = false\n  sync_times = '100 3000 2.592E6 1.5768E8'\n  perf_graph = true\n  exodus = true\n  [csv]\n    type = CSV\n    sync_only = true\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/25436",
          "updatedAt": "2023-09-11T19:20:20Z",
          "publishedAt": "2023-09-10T20:00:11Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I think it's just a post processing issue. You are saving the CO2 in through the top into the same aux variable that you are saving the outflow. When you sum along the wall, the nodes at the top on the perimeter have lots of CO2 in, so your flow through the wall is really mainly flow through the top (hopefully that makes sense). You could make another aux variable for flow in and use that in the inflow BC to keep it seperate.\nAlso, your absolute tolerance is way too loose - this will probably never actually need to take any non-linear iterations as the initial residual is likely less than your absolute tolerance. Something like 1e-6 would be more suitable.",
                  "url": "https://github.com/idaholab/moose/discussions/25436#discussioncomment-6965998",
                  "updatedAt": "2023-09-11T10:18:48Z",
                  "publishedAt": "2023-09-11T10:18:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Chengbin124"
                          },
                          "bodyText": "Hi, thanks for your suggestion. It works. But when I change the tolerance to 1e-6, the program takes too long to run. I tried to use parallel, but I failed. I use make -j16, and ./xxx-opt -i xxx.i -j 16. But when I check, it still run with 1 process.\n\nI wonder if you could show me how to run parallelly. Thanks so much.",
                          "url": "https://github.com/idaholab/moose/discussions/25436#discussioncomment-6969742",
                          "updatedAt": "2023-09-11T16:18:48Z",
                          "publishedAt": "2023-09-11T16:18:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I use make -j16, and ./xxx-opt -i xxx.i -j 16\n\nshould be:\nmake -j16\nmpiexec -n 16  ./xxx-opt -i xxx.i",
                          "url": "https://github.com/idaholab/moose/discussions/25436#discussioncomment-6970343",
                          "updatedAt": "2023-09-11T17:24:31Z",
                          "publishedAt": "2023-09-11T17:24:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Chengbin124"
                          },
                          "bodyText": "Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/25436#discussioncomment-6971366",
                          "updatedAt": "2023-09-11T19:20:20Z",
                          "publishedAt": "2023-09-11T19:20:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Chengbin124"
                  },
                  "bodyText": "Thank you for your help. That solves my problem.",
                  "url": "https://github.com/idaholab/moose/discussions/25436#discussioncomment-6967157",
                  "updatedAt": "2023-09-11T12:30:49Z",
                  "publishedAt": "2023-09-11T12:30:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Initial conditions for use with the Jacobian debugger",
          "author": {
            "login": "Sina-av"
          },
          "bodyText": "Hi all!\nI want to check the Jacobian of a Moose app that I am writing with the help of the Jacobian debugger file, analyze_jacobian.py. For the simulations, I am using the following variables:\n[Variables]\n  [disp_x] []\n  [disp_y] []\n  [disp_z] []\n  [NLvar] []\n[]\n\nWhere disp_x, disp_y, and disp_z are the displacement degrees of freedom, and NLvar is just another variable governed by a PDE related to plastic deformation of the body.\nBased on the webpage for the Jacobian debugger, it is recommended to use random initial conditions (ICs) to ensure that the values and gradients of the variables are non-zero.\nIn line with the use of ICs for the Jacobian debugger, I have some questions:\n\n\nTo clarify, is the Jacobian debugger only used for the IC and does not advance in time? Is there a way to run the Jacobian debugger for future time steps of a simulation?\n\n\nIf we can only run the Jacobian debugger for ICs of a system, I was wondering if there is a way to ensure plasticity in the model. In my Jacobian, I have derivatives of plastic deformation with respect to total deformation, and I want to check that as well. So, I was wondering if there is a way to ensure that, based on the given ICs, I will have plasticity in the system.\n\n\nThank you so much.",
          "url": "https://github.com/idaholab/moose/discussions/25394",
          "updatedAt": "2023-09-11T17:51:59Z",
          "publishedAt": "2023-09-04T17:07:49Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "I myself do not use the analyze_jacobian.py script. I typically reduce my mesh size to be quite small, and then I run my simulation as normal, but with the PETSc command line options -snes_test_jacobian -snes_test_jacobian_view (these options are at the core of the analyze_jacobian.py script). With these options you can run your simulation for arbitrarily many time steps and so you will certainly test things like non-zero gradients.\nI usually pair this with DOFMap output to help ascertain what variable's Jacobian entries are bad",
                  "url": "https://github.com/idaholab/moose/discussions/25394#discussioncomment-6906863",
                  "updatedAt": "2023-09-04T17:39:47Z",
                  "publishedAt": "2023-09-04T17:39:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Sina-av"
                          },
                          "bodyText": "Great, thank you so much. This exactly did what I wanted.",
                          "url": "https://github.com/idaholab/moose/discussions/25394#discussioncomment-6970571",
                          "updatedAt": "2023-09-11T17:51:57Z",
                          "publishedAt": "2023-09-11T17:51:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "no module named 'mooseutils'",
          "author": {
            "login": "wangzhaohao"
          },
          "bodyText": "i want to use the parameter study and got the results. But when i used Python to see the Statistics and Distribution, there report\nno module named 'mooseutils'\n\nwhere to find it and how to put it in the path?\nThanks for you advice!",
          "url": "https://github.com/idaholab/moose/discussions/25424",
          "updatedAt": "2023-09-11T16:45:02Z",
          "publishedAt": "2023-09-07T15:32:51Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@milljm will know\nDid you try:\n\nadding moose/python to your PYTHONPATH\ninstalling moose-tools through mamba?",
                  "url": "https://github.com/idaholab/moose/discussions/25424#discussioncomment-6939176",
                  "updatedAt": "2023-09-07T16:00:17Z",
                  "publishedAt": "2023-09-07T16:00:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "i will try first. i have install moose tools by mamba, thanks",
                          "url": "https://github.com/idaholab/moose/discussions/25424#discussioncomment-6939387",
                          "updatedAt": "2023-09-07T16:22:02Z",
                          "publishedAt": "2023-09-07T16:22:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "i have sloved it.",
                          "url": "https://github.com/idaholab/moose/discussions/25424#discussioncomment-6942690",
                          "updatedAt": "2023-09-08T00:12:47Z",
                          "publishedAt": "2023-09-08T00:12:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Responding for the sake of there being an answer without detail, if someone searches for this error, and lands here.\nmooseutils is a python module within the MOOSE repository, not relating to our Conda packages.\nmoose/python/mooseutils\n\nFor the error received one would have had to have a custom PYTHONPATH, or MOOSE_DIR being set (incorrectly, or incomplete).",
                          "url": "https://github.com/idaholab/moose/discussions/25424#discussioncomment-6970006",
                          "updatedAt": "2023-09-11T16:45:02Z",
                          "publishedAt": "2023-09-11T16:45:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error during compilation after update",
          "author": {
            "login": "Nabiel-Abuyazid"
          },
          "bodyText": "Hello, I encountered this error after I updated moose and conda\n(moose) Nabiels-MacBook-Pro:geochemistry nabzforcemac$ make -j 8\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/executioners_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/interfacekernels_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/executors_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/preconditioners_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/variables_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/samplers_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/timesteppers_Unity.C...\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/actions_Unity.C...\nIn file included from /Users/nabzforcemac/projects/moose/framework/build/unity_src/executioners_Unity.C:14:\n/Users/nabzforcemac/projects/moose/framework/src/executioners/Transient.C:739:27: error: no member named 'l2_norm_diff' in 'libMesh::NumericVector<double>'\n  return current_solution.l2_norm_diff(old_solution) / current_solution.l2_norm();\n         ~~~~~~~~~~~~~~~~ ^\n1 error generated.\nCompiling C++ (in opt mode) /Users/nabzforcemac/projects/moose/framework/build/unity_src/positions_Unity.C...\nmake: *** [/Users/nabzforcemac/projects/moose/framework/build.mk:151: /Users/nabzforcemac/projects/moose/framework/build/unity_src/executioners_Unity.aarch64-apple-darwin20.0.0.opt.lo] Error 1\nmake: *** Waiting for unfinished jobs....\n(moose) Nabiels-MacBook-Pro:geochemistry nabzforcemac$",
          "url": "https://github.com/idaholab/moose/discussions/25437",
          "updatedAt": "2023-09-10T21:05:27Z",
          "publishedAt": "2023-09-10T20:31:34Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis was added to libmesh recently.\nThis tells us that your moose-libmesh package is not up to date. The mamba update must have failed.\nPlease try to force the mamba update following the instructions here:\n#25358\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25437#discussioncomment-6961839",
                  "updatedAt": "2023-09-10T21:05:27Z",
                  "publishedAt": "2023-09-10T21:05:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE Language Support meet RuntimeError on vscode",
          "author": {
            "login": "znanshan"
          },
          "bodyText": "I encountered the following problem when using MOOSE Language Support on VScode:\n(my system:manjaro)\nRuntimeError: abort(TypeError: Failed to parse URL from /home/zns/.vscode/extensions/danielschwen.moose-language-support-0.6.0/server/node_modules/web-tree-sitter/tree-sitter.wasm). Build with -s ASSERTIONS=1 for more info.\n    at process.we (/home/zns/.vscode/extensions/danielschwen.moose-language-support-0.6.0/server/node_modules/web-tree-sitter/tree-sitter.js:1:11339)\n    at process.emit (node:events:513:28)\n    at emit (node:internal/process/promises:149:20)\n    at processPromiseRejections (node:internal/process/promises:283:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:96:32)\n\nNode.js v18.15.0\n[Error - 15:58:47] Connection to server got closed. Server will not be restarted.\n\nSo, how to deal with it?",
          "url": "https://github.com/idaholab/moose/discussions/25435",
          "updatedAt": "2023-09-10T01:25:18Z",
          "publishedAt": "2023-09-09T08:14:35Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "For now, go in extensions, then right click on the MOOSE language support and install the previous version 0.5.1\nWe'll investigate and get back to you",
                  "url": "https://github.com/idaholab/moose/discussions/25435#discussioncomment-6955759",
                  "updatedAt": "2023-09-09T14:32:34Z",
                  "publishedAt": "2023-09-09T14:32:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ramzy1990"
                  },
                  "bodyText": "Using the extension version 0.6.0 (or the downgraded extension 0.5.1) showed the same problem on vscode 1.82. Downgrading vscode to 1.81 solved the problem for me.\nI also noticed the extension is updated to version 0.6.1, but this still fails with vscode 1.82:\nRuntimeError: abort(TypeError: Failed to parse URL from /home/ramzy/.vscode-server/extensions/danielschwen.moose-language-support-0.6.1/server/node_modules/web-tree-sitter/tree-sitter.wasm). Build with -s ASSERTIONS=1 for more info.\n    at process.we (/home/ramzy/.vscode-server/extensions/danielschwen.moose-language-support-0.6.1/server/node_modules/web-tree-sitter/tree-sitter.js:1:11339)\n    at process.emit (node:events:513:28)\n    at emit (node:internal/process/promises:149:20)\n    at processPromiseRejections (node:internal/process/promises:283:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:96:32)\n\nNode.js v18.15.0\n[Error - 3:47:37 PM] Connection to server got closed. Server will not be restarted.",
                  "url": "https://github.com/idaholab/moose/discussions/25435#discussioncomment-6956991",
                  "updatedAt": "2023-09-09T19:52:15Z",
                  "publishedAt": "2023-09-09T19:46:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ramzy1990"
                  },
                  "bodyText": "I think it has to be with the Node.js pumping from 16 to 18 in the latest vscode 1.82. They specifically speak about the extensions and how this could affect some of them.",
                  "url": "https://github.com/idaholab/moose/discussions/25435#discussioncomment-6957026",
                  "updatedAt": "2023-09-09T19:56:37Z",
                  "publishedAt": "2023-09-09T19:55:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "znanshan"
                  },
                  "bodyText": "I noticed that the MOOSE Language Support has received an update just now, and I found it quite helpful. Here are the release notes for version 0.6.2:\nRelease Notes\n0.6.2\nUpdate tree-sitter-hit WASM for VSCode 1.82\n\nThis update is helpful and the problem has been solved.\nYour team's efficiency is really high, and I'm very grateful.",
                  "url": "https://github.com/idaholab/moose/discussions/25435#discussioncomment-6957844",
                  "updatedAt": "2023-09-10T01:20:21Z",
                  "publishedAt": "2023-09-10T01:20:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Stress free temperature through input file for ComputeMeanThermalExpansionFunctionEigenstrain",
          "author": {
            "login": "deepakbiitk"
          },
          "bodyText": "Dear MOOSE Users,\nI have a position dependent stress free temperature. I created aux variable and userobject for input and used ComputeMeanThermalExpansionFunctionEigenstrain. However, this approach gives me an error.\n\"Primary job  terminated normally, but 1 process returned\na non-zero exit code. Per user-direction, the job has been aborted.\n\"\nThe same feature works if I use ComputeThermalExpansionEigenstrain.\nI appreciate any suggestions.\nThanks,\nDeepak Behera",
          "url": "https://github.com/idaholab/moose/discussions/25431",
          "updatedAt": "2023-09-08T18:05:31Z",
          "publishedAt": "2023-09-08T16:03:27Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this the entire error message? There should be more than that\nif not can you recompile in debug mode and get us a backtrace\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25431#discussioncomment-6950889",
                  "updatedAt": "2023-09-08T17:45:49Z",
                  "publishedAt": "2023-09-08T17:45:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "deepakbiitk"
                  },
                  "bodyText": "Hi Guillaume,\nI ran on a single processor, it gives me segmentation fault.\nDeepak",
                  "url": "https://github.com/idaholab/moose/discussions/25431#discussioncomment-6951017",
                  "updatedAt": "2023-09-08T18:01:57Z",
                  "publishedAt": "2023-09-08T18:01:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "seg fault is fairly easy to find with a debugger.\nsee this page for instructions:\nhttps://mooseframework.inl.gov/application_development/debugging.html",
                          "url": "https://github.com/idaholab/moose/discussions/25431#discussioncomment-6951049",
                          "updatedAt": "2023-09-08T18:05:32Z",
                          "publishedAt": "2023-09-08T18:05:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}