{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMS0xNlQxMTowMDozMy0wNjowMM4AWWEx"
    },
    "edges": [
      {
        "node": {
          "title": "permission for external user on HPC",
          "author": {
            "login": "mcacace"
          },
          "bodyText": "Dear all,\nI am facing some issues while trying to open my moose installation to other users on a HPC cluster (each having their own working directory). My (bad, I know ...) idea is to let them building our moose-based app without (I know it is not the right way, but ... ) requiring them to go through the libmesh installation (I also provide my own petsc installation to them).\nSo, now the issue. All works fine if the other users are linking to my installation and \"making\" the app without loading any external module available in the framework. However, whenever they try to link any additional module (via the makefile input of the app) they are getting errors (i.e. permission denied - see below).\nIs there any way I can free all dependencies to any other user? And, out of curiosity, why is it working if no module are loaded?\nThanks for any help,\nmauro\nThis is the template of the error they receive --> the user is running inside (/home/bloech) while linking to the framework compiled inside (/home/cacace).\nCreating Unity /storage/vast-gfz-hpc-01/home/bloech/projects/golem/build/unity_src/userobjects_Unity.C\n/home/cacace/projects/moose_petsc_3_20_0/modules/module_loader/src/ModulesApp.C:504:1: f**atal error: opening dependency file /home/cacace/projects/moose_petsc_3_20_0/modules/module_loader/src/ModulesApp_with_fp_ray_rdg_ht_ns.x86_64-pc-linux-gnu.opt.lo.d: Permission denied**\n  504 |",
          "url": "https://github.com/idaholab/moose/discussions/26024",
          "updatedAt": "2023-11-17T18:52:13Z",
          "publishedAt": "2023-11-10T16:59:05Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat are the permissions for\n/home/cacace/projects/moose_petsc_3_20_0/modules/module_loader/src/ModulesApp_with_fp_ray_rdg_ht_ns.x86_64-pc-linux-gnu.opt.lo.d\n\nls -l will report on those.\nand could you just set (recursively) open permissions (read at least) for the whole folder?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26024#discussioncomment-7589806",
                  "updatedAt": "2023-11-17T14:28:05Z",
                  "publishedAt": "2023-11-16T15:54:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mcacace"
                          },
                          "bodyText": "Thanks I will give it a try and report back.\nMauro",
                          "url": "https://github.com/idaholab/moose/discussions/26024#discussioncomment-7599207",
                          "updatedAt": "2023-11-17T13:15:15Z",
                          "publishedAt": "2023-11-17T13:15:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "mcacace"
                  },
                  "bodyText": "After opening some additional permissions it worked. Thanks!",
                  "url": "https://github.com/idaholab/moose/discussions/26024#discussioncomment-7602379",
                  "updatedAt": "2023-11-17T18:52:14Z",
                  "publishedAt": "2023-11-17T18:52:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A question about reading ABAQUS INP",
          "author": {
            "login": "DanielChou0916"
          },
          "bodyText": "I'm a beginner of  MOOSE, and I'm trying to practice read the mesh from ABAQUS inp in MOOSE.\nIn the directory \"\\projects\\moose\\test\\tests\\mesh\\abaqus_input\"\nI saw the files\n\ntestcube_elem_id_in.inp\ntestcube_elem_id.i\ntestcube_elem_id_in.e\n\nI was wondering does this mean we can use ''testcube_elem_id.i'' to generate a mesh file ''testcube_elem_id_in.e'' from \"testcube_elem_id_in.inp\"?\nIf yes, how do we do that?\nThe testcube_elem_id.i only has codes as follows:\n[Mesh]\n  type = FileMesh\n  file = testcube_elem_id_in.inp\n[]\n\nWhen I create a new application named 'abaqus_mesh_conversion', and copy \"testcube_elem_id.i\" and \"testcube_elem_id_in.inp\" into a problems folder, then execute:\n~/projects/abaqus_mesh_conversion/abaqus_mesh_conversion-opt -i testcube_elem_id.i\nIt leads to the error message:\n\n*** ERROR ***\n\"Executioner\" does not exist, make sure your input file contains an [Executioner] block or your simulation adds an Executioner through an Action.\n\n\nStack frames: 13\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, std::__cxx11::basic_string<char, std::char_traits, std::allocator >)\n2: void mooseError<char const (&) [146]>(char const (&) [146])\n3: CheckIntegrityAction::act()\n4: Action::timedAct()\n5: ActionWarehouse::executeActionsWithAction(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)\n6: ActionWarehouse::executeAllActions()\n7: MooseApp::runInputFile()\n8: MooseApp::run()\n9: main\n10: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f26b0548d90]\n11: __libc_start_main\n12: /home/fem/projects/abaqus_mesh_conversion/abaqus_mesh_conversion-opt(+0x33ef) [0x556bbcaeb3ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nI believe that they might not work like this, but I have no idea about how they work correctly.\nCould anyone give me some hints?\nAppreciate for patience :))",
          "url": "https://github.com/idaholab/moose/discussions/26089",
          "updatedAt": "2023-11-17T15:00:51Z",
          "publishedAt": "2023-11-17T12:39:18Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll have to add --mesh-only (on the command line) to run a meshing-only simulation\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26089#discussioncomment-7599957",
                  "updatedAt": "2023-11-17T14:27:11Z",
                  "publishedAt": "2023-11-17T14:27:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so\n~/projects/abaqus_mesh_conversion/abaqus_mesh_conversion-opt -i testcube_elem_id.i --mesh-only",
                          "url": "https://github.com/idaholab/moose/discussions/26089#discussioncomment-7599962",
                          "updatedAt": "2023-11-17T14:27:32Z",
                          "publishedAt": "2023-11-17T14:27:31Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "DanielChou0916"
                          },
                          "bodyText": "Sincerely appreciate for your indication :)))))\nIt works well now",
                          "url": "https://github.com/idaholab/moose/discussions/26089#discussioncomment-7600343",
                          "updatedAt": "2023-11-17T15:00:51Z",
                          "publishedAt": "2023-11-17T15:00:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MPI Error in MOOSE",
          "author": {
            "login": "dewan1988"
          },
          "bodyText": "Dear moose experts\nCurrently, I refined my mesh with ICEM CFD and submitted my job for run but unfortunately it is showing the following MPI related error. I don't know how can I solve this error. Before refinement I didn't get any error during running the job. Could you please help me regarding this issue.\n\nBest regards\nDewan",
          "url": "https://github.com/idaholab/moose/discussions/26064",
          "updatedAt": "2023-11-17T01:44:47Z",
          "publishedAt": "2023-11-14T21:34:52Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Can you try running in serial or is the problem too large? For debugging in general I would recommend looking at https://mooseframework.inl.gov/application_development/debugging.html With a segmentation fault, there's not much of an error message so I have no idea what the problem is",
                  "url": "https://github.com/idaholab/moose/discussions/26064#discussioncomment-7579318",
                  "updatedAt": "2023-11-15T16:53:56Z",
                  "publishedAt": "2023-11-15T16:53:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Signal 9 is a sigkill, so it s likely you ran out of memory.\nIf it is that (and not some MPI error)\nTry using less ranks first. Then to be scalable in memory you will need to distribute the mesh (--distributed-mesh on the command line for example)\nIf it is truly a MPI error, then you will have to look at using a different MPI distribution most likely.\nWhat does mpicc --version and which mpirun return ?",
                          "url": "https://github.com/idaholab/moose/discussions/26064#discussioncomment-7590163",
                          "updatedAt": "2023-11-16T16:27:35Z",
                          "publishedAt": "2023-11-16T16:27:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewan1988"
                          },
                          "bodyText": "Dear GiudGiud and lindsayad\nThank you for your kind reply and suggestions. Currently, I am using 256 cores and 4 nodes for 400 k elements. Earlier before refining the mesh, I have used only 1 node and 64 cores, then it was not showing any mpi errors. Also, it is not possible to use more than 256 nodes at a time in my hpc. As per your suggestion I splited  the mesh in 256 chunk and then aadded --distributed-mesh on the command line and ran ran my job but still it is showing the same mpi errors.\nThe mpicc --version:\n\nand mpirun: 4.0.2",
                          "url": "https://github.com/idaholab/moose/discussions/26064#discussioncomment-7593955",
                          "updatedAt": "2023-11-17T01:07:07Z",
                          "publishedAt": "2023-11-17T01:07:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewan1988"
                          },
                          "bodyText": "Now, it is showing different ranked error.",
                          "url": "https://github.com/idaholab/moose/discussions/26064#discussioncomment-7593972",
                          "updatedAt": "2023-11-17T01:08:39Z",
                          "publishedAt": "2023-11-17T01:08:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You are using our conda MPI on your cluster?\nThis isn't going to work very well. The MPI distribution has to be built specifically for your architecture, notably the network interconnect\nYou should remove (deactivate) the conda environment and follow HPC install instructions\nCreate another moose install to keep the old one functional while you create the new one",
                          "url": "https://github.com/idaholab/moose/discussions/26064#discussioncomment-7594139",
                          "updatedAt": "2023-11-17T01:44:48Z",
                          "publishedAt": "2023-11-17T01:44:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow Unexpected Mass Balance Results",
          "author": {
            "login": "jrpatterson79"
          },
          "bodyText": "Hello MOOSE Community,\nI'm de-bugging a model that simulates fluid injection through a 2D fracture embedded in a 3D volume, using a conforming mesh built in GMSH and converted to EXODUS format using MOOSE.\nI'm using PorousFlowSquarePulsePointSource block restricted to the fracture subdomain to simulate constant fluid injection at the center of the fracture. I've prescribed a large permeability contrast between the fracture and rock subdomains such that fluids should move along the fracture, with minimal to no fluid exchange into the surrounding rock domain.\nGiven this, I would expect the mass balance block restricted to the fracture subdomain should be abs(fluid_in - fluid_out) = inj_rate * dt\nHowever, the fracture mass balance is a little more than an order-of-magnitude less than injected mass per time step. In contrast, the block restricted mass balance in the rock subdomain is equivalent to the injected mass per time step. This makes me concerned that fluid is not being injected into the fracture subdomain, but instead into the rock.\nIs this expected behavior / something that I should not be concerned with? Is this the result of an error in meshing / input file on my part?\nI have a MWE at https://github.com/jrpatterson79/testing.git\nThanks in advance for any insights y'all might have\nJPatterson",
          "url": "https://github.com/idaholab/moose/discussions/26059",
          "updatedAt": "2023-11-17T00:30:19Z",
          "publishedAt": "2023-11-14T18:12:13Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "@1runer",
                  "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7578837",
                  "updatedAt": "2023-11-15T16:10:01Z",
                  "publishedAt": "2023-11-15T16:10:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "1runer"
                          },
                          "bodyText": "I hope @cpgr and @WilkAndy have a better overview about this.",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7579455",
                          "updatedAt": "2023-11-15T17:06:54Z",
                          "publishedAt": "2023-11-15T17:06:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For rock_mass_blnc you could use a ParsedPostprocessor. Using a function is a little hacky as the dependency resolution wont be done properly.\nDoes this imbalance remain with finer discretizations?",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7580112",
                          "updatedAt": "2023-11-15T18:21:17Z",
                          "publishedAt": "2023-11-15T18:21:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I suspect that the issue is discretisation and the dirac point at a node shared by the fracture and rock matrix means that the injected fluid is already in the matrix. If you make the rock porosity vanishingly small then it probably reduces this affect.",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7584187",
                          "updatedAt": "2023-11-16T05:29:48Z",
                          "publishedAt": "2023-11-16T05:29:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jrpatterson79"
                          },
                          "bodyText": "@GiudGiud thank you for pointing out the ParsedPostprocessor, I was not aware of that. I've made that switch in my input file. To answer your question, this behavior has been consistent moving from a coarse mesh to the currently more refined mesh. Refining the mesh even produces a minimal effect.\n@cpgr Reducing the porosity does diminish the effect, which makes sense. I've spent sometime re-reading the flow through fractured media page, and I'm wondering if there is an effect of the element shape / type. GMSH produces TRI3 elements for the 2D fracture surface. In contrast, the 3D example (coarse_3D.i) shows that the 2D fracture surfaces are TRISHELL3 elements, which appears to be an element type generated by CUBIT. Could this be contributing to the results I'm seeing? Is GMSH capable of generating this type of element? I have not found any helpful answers through internet searches or reading through the GMSH user manual",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7590692",
                          "updatedAt": "2023-11-16T17:22:20Z",
                          "publishedAt": "2023-11-16T17:21:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I use TRI3 for 2D fracture elements, that is not problem.",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7592402",
                          "updatedAt": "2023-11-16T20:42:57Z",
                          "publishedAt": "2023-11-16T20:42:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "Does your dirac kernel produce an error that the point is not found?  Also, you are restricting the dirac kernel to the fracture block so the input should limited to the 2D fracture element and should not be smeared out over the 3D to the matrix element.  Can you check that?  You can check with vector tags to see if the dirac kernel is injecting in the matrix, use something like this:\n[Problem]\n  extra_tag_vectors = 'flux_tag'\n[]\n\n[AuxVariables]\n  [flux_tag]\n    order = FIRST\n    family = LAGRANGE\n  []\n[AuxKernels]\n  [flux]\n    type = TagVectorAux\n    variable = flux_tag\n    v = pp\n    vector_tag = flux_tag\n    execute_on = timestep_end\n  []\n[]\n\n# Hydraulic injection kernel\n[DiracKernels]\n  [mass_flux_source]\n    type = PorousFlowSquarePulsePointSource\n    mass_flux = ${injection_rate}\n    point = '0 0 175'\n    variable = pp \n    block = 'fracture'\n    point_not_found_behavior = WARNING\n    extra_vector_tags = 'flux_tag'\n  []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7592391",
                  "updatedAt": "2023-11-16T20:41:02Z",
                  "publishedAt": "2023-11-16T20:41:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jrpatterson79"
                          },
                          "bodyText": "@lynnmunday\nThe Dirac kernel gives a point not found warning regardless of which block I assign it to or leave it unrestricted. Looking at nodelist 1 in the exodus mesh file, the point '0, 0, 175' exists, so it's not clear to me why that error is produced.\nAdding the TagVectorAux and looking at the exodus results file, the flux_tag = -inj_rate in the fracture subdomain at the point '0, 0, 175'",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7593123",
                          "updatedAt": "2023-11-16T22:24:57Z",
                          "publishedAt": "2023-11-16T22:24:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "One thing that struck me is that the mass of water in the fracture is reported as ~ 3,600 kg, but the fracture looks like a circular disk with a radius of 45 m and aperture of 3e-4 m, so volume ~ 2 m3, which should only contain ~2,000 kg of water... unless I'm missing something?",
                  "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7593171",
                  "updatedAt": "2023-11-16T22:33:07Z",
                  "publishedAt": "2023-11-16T22:33:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jrpatterson79"
                          },
                          "bodyText": "@cpgr - Yes, that is all correct. One thing I will double-check tomorrow is that there is not an additional side set with the name \u2018fracture\u2019 that is being added into the porousflowmass postprocessor.\nAny other ideas of things I should double check?",
                          "url": "https://github.com/idaholab/moose/discussions/26059#discussioncomment-7593772",
                          "updatedAt": "2023-11-17T00:30:20Z",
                          "publishedAt": "2023-11-17T00:30:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to run MOOSE in parallel mode?",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nDoes anyone know how can I run MOOSE simulation in parallel mode? Do I need to change anything in the input file?\nThank you very much.\nBest,",
          "url": "https://github.com/idaholab/moose/discussions/26085",
          "updatedAt": "2023-11-17T00:24:13Z",
          "publishedAt": "2023-11-17T00:22:18Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "grmnptr"
                  },
                  "bodyText": "No need to chane anything, maybe your preconditioner depending on your problem.\nmpirun -n 100 myexecutable input.i",
                  "url": "https://github.com/idaholab/moose/discussions/26085#discussioncomment-7593744",
                  "updatedAt": "2023-11-17T00:24:37Z",
                  "publishedAt": "2023-11-17T00:24:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Flow field velocity and pressure motion problem",
          "author": {
            "login": "Krystalbbling"
          },
          "bodyText": "Dear expert, hello\uff0c\nI am currently working on flow field related simulations, but I encountered some problems. When I deal with the coupling of the flow field and the temperature field, the velocity field and pressure field of the flow field do not seem to really move. In the final result diagram, the same color \uff08all blue\uff09and data are displayed, but the temperature field is close to normal display.\nWhen I deal with a single flow field, I will encounter a situation where the flow field does not converge.You can see that it has been calculated to the power of e-8, but I set it to converge to the power of e-3, and it never converges. I don't quite understand the reason. But calculating the case a cuboid with the same input file gives correct results.\n96 Nonlinear |R| = 1.204706e-08\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\n      0 Linear |R| = 1.204706e-08\n      1 Linear |R| = 1.178902e-08\n      2 Linear |R| = 1.087888e-08\n      3 Linear |R| = 1.053955e-08\n      4 Linear |R| = 1.051211e-08\n      5 Linear |R| = 1.041096e-08\n      6 Linear |R| = 9.500470e-09\n      7 Linear |R| = 8.637692e-09\n      8 Linear |R| = 8.634381e-09\n      9 Linear |R| = 8.532259e-09\n     10 Linear |R| = 8.515133e-09\n  Linear solve did not converge due to DIVERGED_ITS iterations 10\n    |residual|_2 of individual variables:\n                      vel_x: 5.02273e-09\n                      vel_y: 5.74595e-09\n                      vel_z: 4.71779e-09\n                      p:     8.02906e-09\n97 Nonlinear |R| = 1.204023e-08\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\n      0 Linear |R| = 1.204023e-08\n      1 Linear |R| = 1.182027e-08\n      2 Linear |R| = 9.839454e-09\n      3 Linear |R| = 9.633146e-09\n      4 Linear |R| = 9.496435e-09\n      5 Linear |R| = 9.470163e-09\n      6 Linear |R| = 8.483921e-09\n      7 Linear |R| = 8.413462e-09\n      8 Linear |R| = 8.263414e-09\n      9 Linear |R| = 7.462771e-09\n     10 Linear |R| = 7.459999e-09\n  Linear solve did not converge due to DIVERGED_ITS iterations 10\n    |residual|_2 of individual variables:\n                      vel_x: 4.9759e-09\n                      vel_y: 5.66797e-09\n                      vel_z: 4.77697e-09\n                      p:     7.98308e-09\n98 Nonlinear |R| = 1.197641e-08\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\n      0 Linear |R| = 1.197641e-08\n      1 Linear |R| = 1.045494e-08\n      2 Linear |R| = 1.002028e-08\n      3 Linear |R| = 9.800045e-09\n      4 Linear |R| = 9.780400e-09\n      5 Linear |R| = 9.774846e-09\n      6 Linear |R| = 9.453277e-09\n      7 Linear |R| = 9.444327e-09\n      8 Linear |R| = 9.160808e-09\n      9 Linear |R| = 8.958801e-09\n     10 Linear |R| = 8.791974e-09\n  Linear solve did not converge due to DIVERGED_ITS iterations 10\n    |residual|_2 of individual variables:\n                      vel_x: 4.97665e-09\n                      vel_y: 5.65166e-09\n                      vel_z: 4.75351e-09\n                      p:     7.98326e-09\n99 Nonlinear |R| = 1.195979e-08\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\nThe 3648-th column of A is exactly zero\n      0 Linear |R| = 1.195979e-08\n      1 Linear |R| = 1.134172e-08\n      2 Linear |R| = 1.026062e-08\n      3 Linear |R| = 9.273642e-09\n      4 Linear |R| = 8.877816e-09\n      5 Linear |R| = 8.782022e-09\n      6 Linear |R| = 8.724240e-09\n      7 Linear |R| = 8.705059e-09\n      8 Linear |R| = 8.691755e-09\n      9 Linear |R| = 8.524203e-09\n     10 Linear |R| = 8.504007e-09\n  Linear solve did not converge due to DIVERGED_ITS iterations 10\n    |residual|_2 of individual variables:\n                      vel_x: 4.92591e-09\n                      vel_y: 5.59686e-09\n                      vel_z: 4.69548e-09\n                      p:     7.9913e-09\n100 Nonlinear |R| = 1.189529e-08\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 100\n  Finished Solving                                                                       [7857.86 s] [  334 MB]\n Solve Did NOT Converge!\nAborting as solve did not converge\n\n\n[GlobalParams]\n  gravity = '0 0 0'\n  integrate_p_by_parts = true\n[]\n\n[Mesh]\n  type = FileMesh #Read in mesh from file\n  file = fluid.e\n[]\n\n[Variables]\n  [./vel_x]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./vel_y]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n    [./vel_z]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./p]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n[Kernels]\n  [./mass]\n    type = INSMass\n    variable = p\n    u = vel_x\n    v = vel_y\n    w = vel_z\n    pressure = p\n  [../]\n  [./x_momentum_space]\n    type = INSMomentumLaplaceForm\n    variable = vel_x\n    u = vel_x\n    v = vel_y\n    w = vel_z\n    pressure = p\n    component = 0\n  [../]\n  [./y_momentum_space]\n    type = INSMomentumLaplaceForm\n    variable = vel_y\n    u = vel_x\n    v = vel_y\n    w = vel_z\n    pressure = p\n    component = 1\n  [../]\n    [./z_momentum_space]\n    type = INSMomentumLaplaceForm\n    variable = vel_z\n    u = vel_x\n    v = vel_y\n    w = vel_z\n    pressure = p\n    component = 2\n  [../]\n[]\n\n[BCs]\n  [./x_no_slip]\n    type = DirichletBC\n    variable = vel_x\n    boundary = '12'\n    value = 0.0\n  [../]\n  [./y_no_slip]\n    type = DirichletBC\n    variable = vel_y\n    boundary = '12'\n    value = 0.0\n  [../]\n  [./z_no_slip]\n    type = DirichletBC\n    variable = vel_z\n    boundary = '12'\n    value = 0.0\n  [../]\n  [./x_inlet]\n    type = DirichletBC\n    variable = vel_x\n    boundary = '10'\n    value = '0.1'\n  [../] \n\n[]\n\n[Materials]\n  [./const]\n    type = GenericConstantMaterial\n    block = 1\n    prop_names = 'rho mu'\n    prop_values = '998.2  0.001'\n  [../]\n[]\n\n[Preconditioning]\n  [./SMP_PJFNK]\n    type = SMP\n    full = true\n    solve_type = NEWTON\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  l_max_its = 10\n  nl_max_its =100\n \n  l_tol = 1e-5\n  nl_rel_tol = 1e-3\n\n  solve_type = NEWTON\n   petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -ksp_gmres_restart'\n  petsc_options_value = 'lu       superlu_dist                  200'\n\n[]\n[Debug]\n  show_var_residual_norms = true\n[]\n\n[Outputs]\n  exodus = true\n  file_base = fliudliutest3_out1\n  perf_graph = true\n[]\n\nPlease help me analyze the reason and look forward to your reply.\nKRYSTAL",
          "url": "https://github.com/idaholab/moose/discussions/26037",
          "updatedAt": "2023-11-27T14:19:59Z",
          "publishedAt": "2023-11-13T03:37:04Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "The first thing you should try is setting pspg = true in your GlobalParams block. All first order Lagrange for velocity and pressure is LBB unstable",
                  "url": "https://github.com/idaholab/moose/discussions/26037#discussioncomment-7557921",
                  "updatedAt": "2023-11-13T19:33:52Z",
                  "publishedAt": "2023-11-13T19:33:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I also dont see anything setting the pressure.\nSHould there be an outlet pressure BC? Or a pressure pin somewhere on the domain?",
                          "url": "https://github.com/idaholab/moose/discussions/26037#discussioncomment-7590261",
                          "updatedAt": "2023-11-16T16:40:40Z",
                          "publishedAt": "2023-11-16T16:40:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If the pressure is integrated by parts and there is an outlet, then the pressure is well defined",
                          "url": "https://github.com/idaholab/moose/discussions/26037#discussioncomment-7592354",
                          "updatedAt": "2023-11-16T20:36:12Z",
                          "publishedAt": "2023-11-16T20:36:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "dont you need to specify the outlet pressure though?",
                          "url": "https://github.com/idaholab/moose/discussions/26037#discussioncomment-7592413",
                          "updatedAt": "2023-11-16T20:44:13Z",
                          "publishedAt": "2023-11-16T20:44:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "No. The natural condition is (mu \\grad u * n + p n) = \\vec{0}",
                          "url": "https://github.com/idaholab/moose/discussions/26037#discussioncomment-7592464",
                          "updatedAt": "2023-11-16T20:50:42Z",
                          "publishedAt": "2023-11-16T20:50:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Using a Moose Action Instead of [Mesh] in Input",
          "author": {
            "login": "Vandenbg"
          },
          "bodyText": "Just as the title suggests, I am developing an action which will replace the majority of my input deck. The last piece I would like to include is the [Mesh] block. I do not understand C++ that well and I have not worked with Actions before, the majority of my work has been copy/ paste and variations. Is there a good example somewhere of how I can generate a mesh within my action?",
          "url": "https://github.com/idaholab/moose/discussions/26012",
          "updatedAt": "2023-11-16T20:04:08Z",
          "publishedAt": "2023-11-09T19:42:24Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Not that I'm aware of, although you can look at the action that we use to create the mesh which is SetupMeshAction",
                  "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7526650",
                  "updatedAt": "2023-11-09T20:04:25Z",
                  "publishedAt": "2023-11-09T20:04:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Vandenbg"
                          },
                          "bodyText": "Okay, thank you, I'll start there.",
                          "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7526713",
                          "updatedAt": "2023-11-09T20:13:48Z",
                          "publishedAt": "2023-11-09T20:13:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "And then also SetupMeshCompleteAction ... but that action will get auto-built and will always execute no matter what you do in your input file",
                          "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7526721",
                          "updatedAt": "2023-11-09T20:14:26Z",
                          "publishedAt": "2023-11-09T20:14:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "See some example code in THM maybe.\nTHM simulations regularly do NOT have a mesh block.\n@joshuahansel do you know where this is done?",
                          "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7589579",
                          "updatedAt": "2023-11-16T15:35:33Z",
                          "publishedAt": "2023-11-16T15:35:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "THM might not be a good example because it has a lot of other stuff going on, and it's making its own mesh and such. I'll add a different answer.",
                          "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7592099",
                          "updatedAt": "2023-11-16T20:03:07Z",
                          "publishedAt": "2023-11-16T20:03:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "If your mesh is something that you could just make in a Mesh block, I think you want to register your action to the task meta_action. Check out TestAction::act() (this lives in the thermal_hydraulics module). It essentially hides\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = somenumber\n[]\n\nwithin the action. The magic happens in TestAction::addMeshInternal.\nBasically, it's just creating the actions that would be created if you put the above in your input file, and then adding those to the action warehouse (really early).",
                  "url": "https://github.com/idaholab/moose/discussions/26012#discussioncomment-7592106",
                  "updatedAt": "2023-11-16T20:05:29Z",
                  "publishedAt": "2023-11-16T20:04:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A 'AnisoHeatConductionMaterial' is not a registered object.",
          "author": {
            "login": "hamedattariani"
          },
          "bodyText": "Moose was compiled successfully and passed all tests.\nI only replaced the AnisoHeatConductionMaterial.C and .h files with the following versions.\nhttps://github.com/idaholab/moose/pull/22028/files\nI created an application, changed the heat transfer module to \"yes\" in the makefile, and compiled it. It gave me the executable files.\nNow, if I use the \"AnisoHeatConductionMaterial\" in the input script, it gives me the following error.\n*** ERROR ***\nA 'AnisoHeatConductionMaterialM' is not a registered object.\n\nIf you are trying to find this object in a dynamically loaded library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nI checked the metrials_Unity.C file in moose/modules/heat_transfer/build folder and the material was listed in the file:\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/AnisoHeatConductionMaterial.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/ElectricalConductivity.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/FunctionPathEllipsoidHeatSource.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/GapConductance.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/GapConductanceConstant.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/HeatConductionMaterial.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/SemiconductorLinearConductivity.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/SideSetHeatTransferMaterial.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/ThermalCompliance.C\"\n#include\"/home/hamed/projects/moose/modules/heat_transfer/src/materials/ThermalSensitivity.C\"\n\nAny suggestion?",
          "url": "https://github.com/idaholab/moose/discussions/26035",
          "updatedAt": "2023-11-16T17:22:55Z",
          "publishedAt": "2023-11-12T19:02:13Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "When you modified it, did you modify it in heat_conduction or heat_transfer? That PR is quite old",
                  "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7557820",
                  "updatedAt": "2023-11-13T19:22:18Z",
                  "publishedAt": "2023-11-13T19:22:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hamedattariani"
                          },
                          "bodyText": "I modified it on heat_transfer. Heat Conduction module contains short-cuts to heat_transfer folder.\nIf I click on folders on heat_conduction module, then it navigates me to heat transfer module folder which I updated the file.",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558049",
                          "updatedAt": "2023-11-13T19:53:02Z",
                          "publishedAt": "2023-11-13T19:53:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "What is the output of git status in your moose directory?",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558197",
                          "updatedAt": "2023-11-13T20:13:14Z",
                          "publishedAt": "2023-11-13T20:13:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hamedattariani"
                          },
                          "bodyText": "efresh index: 100% (38514/38514), done.\nOn branch master\nYour branch is up to date with 'origin/master'.\nChanges not staged for commit:\n(use \"git add ...\" to update what will be committed)\n(use \"git restore ...\" to discard changes in working directory)\nmodified:   framework/include/auxkernels/MaterialRealTensorValueAux.h\nmodified:   framework/src/auxkernels/MaterialRealTensorValueAux.C\nmodified:   modules/heat_transfer/include/materials/AnisoHeatConductionMaterial.h\nmodified:   modules/heat_transfer/src/materials/AnisoHeatConductionMaterial.C\nno changes added to commit (use \"git add\" and/or \"git commit -a\")",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558238",
                          "updatedAt": "2023-11-13T20:18:34Z",
                          "publishedAt": "2023-11-13T20:18:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If you're on Mac, please paste the output of otool -L your_executable | grep heat (replacing your_executable with the name of your executable), and if on Linux the output of ldd your_executable | grep heat",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558351",
                          "updatedAt": "2023-11-13T20:33:44Z",
                          "publishedAt": "2023-11-13T20:31:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hamedattariani"
                          },
                          "bodyText": "libheat_transfer-opt.so.0 => /home/hamed/projects/moose/modules/heat_transfer/lib/libheat_transfer-opt.so.0 (0x00007ff4dae00000)",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558390",
                          "updatedAt": "2023-11-13T20:37:54Z",
                          "publishedAt": "2023-11-13T20:37:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "This all looks fine to me. My only remaining suggestion is to try running make clobberall in your application and then building again.",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7558486",
                          "updatedAt": "2023-11-13T20:47:53Z",
                          "publishedAt": "2023-11-13T20:47:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "'AnisoHeatConductionMaterialM' is there a typo with an extra M at the end?",
                  "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7589603",
                  "updatedAt": "2023-11-16T15:37:28Z",
                  "publishedAt": "2023-11-16T15:37:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hamedattariani"
                          },
                          "bodyText": "Thanks for checking that. That was not the issue. I tried multiple ways to fix the registration. One method was to define it as a custom-made kernel with a different name (AnisoHeatConductionMaterialM), but that did not work, either. The error stems from that try.\nI resolved it by simply changing the   \"registerMooseObject(\"HeatConductionApp\", AnisoHeatConductionMaterial);\" to \"registerMooseObject(\"HeatTranferApp\", AnisoHeatConductionMaterial);\" in the C file.",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7590624",
                          "updatedAt": "2023-11-16T17:15:52Z",
                          "publishedAt": "2023-11-16T17:15:51Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ah yes that is definitely the correct fix. Thank you for reporting back",
                          "url": "https://github.com/idaholab/moose/discussions/26035#discussioncomment-7590703",
                          "updatedAt": "2023-11-16T17:22:56Z",
                          "publishedAt": "2023-11-16T17:22:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to get a sum of element average values with element IDs",
          "author": {
            "login": "NorthMagic"
          },
          "bodyText": "Dear MOOSE collaborators,\nI try to solve equations with user-defined moose kernels, and the solved physical variable is element dependent. But I found that moose variables are basically indexed by _qp, and I don't know how to get an element average value by using an element ID. Now, I want to get a sum of element average values with a lot of known element IDs, could you give me some suggestions?",
          "url": "https://github.com/idaholab/moose/discussions/26000",
          "updatedAt": "2023-11-23T05:33:36Z",
          "publishedAt": "2023-11-08T06:56:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "I don't know how to get a elmental value\n\nWhat do you mean? Do you want to get the average value on an element? Generally speaking, except for a small subset of orders (e.g. CONSTANT), the finite element approximate solution varies within an element\n\nby using a mesh ID.\n\nDo you mean an element ID?",
                  "url": "https://github.com/idaholab/moose/discussions/26000#discussioncomment-7513647",
                  "updatedAt": "2023-11-08T17:48:16Z",
                  "publishedAt": "2023-11-08T17:48:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "NorthMagic"
                          },
                          "bodyText": "I want to get the average value on a lot of elements. I know how to get the average value on an element, but how to get the average value of a lot of elements makes me confused.\nI'm sorry for expressing it equivocally. Mesh ID means an element ID.",
                          "url": "https://github.com/idaholab/moose/discussions/26000#discussioncomment-7516673",
                          "updatedAt": "2023-11-09T00:48:14Z",
                          "publishedAt": "2023-11-09T00:45:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You will want to define a constant monomial (one value per element) auxiliary variable then use a ProjectionAux to project from the 'physical variable' to this constant monomial auxiliary variable",
                  "url": "https://github.com/idaholab/moose/discussions/26000#discussioncomment-7590533",
                  "updatedAt": "2023-11-16T17:07:12Z",
                  "publishedAt": "2023-11-16T17:07:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Unexpected negative and asymmetry variable values",
          "author": {
            "login": "NorthMagic"
          },
          "bodyText": "Hi,\nI'm trying to solve neutron diffusion equation by using MOOSE. Several kernels derived from Kernel were constructed for diffusion, collision, scattering and fission, and I verified the code by several eigenvalue problem benchmarks. Then I tried to expand it for transient problems. However, non-physical variable values (negative and asymmetry neutron fluxes) always occur.\nTo test the code, I designed a test case and tried to solve the neutron diffusion equation with Steady executioner in which a keff is fixed and comes from a reference solution. From my point, this equals to a time-step calculation in the transient problem. In the test case, the solution was converged but unexpected variable values were obtained. In a strange way, the correct solutions could be obtained by Eigenvalue executioner. The difference between the mentioned two calculation is mainly the implementation of Kernel for the fission source term in the neutron diffusion equation. I checked it carefully and no mistakes were found in the fission kernel.\nCould you give me some advice? Thanks for your help.",
          "url": "https://github.com/idaholab/moose/discussions/26078",
          "updatedAt": "2023-11-16T17:00:33Z",
          "publishedAt": "2023-11-16T09:55:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nUsing a Steady executioner would be an infinite time step. I would not expect a good value to be output. Depending on the keff and the rounding floating point error on how it is input to normalize the fission source, the solution would either be 0 or infinite.\nNow when using a time dependent solve:\n\ndid you load the eigenvalue solve solution ? Did you normalize the fission source?\nhow did you implement the time derivative term?\nwhat kind of time integration scheme are you using?\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26078#discussioncomment-7590457",
                  "updatedAt": "2023-11-16T17:00:34Z",
                  "publishedAt": "2023-11-16T17:00:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}