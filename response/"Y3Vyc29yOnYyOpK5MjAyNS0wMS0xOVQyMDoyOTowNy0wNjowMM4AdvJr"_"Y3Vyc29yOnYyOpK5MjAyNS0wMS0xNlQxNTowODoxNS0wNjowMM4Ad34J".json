{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNS0wMS0xNlQxNTowODoxNS0wNjowMM4Ad34J"
    },
    "edges": [
      {
        "node": {
          "title": "Material property not defined on block",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "My script shows materials property not defined on block but I have made sure every name matches the material props.\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.check_inp(moose_srv)\nMaterial property 'thermal_eigenstrain', requested by 'eth_xx' is not defined on block 0check_inp(moose_srv)\nMaterial property 'thermal_eigenstrain', requested by 'eth_yy' is not defined on block 0check_inp(moose_srv)\nMaterial property 'thermal_deformation_gradient', requested by 'fth_xx' is not defined on block 0check_inp(moose_srv)\nMaterial property 'thermal_deformation_gradient', requested by 'fth_yy' is not defined on block 0check_inp(moose_srv)\n\n\nActive Materials:\n    Subdomain:  (0)\n      Material Name:       stress_xx_all\n      Property Names:      \"stress_xx\" \n      Material Name:       elasticity_tensor_phase0\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \"plastic_deformation_gradient\" \n                             \n      Material Name:       trial_xtalpl_phase0\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       thermal_eigenstrain\n      Property Names:      \"dphase0_thermal_deformation_gradient/dtemperature\" \"phase0_thermal_deformation_gradient\" \n                             \"phase0_thermal_eigenstrain\" \"phase0_thermal_eigenstrain_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \n                             \"phase1_stress\" \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n                             \"plastic_deformation_gradient\" \n      Material Name:       trial_xtalpl_phase1\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress\n      Property Names:      \"Jacobian_mult\" \"stress\" \n      Material Name:       all_strain\n      Property Names:      \"deformation_gradient\" \"mechanical_strain\" \"rotation_increment\" \"strain_increment\" \n                             \"strain_rate\" \"total_strain\" \n\n    Active Face Materials:\n    Subdomain:  (0)\n      Material Name:       stress_xx_all_face\n      Property Names:      \"stress_xx\" \n      Material Name:       elasticity_tensor_phase0_face\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_face\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \"plastic_deformation_gradient\" \n                             \n      Material Name:       trial_xtalpl_phase0_face\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       thermal_eigenstrain_face\n      Property Names:      \"dphase0_thermal_deformation_gradient/dtemperature\" \"phase0_thermal_deformation_gradient\" \n                             \"phase0_thermal_eigenstrain\" \"phase0_thermal_eigenstrain_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0_face\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_face\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_face\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \n                             \"phase1_stress\" \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n                             \"plastic_deformation_gradient\" \n      Material Name:       trial_xtalpl_phase1_face\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_face\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_face\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_face\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_face\n      Property Names:      \"Jacobian_mult\" \"stress\" \n      Material Name:       all_strain_face\n      Property Names:      \"deformation_gradient\" \"mechanical_strain\" \"rotation_increment\" \"strain_increment\" \n                             \"strain_rate\" \"total_strain\" \n\nActive Neighboring Materials:\n    Subdomain:  (0)\n      Material Name:       stress_xx_all_neighbor\n      Property Names:      \"stress_xx\" \n      Material Name:       elasticity_tensor_phase0_neighbor\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_neighbor\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \"plastic_deformation_gradient\" \n                             \n      Material Name:       trial_xtalpl_phase0_neighbor\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       thermal_eigenstrain_neighbor\n      Property Names:      \"dphase0_thermal_deformation_gradient/dtemperature\" \"phase0_thermal_deformation_gradient\" \n                             \"phase0_thermal_eigenstrain\" \"phase0_thermal_eigenstrain_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0_neighbor\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_neighbor\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_neighbor\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \n                             \"phase1_stress\" \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n                             \"plastic_deformation_gradient\" \n      Material Name:       trial_xtalpl_phase1_neighbor\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_neighbor\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_neighbor\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_neighbor\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_neighbor\n      Property Names:      \"Jacobian_mult\" \"stress\" \n      Material Name:       all_strain_neighbor\n      Property Names:      \"deformation_gradient\" \"mechanical_strain\" \"rotation_increment\" \"strain_increment\" \n                             \"strain_rate\" \"total_strain\" \n\nActive Boundary Materials:",
          "url": "https://github.com/idaholab/moose/discussions/29698",
          "updatedAt": "2025-01-19T18:43:32Z",
          "publishedAt": "2025-01-17T08:05:54Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf you check the log of the show_material_props debug output you can see that the thermal_eigenstrain material property is actually prefaced with \"phase0\".\nSo you cannot use it directly in the input without prefacing it. Which is why you are getting this error that it is not defined",
                  "url": "https://github.com/idaholab/moose/discussions/29698#discussioncomment-11882817",
                  "updatedAt": "2025-01-19T17:25:51Z",
                  "publishedAt": "2025-01-19T17:25:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yeah, you are right, sometimes I overthink it. Thanks",
                          "url": "https://github.com/idaholab/moose/discussions/29698#discussioncomment-11883252",
                          "updatedAt": "2025-01-19T18:43:30Z",
                          "publishedAt": "2025-01-19T18:43:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to open slh file\uff1f",
          "author": {
            "login": "HPL001"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nDear moose community, may I ask how to open the slh file output in moose calculation?\n(Optional) code in question / simulation log / errors\nNo response\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/29708",
          "updatedAt": "2025-01-19T16:58:28Z",
          "publishedAt": "2025-01-19T14:44:00Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nwhat are slh files? how did you get one?",
                  "url": "https://github.com/idaholab/moose/discussions/29708#discussioncomment-11881902",
                  "updatedAt": "2025-01-19T14:46:20Z",
                  "publishedAt": "2025-01-19T14:46:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "HPL001"
                          },
                          "bodyText": "As shown in the figure, I got this file after the calculation, perhaps because I opened the calculation log?",
                          "url": "https://github.com/idaholab/moose/discussions/29708#discussioncomment-11881930",
                          "updatedAt": "2025-01-19T14:49:21Z",
                          "publishedAt": "2025-01-19T14:49:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This is a peacock file, generated by the gui for a variety of purposes\nYou can try a text editor but most of the peacock files are not meant to be opened",
                          "url": "https://github.com/idaholab/moose/discussions/29708#discussioncomment-11882230",
                          "updatedAt": "2025-01-19T15:33:12Z",
                          "publishedAt": "2025-01-19T15:33:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HPL001"
                          },
                          "bodyText": "If I want to keep a log of my calculations, how do I set it up?",
                          "url": "https://github.com/idaholab/moose/discussions/29708#discussioncomment-11882263",
                          "updatedAt": "2025-01-19T15:38:35Z",
                          "publishedAt": "2025-01-19T15:38:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Add a Console output object to your Outputs block and set the output to a file",
                          "url": "https://github.com/idaholab/moose/discussions/29708#discussioncomment-11882672",
                          "updatedAt": "2025-01-19T16:58:30Z",
                          "publishedAt": "2025-01-19T16:58:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Variable coupled ElasticityTensor and Eigenstrain calculation",
          "author": {
            "login": "keassyguang"
          },
          "bodyText": "Hello everyone,\nI am trying to develop a model to calculate a thermo-mechanical problem. I have successfully compiled the code, but the simulation has aborted with a \"Segmentation fault (signal 11)\" message. I have also tried to debug the code using GDB (example 21), but I haven't got any useful information.\nThe total strain is expressed as: \u03f5total = \u03f5elastic + \u03f5thermal + \u03f5chemical.\nFor thermal strain: \u03f5thermal = CTE(T-Tref), where CTE = cte_curedp + cte_uncured(1-p), where cte_cured and cte_uncured are two constants, and p is an ADMaterialProperty variable.\nFor chemical strain: \u03f5chemical = \u03f5chemical_max*p, where \u03f5chemical_max is a constant.\nThe Young's modulus varies with the ADMaterialProperty variable p, the relationship can be expressed as: E = Ecexp(bp), where Ec is the base Young's modulus and b is the exponential factor.\nI have developed two classes: CureDependentIsotropicElasticity (based on #22587) and ChemicalThermalEigenStrain. Can anyone help me check my code to see if anything is wrong? Many thanks.\nCureDependentIsotropicElasticity.h\n#pragma once\n\n#include \"ComputeElasticityTensorBase.h\"\n\n/**\n * Compute an elasticity tensor that depends on the degree of cure\n * E = Ec * exp(b * p), where p is the degree of cure\n */\n\nclass CureDependentIsotropicElasticity : public ADComputeElasticityTensorBase\n{\npublic:\n  static InputParameters validParams();\n  CureDependentIsotropicElasticity(const InputParameters & parameters);\n\nprotected:\n  virtual void computeQpElasticityTensor() override;\n\n  /// Base Young's modulus (Ec)\n  const Real _Ec;\n  \n  /// Exponential factor for cure-dependent modulus (b)\n  const Real _b;\n  \n  /// Poisson's ratio\n  ADReal _youngs_modulus;\n  ADReal _poissons_ratio;\n  \n  /// Degree of cure\n  const ADMaterialProperty<Real> & _p;\n\n  using ADComputeElasticityTensorBase::issueGuarantee;\n  using ADComputeElasticityTensorBase::_elasticity_tensor;\n  using ADComputeElasticityTensorBase::_qp;\n};\n\nCureDependentIsotropicElasticity.C\n#include \"CureDependentIsotropicElasticity.h\"\n\nregisterMooseObject(\"MultiLayerDLPPolymerizationThermalMechanicalApp\", CureDependentIsotropicElasticity);\n\nInputParameters\nCureDependentIsotropicElasticity::validParams()\n{\n  InputParameters params = ADComputeElasticityTensorBase::validParams();\n  params.addParam<Real>(\"Ec\", 0.08833e6, \"Base Young's modulus (Ec)\");\n  params.addParam<Real>(\"b\", 10.45, \"Exponential factor (b)\");\n  params.addRequiredParam<Real>(\"poissons_ratio\", \"Poisson's ratio\");\n  params.addRequiredParam<MaterialPropertyName>(\"p\", \"Degree of cure property name\");\n  return params;\n}\n\nCureDependentIsotropicElasticity::CureDependentIsotropicElasticity(\n    const InputParameters & parameters)\n  : ADComputeElasticityTensorBase(parameters),\n    _Ec(getParam<Real>(\"Ec\")),\n    _b(getParam<Real>(\"b\")),\n    _poissons_ratio(getParam<Real>(\"poissons_ratio\")),\n    _p(getADMaterialProperty<Real>(\"p\"))\n{\n  // all tensors created by this class are always isotropic\n  issueGuarantee(_elasticity_tensor_name, Guarantee::ISOTROPIC);\n}\n\nvoid\nCureDependentIsotropicElasticity::computeQpElasticityTensor()\n{\n  _youngs_modulus = _Ec * std::exp(_b * _p[_qp]);\n\n  // Assign elasticity tensor at a given quad point\n  _elasticity_tensor[_qp].fillSymmetricIsotropicEandNu(_youngs_modulus, _poissons_ratio);\n}\n\nChemicalThermalEigenStrain.h\n#pragma once\n\n#include \"ADComputeEigenstrainBase.h\"\n\n/**\n * Compute eigenstrains due to both thermal expansion and chemical shrinkage\n */\n\nclass ChemicalThermalEigenStrain : public ADComputeEigenstrainBase\n{\npublic:\n  static InputParameters validParams();\n  ChemicalThermalEigenStrain(const InputParameters & parameters);\n\nprotected:\n  virtual void computeQpEigenstrain() override;\n\n  /// Temperature variable\n  const ADVariableValue & _temperature;\n  \n  /// Reference temperature\n  const Real _reference_temperature;\n  \n  /// Degree of cure\n  const ADMaterialProperty<Real> & _p;\n  \n  /// Maximum chemical shrinkage strain\n  const Real _chemical_strain_max;\n  \n  /// Thermal expansion coefficient for cured material\n  const Real _cte_cured;\n  \n  /// Thermal expansion coefficient for uncured material\n  const Real _cte_uncured;\n};\n\nChemicalThermalEigenStrain.C\n#include \"ChemicalThermalEigenStrain.h\"\n\nregisterMooseObject(\"MultiLayerDLPPolymerizationThermalMechanicalApp\", ChemicalThermalEigenStrain);\n\nInputParameters\nChemicalThermalEigenStrain::validParams()\n{\n  InputParameters params = ADComputeEigenstrainBase::validParams();\n  params.addRequiredCoupledVar(\"temperature\", \"Temperature variable\");\n  params.addRequiredParam<Real>(\"reference_temperature\", \"Reference temperature\");\n  params.addRequiredParam<MaterialPropertyName>(\"p\", \"Degree of cure property name\");\n  params.addParam<Real>(\"chemical_strain_max\", -0.08, \"Maximum chemical shrinkage strain\");\n  params.addParam<Real>(\"cte_cured\", 50.0e-6, \"Thermal expansion coefficient for cured material\");\n  params.addParam<Real>(\"cte_uncured\", 156.0e-6, \"Thermal expansion coefficient for uncured material\");\n  return params;\n}\n\nChemicalThermalEigenStrain::ChemicalThermalEigenStrain(const InputParameters & parameters)\n  : ADComputeEigenstrainBase(parameters),\n    _temperature(adCoupledValue(\"temperature\")),\n    _reference_temperature(getParam<Real>(\"reference_temperature\")),\n    _p(getADMaterialProperty<Real>(\"p\")),\n    _chemical_strain_max(getParam<Real>(\"chemical_strain_max\")),\n    _cte_cured(getParam<Real>(\"cte_cured\")),\n    _cte_uncured(getParam<Real>(\"cte_uncured\"))\n{\n}\n\nvoid\nChemicalThermalEigenStrain::computeQpEigenstrain()\n{\n  ADReal cte = _p[_qp] * _cte_cured + (1.0 - _p[_qp]) * _cte_uncured;\n  ADReal thermal_strain = cte * (_temperature[_qp] - _reference_temperature);\n  ADReal chemical_strain = _chemical_strain_max * _p[_qp];\n  \n  _eigenstrain[_qp].zero();\n  _eigenstrain[_qp].addIa(thermal_strain + chemical_strain);\n}\n\nPart of the input file is as follow:\n[Variables]\n  [disp_x]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n  []\n  [disp_y]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[Kernels]\n  # Mechanics kernels\n  [stress_x]\n    type = ADStressDivergenceTensors\n    block = 1\n    displacements = 'disp_x disp_y'\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = true\n  []\n  [stress_y]\n    type = ADStressDivergenceTensors\n    block = 1\n    displacements = 'disp_x disp_y'\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = true\n  []\n\n[Materials]\n  [elasticity]\n    type = CureDependentIsotropicElasticity\n    block = 1\n    p = p\n    poissons_ratio = 0.4\n  []\n\n  [strain]\n    type = ADComputeFiniteStrain\n    block = 1\n    displacements = 'disp_x disp_y'\n  []\n\n  [eigenstrain]\n    type = ChemicalThermalEigenStrain\n    block = 1\n    temperature = Temperature\n    reference_temperature = 300.0\n    p = p\n    eigenstrain_name = chemical_thermal\n  []\n\n  [stress]\n    type = ADComputeFiniteStrainElasticStress\n    block = 1\n  []\n[]\n\n[BCs]\n  # BCs for mechanics\n  # Fixed bottom boundary\n  [bottom_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'bottom'\n    value = 0.0\n  []\n  [bottom_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'bottom'\n    value = 0.0\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/29689",
          "updatedAt": "2025-01-19T01:23:54Z",
          "publishedAt": "2025-01-14T12:05:26Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\n\nbut the simulation has aborted with a \"Segmentation fault (signal 11)\" message. I have also tried to debug the code using GDB (example 21), but I haven't got any useful information.\n\nCan you report the backtrace please? This should be possible on a segfault",
                  "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11831807",
                  "updatedAt": "2025-01-14T13:37:26Z",
                  "publishedAt": "2025-01-14T13:37:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Yes, I can, but tomorrow. If I remember correctly, the backtrace is completely different to what example 21 shows, which clearly shows which class or member function goes wrong.",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11832291",
                          "updatedAt": "2025-01-14T14:27:38Z",
                          "publishedAt": "2025-01-14T14:27:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you compile a debug executable?",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11832331",
                          "updatedAt": "2025-01-14T14:31:57Z",
                          "publishedAt": "2025-01-14T14:31:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Yes, I follow example 21. Compiled in dbg mode and set an MPI_Abort breakpoint.",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11832356",
                          "updatedAt": "2025-01-14T14:35:25Z",
                          "publishedAt": "2025-01-14T14:35:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "good. I think it will be helpful then!",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11832391",
                          "updatedAt": "2025-01-14T14:38:07Z",
                          "publishedAt": "2025-01-14T14:38:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Here is the full version of the debug output:\nStarting program: /home/liug2/projects/multi_layer_dlp_polymerization_thermal_mechanical/multi_layer_dlp_polymerization_thermal_mechanical-dbg -i test_multi_layer_polymerization_thermal_mechanical.i\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x7fffdf400640 (LWP 56475)]\nUsing EXPERIMENTAL Stateful Material Property projection with Adaptivity!\nFramework Information:\nMOOSE Version:           git commit 6d97f2802e on 2025-01-09\nLibMesh Version:         \nPETSc Version:           3.22.1\nSLEPc Version:           3.22.1\nCurrent Time:            Wed Jan 15 09:36:28 2025\nExecutable Timestamp:    Wed Jan 15 09:34:02 2025\n\nInput File(s):\n  /home/liug2/projects/multi_layer_dlp_polymerization_thermal_mechanical/problems/test_multi_layer_polymerization_thermal_mechanical.i\n\nCheckpoint:\n  Wall Time Interval:      Every 3600 s\n  User Checkpoint:         Disabled\n  # Checkpoints Kept:      2\n  Execute On:              TIMESTEP_END \n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   385\n  Elems:                   282\n  Num Subdomains:          2\n\nNonlinear System:\n  Num DOFs:                1358\n  Num Local DOFs:          1358\n  Variables:               { \"CI\" \"CR\" \"CO\" \"CM\" \"Temperature\" \"disp_x\" \"disp_y\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                2859\n  Num Local DOFs:          2859\n  Num Constrained DOFs:    90\n  Local Constrained DOFs:  90\n  Variables:               { \"I_aux\" \"p_aux\" \"kp_aux\" \"kTerm_aux\" } \"bounds_dummy\" \"layerY\" { \"error_jump\" \n                             \"error_frac\" \"value_range_marker\" \"combo\" } \n  Finite Element Types:    \"MONOMIAL\" \"LAGRANGE\" \"LAGRANGE\" \"MONOMIAL\" \n  Approximation Orders:    \"FIRST\" \"FIRST\" \"FIRST\" \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator(s):       ImplicitEuler\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg \n\nCurrently Executing\n  Performing Initial Setup\n    Finished Computing User Objects                                                      [  5.91 s] [  211 MB]\n  Finished Performing Initial Setup                                                      [  8.09 s] [  211 MB]\n\nTime Step 0, time = 0\n\nTime Step 1, time = 0.1, dt = 0.1\n  Finished Computing User Objects                                                        [  5.94 s] [  220 MB]\n\nPerforming automatic scaling calculation\n\n\n\nAssertion `residuals.size() == input_row_indices.size()' failed\nThe number of residuals should match the number of dof indices\nat /home/liug2/projects/moose/framework/build/header_symlinks/Assembly.h, line 3023\nStack frames: 39\n0: libMesh::print_trace(std::ostream&)\n1: void Assembly::cacheResiduals<std::vector<double, std::allocator<double> >, std::vector<unsigned long, std::allocator<unsigned long> > >(std::vector<double, std::allocator<double> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, double, Assembly::LocalDataKey, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n2: void TaggingInterface::addResiduals<std::vector<double, std::allocator<double> >, std::vector<unsigned long, std::allocator<unsigned long> > >(Assembly&, std::vector<double, std::allocator<double> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, double)\n3: ADIntegratedBCTempl<double>::computeResidual()\n4: ComputeResidualThread::compute(ResidualObject&)\n5: NonlinearThread::compute(IntegratedBCBase&)\n6: NonlinearThread::computeOnBoundary(short, libMesh::Elem const*)\n7: NonlinearThread::onBoundary(libMesh::Elem const*, unsigned int, short, libMesh::Elem const*)\n8: ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n9: NonlinearThread::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool)\n10: /home/liug2/projects/moose/framework/libmoose-dbg.so.0(+0x1110aab) [0x7ffff4710aab]\n11: NonlinearSystemBase::computeResidualInternal(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n12: NonlinearSystemBase::computeResidualTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n13: FEProblemBase::computeResidualTags(std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n14: FEProblemBase::computeResidualInternal(libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&, std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > const&)\n15: FEProblemBase::computeResidual(libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&, unsigned int)\n16: FEProblemBase::computeResidualSys(libMesh::NonlinearImplicitSystem&, libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&)\n17: ComputeResidualFunctor::residual(libMesh::NumericVector<double> const&, libMesh::NumericVector<double>&, libMesh::NonlinearImplicitSystem&)\n18: libmesh_petsc_snes_residual\n19: SNESComputeFunction\n20: /home/liug2/miniforge/envs/moose/petsc/lib/libpetsc.so.3.022(+0x1088da5) [0x7fffe8688da5]\n21: SNESSolve\n22: libMesh::PetscNonlinearSolver<double>::solve(libMesh::SparseMatrix<double>&, libMesh::NumericVector<double>&, libMesh::NumericVector<double>&, double, unsigned int)\n23: libMesh::NonlinearImplicitSystem::solve()\n24: NonlinearSystem::solve()\n25: FEProblemBase::solve(unsigned int)\n26: FEProblemSolve::solve()\n27: FixedPointSolve::solveStep(double&, double&, std::set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long> > const&)\n28: FixedPointSolve::solve()\n29: TimeStepper::step()\n30: TransientBase::takeStep(double)\n31: TransientBase::execute()\n32: MooseApp::executeExecutioner()\n33: MooseApp::run()\n34: /home/liug2/projects/multi_layer_dlp_polymerization_thermal_mechanical/multi_layer_dlp_polymerization_thermal_mechanical-dbg(+0x7d8a) [0x55555555bd8a]\n35: main\n36: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7fffe1429d90]\n37: __libc_start_main\n38: /home/liug2/projects/multi_layer_dlp_polymerization_thermal_mechanical/multi_layer_dlp_polymerization_thermal_mechanical-dbg(+0x6079) [0x55555555a079]\n[0] /home/liug2/projects/moose/framework/build/header_symlinks/Assembly.h, line 3023, compiled Jan 14 2025 at 18:35:26\n\nThread 1 \"multi_layer_dlp\" hit Breakpoint 1, 0x00007fffe194a4f0 in PMPI_Abort () from /home/liug2/miniforge/envs/moose/lib/libmpi.so.12",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11837715",
                          "updatedAt": "2025-01-15T01:41:35Z",
                          "publishedAt": "2025-01-15T01:41:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "one of your boundary conditions, one that is of an ADIntergratedBC parent type, is being executed where a variable is not defined.\nthere should be acheck for this though. Did you disable that integrity check?\nWhether or not you did, you should double check that the domain of definition of variables touches all the boundaries they have boundary conditions on",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11838484",
                          "updatedAt": "2025-01-15T04:06:28Z",
                          "publishedAt": "2025-01-15T04:06:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Yes, I didn't define the temperature variable on block 2. As we have applied convective heat flux BCs to the left and right boundaries, but have not defined the temperature variable on block 2, we need to disable the boundary integrity check. However, if we set the boundary integrity check to false, the previous model (without mechanics) works fine.\nHere is the input file.\n[Problem]\n  type = FEProblem\n  kernel_coverage_check = false\n  boundary_restricted_node_integrity_check = false\n  boundary_restricted_elem_integrity_check = false\n[]\n\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 6\n    ny = 2\n    xmin = 0\n    ymin = 0\n    xmax = 4500e-6\n    ymax = 1600e-6\n  []\n  [./refine]\n    type = RefineSidesetGenerator\n    input = 'gen'\n    boundaries = 'bottom'\n    boundary_side = 'primary'\n    refinement = 4\n    enable_neighbor_refinement = false\n  [../]\n  [active_domain] #the initially active domain\n    type = SubdomainBoundingBoxGenerator\n    input = 'refine'\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '4500e-6 50e-6 0'\n  []\n  [inactive_domain] #the initially inactive domain\n    type = SubdomainBoundingBoxGenerator\n    input = 'active_domain'\n    block_id = 2\n    bottom_left = '0 50e-6 0'\n    top_right = '4500e-6 1600e-6 0'\n  []\n  [sideset_top_active]\n    type = SideSetsAroundSubdomainGenerator\n    input = inactive_domain\n    normal = '0 1 0'\n    block = 1\n    new_boundary = 'top_active' # top boundary of active domain\n  []\n[]\n  \n\n[Variables]\n  # Chemical reaction\n  [CI]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n    [InitialCondition]\n      type = SharedNodeIC\n      prev_var = CI\n      initial_value = 11.9396\n    []\n  []\n  \n  [CR]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n    [InitialCondition]\n      type = SharedNodeIC\n      prev_var = CR\n      initial_value = 0\n    []\n  []\n\n  [CO]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n    [InitialCondition]\n      type = SharedNodeIC\n      prev_var = CO\n      initial_value = 1.05\n    []\n  []\n\n  [CM]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n    [InitialCondition]\n      type = SharedNodeIC\n      prev_var = CM\n      initial_value = 4418.6\n    []\n  []\n\n  # Temperature\n  [Temperature]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 300.0     # K\n  []\n\n  # ADD the displacement variables for mechanics:\n  # Displacement variables\n  [disp_x]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n  []\n  [disp_y]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n\n[AuxVariables]\n  # Light intensity\n  [I_aux]\n    block = 1\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  # Degree of cure\n  [p_aux]\n    block = 1\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  # Propagation rate\n  [kp_aux]\n    block = 1\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  # Termination rate\n  [kTerm_aux]\n    block = 1\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  # AuxVariable used for bounds control\n  [bounds_dummy]\n    block = 1\n    order = FIRST\n    family = LAGRANGE\n  []\n\n  # AuxVariabl used for element activation\n  [layerY]\n    [AuxKernel]\n    type = ParsedAux\n    expression = 'y - 50e-6 * ceil(t/4.000001)'\n    use_xyzt = true\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n    []\n  []\n[]\n\n\n[Kernels]\n  # Kernels belonged to the Photopolymerization model\n  # dCI(x,t) / dt = -beta * I(x,t) * CI(x,t)\n  [CI_time]\n    type = PhotoInitiatorKernel\n    block = 1\n    variable = CI\n    I = I\n    beta = 3.45e-4\n  []\n\n  # dCR/dt = m * \u03b2 * I(x,t) * CI(x,t) - 2 * kTerm * CR^2 - kO * CR * CO\n  [CR_time]\n    type = RadicalKernel\n    block = 1\n    variable = CR\n    CI = CI\n    CO = CO\n    I = I\n    kTerm = kTerm\n    beta = 3.45e-4\n    m = 2\n    kO = 2644\n  []\n\n  # dCO/dt = -kO * CR * CO\n  [CO_time]\n    type = OxygenKernel\n    block = 1\n    variable = CO\n    CR = CR\n    kO = 2644\n  []\n\n  # dCM/dt = -kp * CM * CR\n  [CM_time]\n    type = MonomerKernel\n    block = 1\n    variable = CM\n    CR = CR\n    kp = kp\n  []\n\n\n  # Kernels belonged to the Heat transfer model \n  # (k\u2207T,\u2207\u03c8)\n  [Heat_conduction]\n    type = ADHeatConduction\n    variable = Temperature\n    block = 1\n  []\n\n  # \u03c1Cp\u200b\u2202T/\u2202t\u200b \n  [Heat_conduction_time_derivative]\n    type = ADHeatConductionTimeDerivative\n    variable = Temperature\n    block = 1\n  []\n\n  [Heat_source]\n    type = HeatSourceKernel\n    CM = CM\n    Hp = 7.82e4                     # mJ/mol\n    variable = Temperature\n    block = 1\n    \n  []\n\n  # Kernels belonged to the Mechanical model\n  # Mechanics kernels\n  [stress_x]\n    type = ADStressDivergenceTensors\n    block = 1\n    displacements = 'disp_x disp_y'\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = true\n  []\n  [stress_y]\n    type = ADStressDivergenceTensors\n    block = 1\n    displacements = 'disp_x disp_y'\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = true\n  []\n[]\n\n\n[AuxKernels]\n  # AuxKnernl used for results visualization\n  # Light intensity\n  [I_aux]\n    type = ADMaterialRealAux\n    block = 1\n    variable = I_aux\n    property = I\n    execute_on = 'initial timestep_end'\n  []\n\n  # Degree of cure\n  [p_aux]\n    type = ADMaterialRealAux\n    block = 1\n    variable = p_aux\n    property = p\n    execute_on = 'initial timestep_end'\n  []\n\n  # Propagatin rate\n  [kp_aux]\n    type = ADMaterialRealAux\n    block = 1\n    variable = kp_aux\n    property = kp\n    execute_on = 'initial timestep_end'\n  []\n\n  # Termination rate\n  [kTerm_aux]\n    type = ADMaterialRealAux\n    block = 1\n    variable = kTerm_aux\n    property = kTerm\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n\n[MeshModifiers]\n  [addLayer] \n    type = CoupledVarThresholdElementSubdomainModifier\n    coupled_var = 'layerY'\n    criterion_type = BELOW\n    threshold = 0\n    subdomain_id = 1\n    moving_boundaries = 'top_active'\n    moving_boundary_subdomain_pairs = '1 2'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n    execution_order_group = 1\n  []\n\n  [./side_updater]\n    type                 = SidesetBetweenSubdomainUpdater\n    inner_subdomains     = '1'\n    outer_subdomains     = '2'\n    update_sideset_name  = 'top_active'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n    execution_order_group = 2\n  [../]\n[]\n\n\n[Materials]\n  # Light Intensity\n  [Light_Intensity_Material]\n    type = LightIntensityMaterial\n    block = 1\n    I0 = 42                         # Light intensity at top surface\n    Dp = 135.135e-6                 # Penetration depth Dp\n    period = 4                      # Time period for domain height increase\n    layer_thickness = 50e-6         # Layer thickness\n    I0_on_duration = 3              # Duration for light turn on\n    x_start = 1500e-6               # x-coordinate of start position\n    x_end = 3000e-6                 # x-coordinate of end position\n  []\n\n  # Degree of Cure Material\n  [Conversion_Material]\n    type = ConversionMaterial\n    block = 1\n    CM = CM\n    CM0 = 4418.6                    # Initial monomer concentration CM0\n  []\n\n  # Polymerization Rate Constant Material\n  [Propagation_Rate_Material]\n    type = PropagationRateMaterial\n    block = 1\n    kp0 = 610                      # kp0 parameter\n    kpD0 = 1.5e9                   # kpD0 parameter\n    c = 29.9                       # c parameter\n    p = p                          # Degree of cure\n    # output_properties = 'real_property'\n    # outputs = exodus\n  []\n\n  # Termination Rate Constant Material\n  [Termination_Rate_Material]\n    type = TerminationRateMaterial\n    block = 1\n    ktSD = 4370                    # ktSD parameter\n    ktTD0 = 6.57e5                 # ktTD0 parameter\n    c = 29.9                       # c parameter\n    CRD = 1.04                     # CRD parameter\n    p = p                          # Degree of cure property\n    kp = kp                        # Polymerization rate constant property\n  []\n\n  # Thermal properties parameters\n  # [Thermal_properties]\n  #   type = ADHeatConductionMaterial\n  #   thermal_conductivity = 0.223   # W//m/K\n  #   specific_heat = 1700           # J/kg/K\n  #   block = 1\n  # []\n  [Thermal_properties]\n    type = ADGenericConstantMaterial  # Changed to AD version\n    prop_names = 'thermal_conductivity specific_heat'\n    prop_values = '0.223 1700'\n    block = 1\n  []\n\n  # Density\n  [Density]\n    type = ADGenericConstantMaterial\n    prop_names = 'density'\n    prop_values = 1120             # kg/m^3\n    block = 1\n  []\n\n  [dummy_mat_inactive]\n    type = GenericConstantMaterial\n    block = 2\n    prop_names = 'dummy_mat'\n    prop_values = '0.0'\n  []\n\n  [elasticity]\n    type = CureDependentIsotropicElasticity\n    block = 1\n    p = p\n    poissons_ratio = 0.4\n  []\n\n  [strain]\n    type = ADComputeFiniteStrain\n    block = 1\n    displacements = 'disp_x disp_y'\n  []\n\n  [eigenstrain]\n    type = ChemicalThermalEigenStrain\n    block = 1\n    temperature = Temperature\n    reference_temperature = 300.0\n    p = p\n    eigenstrain_name = chemical_thermal\n  []\n\n  [stress]\n    type = ADComputeFiniteStrainElasticStress\n    block = 1\n  []\n[]\n\n\n[Bounds]\n  # Bounds of initiator concentration\n  [CI_upper_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CI\n    bound_type = upper\n    bound_value = 11.9396           # mol/m^3\n  []\n  [CI_lower_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CI\n    bound_type = lower\n    bound_value = 0\n  []\n\n  # Bounds of radicals concentration\n  [CR_lower_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CR\n    bound_type = lower\n    bound_value = 0\n  []\n\n  # Bounds of oxygen concentration\n  [CO_upper_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CO\n    bound_type = upper\n    bound_value = 1.05               # mol/m^3\n  []\n  [CO_lower_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CO\n    bound_type = lower\n    bound_value = 0\n  []\n\n  # Bounds of monomer concentration\n  [CM_upper_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CM\n    bound_type = upper\n    bound_value = 4418.6              # mol/m^3\n  []\n  [CM_lower_bound]\n    type = ConstantBounds\n    block = 1\n    variable = bounds_dummy\n    bounded_variable = CM\n    bound_type = lower\n    bound_value = 0\n  []\n[]\n\n\n[BCs]\n  # BCs for heat transfer\n  # Left side is convective\n  [Temperature_left]\n    type = ADConvectiveHeatFluxBC\n    T_infinity = 300\n    heat_transfer_coefficient = 20   # W/m^2/K\n    variable = Temperature\n    boundary = 'left'\n  []\n\n  # Right side is convective\n  [Temperature_right]\n    type = ADConvectiveHeatFluxBC\n    T_infinity = 300\n    heat_transfer_coefficient = 20   # W/m^2/K\n    variable = Temperature\n    boundary = 'right'\n  []\n\n  # Top surface is convective\n  [Convective_top]\n    type = ADConvectiveHeatFluxBC\n    variable = Temperature\n    boundary = 'top_active'\n    T_infinity = 300.0\n    heat_transfer_coefficient = 5    # W/m^2/K\n  []\n\n  [Convective_bottom]\n    type = ADConvectiveHeatFluxBC\n    variable = Temperature\n    boundary = 'bottom'\n    T_infinity = 300.0\n    heat_transfer_coefficient = 20   # W/m^2/K\n  []\n\n  # BCs for mechanics\n  # Fixed bottom boundary\n  [bottom_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'bottom'\n    value = 0.0\n  []\n  [bottom_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'bottom'\n    value = 0.0\n  []\n[]\n\n\n[Executioner]\n  automatic_scaling = true\n  line_search = 'none'\n\n  type = Transient\n  solve_type = 'PJFNK'\n  # solve_type = JFNK\n  # solve_type = NEWTON\n  # solve_type = FD\n    \n  [TimeIntegrator]\n    type = ImplicitEuler\n    # type = BDF2\n    # type = CrankNicolson\n    # type = ImplicitMidpoint\n    # type = LStableDirk2\n    # type = LStableDirk3\n    # type = LStableDirk4\n    # type = AStableDirk4\n    \n    # Explicit methods\n    # type = ActuallyExplicitEuler\n    # type = ExplicitEuler\n    # type = ExplicitMidpoint\n    # type = Heun\n    # type = Ralston\n  []\n\n  start_time = 0.0\n  end_time = 80.0\n  # num_steps = 1\n  dt = 1.0e-1\n  # dt = 5e-2\n  \n  # petsc_options_iname = '-pc_type -pc_hypre_type'\n  # petsc_options_value = 'hypre boomeramg'\n  # petsc_options_iname = '-pc_type'\n  # petsc_options_value = 'lu'\n\n  petsc_options_iname = '-pc_type -pc_hypre_type -snes_type'\n  petsc_options_value = 'hypre boomeramg vinewtonrsls'\n  \n  # l_tol = 1e-10\n  # nl_rel_tol = 1e-3\n  nl_abs_tol = 1e-10\n  # l_max_its = 20\n  # nl_max_its = 20\n[]\n\n[Outputs]\n  exodus = true\n  # csv = true\n  file_base = test_multi_layer_polymerization_thermal_mechanical\n  time_step_interval = 1\n  \n  [console]\n    type = Console\n    output_linear = true\n    output_nonlinear = true\n    time_step_interval = 10\n    # interval = 1000\n  []\n[]\n\n\n[Adaptivity]\n  max_h_level = 5\n  initial_marker = combo\n  marker = combo\n  \n  [Indicators]\n    [error_jump]\n      type = GradientJumpIndicator\n      # variable = I_aux\n      # variable = p_aux\n      variable = CM\n      # variable = Temperature\n    []\n  []\n  \n  [Markers]\n    [error_frac]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = error_jump\n      refine = 0.8\n    []\n\n    [value_range_marker]\n      type = ValueRangeMarker\n      variable = layerY\n      lower_bound = 0\n      upper_bound = 50e-6\n      third_state = DO_NOTHING\n    []\n\n    [combo]\n      type = ComboMarker\n      markers = 'error_frac value_range_marker'\n    []\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11838598",
                          "updatedAt": "2025-01-15T09:15:25Z",
                          "publishedAt": "2025-01-15T04:21:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "However, if we set the boundary integrity check to false, the previous model (without mechanics) works fine.\n\nIs the error coming from one of the displacement boundary conditions?\nthe displacements are only defined on block 1. Maybe the bottom boundary extends beyond block 1? In which case you must use a ParsedGenerateSideset to rcreate a new boundary like bottom_of_block_1",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11849377",
                          "updatedAt": "2025-01-16T01:31:33Z",
                          "publishedAt": "2025-01-16T01:30:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Is the error coming from one of the displacement boundary conditions?\n\nI think so, as we can run the simulation without the mechanics.\n\nthe displacements are only defined on block 1. Maybe the bottom boundary extends beyond block 1?\n\nSince we can solve two steps, I checked the bottom boundary, the bottom was correct. The problem might come from adaptivity as the mesh changed after time = 0.1. I would try a uniform fixed mesh later.\nFollowing your suggestion, I created a new sideset using ParsedGenerateSideset. The results were the same after I replaced all \"bottom\" with the newly created \"bottom_of_block_1\".\nTime Step 0, time = 0\n\nTime Step 1, time = 0.1, dt = 0.1\n\nPerforming automatic scaling calculation\n\n Solve Converged!\n\nTime Step 2, time = 0.2, dt = 0.1\n Solve Converged!\nSegmentation fault (core dumped)",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11849483",
                          "updatedAt": "2025-01-16T01:53:27Z",
                          "publishedAt": "2025-01-16T01:47:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keassyguang"
                          },
                          "bodyText": "Confirmed that the problem was adaptivity. I can run the simulation and get some results (not checked if correct or not).",
                          "url": "https://github.com/idaholab/moose/discussions/29689#discussioncomment-11849593",
                          "updatedAt": "2025-01-16T02:06:14Z",
                          "publishedAt": "2025-01-16T02:06:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Guidelines to using quadruple precision",
          "author": {
            "login": "HemiaoZhang"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi Moose community,\nThere is a previous discussion on Moose precision in general but my current problem is more specific in terms of how to turn on the quadruple precision from libmesh.\nI saw from 08/17/24 newsletter as well as miscellaneous example 8 and 13 that there is a way to turn on the quadruple precision.\nHowever, as I am not familiar with how to switch to quadruple precision, I am wondering if there could be more detailed guidelines to it. For instance, should we update to the latest version, should we modify the main file, etc.\nMany thanks!",
          "url": "https://github.com/idaholab/moose/discussions/29702",
          "updatedAt": "2025-01-17T21:15:13Z",
          "publishedAt": "2025-01-17T18:22:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll need to follow the installation from source instructions (with GCC or clang) and set the precision when compiling libMesh using a configure option (maybe petsc too, see petsc manual)\nThe other links you posted should have some of these instructions",
                  "url": "https://github.com/idaholab/moose/discussions/29702#discussioncomment-11871603",
                  "updatedAt": "2025-01-17T21:14:29Z",
                  "publishedAt": "2025-01-17T21:14:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No need to modify any file a priori and no need to update to the latest branch though that is always a good idea",
                          "url": "https://github.com/idaholab/moose/discussions/29702#discussioncomment-11871608",
                          "updatedAt": "2025-01-17T21:15:13Z",
                          "publishedAt": "2025-01-17T21:15:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Register now for the inaugural MOOSE International Workshop",
          "author": {
            "login": "loganharbour"
          },
          "bodyText": "The Inaugural MOOSE International Workshop, Multiphysics Modeling for Energy and Environmental Applications, March 10-13 2025\nRegistration is open for the MOOSE international workshop at this link\nWe are excited to announce our upcoming MOOSE International Workshop that promises to be an enlightening experience for all levels of users. Get ready to expand your knowledge, connect with MOOSE application experts, and delve into the latest (and planned) advancements for MOOSE.\nWe Need Your Help\nIt has been over 15 years since MOOSE was first conceptualized and developed, and in that time, we have never held a MOOSE workshop of this scale. This announcement is intended to gauge interest so that we can choose topics, a venue, and a location for the event.\nEvent Details\n\nTitle: MOOSE International Workshop, Multiphysics Modeling for Energy and Environmental Applications\nDate: March 10-13 2025\nLocation: Idaho Falls, ID, or Salt Lake City, UT\nTopics to be Covered: MOOSE framework and framework development, MOOSE physics modules, open-source and licensed MOOSE applications and application development, examples and use cases for energy and environmental applications, including nuclear and renewable energy, environmental cleanup and remediation, fusion energy, geomechanics, and nuclear fuel storage\n\nWhat to Expect\n\nExpert Speakers: Engage with thought leaders and practitioners at the forefront of all things MOOSE and MOOSE-herd applications\nHands-On Sessions: Dive into practical applications with interactive workshops and demonstrations\nNetworking Opportunities: Connect with fellow professionals, exchange ideas, and build lasting collaborations\nQ&A Sessions: Have your burning questions answered by our expert panel\n\nWhy Attend\nThis workshop is being planned for professionals and students seeking to engage with colleagues using or developing in the MOOSE framework. Whether you are a seasoned expert or budding enthusiast, sessions will be designed to cater to all levels of expertise. Don't miss this opportunity to gain valuable insights, discover emerging trends, and connect with like-minded individuals.\nRegistration Details\nRegister now here: https://iaea.inl.gov/page/registration/moose2025",
          "url": "https://github.com/idaholab/moose/discussions/26323",
          "updatedAt": "2025-01-17T18:35:28Z",
          "publishedAt": "2023-12-13T17:35:09Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Using special functions (bessel, gamma, etc) in parsed expressions",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi,\nI was wondering if there was a way to use special functions in MOOSE. I looked at the function parser documentation:\nhttp://warp.povusers.org/FunctionParser/fparser.html#literals\nand saw that it only really covers basic ones like sin/tan/etc. I was wondering if there is a way to implement gamma, bessel functions, etc without needing to use an approximation.",
          "url": "https://github.com/idaholab/moose/discussions/29677",
          "updatedAt": "2025-01-17T18:27:32Z",
          "publishedAt": "2025-01-10T23:18:29Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI don't think they can be used in parsed expressions.\nI think the solution here is to code your own object instead of relying on the parsed capabilities",
                  "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11804461",
                  "updatedAt": "2025-01-11T04:14:42Z",
                  "publishedAt": "2025-01-11T04:14:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "if I go this route, say, create an object file. Do I just need to include cmath and then I can use bessel functions, etc? And then also use _q_point to get the xyz quadrature points?\nAnd then I'm guessing the material file would need to be block restricted (or surface restricted) since I'm using the function to define boundary conditions.",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11809067",
                          "updatedAt": "2025-01-11T22:59:50Z",
                          "publishedAt": "2025-01-11T22:59:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "If I go this route, what is the default value for \"h\"? Is it 1.0? Or is h the \"value\" parameter with the default set to 0?\nhttps://mooseframework.inl.gov/source/bcs/MatNeumannBC.html\nThat is, if I only set the required parameters, will it fix the flux as the value of the constant material property?",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11847427",
                          "updatedAt": "2025-01-15T20:29:34Z",
                          "publishedAt": "2025-01-15T20:29:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Does this option work, and/or is there a better way to do this than coding a material property?",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11864407",
                          "updatedAt": "2025-01-17T09:00:24Z",
                          "publishedAt": "2025-01-17T09:00:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'm not sure why I did not get notifications on this thread. Sorry about that.\n\n. Do I just need to include cmath and then I can use bessel functions, etc? And then also use _q_point to get the xyz quadrature points?\n\nyes that's all you need to do\n\nAnd then I'm guessing the material file would need to be block restricted (or surface restricted) since I'm using the function to define boundary conditions.\n\nIf you need to define a BC, why are you creating a Material? I think you might want to create a BC object instead\n\nIf I go this route, what is the default value for \"h\"? Is it 1.0? Or is h the \"value\" parameter with the default set to 0?\n\nhM is defined by the material. So effectively I d say h=1 and M is the property\n\nDoes this option work, and/or is there a better way to do this than coding a material property?\n\nI would say the better way is to create a NeumannBC, somewhat similar to FunctionNeumannBC, but uses the hard coded function you need instead of a parameter",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11867704",
                          "updatedAt": "2025-01-17T14:23:53Z",
                          "publishedAt": "2025-01-17T14:23:52Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Okay I think I'm going to go this route, this makes sense. I should be able to do Dirichlet BCs too with this then. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11870304",
                          "updatedAt": "2025-01-17T18:27:30Z",
                          "publishedAt": "2025-01-17T18:27:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "The function parser is quite easy to extend. This would have to be done in libmesh to get the derivatives implemented as well.  If there is interest I could add bessel functions etc. However the standard library only supports a subset of those functions.  What exactly do you need?",
                  "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11804872",
                  "updatedAt": "2025-01-11T06:36:29Z",
                  "publishedAt": "2025-01-11T06:36:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I need the bessel & modified bessel functions of the first kind, zero order for now (i0 and j0), and the gamma function for non-integer \"factorials\". And if possible, the error function erf.\nI am testing different expressions for a hollow gaussian laser beam and so being able to implement these special functions directly in the input file would be very helpful.",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11809046",
                          "updatedAt": "2025-01-11T22:55:18Z",
                          "publishedAt": "2025-01-11T22:55:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Erf is already supported in our fparser fork: https://github.com/libMesh/libmesh/blob/5a56603358be17cdaa1c8449d02e9776de77ee21/contrib/fparser/fparser_ad.cc#L116\nLook in that file for the implementations of plog and erf. The bessel functions would be added the same way.",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11809124",
                          "updatedAt": "2025-01-11T23:11:23Z",
                          "publishedAt": "2025-01-11T23:11:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I see. thanks for sharing, I'll have to figure it out but it seems like that might work, thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11809131",
                          "updatedAt": "2025-01-11T23:13:20Z",
                          "publishedAt": "2025-01-11T23:13:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Erf is already supported in our fparser fork: https://github.com/libMesh/libmesh/blob/5a56603358be17cdaa1c8449d02e9776de77ee21/contrib/fparser/fparser_ad.cc#L116\nLook in that file for the implementations of plog and erf. The bessel functions would be added the same way.\n\nWould you recommend editing the source file or would creating a copy and using it in my app work? And where can I find the source file? I searched for fparser_ad.cc in both moose and my app folders and couldn't find it there",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11823959",
                          "updatedAt": "2025-01-13T19:30:14Z",
                          "publishedAt": "2025-01-13T19:30:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this is in libMesh. You d have to install libmesh from source with the updated source\nhttps://mooseframework.inl.gov/getting_started/installation/gcc_install_moose.html",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11824041",
                          "updatedAt": "2025-01-13T19:39:36Z",
                          "publishedAt": "2025-01-13T19:39:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "i see. doing that on the hpc I'm using will likely need extra permissions so I'm gonna try creating an object file instead",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11824915",
                          "updatedAt": "2025-01-13T21:24:02Z",
                          "publishedAt": "2025-01-13T21:24:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you should be able to install everything without extra permissions.\nBut here you just need to install libmesh yourself from source. GCC/MPI and PETSc can be from a pre-existing install (installing GCC/mpi on your own is annoying, but feel free to install petsc yourself it s the same difficulty as libmesh with our workflow)",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11824943",
                          "updatedAt": "2025-01-13T21:28:07Z",
                          "publishedAt": "2025-01-13T21:28:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I think the issue is that I don't fully understand where/how all the parts come together. I am using a conda (mamba) environment for MOOSE locally, and I used the following instructions to install it on the HPC (\"purple\" is the name of my app):\nSteps to start using a newer moose\nStep 1: Pull or clone all the relevant things\nmodule purge\nmodule load singularity\nsingularity pull docker://idaholab/moose:latest\ngit clone https://github.com/idaholab/moose.git\n\nStep 2: Create the app skeleton\nmodule purge\nmodule load singularity\nsingularity exec -B /projects:/projects -B `pwd`/moose:/opt/moose moose_latest.sif /opt/moose/scripts/stork.sh purple\n\nStep 3: create a helper script to build the \"purple\" app inside of the \"purple\" folder.\nbuild.sh\n# Alternate GCC 12\nsource /opt/rh/gcc-toolset-12/enable\n\n#\n# Begin environment for moose-mpi-x86_64:765e804\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"mpi\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-mpi-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-mpi-x86_64:765e804\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"765e804\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"765e804\"\n\n# Fix locale warnings\nexport LC_ALL=C\n\n#\n# Begin environment for moose-petsc-mpich-x86_64:acb1bfc\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"petsc\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-petsc-mpich-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-petsc-mpich-x86_64:acb1bfc\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"acb1bfc\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"acb1bfc\"\n\n# Set the MPI environment\nsource /opt/mpi/use-mpich\n\n# From moose-petsc\nexport PETSC_DIR=/opt/petsc\n\n#\n# Begin environment for moose-libmesh-mpich-x86_64:0e90306\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"libmesh\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-libmesh-mpich-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-libmesh-mpich-x86_64:0e90306\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"0e90306\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"0e90306\"\n\n# From moose-libmesh\nexport LIBMESH_DIR=/opt/libmesh\nif ! $CC --version | grep --quiet \"clang version 16\"; then\n  export VTKINCLUDE_DIR=/opt/vtk/include/vtk-9.3\n  export VTKLIB_DIR=/opt/vtk/lib\nfi\n\n#\n# Begin environment for moose-dev-mpich-x86_64:28a1964\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"moose-dev\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-dev-mpich-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-dev-mpich-x86_64:28a1964\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"28a1964\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"28a1964\"\n\nexport PATH=/opt/miniforge3/bin:/opt/code-server/bin:$PATH\nsource activate /opt/miniforge3/envs/moose\n\nexport WASP_DIR=/opt/wasp\nexport PATH=${WASP_DIR}/bin:$PATH\n# Make libtorch visible to moose\nexport LIBTORCH_DIR=/opt/libtorch\n# Adding this to not get GPU initialization errors from MPICH\nexport MPIR_CVAR_ENABLE_GPU=0\n\n#\n# Begin environment for moose-dev-mpich-x86_64:28a1964\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"moose-dev\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-dev-mpich-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-dev-mpich-x86_64:28a1964\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"28a1964\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"28a1964\"\n\n#\n# Begin environment for moose-mpich-x86_64:19f1734\n#\nexport MOOSE_APPTAINER_GENERATOR_LIBRARY=\"app\"\nexport MOOSE_APPTAINER_GENERATOR_NAME=\"moose-mpich-x86_64\"\nexport MOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=\"moose-mpich-x86_64:19f1734\"\nexport MOOSE_APPTAINER_GENERATOR_TAG=\"19f1734\"\nexport MOOSE_APPTAINER_GENERATOR_VERSION=\"19f1734\"\n\nexport PATH=/opt/moose/bin:/opt/code-server-moose/bin:$PATH\nexport INSTALLED_BINARIES=moose-opt:exodiff:hit\nexport MOOSE_LANGUAGE_SERVER=moose-opt\nexport INSTALLED_BINARIES=${INSTALLED_BINARIES}:moose_test-opt\n\n\nmake -j 16\n\nStep 4: invoke build.sh with singularity (and from inside of the \"purple\" folder)\nmodule purge\nmodule load singularity\nsingularity exec -B /projects:/projects -B `pwd`/../moose:/opt/moose ../moose_latest.sif bash build.sh\n\nWhere exactly does libmesh fit in? I see it as part of the steps, so isn't it already installed? How do I access the file to make updates to it to add special functions? I don't really have much of a background on this, so I really only copied the steps to install it in the first place. And I think they had to give my account some kind of permission to be able to do this (not entirely sure).",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11847503",
                          "updatedAt": "2025-01-15T20:40:06Z",
                          "publishedAt": "2025-01-15T20:38:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "libmesh is already built in this container solution.\nSo unfortunately it just does not fit in here, you cant rebuild a new libmesh with the new fparser\nSo instead, follow these instructions:\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html\nEXCEPT instead of install moose-dev, install moose-petsc in that environment.\nThen go in moose/libmesh, set it up like you want with the new fparser\nthen go in moose/scripts and run ./update_and_rebuild_libmesh.sh --skip-submodule-update",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11849413",
                          "updatedAt": "2025-01-16T01:36:00Z",
                          "publishedAt": "2025-01-16T01:35:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "okay, I think we had issues using a conda installation in the past (on the hpc) so I will try it locally first and then try to get the fparser update working",
                          "url": "https://github.com/idaholab/moose/discussions/29677#discussioncomment-11856652",
                          "updatedAt": "2025-01-16T16:02:09Z",
                          "publishedAt": "2025-01-16T16:02:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Retrieve same material property from multiple materials",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHow can I modify `ElementMaterialSampler' (or make something like it) to handle the case where I have multiple block-restricted Materials defined? Each Material will be the same class so the properties will be named consistently.",
          "url": "https://github.com/idaholab/moose/discussions/29695",
          "updatedAt": "2025-01-17T17:49:33Z",
          "publishedAt": "2025-01-16T23:21:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo what do you want from it? A block restricted (only 1 or n blocks) sampling?\nOr sampling over all elements with whichever property is defined on each block?",
                  "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860717",
                  "updatedAt": "2025-01-16T23:54:37Z",
                  "publishedAt": "2025-01-16T23:54:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "The latter. The same property is defined everywhere, but is on multiple block-restricted materials",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860770",
                          "updatedAt": "2025-01-17T00:07:15Z",
                          "publishedAt": "2025-01-17T00:07:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "that should be the default though? as in it already works this way. When it samples on each block, it will use the local definition of the property",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860823",
                          "updatedAt": "2025-01-17T00:18:50Z",
                          "publishedAt": "2025-01-17T00:18:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "But it only takes a single MaterialName as a parameter. I'm thinking of the case where I have Material1 on block 1 and Material2 on block 2, etc.... They all declare the same property name(s). I want to sample those properties everywhere.",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860858",
                          "updatedAt": "2025-01-17T00:25:13Z",
                          "publishedAt": "2025-01-17T00:25:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "What I want is to accept multiple MaterialNames (Material1, Material2, etc..). I'm ok with specifying which properties I want if that makes it easier.",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860868",
                          "updatedAt": "2025-01-17T00:27:15Z",
                          "publishedAt": "2025-01-17T00:27:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh good point\nok so let's have another parameter then that is just \"material_property_names\"\neither \"material\" or \"material_property_names\" must be provided\nIf material is provided, get the property list from that\nif material_property_names is provided, then use those\nI'm saying this without looking at the code. please let me know if this does not work",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860887",
                          "updatedAt": "2025-01-17T00:31:09Z",
                          "publishedAt": "2025-01-17T00:31:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What I want is to accept multiple MaterialNames (Material1, Material2, etc..). I'm ok with specifying which properties I want if that makes it easier.\n\nthat seems ok too.\nMultiple materials then means the union of all their properties.\nI would suspect you will need to be a little careful if you do this that way with the block restriction. Property 'a' could be definied by M1 on block 1 and 2, and property 'b' could be defined by Material M2 on block 1 only.",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11860965",
                          "updatedAt": "2025-01-17T00:48:29Z",
                          "publishedAt": "2025-01-17T00:48:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Maybe the intersection of their properties then?\nOr maybe we do all properties if a single material is supplied, otherwise a list of properties is needed",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11861341",
                          "updatedAt": "2025-01-17T01:30:35Z",
                          "publishedAt": "2025-01-17T01:30:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "That way we preserve the default behavior",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11861348",
                          "updatedAt": "2025-01-17T01:30:58Z",
                          "publishedAt": "2025-01-17T01:30:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "@GiudGiud I already hit a snag. getMaterialByName() checks that your material is defined on all blocks in this method",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11868070",
                          "updatedAt": "2025-01-17T14:53:23Z",
                          "publishedAt": "2025-01-17T14:53:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Oh wait, that's only being used in the constructor as a check. We can skip that when multiple materials are used.",
                          "url": "https://github.com/idaholab/moose/discussions/29695#discussioncomment-11868244",
                          "updatedAt": "2025-01-17T15:09:26Z",
                          "publishedAt": "2025-01-17T15:09:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "EigenStrain contribution",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I have two scripts, one with eingenstrain and the other without contribution.\n [Materials]\n    [elasticity_tensor_phase0]\n      type = ComputeElasticityTensorCP\n      C_ijkl = '2.906e5 1.87e5 1.87e5 2.906e5 1.87e5 2.906e5 1.142e5 1.142e5 1.142e5'\n      fill_method = symmetric9\n      euler_angle_1 = 0.0\n      euler_angle_2 = 0.0\n      euler_angle_3 = 0.0\n      base_name = phase0\n    []\n    [stress_phase0]\n      type = ComputeMultipleCrystalPlasticityStress\n      crystal_plasticity_models = 'trial_xtalpl_phase0'\n      tan_mod_type = exact\n      rtol = 1e-08\n      base_name = phase0\n    []\n    [trial_xtalpl_phase0]\n      type = CrystalPlasticityKalidindiUpdate\n      number_slip_systems = 48\n      slip_sys_file_name = input_slip_sys_bcc48.txt\n      crystal_lattice_type = BCC\n      resistance_tol = 0.01\n      r = 1.4             \n      h = 6000            \n      t_sat = 598.5        \n      gss_a = 1.5         \n      ao = 0.001           \n      xm = 0.017             \n      gss_initial = 465.5\n      base_name = phase0\n    []\n\n    [./strain_phase0]\n      type = ComputeFiniteStrain\n      displacements = 'disp_x disp_y'\n      base_name = phase0\n      eigenstrain_names = 'eigenstrain_phase0'\n    [../]\n    \n    [./eigen_strain_phase0]\n      type = ComputeEigenstrain\n      base_name = phase0\n      eigen_base = '1 1 1 0 0 0'\n      prefactor = '0.2224 0.9493 0.2224'\n      eigenstrain_name = 'eigenstrain_phase0'\n    [../]\n\n  \n    [elasticity_tensor_phase1]\n      type = ComputeElasticityTensorCP\n      C_ijkl = '2.721e5 1.69e5 1.69e5 2.721e5 1.69e5 2.721e5 1.31e5 1.31e5 1.31e5'\n      fill_method = symmetric9\n      euler_angle_1 = 0.0\n      euler_angle_2 = 0.0\n      euler_angle_3 = 0.0\n      base_name = phase1\n    []\n    [stress_phase1]\n      type = ComputeMultipleCrystalPlasticityStress\n      crystal_plasticity_models = 'trial_xtalpl_phase1'\n      tan_mod_type = exact\n      rtol = 1e-08\n      base_name = phase1\n    []\n    [trial_xtalpl_phase1]\n      type = CrystalPlasticityKalidindiUpdate\n      number_slip_systems = 12\n      slip_sys_file_name = input_slip_sys.txt\n      crystal_lattice_type = FCC\n      resistance_tol = 0.01\n      r = 1.0             \n      h = 6000            \n      t_sat = 598.5        \n      gss_a = 1.5         \n      ao = 0.001           \n      xm = 0.017             \n      gss_initial = 465.5 \n      base_name = phase1\n    []\n    [./strain_phase1]\n      type = ComputeFiniteStrain\n      displacements = 'disp_x disp_y'\n      base_name = phase1\n    [../]\n  \n    \n    # Switching functions for each phase\n    [./h0]\n      type = SwitchingFunctionMultiPhaseMaterial\n      phase_etas = eta0\n      all_etas = 'eta0 eta1'\n      h_name = h0\n    [../]\n    [./h1]\n      type = SwitchingFunctionMultiPhaseMaterial\n      phase_etas = eta1\n      all_etas = 'eta0 eta1'\n      h_name = h1\n    [../]\n   \n    # Generate the global stress from the phase stresses\n    [./global_stress]\n      type = MultiPhaseStressMaterial\n      phase_base = 'phase0 phase1'\n      h          = 'h0     h1'\n    [../]   \n []\n\nBelow is my ComputeEigenstrain.C with modifications\n//* This file is part of the MOOSE framework\n//* https://www.mooseframework.org\n//*\n//* All rights reserved, see COPYRIGHT for full restrictions\n//* https://github.com/idaholab/moose/blob/master/COPYRIGHT\n//*\n//* Licensed under LGPL 2.1, please see LICENSE for details\n//* https://www.gnu.org/licenses/lgpl-2.1.html\n\n#include \"ComputeEigenstrain.h\"\n\nregisterMooseObject(\"SolidMechanicsApp\", ComputeEigenstrain);\nregisterMooseObject(\"SolidMechanicsApp\", ADComputeEigenstrain);\n\ntemplate <bool is_ad>\nInputParameters\nComputeEigenstrainTempl<is_ad>::validParams()\n{\n  InputParameters params = ComputeEigenstrainBase::validParams();\n  params.addClassDescription(\"Computes a constant Eigenstrain with anisotropic scaling factors.\"); \n\n  params.addRequiredParam<std::vector<Real>>(\n      \"eigen_base\", \"Vector of values defining the constant base tensor for the Eigenstrain\");\n\n  // Set default values for the prefactor to {1.0, 1.0, 1.0} if not provided, ensuring isotropic scaling\n  params.addParam<std::vector<Real>>(\n      \"prefactor\", std::vector<Real>{1.0, 1.0, 1.0}, \n      \"Vector of values defining the variable dependence in each principal direction (x, y, z). The vector should normalize to 1.\");\n\n  return params;\n}\n\ntemplate <bool is_ad>\nComputeEigenstrainTempl<is_ad>::ComputeEigenstrainTempl(const InputParameters & parameters)\n  : ComputeEigenstrainBaseTempl<is_ad>(parameters),\n   _prefactor(this->template getParam<std::vector<Real>>(\"prefactor\")) // Changed to get prefactor as vector\n{\n  // Ensure that _prefactor has exactly 3 values (for x, y, z)\n  mooseAssert(_prefactor.size() == 3, \"Prefactor must have exactly three components.\"); // Added check for vector size\n\n  // Calculate the norm of the _prefactor vector\n  Real norm = std::sqrt(_prefactor[0] * _prefactor[0] + \n                        _prefactor[1] * _prefactor[1] + \n                        _prefactor[2] * _prefactor[2]);\n\n  // Check if the norm of the prefactor vector is approximately 1\n  if (!MooseUtils::absoluteFuzzyEqual(norm, 1.0,1e-4))\n     this->paramError(\"prefactor\", \"Prefactor should have a norm of one.\");\n\n  _eigen_base_tensor.fillFromInputVector(this->template getParam<std::vector<Real>>(\"eigen_base\"));\n}\n\ntemplate <bool is_ad>\nvoid\nComputeEigenstrainTempl<is_ad>::computeQpEigenstrain()\n{\n  // Using anisotropic scaling factors from _prefactor\n  for (unsigned int i = 0; i < 3; ++i)\n  {\n    _eigenstrain[_qp](i, i) = _eigen_base_tensor(i, i) * _prefactor[i]; // Apply different scaling to each diagonal component\n  }\n}\n\nYet the simulation results at the same timestep for both scripts remain the same in terms of stress or stain.\nBelow are snippets of one timestep.(The results show timestep-stress in x direction-von misses stress- strain ) In that order.\n (eigen strain)\n (no eigen strain)\nWhat could be the problem?\n@tophmatthews @GiudGiud",
          "url": "https://github.com/idaholab/moose/discussions/28558",
          "updatedAt": "2025-01-17T16:03:23Z",
          "publishedAt": "2024-09-06T14:24:44Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI dont know. I would check the units, see if there isnt an order of magnitude mistake there, it is fairly common.\nThe eigenstrain base value of 1 seems small to me, is that what is being used in other examples?",
                  "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10582344",
                  "updatedAt": "2024-09-08T14:15:32Z",
                  "publishedAt": "2024-09-08T14:15:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I thought the eigenstrain base works as the voghit notations. Hence my reason for \"1 1 1 0 0 0' is the one unit in the x y and z directions.",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10582377",
                          "updatedAt": "2024-09-08T14:22:18Z",
                          "publishedAt": "2024-09-08T14:22:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "could be. Not my field at this point",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10583188",
                          "updatedAt": "2024-09-08T16:36:06Z",
                          "publishedAt": "2024-09-08T16:36:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I would try without the normalization too.  And if you can tag anyone who can help with this I would really appreciate.",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10593531",
                          "updatedAt": "2024-09-09T16:34:10Z",
                          "publishedAt": "2024-09-09T16:33:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@laagesen ?",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10593641",
                          "updatedAt": "2024-09-09T16:44:53Z",
                          "publishedAt": "2024-09-09T16:44:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "you are right that eigenstrain base follows the Voigt convention, so '1 1 1 0 0 0' is dilatational eigenstrain that is uniform in x, y, z directions. However I'm not sure why you are modifying ComputeEigenstrain or why you are modifying to make it possible to specify 3 different prefactors. If you want an eigenstrain that is different in different directions you can just specify how much you want for each direction in eigen_base- are you trying to do something different from that?",
                  "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10594956",
                  "updatedAt": "2024-09-09T19:25:48Z",
                  "publishedAt": "2024-09-09T19:25:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes, I am trying to get an eigenstrain that is different in each direction. @laagesen\nI want to add this eigenstrain for one of my precipitates I found in a paper:\n\nWhat would be the best way to represent this eigenstrain variant(picture above) in my script.\nThis thread explains my situation better and how we got here : #28474 (comment)",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10595192",
                          "updatedAt": "2024-09-09T20:04:02Z",
                          "publishedAt": "2024-09-09T20:04:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "you should just be able to specify that as\neigen_base = '0.0067 0.0286 0.0067 0 0 0'\nor\neigen_base = '0.0067 0.0286 0.0067'\nwithin the source code, RankTwoTensor.h lines 654-689 shows a bunch of examples of how the tensor is created based on how eigen_base is specified (though a call to the function fillFromInputVector)",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10595525",
                          "updatedAt": "2024-09-09T20:53:20Z",
                          "publishedAt": "2024-09-09T20:53:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "If you want to use an eigenstrain with one of the update-based crystal plasticity models, you should use the crystal plasticity-specific base class, with multiplicative decomposition of the deformation tensor that includes an eigenstrain specific decomposition tensor; see the base class.\nYou may be able to use the existing ComputeCrystalPlasticityThermalEigenstrain by providing a \"dummy\" constant auxvariable, set equal to 1, instead of a temperature variable, and using the values from your reference as the arguments to the thermal_expansion_coefficients parameter.",
                  "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10595353",
                  "updatedAt": "2024-09-09T20:28:42Z",
                  "publishedAt": "2024-09-09T20:28:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "It this how you explained it's supposed to be implemented:\n[AuxVariables]\n[./dummy_temperature]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n[]\n\n[AuxKernels]\n[./set_dummy_temperature]\n      type = ConstantAux\n      variable = dummy_temperature\n      value = 1.0  \n    [../]\n[]\n\n [elasticity_tensor_phase0]\n      type = ComputeElasticityTensorCP\n      C_ijkl = '2.906e5 1.87e5 1.87e5 2.906e5 1.87e5 2.906e5 1.142e5 1.142e5 1.142e5'\n      fill_method = symmetric9\n      euler_angle_1 = 0.0\n      euler_angle_2 = 0.0\n      euler_angle_3 = 0.0\n      base_name = phase0\n    []\n    [stress_phase0]\n      type = ComputeMultipleCrystalPlasticityStress\n      crystal_plasticity_models = 'trial_xtalpl_phase0'\n      tan_mod_type = exact\n      rtol = 1e-08\n      base_name = phase0\n    []\n    [trial_xtalpl_phase0]\n      type = CrystalPlasticityKalidindiUpdate\n      number_slip_systems = 12\n      slip_sys_file_name = input_slip_sys.txt\n      crystal_lattice_type = BCC\n      resistance_tol = 0.01\n      r = 1.4             \n      h = 6000            \n      t_sat = 598.5        \n      gss_a = 1.5         \n      ao = 0.001           \n      xm = 0.017             \n      gss_initial = 600\n      base_name = phase0\n    []\n    [eigenstrain_0]\n      type = ComputeCrystalPlasticityThermalEigenstrain\n      eigenstrain_name = eigenstrain_0\n      deformation_gradient_name = phase0_deformation_gradient_0\n      temperature = dummy_temperature\n      thermal_expansion_coefficients = '0.0067 0.0286 0.0067'\n      base_name = phase0\n    []\n\n\n    [./strain_phase0]\n      type = ComputeFiniteStrain\n      displacements = 'disp_x disp_y'\n      base_name = phase0\n     # eigenstrain_names = 'eigenstrain_phase0'\n    [../]\n\n    [elasticity_tensor_phase1]\n      type = ComputeElasticityTensorCP\n      C_ijkl = '2.721e5 1.69e5 1.69e5 2.721e5 1.69e5 2.721e5 1.31e5 1.31e5 1.31e5'\n      fill_method = symmetric9\n      euler_angle_1 = 0.0\n      euler_angle_2 = 0.0\n      euler_angle_3 = 0.0\n      base_name = phase1\n    []\n    [stress_phase1]\n      type = ComputeMultipleCrystalPlasticityStress\n      crystal_plasticity_models = 'trial_xtalpl_phase1'\n      tan_mod_type = exact\n      rtol = 1e-08\n      base_name = phase1\n    []\n    [trial_xtalpl_phase1]\n      type = CrystalPlasticityKalidindiUpdate\n      number_slip_systems = 12\n      slip_sys_file_name = input_slip_sys.txt\n      crystal_lattice_type = FCC\n      resistance_tol = 0.01\n      r = 1.0             \n      h = 6000            \n      t_sat = 598.5        \n      gss_a = 1.5         \n      ao = 0.001           \n      xm = 0.017             \n      gss_initial = 465.5 \n      base_name = phase1\n    []\n    [./strain_phase1]\n      type = ComputeFiniteStrain\n      displacements = 'disp_x disp_y'\n      base_name = phase1\n    [../]\n    \n    [eigenstrain_1]\n      type = ComputeCrystalPlasticityThermalEigenstrain\n      eigenstrain_name =  eigenstrain_1\n      deformation_gradient_name = phase1_deformation_gradient_1\n      temperature = dummy_temperature\n      thermal_expansion_coefficients = '0.0067 0.0286 0.0067'\n      base_name = phase1\n    []\n  []\n\nI get the error below\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.check_inp(moose_srv)\nMaterial property 'crysrot', requested by 'eigenstrain_0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'crysrot', requested by 'eigenstrain_1' is not defined on block 0",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10608364",
                          "updatedAt": "2024-09-11T01:19:53Z",
                          "publishedAt": "2024-09-11T01:19:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Below is my debug show_material_props\n   Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       eigenstrain_0\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/ddummy_temperature\" \"phase0_eigenstrain_0\" \n                             \"phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \"phase0_phase0_deformation_gradient_0\" \n                             \n      Material Name:       strain_phase0\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       eigenstrain_1\n      Property Names:      \"dphase1_phase1_deformation_gradient_1/ddummy_temperature\" \"phase1_eigenstrain_1\" \n                             \"phase1_eigenstrain_1_lattice_thermal_expansion_coefficients\" \"phase1_phase1_deformation_gradient_1\" \n                             \n      Material Name:       h0\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\n    Active Face Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_face\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_face\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0_face\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       eigenstrain_0_face\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/ddummy_temperature\" \"phase0_eigenstrain_0\" \n                             \"phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \"phase0_phase0_deformation_gradient_0\" \n                             \n      Material Name:       strain_phase0_face\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_face\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_face\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_face\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_face\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       eigenstrain_1_face\n      Property Names:      \"dphase1_phase1_deformation_gradient_1/ddummy_temperature\" \"phase1_eigenstrain_1\" \n                             \"phase1_eigenstrain_1_lattice_thermal_expansion_coefficients\" \"phase1_phase1_deformation_gradient_1\" \n                             \n      Material Name:       h0_face\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_face\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_face\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Neighboring Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_neighbor\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_neighbor\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0_neighbor\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       eigenstrain_0_neighbor\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/ddummy_temperature\" \"phase0_eigenstrain_0\" \n                             \"phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \"phase0_phase0_deformation_gradient_0\" \n                             \n      Material Name:       strain_phase0_neighbor\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_neighbor\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_neighbor\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_neighbor\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_neighbor\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       eigenstrain_1_neighbor\n      Property Names:      \"dphase1_phase1_deformation_gradient_1/ddummy_temperature\" \"phase1_eigenstrain_1\" \n                             \"phase1_eigenstrain_1_lattice_thermal_expansion_coefficients\" \"phase1_phase1_deformation_gradient_1\" \n                             \n      Material Name:       h0_neighbor\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_neighbor\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_neighbor\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Boundary Materials:",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10608391",
                          "updatedAt": "2024-09-11T01:25:38Z",
                          "publishedAt": "2024-09-11T01:25:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "there are prefix before crysrot, namely phase1 and phase2_",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10609118",
                          "updatedAt": "2024-09-11T03:23:03Z",
                          "publishedAt": "2024-09-11T03:23:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes, I was asking how to solve that. Crysrot is not in my input script. Do I have to remove  \"_base_name +\" in the source code or add \"phase_crysrot\" to the source code?",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10609177",
                          "updatedAt": "2024-09-11T03:32:11Z",
                          "publishedAt": "2024-09-11T03:32:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you pass one of the prefixes in your input files for crysrot? Or do you need some sort of phase-homogenized property?",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10609204",
                          "updatedAt": "2024-09-11T03:36:26Z",
                          "publishedAt": "2024-09-11T03:36:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This does not tell us what you are trying to do.\ncrys_rot is already defined, it just has a prefix",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10617265",
                          "updatedAt": "2024-09-11T17:23:42Z",
                          "publishedAt": "2024-09-11T17:23:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "What I was trying to show is I do not have crysrot in my input script so I am quite unsure where to pass it as a prefix?",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10617321",
                          "updatedAt": "2024-09-11T17:29:03Z",
                          "publishedAt": "2024-09-11T17:29:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the error message told you which materials are complaining\nMaterial property 'crysrot', requested by 'eigenstrain_0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'crysrot', requested by 'eigenstrain_1' is not defined on block 0\n\nso these should use a prefix / base_name parameter to make it work. probably base_name = phase0 for one, phase 1 for the other",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10617338",
                          "updatedAt": "2024-09-11T17:31:31Z",
                          "publishedAt": "2024-09-11T17:31:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "maybe I am a little bit confused about your suggestions. This is the blocks I have but still the same error.\n [phase0_eigenstrain_0]\n      type = ComputeCrystalPlasticityThermalEigenstrain\n      eigenstrain_name = phase0_eigenstrain_0\n      deformation_gradient_name = phase0_deformation_gradient_0\n      temperature = dummy_temperature\n      thermal_expansion_coefficients = '0.0067 0.0286 0.0067'\n      base_name = phase0\n    []\n\n [phase1_eigenstrain_1]\n      type = ComputeCrystalPlasticityThermalEigenstrain\n      eigenstrain_name =  phase1_eigenstrain_1\n      deformation_gradient_name = phase1_deformation_gradient_1\n      temperature = dummy_temperature\n      thermal_expansion_coefficients = '0.0067 0.0286 0.0067'\n      base_name = phase1\n    []",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10617524",
                          "updatedAt": "2024-09-11T17:49:00Z",
                          "publishedAt": "2024-09-11T17:48:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok looks like the code does not work for this yet\nin ComputeCrystalPlasticityThermalEigenstrainBase\ndo\n    _crysrot(getMaterialProperty<RankTwoTensor>(_base_name + \n        \"crysrot\")) /",
                          "url": "https://github.com/idaholab/moose/discussions/28558#discussioncomment-10617631",
                          "updatedAt": "2024-09-11T18:01:33Z",
                          "publishedAt": "2024-09-11T18:01:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "New Kernel terms in Diffusion equation",
          "author": {
            "login": "sidharthsarmah"
          },
          "bodyText": "Hi, I am trying to form an analogy between the heat and diffusion equation, can you please help me sort the additional terms involved?\nPlease note this is a coupled problem, where the diffusion depends on the stress and concentration gradient, please suggest solving it.\nHeat Equation available in MOOSE:",
          "url": "https://github.com/idaholab/moose/discussions/21977",
          "updatedAt": "2025-01-17T04:02:35Z",
          "publishedAt": "2022-08-30T22:35:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou should follow the application development tutorial, these terms are not very complicated you could code that up.\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/index.html\nAre these all regular field variables (eg 1 value per quadrature point) or are some of them vectors/tensors?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3513307",
                  "updatedAt": "2022-08-31T00:01:19Z",
                  "publishedAt": "2022-08-31T00:01:18Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "The stress gradient term need some attention. The rest terms are straightforward.",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3522122",
                  "updatedAt": "2022-08-31T22:36:11Z",
                  "publishedAt": "2022-08-31T22:36:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi, could you please help me with all these terms, I am really new to MOOSE.\nCan we discuss each of these terms separately.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3696203",
                          "updatedAt": "2022-09-21T04:10:40Z",
                          "publishedAt": "2022-09-21T04:10:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Term 1: is it correct?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3696222",
                          "updatedAt": "2024-03-17T16:09:45Z",
                          "publishedAt": "2022-09-21T04:17:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Term 2: I have learn to us the time derivative, please let me know if this is the right way?how to implement this variables?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3696244",
                          "updatedAt": "2024-03-17T16:10:04Z",
                          "publishedAt": "2022-09-21T04:25:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nplease use triple back quotes to format the code pasted\nThe diffusion term looks good\nThe time derivative is not finished. You should use the coupleable interface to get the values of Ct in the coefficient in front of the derivatives. CoupledForce is an example of a kernel doing that.\nYou also need to add parameters for Ct and theta_l\notherwise I dont see an issue\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3703295",
                          "updatedAt": "2022-09-21T18:57:16Z",
                          "publishedAt": "2022-09-21T18:56:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Second term: I have tried to implement the varied coefficient of the time derivative. Since, coupled variable concept in MOOSE is new to me, I have considered theta_t = 0.0005. But the coefficient function with the coupled variable (Ct = trap_conc) is showing an error, please help.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3738486",
                          "updatedAt": "2024-03-17T16:10:21Z",
                          "publishedAt": "2022-09-27T00:16:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Seems you are using material properties not the coupleable interface\n  v = trap_conc\n    d_function = 1 + (1-0.0005)*(trap_conc/lattice_conc)\n\nthis seems problematic.\nThe d_function is supposed to be the name of a material property but you are passing a parsed expression.\nThis parsed expression should be in a DerivativeParsedMaterial, which will define all the material properties then you can retrieve them in the kernel as you currently do",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3738655",
                          "updatedAt": "2022-09-27T00:51:30Z",
                          "publishedAt": "2022-09-27T00:51:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "Term 2: I tried implementing the coupled time derivative Kernel with function using DerivativeParsedMaterial, but there is an error, can you suggest how do I correct it, both C_t(trap_conc) and \\theta-t are the coupled variable with the time derivative variable C_l(lattice_conc)?",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766421",
                  "updatedAt": "2024-03-17T16:10:35Z",
                  "publishedAt": "2022-09-29T20:43:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "[./diff_time_function]\n    type = DerivativeParsedMaterial\n    function = '1 + (1 - theta_t)*(trap_conc/lattice_conc)'\n    args = 'lattice_conc trap_conc theta_t'\n    f_name = ft\n    material_property_names = 'lattice_conc trap_conc theta_t'\n    derivative_order = 1\n    outputs = exodus\n  [../]\n\ncannot have both the terms in args or material_property_names\nThey can't be variables and material properties",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766516",
                          "updatedAt": "2022-09-29T21:04:29Z",
                          "publishedAt": "2022-09-29T20:58:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Can you mention what changes I need to make to obtain the solution?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766525",
                          "updatedAt": "2022-09-29T21:00:26Z",
                          "publishedAt": "2022-09-29T21:00:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "'lattice_conc trap_conc theta_t' can be either args (variables, the parameter is very poorly named, @dschwen for awareness) or material_property_names. NOT both",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766531",
                          "updatedAt": "2022-09-29T21:02:25Z",
                          "publishedAt": "2022-09-29T21:02:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "What is the difference between arg and materials property names?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766537",
                          "updatedAt": "2022-09-29T21:03:26Z",
                          "publishedAt": "2022-09-29T21:03:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "please read the docs:\nhttps://mooseframework.inl.gov/source/materials/DerivativeParsedMaterial.html",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766543",
                          "updatedAt": "2022-09-29T21:04:01Z",
                          "publishedAt": "2022-09-29T21:04:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Ok thank you, args means the variables uses in the equation, I have theta_T, C_T and C_L.\nmaterials-props are basically properties associated with the material (eg, density, conductivity etc). Since, the equation contains none, I can ignore this parameter?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766571",
                          "updatedAt": "2022-09-29T21:09:12Z",
                          "publishedAt": "2022-09-29T21:09:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "<img width=\"570\" alt=\"Screen Shot 2022-09-29 at 5 11 38 PM\" src=\"https://user-\nI have made these changes and am obtaining this error\n\n#************KERNELS******************\n\n[Kernels]\n \n  [./diff]\n    type = HDiffusion\n    variable = lattice_conc\n    diffusivity = 4.5e-02\n  [../]\n\n\n[]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766587",
                          "updatedAt": "2023-03-14T20:35:56Z",
                          "publishedAt": "2022-09-29T21:12:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Looking at your materials block, I think they are all variables indeed",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3766723",
                          "updatedAt": "2022-09-29T21:39:35Z",
                          "publishedAt": "2022-09-29T21:39:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "I think I am able to implement this coupled time derivative term, could you please check if it is correct?\nBut I have two coupled variables in this equation, C_T and \\theta_T. In this, I have considered \\theta_T as a constant = 0.0005, but I want to also make it a variable, can you help me what changes I need to make in the time derivative Kernel?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3789735",
                          "updatedAt": "2023-03-14T20:36:08Z",
                          "publishedAt": "2022-10-03T18:18:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "@sidharthsarmah The process you are going through is the so-called verification stage in code development. In FEM code, typically two methods are used in this process:\n\nPatch test: You'll need to setup a problem that is as simple as possible in which the analytical solution is known, and the solution can be exactly matched by the basis function of your choice. For example, you can create a single-element cube, apply Dirichlet BC on one side, and apply Neumann BC on the opposite side. By applying your kernels one at a time, you can easily match the numerical solution (given by MOOSE) with the analytical solution.\nMethod of manufactured solution: This method is documented here https://mooseframework.inl.gov/python/mms.html. In essence, you will first manufacture an arbitrary, non-homogeneous solution, and then work your way back to derive the corresponding \"body force\" that would result in the manufactured solution. Even if the manufactured solution can't be exactly represented on the basis function of your choice, you should still see optimal order of convergence by looking at the appropriate error measure.\n\nLet us know if you have specific questions regarding either method.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3795757",
                          "updatedAt": "2022-10-04T12:50:54Z",
                          "publishedAt": "2022-10-04T12:50:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\nSolve failed and timestep already at or below dtmin, cannot continue!\n@GiudGiud\n\n\nI have rearranged the equation to a two variable terms(C_L -> lattice_conc, C_T -> trap_conc), can you please check if the Kernels are correct?\n\n\nAlso the error in convergence is due to the values that I have selected and has nothing to do with the kernels right?",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3872606",
                  "updatedAt": "2023-03-14T20:36:22Z",
                  "publishedAt": "2022-10-13T18:04:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nPlease dont post screenshots, they are not searchable by others.\nThe error in convergence is likely because the kernels are not implemented right.\nIf I were you I'd try implementing them with AD, at least you wont have to worry about the Jacobian\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3872701",
                          "updatedAt": "2022-10-13T18:18:32Z",
                          "publishedAt": "2022-10-13T18:18:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nThe material property coefficient seems right now. But why are the parameters of the time derivative kernel somewhat similar?\n    f_name = ft\n    args = 'lattice_conc trap_conc'\n\nyou only need to bring in the coefficient?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3887536",
                          "updatedAt": "2022-10-16T02:39:05Z",
                          "publishedAt": "2022-10-16T02:39:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nSo, the DerivativeParsedMaterial contains the coefficient equation (fig attached) that will be used in the time derivative kernel (HTimeDerivative) right?\nIn the DerivativeParsedMaterial:\nI have declared the equation ([function = '1 + (trap_conc/lattice_conc)*(1 - 1/(((NL+lattice_conc)/lattice_conc)exp(WB/(RT))+1))']),\nname to address the above equation which will be used in the HTimeDerivative kernel ([f_name = ft]),\nand then the arguments (variables used there [args = 'lattice_conc trap_conc']),\nand then the constants ([material_property_names = 'NL\tWB\tR\tT'])\nNow the equation, will be used in the HTimeDerivative kernel, which is called ([f_name = ft]),\nand that includes the arguments ([args = 'lattice_conc trap_conc']).\nwhich are basically coupled (CL = lattice_conc, CT=trap_conc).\nYou meant to say, I don't need to declare the arguments, here again, i.e. reduce it to:\nPLEASE SUGGEST, Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3891623",
                          "updatedAt": "2023-03-14T20:37:09Z",
                          "publishedAt": "2022-10-16T23:04:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yes I dont think you should need to have this args parameter in the kernel. and f_name is fine.\nNow in HTimeDerivative, do you have the full Jacobian written?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3891889",
                          "updatedAt": "2022-10-17T00:57:54Z",
                          "publishedAt": "2022-10-17T00:57:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nThese are the .h and .C files for HTimeDerivative, can you tell me what changes are to be made to include the full Jacobian or refer to a problem, which I can seek to make those changes, thanks!\nBecause when I increase the number of elements, other than 1, the following error occurs:\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\nSolve failed and timestep already at or below dtmin, cannot continue!",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3895495",
                          "updatedAt": "2024-03-17T16:11:20Z",
                          "publishedAt": "2022-10-17T11:16:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Ok @GiudGiud , I have removed these prop lines from DerivativeParsedMaterial as its already defined in GenericConstantaMaterial, it is correct? But now I ran into an another error:\n*** ERROR ***\nInvalid function\n1 + (trap_conc/lattice_conc)*(1 - 1/(((NL+lattice_conc)/lattice_conc)exp(WB/(RT))+1))\nlattice_conc,trap_conc\nin ParsedMaterialHelper.\nSyntax error: Unknown identifier\nAlso, if I include now these properties into args, I get this error:\n*** ERROR ***\ndiff_time_function: Coupled variable 'NL' was not found",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3897333",
                          "updatedAt": "2023-03-14T20:37:31Z",
                          "publishedAt": "2022-10-17T14:48:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh my bad I didnt see you had set them as material proeprties.\nmaterial_property was fine then.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3897353",
                          "updatedAt": "2022-10-17T14:50:39Z",
                          "publishedAt": "2022-10-17T14:50:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Ok, thanks @GiudGiud , but still I get error when the mesh have more elements, please suggest, could you comment on the .h and .C files regarding the Jacobins above, is it due to that?\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\nSolve failed and timestep already at or below dtmin, cannot continue!",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3897392",
                          "updatedAt": "2022-10-17T14:53:42Z",
                          "publishedAt": "2022-10-17T14:53:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what does the jacobian analyzer say about your Jacobian?\nCan you please also attach (not paste) the full simulation log?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3900181",
                          "updatedAt": "2022-10-17T20:37:06Z",
                          "publishedAt": "2022-10-17T20:37:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "and then the constants ([material_property_names = 'NL WB R T'])\n\nI dont think they should be material properties.\nThere's a different argument for constants, constant_expressions and constant_names",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3897091",
                  "updatedAt": "2022-10-17T14:22:56Z",
                  "publishedAt": "2022-10-17T14:22:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so two things, since the numeric zero pivot points to issues with the numerical system\n\nwhat does the jacobian analyzer say about your Jacobian?\nwhat does the system analysis say? using PETSc's SVD monitor (see these posts: #22344 #22233)",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3901727",
                          "updatedAt": "2022-10-18T03:02:49Z",
                          "publishedAt": "2022-10-18T03:02:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud, I tried using the Jacobian debugger, but its shows an error.\n(moose) sidharthsarmah@Sidharths-MacBook-Air ~ % cd projects/moose/python/jacobiandebug/analyzejacobian.py projects/moose/examples/HDiffusion/HDIffusion.i\ncd: string not in pwd: projects/moose/python/jacobiandebug/analyzejacobian.py",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3901928",
                          "updatedAt": "2023-03-14T20:37:55Z",
                          "publishedAt": "2022-10-18T03:55:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "cd is to change directory.\nYou need to call \u2018python analyze_jacobian.py etc\u2019",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3905547",
                          "updatedAt": "2022-10-18T12:22:46Z",
                          "publishedAt": "2022-10-18T12:22:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "@GiudGiud\nBased on:\nhttps://mooseframework.inl.gov/help/development/analyze_jacobian.html\nMy input file is present in the folder HDiffusion (/moose/examples/HDiffusion/HDiffusion.i\nOnce I am in the folder HDiffusion, I typed these command to obtain the Jacobian analysis:\n$moose/python/jacobiandebug/analyzejacobian.py HDiffusion.i\n\n\nBut find these error, please help:\nzsh: no such file or directory: /python/jacobiandebug/analyzejacobian.py",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3921047",
                          "updatedAt": "2022-10-20T05:01:09Z",
                          "publishedAt": "2022-10-20T04:58:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Try typing:\n~/projects/moose/python/jacobiandebug/analyzejacobian.py instead.\n$moose is likely ''. The $ is from our console, it s not part of the path\nYou need to point to the path of this file correctly.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3924456",
                          "updatedAt": "2022-10-20T12:53:56Z",
                          "publishedAt": "2022-10-20T12:53:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "@GiudGiud, thanks!\nIt says no error detected which means the kernels are correct right?\n(moose) sidharthsarmah@Sidharths-MacBook-Air HDiffusion % ~/projects/moose/python/jacobiandebug/analyzejacobian.py HDiffusion.i\nRunning input with executable /Users/sidharthsarmah/projects/moose/examples/HDiffusion/ex06-opt ...\n\nNo errors detected. :-)\n\nBut I still encounter this error, does it has got to do with my parameters values?\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3924679",
                          "updatedAt": "2022-10-20T13:21:10Z",
                          "publishedAt": "2022-10-20T13:20:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the Jacobian is correct which is good news.\nBut the system is still singular so something else is problematic.\nNext I would check the equation implementation using MMS\nhttps://mooseframework.inl.gov/python/mms.html",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3925562",
                          "updatedAt": "2022-10-20T14:53:53Z",
                          "publishedAt": "2022-10-20T14:53:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud , I have tried changing the executioner block but it still does not show convergence:\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3972060",
                          "updatedAt": "2023-03-14T20:38:10Z",
                          "publishedAt": "2022-10-26T16:46:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I m suspicious that you have two variables and only a single equation.\nAre you missing an equation? Is this a reduced input file?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3972423",
                          "updatedAt": "2022-10-26T17:28:11Z",
                          "publishedAt": "2022-10-26T17:28:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud, This is the equation where CL = conc_lattice is the primary variable, and CT = conc_trap is the coupled variable, please suggest, if I am doing something wrong?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-3984134",
                          "updatedAt": "2022-10-27T16:54:53Z",
                          "publishedAt": "2022-10-27T16:54:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "Hi @GiudGiud ,\nI have tried to implement this equation in MOOSE (strain rate term not yet developed), could you please suggest why there is an issue with the convergence?",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4651235",
                  "updatedAt": "2023-03-14T20:42:40Z",
                  "publishedAt": "2023-01-11T00:57:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does it converge on a simpler system?\nCan you attach the convergence history as well please",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4651596",
                          "updatedAt": "2023-01-11T01:56:30Z",
                          "publishedAt": "2023-01-11T01:56:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud\nI tried for this simple problem and it seems there is an convergence issue:\nError:\n97 Nonlinear |R| = 2.406784e+08\n      0 Linear |R| = 2.406784e+08\n      1 Linear |R| = 3.154084e+05\n98 Nonlinear |R| = 2.406784e+08\n      0 Linear |R| = 2.406784e+08\n      1 Linear |R| = 3.154084e+05\n99 Nonlinear |R| = 2.406784e+08\n      0 Linear |R| = 2.406784e+08\n      1 Linear |R| = 3.154084e+05\n100 Nonlinear |R| = 2.406784e+08\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 100\n Solve Did NOT Converge!\nAborting as solve did not converge\n\n\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!\n\nStack frames: 11\n0: 0   libmesh_opt.0.dylib                 0x0000000111cd5123 libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1091\n1: 1   libmoose-opt.0.dylib                0x000000010f51fa27 moose::internal::mooseErrorRaw(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) + 823\n2: 2   libmoose-opt.0.dylib                0x000000010f47ef6f callMooseErrorRaw(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, MooseApp*) + 111\n3: 3   libmoose-opt.0.dylib                0x000000010e6fa25a void MooseObject::mooseError<char const (&) [70]>(char const (&) [70]) const + 346\n4: 4   libmoose-opt.0.dylib                0x000000010ef2303b TimeStepper::computeFailedDT() + 75\n5: 5   libmoose-opt.0.dylib                0x000000010ef323ed TimeStepper::computeStep() + 109\n6: 6   libmoose-opt.0.dylib                0x000000010e857354 Transient::execute() + 100\n7: 7   libmoose-opt.0.dylib                0x000000010f4f0801 MooseApp::executeExecutioner() + 273\n8: 8   libmoose-opt.0.dylib                0x000000010f4ebac9 MooseApp::run() + 1705\n9: 9   tensor_mechanics-opt                0x000000010278fbaf main + 159\n10: 10  dyld                                0x000000020283e310 start + 2432\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics %",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4652560",
                          "updatedAt": "2023-03-14T20:42:53Z",
                          "publishedAt": "2023-01-11T05:09:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "A few things to try:\n\nswitch to Newton instead of PJFNK\nuse the jacobian analyzer to make sure your jacobian is correct\nadd a strong preconditioner like LU\ncheck if the problem is singular using SVD\n\n97 Nonlinear |R| = 2.406784e+08\n      0 Linear |R| = 2.406784e+08\n      1 Linear |R| = 3.154084e+05\n98 Nonlinear |R| = 2.406784e+08\n      0 Linear |R| = 2.406784e+08\n      1 Linear |R| = 3.154084e+05\n\nthis is odd. It should not snap out of the linear solve if it s not converged",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4655612",
                          "updatedAt": "2023-01-11T11:53:01Z",
                          "publishedAt": "2023-01-11T11:53:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "Hi @GiudGiud,\nI change it to NEWTON and checked the Jacobian.\nPlease note carefully, I am confused about somethings:\n\n\nSince kernels in MOOSE identify each of the components in a weak form, how does it decides the sign of the components of the second term?\nIn this, I have considered a negative sign as on the LHS the term has a negative sign, could you please explain how MOOSE decides it, or implicitly included in the source files?\n\n\nBy trail and error,\n2.1. I have excluded the BCs, and the solution converged, with (+)DL.\n\n\n      1 Linear |R| = 1.099549e-08\n 7 Nonlinear |R| = 1.363439e+02\n      0 Linear |R| = 1.363439e+02\n      1 Linear |R| = 1.820089e-12\n 8 Nonlinear |R| = 3.593073e-02\n Solve Converged!\n  Finished Solving                                                                       [ 39.87 s] [  -54 MB]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 3.593073e-02\n\n2.2. Then I scaled the BCs to a lower value by dividing by 1000, and then it converges.\nBut when I use the actual BCs, it is converging in some time step, while not in others.\nDo you think it has something to do with the BCs or the stress-strain law in the plastic region which is not defined correctly, because of which the displacement in the BCs could not be processed in the plastic regions.\nCould you suggest if it is the right way to do, or is there are functions materials to define the stress-strain relation?please suggest, thanks!\nNonlinear solve did not converge due to DIVERGED_DTOL iterations 9\n Solve Did NOT Converge!\n  Finished Solving                                                                       [ 46.30 s] [    0 MB]\nAborting as solve did not converge\n\nTime Step 16, time = 0.2125, dt = 0.0125\n 0 Nonlinear |R| = 2.111891e+13\n      0 Linear |R| = 2.111891e+13\n      1 Linear |R| = 2.838776e-02\n 1 Nonlinear |R| = 8.246287e+06\n      0 Linear |R| = 8.246287e+06\n      1 Linear |R| = 1.069833e-03\n 2 Nonlinear |R| = 1.891091e+08\n      0 Linear |R| = 1.891091e+08\n      1 Linear |R| = 8.136889e-04\n 3 Nonlinear |R| = 1.163888e+10\n      0 Linear |R| = 1.163888e+10\n      1 Linear |R| = 3.348810e-04\n 4 Nonlinear |R| = 4.651572e+09\n      0 Linear |R| = 4.651572e+09\n      1 Linear |R| = 4.136528e-05\n 5 Nonlinear |R| = 2.053012e+09\n      0 Linear |R| = 2.053012e+09\n      1 Linear |R| = 5.502774e-06\n 6 Nonlinear |R| = 2.264905e+07\n      0 Linear |R| = 2.264905e+07\n      1 Linear |R| = 2.435616e-07\n 7 Nonlinear |R| = 2.304235e+04\n      0 Linear |R| = 2.304235e+04\n      1 Linear |R| = 1.003742e-09\n 8 Nonlinear |R| = 6.924306e-01\n Solve Converged!\n  Finished Solving                                                                       [ 40.81 s] [    1 MB]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 6.924306e-01\n\nValues in stress_data.csv (stress vs plastic strain)\n<img width=\"169\" alt=\"image\" src=\"https://user-images.githubusercontent.com/110927986/211465384-46ea6dfd-a19b-4080-a3dc-e23bb543f0ba.png\">\n\n\nDefine stress in both elastic and plastic region:",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4660102",
                  "updatedAt": "2023-03-14T20:43:39Z",
                  "publishedAt": "2023-01-11T19:36:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The overall sign of the equation does not matter. The sign must just be consistent between all the terms.\nIt s the same sign in MOOSE as when writing the weak form.\n\n\nI'm glad you have isolated the problem to the boundary condition.\n\n\n 8 Nonlinear |R| = 6.924306e-01\n\nthis is not converged. Please tighten the non linear tolerances further.\nI would first plot the dirichlet BC and see if the function is correct",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4660848",
                          "updatedAt": "2023-01-11T21:05:37Z",
                          "publishedAt": "2023-01-11T21:05:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nAlso, just now, I have performed the simulation and it converges taking around 2 hours.\n11 Nonlinear |R| = 2.925212e+25\nNonlinear solve did not converge due to DIVERGED_DTOL iterations 11\n Solve Did NOT Converge!\n  Finished Solving                                                                       [ 57.86 s] [    1 MB]\nAborting as solve did not converge\n\nTime Step 75, time = 0.99375, dt = 0.00625\n 0 Nonlinear |R| = 7.093433e+12\n      0 Linear |R| = 7.093433e+12\n      1 Linear |R| = 1.078546e-02\n 1 Nonlinear |R| = 1.565676e+06\n      0 Linear |R| = 1.565676e+06\n      1 Linear |R| = 5.528524e-04\n 2 Nonlinear |R| = 4.499444e+07\n      0 Linear |R| = 4.499444e+07\n      1 Linear |R| = 4.261137e-04\n 3 Nonlinear |R| = 5.451983e+10\n      0 Linear |R| = 5.451983e+10\n      1 Linear |R| = 4.528600e-04\n 4 Nonlinear |R| = 1.710968e+10\n      0 Linear |R| = 1.710968e+10\n      1 Linear |R| = 9.954921e-05\n 5 Nonlinear |R| = 1.260894e+10\n      0 Linear |R| = 1.260894e+10\n      1 Linear |R| = 8.425602e-05\n 6 Nonlinear |R| = 9.173742e+07\n      0 Linear |R| = 9.173742e+07\n      1 Linear |R| = 4.556281e-06\n 7 Nonlinear |R| = 1.189179e+07\n      0 Linear |R| = 1.189179e+07\n      1 Linear |R| = 1.358132e-06\n 8 Nonlinear |R| = 1.160499e+06\n      0 Linear |R| = 1.160499e+06\n      1 Linear |R| = 1.708784e-06\n 9 Nonlinear |R| = 7.206528e+05\n      0 Linear |R| = 7.206528e+05\n      1 Linear |R| = 1.406952e-07\n10 Nonlinear |R| = 4.585014e+03\n      0 Linear |R| = 4.585014e+03\n      1 Linear |R| = 2.572374e-09\n11 Nonlinear |R| = 1.641398e+00\n Solve Converged!\n  Finished Solving                                                                       [ 57.85 s] [    6 MB]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 1.641398e+00\n\nTime Step 76, time = 1, dt = 0.00625\n 0 Nonlinear |R| = 7.061226e+12\n      0 Linear |R| = 7.061226e+12\n      1 Linear |R| = 5.049378e-03\n 1 Nonlinear |R| = 1.560012e+06\n      0 Linear |R| = 1.560012e+06\n      1 Linear |R| = 5.347847e-04\n 2 Nonlinear |R| = 4.499929e+07\n      0 Linear |R| = 4.499929e+07\n      1 Linear |R| = 4.400536e-04\n 3 Nonlinear |R| = 5.471277e+10\n      0 Linear |R| = 5.471277e+10\n      1 Linear |R| = 4.049852e-04\n 4 Nonlinear |R| = 1.706813e+10\n      0 Linear |R| = 1.706813e+10\n      1 Linear |R| = 1.079309e-04\n 5 Nonlinear |R| = 1.268484e+10\n      0 Linear |R| = 1.268484e+10\n      1 Linear |R| = 2.082676e-05\n 6 Nonlinear |R| = 9.101576e+07\n      0 Linear |R| = 9.101576e+07\n      1 Linear |R| = 4.187069e-06\n 7 Nonlinear |R| = 9.596391e+06\n      0 Linear |R| = 9.596391e+06\n      1 Linear |R| = 1.386023e-06\n 8 Nonlinear |R| = 1.134034e+06\n      0 Linear |R| = 1.134034e+06\n      1 Linear |R| = 1.861525e-06\n 9 Nonlinear |R| = 7.131450e+05\n      0 Linear |R| = 7.131450e+05\n      1 Linear |R| = 1.401395e-07\n10 Nonlinear |R| = 4.542644e+03\n      0 Linear |R| = 4.542644e+03\n      1 Linear |R| = 3.339566e-09\n11 Nonlinear |R| = 1.704825e+00\n Solve Converged!\n  Finished Solving                                                                       [ 58.10 s] [    2 MB]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 1.704825e+00\nFinished Executing                                                                       [7741.62 s] [  356 MB]\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics %  \n\nHere is the entire input file, could you check it once as well, thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661184",
                          "updatedAt": "2023-03-14T20:44:11Z",
                          "publishedAt": "2023-01-11T21:43:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You should turn on automatic_scaling in the executioner\nYou have final residuals like 11 Nonlinear |R| = 1.641398e+00 and this doesnt look converged at all",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661240",
                          "updatedAt": "2023-01-11T21:52:56Z",
                          "publishedAt": "2023-01-11T21:52:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Sure @GiudGiud,\nAlso here is the BC function for t=1 sec, I have plotted it.\nSince, I used the same Kernels but have opposite signs, don't you think I need to insert a (-ve)sign before one of it? I am still a bit confused about it.\n\nWhich is correct?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661359",
                          "updatedAt": "2023-03-14T20:44:26Z",
                          "publishedAt": "2023-01-11T22:11:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Seems like they should be opposite signs.\nYou should solve this on a 1D line if possible to make sure you have the correct equation before taking on the the half-circle",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661399",
                          "updatedAt": "2023-01-11T22:17:25Z",
                          "publishedAt": "2023-01-11T22:17:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nI tried for a simple 2D problem, it seems to be working fine:\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  nx = 10\n  ny = 10\n[]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 1.995996e+00\n\nTime Step 13, time = 1, dt = 0.05\n 0 Nonlinear |R| = 3.530588e+12\n      0 Linear |R| = 3.530588e+12\n      1 Linear |R| = 1.755403e-03\n 1 Nonlinear |R| = 1.054319e+09\n      0 Linear |R| = 1.054319e+09\n      1 Linear |R| = 2.413539e-07\n 2 Nonlinear |R| = 6.426605e+04\n      0 Linear |R| = 6.426605e+04\n      1 Linear |R| = 2.043541e-09\n 3 Nonlinear |R| = 1.434107e+01\n      0 Linear |R| = 1.434107e+01\n      1 Linear |R| = 8.390151e-13\n 4 Nonlinear |R| = 5.459847e-03\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  conc_lattice: 4.119875e-03\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % \n\nif you look at the plot of BC, and found nothing, do you think there is any issue with the stress-strain relation in the plastic region, which I have not defined correctly, or any other source of error, or is it just an issue with the Executioner part?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661494",
                          "updatedAt": "2023-03-14T20:44:51Z",
                          "publishedAt": "2023-01-11T22:32:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is the solution correct for this 2D problem?\nThat can help you decide if you used the right signs for each term",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661529",
                          "updatedAt": "2023-01-11T22:38:07Z",
                          "publishedAt": "2023-01-11T22:38:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nI got the results but I don't have the exact solution to check for this.\n\nIf I look at all of the individually keeping it on the left hand side, here it is:\n\n(+ve) sign:",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661592",
                          "updatedAt": "2023-03-14T20:45:04Z",
                          "publishedAt": "2023-01-11T22:49:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud ,\nI think there is some issue with the convergence with large displacements because when I reduce the BCs displacement by a scale of 1/10, it convergences.\nTime Step 10, time = 1, dt = 0.1\n 0 Nonlinear |R| = 9.514830e+10\n      0 Linear |R| = 9.514830e+10\n      1 Linear |R| = 1.241720e-04\n 1 Nonlinear |R| = 3.014725e+04\n      0 Linear |R| = 3.014725e+04\n      1 Linear |R| = 1.100388e-10\n 2 Nonlinear |R| = 5.742530e-03\n Solve Converged!\n  Finished Solving                                                                       [  9.61 s] [    1 MB]\n\nOutlier Variable Residual Norms:\n  conc_lattice: 5.446171e-03\nFinished Executing                                                                       [100.60 s] [  406 MB]\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % \n\nDo you think it has something to do with the plastic region constitutive law being defined? since large displacement would manifest larger strains and the stress are not defined accordingly?\nCan you please try running it once and check, here are the files, thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4661788",
                          "updatedAt": "2023-03-14T20:45:15Z",
                          "publishedAt": "2023-01-11T23:24:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can try to see preset = false on displacement bcs. This helps with large displacement as it lets the system relax to the desired value rather than impose it in the numerical system directly.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-4680347",
                          "updatedAt": "2023-01-13T17:40:15Z",
                          "publishedAt": "2023-01-13T17:40:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "Great, some few doubts:\n\nNo opt file for app obtained after running make -j4.\n\nmamba activate moose\nmamba install python=3.10 packaging\nexport METHOD=oprof METHODS=oprof MOOSE_JOBS=4\ncd ~/MOOSE/projects/moose\ngit clean -xfd   # cleans out the failed build\ncd modules/tensor_mechanics\nmake -j 4\n\n\n\nI encountered an error while running profiling:\n\ncd $HOME\ngit clone git@github.com:gperftools/gperftools.git\ncd gperftools\n./autogen.sh\n./configure --prefix=$PWD/installed --enable-frame-pointers\nmake -j$MOOSE_JOBS\nmake install\n\n/Users/sidharthsarmah/mambaforge3/envs/moose/bin/arm64-apple-darwin20.0.0-ranlib: archive member: .libs/libtcmalloc_internal.a(libtcmalloc_internal_la-memfs_malloc.o) cputype (16777223) does not match previous archive members cputype (16777228) (all members must match)\nlibtool: link: arm64-apple-darwin20.0.0-ranlib .libs/libtcmalloc_internal.a\narm64-apple-darwin20.0.0-ranlib: archive member: .libs/libtcmalloc_internal.a(libtcmalloc_internal_la-memfs_malloc.o) cputype (16777223) does not match previous archive members cputype (16777228) (all members must match)\narm64-apple-darwin20.0.0-ranlib: for architecture: x86_64 file: .libs/libtcmalloc_internal.a(libtcmalloc_internal_la-memfs_malloc.o) has no symbols\nwarning: arm64-apple-darwin20.0.0-ranlib: archive library: .libs/libtcmalloc_internal.a for architecture: x86_64 the table of contents is empty (no object file members in the library define global symbols)\nmake: *** [Makefile:3881: libtcmalloc_internal.la] Error 1\n(moose) sidharthsarmah@Sidharths-MacBook-Air gperftools %",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5154831",
                  "updatedAt": "2023-02-28T17:02:25Z",
                  "publishedAt": "2023-02-28T17:02:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "I found errors now while running make -j 4:\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % make -j4\nLinking Library /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/pcre/libpcre-opt.la...\nLinking Library /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/hit/libhit-opt.la...\nLinking Executable /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/exodiff/exodiff...\nCreating Unity /Users/sidharthsarmah/MOOSE/projects/moose/modules/tensor_mechanics/build/unity_src/kernels_Unity.C\nLinking Library /Users/sidharthsarmah/MOOSE/projects/moose/modules/tensor_mechanics/test/lib/libtensor_mechanics_test-opt.la...\nld: library not found for -lmesh_opt\nclang-12: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [/Users/sidharthsarmah/MOOSE/projects/moose/framework/moose.mk:362: /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/hit/libhit-opt.la] Error 1\nmake: *** Waiting for unfinished jobs....\nld: library not found for -lmesh_opt\nclang-12: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [/Users/sidharthsarmah/MOOSE/projects/moose/framework/moose.mk:350: /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/pcre/libpcre-opt.la] Error 1\nld: library not found for -lmesh_opt\nclang-12: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [/Users/sidharthsarmah/MOOSE/projects/moose/framework/moose.mk:413: /Users/sidharthsarmah/MOOSE/projects/moose/framework/contrib/exodiff/exodiff] Error 1\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics %",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5155761",
                          "updatedAt": "2023-02-28T17:30:33Z",
                          "publishedAt": "2023-02-28T17:30:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "METHOD=oprof make -j 4\nOf course it does not compile in opt mode (the default mode), we're trying to set you up for profiling.\nYou dont need to recompile anyway! You have the tensor_mechanics-oprof executable right there.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5155801",
                          "updatedAt": "2023-02-28T17:34:50Z",
                          "publishedAt": "2023-02-28T17:34:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Step 1:\n\nMETHOD= dictates the suffix of your app. So if METHOD=opt, you will get tensor_mechanics-opt. But in order to profile something, you need METHOD=oprof. So what you have available right now is the desired binary.\n\n\nStep 2:\n\nYou don't need to install gperftools. You did that already when you installed mamba install moose-pprof.\n\n\n\nYou only need now start profiling your code. Go here: Profiling MOOSE Code and skip down to \"CPU Profiling\"",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5155558",
                  "updatedAt": "2023-02-28T17:19:21Z",
                  "publishedAt": "2023-02-28T17:18:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi, yes I am able to run it now, thanks.\nThe main objective to do it is to understand why my model is taking me an hour to compile a file of 1 sec, right which might be associated with the Jacobian.\nBut it seems, its taking a lot of time to run the profiling, it is okay:\nLast login: Tue Feb 28 12:20:13 on ttys000\n(base) sidharthsarmah@Sidharths-MacBook-Air ~ % mamba activate moose\n(moose) sidharthsarmah@Sidharths-MacBook-Air ~ % cd MOOSE/projects/moose/modules/tensor_mechanics\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % MOOSE_PROFILE_BASE=run1_ mpiexec -n 32 ./tensor_mechanics-oprof -i Dadfarnia_BCt.i\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nThe parameter 'coord_type' is deprecated.\nPlease use 'Mesh/coord_type' instead\n\nSetting Up\n  Setting Mesh\n    Reading Mesh.                                                                        [ 15.10 s] [   20 MB]\n  Finished Setting Mesh                                                                  [ 15.73 s] [   22 MB]\n  Initializing\n    Initializing Equation Systems...                                                     [ 26.86 s] [    9 MB]\n    Initializing Displaced Equation System..                                             [ 20.75 s] [    6 MB]\n  Finished Initializing                                                                  [ 57.95 s] [   16 MB]\nFinished Setting Up                                                                      [ 84.98 s] [   57 MB]\nFramework Information:\nMOOSE Version:           git commit 1a6bfe777e on 2023-02-24\nLibMesh Version:         482ca36f0ba05dbb5d87d02688d43eaa4bf983eb\nPETSc Version:           3.16.6\nSLEPc Version:           3.16.2\nCurrent Time:            Tue Feb 28 12:45:05 2023\nExecutable Timestamp:    Tue Feb 28 12:37:42 2023\n\nParallelism:\n  Num Processors:          32\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   \n    Total:                 18721\n    Local:                 639\n    Min/Max/Avg:           520/642/585\n  Elems:                   \n    Total:                 6134\n    Local:                 192\n    Min/Max/Avg:           186/197/191\n  Num Subdomains:          1\n  Num Partitions:          32\n  Partitioner:             metis\n\nNonlinear System:\n  Num DOFs:                50030\n  Num Local DOFs:          1726\n  Variables:               { \"conc_lattice\" \"sigma_h\" } { \"disp_x\" \"disp_y\" } \n  Finite Element Types:    \"LAGRANGE\" \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \"SECOND\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             IterationAdaptiveDT\n  Solver Mode:             NEWTON\n  MOOSE Preconditioner:    SMP\n\n  Finished Performing Initial Setup                                                      [ 20.14 s] [   11 MB]\n\nTime Step 0, time = 0\n  Finished Outputting                                                                    [  5.00 s] [    2 MB]\n\nTime Step 1, time = 0.01, dt = 0.01\n\n    Computing Initial Residual\n      Computing Residual.                                                                [ 20.38 s] [    6 MB]\n    Finished Computing Initial Residual                                                  [ 22.00 s] [    6 MB]\n\nPerforming automatic scaling calculation\n\n    Computing Automatic Scaling\n      Finished Computing Jacobian                                                        [  7.66 s] [    0 MB]\n    Finished Computing Automatic Scaling                                                 [ 11.13 s] [    0 MB]\n\n    Computing Residual.                                                                  [ 17.01 s] [    2 MB]\n 0 Nonlinear |R| = 2.047734e+09\n    Finished Computing Jacobian                                                          [ 13.13 s] [    1 MB]\n      0 Linear |R| = 2.047734e+09\n      1 Linear |R| = 5.922574e-06\n\n    Computing Residual.                                                                  [ 16.75 s] [   -4 MB]\n 1 Nonlinear |R| = 6.167530e+08\n    Computing Jacobian                                                                   [ 13.00 s] [   -8 MB]\n      0 Linear |R| = 6.167530e+08",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5155968",
                          "updatedAt": "2023-02-28T17:53:51Z",
                          "publishedAt": "2023-02-28T17:53:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "You built everything thus far using 4 cores on your MacBook Air, but you told it to use 32:\nMOOSE_PROFILE_BASE=run1_ mpiexec -n 32 ./tensor_mechanics-oprof -i Dadfarnia_BCt.i\n                                    ^^ this far exceeds your machines limit\nYou should bring that down to 4.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5156298",
                          "updatedAt": "2023-02-28T18:29:08Z",
                          "publishedAt": "2023-02-28T18:29:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi thanks both, I could obtained the profiles plus, it takes very less time with 4 cores number, that's great)\n\nPerformance Graph:\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                                Section                               | Calls |   Self(s)  |   Avg(s)   |    %   | Mem(MB) |  Total(s)  |   Avg(s)   |    %   | Mem(MB) |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| TensorMechanicsTestApp (main)                                        |     1 |      0.004 |      0.004 |   0.00 |      10 |    178.940 |    178.940 | 100.00 |     252 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::setup_mesh    |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::set_mesh_base |     2 |      0.005 |      0.003 |   0.00 |       2 |      0.060 |      0.030 |   0.03 |      12 |\n|   FEProblem::outputStep                                              |    14 |      0.001 |      0.000 |   0.00 |       0 |      0.192 |      0.014 |   0.11 |       4 |\n|     Exodus::outputStep                                               |    14 |      0.136 |      0.010 |   0.08 |       4 |      0.136 |      0.010 |   0.08 |       4 |\n|   Transient::PicardSolve                                             |    13 |      0.002 |      0.000 |   0.00 |       0 |    177.798 |     13.677 |  99.36 |     159 |\n|     FEProblem::outputStep                                            |    39 |      0.004 |      0.000 |   0.00 |       0 |      0.005 |      0.000 |   0.00 |       0 |\n|     FEProblem::solve                                                 |    13 |     38.954 |      2.996 |  21.77 |     153 |    177.791 |     13.676 |  99.36 |     159 |\n|       FEProblem::computeResidualInternal                             |    13 |      0.000 |      0.000 |   0.00 |       0 |      1.834 |      0.141 |   1.02 |       4 |\n|       FEProblem::computeResidualInternal                             |    80 |      0.001 |      0.000 |   0.00 |       0 |     10.943 |      0.137 |   6.12 |       0 |\n|       FEProblem::computeJacobianInternal                             |     1 |      0.000 |      0.000 |   0.00 |       0 |      1.505 |      1.505 |   0.84 |       0 |\n|       FEProblem::computeJacobianInternal                             |    67 |      0.001 |      0.000 |   0.00 |       0 |    124.544 |      1.859 |  69.60 |       2 |\n|   Transient::final                                                   |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|     FEProblem::outputStep                                            |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nFinished Executing                                                                       [178.65 s] [  189 MB]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5157211",
                          "updatedAt": "2023-02-28T19:20:46Z",
                          "publishedAt": "2023-02-28T18:46:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud ,\nCould you suggest anything, the time taken in MOOSE is 30 mins for the same in Abacus taking 5 mins:\n\nPerformance Graph:\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                                Section                               | Calls |   Self(s)  |   Avg(s)   |    %   | Mem(MB) |  Total(s)  |   Avg(s)   |    %   | Mem(MB) |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| TensorMechanicsTestApp (main)                                        |     1 |      0.010 |      0.010 |   0.00 |      10 |   1769.332 |   1769.332 | 100.00 |     195 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::setup_mesh    |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::set_mesh_base |     2 |      0.009 |      0.005 |   0.00 |       2 |      0.077 |      0.039 |   0.00 |      13 |\n|   FEProblem::outputStep                                              |   104 |      0.006 |      0.000 |   0.00 |       0 |      1.432 |      0.014 |   0.08 |       7 |\n|     Exodus::outputStep                                               |   104 |      0.954 |      0.009 |   0.05 |       9 |      0.954 |      0.009 |   0.05 |       9 |\n|   Transient::PicardSolve                                             |   103 |      0.015 |      0.000 |   0.00 |       0 |   1766.482 |     17.150 |  99.84 |      77 |\n|     FEProblem::outputStep                                            |   309 |      0.034 |      0.000 |   0.00 |       0 |      0.039 |      0.000 |   0.00 |       0 |\n|     FEProblem::solve                                                 |   103 |    361.029 |      3.505 |  20.40 |     359 |   1766.424 |     17.150 |  99.84 |      77 |\n|       FEProblem::computeResidualInternal                             |   103 |      0.001 |      0.000 |   0.00 |       0 |     16.090 |      0.156 |   0.91 |       5 |\n|       FEProblem::computeResidualInternal                             |   709 |      0.010 |      0.000 |   0.00 |       0 |    116.135 |      0.164 |   6.56 |       5 |\n|       FEProblem::computeJacobianInternal                             |     1 |      0.000 |      0.000 |   0.00 |       0 |      1.347 |      1.347 |   0.08 |       1 |\n|       FEProblem::computeJacobianInternal                             |   606 |      0.007 |      0.000 |   0.00 |       0 |   1271.605 |      2.098 |  71.87 |    -294 |\n|   Transient::final                                                   |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.001 |      0.001 |   0.00 |       0 |\n|     FEProblem::outputStep                                            |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.001 |      0.001 |   0.00 |       0 |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nFinished Executing                                                                       [1768.56 s] [  112 MB]\nPROFILE: interrupts/evictions/bytes = 151660/85878/25494648\nPROFILE: interrupts/evictions/bytes = 146318/78033/22955216\nPROFILE: interrupts/evictions/bytes = 147339/77304/22712848\nPROFILE: interrupts/evictions/bytes = 145291/76899/22601592\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % \n\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics % pprof run1_3.prof\nLocal symbolization failed for libresolv.9.dylib: stat /usr/lib/libresolv.9.dylib: no such file or directory\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: libgcc_s.2.dylib\nType: cpu\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top 12\nShowing nodes accounting for 1179.70s, 81.20% of 1452.91s total\nDropped 917 nodes (cum <= 7.26s)\nShowing top 12 nodes out of 174\n      flat  flat%   sum%        cum   cum%\n   364.90s 25.12% 25.12%    386.79s 26.62%  MetaPhysicL::DynamicSparseNumberBase::sparsity_union\n   256.64s 17.66% 42.78%   1452.91s   100%  [libresolv.9.dylib]\n   248.43s 17.10% 59.88%    477.64s 32.87%  MetaPhysicL::derivative_multiply_helper\n    63.42s  4.37% 64.24%     63.44s  4.37%  dgemm_\n    59.40s  4.09% 68.33%    196.91s 13.55%  libMesh::TypeTensor::operator*\n    54.83s  3.77% 72.10%     54.83s  3.77%  MetaPhysicL::DynamicStdArrayWrapper::resize\n    40.20s  2.77% 74.87%    209.11s 14.39%  RankTwoTensorTempl::rotate\n    34.33s  2.36% 77.23%    136.23s  9.38%  RankFourTensorTempl::operator*\n    19.92s  1.37% 78.61%     92.47s  6.36%  libMesh::TypeVector::operator*\n    12.83s  0.88% 79.49%     18.03s  1.24%  [libmoose-oprof.0.dylib]\n    12.61s  0.87% 80.36%     12.71s  0.87%  MatSetValues_MPIAIJ\n    12.19s  0.84% 81.20%    170.35s 11.72%  ADComputeFiniteStrainTempl::computeQpIncrements\n(pprof)",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5176248",
                          "updatedAt": "2023-03-02T08:46:53Z",
                          "publishedAt": "2023-03-02T08:46:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nSo you are using AD and it seems to be the main time sink.\nIf you really care about this somewhat manageable difference, you need to re-write your kernels without AD first. This should save 25% or so of the runtime\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5180271",
                          "updatedAt": "2023-03-02T15:52:06Z",
                          "publishedAt": "2023-03-02T15:52:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud,\nThanks for the suggestion, can you suggest one thing:\nI have been trying to apply a force loading condition (units in Newton) in the y direction.\nThe only BC I can find are the displacement u's (meter), can you suggest if it can be done:\nApply load on a sample having units in Newton? Thanks)",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5184636",
                          "updatedAt": "2023-03-03T00:46:40Z",
                          "publishedAt": "2023-03-03T00:46:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The force loading condition is usually done through the PressureBC or the Pressure action\nhttps://mooseframework.inl.gov/source/bcs/Pressure.html\nalternatively you can formulate it as a NeumannBC if you're careful about dimensionality",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5184665",
                          "updatedAt": "2023-03-03T00:51:01Z",
                          "publishedAt": "2023-03-03T00:51:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "I tried Pressure BC, but I think it's applicable to a boundary. I want to apply it to a node, any other suggestion, thanks)",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5184791",
                          "updatedAt": "2023-03-03T01:09:41Z",
                          "publishedAt": "2023-03-03T01:09:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think I saw something about this in Discussions earlier.\nTrying to apply a load on a node",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5193046",
                          "updatedAt": "2023-03-03T14:51:13Z",
                          "publishedAt": "2023-03-03T14:51:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud, could you please suggest what type and tensor should be used when I want to project effective_plastic_strain as a material property and then project it as a couple variable in Kernel:\nUnlike hydrostatic stress that uses stress, if I used strain, I find the following error, please suggest?\n\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nMaterial property 'strain', requested by 'strain_prop' is not defined on block Domain_QUAD8\nMaterial property 'strain', requested by 'strain_prop_face' is not defined on block Domain_QUAD8\nMaterial property 'strain', requested by 'strain_prop_neighbor' is not defined on block Domain_QUAD8\nMaterial property 'strain', requested by 'strain_prop' is not defined on block Symmetry_QUAD8\nMaterial property 'strain', requested by 'strain_prop_face' is not defined on block Symmetry_QUAD8\nMaterial property 'strain', requested by 'strain_prop_neighbor' is not defined on block Symmetry_QUAD8\n\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n(moose) sidharthsarmah@Sidharths-MacBook-Air tensor_mechanics %",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5211468",
                          "updatedAt": "2023-03-14T20:51:59Z",
                          "publishedAt": "2023-03-06T04:05:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sidharthsarmah"
                  },
                  "bodyText": "Hi @GiudGiud ,\nCan you explain this doubt?\nI am going over this tutorial (https://mooseframework.inl.gov/modules/heat_conduction/tutorials/introduction/therm_step03.html) where they solve this heat conduction equation:\n\nWriting things on one side I obtain this:\n\nHow is the negative sign considered while writing the kernel? Why does it not taken into account?\nWhich of these two kernels (MatDiffusion or HeatConductionTimeDerivative have the (-)ve sign by default?\n[Kernels]\n  [heat_conduction]\n    type = MatDiffusion\n    variable = T\n  []\n  [time_derivative]\n    type = HeatConductionTimeDerivative\n    variable = T\n  []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5277620",
                  "updatedAt": "2023-03-11T21:08:00Z",
                  "publishedAt": "2023-03-11T19:33:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It's just a convention but we usually leave the time derivative on the left hand side, with a positive sign\nThen in the diffusion kernel, you would have a negative sign BUT the integration by parts makes another negative sign appear.\nIf you look at the code for the diffusion kernel, you can see a positive sign on the integrated by parts term.\nif you also look at a \"force\" kernel, which is like a source term, you can see the negative sign as expected",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5285733",
                          "updatedAt": "2023-03-13T00:00:44Z",
                          "publishedAt": "2023-03-13T00:00:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud , I think I am still a bit confused.\nLets say I have the eqn of the form:\n\nThe first term has a negative sign, how do I consider that, is this the right way for that term?\n[Kernels]\n\n  [term 1]\n    type = MatDiffusion\n    variable = C1\n   diffusivity = -w\n  []\n\n  [term 2]\n    type = HeatConductionTimeDerivative\n    variable = C1\n   coef = x\n  []\n\n   [term 3]\n    type = MatDiffusion\n    variable = C2\n   diffusivity = y\n  []\n\n  [term 4]\n    type = HeatConductionTimeDerivative\n    variable = C2\n   coef = z\n  []\n\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286220",
                          "updatedAt": "2023-03-13T01:56:26Z",
                          "publishedAt": "2023-03-13T01:55:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "diffusivity is a name, you can't write -w\nBut I get you idea, and it's not what you want. term_1 should be w,\nand in term 3 you want to make sure y is the negative of what it is in the equation",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286381",
                          "updatedAt": "2023-03-13T02:31:41Z",
                          "publishedAt": "2023-03-13T02:31:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "ok so this is correct right?\n\n[Kernels]\n\n  [./diff_grad_term]\n    type = ADMatDiffusion\n    variable = 'conc_lattice'\n    diffusivity = 'DL'\n  [../]\n\n  [./CL_time_term]\n    type = ADHeatConductionTimeDerivative\n    variable = 'conc_lattice'\n    specific_heat = '1'\n    density_name = '1'\n  [../]\n\n  [./ph_stress]\n    type = ADMaterialPropertyValue\n    prop_name = 'hydrostatic_stress'\n    variable = 'sigma_h'\n  [../]\n\n  [./stress_grad_term]\n    type = ADMatDiffusion\n    variable = 'conc_lattice'\n    v = 'sigma_h'\n    diffusivity = 'func2'\n  [../]\n\n[]\n\n[Materials]\n \n  [./constants]\n    type = ADGenericConstantMaterial\n    prop_names  = 'DL\t\tVH\tR\tT'\n    prop_values = '1.271e-2\t2000.0\t8314.5\t300'\n  [../]\n\n  [./hydrostatic_prop]\n    type = ADRankTwoInvariant\n    rank_two_tensor = stress\n    property_name = hydrostatic_stress\n    invariant = Hydrostatic\n  [../]\n\n  [./stress_coeff]\n    type = ADParsedMaterial\n    function = '-(DL*VH*conc_lattice)/(R*T)'\n    args = 'conc_lattice'\n    f_name = 'func2'\n    material_property_names = 'DL\tVH\tR\tT'\n  [../]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286549",
                          "updatedAt": "2023-03-13T03:04:55Z",
                          "publishedAt": "2023-03-13T03:04:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You have 4 kernels for 3 terms in this equation?\nOtherwise looks right.\nIs the stress a single variable? I m used to having a stress tensor",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286651",
                          "updatedAt": "2023-03-13T03:26:05Z",
                          "publishedAt": "2023-03-13T03:26:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Oh sorry, I just thought the 4th and 3rd kernel should have the same sign, so I did not put it up?\n\nThe hydrostatic stress and plastic strain are single variables to be used as coupled.\nBut how is it right? Those 1st and 3rd term have opposite signs, can you explain?\n[Kernels]\n\n  [./diff_grad_term]\n    type = ADMatDiffusion\n    variable = 'conc_lattice'\n    diffusivity = 'DL'\n  [../]\n\n  [./CL_time_term]\n    type = ADHeatConductionTimeDerivative\n    variable = 'conc_lattice'\n    specific_heat = '1'\n    density_name = '1'\n  [../]\n\n  [./ph_stress]\n    type = ADMaterialPropertyValue\n    prop_name = 'hydrostatic_stress'\n    variable = 'sigma_h'\n  [../]\n\n\n[]\n\n[Materials]\n \n  [./constants]\n    type = ADGenericConstantMaterial\n    prop_names  = 'DL\t\tVH\tR\tT'\n    prop_values = '1.271e-2\t2000.0\t8314.5\t300'\n  [../]\n\n  [./hydrostatic_prop]\n    type = ADRankTwoInvariant\n    rank_two_tensor = stress\n    property_name = hydrostatic_stress\n    invariant = Hydrostatic\n  [../]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286738",
                          "updatedAt": "2023-03-13T16:07:38Z",
                          "publishedAt": "2023-03-13T03:40:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in stress coeff you have a minus, and in DL you have a plus sign, so they effectively have opposite sign.\nIf K is exp(WB3/(R*T) then you still have an issue?\nShould be (conc_lattice*exp(WB3/(R*T)))/(NL+conc_lattice*(1 + exp(WB3/(R*T)))) ?",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5286761",
                          "updatedAt": "2023-03-13T03:43:32Z",
                          "publishedAt": "2023-03-13T03:43:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "yes, I just did not noticed that. Thanks as always.\nI did not understand this sentence If K is exp(WB3/(R*T) then you still have an issue? Should be (conc_lattice*exp(WB3/(R*T)))/(NL+conc_lattice*(1 + exp(WB3/(R*T)))) ?\ndo you mean to say as the values of WB is not mentioned in the constants?\nYes K = exp(Wb/R*T)) is plugged in the coef, I just did not included the values of Wbs in the input file here, thanks.\nBut still see a difference between ABAQUS and MOOSE results when I apply a higher load, there is a dip in front of the cracktip.",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5287432",
                          "updatedAt": "2023-03-13T06:20:49Z",
                          "publishedAt": "2023-03-13T06:16:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I mean you have 1+K in the equation, and K in the expression you wrote, at the denominator",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5292265",
                          "updatedAt": "2023-03-13T14:24:13Z",
                          "publishedAt": "2023-03-13T14:24:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sidharthsarmah"
                          },
                          "bodyText": "Hi @GiudGiud , thanks, its just an alternate eqn, as K+1 -> K for K>>1.\nI have discovered an important issue regarding the BC.\nConsider a problem. I have an initial rectangle say Co=10 over the whole domain, and then on the left side the conc increases from 10 to say 100 in 1 sec.\nBut as soon as I run the model, there is a dip ahead of the front (red dashed), can you suggest why, did you understand my issue?\n\n[Variables]\n  [./conc_lattice]\n  initial_condition = 10\n  [../]\n[]\n\n[BCs]\n  [./surface]\n    type = ADFunctionDirichletBC\n    variable = conc_lattice\n    boundary = 'left'\n    function = 10*(1+9*t)\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/21977#discussioncomment-5295472",
                          "updatedAt": "2023-03-13T19:27:17Z",
                          "publishedAt": "2023-03-13T19:27:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to implement transient equations with auxiliary terms",
          "author": {
            "login": "HyungseonSong-plasma"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\n Hello, I'd like to develop the kernel with below equation forms.\n$$\\frac{\\partial (Tn)}{\\partial t} + \\nabla\\cdot k\\nabla T$$\nT,n are variables. My interest is how to implement $\\frac{\\partial (Tn)}{\\partial t}$. In my understanding, I should use the two kernels modifying TimeDerivative with coupled variables, and kernel1 : $n\\frac{\\partial (T)}{\\partial t}$ kernel2 : $T\\frac{\\partial (n)}{\\partial t}$.\nAre there any solutions for doing one kernel dealing with $\\frac{\\partial (Tn)}{\\partial t}$?",
          "url": "https://github.com/idaholab/moose/discussions/29694",
          "updatedAt": "2025-01-16T21:08:15Z",
          "publishedAt": "2025-01-16T13:01:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhich numerical method are you using? FE or FV?\nAnd both n and T are variables?\nYou can create a TimeKernel derived class that does the n dTdt + T dndt.\nIt's a good first start. If you want to implement dTndt for conservation reasons, it's a little more complicated",
                  "url": "https://github.com/idaholab/moose/discussions/29694#discussioncomment-11855187",
                  "updatedAt": "2025-01-16T13:49:49Z",
                  "publishedAt": "2025-01-16T13:49:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "HyungseonSong-plasma"
                          },
                          "bodyText": "Both n and T are varaibles and I am using FE. But when I tried n dTdt + T dndt, I usually got the there's no + operator message.\nI see the CoupledTimeDerivative for T dndt first, it contains only about the v so I should modify Residual and OffDiagJacobian.\nI'm not sure the below ones are correct.\nResidual  _test[_i][_qp] * _coef * _u[_qp] * _v_dot[_qp];\nOffDiagJacobian _test[_i][_qp] * _phi[_j][_qp] * _coef * _u[_qp] * _dv_dot[_qp];\nIf above one is correct, then I should try\nResidual  _test[_i][_qp] * _coef * (_u[_qp] * _v_dot[_qp] + _v[_qp] * _u_dot[_qp]);\nOffDiagJacobian _test[_i][_qp] * _phi[_j][_qp] * _coef *(_u[_qp] * _dv_dot[_qp] + _v[_qp] * _u_dot[_qp]);",
                          "url": "https://github.com/idaholab/moose/discussions/29694#discussioncomment-11855266",
                          "updatedAt": "2025-01-16T13:59:56Z",
                          "publishedAt": "2025-01-16T13:57:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HyungseonSong-plasma"
                          },
                          "bodyText": "Thanks GiudGiud, I can get the well compiled coupledcoeftimederivative following your suggestions  dTdt + T dndt,\nLast question is about your comments \"If you want to implement dTndt for conservation reasons, it's a little more complicated\".\nIf it's complicated, but is there a method for conservation form??. Because Example equations are actually to implement energy balance equation.",
                          "url": "https://github.com/idaholab/moose/discussions/29694#discussioncomment-11855774",
                          "updatedAt": "2025-01-16T14:44:57Z",
                          "publishedAt": "2025-01-16T14:44:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The way to do a conservative form (so doing (Tn)(i+1) instead of T(i+1) n_(i+1) might be through a material property.\nBut maybe it s easier for you to redefine your equations using (T, Tn) as the variables instead of (T, n)",
                          "url": "https://github.com/idaholab/moose/discussions/29694#discussioncomment-11857903",
                          "updatedAt": "2025-01-16T18:01:28Z",
                          "publishedAt": "2025-01-16T18:01:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Because Example equations are actually to implement energy balance equation.\n\nMy concern is only that, for a 1st order Euler scheme for example, the natural conservation of Tn would be achieved with\n((Tn)_{t+1} - (Tn){t}) / dt\n\nbut when using the product rule on the derivative we end up with\nn_{t+1} * (T_{t+1} - T_t}) / dt + T_{t+1} * (n_{t+1} - n_{t}) / dt \n\nwhich is not exactly the same. I think the first is more \"conservative\" but I am rusty on these things. It would be great to look into it.",
                          "url": "https://github.com/idaholab/moose/discussions/29694#discussioncomment-11859617",
                          "updatedAt": "2025-01-16T21:08:16Z",
                          "publishedAt": "2025-01-16T21:08:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}