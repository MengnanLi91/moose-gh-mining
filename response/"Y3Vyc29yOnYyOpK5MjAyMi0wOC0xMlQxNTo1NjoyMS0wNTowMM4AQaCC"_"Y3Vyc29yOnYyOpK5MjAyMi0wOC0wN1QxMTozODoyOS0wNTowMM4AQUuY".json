{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wOC0wN1QxMTozODoyOS0wNTowMM4AQUuY"
    },
    "edges": [
      {
        "node": {
          "title": "Interface materials for DG kernels",
          "author": {
            "login": "ambehnam"
          },
          "bodyText": "Hello there,\nI have created a DGkernel named VMNSDGKernel and want to apply it to the whole domain along with TotalLagrangianStressDivergence Kernel. The VMNSDGKernel needs to get some properties from a previously made interface material.  Is it possible to do so? I can't find any example that a DG kernel gets material properties from an interface material or any DGMaterial that inherit from InterfaceMaterial or Material.\nIn other words, for every element in the domain, Is it possible that the DG kernel get the face properties of element and neighbor from an interface material, without the need to breaking the mesh by blocks and without having interface boundary? If no, what are the alternatives?\nWhen I tried to use my DG kernel with my previous interface material, I get the following error:\n*** ERROR ***\nThe following error occurred in the object \"tracaver_neighbor\", of type \"ComputeTractionAverJumpBubble\".\nMaterialBase::subdomainSetup in Material'tracaver_neighbor' needs to be implemented\nThanks a lot,\nAmir",
          "url": "https://github.com/idaholab/moose/discussions/21819",
          "updatedAt": "2022-09-02T19:46:16Z",
          "publishedAt": "2022-08-10T14:45:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "InterfaceMaterials are really only meant for use with InterfaceKernels. A regular Material should in most cases work fine with use of the getMaterialProperty and getNeighborMaterialProperty APIs. However, we do have an open issue for creation of an InternalSideMaterial at #14215 which is meant to solve the issues raised in #4335",
                  "url": "https://github.com/idaholab/moose/discussions/21819#discussioncomment-3380477",
                  "updatedAt": "2022-08-12T02:20:51Z",
                  "publishedAt": "2022-08-12T02:20:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Predicting/Knowing Through thickness location of shell element integration points.",
          "author": {
            "login": "Edward-Eth"
          },
          "bodyText": "I'm attempting to do some work with shell elements in MOOSE, and as part of this I need to extract curvature from the shell elements. To do this, I have been attempting to use the strain on the upper and lower integration points, however this is not giving me the correct result. I believe I have tracked down the issue to a detail mentioned in a comment on an example file:\n# The stress_yy for the four elements at z = -0.57735 * (t/2) (first qp below mid-surface of shell) are:\n# 3031.089 Pa, 2165.064 Pa, 1299.038 Pa and 433.0127 Pa. \n\nIn file Beam_Bending_Moment_AD.i\nThis comment, and the way the stress is extracted by the auxkernel, indicates that in the second order case, the lower integration point is not located at -1/2 thickness, but instead -0.57735*1/2thickness. My question(s):\n\nwhy is this the location of the integration point?\nWhere will the integration point be located in different through thickness orders with different numbers of integration points? For example, with fourth order through thickness there is one point below the midplane, one at the midplane and one above the midplane, but where are the above and below ones located?\nIf these values aren't known/communicated to users then it is impossible to know what the stress outputs given by the elements mean. If you take stress values at 0.57735*0.5 of your thickness without realising instead of the top of the shell, they will be artificially lowered.",
          "url": "https://github.com/idaholab/moose/discussions/21735",
          "updatedAt": "2022-09-02T19:46:25Z",
          "publishedAt": "2022-08-01T11:25:58Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Edward-Eth"
                  },
                  "bodyText": "@GiudGiud @neuphris any thoughts on this?",
                  "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3332726",
                  "updatedAt": "2022-08-05T11:05:49Z",
                  "publishedAt": "2022-08-05T11:05:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For the first question, this is determined by the quadrature rule used.\nI m not very familiar with this, maybe @recuero will know who to hit up for this",
                          "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3338111",
                          "updatedAt": "2022-08-06T05:03:58Z",
                          "publishedAt": "2022-08-06T05:03:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "@neuphris",
                          "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3339745",
                          "updatedAt": "2022-08-06T14:32:01Z",
                          "publishedAt": "2022-08-06T14:32:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "neuphris"
                          },
                          "bodyText": "Like @GiudGiud  mentioned, these integration points come from the Gauss quadrature points. For the second order, the quadrature points are +0.57735 and -0.57735. If you assume the thickness to be 't' with bottom as '0', you can transform the first qp (xi) from the parent domain [-1, 1] to  physical domain [a,b] or [0, t]  as:\nx = a/2* (1- xi) + b/2 * (1 - xi) =  0 + t/2 (1-0.57735) = t/2 - t/2 * 0.57735 .\nSimilarly you can find the location of the quadrature points on the physical domain with higher order.",
                          "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3352992",
                          "updatedAt": "2022-08-08T22:10:02Z",
                          "publishedAt": "2022-08-08T21:25:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Okay, that makes some sense. Between these points is variation linear or does the interpolation between them change depending on the order (I'm guessing the second). Basically I'm trying to use MOOSE for some shell element FEA and I need shell top and bottom stresses, not stresses at gauss points, so I need a way to extrapolate from the output points to surface stresses (where the stress is maximum in bending and the typical FE output point for a shell). Sorry for pestering, it would be helpful if this information (which is essential to using shells for any serious work) was more easily accessible somewhere.",
                          "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3373277",
                          "updatedAt": "2022-08-11T09:39:30Z",
                          "publishedAt": "2022-08-11T09:39:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "neuphris"
                          },
                          "bodyText": "I have not compared the stresses at the surfaces, but I believe you can take the value of the stress at the Gauss QP and map it to the node using the shape function.",
                          "url": "https://github.com/idaholab/moose/discussions/21735#discussioncomment-3376668",
                          "updatedAt": "2022-08-11T15:15:15Z",
                          "publishedAt": "2022-08-11T15:15:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Severe Questions about ArrayVariable",
          "author": {
            "login": "dingqiushi"
          },
          "bodyText": "The inheritance relationship changed from inheriting  Kernel.C  to inheriting ArrayKernel.C. The data type of the variables also changed from \"const VariableValue & _u;\" to \"const ArrayVariableValue & _u;\". There are severe questions about data types that I would like to ask.\n\n\nHow do I express the component of _u in the code, which brackets should I use, [] or ()?\n\n\nI need to use the value of _u in another file, so assign the value of _u in the kernel file to another file by means of a pointer. My current compilation succeeds in writing the assignment  in the kernel file\n\n\nfor (size_t i=0; i<_count; ++i)\n  _cfd_data._u[i] = _u[i];\n\nDeclare the new variable in another file\nRealEigenVector _u[10];\nI don't know if this makes sense, is there any connection between the data types RealEigenVector and ArrayVariableValue?\n\n\nI found the data type RealEigenMatrix in MooseType.h. If I replace the Real type in the code when I have a single variable with the RealEigenVector type which is suitable for multiple variables, should I replace RealVectorValue with RealEigenMatrix, and how should a variable of type RealEigenMatrix represent its components?\n\n\nFor the previous RealTensorValue type, I did not find a matching type suitable for multiple variables. Is there any data type that can represent a variable with more than 2 dimensions? For example, I want to represent a variable with a dimension of 5 x 5 x 3 x 3, which can be seen as a large matrix nested within a small matrix, where each component of the large 5 x 5 matrix is a small 3 x 3 matrix, what data type is suitable for such a variable?\n\n\nI also found the data types RealVectorArrayValue and RealTensorArrayValue in MooseType.h. They both seem to have a limit on the number of columns, with a dynamic number of rows and a Moose::dim number of columns. Can the number of columns for these two data types exceed 3?\n\n\nCan any variable in the code directly represent the order of _u of a multivariate? Which self-contained function in moose can be used to get the norm directly for variables of type RealEigenVector?",
          "url": "https://github.com/idaholab/moose/discussions/21817",
          "updatedAt": "2022-08-12T08:39:59Z",
          "publishedAt": "2022-08-10T10:47:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease read the array variable documentation, I feel it will answer a lot of your questions.\nhttps://mooseframework.inl.gov/source/variables/ArrayMooseVariable.html\nFor question 4, array is a 1D array and is your only option for a multi-component variable with an arbitrary number (here 225) of components IF that is the non linear variable.\nIf that object is NOT the non linear variable, then you may look at using a RankFourTensor instead\n\nwe define the .norm() class member attribute routine for a lot of classes. I cant recall if RealEigenVector is one of them.\n\nGuillaume\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21817#discussioncomment-3371454",
                  "updatedAt": "2022-08-11T03:58:15Z",
                  "publishedAt": "2022-08-11T03:58:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "non-convergence wave propagation",
          "author": {
            "login": "eduardogrodriguez89"
          },
          "bodyText": "Hello,\nI recently tried to use MOOSE to simulate the Wave propagation in 2D using Newmark time integration but encountered the problem that after 100-time steps aproximatly it doesn't converge, and I can't find the error.\n#The test is for a mesh 2D of 50mm x 20mm fixed on one end with a hann-windowed toneburst pulse Dirichlet boundary condition #applied to the other end.\n#The equation of motion in terms of matrices is:\n#Maccel +  Kdisp = 0\n[Executioner]\n  type = Transient\n  scheme = bdf2\n\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type -pc_hypre_type -ksp_gmres_restart'\n  petsc_options_value = 'hypre    boomeramg 31 '\n\n  nl_abs_tol = 1e-12\n  nl_rel_tol = 1e-10\n  l_max_its = 30\n\n  start_time = 0\n  end_time = 1100e-8\n  dt = 5e-9\n[]\n\n[Functions]\n  [./bc_func]\n    type = ParsedFunction\n    value = 'T_H := N_B / frequency;\n             h   := 0.5 * (1 - cos(2*pi*t/T_H));\n             if(t <= T_H, h * amp * sin(2*pi*frequency*t), 0.0)'\n    vars = 'N_B    frequency    amp'\n    vals = '3      3.5e6        -1e-4'\n  [../]\n[]\n\n[Materials]\n  [./Elasticity_tensor]\n  type = ComputeElasticityTensor\n  fill_method = symmetric9\n  C_ijkl = '15.01e9 5.76e9 5.76e9 13.929e9 7.089e9 13.929e9 3.4235e9 3.014e9 3.014e9'\n  [../]\n  [./strain]\n  type = ComputeSmallStrain\n  displacements = 'disp_x disp_y'\n  [../]\n  [./stress]\n  type = ComputeLinearElasticStress\n  [../]\n  [./density]\n  type = GenericConstantMaterial\n  prop_names = 'density'\n  prop_values = '916.8'\n  [../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/21807",
          "updatedAt": "2022-09-29T16:35:38Z",
          "publishedAt": "2022-08-09T12:15:52Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I am not sure if bdf2 is compatible with the Newmark-Beta time integrator... As a first step, you'd want to follow the setups in the regression tests.",
                  "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3358508",
                  "updatedAt": "2022-08-09T14:14:20Z",
                  "publishedAt": "2022-08-09T14:14:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also please attach the log showing the convergence issue",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3358517",
                          "updatedAt": "2022-08-09T14:15:20Z",
                          "publishedAt": "2022-08-09T14:15:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3359112",
                          "updatedAt": "2022-08-09T15:23:49Z",
                          "publishedAt": "2022-08-09T15:23:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "please attach the full log.\nWhile the residuals are extremely high, there are some signs of convergence here",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3359479",
                          "updatedAt": "2022-08-09T16:12:51Z",
                          "publishedAt": "2022-08-09T16:12:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "eduardogrodriguez89"
                  },
                  "bodyText": "Here there are some captures",
                  "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3368679",
                  "updatedAt": "2022-08-10T17:44:45Z",
                  "publishedAt": "2022-08-10T17:44:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Please copy and paste terminal output using code blocks and do not post screenshots",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3368757",
                          "updatedAt": "2022-08-10T17:52:21Z",
                          "publishedAt": "2022-08-10T17:52:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "I copied the first steps and the last steps. I don't know if it is necessary to copy all terminal output?\n(moose) erodriguez@moccai-11:~/projects/examples$ ../wave/wave-opt -i rot_1019grains_3e5cl_4clong_2cwide_1mmsize.i -snes_converged_reason -ksp_monitor\n*** Info ***\nTensorMechanics Action: selecting 'total small strain' formulation. Use incremental = true to select 'incremental small strain' instead.\nWarning, ntags=3, but we currently only support reading 2 flags.\nSetting Up\nInitializing\nFinished Initializing Equation Systems                                               [  4.94 s] [ 1076 MB]\nFinished Initializing                                                                  [  5.67 s] [ 1100 MB]\nFinished Setting Up                                                                      [ 10.93 s] [ 1604 MB]\nFramework Information:\nMOOSE Version:           git commit 1036cc2 on 2022-06-29\nLibMesh Version:\nPETSc Version:           3.16.5\nSLEPc Version:           3.16.2\nCurrent Time:            Wed Aug 10 14:56:24 2022\nExecutable Timestamp:    Fri Jul 29 12:23:42 2022\nParallelism:\nNum Processors:          1\nNum Threads:             1\nMesh:\nParallel Type:           replicated\nMesh Dimension:          2\nSpatial Dimension:       2\nNodes:                   891112\nElems:                   889111\nNum Subdomains:          1019\nNonlinear System:\nNum DOFs:                1782224\nNum Local DOFs:          1782224\nVariables:               { \"disp_x\" \"disp_y\" }\nFinite Element Types:    \"LAGRANGE\"\nApproximation Orders:    \"FIRST\"\nAuxiliary System:\nNum DOFs:                5346672\nNum Local DOFs:          5346672\nVariables:               { \"vel_magnitude\" \"disp_magnitude\" \"vel_x\" \"accel_x\" \"vel_y\" \"accel_y\" }\nFinite Element Types:    \"LAGRANGE\"\nApproximation Orders:    \"FIRST\"\nExecution Information:\nExecutioner:             Transient\nTimeStepper:             ConstantDT\nSolver Mode:             NEWTON\nMOOSE Preconditioner:    SMP\nLEGACY MODES ENABLED:\nThis application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\nFinished Building SemiLocalElemMap                                                   [  1.80 s] [  106 MB]\n\nFinished Performing Initial Setup                                                      [  8.36 s] [  275 MB]\nTime Step 0, time = 0\nTime Step 1, time = 5e-09, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.29 s] [    1 MB]\nFinished Computing Initial Residual                                                  [  5.29 s] [    1 MB]\nFinished Computing Residual                                                          [  5.58 s] [    0 MB]\n\n0 Nonlinear |R| = 6.658255e+02\nComputing Jacobian.                                                                  [ 14.20 s] [  231 MB]\n0 Linear |R| = 6.658255e+02\n0 KSP Residual norm 6.658255496260e+02\n1 Linear |R| = 7.727651e+00\n1 KSP Residual norm 7.727650956249e+00\n2 Linear |R| = 1.536327e-01\n2 KSP Residual norm 1.536326969312e-01\n3 Linear |R| = 6.549255e-03\n3 KSP Residual norm 6.549255430298e-03\nComputing Residual                                                                   [  6.36 s] [    7 MB]\n\n1 Nonlinear |R| = 6.549255e-03\nComputing Jacobian.                                                                  [ 14.34 s] [    0 MB]\n0 Linear |R| = 6.549255e-03\n0 KSP Residual norm 6.549255430295e-03\n1 Linear |R| = 5.425062e-04\n1 KSP Residual norm 5.425061547151e-04\n2 Linear |R| = 2.084915e-05\n2 KSP Residual norm 2.084915123314e-05\n3 Linear |R| = 1.179882e-06\n3 KSP Residual norm 1.179881675127e-06\n4 Linear |R| = 5.645013e-08\n4 KSP Residual norm 5.645013148182e-08\nFinished Computing Residual                                                          [  5.56 s] [    0 MB]\n2 Nonlinear |R| = 5.645015e-08\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nFinished Solving                                                                       [ 64.71 s] [  177 MB]\nSolve Converged!\nTime Step 2, time = 1e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.63 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.63 s] [    0 MB]\nFinished Computing Residual                                                          [  5.53 s] [    0 MB]\n\n0 Nonlinear |R| = 1.406284e+03\nComputing Jacobian.                                                                  [ 13.35 s] [    0 MB]\n0 Linear |R| = 1.406284e+03\n0 KSP Residual norm 1.406283747742e+03\n1 Linear |R| = 1.776474e+01\n1 KSP Residual norm 1.776473860364e+01\n2 Linear |R| = 5.464860e-01\n2 KSP Residual norm 5.464859726937e-01\n3 Linear |R| = 2.625388e-02\n3 KSP Residual norm 2.625387552657e-02\n4 Linear |R| = 1.692487e-03\n4 KSP Residual norm 1.692487085733e-03\nFinished Computing Residual                                                          [  5.56 s] [    0 MB]\n1 Nonlinear |R| = 1.692487e-03\nComputing Jacobian.                                                                  [ 13.37 s] [    0 MB]\n0 Linear |R| = 1.692487e-03\n0 KSP Residual norm 1.692487085836e-03\n1 Linear |R| = 1.316537e-04\n1 KSP Residual norm 1.316537464243e-04\n2 Linear |R| = 6.693428e-06\n2 KSP Residual norm 6.693427569228e-06\n3 Linear |R| = 2.738543e-07\n3 KSP Residual norm 2.738543124175e-07\n4 Linear |R| = 1.785902e-08\n4 KSP Residual norm 1.785902352112e-08\n5 Linear |R| = 7.567669e-10\n5 KSP Residual norm 7.567669481751e-10\nFinished Computing Residual                                                          [  5.55 s] [    0 MB]\n2 Nonlinear |R| = 7.567138e-10\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 53.10 s] [   -1 MB]\nTime Step 3, time = 1.5e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.62 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.62 s] [    0 MB]\nFinished Computing Residual                                                          [  5.66 s] [    0 MB]\n\n0 Nonlinear |R| = 1.852540e+04\nComputing Jacobian.                                                                  [ 13.42 s] [    0 MB]\n0 Linear |R| = 1.852540e+04\n0 KSP Residual norm 1.852540215300e+04\n1 Linear |R| = 2.174414e+02\n1 KSP Residual norm 2.174413932366e+02\n2 Linear |R| = 5.072022e+00\n2 KSP Residual norm 5.072021699497e+00\n3 Linear |R| = 2.247386e-01\n3 KSP Residual norm 2.247386305756e-01\n4 Linear |R| = 1.213658e-02\n4 KSP Residual norm 1.213658136016e-02\nFinished Computing Residual                                                          [  5.59 s] [    0 MB]\n1 Nonlinear |R| = 1.213658e-02\nComputing Jacobian.                                                                  [ 13.42 s] [    0 MB]\n0 Linear |R| = 1.213658e-02\n0 KSP Residual norm 1.213658136026e-02\n1 Linear |R| = 9.438919e-04\n1 KSP Residual norm 9.438919199803e-04\n2 Linear |R| = 5.182881e-05\n2 KSP Residual norm 5.182880786383e-05\n3 Linear |R| = 2.031770e-06\n3 KSP Residual norm 2.031770196813e-06\n4 Linear |R| = 1.300700e-07\n4 KSP Residual norm 1.300700454725e-07\n5 Linear |R| = 6.116218e-09\n5 KSP Residual norm 6.116218026036e-09\nFinished Computing Residual                                                          [  5.68 s] [    0 MB]\n2 Nonlinear |R| = 6.116125e-09\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 53.37 s] [   -1 MB]\nTime Step 4, time = 2e-08, dt = 5e-09\nComputing Initial Residual\n  Computing Residual                                                                 [  5.88 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.89 s] [    0 MB]\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n\n0 Nonlinear |R| = 9.942944e+04\nComputing Jacobian.                                                                  [ 13.89 s] [    0 MB]\n0 Linear |R| = 9.942944e+04\n0 KSP Residual norm 9.942943980745e+04\n1 Linear |R| = 1.155702e+03\n1 KSP Residual norm 1.155702089632e+03\n2 Linear |R| = 2.205949e+01\n2 KSP Residual norm 2.205948874109e+01\n3 Linear |R| = 9.617335e-01\n3 KSP Residual norm 9.617334626256e-01\nFinished Computing Residual                                                          [  5.62 s] [    0 MB]\n1 Nonlinear |R| = 9.617335e-01\nComputing Jacobian.                                                                  [ 13.78 s] [    0 MB]\n0 Linear |R| = 9.617335e-01\n0 KSP Residual norm 9.617334626254e-01\n1 Linear |R| = 7.621498e-02\n1 KSP Residual norm 7.621497714136e-02\n2 Linear |R| = 3.341162e-03\n2 KSP Residual norm 3.341162408354e-03\n3 Linear |R| = 1.775373e-04\n3 KSP Residual norm 1.775372828037e-04\n4 Linear |R| = 9.058591e-06\n4 KSP Residual norm 9.058591285391e-06\nComputing Residual                                                                   [  5.89 s] [    0 MB]\n2 Nonlinear |R| = 9.058591e-06\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 54.47 s] [   -1 MB]\nTime Step 5, time = 2.5e-08, dt = 5e-09\nComputing Initial Residual\n  Computing Residual                                                                 [  6.77 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  6.77 s] [    0 MB]\nComputing Residual                                                                   [  6.02 s] [    0 MB]\n\n0 Nonlinear |R| = 2.744831e+05\nComputing Jacobian..                                                                 [ 15.64 s] [    0 MB]\n0 Linear |R| = 2.744831e+05\n0 KSP Residual norm 2.744830568238e+05\n1 Linear |R| = 3.156455e+03\n1 KSP Residual norm 3.156455085736e+03\n2 Linear |R| = 5.596788e+01\n2 KSP Residual norm 5.596788481168e+01\n3 Linear |R| = 2.649030e+00\n3 KSP Residual norm 2.649030098560e+00\nFinished Computing Residual                                                          [  5.64 s] [    0 MB]\n1 Nonlinear |R| = 2.649030e+00\nComputing Jacobian.                                                                  [ 13.39 s] [    0 MB]\n0 Linear |R| = 2.649030e+00\n0 KSP Residual norm 2.649030098561e+00\n1 Linear |R| = 1.763955e-01\n1 KSP Residual norm 1.763955222823e-01\n2 Linear |R| = 8.765379e-03\n2 KSP Residual norm 8.765378744165e-03\n3 Linear |R| = 4.568912e-04\n3 KSP Residual norm 4.568911584940e-04\n4 Linear |R| = 2.468792e-05\n4 KSP Residual norm 2.468791730439e-05\nFinished Computing Residual                                                          [  5.60 s] [    0 MB]\n2 Nonlinear |R| = 2.468792e-05\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 56.91 s] [   -1 MB]\nTime Step 6, time = 3e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.59 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.59 s] [    0 MB]\nFinished Computing Residual                                                          [  5.58 s] [    0 MB]\n\n0 Nonlinear |R| = 5.454940e+05\nComputing Jacobian.                                                                  [ 14.71 s] [    0 MB]\n0 Linear |R| = 5.454940e+05\n0 KSP Residual norm 5.454940087035e+05\n1 Linear |R| = 6.007345e+03\n1 KSP Residual norm 6.007344904105e+03\n2 Linear |R| = 1.088764e+02\n2 KSP Residual norm 1.088763898986e+02\n3 Linear |R| = 6.058167e+00\n3 KSP Residual norm 6.058167105320e+00\n4 Linear |R| = 2.209342e-01\n4 KSP Residual norm 2.209342199811e-01\nComputing Residual                                                                   [  6.29 s] [    0 MB]\n1 Nonlinear |R| = 2.209342e-01\nComputing Jacobian.                                                                  [ 13.98 s] [    0 MB]\n0 Linear |R| = 2.209342e-01\n0 KSP Residual norm 2.209342199806e-01\n1 Linear |R| = 1.692906e-02\n1 KSP Residual norm 1.692906374419e-02\n2 Linear |R| = 8.345466e-04\n2 KSP Residual norm 8.345465597162e-04\n3 Linear |R| = 4.082259e-05\n3 KSP Residual norm 4.082258728769e-05\n4 Linear |R| = 2.315618e-06\n4 KSP Residual norm 2.315617895748e-06\n5 Linear |R| = 1.147273e-07\n5 KSP Residual norm 1.147272764854e-07\nComputing Residual                                                                   [  6.31 s] [    0 MB]\n2 Nonlinear |R| = 1.147268e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 56.94 s] [   -1 MB]\nTime Step 7, time = 3.5e-08, dt = 5e-09\nComputing Initial Residual\n  Computing Residual                                                                 [  5.86 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.87 s] [    0 MB]\nFinished Computing Residual                                                          [  5.66 s] [    0 MB]\n\n0 Nonlinear |R| = 8.987584e+05\nComputing Jacobian.                                                                  [ 13.70 s] [    0 MB]\n0 Linear |R| = 8.987584e+05\n0 KSP Residual norm 8.987583659457e+05\n1 Linear |R| = 9.094539e+03\n1 KSP Residual norm 9.094539041994e+03\n2 Linear |R| = 1.945694e+02\n2 KSP Residual norm 1.945694039168e+02\n3 Linear |R| = 1.152627e+01\n3 KSP Residual norm 1.152627311329e+01\n4 Linear |R| = 3.419821e-01\n4 KSP Residual norm 3.419820677881e-01\nFinished Computing Residual                                                          [  5.71 s] [    0 MB]\n1 Nonlinear |R| = 3.419821e-01\nComputing Jacobian.                                                                  [ 13.64 s] [    0 MB]\n0 Linear |R| = 3.419821e-01\n0 KSP Residual norm 3.419820677914e-01\n1 Linear |R| = 2.565003e-02\n1 KSP Residual norm 2.565002987170e-02\n2 Linear |R| = 1.342643e-03\n2 KSP Residual norm 1.342642542016e-03\n3 Linear |R| = 5.979530e-05\n3 KSP Residual norm 5.979530435642e-05\n4 Linear |R| = 3.674666e-06\n4 KSP Residual norm 3.674666379932e-06\n5 Linear |R| = 1.718157e-07\n5 KSP Residual norm 1.718157030688e-07\nComputing Residual                                                                   [  6.66 s] [    0 MB]\n2 Nonlinear |R| = 1.718159e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 55.64 s] [   -1 MB]\nTime Step 8, time = 4e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.70 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.70 s] [    0 MB]\nComputing Residual                                                                   [  5.75 s] [    0 MB]\n\n0 Nonlinear |R| = 1.331145e+06\nComputing Jacobian.                                                                  [ 13.58 s] [    0 MB]\n0 Linear |R| = 1.331145e+06\n0 KSP Residual norm 1.331144968007e+06\n1 Linear |R| = 1.218636e+04\n1 KSP Residual norm 1.218636047597e+04\n2 Linear |R| = 3.104145e+02\n2 KSP Residual norm 3.104144968305e+02\n3 Linear |R| = 1.722240e+01\n3 KSP Residual norm 1.722239792085e+01\n4 Linear |R| = 4.751044e-01\n4 KSP Residual norm 4.751043744933e-01\nComputing Residual                                                                   [  6.55 s] [    0 MB]\n1 Nonlinear |R| = 4.751044e-01\nComputing Jacobian.                                                                  [ 14.65 s] [    0 MB]\n0 Linear |R| = 4.751044e-01\n0 KSP Residual norm 4.751043744811e-01\n1 Linear |R| = 3.486208e-02\n1 KSP Residual norm 3.486207901521e-02\n2 Linear |R| = 1.920091e-03\n2 KSP Residual norm 1.920090566260e-03\n3 Linear |R| = 8.222344e-05\n3 KSP Residual norm 8.222343524140e-05\n4 Linear |R| = 5.297845e-06\n4 KSP Residual norm 5.297845008894e-06\n5 Linear |R| = 2.299865e-07\n5 KSP Residual norm 2.299864919591e-07\nFinished Computing Residual                                                          [  5.70 s] [    0 MB]\n2 Nonlinear |R| = 2.299981e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 56.12 s] [   -1 MB]\nTime Step 9, time = 4.5e-08, dt = 5e-09\nComputing Initial Residual\n  Computing Residual                                                                 [  5.99 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.99 s] [    0 MB]\nComputing Residual                                                                   [  5.92 s] [    0 MB]\n\n0 Nonlinear |R| = 1.846203e+06\nComputing Jacobian.                                                                  [ 13.60 s] [    0 MB]\n0 Linear |R| = 1.846203e+06\n0 KSP Residual norm 1.846203431300e+06\n1 Linear |R| = 1.594016e+04\n1 KSP Residual norm 1.594016010139e+04\n2 Linear |R| = 4.305095e+02\n2 KSP Residual norm 4.305095396707e+02\n3 Linear |R| = 2.212476e+01\n3 KSP Residual norm 2.212475786792e+01\n4 Linear |R| = 6.630093e-01\n4 KSP Residual norm 6.630092683872e-01\nFinished Computing Residual                                                          [  5.68 s] [    0 MB]\n1 Nonlinear |R| = 6.630093e-01\nComputing Jacobian.                                                                  [ 13.55 s] [    0 MB]\n0 Linear |R| = 6.630093e-01\n0 KSP Residual norm 6.630092683747e-01\n1 Linear |R| = 4.930792e-02\n1 KSP Residual norm 4.930792327856e-02\n2 Linear |R| = 2.721481e-03\n2 KSP Residual norm 2.721481260510e-03\n3 Linear |R| = 1.126293e-04\n3 KSP Residual norm 1.126293471120e-04\n4 Linear |R| = 7.319985e-06\n4 KSP Residual norm 7.319984987393e-06\n5 Linear |R| = 3.072754e-07\n5 KSP Residual norm 3.072754266047e-07\nFinished Computing Residual                                                          [  5.79 s] [    0 MB]\n2 Nonlinear |R| = 3.072804e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 54.64 s] [   -1 MB]\nTime Step 10, time = 5e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.68 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.68 s] [    0 MB]\nFinished Computing Residual                                                          [  5.70 s] [    0 MB]\n\n0 Nonlinear |R| = 2.431392e+06\nComputing Jacobian.                                                                  [ 13.63 s] [    0 MB]\n0 Linear |R| = 2.431392e+06\n0 KSP Residual norm 2.431391841127e+06\n1 Linear |R| = 2.096452e+04\n1 KSP Residual norm 2.096452297123e+04\n2 Linear |R| = 5.276755e+02\n2 KSP Residual norm 5.276754851514e+02\n3 Linear |R| = 2.621224e+01\n3 KSP Residual norm 2.621223929935e+01\n4 Linear |R| = 8.744396e-01\n4 KSP Residual norm 8.744396461444e-01\nFinished Computing Residual                                                          [  5.73 s] [    0 MB]\n1 Nonlinear |R| = 8.744396e-01\nComputing Jacobian.                                                                  [ 14.08 s] [    0 MB]\n0 Linear |R| = 8.744396e-01\n0 KSP Residual norm 8.744396461583e-01\n1 Linear |R| = 6.816821e-02\n1 KSP Residual norm 6.816821389353e-02\n2 Linear |R| = 3.708404e-03\n2 KSP Residual norm 3.708403673530e-03\n3 Linear |R| = 1.540024e-04\n3 KSP Residual norm 1.540023845828e-04\n4 Linear |R| = 9.826897e-06\n4 KSP Residual norm 9.826897394664e-06\n5 Linear |R| = 4.157862e-07\n5 KSP Residual norm 4.157862281673e-07\nComputing Residual                                                                   [  5.81 s] [    0 MB]\n2 Nonlinear |R| = 4.157888e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 54.69 s] [   -1 MB]\nTime Step 11, time = 5.5e-08, dt = 5e-09\nComputing Initial Residual\n  Computing Residual                                                                 [  6.95 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  6.95 s] [    0 MB]\nComputing Residual                                                                   [  6.27 s] [    0 MB]\n\n0 Nonlinear |R| = 3.067807e+06\nComputing Jacobian.                                                                  [ 14.13 s] [    0 MB]\n0 Linear |R| = 3.067807e+06\n0 KSP Residual norm 3.067806849613e+06\n1 Linear |R| = 2.652016e+04\n1 KSP Residual norm 2.652015711347e+04\n2 Linear |R| = 6.424745e+02\n2 KSP Residual norm 6.424745213498e+02\n3 Linear |R| = 3.127508e+01\n3 KSP Residual norm 3.127507514188e+01\n4 Linear |R| = 1.181462e+00\n4 KSP Residual norm 1.181461618466e+00\nComputing Residual                                                                   [  6.09 s] [    0 MB]\n1 Nonlinear |R| = 1.181462e+00\nComputing Jacobian.                                                                  [ 13.91 s] [    0 MB]\n0 Linear |R| = 1.181462e+00\n0 KSP Residual norm 1.181461618469e+00\n1 Linear |R| = 9.283579e-02\n1 KSP Residual norm 9.283578718451e-02\n2 Linear |R| = 4.894531e-03\n2 KSP Residual norm 4.894530527826e-03\n3 Linear |R| = 2.030704e-04\n3 KSP Residual norm 2.030703770309e-04\n4 Linear |R| = 1.300696e-05\n4 KSP Residual norm 1.300696141114e-05\n5 Linear |R| = 5.454404e-07\n5 KSP Residual norm 5.454403598014e-07\nFinished Computing Residual                                                          [  5.71 s] [    0 MB]\n2 Nonlinear |R| = 5.454518e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 57.39 s] [  -10 MB]\nTime Step 12, time = 6e-08, dt = 5e-09\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.68 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.69 s] [    0 MB]\nFinished Computing Residual                                                          [  5.69 s] [    0 MB]\n\n0 Nonlinear |R| = 3.740657e+06\nComputing Jacobian.                                                                  [ 13.59 s] [    0 MB]\n0 Linear |R| = 3.740657e+06\n0 KSP Residual norm 3.740656971662e+06\n1 Linear |R| = 3.020024e+04\n1 KSP Residual norm 3.020023667904e+04\n2 Linear |R| = 7.650650e+02\n2 KSP Residual norm 7.650649624748e+02\n3 Linear |R| = 3.865324e+01\n3 KSP Residual norm 3.865323988582e+01\n4 Linear |R| = 1.589163e+00\n4 KSP Residual norm 1.589163163592e+00\nComputing Residual                                                                   [  5.97 s] [    0 MB]\n1 Nonlinear |R| = 1.589163e+00\nComputing Jacobian.                                                                  [ 13.61 s] [    0 MB]\n0 Linear |R| = 1.589163e+00\n0 KSP Residual norm 1.589163163596e+00\n1 Linear |R| = 1.288298e-01\n1 KSP Residual norm 1.288298373644e-01\n2 Linear |R| = 6.375383e-03\n2 KSP Residual norm 6.375383277777e-03\n3 Linear |R| = 2.684423e-04\n3 KSP Residual norm 2.684422742899e-04\n4 Linear |R| = 1.819309e-05\n4 KSP Residual norm 1.819308767236e-05\n5 Linear |R| = 6.475369e-07\n5 KSP Residual norm 6.475369079229e-07\nFinished Computing Residual                                                          [  5.75 s] [    0 MB]\n2 Nonlinear |R| = 6.475557e-07\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 2\nSolve Converged!\nFinished Solving                                                                       [ 54.53 s] [   -2 MB]\nTime Step 13, time = 6.5e-08, dt = 5e-09\nComputing Residual                                                                   [  6.19 s] [    0 MB]\n\n49 Nonlinear |R| = 5.305152e+28\nComputing Jacobian.                                                                  [ 14.37 s] [    0 MB]\n0 Linear |R| = 5.305152e+28\n0 KSP Residual norm 5.305151816335e+28\n1 Linear |R| = 3.013929e+27\n1 KSP Residual norm 3.013928862667e+27\n2 Linear |R| = 2.528022e+26\n2 KSP Residual norm 2.528021624317e+26\n3 Linear |R| = 2.671620e+25\n3 KSP Residual norm 2.671619776866e+25\n4 Linear |R| = 2.846146e+24\n4 KSP Residual norm 2.846146029892e+24\n5 Linear |R| = 3.102936e+23\n5 KSP Residual norm 3.102936444136e+23\nComputing Residual                                                                   [  6.35 s] [    0 MB]\n50 Nonlinear |R| = 4.667948e+28\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 50\nSolve Did NOT Converge!\nFinished Solving                                                                       [1095.52 s] [   -1 MB]\nAborting as solve did not converge\nTime Step 99, time = 3.85955e-07, dt = 1e-13\nComputing Initial Residual\n  Computing Residual                                                                 [  5.99 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  6.00 s] [    0 MB]\nComputing Residual                                                                   [  5.74 s] [    0 MB]\n\n0 Nonlinear |R| = 5.573750e+29\nComputing Jacobian.                                                                  [ 13.87 s] [    0 MB]\n0 Linear |R| = 5.573750e+29\n0 KSP Residual norm 5.573750340637e+29\n1 Linear |R| = 3.166523e+28\n1 KSP Residual norm 3.166522577411e+28\n2 Linear |R| = 2.656007e+27\n2 KSP Residual norm 2.656007173286e+27\n3 Linear |R| = 2.806711e+26\n3 KSP Residual norm 2.806710527267e+26\n4 Linear |R| = 2.989906e+25\n4 KSP Residual norm 2.989906366909e+25\n5 Linear |R| = 3.259621e+24\n5 KSP Residual norm 3.259620871376e+24\nComputing Residual                                                                   [  5.94 s] [    0 MB]\n1 Nonlinear |R| = 5.425390e+29\nComputing Jacobian.                                                                  [ 13.88 s] [    0 MB]\n0 Linear |R| = 5.425390e+29\n0 KSP Residual norm 5.425389793730e+29\n1 Linear |R| = 3.082237e+28\n1 KSP Residual norm 3.082236964367e+28\n2 Linear |R| = 2.585310e+27\n2 KSP Residual norm 2.585310409673e+27\n3 Linear |R| = 2.732005e+26\n3 KSP Residual norm 2.732004601027e+26\n4 Linear |R| = 2.910326e+25\n4 KSP Residual norm 2.910326422380e+25\n5 Linear |R| = 3.172863e+24\n5 KSP Residual norm 3.172862777237e+24\nComputing Residual                                                                   [  5.91 s] [    0 MB]\n2 Nonlinear |R| = 5.277029e+29\nComputing Jacobian.                                                                  [ 13.88 s] [    0 MB]\n0 Linear |R| = 5.277029e+29\n0 KSP Residual norm 5.277029247383e+29\n1 Linear |R| = 2.997951e+28\n1 KSP Residual norm 2.997951351363e+28\n2 Linear |R| = 2.514614e+27\n2 KSP Residual norm 2.514613643547e+27\n3 Linear |R| = 2.657299e+26\n3 KSP Residual norm 2.657298611655e+26\n4 Linear |R| = 2.830746e+25\n4 KSP Residual norm 2.830746353541e+25\n5 Linear |R| = 3.086105e+24\n5 KSP Residual norm 3.086104530457e+24\nComputing Residual                                                                   [  5.84 s] [    0 MB]\n3 Nonlinear |R| = 5.128669e+29\nComputing Jacobian.                                                                  [ 13.85 s] [    0 MB]\n0 Linear |R| = 5.128669e+29\n0 KSP Residual norm 5.128668701612e+29\n1 Linear |R| = 2.913666e+28\n1 KSP Residual norm 2.913665738399e+28\n2 Linear |R| = 2.443917e+27\n2 KSP Residual norm 2.443916874840e+27\n3 Linear |R| = 2.582593e+26\n3 KSP Residual norm 2.582592557376e+26\n4 Linear |R| = 2.751166e+25\n4 KSP Residual norm 2.751166156897e+25\n5 Linear |R| = 2.999346e+24\n5 KSP Residual norm 2.999346126744e+24\nComputing Residual                                                                   [  5.86 s] [    0 MB]\n4 Nonlinear |R| = 4.980308e+29\nComputing Jacobian.                                                                  [ 13.88 s] [    0 MB]\n0 Linear |R| = 4.980308e+29\n0 KSP Residual norm 4.980308156435e+29\n1 Linear |R| = 2.829380e+28\n1 KSP Residual norm 2.829380125477e+28\n2 Linear |R| = 2.373220e+27\n2 KSP Residual norm 2.373220103475e+27\n3 Linear |R| = 2.507886e+26\n3 KSP Residual norm 2.507886436314e+26\n4 Linear |R| = 2.671586e+25\n4 KSP Residual norm 2.671585828750e+25\n5 Linear |R| = 2.912588e+24\n5 KSP Residual norm 2.912587561560e+24\nComputing Residual                                                                   [  5.86 s] [    0 MB]\n5 Nonlinear |R| = 4.831948e+29\nComputing Jacobian.                                                                  [ 13.76 s] [    0 MB]\n0 Linear |R| = 4.831948e+29\n0 KSP Residual norm 4.831947611869e+29\n1 Linear |R| = 2.745095e+28\n1 KSP Residual norm 2.745094512597e+28\n2 Linear |R| = 2.302523e+27\n2 KSP Residual norm 2.302523329373e+27\n3 Linear |R| = 2.433180e+26\n3 KSP Residual norm 2.433180246478e+26\n4 Linear |R| = 2.592005e+25\n4 KSP Residual norm 2.592005365183e+25\n5 Linear |R| = 2.825829e+24\n5 KSP Residual norm 2.825828830095e+24\nComputing Residual                                                                   [  5.89 s] [    0 MB]\n6 Nonlinear |R| = 4.683587e+29\nComputing Jacobian.                                                                  [ 13.77 s] [    0 MB]\n0 Linear |R| = 4.683587e+29\n0 KSP Residual norm 4.683587067932e+29\n1 Linear |R| = 2.660809e+28\n1 KSP Residual norm 2.660808899761e+28\n2 Linear |R| = 2.231827e+27\n2 KSP Residual norm 2.231826552451e+27\n3 Linear |R| = 2.358474e+26\n3 KSP Residual norm 2.358473985756e+26\n4 Linear |R| = 2.512425e+25\n4 KSP Residual norm 2.512424762037e+25\n5 Linear |R| = 2.739070e+24\n5 KSP Residual norm 2.739069927242e+24\nComputing Residual                                                                   [  5.89 s] [    0 MB]\n7 Nonlinear |R| = 4.535227e+29\nComputing Jacobian.                                                                  [ 13.85 s] [    0 MB]\n0 Linear |R| = 4.535227e+29\n0 KSP Residual norm 4.535226524645e+29\n1 Linear |R| = 2.576523e+28\n1 KSP Residual norm 2.576523286970e+28\n2 Linear |R| = 2.161130e+27\n2 KSP Residual norm 2.161129772620e+27\n3 Linear |R| = 2.283768e+26\n3 KSP Residual norm 2.283767651903e+26\n4 Linear |R| = 2.432844e+25\n4 KSP Residual norm 2.432844014890e+25\n5 Linear |R| = 2.652311e+24\n5 KSP Residual norm 2.652310847573e+24\nComputing Residual                                                                   [  5.89 s] [    0 MB]\n8 Nonlinear |R| = 4.386866e+29\nComputing Jacobian..                                                                 [ 15.55 s] [    0 MB]\n0 Linear |R| = 4.386866e+29\n0 KSP Residual norm 4.386865982029e+29\n1 Linear |R| = 2.492238e+28\n1 KSP Residual norm 2.492237674227e+28\n2 Linear |R| = 2.090433e+27\n2 KSP Residual norm 2.090432989783e+27\n3 Linear |R| = 2.209061e+26\n3 KSP Residual norm 2.209061242525e+26\n4 Linear |R| = 2.353263e+25\n4 KSP Residual norm 2.353263119033e+25\n5 Linear |R| = 2.565552e+24\n5 KSP Residual norm 2.565551585304e+24\nComputing Residual                                                                   [  7.05 s] [   -1 MB]\n9 Nonlinear |R| = 4.238505e+29\nComputing Jacobian..                                                                 [ 16.26 s] [    0 MB]\n0 Linear |R| = 4.238505e+29\n0 KSP Residual norm 4.238505440107e+29\n1 Linear |R| = 2.407952e+28\n1 KSP Residual norm 2.407952061532e+28\n2 Linear |R| = 2.019736e+27\n2 KSP Residual norm 2.019736203840e+27\n3 Linear |R| = 2.134355e+26\n3 KSP Residual norm 2.134354755069e+26\n4 Linear |R| = 2.273682e+25\n4 KSP Residual norm 2.273682069434e+25\n5 Linear |R| = 2.478792e+24\n5 KSP Residual norm 2.478792134260e+24\nComputing Residual                                                                   [  6.01 s] [    0 MB]\n10 Nonlinear |R| = 4.090145e+29\nComputing Jacobian.                                                                  [ 14.06 s] [    0 MB]\n0 Linear |R| = 4.090145e+29\n0 KSP Residual norm 4.090144898902e+29\n1 Linear |R| = 2.323666e+28\n1 KSP Residual norm 2.323666448886e+28\n2 Linear |R| = 1.949039e+27\n2 KSP Residual norm 1.949039414682e+27\n3 Linear |R| = 2.059648e+26\n3 KSP Residual norm 2.059648186801e+26\n4 Linear |R| = 2.194101e+25\n4 KSP Residual norm 2.194100860713e+25\n5 Linear |R| = 2.392032e+24\n5 KSP Residual norm 2.392032487833e+24\nComputing Residual                                                                   [  6.96 s] [    0 MB]\n11 Nonlinear |R| = 3.941784e+29\nComputing Jacobian.                                                                  [ 14.70 s] [    0 MB]\n0 Linear |R| = 3.941784e+29\n0 KSP Residual norm 3.941784358441e+29\n1 Linear |R| = 2.239381e+28\n1 KSP Residual norm 2.239380836293e+28\n2 Linear |R| = 1.878343e+27\n2 KSP Residual norm 1.878342622191e+27\n3 Linear |R| = 1.984942e+26\n3 KSP Residual norm 1.984941534790e+26\n4 Linear |R| = 2.114519e+25\n4 KSP Residual norm 2.114519487097e+25\n5 Linear |R| = 2.305273e+24\n5 KSP Residual norm 2.305272638935e+24\nComputing Residual                                                                   [  5.84 s] [    0 MB]\n12 Nonlinear |R| = 3.793424e+29\nComputing Jacobian.                                                                  [ 13.75 s] [    0 MB]\n0 Linear |R| = 3.793424e+29\n0 KSP Residual norm 3.793423818752e+29\n1 Linear |R| = 2.155095e+28\n1 KSP Residual norm 2.155095223754e+28\n2 Linear |R| = 1.807646e+27\n2 KSP Residual norm 1.807645826243e+27\n3 Linear |R| = 1.910235e+26\n3 KSP Residual norm 1.910234795882e+26\n4 Linear |R| = 2.034938e+25\n4 KSP Residual norm 2.034937942379e+25\n5 Linear |R| = 2.218513e+24\n5 KSP Residual norm 2.218512579947e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n13 Nonlinear |R| = 3.645063e+29\nComputing Jacobian.                                                                  [ 13.70 s] [    0 MB]\n0 Linear |R| = 3.645063e+29\n0 KSP Residual norm 3.645063279865e+29\n1 Linear |R| = 2.070810e+28\n1 KSP Residual norm 2.070809611271e+28\n2 Linear |R| = 1.736949e+27\n2 KSP Residual norm 1.736949026702e+27\n3 Linear |R| = 1.835528e+26\n3 KSP Residual norm 1.835527966680e+26\n4 Linear |R| = 1.955356e+25\n4 KSP Residual norm 1.955356219866e+25\n5 Linear |R| = 2.131752e+24\n5 KSP Residual norm 2.131752302653e+24\nComputing Residual                                                                   [  5.84 s] [    0 MB]\n14 Nonlinear |R| = 3.496703e+29\nComputing Jacobian.                                                                  [ 13.64 s] [    0 MB]\n0 Linear |R| = 3.496703e+29\n0 KSP Residual norm 3.496702741813e+29\n1 Linear |R| = 1.986524e+28\n1 KSP Residual norm 1.986523998846e+28\n2 Linear |R| = 1.666252e+27\n2 KSP Residual norm 1.666252223423e+27\n3 Linear |R| = 1.760821e+26\n3 KSP Residual norm 1.760821043507e+26\n4 Linear |R| = 1.875774e+25\n4 KSP Residual norm 1.875774312323e+25\n5 Linear |R| = 2.044992e+24\n5 KSP Residual norm 2.044991798166e+24\nComputing Residual                                                                   [  5.87 s] [    0 MB]\n15 Nonlinear |R| = 3.348342e+29\nComputing Jacobian.                                                                  [ 13.70 s] [    0 MB]\n0 Linear |R| = 3.348342e+29\n0 KSP Residual norm 3.348342204631e+29\n1 Linear |R| = 1.902238e+28\n1 KSP Residual norm 1.902238386482e+28\n2 Linear |R| = 1.595555e+27\n2 KSP Residual norm 1.595555416246e+27\n3 Linear |R| = 1.686114e+26\n3 KSP Residual norm 1.686114022377e+26\n4 Linear |R| = 1.796192e+25\n4 KSP Residual norm 1.796192211897e+25\n5 Linear |R| = 1.958231e+24\n5 KSP Residual norm 1.958231056848e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n16 Nonlinear |R| = 3.199982e+29\nComputing Jacobian.                                                                  [ 13.96 s] [    0 MB]\n0 Linear |R| = 3.199982e+29\n0 KSP Residual norm 3.199981668357e+29\n1 Linear |R| = 1.817953e+28\n1 KSP Residual norm 1.817952774181e+28\n2 Linear |R| = 1.524859e+27\n2 KSP Residual norm 1.524858604998e+27\n3 Linear |R| = 1.611407e+26\n3 KSP Residual norm 1.611406898947e+26\n4 Linear |R| = 1.716610e+25\n4 KSP Residual norm 1.716609910042e+25\n5 Linear |R| = 1.871470e+24\n5 KSP Residual norm 1.871470068205e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n17 Nonlinear |R| = 3.051621e+29\nComputing Jacobian.                                                                  [ 13.81 s] [    0 MB]\n0 Linear |R| = 3.051621e+29\n0 KSP Residual norm 3.051621133034e+29\n1 Linear |R| = 1.733667e+28\n1 KSP Residual norm 1.733667161946e+28\n2 Linear |R| = 1.454162e+27\n2 KSP Residual norm 1.454161789491e+27\n3 Linear |R| = 1.536700e+26\n3 KSP Residual norm 1.536699668475e+26\n4 Linear |R| = 1.637027e+25\n4 KSP Residual norm 1.637027397418e+25\n5 Linear |R| = 1.784709e+24\n5 KSP Residual norm 1.784708820770e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n18 Nonlinear |R| = 2.903261e+29\nComputing Jacobian.                                                                  [ 13.83 s] [    0 MB]\n0 Linear |R| = 2.903261e+29\n0 KSP Residual norm 2.903260598709e+29\n1 Linear |R| = 1.649382e+28\n1 KSP Residual norm 1.649381549781e+28\n2 Linear |R| = 1.383465e+27\n2 KSP Residual norm 1.383464969519e+27\n3 Linear |R| = 1.461992e+26\n3 KSP Residual norm 1.461992325756e+26\n4 Linear |R| = 1.557445e+25\n4 KSP Residual norm 1.557444663777e+25\n5 Linear |R| = 1.697947e+24\n5 KSP Residual norm 1.697947301962e+24\nComputing Residual                                                                   [  5.86 s] [    0 MB]\n19 Nonlinear |R| = 2.754900e+29\nComputing Jacobian.                                                                  [ 13.77 s] [    0 MB]\n0 Linear |R| = 2.754900e+29\n0 KSP Residual norm 2.754900065431e+29\n1 Linear |R| = 1.565096e+28\n1 KSP Residual norm 1.565095937690e+28\n2 Linear |R| = 1.312768e+27\n2 KSP Residual norm 1.312768144851e+27\n3 Linear |R| = 1.387285e+26\n3 KSP Residual norm 1.387284865054e+26\n4 Linear |R| = 1.477862e+25\n4 KSP Residual norm 1.477861697825e+25\n5 Linear |R| = 1.611185e+24\n5 KSP Residual norm 1.611185497915e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n20 Nonlinear |R| = 2.606540e+29\nComputing Jacobian.                                                                  [ 13.91 s] [    0 MB]\n0 Linear |R| = 2.606540e+29\n0 KSP Residual norm 2.606539533257e+29\n1 Linear |R| = 1.480810e+28\n1 KSP Residual norm 1.480810325675e+28\n2 Linear |R| = 1.242071e+27\n2 KSP Residual norm 1.242071315237e+27\n3 Linear |R| = 1.312577e+26\n3 KSP Residual norm 1.312577280013e+26\n4 Linear |R| = 1.398278e+25\n4 KSP Residual norm 1.398278487049e+25\n5 Linear |R| = 1.524423e+24\n5 KSP Residual norm 1.524423393266e+24\nComputing Residual                                                                   [  6.56 s] [    0 MB]\n21 Nonlinear |R| = 2.458179e+29\nComputing Jacobian..                                                                 [ 15.44 s] [    0 MB]\n0 Linear |R| = 2.458179e+29\n0 KSP Residual norm 2.458179002251e+29\n1 Linear |R| = 1.396525e+28\n1 KSP Residual norm 1.396524713742e+28\n2 Linear |R| = 1.171374e+27\n2 KSP Residual norm 1.171374480393e+27\n3 Linear |R| = 1.237870e+26\n3 KSP Residual norm 1.237869563555e+26\n4 Linear |R| = 1.318695e+25\n4 KSP Residual norm 1.318695017513e+25\n5 Linear |R| = 1.437661e+24\n5 KSP Residual norm 1.437660970906e+24\nComputing Residual                                                                   [  6.93 s] [    0 MB]\n22 Nonlinear |R| = 2.309818e+29\nComputing Jacobian.                                                                  [ 14.05 s] [    0 MB]\n0 Linear |R| = 2.309818e+29\n0 KSP Residual norm 2.309818472483e+29\n1 Linear |R| = 1.312239e+28\n1 KSP Residual norm 1.312239101895e+28\n2 Linear |R| = 1.100678e+27\n2 KSP Residual norm 1.100677640006e+27\n3 Linear |R| = 1.163162e+26\n3 KSP Residual norm 1.163161707749e+26\n4 Linear |R| = 1.239111e+25\n4 KSP Residual norm 1.239111273600e+25\n5 Linear |R| = 1.350898e+24\n5 KSP Residual norm 1.350898211662e+24\nComputing Residual                                                                   [  5.94 s] [    0 MB]\n23 Nonlinear |R| = 2.161458e+29\nComputing Jacobian.                                                                  [ 14.76 s] [    0 MB]\n0 Linear |R| = 2.161458e+29\n0 KSP Residual norm 2.161457944031e+29\n1 Linear |R| = 1.227953e+28\n1 KSP Residual norm 1.227953490140e+28\n2 Linear |R| = 1.029981e+27\n2 KSP Residual norm 1.029980793717e+27\n3 Linear |R| = 1.088454e+26\n3 KSP Residual norm 1.088453703642e+26\n4 Linear |R| = 1.159527e+25\n4 KSP Residual norm 1.159527237685e+25\n5 Linear |R| = 1.264135e+24\n5 KSP Residual norm 1.264135093894e+24\nComputing Residual                                                                   [  6.16 s] [    0 MB]\n24 Nonlinear |R| = 2.013097e+29\nComputing Jacobian..                                                                 [ 15.15 s] [    0 MB]\n0 Linear |R| = 2.013097e+29\n0 KSP Residual norm 2.013097416988e+29\n1 Linear |R| = 1.143668e+28\n1 KSP Residual norm 1.143667878483e+28\n2 Linear |R| = 9.592839e+26\n2 KSP Residual norm 9.592839411225e+26\n3 Linear |R| = 1.013746e+26\n3 KSP Residual norm 1.013745541054e+26\n4 Linear |R| = 1.079943e+25\n4 KSP Residual norm 1.079942889723e+25\n5 Linear |R| = 1.177372e+24\n5 KSP Residual norm 1.177371592995e+24\nComputing Residual                                                                   [  6.93 s] [    0 MB]\n25 Nonlinear |R| = 1.864737e+29\nComputing Jacobian.                                                                  [ 14.73 s] [    0 MB]\n0 Linear |R| = 1.864737e+29\n0 KSP Residual norm 1.864736891455e+29\n1 Linear |R| = 1.059382e+28\n1 KSP Residual norm 1.059382266931e+28\n2 Linear |R| = 8.885871e+26\n2 KSP Residual norm 8.885870817575e+26\n3 Linear |R| = 9.390372e+25\n3 KSP Residual norm 9.390372083040e+25\n4 Linear |R| = 1.000358e+25\n4 KSP Residual norm 1.000358206715e+25\n5 Linear |R| = 1.090608e+24\n5 KSP Residual norm 1.090607680728e+24\nComputing Residual                                                                   [  6.37 s] [    0 MB]\n26 Nonlinear |R| = 1.716376e+29\nComputing Jacobian.                                                                  [ 14.35 s] [    0 MB]\n0 Linear |R| = 1.716376e+29\n0 KSP Residual norm 1.716376367554e+29\n1 Linear |R| = 9.750967e+27\n1 KSP Residual norm 9.750966554934e+27\n2 Linear |R| = 8.178902e+26\n2 KSP Residual norm 8.178902150831e+26\n3 Linear |R| = 8.643287e+25\n3 KSP Residual norm 8.643286918520e+25\n4 Linear |R| = 9.207732e+24\n4 KSP Residual norm 9.207731620034e+24\n5 Linear |R| = 1.003843e+24\n5 KSP Residual norm 1.003843324367e+24\nComputing Residual                                                                   [  6.17 s] [    0 MB]\n27 Nonlinear |R| = 1.568016e+29\nComputing Jacobian.                                                                  [ 14.59 s] [  -27 MB]\n0 Linear |R| = 1.568016e+29\n0 KSP Residual norm 1.568015845426e+29\n1 Linear |R| = 8.908110e+27\n1 KSP Residual norm 8.908110441793e+27\n2 Linear |R| = 7.471933e+26\n2 KSP Residual norm 7.471933404675e+26\n3 Linear |R| = 7.896200e+25\n3 KSP Residual norm 7.896199758171e+25\n4 Linear |R| = 8.411877e+24\n4 KSP Residual norm 8.411877243202e+24\n5 Linear |R| = 9.170785e+23\n5 KSP Residual norm 9.170784855243e+23\nComputing Residual                                                                   [  6.24 s] [    0 MB]\n28 Nonlinear |R| = 1.419655e+29\nComputing Jacobian.                                                                  [ 14.62 s] [    0 MB]\n0 Linear |R| = 1.419655e+29\n0 KSP Residual norm 1.419655325238e+29\n1 Linear |R| = 8.065254e+27\n1 KSP Residual norm 8.065254330004e+27\n2 Linear |R| = 6.764965e+26\n2 KSP Residual norm 6.764964571593e+26\n3 Linear |R| = 7.149110e+25\n3 KSP Residual norm 7.149110413131e+25\n4 Linear |R| = 7.616019e+24\n4 KSP Residual norm 7.616018564812e+24\n5 Linear |R| = 8.303131e+23\n5 KSP Residual norm 8.303131185504e+23\nComputing Residual                                                                   [  6.62 s] [    0 MB]\n29 Nonlinear |R| = 1.271295e+29\nComputing Jacobian.                                                                  [ 14.47 s] [    0 MB]\n0 Linear |R| = 1.271295e+29\n0 KSP Residual norm 1.271294807193e+29\n1 Linear |R| = 7.222398e+27\n1 KSP Residual norm 7.222398219708e+27\n2 Linear |R| = 6.057996e+26\n2 KSP Residual norm 6.057995642498e+26\n3 Linear |R| = 6.402019e+25\n3 KSP Residual norm 6.402018655062e+25\n4 Linear |R| = 6.820155e+24\n4 KSP Residual norm 6.820155135297e+24\n5 Linear |R| = 7.435472e+23\n5 KSP Residual norm 7.435471682539e+23\nComputing Residual                                                                   [  6.33 s] [    0 MB]\n30 Nonlinear |R| = 1.122934e+29\nComputing Jacobian..                                                                 [ 15.12 s] [    0 MB]\n0 Linear |R| = 1.122934e+29\n0 KSP Residual norm 1.122934291541e+29\n1 Linear |R| = 6.379542e+27\n1 KSP Residual norm 6.379542111080e+27\n2 Linear |R| = 5.351027e+26\n2 KSP Residual norm 5.351026606185e+26\n3 Linear |R| = 5.654924e+25\n3 KSP Residual norm 5.654924202328e+25\n4 Linear |R| = 6.024286e+24\n4 KSP Residual norm 6.024286400159e+24\n5 Linear |R| = 6.567806e+23\n5 KSP Residual norm 6.567805665620e+23\nComputing Residual                                                                   [  6.26 s] [    0 MB]\n31 Nonlinear |R| = 9.745738e+28\nComputing Jacobian.                                                                  [ 14.98 s] [    0 MB]\n0 Linear |R| = 9.745738e+28\n0 KSP Residual norm 9.745737785990e+28\n1 Linear |R| = 5.536686e+27\n1 KSP Residual norm 5.536686004341e+27\n2 Linear |R| = 4.644057e+26\n2 KSP Residual norm 4.644057448487e+26\n3 Linear |R| = 4.907827e+25\n3 KSP Residual norm 4.907826698869e+25\n4 Linear |R| = 5.228412e+24\n4 KSP Residual norm 5.228411658374e+24\n5 Linear |R| = 5.700132e+23\n5 KSP Residual norm 5.700132274145e+23\nComputing Residual                                                                   [  6.55 s] [    0 MB]\n32 Nonlinear |R| = 8.262133e+28\nComputing Jacobian.                                                                  [ 14.74 s] [    0 MB]\n0 Linear |R| = 8.262133e+28\n0 KSP Residual norm 8.262132687784e+28\n1 Linear |R| = 4.693830e+27\n1 KSP Residual norm 4.693829899776e+27\n2 Linear |R| = 3.937088e+26\n2 KSP Residual norm 3.937088150924e+26\n3 Linear |R| = 4.160726e+25\n3 KSP Residual norm 4.160725680216e+25\n4 Linear |R| = 4.432530e+24\n4 KSP Residual norm 4.432529995477e+24\n5 Linear |R| = 4.832450e+23\n5 KSP Residual norm 4.832450385493e+23\nComputing Residual                                                                   [  6.22 s] [    0 MB]\n33 Nonlinear |R| = 6.778528e+28\nComputing Jacobian.                                                                  [ 14.48 s] [    0 MB]\n0 Linear |R| = 6.778528e+28\n0 KSP Residual norm 6.778527626403e+28\n1 Linear |R| = 3.850974e+27\n1 KSP Residual norm 3.850973797777e+27\n2 Linear |R| = 3.230119e+26\n2 KSP Residual norm 3.230118688378e+26\n3 Linear |R| = 3.413621e+25\n3 KSP Residual norm 3.413620515082e+25\n4 Linear |R| = 3.636640e+24\n4 KSP Residual norm 3.636640168575e+24\n5 Linear |R| = 3.964758e+23\n5 KSP Residual norm 3.964758473872e+23\nComputing Residual                                                                   [  6.05 s] [    0 MB]\n34 Nonlinear |R| = 5.294923e+28\nComputing Jacobian.                                                                  [ 14.47 s] [    0 MB]\n0 Linear |R| = 5.294923e+28\n0 KSP Residual norm 5.294922609907e+28\n1 Linear |R| = 3.008118e+27\n1 KSP Residual norm 3.008117698906e+27\n2 Linear |R| = 2.523149e+26\n2 KSP Residual norm 2.523149024741e+26\n3 Linear |R| = 2.666510e+25\n3 KSP Residual norm 2.666510295831e+25\n4 Linear |R| = 2.840740e+24\n4 KSP Residual norm 2.840740390696e+24\n5 Linear |R| = 3.097054e+23\n5 KSP Residual norm 3.097054345594e+23\nComputing Residual                                                                   [  6.09 s] [    0 MB]\n35 Nonlinear |R| = 3.811318e+28\nComputing Jacobian.                                                                  [ 14.52 s] [    0 MB]\n0 Linear |R| = 3.811318e+28\n0 KSP Residual norm 3.811317650873e+28\n1 Linear |R| = 2.165262e+27\n1 KSP Residual norm 2.165261604040e+27\n2 Linear |R| = 1.816179e+26\n2 KSP Residual norm 1.816179103675e+26\n3 Linear |R| = 1.919394e+25\n3 KSP Residual norm 1.919393606184e+25\n4 Linear |R| = 2.044828e+24\n4 KSP Residual norm 2.044827873441e+24\n5 Linear |R| = 2.229335e+23\n5 KSP Residual norm 2.229334577638e+23\nComputing Residual                                                                   [  6.33 s] [    0 MB]\n36 Nonlinear |R| = 2.327713e+28\nComputing Jacobian..                                                                 [ 15.26 s] [    0 MB]\n0 Linear |R| = 2.327713e+28\n0 KSP Residual norm 2.327712771677e+28\n1 Linear |R| = 1.322406e+27\n1 KSP Residual norm 1.322405514751e+27\n2 Linear |R| = 1.109209e+26\n2 KSP Residual norm 1.109208825017e+26\n3 Linear |R| = 1.172268e+25\n3 KSP Residual norm 1.172267927266e+25\n4 Linear |R| = 1.248898e+24\n4 KSP Residual norm 1.248897657514e+24\n5 Linear |R| = 1.361593e+23\n5 KSP Residual norm 1.361593081967e+23\nComputing Residual                                                                   [  6.12 s] [    0 MB]\n37 Nonlinear |R| = 8.441080e+27\nComputing Jacobian.                                                                  [ 14.79 s] [    0 MB]\n0 Linear |R| = 8.441080e+27\n0 KSP Residual norm 8.441080232385e+27\n1 Linear |R| = 4.795494e+26\n1 KSP Residual norm 4.795494347043e+26\n2 Linear |R| = 4.022380e+25\n2 KSP Residual norm 4.022379614142e+25\n3 Linear |R| = 4.251275e+24\n3 KSP Residual norm 4.251275301993e+24\n4 Linear |R| = 4.529385e+23\n4 KSP Residual norm 4.529384619522e+23\n5 Linear |R| = 4.938160e+22\n5 KSP Residual norm 4.938160082755e+22\nComputing Residual                                                                   [  6.34 s] [    0 MB]\n38 Nonlinear |R| = 4.938160e+22\nComputing Jacobian.                                                                  [ 14.43 s] [    0 MB]\n0 Linear |R| = 4.938160e+22\n0 KSP Residual norm 4.938160081777e+22\n1 Linear |R| = 7.547269e+21\n1 KSP Residual norm 7.547269266711e+21\n2 Linear |R| = 8.120184e+20\n2 KSP Residual norm 8.120184370696e+20\n3 Linear |R| = 8.697111e+19\n3 KSP Residual norm 8.697110950116e+19\n4 Linear |R| = 8.637883e+18\n4 KSP Residual norm 8.637882768852e+18\n5 Linear |R| = 9.771738e+17\n5 KSP Residual norm 9.771738203897e+17\n6 Linear |R| = 1.327054e+17\n6 KSP Residual norm 1.327054104646e+17\nComputing Residual                                                                   [  5.96 s] [    0 MB]\n39 Nonlinear |R| = 1.327450e+17\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 39\nSolve Converged!\nFinished Solving                                                                       [905.12 s] [  -29 MB]\nTime Step 100, time = 3.85955e-07, dt = 2e-13\nComputing Initial Residual\n  Computing Residual                                                                 [  5.88 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.88 s] [    0 MB]\nComputing Residual                                                                   [  5.85 s] [    0 MB]\n\n0 Nonlinear |R| = 4.829746e+29\nComputing Jacobian.                                                                  [ 13.99 s] [    0 MB]\n0 Linear |R| = 4.829746e+29\n0 KSP Residual norm 4.829746395156e+29\n1 Linear |R| = 2.743860e+28\n1 KSP Residual norm 2.743860356784e+28\n2 Linear |R| = 2.301535e+27\n2 KSP Residual norm 2.301535390737e+27\n3 Linear |R| = 2.432132e+26\n3 KSP Residual norm 2.432132093560e+26\n4 Linear |R| = 2.590886e+25\n4 KSP Residual norm 2.590885991545e+25\n5 Linear |R| = 2.824601e+24\n5 KSP Residual norm 2.824601440915e+24\nComputing Residual                                                                   [  6.50 s] [    0 MB]\n1 Nonlinear |R| = 4.792657e+29\nComputing Jacobian.                                                                  [ 14.91 s] [    0 MB]\n0 Linear |R| = 4.792657e+29\n0 KSP Residual norm 4.792656676886e+29\n1 Linear |R| = 2.722789e+28\n1 KSP Residual norm 2.722789065056e+28\n2 Linear |R| = 2.283861e+27\n2 KSP Residual norm 2.283860927212e+27\n3 Linear |R| = 2.413455e+26\n3 KSP Residual norm 2.413455275694e+26\n4 Linear |R| = 2.570991e+25\n4 KSP Residual norm 2.570990593082e+25\n5 Linear |R| = 2.802911e+24\n5 KSP Residual norm 2.802911499228e+24\nComputing Residual                                                                   [  6.39 s] [    0 MB]\n2 Nonlinear |R| = 4.755567e+29\nComputing Jacobian.                                                                  [ 14.66 s] [    0 MB]\n0 Linear |R| = 4.755567e+29\n0 KSP Residual norm 4.755566958656e+29\n1 Linear |R| = 2.701718e+28\n1 KSP Residual norm 2.701717773331e+28\n2 Linear |R| = 2.266186e+27\n2 KSP Residual norm 2.266186463509e+27\n3 Linear |R| = 2.394778e+26\n3 KSP Residual norm 2.394778453362e+26\n4 Linear |R| = 2.551095e+25\n4 KSP Residual norm 2.551095185825e+25\n5 Linear |R| = 2.781222e+24\n5 KSP Residual norm 2.781221546743e+24\nComputing Residual                                                                   [  6.06 s] [    0 MB]\n3 Nonlinear |R| = 4.718477e+29\nComputing Jacobian.                                                                  [ 14.84 s] [    0 MB]\n0 Linear |R| = 4.718477e+29\n0 KSP Residual norm 4.718477240466e+29\n1 Linear |R| = 2.680646e+28\n1 KSP Residual norm 2.680646481609e+28\n2 Linear |R| = 2.248512e+27\n2 KSP Residual norm 2.248511999627e+27\n3 Linear |R| = 2.376102e+26\n3 KSP Residual norm 2.376101626528e+26\n4 Linear |R| = 2.531200e+25\n4 KSP Residual norm 2.531199769704e+25\n5 Linear |R| = 2.759532e+24\n5 KSP Residual norm 2.759531583374e+24\nComputing Residual                                                                   [  6.64 s] [    0 MB]\n4 Nonlinear |R| = 4.681388e+29\nComputing Jacobian..                                                                 [ 15.42 s] [    0 MB]\n0 Linear |R| = 4.681388e+29\n0 KSP Residual norm 4.681387522317e+29\n1 Linear |R| = 2.659575e+28\n1 KSP Residual norm 2.659575189890e+28\n2 Linear |R| = 2.230838e+27\n2 KSP Residual norm 2.230837535564e+27\n3 Linear |R| = 2.357425e+26\n3 KSP Residual norm 2.357424795158e+26\n4 Linear |R| = 2.511304e+25\n4 KSP Residual norm 2.511304344650e+25\n5 Linear |R| = 2.737842e+24\n5 KSP Residual norm 2.737841609037e+24\nComputing Residual                                                                   [  6.24 s] [    0 MB]\n5 Nonlinear |R| = 4.644298e+29\nComputing Jacobian..                                                                 [ 15.76 s] [    0 MB]\n0 Linear |R| = 4.644298e+29\n0 KSP Residual norm 4.644297804208e+29\n1 Linear |R| = 2.638504e+28\n1 KSP Residual norm 2.638503898174e+28\n2 Linear |R| = 2.213163e+27\n2 KSP Residual norm 2.213163071319e+27\n3 Linear |R| = 2.338748e+26\n3 KSP Residual norm 2.338747959214e+26\n4 Linear |R| = 2.491409e+25\n4 KSP Residual norm 2.491408910591e+25\n5 Linear |R| = 2.716152e+24\n5 KSP Residual norm 2.716151623643e+24\nComputing Residual                                                                   [  7.22 s] [    0 MB]\n6 Nonlinear |R| = 4.607208e+29\nComputing Jacobian..                                                                 [ 15.44 s] [    0 MB]\n0 Linear |R| = 4.607208e+29\n0 KSP Residual norm 4.607208086140e+29\n1 Linear |R| = 2.617433e+28\n1 KSP Residual norm 2.617432606461e+28\n2 Linear |R| = 2.195489e+27\n2 KSP Residual norm 2.195488606892e+27\n3 Linear |R| = 2.320071e+26\n3 KSP Residual norm 2.320071118662e+26\n4 Linear |R| = 2.471513e+25\n4 KSP Residual norm 2.471513467458e+25\n5 Linear |R| = 2.694462e+24\n5 KSP Residual norm 2.694461627106e+24\nComputing Residual                                                                   [  6.36 s] [    0 MB]\n7 Nonlinear |R| = 4.570118e+29\nComputing Jacobian.                                                                  [ 14.82 s] [    0 MB]\n0 Linear |R| = 4.570118e+29\n0 KSP Residual norm 4.570118368113e+29\n1 Linear |R| = 2.596361e+28\n1 KSP Residual norm 2.596361314750e+28\n2 Linear |R| = 2.177814e+27\n2 KSP Residual norm 2.177814142279e+27\n3 Linear |R| = 2.301394e+26\n3 KSP Residual norm 2.301394273463e+26\n4 Linear |R| = 2.451618e+25\n4 KSP Residual norm 2.451618015175e+25\n5 Linear |R| = 2.672772e+24\n5 KSP Residual norm 2.672771619334e+24\nComputing Residual                                                                   [  6.21 s] [    0 MB]\n8 Nonlinear |R| = 4.533029e+29\nComputing Jacobian.                                                                  [ 14.49 s] [    0 MB]\n0 Linear |R| = 4.533029e+29\n0 KSP Residual norm 4.533028650128e+29\n1 Linear |R| = 2.575290e+28\n1 KSP Residual norm 2.575290023042e+28\n2 Linear |R| = 2.160140e+27\n2 KSP Residual norm 2.160139677480e+27\n3 Linear |R| = 2.282717e+26\n3 KSP Residual norm 2.282717423580e+26\n4 Linear |R| = 2.431723e+25\n4 KSP Residual norm 2.431722553669e+25\n5 Linear |R| = 2.651082e+24\n5 KSP Residual norm 2.651081600238e+24\nComputing Residual                                                                   [  6.05 s] [    0 MB]\n9 Nonlinear |R| = 4.495939e+29\nComputing Jacobian.                                                                  [ 14.18 s] [    0 MB]\n0 Linear |R| = 4.495939e+29\n0 KSP Residual norm 4.495938932185e+29\n1 Linear |R| = 2.554219e+28\n1 KSP Residual norm 2.554218731338e+28\n2 Linear |R| = 2.142465e+27\n2 KSP Residual norm 2.142465212492e+27\n3 Linear |R| = 2.264041e+26\n3 KSP Residual norm 2.264040568974e+26\n4 Linear |R| = 2.411827e+25\n4 KSP Residual norm 2.411827082864e+25\n5 Linear |R| = 2.629392e+24\n5 KSP Residual norm 2.629391569724e+24\nComputing Residual                                                                   [  5.85 s] [    0 MB]\n10 Nonlinear |R| = 4.458849e+29\nComputing Jacobian.                                                                  [ 13.62 s] [    0 MB]\n0 Linear |R| = 4.458849e+29\n0 KSP Residual norm 4.458849214284e+29\n1 Linear |R| = 2.533147e+28\n1 KSP Residual norm 2.533147439636e+28\n2 Linear |R| = 2.124791e+27\n2 KSP Residual norm 2.124790747316e+27\n3 Linear |R| = 2.245364e+26\n3 KSP Residual norm 2.245363709607e+26\n4 Linear |R| = 2.391932e+25\n4 KSP Residual norm 2.391931602684e+25\n5 Linear |R| = 2.607702e+24\n5 KSP Residual norm 2.607701527698e+24\nComputing Residual                                                                   [  5.84 s] [    0 MB]\n11 Nonlinear |R| = 4.421759e+29\nComputing Jacobian.                                                                  [ 13.69 s] [    0 MB]\n0 Linear |R| = 4.421759e+29\n0 KSP Residual norm 4.421759496426e+29\n1 Linear |R| = 2.512076e+28\n1 KSP Residual norm 2.512076147937e+28\n2 Linear |R| = 2.107116e+27\n2 KSP Residual norm 2.107116281948e+27\n3 Linear |R| = 2.226687e+26\n3 KSP Residual norm 2.226686845439e+26\n4 Linear |R| = 2.372036e+25\n4 KSP Residual norm 2.372036113051e+25\n5 Linear |R| = 2.586011e+24\n5 KSP Residual norm 2.586011474064e+24\nComputing Residual                                                                   [  6.04 s] [    0 MB]\n12 Nonlinear |R| = 4.384670e+29\nComputing Jacobian.                                                                  [ 14.85 s] [    0 MB]\n0 Linear |R| = 4.384670e+29\n0 KSP Residual norm 4.384669778610e+29\n1 Linear |R| = 2.491005e+28\n1 KSP Residual norm 2.491004856241e+28\n2 Linear |R| = 2.089442e+27\n2 KSP Residual norm 2.089441816388e+27\n3 Linear |R| = 2.208010e+26\n3 KSP Residual norm 2.208009976430e+26\n4 Linear |R| = 2.352141e+25\n4 KSP Residual norm 2.352140613884e+25\n5 Linear |R| = 2.564321e+24\n5 KSP Residual norm 2.564321408726e+24\nComputing Residual                                                                   [  6.38 s] [    0 MB]\n13 Nonlinear |R| = 4.347580e+29\nComputing Jacobian.                                                                  [ 14.37 s] [    0 MB]\n0 Linear |R| = 4.347580e+29\n0 KSP Residual norm 4.347580060838e+29\n1 Linear |R| = 2.469934e+28\n1 KSP Residual norm 2.469933564548e+28\n2 Linear |R| = 2.071767e+27\n2 KSP Residual norm 2.071767350634e+27\n3 Linear |R| = 2.189333e+26\n3 KSP Residual norm 2.189333102538e+26\n4 Linear |R| = 2.332245e+25\n4 KSP Residual norm 2.332245105105e+25\n5 Linear |R| = 2.542631e+24\n5 KSP Residual norm 2.542631331584e+24\nComputing Residual                                                                   [  5.89 s] [    0 MB]\n14 Nonlinear |R| = 4.310490e+29\nComputing Jacobian.                                                                  [ 13.83 s] [    0 MB]\n0 Linear |R| = 4.310490e+29\n0 KSP Residual norm 4.310490343110e+29\n1 Linear |R| = 2.448862e+28\n1 KSP Residual norm 2.448862272859e+28\n2 Linear |R| = 2.054093e+27\n2 KSP Residual norm 2.054092884683e+27\n3 Linear |R| = 2.170656e+26\n3 KSP Residual norm 2.170656223723e+26\n4 Linear |R| = 2.312350e+25\n4 KSP Residual norm 2.312349586631e+25\n5 Linear |R| = 2.520941e+24\n5 KSP Residual norm 2.520941242536e+24\nComputing Residual                                                                   [  5.88 s] [    0 MB]\n15 Nonlinear |R| = 4.273401e+29\nComputing Jacobian.                                                                  [ 13.74 s] [    0 MB]\n0 Linear |R| = 4.273401e+29\n0 KSP Residual norm 4.273400625426e+29\n1 Linear |R| = 2.427791e+28\n1 KSP Residual norm 2.427790981172e+28\n2 Linear |R| = 2.036418e+27\n2 KSP Residual norm 2.036418418535e+27\n3 Linear |R| = 2.151979e+26\n3 KSP Residual norm 2.151979339941e+26\n4 Linear |R| = 2.292454e+25\n4 KSP Residual norm 2.292454058377e+25\n5 Linear |R| = 2.499251e+24\n5 KSP Residual norm 2.499251141482e+24\nComputing Residual                                                                   [  5.87 s] [    0 MB]\n16 Nonlinear |R| = 4.236311e+29\nComputing Jacobian.                                                                  [ 13.77 s] [    0 MB]\n0 Linear |R| = 4.236311e+29\n0 KSP Residual norm 4.236310907787e+29\n1 Linear |R| = 2.406720e+28\n1 KSP Residual norm 2.406719689489e+28\n2 Linear |R| = 2.018744e+27\n2 KSP Residual norm 2.018743952188e+27\n3 Linear |R| = 2.133302e+26\n3 KSP Residual norm 2.133302451149e+26\n4 Linear |R| = 2.272559e+25\n4 KSP Residual norm 2.272558520260e+25\n5 Linear |R| = 2.477561e+24\n5 KSP Residual norm 2.477561028317e+24\nComputing Residual                                                                   [  5.92 s] [    0 MB]\n17 Nonlinear |R| = 4.199221e+29\nComputing Jacobian..                                                                 [ 15.18 s] [    0 MB]\n0 Linear |R| = 4.199221e+29\n0 KSP Residual norm 4.199221190192e+29\n1 Linear |R| = 2.385648e+28\n1 KSP Residual norm 2.385648397808e+28\n2 Linear |R| = 2.001069e+27\n2 KSP Residual norm 2.001069485640e+27\n3 Linear |R| = 2.114626e+26\n3 KSP Residual norm 2.114625557305e+26\n4 Linear |R| = 2.252663e+25\n4 KSP Residual norm 2.252662972193e+25\n5 Linear |R| = 2.455871e+24\n5 KSP Residual norm 2.455870902934e+24\nComputing Residual                                                                   [  6.22 s] [    0 MB]\n18 Nonlinear |R| = 4.162131e+29\nComputing Jacobian.                                                                  [ 13.90 s] [    0 MB]\n0 Linear |R| = 4.162131e+29\n0 KSP Residual norm 4.162131472643e+29\n1 Linear |R| = 2.364577e+28\n1 KSP Residual norm 2.364577106131e+28\n2 Linear |R| = 1.983395e+27\n2 KSP Residual norm 1.983395018889e+27\n3 Linear |R| = 2.095949e+26\n3 KSP Residual norm 2.095948658362e+26\n4 Linear |R| = 2.232767e+25\n4 KSP Residual norm 2.232767414088e+25\n5 Linear |R| = 2.434181e+24\n5 KSP Residual norm 2.434180765226e+24\nComputing Residual                                                                   [  5.93 s] [    0 MB]\n19 Nonlinear |R| = 4.125042e+29\nComputing Jacobian.                                                                  [ 14.78 s] [    0 MB]\n0 Linear |R| = 4.125042e+29\n0 KSP Residual norm 4.125041755139e+29\n1 Linear |R| = 2.343506e+28\n1 KSP Residual norm 2.343505814457e+28\n2 Linear |R| = 1.965721e+27\n2 KSP Residual norm 1.965720551933e+27\n3 Linear |R| = 2.077272e+26\n3 KSP Residual norm 2.077271754277e+26\n4 Linear |R| = 2.212872e+25\n4 KSP Residual norm 2.212871845856e+25\n5 Linear |R| = 2.412491e+24\n5 KSP Residual norm 2.412490615083e+24\nComputing Residual                                                                   [  7.51 s] [    0 MB]\n20 Nonlinear |R| = 4.087952e+29\nComputing Jacobian..                                                                 [ 16.94 s] [    0 MB]\n0 Linear |R| = 4.087952e+29\n0 KSP Residual norm 4.087952037682e+29\n1 Linear |R| = 2.322435e+28\n1 KSP Residual norm 2.322434522786e+28\n2 Linear |R| = 1.948046e+27\n2 KSP Residual norm 1.948046084770e+27\n3 Linear |R| = 2.058595e+26\n3 KSP Residual norm 2.058594845001e+26\n4 Linear |R| = 2.192976e+25\n4 KSP Residual norm 2.192976267405e+25\n5 Linear |R| = 2.390800e+24\n5 KSP Residual norm 2.390800452393e+24\nComputing Residual                                                                   [  6.04 s] [    0 MB]\n21 Nonlinear |R| = 4.050862e+29\nComputing Jacobian.                                                                  [ 13.93 s] [    0 MB]\n0 Linear |R| = 4.050862e+29\n0 KSP Residual norm 4.050862320271e+29\n1 Linear |R| = 2.301363e+28\n1 KSP Residual norm 2.301363231119e+28\n2 Linear |R| = 1.930372e+27\n2 KSP Residual norm 1.930371617400e+27\n3 Linear |R| = 2.039918e+26\n3 KSP Residual norm 2.039917930489e+26\n4 Linear |R| = 2.173081e+25\n4 KSP Residual norm 2.173080678644e+25\n5 Linear |R| = 2.369110e+24\n5 KSP Residual norm 2.369110277042e+24\nComputing Residual                                                                   [  6.13 s] [    0 MB]\n22 Nonlinear |R| = 4.013773e+29\nComputing Jacobian.                                                                  [ 14.05 s] [    0 MB]\n0 Linear |R| = 4.013773e+29\n0 KSP Residual norm 4.013772602907e+29\n1 Linear |R| = 2.280292e+28\n1 KSP Residual norm 2.280291939454e+28\n2 Linear |R| = 1.912697e+27\n2 KSP Residual norm 1.912697149819e+27\n3 Linear |R| = 2.021241e+26\n3 KSP Residual norm 2.021241010693e+26\n4 Linear |R| = 2.153185e+25\n4 KSP Residual norm 2.153185079476e+25\n5 Linear |R| = 2.347420e+24\n5 KSP Residual norm 2.347420088914e+24\nComputing Residual                                                                   [  6.59 s] [    0 MB]\n23 Nonlinear |R| = 3.976683e+29\nComputing Jacobian..                                                                 [ 17.20 s] [    0 MB]\n0 Linear |R| = 3.976683e+29\n0 KSP Residual norm 3.976682885590e+29\n1 Linear |R| = 2.259221e+28\n1 KSP Residual norm 2.259220647793e+28\n2 Linear |R| = 1.895023e+27\n2 KSP Residual norm 1.895022682026e+27\n3 Linear |R| = 2.002564e+26\n3 KSP Residual norm 2.002564085562e+26\n4 Linear |R| = 2.133289e+25\n4 KSP Residual norm 2.133289469808e+25\n5 Linear |R| = 2.325730e+24\n5 KSP Residual norm 2.325729887892e+24\nComputing Residual                                                                   [  7.30 s] [    0 MB]\n24 Nonlinear |R| = 3.939593e+29\nComputing Jacobian..                                                                 [ 16.84 s] [    0 MB]\n0 Linear |R| = 3.939593e+29\n0 KSP Residual norm 3.939593168321e+29\n1 Linear |R| = 2.238149e+28\n1 KSP Residual norm 2.238149356136e+28\n2 Linear |R| = 1.877348e+27\n2 KSP Residual norm 1.877348214018e+27\n3 Linear |R| = 1.983887e+26\n3 KSP Residual norm 1.983887155049e+26\n4 Linear |R| = 2.113394e+25\n4 KSP Residual norm 2.113393849539e+25\n5 Linear |R| = 2.304040e+24\n5 KSP Residual norm 2.304039673855e+24\nComputing Residual                                                                   [  6.37 s] [    0 MB]\n25 Nonlinear |R| = 3.902503e+29\nComputing Jacobian.                                                                  [ 14.38 s] [    0 MB]\n0 Linear |R| = 3.902503e+29\n0 KSP Residual norm 3.902503451100e+29\n1 Linear |R| = 2.217078e+28\n1 KSP Residual norm 2.217078064482e+28\n2 Linear |R| = 1.859674e+27\n2 KSP Residual norm 1.859673745795e+27\n3 Linear |R| = 1.965210e+26\n3 KSP Residual norm 1.965210219102e+26\n4 Linear |R| = 2.093498e+25\n4 KSP Residual norm 2.093498218571e+25\n5 Linear |R| = 2.282349e+24\n5 KSP Residual norm 2.282349446681e+24\nComputing Residual                                                                   [  6.30 s] [    0 MB]\n26 Nonlinear |R| = 3.865414e+29\nComputing Jacobian.                                                                  [ 14.37 s] [    0 MB]\n0 Linear |R| = 3.865414e+29\n0 KSP Residual norm 3.865413733929e+29\n1 Linear |R| = 2.196007e+28\n1 KSP Residual norm 2.196006772831e+28\n2 Linear |R| = 1.841999e+27\n2 KSP Residual norm 1.841999277353e+27\n3 Linear |R| = 1.946533e+26\n3 KSP Residual norm 1.946533277669e+26\n4 Linear |R| = 2.073603e+25\n4 KSP Residual norm 2.073602576802e+25\n5 Linear |R| = 2.260659e+24\n5 KSP Residual norm 2.260659206244e+24\nComputing Residual                                                                   [  6.21 s] [    0 MB]\n27 Nonlinear |R| = 3.828324e+29\nComputing Jacobian.                                                                  [ 14.47 s] [    0 MB]\n0 Linear |R| = 3.828324e+29\n0 KSP Residual norm 3.828324016806e+29\n1 Linear |R| = 2.174935e+28\n1 KSP Residual norm 2.174935481183e+28\n2 Linear |R| = 1.824325e+27\n2 KSP Residual norm 1.824324808691e+27\n3 Linear |R| = 1.927856e+26\n3 KSP Residual norm 1.927856330698e+26\n4 Linear |R| = 2.053707e+25\n4 KSP Residual norm 2.053706924128e+25\n5 Linear |R| = 2.238969e+24\n5 KSP Residual norm 2.238968952417e+24\nComputing Residual                                                                   [  6.18 s] [    0 MB]\n28 Nonlinear |R| = 3.791234e+29\nComputing Jacobian..                                                                 [ 15.53 s] [    0 MB]\n0 Linear |R| = 3.791234e+29\n0 KSP Residual norm 3.791234299733e+29\n1 Linear |R| = 2.153864e+28\n1 KSP Residual norm 2.153864189539e+28\n2 Linear |R| = 1.806650e+27\n2 KSP Residual norm 1.806650339806e+27\n3 Linear |R| = 1.909179e+26\n3 KSP Residual norm 1.909179378135e+26\n4 Linear |R| = 2.033811e+25\n4 KSP Residual norm 2.033811260444e+25\n5 Linear |R| = 2.217279e+24\n5 KSP Residual norm 2.217278685071e+24\nComputing Residual                                                                   [  6.50 s] [    0 MB]\n29 Nonlinear |R| = 3.754145e+29\nComputing Jacobian..                                                                 [ 15.42 s] [    0 MB]\n0 Linear |R| = 3.754145e+29\n0 KSP Residual norm 3.754144582710e+29\n1 Linear |R| = 2.132793e+28\n1 KSP Residual norm 2.132792897899e+28\n2 Linear |R| = 1.788976e+27\n2 KSP Residual norm 1.788975870696e+27\n3 Linear |R| = 1.890502e+26\n3 KSP Residual norm 1.890502419925e+26\n4 Linear |R| = 2.013916e+25\n4 KSP Residual norm 2.013915585641e+25\n5 Linear |R| = 2.195588e+24\n5 KSP Residual norm 2.195588404074e+24\nComputing Residual                                                                   [  6.55 s] [    0 MB]\n30 Nonlinear |R| = 3.717055e+29\nComputing Jacobian.                                                                  [ 14.38 s] [    0 MB]\n0 Linear |R| = 3.717055e+29\n0 KSP Residual norm 3.717054865738e+29\n1 Linear |R| = 2.111722e+28\n1 KSP Residual norm 2.111721606262e+28\n2 Linear |R| = 1.771301e+27\n2 KSP Residual norm 1.771301401360e+27\n3 Linear |R| = 1.871825e+26\n3 KSP Residual norm 1.871825456013e+26\n4 Linear |R| = 1.994020e+25\n4 KSP Residual norm 1.994019899610e+25\n5 Linear |R| = 2.173898e+24\n5 KSP Residual norm 2.173898109290e+24\nComputing Residual                                                                   [  6.14 s] [    0 MB]\n31 Nonlinear |R| = 3.679965e+29\nComputing Jacobian.                                                                  [ 14.18 s] [    0 MB]\n0 Linear |R| = 3.679965e+29\n0 KSP Residual norm 3.679965148817e+29\n1 Linear |R| = 2.090650e+28\n1 KSP Residual norm 2.090650314629e+28\n2 Linear |R| = 1.753627e+27\n2 KSP Residual norm 1.753626931795e+27\n3 Linear |R| = 1.853148e+26\n3 KSP Residual norm 1.853148486342e+26\n4 Linear |R| = 1.974124e+25\n4 KSP Residual norm 1.974124202240e+25\n5 Linear |R| = 2.152208e+24\n5 KSP Residual norm 2.152207800582e+24\nComputing Residual                                                                   [  6.22 s] [    0 MB]\n32 Nonlinear |R| = 3.642875e+29\nComputing Jacobian.                                                                  [ 14.72 s] [    0 MB]\n0 Linear |R| = 3.642875e+29\n0 KSP Residual norm 3.642875431947e+29\n1 Linear |R| = 2.069579e+28\n1 KSP Residual norm 2.069579022999e+28\n2 Linear |R| = 1.735952e+27\n2 KSP Residual norm 1.735952461998e+27\n3 Linear |R| = 1.834472e+26\n3 KSP Residual norm 1.834471510853e+26\n4 Linear |R| = 1.954228e+25\n4 KSP Residual norm 1.954228493415e+25\n5 Linear |R| = 2.130517e+24\n5 KSP Residual norm 2.130517477809e+24\nComputing Residual                                                                   [  6.32 s] [    0 MB]\n33 Nonlinear |R| = 3.605786e+29\nComputing Jacobian..                                                                 [ 15.87 s] [   -2 MB]\n0 Linear |R| = 3.605786e+29\n0 KSP Residual norm 3.605785715130e+29\n1 Linear |R| = 2.048508e+28\n1 KSP Residual norm 2.048507731373e+28\n2 Linear |R| = 1.718278e+27\n2 KSP Residual norm 1.718277991967e+27\n3 Linear |R| = 1.815795e+26\n3 KSP Residual norm 1.815794529488e+26\n4 Linear |R| = 1.934333e+25\n4 KSP Residual norm 1.934332773019e+25\n5 Linear |R| = 2.108827e+24\n5 KSP Residual norm 2.108827140829e+24\nComputing Residual                                                                   [  6.60 s] [    0 MB]\n34 Nonlinear |R| = 3.568696e+29\nComputing Jacobian.                                                                  [ 14.66 s] [    0 MB]\n0 Linear |R| = 3.568696e+29\n0 KSP Residual norm 3.568695998366e+29\n1 Linear |R| = 2.027436e+28\n1 KSP Residual norm 2.027436439750e+28\n2 Linear |R| = 1.700604e+27\n2 KSP Residual norm 1.700603521700e+27\n3 Linear |R| = 1.797118e+26\n3 KSP Residual norm 1.797117542186e+26\n4 Linear |R| = 1.914437e+25\n4 KSP Residual norm 1.914437040933e+25\n5 Linear |R| = 2.087137e+24\n5 KSP Residual norm 2.087136789496e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n35 Nonlinear |R| = 3.531606e+29\nComputing Jacobian.                                                                  [ 13.61 s] [    0 MB]\n0 Linear |R| = 3.531606e+29\n0 KSP Residual norm 3.531606281655e+29\n1 Linear |R| = 2.006365e+28\n1 KSP Residual norm 2.006365148132e+28\n2 Linear |R| = 1.682929e+27\n2 KSP Residual norm 1.682929051195e+27\n3 Linear |R| = 1.778441e+26\n3 KSP Residual norm 1.778440548885e+26\n4 Linear |R| = 1.894541e+25\n4 KSP Residual norm 1.894541297035e+25\n5 Linear |R| = 2.065446e+24\n5 KSP Residual norm 2.065446423659e+24\nComputing Residual                                                                   [  5.95 s] [    0 MB]\n36 Nonlinear |R| = 3.494517e+29\nComputing Jacobian.                                                                  [ 13.65 s] [    0 MB]\n0 Linear |R| = 3.494517e+29\n0 KSP Residual norm 3.494516564997e+29\n1 Linear |R| = 1.985294e+28\n1 KSP Residual norm 1.985293856517e+28\n2 Linear |R| = 1.665255e+27\n2 KSP Residual norm 1.665254580448e+27\n3 Linear |R| = 1.759764e+26\n3 KSP Residual norm 1.759763549523e+26\n4 Linear |R| = 1.874646e+25\n4 KSP Residual norm 1.874645541202e+25\n5 Linear |R| = 2.043756e+24\n5 KSP Residual norm 2.043756043167e+24\nComputing Residual                                                                   [  5.80 s] [    0 MB]\n37 Nonlinear |R| = 3.457427e+29\nComputing Jacobian.                                                                  [ 14.15 s] [    0 MB]\n0 Linear |R| = 3.457427e+29\n0 KSP Residual norm 3.457426848395e+29\n1 Linear |R| = 1.964223e+28\n1 KSP Residual norm 1.964222564906e+28\n2 Linear |R| = 1.647580e+27\n2 KSP Residual norm 1.647580109457e+27\n3 Linear |R| = 1.741087e+26\n3 KSP Residual norm 1.741086544034e+26\n4 Linear |R| = 1.854750e+25\n4 KSP Residual norm 1.854749773307e+25\n5 Linear |R| = 2.022066e+24\n5 KSP Residual norm 2.022065647865e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n38 Nonlinear |R| = 3.420337e+29\nComputing Jacobian.                                                                  [ 14.32 s] [    0 MB]\n0 Linear |R| = 3.420337e+29\n0 KSP Residual norm 3.420337131847e+29\n1 Linear |R| = 1.943151e+28\n1 KSP Residual norm 1.943151273298e+28\n2 Linear |R| = 1.629906e+27\n2 KSP Residual norm 1.629905638220e+27\n3 Linear |R| = 1.722410e+26\n3 KSP Residual norm 1.722409532353e+26\n4 Linear |R| = 1.834854e+25\n4 KSP Residual norm 1.834853993220e+25\n5 Linear |R| = 2.000375e+24\n5 KSP Residual norm 2.000375237593e+24\nComputing Residual                                                                   [  5.87 s] [    0 MB]\n39 Nonlinear |R| = 3.383247e+29\nComputing Jacobian.                                                                  [ 13.89 s] [    0 MB]\n0 Linear |R| = 3.383247e+29\n0 KSP Residual norm 3.383247415355e+29\n1 Linear |R| = 1.922080e+28\n1 KSP Residual norm 1.922079981695e+28\n2 Linear |R| = 1.612231e+27\n2 KSP Residual norm 1.612231166734e+27\n3 Linear |R| = 1.703733e+26\n3 KSP Residual norm 1.703732514414e+26\n4 Linear |R| = 1.814958e+25\n4 KSP Residual norm 1.814958200809e+25\n5 Linear |R| = 1.978685e+24\n5 KSP Residual norm 1.978684812189e+24\nComputing Residual                                                                   [  6.11 s] [    0 MB]\n40 Nonlinear |R| = 3.346158e+29\nComputing Jacobian..                                                                 [ 15.23 s] [    0 MB]\n0 Linear |R| = 3.346158e+29\n0 KSP Residual norm 3.346157698919e+29\n1 Linear |R| = 1.901009e+28\n1 KSP Residual norm 1.901008690095e+28\n2 Linear |R| = 1.594557e+27\n2 KSP Residual norm 1.594556694996e+27\n3 Linear |R| = 1.685055e+26\n3 KSP Residual norm 1.685055490147e+26\n4 Linear |R| = 1.795062e+25\n4 KSP Residual norm 1.795062395939e+25\n5 Linear |R| = 1.956994e+24\n5 KSP Residual norm 1.956994371487e+24\nComputing Residual                                                                   [  6.73 s] [    0 MB]\n41 Nonlinear |R| = 3.309068e+29\nComputing Jacobian.                                                                  [ 14.27 s] [    0 MB]\n0 Linear |R| = 3.309068e+29\n0 KSP Residual norm 3.309067982539e+29\n1 Linear |R| = 1.879937e+28\n1 KSP Residual norm 1.879937398500e+28\n2 Linear |R| = 1.576882e+27\n2 KSP Residual norm 1.576882223004e+27\n3 Linear |R| = 1.666378e+26\n3 KSP Residual norm 1.666378459482e+26\n4 Linear |R| = 1.775167e+25\n4 KSP Residual norm 1.775166578471e+25\n5 Linear |R| = 1.935304e+24\n5 KSP Residual norm 1.935303915318e+24\nComputing Residual                                                                   [  6.36 s] [    0 MB]\n42 Nonlinear |R| = 3.271978e+29\nComputing Jacobian.                                                                  [ 14.71 s] [    0 MB]\n0 Linear |R| = 3.271978e+29\n0 KSP Residual norm 3.271978266218e+29\n1 Linear |R| = 1.858866e+28\n1 KSP Residual norm 1.858866106908e+28\n2 Linear |R| = 1.559208e+27\n2 KSP Residual norm 1.559207750754e+27\n3 Linear |R| = 1.647701e+26\n3 KSP Residual norm 1.647701422347e+26\n4 Linear |R| = 1.755271e+25\n4 KSP Residual norm 1.755270748266e+25\n5 Linear |R| = 1.913613e+24\n5 KSP Residual norm 1.913613443509e+24\nComputing Residual                                                                   [  6.55 s] [    0 MB]\n43 Nonlinear |R| = 3.234889e+29\nComputing Jacobian.                                                                  [ 13.69 s] [    0 MB]\n0 Linear |R| = 3.234889e+29\n0 KSP Residual norm 3.234888549954e+29\n1 Linear |R| = 1.837795e+28\n1 KSP Residual norm 1.837794815321e+28\n2 Linear |R| = 1.541533e+27\n2 KSP Residual norm 1.541533278244e+27\n3 Linear |R| = 1.629024e+26\n3 KSP Residual norm 1.629024378670e+26\n4 Linear |R| = 1.735375e+25\n4 KSP Residual norm 1.735374905178e+25\n5 Linear |R| = 1.891923e+24\n5 KSP Residual norm 1.891922955881e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n44 Nonlinear |R| = 3.197799e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 3.197799e+29\n0 KSP Residual norm 3.197798833749e+29\n1 Linear |R| = 1.816724e+28\n1 KSP Residual norm 1.816723523738e+28\n2 Linear |R| = 1.523859e+27\n2 KSP Residual norm 1.523858805471e+27\n3 Linear |R| = 1.610347e+26\n3 KSP Residual norm 1.610347328375e+26\n4 Linear |R| = 1.715479e+25\n4 KSP Residual norm 1.715479049059e+25\n5 Linear |R| = 1.870232e+24\n5 KSP Residual norm 1.870232452254e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n45 Nonlinear |R| = 3.160709e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 3.160709e+29\n0 KSP Residual norm 3.160709117604e+29\n1 Linear |R| = 1.795652e+28\n1 KSP Residual norm 1.795652232158e+28\n2 Linear |R| = 1.506184e+27\n2 KSP Residual norm 1.506184332431e+27\n3 Linear |R| = 1.591670e+26\n3 KSP Residual norm 1.591670271386e+26\n4 Linear |R| = 1.695583e+25\n4 KSP Residual norm 1.695583179759e+25\n5 Linear |R| = 1.848542e+24\n5 KSP Residual norm 1.848541932441e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n46 Nonlinear |R| = 3.123619e+29\nComputing Jacobian.                                                                  [ 13.54 s] [    0 MB]\n0 Linear |R| = 3.123619e+29\n0 KSP Residual norm 3.123619401519e+29\n1 Linear |R| = 1.774581e+28\n1 KSP Residual norm 1.774580940583e+28\n2 Linear |R| = 1.488510e+27\n2 KSP Residual norm 1.488509859122e+27\n3 Linear |R| = 1.572993e+26\n3 KSP Residual norm 1.572993207623e+26\n4 Linear |R| = 1.675687e+25\n4 KSP Residual norm 1.675687297122e+25\n5 Linear |R| = 1.826851e+24\n5 KSP Residual norm 1.826851396254e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n47 Nonlinear |R| = 3.086530e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 3.086530e+29\n0 KSP Residual norm 3.086529685494e+29\n1 Linear |R| = 1.753510e+28\n1 KSP Residual norm 1.753509649013e+28\n2 Linear |R| = 1.470835e+27\n2 KSP Residual norm 1.470835385540e+27\n3 Linear |R| = 1.554316e+26\n3 KSP Residual norm 1.554316137006e+26\n4 Linear |R| = 1.655791e+25\n4 KSP Residual norm 1.655791400991e+25\n5 Linear |R| = 1.805161e+24\n5 KSP Residual norm 1.805160843498e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n48 Nonlinear |R| = 3.049440e+29\nComputing Jacobian.                                                                  [ 13.57 s] [    0 MB]\n0 Linear |R| = 3.049440e+29\n0 KSP Residual norm 3.049439969532e+29\n1 Linear |R| = 1.732438e+28\n1 KSP Residual norm 1.732438357446e+28\n2 Linear |R| = 1.453161e+27\n2 KSP Residual norm 1.453160911682e+27\n3 Linear |R| = 1.535639e+26\n3 KSP Residual norm 1.535639059454e+26\n4 Linear |R| = 1.635895e+25\n4 KSP Residual norm 1.635895491203e+25\n5 Linear |R| = 1.783470e+24\n5 KSP Residual norm 1.783470273973e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n49 Nonlinear |R| = 3.012350e+29\nComputing Jacobian.                                                                  [ 13.51 s] [    0 MB]\n0 Linear |R| = 3.012350e+29\n0 KSP Residual norm 3.012350253631e+29\n1 Linear |R| = 1.711367e+28\n1 KSP Residual norm 1.711367065884e+28\n2 Linear |R| = 1.435486e+27\n2 KSP Residual norm 1.435486437545e+27\n3 Linear |R| = 1.516962e+26\n3 KSP Residual norm 1.516961974881e+26\n4 Linear |R| = 1.616000e+25\n4 KSP Residual norm 1.615999567592e+25\n5 Linear |R| = 1.761780e+24\n5 KSP Residual norm 1.761779687476e+24\nComputing Residual\n50 Nonlinear |R| = 2.975261e+29\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 50\nFinished Solving                                                                       [1173.66 s] [  -24 MB]\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 100, time = 3.85955e-07, dt = 1e-13\nComputing Initial Residual\n  Finished Computing Residual                                                        [  5.64 s] [    0 MB]\nFinished Computing Initial Residual                                                  [  5.64 s] [    0 MB]\nComputing Residual                                                                   [  5.66 s] [    0 MB]\n\n0 Nonlinear |R| = 9.659493e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 9.659493e+29\n0 KSP Residual norm 9.659492816612e+29\n1 Linear |R| = 5.487721e+28\n1 KSP Residual norm 5.487720738217e+28\n2 Linear |R| = 4.603071e+27\n2 KSP Residual norm 4.603070819056e+27\n3 Linear |R| = 4.864264e+26\n3 KSP Residual norm 4.864264236044e+26\n4 Linear |R| = 5.181772e+25\n4 KSP Residual norm 5.181772046949e+25\n5 Linear |R| = 5.649203e+24\n5 KSP Residual norm 5.649202961220e+24\nComputing Residual                                                                   [  5.80 s] [    0 MB]\n1 Nonlinear |R| = 9.511134e+29\nComputing Jacobian.                                                                  [ 13.54 s] [    0 MB]\n0 Linear |R| = 9.511134e+29\n0 KSP Residual norm 9.511133943829e+29\n1 Linear |R| = 5.403436e+28\n1 KSP Residual norm 5.403435571326e+28\n2 Linear |R| = 4.532373e+27\n2 KSP Residual norm 4.532372964713e+27\n3 Linear |R| = 4.789557e+26\n3 KSP Residual norm 4.789556964184e+26\n4 Linear |R| = 5.102190e+25\n4 KSP Residual norm 5.102190452494e+25\n5 Linear |R| = 5.562443e+24\n5 KSP Residual norm 5.562443193662e+24\nComputing Residual                                                                   [  5.86 s] [    0 MB]\n2 Nonlinear |R| = 9.362775e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 9.362775e+29\n0 KSP Residual norm 9.362775071367e+29\n1 Linear |R| = 5.319150e+28\n1 KSP Residual norm 5.319150404457e+28\n2 Linear |R| = 4.461675e+27\n2 KSP Residual norm 4.461675108936e+27\n3 Linear |R| = 4.714850e+26\n3 KSP Residual norm 4.714849656313e+26\n4 Linear |R| = 5.022609e+25\n4 KSP Residual norm 5.022608787130e+25\n5 Linear |R| = 5.475683e+24\n5 KSP Residual norm 5.475683339037e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n3 Nonlinear |R| = 9.214416e+29\nComputing Jacobian.                                                                  [ 13.53 s] [    0 MB]\n0 Linear |R| = 9.214416e+29\n0 KSP Residual norm 9.214416199229e+29\n1 Linear |R| = 5.234865e+28\n1 KSP Residual norm 5.234865237611e+28\n2 Linear |R| = 4.390977e+27\n2 KSP Residual norm 4.390977251704e+27\n3 Linear |R| = 4.640142e+26\n3 KSP Residual norm 4.640142311859e+26\n4 Linear |R| = 4.943027e+25\n4 KSP Residual norm 4.943027049736e+25\n5 Linear |R| = 5.388923e+24\n5 KSP Residual norm 5.388923395966e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n4 Nonlinear |R| = 9.066057e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 9.066057e+29\n0 KSP Residual norm 9.066057327422e+29\n1 Linear |R| = 5.150580e+28\n1 KSP Residual norm 5.150580070788e+28\n2 Linear |R| = 4.320279e+27\n2 KSP Residual norm 4.320279392992e+27\n3 Linear |R| = 4.565435e+26\n3 KSP Residual norm 4.565434930235e+26\n4 Linear |R| = 4.863445e+25\n4 KSP Residual norm 4.863445239150e+25\n5 Linear |R| = 5.302163e+24\n5 KSP Residual norm 5.302163363024e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n5 Nonlinear |R| = 8.917698e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 8.917698e+29\n0 KSP Residual norm 8.917698455950e+29\n1 Linear |R| = 5.066295e+28\n1 KSP Residual norm 5.066294903989e+28\n2 Linear |R| = 4.249582e+27\n2 KSP Residual norm 4.249581532778e+27\n3 Linear |R| = 4.490728e+26\n3 KSP Residual norm 4.490727510831e+26\n4 Linear |R| = 4.783863e+25\n4 KSP Residual norm 4.783863354175e+25\n5 Linear |R| = 5.215403e+24\n5 KSP Residual norm 5.215403238741e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n6 Nonlinear |R| = 8.769340e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 8.769340e+29\n0 KSP Residual norm 8.769339584820e+29\n1 Linear |R| = 4.982010e+28\n1 KSP Residual norm 4.982009737213e+28\n2 Linear |R| = 4.178884e+27\n2 KSP Residual norm 4.178883671035e+27\n3 Linear |R| = 4.416020e+26\n3 KSP Residual norm 4.416020053018e+26\n4 Linear |R| = 4.704281e+25\n4 KSP Residual norm 4.704281393573e+25\n5 Linear |R| = 5.128643e+24\n5 KSP Residual norm 5.128643021597e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n7 Nonlinear |R| = 8.620981e+29\nComputing Jacobian.                                                                  [ 13.51 s] [    0 MB]\n0 Linear |R| = 8.620981e+29\n0 KSP Residual norm 8.620980714036e+29\n1 Linear |R| = 4.897725e+28\n1 KSP Residual norm 4.897724570462e+28\n2 Linear |R| = 4.108186e+27\n2 KSP Residual norm 4.108185807738e+27\n3 Linear |R| = 4.341313e+26\n3 KSP Residual norm 4.341312556147e+26\n4 Linear |R| = 4.624699e+25\n4 KSP Residual norm 4.624699356065e+25\n5 Linear |R| = 5.041883e+24\n5 KSP Residual norm 5.041882710021e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n8 Nonlinear |R| = 8.472622e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 8.472622e+29\n0 KSP Residual norm 8.472621843605e+29\n1 Linear |R| = 4.813439e+28\n1 KSP Residual norm 4.813439403735e+28\n2 Linear |R| = 4.037488e+27\n2 KSP Residual norm 4.037487942861e+27\n3 Linear |R| = 4.266605e+26\n3 KSP Residual norm 4.266605019546e+26\n4 Linear |R| = 4.545117e+25\n4 KSP Residual norm 4.545117240327e+25\n5 Linear |R| = 4.955122e+24\n5 KSP Residual norm 4.955122302389e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n9 Nonlinear |R| = 8.324263e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 8.324263e+29\n0 KSP Residual norm 8.324262973534e+29\n1 Linear |R| = 4.729154e+28\n1 KSP Residual norm 4.729154237034e+28\n2 Linear |R| = 3.966790e+27\n2 KSP Residual norm 3.966790076375e+27\n3 Linear |R| = 4.191897e+26\n3 KSP Residual norm 4.191897442519e+26\n4 Linear |R| = 4.465535e+25\n4 KSP Residual norm 4.465535044989e+25\n5 Linear |R| = 4.868362e+24\n5 KSP Residual norm 4.868361797018e+24\nComputing Residual                                                                   [  5.80 s] [    0 MB]\n10 Nonlinear |R| = 8.175904e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 8.175904e+29\n0 KSP Residual norm 8.175904103828e+29\n1 Linear |R| = 4.644869e+28\n1 KSP Residual norm 4.644869070358e+28\n2 Linear |R| = 3.896092e+27\n2 KSP Residual norm 3.896092208251e+27\n3 Linear |R| = 4.117190e+26\n3 KSP Residual norm 4.117189824345e+26\n4 Linear |R| = 4.385953e+25\n4 KSP Residual norm 4.385952768633e+25\n5 Linear |R| = 4.781601e+24\n5 KSP Residual norm 4.781601192166e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n11 Nonlinear |R| = 8.027545e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 8.027545e+29\n0 KSP Residual norm 8.027545234494e+29\n1 Linear |R| = 4.560584e+28\n1 KSP Residual norm 4.560583903708e+28\n2 Linear |R| = 3.825394e+27\n2 KSP Residual norm 3.825394338461e+27\n3 Linear |R| = 4.042482e+26\n3 KSP Residual norm 4.042482164278e+26\n4 Linear |R| = 4.306370e+25\n4 KSP Residual norm 4.306370409788e+25\n5 Linear |R| = 4.694840e+24\n5 KSP Residual norm 4.694840486028e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n12 Nonlinear |R| = 7.879186e+29\nComputing Jacobian.                                                                  [ 13.51 s] [    0 MB]\n0 Linear |R| = 7.879186e+29\n0 KSP Residual norm 7.879186365540e+29\n1 Linear |R| = 4.476299e+28\n1 KSP Residual norm 4.476298737084e+28\n2 Linear |R| = 3.754696e+27\n2 KSP Residual norm 3.754696466973e+27\n3 Linear |R| = 3.967774e+26\n3 KSP Residual norm 3.967774461543e+26\n4 Linear |R| = 4.226788e+25\n4 KSP Residual norm 4.226787966929e+25\n5 Linear |R| = 4.608080e+24\n5 KSP Residual norm 4.608079676732e+24\nComputing Residual                                                                   [  5.75 s] [    0 MB]\n13 Nonlinear |R| = 7.730827e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 7.730827e+29\n0 KSP Residual norm 7.730827496971e+29\n1 Linear |R| = 4.392014e+28\n1 KSP Residual norm 4.392013570488e+28\n2 Linear |R| = 3.683999e+27\n2 KSP Residual norm 3.683998593756e+27\n3 Linear |R| = 3.893067e+26\n3 KSP Residual norm 3.893066715337e+26\n4 Linear |R| = 4.147205e+25\n4 KSP Residual norm 4.147205438475e+25\n5 Linear |R| = 4.521319e+24\n5 KSP Residual norm 4.521318762337e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n14 Nonlinear |R| = 7.582469e+29\nComputing Jacobian.                                                                  [ 13.47 s] [    0 MB]\n0 Linear |R| = 7.582469e+29\n0 KSP Residual norm 7.582468628796e+29\n1 Linear |R| = 4.307728e+28\n1 KSP Residual norm 4.307728403918e+28\n2 Linear |R| = 3.613301e+27\n2 KSP Residual norm 3.613300718775e+27\n3 Linear |R| = 3.818359e+26\n3 KSP Residual norm 3.818358924825e+26\n4 Linear |R| = 4.067623e+25\n4 KSP Residual norm 4.067622822783e+25\n5 Linear |R| = 4.434558e+24\n5 KSP Residual norm 4.434557740825e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n15 Nonlinear |R| = 7.434110e+29\nComputing Jacobian.                                                                  [ 13.63 s] [    0 MB]\n0 Linear |R| = 7.434110e+29\n0 KSP Residual norm 7.434109761022e+29\n1 Linear |R| = 4.223443e+28\n1 KSP Residual norm 4.223443237377e+28\n2 Linear |R| = 3.542603e+27\n2 KSP Residual norm 3.542602841997e+27\n3 Linear |R| = 3.743651e+26\n3 KSP Residual norm 3.743651089140e+26\n4 Linear |R| = 3.988040e+25\n4 KSP Residual norm 3.988040118145e+25\n5 Linear |R| = 4.347797e+24\n5 KSP Residual norm 4.347796610099e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n16 Nonlinear |R| = 7.285751e+29\nComputing Jacobian.                                                                  [ 13.51 s] [    0 MB]\n0 Linear |R| = 7.285751e+29\n0 KSP Residual norm 7.285750893658e+29\n1 Linear |R| = 4.139158e+28\n1 KSP Residual norm 4.139158070865e+28\n2 Linear |R| = 3.471905e+27\n2 KSP Residual norm 3.471904963386e+27\n3 Linear |R| = 3.668943e+26\n3 KSP Residual norm 3.668943207382e+26\n4 Linear |R| = 3.908457e+25\n4 KSP Residual norm 3.908457322787e+25\n5 Linear |R| = 4.261035e+24\n5 KSP Residual norm 4.261035367982e+24\nComputing Residual                                                                   [  5.75 s] [    0 MB]\n17 Nonlinear |R| = 7.137392e+29\nComputing Jacobian.                                                                  [ 13.47 s] [    0 MB]\n0 Linear |R| = 7.137392e+29\n0 KSP Residual norm 7.137392026711e+29\n1 Linear |R| = 4.054873e+28\n1 KSP Residual norm 4.054872904381e+28\n2 Linear |R| = 3.401207e+27\n2 KSP Residual norm 3.401207082904e+27\n3 Linear |R| = 3.594235e+26\n3 KSP Residual norm 3.594235278610e+26\n4 Linear |R| = 3.828874e+25\n4 KSP Residual norm 3.828874434861e+25\n5 Linear |R| = 4.174274e+24\n5 KSP Residual norm 4.174274012204e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n18 Nonlinear |R| = 6.989033e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 6.989033e+29\n0 KSP Residual norm 6.989033160191e+29\n1 Linear |R| = 3.970588e+28\n1 KSP Residual norm 3.970587737928e+28\n2 Linear |R| = 3.330509e+27\n2 KSP Residual norm 3.330509200513e+27\n3 Linear |R| = 3.519527e+26\n3 KSP Residual norm 3.519527301849e+26\n4 Linear |R| = 3.749291e+25\n4 KSP Residual norm 3.749291452442e+25\n5 Linear |R| = 4.087513e+24\n5 KSP Residual norm 4.087512540403e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n19 Nonlinear |R| = 6.840674e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 6.840674e+29\n0 KSP Residual norm 6.840674294106e+29\n1 Linear |R| = 3.886303e+28\n1 KSP Residual norm 3.886302571505e+28\n2 Linear |R| = 3.259811e+27\n2 KSP Residual norm 3.259811316172e+27\n3 Linear |R| = 3.444819e+26\n3 KSP Residual norm 3.444819276079e+26\n4 Linear |R| = 3.669708e+25\n4 KSP Residual norm 3.669708373526e+25\n5 Linear |R| = 4.000751e+24\n5 KSP Residual norm 4.000750950116e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n20 Nonlinear |R| = 6.692315e+29\nComputing Jacobian.                                                                  [ 13.55 s] [    0 MB]\n0 Linear |R| = 6.692315e+29\n0 KSP Residual norm 6.692315428465e+29\n1 Linear |R| = 3.802017e+28\n1 KSP Residual norm 3.802017405112e+28\n2 Linear |R| = 3.189113e+27\n2 KSP Residual norm 3.189113429839e+27\n3 Linear |R| = 3.370111e+26\n3 KSP Residual norm 3.370111200237e+26\n4 Linear |R| = 3.590125e+25\n4 KSP Residual norm 3.590125196019e+25\n5 Linear |R| = 3.913989e+24\n5 KSP Residual norm 3.913989238774e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n21 Nonlinear |R| = 6.543957e+29\nComputing Jacobian.                                                                  [ 13.54 s] [    0 MB]\n0 Linear |R| = 6.543957e+29\n0 KSP Residual norm 6.543956563280e+29\n1 Linear |R| = 3.717732e+28\n1 KSP Residual norm 3.717732238752e+28\n2 Linear |R| = 3.118416e+27\n2 KSP Residual norm 3.118415541469e+27\n3 Linear |R| = 3.295403e+26\n3 KSP Residual norm 3.295403073214e+26\n4 Linear |R| = 3.510542e+25\n4 KSP Residual norm 3.510541917734e+25\n5 Linear |R| = 3.827227e+24\n5 KSP Residual norm 3.827227403693e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n22 Nonlinear |R| = 6.395598e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 6.395598e+29\n0 KSP Residual norm 6.395597698559e+29\n1 Linear |R| = 3.633447e+28\n1 KSP Residual norm 3.633447072424e+28\n2 Linear |R| = 3.047718e+27\n2 KSP Residual norm 3.047717651016e+27\n3 Linear |R| = 3.220695e+26\n3 KSP Residual norm 3.220694893848e+26\n4 Linear |R| = 3.430959e+25\n4 KSP Residual norm 3.430958536388e+25\n5 Linear |R| = 3.740465e+24\n5 KSP Residual norm 3.740465442068e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n23 Nonlinear |R| = 6.247239e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 6.247239e+29\n0 KSP Residual norm 6.247238834314e+29\n1 Linear |R| = 3.549162e+28\n1 KSP Residual norm 3.549161906129e+28\n2 Linear |R| = 2.977020e+27\n2 KSP Residual norm 2.977019758432e+27\n3 Linear |R| = 3.145987e+26\n3 KSP Residual norm 3.145986660925e+26\n4 Linear |R| = 3.351375e+25\n4 KSP Residual norm 3.351375049589e+25\n5 Linear |R| = 3.653703e+24\n5 KSP Residual norm 3.653703350963e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n24 Nonlinear |R| = 6.098880e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 6.098880e+29\n0 KSP Residual norm 6.098879970556e+29\n1 Linear |R| = 3.464877e+28\n1 KSP Residual norm 3.464876739868e+28\n2 Linear |R| = 2.906322e+27\n2 KSP Residual norm 2.906321863667e+27\n3 Linear |R| = 3.071278e+26\n3 KSP Residual norm 3.071278373174e+26\n4 Linear |R| = 3.271791e+25\n4 KSP Residual norm 3.271791454833e+25\n5 Linear |R| = 3.566941e+24\n5 KSP Residual norm 3.566941127304e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n25 Nonlinear |R| = 5.950521e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 5.950521e+29\n0 KSP Residual norm 5.950521107297e+29\n1 Linear |R| = 3.380592e+28\n1 KSP Residual norm 3.380591573642e+28\n2 Linear |R| = 2.835624e+27\n2 KSP Residual norm 2.835623966667e+27\n3 Linear |R| = 2.996570e+26\n3 KSP Residual norm 2.996570029260e+26\n4 Linear |R| = 3.192208e+25\n4 KSP Residual norm 3.192207749493e+25\n5 Linear |R| = 3.480179e+24\n5 KSP Residual norm 3.480178767866e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n26 Nonlinear |R| = 5.802162e+29\nComputing Jacobian.                                                                  [ 13.55 s] [    0 MB]\n0 Linear |R| = 5.802162e+29\n0 KSP Residual norm 5.802162244550e+29\n1 Linear |R| = 3.296306e+28\n1 KSP Residual norm 3.296306407452e+28\n2 Linear |R| = 2.764926e+27\n2 KSP Residual norm 2.764926067377e+27\n3 Linear |R| = 2.921862e+26\n3 KSP Residual norm 2.921861627783e+26\n4 Linear |R| = 3.112624e+25\n4 KSP Residual norm 3.112623930813e+25\n5 Linear |R| = 3.393416e+24\n5 KSP Residual norm 3.393416269263e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n27 Nonlinear |R| = 5.653803e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 5.653803e+29\n0 KSP Residual norm 5.653803382326e+29\n1 Linear |R| = 3.212021e+28\n1 KSP Residual norm 3.212021241299e+28\n2 Linear |R| = 2.694228e+27\n2 KSP Residual norm 2.694228165737e+27\n3 Linear |R| = 2.847153e+26\n3 KSP Residual norm 2.847153167270e+26\n4 Linear |R| = 3.033040e+25\n4 KSP Residual norm 3.033039995893e+25\n5 Linear |R| = 3.306654e+24\n5 KSP Residual norm 3.306653627939e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n28 Nonlinear |R| = 5.505445e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 5.505445e+29\n0 KSP Residual norm 5.505444520641e+29\n1 Linear |R| = 3.127736e+28\n1 KSP Residual norm 3.127736075182e+28\n2 Linear |R| = 2.623530e+27\n2 KSP Residual norm 2.623530261687e+27\n3 Linear |R| = 2.772445e+26\n3 KSP Residual norm 2.772444646174e+26\n4 Linear |R| = 2.953456e+25\n4 KSP Residual norm 2.953455941684e+25\n5 Linear |R| = 3.219891e+24\n5 KSP Residual norm 3.219890840146e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n29 Nonlinear |R| = 5.357086e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 5.357086e+29\n0 KSP Residual norm 5.357085659509e+29\n1 Linear |R| = 3.043451e+28\n1 KSP Residual norm 3.043450909105e+28\n2 Linear |R| = 2.552832e+27\n2 KSP Residual norm 2.552832355162e+27\n3 Linear |R| = 2.697736e+26\n3 KSP Residual norm 2.697736062860e+26\n4 Linear |R| = 2.873872e+25\n4 KSP Residual norm 2.873871764970e+25\n5 Linear |R| = 3.133128e+24\n5 KSP Residual norm 3.133127901940e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n30 Nonlinear |R| = 5.208727e+29\nComputing Jacobian.                                                                  [ 13.54 s] [    0 MB]\n0 Linear |R| = 5.208727e+29\n0 KSP Residual norm 5.208726798945e+29\n1 Linear |R| = 2.959166e+28\n1 KSP Residual norm 2.959165743067e+28\n2 Linear |R| = 2.482134e+27\n2 KSP Residual norm 2.482134446092e+27\n3 Linear |R| = 2.623027e+26\n3 KSP Residual norm 2.623027415605e+26\n4 Linear |R| = 2.794287e+25\n4 KSP Residual norm 2.794287462360e+25\n5 Linear |R| = 3.046365e+24\n5 KSP Residual norm 3.046364809154e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n31 Nonlinear |R| = 5.060368e+29\nComputing Jacobian.                                                                  [ 13.47 s] [    0 MB]\n0 Linear |R| = 5.060368e+29\n0 KSP Residual norm 5.060367938964e+29\n1 Linear |R| = 2.874881e+28\n1 KSP Residual norm 2.874880577070e+28\n2 Linear |R| = 2.411437e+27\n2 KSP Residual norm 2.411436534406e+27\n3 Linear |R| = 2.548319e+26\n3 KSP Residual norm 2.548318702589e+26\n4 Linear |R| = 2.714703e+25\n4 KSP Residual norm 2.714703030266e+25\n5 Linear |R| = 2.959602e+24\n5 KSP Residual norm 2.959601557385e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n32 Nonlinear |R| = 4.912009e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 4.912009e+29\n0 KSP Residual norm 4.912009079585e+29\n1 Linear |R| = 2.790595e+28\n1 KSP Residual norm 2.790595411115e+28\n2 Linear |R| = 2.340739e+27\n2 KSP Residual norm 2.340738620026e+27\n3 Linear |R| = 2.473610e+26\n3 KSP Residual norm 2.473609921882e+26\n4 Linear |R| = 2.635118e+25\n4 KSP Residual norm 2.635118464892e+25\n5 Linear |R| = 2.872838e+24\n5 KSP Residual norm 2.872838141973e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n33 Nonlinear |R| = 4.763650e+29\nComputing Jacobian.                                                                  [ 13.47 s] [    0 MB]\n0 Linear |R| = 4.763650e+29\n0 KSP Residual norm 4.763650220826e+29\n1 Linear |R| = 2.706310e+28\n1 KSP Residual norm 2.706310245203e+28\n2 Linear |R| = 2.270041e+27\n2 KSP Residual norm 2.270040702872e+27\n3 Linear |R| = 2.398901e+26\n3 KSP Residual norm 2.398901071441e+26\n4 Linear |R| = 2.555534e+25\n4 KSP Residual norm 2.555533762213e+25\n5 Linear |R| = 2.786075e+24\n5 KSP Residual norm 2.786074557974e+24\nComputing Residual                                                                   [  5.75 s] [    0 MB]\n34 Nonlinear |R| = 4.615291e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 4.615291e+29\n0 KSP Residual norm 4.615291362705e+29\n1 Linear |R| = 2.622025e+28\n1 KSP Residual norm 2.622025079335e+28\n2 Linear |R| = 2.199343e+27\n2 KSP Residual norm 2.199342782856e+27\n3 Linear |R| = 2.324192e+26\n3 KSP Residual norm 2.324192149092e+26\n4 Linear |R| = 2.475949e+25\n4 KSP Residual norm 2.475948917952e+25\n5 Linear |R| = 2.699311e+24\n5 KSP Residual norm 2.699310800140e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n35 Nonlinear |R| = 4.466933e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 4.466933e+29\n0 KSP Residual norm 4.466932505243e+29\n1 Linear |R| = 2.537740e+28\n1 KSP Residual norm 2.537739913514e+28\n2 Linear |R| = 2.128645e+27\n2 KSP Residual norm 2.128644859887e+27\n3 Linear |R| = 2.249483e+26\n3 KSP Residual norm 2.249483152525e+26\n4 Linear |R| = 2.396364e+25\n4 KSP Residual norm 2.396363927557e+25\n5 Linear |R| = 2.612547e+24\n5 KSP Residual norm 2.612546862881e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n36 Nonlinear |R| = 4.318574e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 4.318574e+29\n0 KSP Residual norm 4.318573648463e+29\n1 Linear |R| = 2.453455e+28\n1 KSP Residual norm 2.453454747740e+28\n2 Linear |R| = 2.057947e+27\n2 KSP Residual norm 2.057946933867e+27\n3 Linear |R| = 2.174774e+26\n3 KSP Residual norm 2.174774079274e+26\n4 Linear |R| = 2.316779e+25\n4 KSP Residual norm 2.316778786174e+25\n5 Linear |R| = 2.525783e+24\n5 KSP Residual norm 2.525782740239e+24\nComputing Residual                                                                   [  5.76 s] [    0 MB]\n37 Nonlinear |R| = 4.170215e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 4.170215e+29\n0 KSP Residual norm 4.170214792387e+29\n1 Linear |R| = 2.369170e+28\n1 KSP Residual norm 2.369169582015e+28\n2 Linear |R| = 1.987249e+27\n2 KSP Residual norm 1.987249004691e+27\n3 Linear |R| = 2.100065e+26\n3 KSP Residual norm 2.100064926704e+26\n4 Linear |R| = 2.237193e+25\n4 KSP Residual norm 2.237193488617e+25\n5 Linear |R| = 2.439018e+24\n5 KSP Residual norm 2.439018425845e+24\nComputing Residual                                                                   [  5.80 s] [    0 MB]\n38 Nonlinear |R| = 4.021856e+29\nComputing Jacobian.                                                                  [ 13.51 s] [    0 MB]\n0 Linear |R| = 4.021856e+29\n0 KSP Residual norm 4.021855937041e+29\n1 Linear |R| = 2.284884e+28\n1 KSP Residual norm 2.284884416341e+28\n2 Linear |R| = 1.916551e+27\n2 KSP Residual norm 1.916551072247e+27\n3 Linear |R| = 2.025356e+26\n3 KSP Residual norm 2.025355691993e+26\n4 Linear |R| = 2.157608e+25\n4 KSP Residual norm 2.157608029328e+25\n5 Linear |R| = 2.352254e+24\n5 KSP Residual norm 2.352253912878e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n39 Nonlinear |R| = 3.873497e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 3.873497e+29\n0 KSP Residual norm 3.873497082451e+29\n1 Linear |R| = 2.200599e+28\n1 KSP Residual norm 2.200599250720e+28\n2 Linear |R| = 1.845853e+27\n2 KSP Residual norm 1.845853136413e+27\n3 Linear |R| = 1.950646e+26\n3 KSP Residual norm 1.950646372111e+26\n4 Linear |R| = 2.078022e+25\n4 KSP Residual norm 2.078022402341e+25\n5 Linear |R| = 2.265489e+24\n5 KSP Residual norm 2.265489194012e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n40 Nonlinear |R| = 3.725138e+29\nComputing Jacobian.                                                                  [ 13.53 s] [    0 MB]\n0 Linear |R| = 3.725138e+29\n0 KSP Residual norm 3.725138228647e+29\n1 Linear |R| = 2.116314e+28\n1 KSP Residual norm 2.116314085154e+28\n2 Linear |R| = 1.775155e+27\n2 KSP Residual norm 1.775155197061e+27\n3 Linear |R| = 1.875937e+26\n3 KSP Residual norm 1.875936963794e+26\n4 Linear |R| = 1.998437e+25\n4 KSP Residual norm 1.998436601234e+25\n5 Linear |R| = 2.178724e+24\n5 KSP Residual norm 2.178724261362e+24\nComputing Residual                                                                   [  5.82 s] [    0 MB]\n41 Nonlinear |R| = 3.576779e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 3.576779e+29\n0 KSP Residual norm 3.576779375659e+29\n1 Linear |R| = 2.032029e+28\n1 KSP Residual norm 2.032028919644e+28\n2 Linear |R| = 1.704457e+27\n2 KSP Residual norm 1.704457254050e+27\n3 Linear |R| = 1.801227e+26\n3 KSP Residual norm 1.801227463522e+26\n4 Linear |R| = 1.918851e+25\n4 KSP Residual norm 1.918850619070e+25\n5 Linear |R| = 2.091959e+24\n5 KSP Residual norm 2.091959106414e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n42 Nonlinear |R| = 3.428421e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 3.428421e+29\n0 KSP Residual norm 3.428420523522e+29\n1 Linear |R| = 1.947744e+28\n1 KSP Residual norm 1.947743754194e+28\n2 Linear |R| = 1.633759e+27\n2 KSP Residual norm 1.633759307228e+27\n3 Linear |R| = 1.726518e+26\n3 KSP Residual norm 1.726517867478e+26\n4 Linear |R| = 1.839264e+25\n4 KSP Residual norm 1.839264448339e+25\n5 Linear |R| = 2.005194e+24\n5 KSP Residual norm 2.005193719947e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n43 Nonlinear |R| = 3.280062e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 3.280062e+29\n0 KSP Residual norm 3.280061672273e+29\n1 Linear |R| = 1.863459e+28\n1 KSP Residual norm 1.863458588806e+28\n2 Linear |R| = 1.563061e+27\n2 KSP Residual norm 1.563061356431e+27\n3 Linear |R| = 1.651808e+26\n3 KSP Residual norm 1.651808171518e+26\n4 Linear |R| = 1.759678e+25\n4 KSP Residual norm 1.759678080881e+25\n5 Linear |R| = 1.918428e+24\n5 KSP Residual norm 1.918428091943e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n44 Nonlinear |R| = 3.131703e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 3.131703e+29\n0 KSP Residual norm 3.131702821951e+29\n1 Linear |R| = 1.779173e+28\n1 KSP Residual norm 1.779173423482e+28\n2 Linear |R| = 1.492363e+27\n2 KSP Residual norm 1.492363401478e+27\n3 Linear |R| = 1.577098e+26\n3 KSP Residual norm 1.577098371123e+26\n4 Linear |R| = 1.680092e+25\n4 KSP Residual norm 1.680091507796e+25\n5 Linear |R| = 1.831662e+24\n5 KSP Residual norm 1.831662211478e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n45 Nonlinear |R| = 2.983344e+29\nComputing Jacobian.                                                                  [ 13.48 s] [    0 MB]\n0 Linear |R| = 2.983344e+29\n0 KSP Residual norm 2.983343972601e+29\n1 Linear |R| = 1.694888e+28\n1 KSP Residual norm 1.694888258226e+28\n2 Linear |R| = 1.421665e+27\n2 KSP Residual norm 1.421665442172e+27\n3 Linear |R| = 1.502388e+26\n3 KSP Residual norm 1.502388461344e+26\n4 Linear |R| = 1.600505e+25\n4 KSP Residual norm 1.600504719344e+25\n5 Linear |R| = 1.744896e+24\n5 KSP Residual norm 1.744896066590e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n46 Nonlinear |R| = 2.834985e+29\nComputing Jacobian.                                                                  [ 13.50 s] [    0 MB]\n0 Linear |R| = 2.834985e+29\n0 KSP Residual norm 2.834985124270e+29\n1 Linear |R| = 1.610603e+28\n1 KSP Residual norm 1.610603093042e+28\n2 Linear |R| = 1.350967e+27\n2 KSP Residual norm 1.350967478298e+27\n3 Linear |R| = 1.427678e+26\n3 KSP Residual norm 1.427678436741e+26\n4 Linear |R| = 1.520918e+25\n4 KSP Residual norm 1.520917704813e+25\n5 Linear |R| = 1.658130e+24\n5 KSP Residual norm 1.658129644133e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n47 Nonlinear |R| = 2.686626e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 2.686626e+29\n0 KSP Residual norm 2.686626277013e+29\n1 Linear |R| = 1.526318e+28\n1 KSP Residual norm 1.526317927932e+28\n2 Linear |R| = 1.280270e+27\n2 KSP Residual norm 1.280269509616e+27\n3 Linear |R| = 1.352968e+26\n3 KSP Residual norm 1.352968291305e+26\n4 Linear |R| = 1.441330e+25\n4 KSP Residual norm 1.441330452372e+25\n5 Linear |R| = 1.571363e+24\n5 KSP Residual norm 1.571362929578e+24\nComputing Residual                                                                   [  5.78 s] [    0 MB]\n48 Nonlinear |R| = 2.538267e+29\nComputing Jacobian.                                                                  [ 13.49 s] [    0 MB]\n0 Linear |R| = 2.538267e+29\n0 KSP Residual norm 2.538267430889e+29\n1 Linear |R| = 1.442033e+28\n1 KSP Residual norm 1.442032762901e+28\n2 Linear |R| = 1.209572e+27\n2 KSP Residual norm 1.209571535860e+27\n3 Linear |R| = 1.278258e+26\n3 KSP Residual norm 1.278258018361e+26\n4 Linear |R| = 1.361743e+25\n4 KSP Residual norm 1.361742948880e+25\n5 Linear |R| = 1.484596e+24\n5 KSP Residual norm 1.484595906799e+24\nComputing Residual                                                                   [  5.77 s] [    0 MB]\n49 Nonlinear |R| = 2.389909e+29\nComputing Jacobian.                                                                  [ 13.52 s] [    0 MB]\n0 Linear |R| = 2.389909e+29\n0 KSP Residual norm 2.389908585963e+29\n1 Linear |R| = 1.357748e+28\n1 KSP Residual norm 1.357747597953e+28\n2 Linear |R| = 1.138874e+27\n2 KSP Residual norm 1.138873556734e+27\n3 Linear |R| = 1.203548e+26\n3 KSP Residual norm 1.203547610457e+26\n4 Linear |R| = 1.282155e+25\n4 KSP Residual norm 1.282155179665e+25\n5 Linear |R| = 1.397829e+24\n5 KSP Residual norm 1.397828557778e+24\nComputing Residual                                                                   [  5.79 s] [    0 MB]\n50 Nonlinear |R| = 2.241550e+29\nNonlinear solve did not converge due to DIVERGED_MAX_IT iterations 50\nSolve Did NOT Converge!\nFinished Solving                                                                       [1084.47 s] [    2 MB]\nAborting as solve did not converge\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\nSolve failed and timestep already at or below dtmin, cannot continue!\nStack frames: 12\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, std::__cxx11::basic_string<char, std::char_traits, std::allocator >)\n2: callMooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits, std::allocator >&, MooseApp*)\n3: /home/erodriguez/projects/moose/framework/libmoose-opt.so.0(+0x878a11) [0x7f4bce217a11]\n4: /home/erodriguez/projects/moose/framework/libmoose-opt.so.0(+0x8e5cc7) [0x7f4bce284cc7]\n5: TimeStepper::computeStep()\n6: Transient::execute()\n7: MooseApp::executeExecutioner()\n8: MooseApp::run()\n9: main\n10: __libc_start_main\n11: ../wave/wave-opt(+0x33ef) [0x55593ac6a3ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3368969",
                          "updatedAt": "2022-08-10T18:26:08Z",
                          "publishedAt": "2022-08-10T18:26:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "So it seems to me that the time integrator itself is blowing up, which is weird as the default Newmark beta options give you an unconditionally stable algorithm. Could it be that you happen to choose a combination of parameters that aren't stable?\nAnd regardless of all these, my suggestion remains the same: you need to first follow the setup in the regression tests, and remove the bdf2 scheme unless you have a clear motivation for that change, in which case you'll need to explain to us why would you want to do that.",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3369025",
                          "updatedAt": "2022-08-10T18:37:23Z",
                          "publishedAt": "2022-08-10T18:37:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You're still not showing the time step where the residual blows up.\nPlease attach / upload a text file, dont paste the whole log in a comment",
                  "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3369002",
                  "updatedAt": "2022-08-10T18:33:42Z",
                  "publishedAt": "2022-08-10T18:33:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "On the line 3845, start time step 77, which in the line 4503 it does not converge. (This is the first time it does not converge)\nAgain on the line 4507, the time step 77, which in the line 5265 it does not converge.\nAgain on the line 5269, the time step 77, which in the line 5804 CONVERGE and jump to the next time step 88.\nFrom this timesteps 88, sometimes converge, and others don't.\nFinally, at the timestep 100. *** ERROR ***\noutput non-convergence.txt",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3369976",
                          "updatedAt": "2022-08-10T21:07:44Z",
                          "publishedAt": "2022-08-10T21:07:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok let s try tightening the tolerances. (on top of doing what @hugary1995 said)\nWhat I see from the log is that the initial residual is growing because we keep accepting more and more unconverged solution because of loose-ish non linear residual tolerances\neventually this blows up too much and the solver dies.\nTo make working with the tolerances easier, I would recommend turning on automatic_scaling in the Executioner block",
                          "url": "https://github.com/idaholab/moose/discussions/21807#discussioncomment-3370006",
                          "updatedAt": "2022-08-10T21:12:26Z",
                          "publishedAt": "2022-08-10T21:12:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Which kernel should I use if I want to treat time derivative term as 0 in CH equation?",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nWhich kernel should I use if I don't want to consider time derivative term in CH equation?\nI want to set time derivative term as 0.\nCurrently, I am using Coupledtimederivative, kernel to deal with the time derivative term, can I simply delete this part?\nThank you,\nBest",
          "url": "https://github.com/idaholab/moose/discussions/21815",
          "updatedAt": "2022-09-29T16:26:18Z",
          "publishedAt": "2022-08-10T02:43:19Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "So you want to remove the time derivative?\nThen do not use any time derivative kernel\nYou may even switch to a Steady executioner",
                  "url": "https://github.com/idaholab/moose/discussions/21815#discussioncomment-3363449",
                  "updatedAt": "2022-08-10T05:49:23Z",
                  "publishedAt": "2022-08-10T05:49:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issues with \"DisplacementAboutAxis\"",
          "author": {
            "login": "TheGreatCid"
          },
          "bodyText": "Hi All,\nI am using the type \"DisplacementAboutAxis\" to apply torsional displacement to a ring sample.\nI hold the bottom of the sample fixed in all directions and then rotate the top surface about the z-axis.\nThe sample rotates as expected, but I noticed that in addition to rotating about the axis, the surface where the boundary condition is applied also expands in the radial direction.\nI exaggerated the displacements to show better what was occurring. The bulge at the top surface should not be there.\n\nI have attached my input file and mesh.\nArchive.zip\nIs this a known bug, or is there an issue on my end?\nThank you in advance!",
          "url": "https://github.com/idaholab/moose/discussions/21809",
          "updatedAt": "2022-09-02T19:46:38Z",
          "publishedAt": "2022-08-09T15:45:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the surface held at the top so that it would not expand radially? This could be physical?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3359491",
                  "updatedAt": "2022-08-09T16:14:31Z",
                  "publishedAt": "2022-08-09T16:14:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "Hi!\nI do not have a separate boundary condition that holds the radius fixed. However, the entire top surface is treated with a Dirichlet boundary condition for the x and y displacements. So the x and y displacements at the top surface should only be the values that the DisplacementAboutAxis BC prescribes. If that line of thinking is correct, then the radial expansion that I am seeing must be coming from DisplacementAboutAxis",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3359522",
                          "updatedAt": "2022-08-09T16:20:08Z",
                          "publishedAt": "2022-08-09T16:20:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "are you seeing something larger than you prescribe with the BC?",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3359699",
                          "updatedAt": "2022-08-09T16:43:32Z",
                          "publishedAt": "2022-08-09T16:43:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "With respect to angular displacement, I am seeing what I wish to prescribe.\nHowever, there should be no change in the radius of the top surface, which is what I am seeing.",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3359751",
                          "updatedAt": "2022-08-09T16:50:46Z",
                          "publishedAt": "2022-08-09T16:50:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so you are prescribing a pure rotation?\nwhat does your BC block look like?",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3359772",
                          "updatedAt": "2022-08-09T16:53:24Z",
                          "publishedAt": "2022-08-09T16:53:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "[top_x]\n    type = DisplacementAboutAxis\n    boundary = top\n    function = '1'\n    angular_velocity = true\n    angle_units = degrees\n    axis_origin = '0 0 1.25'\n    axis_direction = '0. 0. 1'\n    component = 0\n    variable = 'disp_x'\n  []\n  [top_y]\n    type = DisplacementAboutAxis\n    boundary = top\n    function = '1'\n    angular_velocity = true\n    angle_units = degrees\n    axis_origin = ' 0 0 1.25'\n    axis_direction = '0. 0. 1'\n    component = 1\n    variable = 'disp_y'\n  []\n  [bottom_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = bottom\n    value = 0.0\n  []\n\n  [bottom_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0.0\n  []\n\n  [bottom_z]\n    type = DirichletBC\n    variable = disp_z\n    boundary = bottom\n    value = 0.0\n  []\n\nHere is my BC block\nThe flanged surface in the picture is the 'top' BC",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3360296",
                          "updatedAt": "2022-08-09T18:06:55Z",
                          "publishedAt": "2022-08-09T18:06:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "@TheGreatCid Can you do me a favor and try implementing this rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix#Axis_and_angle in DisplacementAboutAxis, then see if this fixes the issue? The formula used currently seems unnecessarily complicated to me.",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3360715",
                          "updatedAt": "2022-08-09T19:24:49Z",
                          "publishedAt": "2022-08-09T19:24:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "I'll implement that when I get a second and let you know how it goes\nThanks!",
                          "url": "https://github.com/idaholab/moose/discussions/21809#discussioncomment-3360772",
                          "updatedAt": "2022-08-09T19:36:01Z",
                          "publishedAt": "2022-08-09T19:36:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE team job opening",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "Hello!\nWe have a job opening for a computational scientist on the MOOSE team!\nAll the details about the posting: inl.taleo.net\nIf you enjoy open-source software that benefits thousands of researchers worldwide, please apply!\nGuillaume for the MOOSE team",
          "url": "https://github.com/idaholab/moose/discussions/21570",
          "updatedAt": "2022-08-09T14:25:30Z",
          "publishedAt": "2022-07-12T22:06:42Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "faisal-bhuiyan"
                  },
                  "bodyText": "Hi @GiudGiud. This is Faisal Bhuiyan - I believe I will be a good fit for this role and applied via the above link. Looking forward to hearing back and please feel free to ask questions!",
                  "url": "https://github.com/idaholab/moose/discussions/21570#discussioncomment-3214499",
                  "updatedAt": "2022-07-24T03:14:17Z",
                  "publishedAt": "2022-07-24T03:14:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "permcody"
                  },
                  "bodyText": "This posting is now closed. We are conducting interviews over the next few weeks. Thanks to all who applied!",
                  "url": "https://github.com/idaholab/moose/discussions/21570#discussioncomment-3358550",
                  "updatedAt": "2022-08-09T14:20:24Z",
                  "publishedAt": "2022-08-09T14:20:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Code coverage on getParam",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hi eveyrone,\nIn https://mooseframework.inl.gov/docs/PRs/21592/coverage/geochemistry/src/userobjects/GeochemistryKineticRate.C.gcov.html you can see that the final line in\n     133         121 :     _monod_ind(isParamValid(\"promoting_monod_indices\")\n     134             :                    ? getParam<std::vector<Real>>(\"promoting_monod_indices\")\n     135           0 :                    : std::vector<Real>(_promoting_names.size(), 0.0)),\n\nis not covered by any test.  However, i have tests that supply promoting_monod_indices and tests that do not supply that parameter.  Why is the final line not covered by the tests?\na",
          "url": "https://github.com/idaholab/moose/discussions/21795",
          "updatedAt": "2022-08-08T20:32:08Z",
          "publishedAt": "2022-08-08T10:37:28Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "In order for us to afford running coverage with so many different configurations and tests, all of the module coverage is produced in opt mode (with -O2, lots of optimization). This optimization... can unfortunately trick gcov. This is likely one of those cases.\nYou're probably not going to be able to hit 100% with this. Rest assured, you know that it's tested \ud83d\ude06",
                  "url": "https://github.com/idaholab/moose/discussions/21795#discussioncomment-3350522",
                  "updatedAt": "2022-08-08T15:23:34Z",
                  "publishedAt": "2022-08-08T15:23:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks you @loganharbour",
                          "url": "https://github.com/idaholab/moose/discussions/21795#discussioncomment-3352653",
                          "updatedAt": "2022-08-08T20:32:08Z",
                          "publishedAt": "2022-08-08T20:32:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Extrapolate from gauss points to nodes",
          "author": {
            "login": "KhaledNabilSharafeldin"
          },
          "bodyText": "Hello,\nJust a simple question here, I have in the main app the stress calculated at the gauss points, and whenever I transferred them to the sub app, I used MultiAppProjectionTransfer in order to extrapolate these values to the nodes.\n  [./tau1_to_sub]\n    type = MultiAppProjectionTransfer\n    fixed_meshes = true\n    proj_type = l2\n    direction = to_multiapp\n    multi_app = sub_app\n    source_variable = tau1Aux\n    variable = tau1 \n  [../]\n\nwhere tau1Aux is a MONOMIAL and tau1 is a LAGRANGE variables.\nMind you, the mesh between the two apps are exactly identical, in fact, I use clone_mesh tag.\nis there a better way to do this because this transfer is pretty much holding back the run speed  since I have to do 12 of these transfers?\nThanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/21701",
          "updatedAt": "2022-08-07T19:53:39Z",
          "publishedAt": "2022-07-27T14:33:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo this is a performance issue?\nOr are you unsatisfied with the granularity of the transfer? I think that projection will not be exactly what you describe here, from Gauss points to nodes\nIf this is solely a performance issue, fixed_meshes = true is already the fastest with ProjectionTransfer\nIf you need faster, I would recommend working on moving to a MultiAppCopyTransfer, our fastest field transfer. For this you will need to have the same type of variable in both applications. I think this will be beneficial for the accuracy of the projections too\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3261788",
                  "updatedAt": "2022-07-27T15:17:32Z",
                  "publishedAt": "2022-07-27T15:17:31Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "It is a performance issue.\nI would use the MultiAppCopyTransfer if I have these values calculated on the nodes but they are on qp, is there an existing auxkernel or so to interpolate the values from qp to nodes?\nThanks,\nKhaled",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3263225",
                          "updatedAt": "2022-07-27T17:46:43Z",
                          "publishedAt": "2022-07-27T17:37:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "any nodal auxkernel already does this, computes the nodal values based on the qp values.\nSo if you have an auxkernel that does the job, it should likely work\nin the code if it refers to _current_elem instead of qp, typically it doesnt work for nodal variables",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3263482",
                          "updatedAt": "2022-07-27T18:16:41Z",
                          "publishedAt": "2022-07-27T18:16:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "It seems like this wont work with material properties defined on qp\nit results in the following error:\nNodal AuxKernel 'tau1Aux' attempted to reference material property 'mandel_stress'\nConsider using an elemental auxiliary variable for 'tau1Aux'.\n\nif there is an example AuxKernel that you can refer me to I'd really appreciate it\nmy auxkernel basically does a double contraction of the _mandel_stress[_qp].doubleContraction(R);",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3300455",
                          "updatedAt": "2022-08-01T18:06:05Z",
                          "publishedAt": "2022-08-01T16:45:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "Do you have to use LAGRANGE type on your target mesh? If not, you can make the two variables in the same type and order and do the copy transfer, which is much faster. If you have to, you still can use a reaction kernel and a body force kernel (to assembly the material property) with tau1Aux being a primal variable. I did not check the code but suppose that the projection transfer can transfer elemental variables to nodal variables and the main cost goes into the setup.",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3302422",
                          "updatedAt": "2022-08-01T21:09:14Z",
                          "publishedAt": "2022-08-01T21:09:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There's two things here:\n\nsaving the material property to a constant monomial loses information, then projecting it using the transfer to a nodal variable will not recover this information, it ll be approximate. If you dont care too much about this, and only want to solve the performance issue, you will want to use the fixed_meshes parameter. This will cache most of the work performed in this transfer, making it very fast after the first time it is used\nif you do care about this error, then you will need to implement the nodal version of a materialRealAux. We purposely do not have this because it would not be very well defined at interfaces between blocks. But as long as you make a consistent choice of which block is preferred, or suggest an interpolation method or something, then it will be OK.",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3302863",
                          "updatedAt": "2022-08-01T22:50:08Z",
                          "publishedAt": "2022-08-01T22:50:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "Thank you @YaqiWang and @GiudGiud  for your replies!\nI took a look at MaterialPropertyValue kernel, and created a version that is compatible with RankTwoTensor material properties using indices. This pretty much does what a reaction or body force kernel would do.\nI can share the code here if that would be useful.\nThanks again!\n~Khaled",
                          "url": "https://github.com/idaholab/moose/discussions/21701#discussioncomment-3344635",
                          "updatedAt": "2022-08-07T19:53:07Z",
                          "publishedAt": "2022-08-07T19:53:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "wrap angles modulus 2 Pi",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "Is there a simple way to wrap azimuthal angles in cylindrical coordinates back to [0, 2 Pi)? I guess using the C++ modulus function could be fraught as the wrapping should ideally be made during the executioner?",
          "url": "https://github.com/idaholab/moose/discussions/21778",
          "updatedAt": "2022-09-02T19:48:56Z",
          "publishedAt": "2022-08-04T15:26:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mangerij"
                  },
                  "bodyText": "I should add that we are interested in spherical coordinates. I can wrap the azimuthal angle in an UO (similar to the one @dschwen provided to renormalize the vector solution to be on the unit sphere).\nTo wrap, I just use this line:\nfor (const auto i : index_range(_var_numbers)) \n            if (solution(dof_indices[i][j]) > 2.0*libMesh::pi)\n\u2002\u2002\u2002\u2002\u2002\u2002      solution.set(dof_indices[i][j], solution(dof_indices[i][j]) - 2.0*libMesh::pi * floor( solution(dof_indices[i][j]) / (2.0*libMesh::pi) ));\n\nj here could mean more azimuthal angles - very useful\nNow we are trying (quite obviously because it gives a lot of speed up) to do the problem with just two degrees of freedom, the azimuthal [0,2pi) and polar angle [0,pi). However, subtracting modulo pi from the solution is not the same because it is a 180 degree rotation not 360. Any thoughts here?",
                  "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3327649",
                  "updatedAt": "2022-08-04T18:14:28Z",
                  "publishedAt": "2022-08-04T18:10:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I m not sure I understand what you want to do here.\nIn what forms are those angles? Are they in a variable like @mangerij is accessing? Is it an aux or nonlinear?",
                  "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3329560",
                  "updatedAt": "2022-08-05T00:54:21Z",
                  "publishedAt": "2022-08-05T00:54:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Hi Guillaume,\n\nThey are the non-linear variables (spherical coordinates) and it is vital\nto have them wrapped back appropriately to [0,2 Pi) (azimuth) and a little\nmore complicated wrapping for the polar angle to [0,Pi].\n\u2026\n-Olle\nOn Thu, Aug 4, 2022 at 7:54 PM Guillaume Giudicelli < ***@***.***> wrote:\n I m not sure I understand what you want to do here.\n In what forms are those angles? Are they in a variable like @mangerij\n <https://github.com/mangerij> is accessing? Is it an aux or nonlinear?\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21778 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEF7DXNZTJBAMHAHSHYLVXRQ4PANCNFSM55S7EUVA>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3329823",
                  "updatedAt": "2022-08-05T02:08:34Z",
                  "publishedAt": "2022-08-05T02:08:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so they are the result of a non-linear solve?\nWe typically don't modify those after the solve, though it s totally possible with user objects",
                          "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3330013",
                          "updatedAt": "2022-08-05T03:01:01Z",
                          "publishedAt": "2022-08-05T03:01:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Yes, they are the result of a non-linear solve. Ideally (just like with the\nrenormalization), one would like to do the wrapping at each step that\nmodifies the angles. The problem is that when the polar angle is close to 0\nor Pi, there can be divergencies and/or discontinuities that makes the\nsolution diverge or crash.\n\u2026\nOn Thu, Aug 4, 2022 at 10:01 PM Guillaume Giudicelli < ***@***.***> wrote:\n so they are the result of a non-linear solve?\n We typically don't modify those after the solve, though it s totally\n possible with user objects\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21778 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEFZKSRFJT3MGOFAWMNLVXR7XPANCNFSM55S7EUVA>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3333604",
                  "updatedAt": "2022-08-05T13:21:07Z",
                  "publishedAt": "2022-08-05T13:21:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would go the user object route. You may execute user objects very often, as often as every linear iteration, so that can be helpful in the solve if the normalization is constantly needed",
                          "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3338106",
                          "updatedAt": "2022-08-06T05:01:40Z",
                          "publishedAt": "2022-08-06T05:01:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Another thing you can try is leveraging the Bounds system to keep the nonlinear variable in the desired range. This could hinder the convergence of the solver but it might be worth a try\nhttps://mooseframework.inl.gov/source/auxkernels/ConstantBoundsAux.html",
                          "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3341821",
                          "updatedAt": "2022-08-07T04:15:56Z",
                          "publishedAt": "2022-08-07T04:15:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "mangerij"
                  },
                  "bodyText": "Hi,\nI tried the Bounds and Damper systems and the solver crapped out at some point. At this moment, the wrapping is successfully done in a UO with\nazimuthal:\n solution.set(dof_indices[i][j], solution(dof_indices[i][j]) - 2.0*libMesh::pi * floor( solution(dof_indices[i][j]) / (2.0*libMesh::pi) ));\npolar:\n            if (floor( solution(dof_indices[i][j]) / (libMesh::pi) ) >= 1.0)\n            {\n              std::cout << \"Found dof above polar angle limit, wrapping...\" << std::endl;\n              solution.set(dof_indices[i][j], 2.0*libMesh::pi - solution(dof_indices[i][j]) );\n            }\n            else if (floor( solution(dof_indices[i][j]) / (libMesh::pi) ) <= -1.0)\n            {\n              std::cout << \"Found dof below polar angle limit, wrapping...\" << std::endl;\n              solution.set(dof_indices[i][j], -1.0*solution(dof_indices[i][j]) );\n            }\n\nbut now we think we have something else unrelated that is problematic with our sph coord formulation. But thanks for the comments!",
                  "url": "https://github.com/idaholab/moose/discussions/21778#discussioncomment-3344045",
                  "updatedAt": "2022-08-07T16:38:30Z",
                  "publishedAt": "2022-08-07T16:38:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}