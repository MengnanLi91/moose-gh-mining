{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wMi0wN1QxOToxNTo0NC0wNjowMM4ALbO6"
    },
    "edges": [
      {
        "node": {
          "title": "FV Vector Auxvars",
          "author": {
            "login": "joe61vette"
          },
          "bodyText": "Hello:\nI am trying to add a vector auxvar to an input file for a FV fluid problem.  The input is:\n[AuxVariables]\n[porosity]\norder = CONSTANT\nfamily = MONOMIAL\nfv = true\ncomponents = 3\ninitial_condition = '1.0 1.0 1.0'\n[]\n[]\nThis fails with the message:\n*** ERROR ***\nError creating ArrayMooseVariable name with base name porosity\nIf I set fv to false, it works fine.  Am I doing something wrong?  If not, should I just go ahead and use it as an FEM auxvar as it is constant in time.\nThanks,\nJoe Kelly",
          "url": "https://github.com/idaholab/moose/discussions/16947",
          "updatedAt": "2023-06-27T14:59:16Z",
          "publishedAt": "2021-02-10T22:06:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Joe\nI would recommend using a regular FV variable for porosity, as a single component should suffice. ArrayVariable support is increasing in FV, but is not ready yet. You could also specify 3 auxVariables to represent each component, as we do with u, v, w for the velocity variable in most of the tests in modules/navier_stokes/test/tests/finite_volume\nFE (aux)variables, and FE array variables currently cannot be coupled to FV problems. This is also planned to be supported in the future.\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/16947#discussioncomment-358101",
                  "updatedAt": "2023-06-27T14:59:16Z",
                  "publishedAt": "2021-02-10T22:21:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Thanks Guillaume:\nFor my application, I will have anisotropic porosity.  As I am just beginning the work on this, I can use one auxvar for now.  Thanks again for the help.\nJoe",
                          "url": "https://github.com/idaholab/moose/discussions/16947#discussioncomment-358115",
                          "updatedAt": "2023-06-27T14:59:36Z",
                          "publishedAt": "2021-02-10T22:24:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok we will make sure to support this.\nIn the 3 separate auxVariables approach, most (but likely not all, I will have to check the equations) kernels will be fine with accepting the relevant porosity component. In the kernel definition:\n[kernel_name_x_component]\ntype = PINSFVSomething\nporosity = porosity_x\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/16947#discussioncomment-358144",
                          "updatedAt": "2023-06-27T14:59:36Z",
                          "publishedAt": "2021-02-10T22:33:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "run tests spec file",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "What's the difference between the -i and --spec-file flags for run_tests? They both mention running a specific test spec file, but I can't get the -i switch to do anything.",
          "url": "https://github.com/idaholab/moose/discussions/16926",
          "updatedAt": "2022-05-31T14:51:02Z",
          "publishedAt": "2021-02-08T18:28:55Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "-i sets the input file name (defaults to \"tests\"), \n  \n    \n      moose/python/TestHarness/TestHarness.py\n    \n    \n         Line 932\n      in\n      25b1192\n    \n  \n  \n    \n\n        \n          \n           if opts.pbs and not opts.input_file_name: \n        \n    \n  \n\n\n--spec-file seems to be for setting up the search directory or defining a specific file to execute. \n  \n    \n      moose/python/TestHarness/TestHarness.py\n    \n    \n         Line 222\n      in\n      25b1192\n    \n  \n  \n    \n\n        \n          \n           if self.options.spec_file and os.path.isdir(self.options.spec_file):",
                  "url": "https://github.com/idaholab/moose/discussions/16926#discussioncomment-351427",
                  "updatedAt": "2022-05-31T14:51:02Z",
                  "publishedAt": "2021-02-08T23:27:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Ah, I see now. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/16926#discussioncomment-351622",
                          "updatedAt": "2022-05-31T14:51:04Z",
                          "publishedAt": "2021-02-09T01:28:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "So if for some reason I called my tests files mytests, I would run ./run_tests -i mytests, but if I were to run a specific set of tests in a file it would be something like ./run_tests tests/kernel/simple_diffusion/tests.\nI had thought it was the opposite because -i for a moose executable means \"run this specific input file\".",
                          "url": "https://github.com/idaholab/moose/discussions/16926#discussioncomment-351624",
                          "updatedAt": "2022-05-31T14:51:04Z",
                          "publishedAt": "2021-02-09T01:31:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "These are some terrible names, but you are one of only a few that have ever used a different tests file name.",
                          "url": "https://github.com/idaholab/moose/discussions/16926#discussioncomment-355549",
                          "updatedAt": "2022-05-31T14:51:04Z",
                          "publishedAt": "2021-02-10T06:45:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Ha, no, that was just a hypothetical to help me understand.",
                          "url": "https://github.com/idaholab/moose/discussions/16926#discussioncomment-356740",
                          "updatedAt": "2023-02-17T05:25:37Z",
                          "publishedAt": "2021-02-10T14:32:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question on the 'default' console output by MOOSE",
          "author": {
            "login": "matthiasneuner"
          },
          "bodyText": "Dear Moose-users,\nI am currently setting up a Singularity containerized version of MOOSE (and my custom App) for an easy deployment on a HPC system.\nHowever, what I observe is that i obtain a different console output on the HPC compared to my local workstation.\nIn particular, on the HPC system I get performance timing messages on individual steps:\nBuilding mesh ............                                                                 [ 13.78 s]  <---- only on HPC\nInitializing equation system ....                                                          [  5.66 s]  <---- only on HPC\n\nFramework Information:\nMOOSE Version:           git commit ce49bda782 on 2020-11-06\nLibMesh Version:         4f3fa5a6a2104ab8784a6519677589738b9aef6f\nPETSc Version:           3.13.3\nSLEPc Version:           3.13.3\nCurrent Time:            Wed Nov 11 09:53:02 2020\nExecutable Timestamp:    Tue Nov 10 20:34:05 2020\n\nParallelism:\n  Num Processors:          24\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:       3\n  Nodes:                   \n    Total:                 24306\n    Local:                 1150\n  Elems:                   \n    Total:                 3434\n    Local:                 146\n  Num Subdomains:          2\n  Num Partitions:          24\n  Partitioner:             metis\n\n\nOutputting exodus   [  1.11 s]  <---- only on HPC\n\nTime Step 3, time = 0.03, dt = 0.01\nComputing initial residual ..                                                              [  3.19 s]  <---- only on HPC\nUpdating displaced mesh                                                                    [  1.82 s]  <---- only on HPC\n 0 Nonlinear |R| = 4.613567e+03\nUpdating displaced mesh                                                                    [  1.99 s]  <---- only on HPC\n  Linear solve converged due to CONVERGED_RTOL iterations 12\nUpdating displaced mesh                                                                    [  1.76 s]  <---- only on HPC\n 1 Nonlinear |R| = 1.897625e+01\nUpdating displaced mesh                                                                    [  1.83 s]  <---- only on HPC\n  Linear solve converged due to CONVERGED_RTOL iterations 18\nUpdating displaced mesh .                                                                  [  2.05 s]  <---- only on HPC\n 2 Nonlinear |R| = 2.414766e+00\nUpdating displaced mesh                                                                    [  1.87 s]  <---- only on HPC\n  Linear solve converged due to CONVERGED_RTOL iterations 14\nUpdating displaced mesh .                                                                  [  2.84 s]  <---- only on HPC\n 3 Nonlinear |R| = 1.142517e-02\nUpdating displaced mesh .                                                                  [  2.37 s]  <---- only on HPC\n  Linear solve converged due to CONVERGED_RTOL iterations 21\nUpdating displaced mesh                                                                    [  1.65 s]  <---- only on HPC\n 4 Nonlinear |R| = 1.064926e-05\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 4\n Solve Converged!\n\n--\nI don't obtain these messages on my local workstation. What causes these messages? Of course, the execution (including mpiexec etc.) is completely identical. Since I use for both the HPC system and the local workstation the identical singularity container, there cannot be any differences in the compiled binaries.\nBecause the performance on the HPC is considerably inferior compared to my workstation, I am currently investigating all peculiarities.\nThank you in advance!",
          "url": "https://github.com/idaholab/moose/discussions/16150",
          "updatedAt": "2022-09-22T09:05:25Z",
          "publishedAt": "2020-11-11T14:38:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Those message only occur when that code in those sections is taking a long time (1s). So, it is just due to the slower system. If you make the problem larger on your workstation you will likely see them appear as well. This feature was actually added for this reason. When you are running on HPC systems they tend to be a bit slower per processor and you also tend to run much larger problems. As such, we were having people think that a simulation was hung, but in truth it was just taking time. These displays give you some indication that your simulation is working.",
                  "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-127025",
                  "updatedAt": "2022-09-22T09:05:45Z",
                  "publishedAt": "2020-11-11T15:56:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "matthiasneuner"
                          },
                          "bodyText": "Perfect, thank you! Considering the size of the problem, the number of processes and the time taken for computing the residual, something must run terribly wrong.",
                          "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-127033",
                          "updatedAt": "2022-09-22T09:05:49Z",
                          "publishedAt": "2020-11-11T16:02:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @matthiasneuner\nWe are also considering using singularity image on our HPC.\nCould you please share the procedure you used?\nEspecially for binding the custom app.\nBest Regards,\nNicol\u00f2 Grilli\nNational University of Singapore",
                  "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-321308",
                  "updatedAt": "2022-09-22T09:05:50Z",
                  "publishedAt": "2021-01-29T16:53:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "matthiasneuner"
                          },
                          "bodyText": "Hello, you can find singularity recipes for MOOSE (and third party apps) here in my repo:\nhttps://github.com/matthiasneuner/chamois-singularity\nThey are intended for my personal MOOSE app 'chamois' https://github.com/matthiasneuner/chamois  (which itself requires a third party lab (Marmot)), but i think you can adapt the singularity recipe files easily for your own MOOSE apps.\nPlease let me know if you need further support / information.\nBest regards, Matthias",
                          "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-321659",
                          "updatedAt": "2022-09-22T09:05:52Z",
                          "publishedAt": "2021-01-29T18:52:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "Dear @matthiasneuner\nThis is extremely helpful\nI will try with my application and let you know how it goes\nBest Regards\nNicol\u00f2 Grilli\nNational University of Singapore",
                          "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-322771",
                          "updatedAt": "2022-09-22T09:05:55Z",
                          "publishedAt": "2021-01-30T03:40:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "Dear @matthiasneuner and @aeslaughter\nI have successfully generated the singularity image for my MOOSE App and it works.\nThe only problem I found when I transfer the singularity image to our cluster with CentOS\nis the \"Kernel too old\" error.\nThe kernel in the cluster is version 2.6\nbut my Ubuntu laptop generates a singularity image with a newer kernel (version > 3).\nI wonder if you had a similar problem.\nIs there a way out without installing CentOS on a machine I have admin rights?\nBest Regards,\nNicol\u00f2 Grilli\nNational University of Singapore",
                          "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-353902",
                          "updatedAt": "2022-09-22T09:05:54Z",
                          "publishedAt": "2021-02-09T17:48:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "matthiasneuner"
                          },
                          "bodyText": "Hello,\nthe singularity image itself does not contain a Linux kernel, but rather uses the one provided by the host system.\nI never encountered this issue, because our HPC is based on Centos 7 which seems to provide a recent kernel for the Centos 8 and Debian 11 images.\nI think you could try to create a singularity image based on an older distribution (e.g., Centos 7 or 6 instead of Centos 8), but I have no experience with those releases and the required changes in order to build MOOSE. Maybe this helps?\nBest regards,\nMatthias",
                          "url": "https://github.com/idaholab/moose/discussions/16150#discussioncomment-355551",
                          "updatedAt": "2022-09-22T09:05:56Z",
                          "publishedAt": "2021-02-10T06:47:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Block definition based on phase field evolution",
          "author": {
            "login": "Bala-1005"
          },
          "bodyText": "Hello everyone,\nI am trying to couple phase field and tensor mechanics module. One of the phases is a liquid for which I need the tensor mechanics action to be inactive. I thought of making only the solid phase active for tensor mechanics.\nHow can I define blocks in my domain based on the phase-field variable? That is block 0 being the liquid and block 1 being solid.\nThanks,\nBala",
          "url": "https://github.com/idaholab/moose/discussions/16715",
          "updatedAt": "2022-06-11T08:52:31Z",
          "publishedAt": "2021-01-16T23:17:37Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "Currently MOOSE cannot assign/change blocks with a variable value, and might be it is possible in the future, see #16635 @aeslaughter\nFor your application, I might want to solve the tensor mechanics problem on the whole domain, and use a small stiffness (i.e. Young's modulus) for the fluid phase. Below is an example to compute a two phase stress:\n[./global_stress]\ntype = TwoPhaseStressMaterial\nbase_A = solid\nbase_B = liquid\n[../]\n[./switching]\ntype = SwitchingFunctionMaterial\neta = c #  phase field variable for liquid\n[../]\n[./elasticity_tensor]\ntype = ComputeElasticityTensor\nC_ijkl = '385000 0.23'\nfill_method = symmetric_isotropic_E_nu\nbase_name = solid\n[../]\n[./elasticity_tensor_void]\ntype = ComputeElasticityTensor\nC_ijkl = '3.85 0.23'\nfill_method = symmetric_isotropic_E_nu\nbase_name = liquid\n[../]",
                  "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-289086",
                  "updatedAt": "2022-06-11T08:52:32Z",
                  "publishedAt": "2021-01-17T17:20:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Bala-1005"
                          },
                          "bodyText": "Thank you @jiangwen84 . I will try to implement this. I did try to run it using the Khachaturyan's scheme (as in modules/combined/examples/phase_field-mechanics/kks_mechanics_KHS.i). Here the elasticity tensors evolved with phases. But I have convergence issues.\nBala",
                          "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-292389",
                          "updatedAt": "2022-06-11T08:53:36Z",
                          "publishedAt": "2021-01-19T05:10:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Dynamic subdomains based on a variable is something I would like to implement. But, there currently is no plan to perform this work. Perhaps that will change in the future.",
                  "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-291604",
                  "updatedAt": "2022-06-11T08:55:01Z",
                  "publishedAt": "2021-01-18T18:47:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Bala-1005"
                  },
                  "bodyText": "Using a small stiffness for liquid compared to the solid phase seems to cause a lot of convergence issues. Is there any other way to go about it? @aeslaughter @jiangwen84\nThanks,\nBala",
                  "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-354016",
                  "updatedAt": "2022-08-09T23:01:32Z",
                  "publishedAt": "2021-02-09T18:30:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I have a dynamic element subdomain modifier under the works. Not sure when I will have time to merge that into moose, probably the next month or so.\nThere is an existing ActivateElementByCoupled Userobject that you can try.",
                          "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-354735",
                          "updatedAt": "2022-08-09T23:01:34Z",
                          "publishedAt": "2021-02-09T22:18:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bala-1005"
                          },
                          "bodyText": "Thank you @hugary1995 . I just tried it and I got the following error.\n\"A 'ActivateElementsCoupled' is not a registered object.\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\"\nHow do I register this object?\nThanks,\nBala",
                          "url": "https://github.com/idaholab/moose/discussions/16715#discussioncomment-355340",
                          "updatedAt": "2022-08-09T23:01:34Z",
                          "publishedAt": "2021-02-10T03:55:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FEType Error with Adaptivity",
          "author": {
            "login": "henryg9273"
          },
          "bodyText": "Dear all,\nI am trying to solve fluid-chemistry-thermal diffusion PDEs with several blocks in the Navier-Stokes module:\n\nWith the adaptivity block, an error message \" ERROR: Bad FEType.family= 41  \" always comes after the first converged step. Without the adaptivity block, the calculation can continue, but it is hard to converge. Below is the adaptivity block:\n[Adaptivity]\nmarker = errorfrac  #this line when commented, switches off adaptivity\nmax_h_level = 3\n#steps = 2 #this line gets ignored in a transient run\n[./Indicators]\n[./error]\ntype = GradientJumpIndicator\nvariable = Cure\noutputs = none\n[../]\n[./error2]\ntype = GradientJumpIndicator\nvariable = Temperature\noutputs = none\n[../]\n[../]\n[./Markers]\n[./errorfrac]\ntype = ErrorFractionMarker\nrefine = 0.65\ncoarsen = 0.2\nindicator = error\noutputs = none\n[../]\n[../]\n[]\nI'm not sure about whether the types of marker and indicator are supported in the Navier-Stokes package or if it is the cause of the error.\nCan I get some suggestions on this? The full script is attached below.\nThank you in advance!\nYuan\n[GlobalParams]\nsupg = true\npspg = true\nalpha = 1e-1\n[]\n[Mesh]\nfile = FluidNew.inp\nuniform_refine = 0\nconstruct_side_list_from_node_list = true\ndim = 2\n[]\n[AuxVariables]\n[vel_x]\norder = FIRST\n[]\n[vel_y]\norder = FIRST\n[]\n[]\n[AuxKernels]\n[vel_x]\ntype = VectorVariableComponentAux\nvariable = vel_x\nvector_variable = velocity\ncomponent = 'x'\n[]\n[vel_y]\ntype = VectorVariableComponentAux\nvariable = vel_y\nvector_variable = velocity\ncomponent = 'y'\n[]\n[]\n[Variables]\n[./velocity]\norder = FIRST\nfamily = LAGRANGE_VEC\n[../]\n[./Temperature]\norder = FIRST\nfamily = LAGRANGE\ninitial_condition = '20'\n[../]\n[./p]\n[../]\n[./Cure]\norder = FIRST\nfamily = LAGRANGE\ninitial_condition = '0.3'\n[../]\n[]\n[Kernels]\n[./mass]\ntype = INSADMass\nvariable = p\n[../]\n[./momentum_time]\ntype = INSADMomentumTimeDerivative\nvariable = velocity\n[../]\n[./momentum_convection]\ntype = INSADMomentumAdvection\nvariable = velocity\n[../]\n[./momentum_viscous]\ntype = INSADMomentumViscous\nvariable = velocity\n[../]\n[./momentum_pressure]\ntype = INSADMomentumPressure\nvariable = velocity\np = p\nintegrate_p_by_parts = true\n[../]\n[./temperature_advection]\ntype = INSADTemperatureAdvection\nvariable = Temperature\nvelocity = velocity\n[../]\n[./temperature_time]\ntype = ADHeatConductionTimeDerivative\nvariable = Temperature\nspecific_heat = 'cp'\ndensity_name = 'rho'\n[../]\n[./temperature_conduction]\ntype = ADHeatConduction\nvariable = Temperature\nthermal_conductivity = 'k'\n[../]\n[./coupledcurederv]\ntype = CoupledCureTimeDerivative\nvariable = Temperature\nv = Cure\n[../]\n[./curederv]\ntype=TimeDerivative\nvariable = Cure\nlumping=false\n[../]\n[./cureformula]\ntype=DCPDnonDgeneralPT\nvariable = Cure\nv = Temperature #this is the coupled variable\nTtrig = '1'\nTintl = '0'\n#_E = '82179.5'\n#_n = '2.2275'\n#_Kcat = '0'\n_E= '110750'\n_n= '1.7215'\n_m= '0.77'\n_cd= '14.4778'\n_ad= '0.405'\n[../]\n[./cureadvection]\ntype=CureAdvection\nvariable = Cure\nv = velocity\n[../]\n[]\n[BCs]\n[./no_slip]\ntype = VectorFunctionDirichletBC\nvariable = velocity\nboundary = Top\n[../]\n[./no_slip2]\ntype = VectorFunctionDirichletBC\nvariable = velocity\nboundary = Bottom\n[../]\n[./lid]\ntype = VectorFunctionDirichletBC\nvariable = velocity\nboundary = Left\nfunction_x = 'lid_function'\n[../]\n[./outlet_p]\ntype = DirichletBC\nvariable = p\nboundary = Right\nvalue = 0.0\n[../]\n[./Initiation]\ntype = DirichletBC\n#type = NeumannBC\nvariable = Temperature\nboundary = Left\nvalue = '200'\n[../]\n[]\n#length is 5*30mm, Rm is 5mm\n[Materials]\n[./DCPD]\nblock = 0\ntype = GenericConstantMaterial\n    prop_names = 'specific_heat Hr density TConductivity A mu rho cp k'\nprop_values = '1600000 350000000 9.8e-7 0.152 8.55e15 15000000 9.8e-7 1600000 0.152'  # polymer attributes\n\n[../]\n[ins_mat]\ntype = INSADMaterial\nvelocity = velocity\npressure = p\ntransient_term = true\nintegrate_p_by_parts = true\n[]\n[]\n[Functions]\n[./lid_function]\n# We pick a function that is exactly represented in the velocity\n# space so that the Dirichlet conditions are the same regardless\n# of the mesh spacing.\ntype = ParsedFunction\nvalue = '5e-5y(4-y)'\n[../]\n[]\n[Preconditioning]\n[./SMP]\ntype = SMP\nfull = true\nsolve_type = 'NEWTON'\n[../]\n[]\n[Executioner]\ntype = Transient\nnum_steps = 10000\nnl_rel_tol = 1e-5\nend_time=200\nnl_max_its=10\nl_max_its=15\n[./TimeStepper]\ntype = ConstantDT\ndt = 0.01\n# dt = 3.6e14\n[../]\n[./TimeIntegrator]\ntype = ImplicitEuler\n[../]\n#Preconditioned JFNK (default)\n#solve_type = 'PJFNK'\npetsc_options_iname = '-pc_type -pc_hypre_type'\npetsc_options_value = 'hypre boomeramg'\n#petsc_options_iname = '-pc_type'\n#petsc_options_value = 'gamg'\n[]\n[Adaptivity]\nmarker = errorfrac  #this line when commented, switches off adaptivity\nmax_h_level = 3\n#steps = 2 #this line gets ignored in a transient run\n[./Indicators]\n[./error]\ntype = GradientJumpIndicator\nvariable = Cure\noutputs = none\n[../]\n[./error2]\ntype = GradientJumpIndicator\nvariable = Temperature\noutputs = none\n[../]\n[../]\n[./Markers]\n[./errorfrac]\ntype = ErrorFractionMarker\nrefine = 0.65\ncoarsen = 0.2\nindicator = error\noutputs = none\n[../]\n[../]\n[]\n[Controls]\n[./bcs]\ntype = TimePeriod\ndisable_objects = 'BCs::Initiation'\nstart_time = '1.0' #'1718880'  '1317808'\nexecute_on = 'initial timestep_begin'\n[../]\n[]\n[Outputs]\nexecute_on = 'timestep_end' # Limit the output to timestep end (removes initial condition)\n[./console]\ntype = Console\nperf_log = true          # enable performance logging\n[../]\n[./exodus]\ntype = Exodus\nexecute_on = 'initial timestep_end' # output the initial condition for the file\noutput_material_properties = true\nshow_material_properties = 'specific_heat thermal_conductivity'\nfile_base = ./Fluid/DCPD # set the file base (the extension is automatically applied)\ninterval = 10         # only output every 10 step\n[../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/16825",
          "updatedAt": "2022-09-09T19:48:37Z",
          "publishedAt": "2021-01-28T05:40:29Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Can you provide the complete error message please? @lindsayad This is using Navier Stokes, not sure if it is related.",
                  "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-317956",
                  "updatedAt": "2022-11-02T11:13:34Z",
                  "publishedAt": "2021-01-28T15:09:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "henryg9273"
                          },
                          "bodyText": "Thanks for the reply, here is the complete error message:\nERROR: Bad FEType.family= 41\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n0x00007efc6cfd94b9 in waitpid () from /lib64/libc.so.6\nTo enable execution of this file add\nadd-auto-load-safe-path /software/gcc-7.2.0/lib64/libstdc++.so.6.0.24-gdb.py\nline to your configuration file \"/home/ygao73/.gdbinit\".\nTo completely disable this security protection add\nset auto-load safe-path /\nline to your configuration file \"/home/ygao73/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\ninfo \"(gdb)Auto-loading safe path\"\n#0  0x00007efc6cfd94b9 in waitpid () from /lib64/libc.so.6\n#1  0x00007efc6cf56f62 in do_system () from /lib64/libc.so.6\n#2  0x00007efc6cf57311 in system () from /lib64/libc.so.6\n#3  0x00007efc71d1d454 in libMesh::print_trace(std::ostream&) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#4  0x00007efc71d19174 in libMesh::MacroFunctions::report_error(char const*, int, char const*, char const*) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#5  0x00007efc71e092ae in libMesh::FEGenericBase::build(unsigned int, libMesh::FEType const&) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#6  0x00007efc723b6fcd in libMesh::FEGenericBase* libMesh::FEMContext::cached_fe(unsigned int, libMesh::FEType) const () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#7  0x00007efc723c261b in libMesh::FEGenericBase* libMesh::FEMContext::build_new_fe(libMesh::FEGenericBase const*, libMesh::Point const&, double) const () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#8  0x00007efc723c27df in void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#9  0x00007efc72439918 in libMesh::OldSolutionValue<double, &(void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const)>::eval_at_node(libMesh::FEMContext const&, unsigned int, unsigned int, libMesh::Node const&, bool, double) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#10 0x00007efc7243dde7 in libMesh::GenericProjector<libMesh::OldSolutionValue<double, &(void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const)>, libMesh::OldSolutionValue<libMesh::VectorValue, &(void libMesh::FEMContext::point_gradient<libMesh::VectorValue >(unsigned int, libMesh::Point const&, libMesh::VectorValue&, double) const)>, double, libMesh::VectorSetAction >::ProjectVertices::operator()(libMesh::StoredRange<__gnu_cxx::__normal_iterator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > const*, std::vector<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > >, std::allocator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > > > >, std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > > const&) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#11 0x00007efc7243fb0b in void libMesh::Threads::parallel_reduce<libMesh::StoredRange<__gnu_cxx::__normal_iterator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > const*, std::vector<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > >, std::allocator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > > > >, std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > >, libMesh::GenericProjector<libMesh::OldSolutionValue<double, &(void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const)>, libMesh::OldSolutionValue<libMesh::VectorValue, &(void libMesh::FEMContext::point_gradient<libMesh::VectorValue >(unsigned int, libMesh::Point const&, libMesh::VectorValue&, double) const)>, double, libMesh::VectorSetAction >::ProjectVertices>(libMesh::StoredRange<__gnu_cxx::__normal_iterator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > const*, std::vector<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > >, std::allocator<std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > > > >, std::pair<libMesh::Node const*, std::tuple<libMesh::Elem const*, unsigned short, std::set<unsigned int, std::less, std::allocator > > > > const&, libMesh::GenericProjector<libMesh::OldSolutionValue<double, &(void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const)>, libMesh::OldSolutionValue<libMesh::VectorValue, &(void libMesh::FEMContext::point_gradient<libMesh::VectorValue >(unsigned int, libMesh::Point const&, libMesh::VectorValue&, double) const)>, double, libMesh::VectorSetAction >::ProjectVertices&) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#12 0x00007efc72454b50 in libMesh::GenericProjector<libMesh::OldSolutionValue<double, &(void libMesh::FEMContext::point_value(unsigned int, libMesh::Point const&, double&, double) const)>, libMesh::OldSolutionValue<libMesh::VectorValue, &(void libMesh::FEMContext::point_gradient<libMesh::VectorValue >(unsigned int, libMesh::Point const&, libMesh::VectorValue&, double) const)>, double, libMesh::VectorSetAction >::project(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&) () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#13 0x00007efc72415372 in libMesh::System::project_vector(libMesh::NumericVector const&, libMesh::NumericVector&, int) const () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#14 0x00007efc72415f8f in libMesh::System::project_vector(libMesh::NumericVector&, int) const () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#15 0x00007efc723efe03 in libMesh::System::restrict_vectors() () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#16 0x00007efc723ad589 in libMesh::EquationSystems::reinit_solutions() () from /home/ygao73/projects/moose/scripts/../libmesh/installed/lib/libmesh_opt.so.0\n#17 0x00007efc73f507d9 in FEProblemBase::meshChangedHelper(bool) () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#18 0x00007efc73f5123d in FEProblemBase::adaptMesh() () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#19 0x00007efc73a5a603 in Transient::incrementStepOrReject() () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#20 0x00007efc73a5a379 in Transient::execute() () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#21 0x00007efc7429cdf9 in MooseApp::executeExecutioner() () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#22 0x00007efc7429b638 in MooseApp::run() () from /home/ygao73/projects/moose/framework/libmoose-opt.so.0\n#23 0x0000000000402467 in main ()\n[Inferior 1 (process 42867) detached]\n[0] /home/ygao73/projects/moose/scripts/../libmesh/src/fe/fe_base.C, line 321, compiled Jan  5 2021 at 18:07:20\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-317969",
                          "updatedAt": "2023-03-02T05:08:05Z",
                          "publishedAt": "2021-01-28T15:12:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "This looks like potentially a bug with adaptivity with vector variables with subdomain restriction. @henryg9273 if you could pare your input file down to only objects in the MOOSE repository and still reproduce this error message, then I can try to debug this for you.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-318358",
                          "updatedAt": "2023-03-02T05:08:08Z",
                          "publishedAt": "2021-01-28T17:20:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "henryg9273"
                          },
                          "bodyText": "Thank you, Alex, for the quick reply.\nI was using a user-built app that contains N-S package and some user-built kernel. I'm not sure if it is equivalent to what you suggested.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-318530",
                          "updatedAt": "2023-03-02T05:08:08Z",
                          "publishedAt": "2021-01-28T18:03:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Yes I assume the 'cure' objects are you own application's objects. You can either take those out and see whether you can still reproduce the error, or you can grant me access to your application and then I can build your application and run your input file unmodified.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-318668",
                          "updatedAt": "2023-03-02T05:08:08Z",
                          "publishedAt": "2021-01-28T18:59:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "henryg9273"
                          },
                          "bodyText": "Thanks so much, Alex. I have invited you to the repository.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-318863",
                          "updatedAt": "2022-11-02T11:13:34Z",
                          "publishedAt": "2021-01-28T20:22:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It doesn't appear that you included the mesh in your repository. I cannot run your input file without it",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-336579",
                          "updatedAt": "2022-11-02T11:13:34Z",
                          "publishedAt": "2021-02-03T23:56:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "henryg9273"
                          },
                          "bodyText": "Sorry, I have just uploaded.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-336612",
                          "updatedAt": "2022-11-02T11:13:34Z",
                          "publishedAt": "2021-02-04T00:20:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Ok you must be using a really old version of MOOSE because I get this error:\n*** ERROR ***\nThe requested AD material property mu is declared as a regular material property. Either retrieve it as a regular material property with getMaterialProperty or declare it as an AD property wtih declareADProperty\n\nThis is an error application developers/analysts should have addressed almost a year ago. If I run into more of this, I won't be able to debug your issue at all",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-353978",
                          "updatedAt": "2022-11-02T11:13:34Z",
                          "publishedAt": "2021-02-09T18:15:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Ok after updating your input file, I do not get the error you reported. It appears that you were using quite an old version of MOOSE, and it's possible that the error you saw has since been fixed. Please update your MOOSE and then make sure you update libmesh as well.",
                          "url": "https://github.com/idaholab/moose/discussions/16825#discussioncomment-354003",
                          "updatedAt": "2022-11-02T11:13:39Z",
                          "publishedAt": "2021-02-09T18:23:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Importing a random field into Moose",
          "author": {
            "login": "TheGreatCid"
          },
          "bodyText": "Hi all,\nI have a file external to moose that contains stochastic field data for the Young's Modulus. The file contains data for each node on the grid, as well as XY coordinates for each node. Additionally, I have the .msh file used to create this field.\nThe domain represents a hollow quarter circle.\nI like to import this data into moose and then impose it onto a more refined mesh than one used to generate the field.\nMy first thought was to use the function PiecewiseMultilinear, that but that seems to only support square domains.\nIf possible, what would be the best way to import this data into moose so that I can utilize the random field for an FEA simulation?",
          "url": "https://github.com/idaholab/moose/discussions/16935",
          "updatedAt": "2022-08-29T23:37:45Z",
          "publishedAt": "2021-02-09T16:37:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "Are you able to convert this data file into an exodus file? If so, you can use SolutionUserObject to load the data and create a function in type of SolutionFunction from it. You might not have to use exodus. I am not sure if gmsh has a format for storing nodal solutions and if libMesh can load it. But SolutionFunction sounds to me the must.",
                  "url": "https://github.com/idaholab/moose/discussions/16935#discussioncomment-353698",
                  "updatedAt": "2022-08-29T23:37:48Z",
                  "publishedAt": "2021-02-09T16:47:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "To my knowledge, I don't have a way to convert to exodus as my work has been done in MATLAB. I was hoping to use moose to convert to exodus. I do not believe gmsh can store nodal data.\nWould you have a suggestion for how to convert to exodus?",
                          "url": "https://github.com/idaholab/moose/discussions/16935#discussioncomment-353760",
                          "updatedAt": "2022-08-29T23:38:01Z",
                          "publishedAt": "2021-02-09T17:00:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "Maybe Python has some nice interface to exodus to allow us create a file from msh file. Or you can let moose to load msh file and create a nodal aux kernel to load the data and assign them to nodes?",
                          "url": "https://github.com/idaholab/moose/discussions/16935#discussioncomment-353949",
                          "updatedAt": "2022-08-29T23:38:07Z",
                          "publishedAt": "2021-02-09T18:06:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "Thanks for your replies\nI trying to create a nodal aux kernel may be the best shot. I will give that a try .\nThanks for the advice",
                          "url": "https://github.com/idaholab/moose/discussions/16935#discussioncomment-353983",
                          "updatedAt": "2022-08-29T23:38:07Z",
                          "publishedAt": "2021-02-09T18:17:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "blackbear submodule not linking against conda std library",
          "author": {
            "login": "lynnmunday"
          },
          "bodyText": "I'm getting a build error on my Mac laptop when I try to build blackbear with the neml submodule.  I can build blackbear without neml and I can build neml by itself but I keep getting the below error when I try to build blackbear with the neml submodule.  I can build them together on sawtooth so it must be something in my environment but I'm not sure what.  I've deleted my moose repo, blackbear repo and re-cloned them.  I'm using the standard moose conda environment using the instructions from the moose conda install help page. I brew uninstalled everything to make sure that wasn't causing the conflict and it wasn't because I still get the neml build error.  I think there is something in the blackbear/contrib/neml.mk that is causing this but I can't figure out what.  Has anyone seen this error and know how to fix it?\nIn file included from /Users/mundlb/projects/blackbear/contrib/neml/src/Block.h:3:\nIn file included from /Users/mundlb/projects/blackbear/contrib/neml/src/models.h:4:\nIn file included from /Users/mundlb/projects/blackbear/contrib/neml/src/objects.h:6:\nIn file included from /Users/mundlb/miniconda3/envs/moose-noLibmesh/bin/../include/c++/v1/vector:276:\n/Users/mundlb/miniconda3/envs/moose-noLibmesh/bin/../include/c++/v1/__bit_reference:172:38: error: no member named 'min' in namespace 'std::__1'\n        __storage_type __dn = _VSTD::min(__clz_f, __n);",
          "url": "https://github.com/idaholab/moose/discussions/16867",
          "updatedAt": "2022-06-02T15:00:48Z",
          "publishedAt": "2021-02-03T03:30:50Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Best match I've found so far is: https://trac.macports.org/ticket/60962",
                  "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-335871",
                  "updatedAt": "2022-06-02T15:00:49Z",
                  "publishedAt": "2021-02-03T19:53:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It would be good to check the include lines to make sure at least the C++ includes are not different for your different builds (e.g. neml alone, blackbear alone, blackbear + neml)",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-335881",
                          "updatedAt": "2022-06-02T15:00:50Z",
                          "publishedAt": "2021-02-03T19:56:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I don't see any differences with the includes other than the extra neml dependencies. I followed the instructions at the link you posted but that doesn't solve the problem either.  I'm still picking up the wrong std libraries.  The comments in the answer to this on stackoverflow https://stackoverflow.com/questions/29293394/where-does-the-1-symbol-come-from-when-using-llvms-libc#:~:text=The%20LLVM%20C%2B%2B%20runtime%20(%20libc,(like%20std%3A%3Astring%20).   explain the problem but I don't see what the solution to it is.  It looks like the neml header file objects.h is #including <algorithm> and my interpretation of the error I posted, it is trying to link to the libc++ version that has the __1 decoration, std::__1::min, but it cannot find this function in algorithms version that I have in my conda environment which is the libstdc++ version that is std::min function.",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-336342",
                          "updatedAt": "2022-06-02T15:00:52Z",
                          "publishedAt": "2021-02-03T22:49:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "can you paste your include directories?",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-336480",
                          "updatedAt": "2022-06-02T15:00:55Z",
                          "publishedAt": "2021-02-03T23:18:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "This is my make -n output for one neml source file:\necho \"Compiling C++ (in \"opt\" mode) \"/Users/mundlb/projects/blackbear/contrib/neml/src/nemlerror.cxx\"...\"\n/Users/mundlb/miniconda3/envs/moose/libmesh/contrib/bin/libtool  --tag=CXX  --mode=compile --quiet \nmpicxx -DNDEBUG -DADFPARSER_INCLUDES=\"\"-I/Users/mundlb/projects/moose/framework/include/utils -I/Users/mundlb/projects/moose/framework/include/base -I/Users/mundlb/miniconda3/envs/moose/libmesh/include\"\" -DHEAT_CONDUCTION_ENABLED -DMISC_ENABLED -DTENSOR_MECHANICS_ENABLED -DSTOCHASTIC_TOOLS_ENABLED -DXFEM_ENABLED -DCONTACT_ENABLED -DMODULE_LOADER_ENABLED -DNEML_ENABLED -DNEML_STRAIN_RATE_LIMIT=1e10 -DBLACKBEAR_ENABLED -O2 -felide-constructors -Qunused-arguments -Wunused-parameter -Wunused -fopenmp -DHAVE_GPERFTOOLS -I/Users/mundlb/code/gperftools/installed/include  -DMETHOD=opt -Werror=return-type -Werror=reorder -Woverlength-strings -I/Users/mundlb/projects/blackbear/contrib/neml/rapidxml -I/Users/mundlb/projects/blackbear/contrib/neml_extra_include  -I/Users/mundlb/projects/moose/framework/build/header_symlinks  -I/Users/mundlb/projects/moose/framework/contrib/boost/include  -I/Users/mundlb/projects/moose/framework/contrib/json/include  -I/Users/mundlb/projects/moose/framework/contrib/json/include/nlohmann  -I/Users/mundlb/projects/moose/framework/contrib/mtwist/include  -I/Users/mundlb/projects/moose/framework/contrib/pcre/include  -I/Users/mundlb/projects/moose/framework/contrib/pugixml/include  -I/Users/mundlb/projects/moose/framework/contrib/tinydir/include  -I\"/Users/mundlb/projects/moose/framework/contrib/gtest\"  -I\"/Users/mundlb/projects/moose/framework/contrib/hit\" -I/Users/mundlb/miniconda3/envs/moose/libmesh/include -I/Users/mundlb/miniconda3/envs/moose/libmesh-vtk/include/vtk-6.3 -D_THREAD_SAFE -pthread -I/Users/mundlb/miniconda3/envs/moose/include -I/Users/mundlb/miniconda3/envs/moose//include -I/Users/mundlb/projects/moose/modules/heat_conduction/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/misc/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/tensor_mechanics/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/stochastic_tools/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/xfem/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/contact/build/header_symlinks  -I/Users/mundlb/projects/moose/modules/module_loader/build/header_symlinks  -I/Users/mundlb/projects/blackbear/build/header_symlinks -I/Users/mundlb/projects/blackbear/contrib/neml/src -I/Users/mundlb/projects/blackbear/contrib/neml/rapidxml -I/Users/mundlb/projects/blackbear/contrib/neml_extra_include -I/Users/mundlb/miniconda3/envs/moose/libmesh/include -I/Users/mundlb/miniconda3/envs/moose/libmesh-vtk/include/vtk-6.3 -D_THREAD_SAFE -pthread -I/Users/mundlb/miniconda3/envs/moose/include -I/Users/mundlb/miniconda3/envs/moose//include -w -DHAVE_CONFIG_H -MMD -MP -MF /Users/mundlb/projects/blackbear/contrib/neml/src/nemlerror.x86_64-apple-darwin13.4.0.opt.lo.d -MT /Users/mundlb/projects/blackbear/contrib/neml/src/nemlerror.x86_64-apple-darwin13.4.0.opt.lo -c /Users/mundlb/projects/blackbear/contrib/neml/src/nemlerror.cxx -o /Users/mundlb/projects/blackbear/contrib/neml/src/nemlerror.x86_64-apple-darwin13.4.0.opt.lo\necho \"Compiling C++ (in \"opt\" mode) \"/Users/mundlb/projects/blackbear/contrib/neml/src/surfaces.cxx\"...\"",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-338258",
                          "updatedAt": "2021-02-04T15:02:31Z",
                          "publishedAt": "2021-02-04T15:02:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "If I paste in that command and add -H after mpicxx I get the following:  (this is only a little bit of it) It is weird because it mostly includes the std library from miniconda but then also includes the std lib from CommandLineTools for instance in these two for string.h\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/string.h\n......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h\n. /Users/mundlb/projects/blackbear/contrib/neml/src/visco_flow.h\n.. /Users/mundlb/projects/blackbear/contrib/neml/src/objects.h\n... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/string\n.... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n.... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/string_view\n..... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n..... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__string\n...... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n...... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/algorithm\n....... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n....... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/initializer_list\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/cstddef\n......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/version\n.......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n......... /Users/mundlb/miniconda3/envs/moose/lib/clang/11.0.0/include/stddef.h\n.......... /Users/mundlb/miniconda3/envs/moose/lib/clang/11.0.0/include/__stddef_max_align_t.h\n......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__nullptr\n.......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n....... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/type_traits\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n....... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/cstring\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/string.h\n......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h\n........... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h\n............ /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_symbol_aliasing.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_posix_availability.h\n............ /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/_types.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h\n............ /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/Availability.h\n........... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternal.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h\n........... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h\n............ /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h\n.............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h\n............. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h\n.......... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h\n........... /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h\n........... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/string.h\n....... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/utility\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__tuple\n......... /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/__config\n........ /Users/mundlb/miniconda3/envs/moose/bin/../include/c++/v1/cstdint",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-339095",
                          "updatedAt": "2021-02-04T19:48:03Z",
                          "publishedAt": "2021-02-04T19:47:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I assume that you are building within your conda environment. Are you using your own built libmesh or libmesh from conda? I am curious what happens if you try to make from blackbear after you apply this patch to blackbear:\ndiff --git a/contrib/neml.mk b/contrib/neml.mk\nindex 10facd5..8b134ae 100644\n--- a/contrib/neml.mk\n+++ b/contrib/neml.mk\n@@ -21,7 +21,7 @@ $(neml_LIB): $(neml_objects)\n $(NEML_DIR)/src/%.$(obj-suffix) : $(NEML_DIR)/src/%.cxx\n \t@echo \"Compiling C++ (in \"$(METHOD)\" mode) \"$<\"...\"\n \t@$(libmesh_LIBTOOL) --tag=CXX $(LIBTOOLFLAGS) --mode=compile --quiet \\\n-\t  $(libmesh_CXX) $(libmesh_CPPFLAGS) $(ADDITIONAL_CPPFLAGS) $(libmesh_CXXFLAGS) $(neml_dep_includes) $(app_INCLUDES) $(libmesh_INCLUDE) -w -DHAVE_CONFIG_H -MMD -MP -MF $@.d -MT $@ -c $< -o $@\n+\t  $(libmesh_CXX) $(libmesh_CPPFLAGS) $(ADDITIONAL_CPPFLAGS) $(CXXFLAGS) $(libmesh_CXXFLAGS) $(neml_dep_includes) $(app_INCLUDES) $(libmesh_INCLUDE) -w -DHAVE_CONFIG_H -MMD -MP -MF $@.d -MT $@ -c $< -o $@\n \n ADDITIONAL_INCLUDES  += -I$(neml_includes) $(neml_dep_includes)\n ADDITIONAL_LIBS      += -L$(NEML_DIR) -lneml-$(METHOD)",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-343472",
                          "updatedAt": "2022-11-05T12:25:22Z",
                          "publishedAt": "2021-02-06T02:01:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "This is just adding $(CXXFLAGS) into your compile line",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-343474",
                          "updatedAt": "2022-11-05T12:25:26Z",
                          "publishedAt": "2021-02-06T02:01:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So I just activated a conda moose-libmesh environment and started compiling and got this error:\nIn file included from /Users/lindad/projects/moose/framework/contrib/pcre/src/pcre_stringpiece.cc:37:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/iostream:37:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/ios:215:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/__locale:14:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/string:506:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/string_view:175:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/__string:57:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/algorithm:644:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/functional:512:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/Block.h:3:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/models.h:4:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/objects.h:5:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/sstream:173:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/ostream:139:\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:141:5: error: unknown type name 'locale'\n    locale pubimbue(const locale& __loc) {\n    ^\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:141:27: error: unknown type name 'locale'\n    locale pubimbue(const locale& __loc) {\n                          ^\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:149:5: error: unknown type name 'locale'\n    locale getloc() const { return __loc_; }\n    ^\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:153:48: error: unknown type name 'streamsize'\n    basic_streambuf* pubsetbuf(char_type* __s, streamsize __n)\n                                               ^\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:157:41: error: incomplete type 'std::__1::ios_base' named in nested name specifier\n    pos_type pubseekoff(off_type __off, ios_base::seekdir __way,\n                                        ^~~~~~~~~~\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/iosfwd:103:24: note: forward declaration of 'std::__1::ios_base'\nclass _LIBCPP_TYPE_VIS ios_base;\n\nand later on, one that looks a lot like yours!\nIn file included from /Users/lindad/projects/moose/framework/contrib/pcre/src/pcrecpp.cc:43:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/string:506:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/string_view:175:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/__string:57:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/algorithm:644:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/functional:512:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/Block.h:3:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/models.h:4:\nIn file included from /Users/lindad/projects/blackbear/contrib/neml/src/objects.h:5:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/sstream:173:\nIn file included from /Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/ostream:139:\n/Users/lindad/miniconda3/envs/moose-libmesh/bin/../include/c++/v1/streambuf:412:45: error: no member named 'min' in namespace 'std::__1'\n            const streamsize __len = _VSTD::min(static_cast<streamsize>(INT_MAX),",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-343557",
                          "updatedAt": "2022-11-05T12:25:27Z",
                          "publishedAt": "2021-02-06T03:33:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The stack trace is saying it all: line 512 of the c++ header functional is including Block.h which just so happens to be a neml header. Obviously the STL headers did not mean to include a header from NEML. This is why projects like libmesh make their includes like so: #include \"libmesh/foo.h\" to avoid any naming clashes. So I would tell the maintainers of NEML to rename their header or change how NEML headers are meant to be included, e.g. #include \"neml/Block.h\". (Note that MOOSE is guilty of not guarding against name clashes as well)",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-343590",
                          "updatedAt": "2022-11-05T12:25:33Z",
                          "publishedAt": "2021-02-06T03:57:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The thing I have to figure out is why NEML doesn't itself have issues when it's built standalone. So the fault may very well not be with NEML but instead with the flags we're using when compiling blackbear with NEML present.",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-345467",
                          "updatedAt": "2022-11-05T12:25:33Z",
                          "publishedAt": "2021-02-06T20:42:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Ok I think I've figured this out. Here is a test program:\n#include <iostream>\n#include <some_crazy_name_bar>\nusing namespace std;\n\nint main()\n{\n  bar();\n  cout << \"Hello World!\\nI'm a C++ program\\n\";\n}\nand here is the directory containing it:\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ ls\na.out               hello.cpp           iostream            some_crazy_name_bar\n\niostream is some dummy file that that does not contain a definition of std::cout. some_crazy_name_bar is a file that defines the method void bar() {}. Here are some different compilation attempts:\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ clang++ -I. hello.cpp \nhello.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'\nusing namespace std;\n                ^\nhello.cpp:8:2: error: use of undeclared identifier 'cout'\n        cout << \"Hello World!\\nI'm a C++ program\\n\";\n        ^\n1 warning and 1 error generated.\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ clang++ hello.cpp\nhello.cpp:4:10: error: 'some_crazy_name_bar' file not found with <angled> include; use \"quotes\" instead\n#include <some_crazy_name_bar>\n         ^~~~~~~~~~~~~~~~~~~~~\n         \"some_crazy_name_bar\"\n1 error generated.\n\nAnd then following clang's suggestion to use quotes for including some_crazy_name_bar, the program compiles fine:\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ clang++ hello.cpp\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ ./a.out\nHello World!\nI'm a C++ program\n\nAnother compilation method that works fine:\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ clang++ -iquote. hello.cpp\n(moose-libmesh) lindad@localhost:~/programming/cpp/test-includes(master)$ ./a.out\nHello World!\nI'm a C++ program\n\nSo the key takeaways:\n\n-I<dir> adds <dir> to the search path for both quoted and angle-bracket included files. This is what destroys blackbears compilation of NEML because it does: -I${BLACKBEAR_DIR}/contrib/neml/src and consequently all of the headers in there become candidates for both quoted and angle-bracket includes. This is why when compiling blackbear we pick up the block.h header as a system header. When NEML is building itself it does not -I${BLACKBEAR_DIR}/contrib/neml/src and so it does fine\n-iquote<dir> adds <dir> only to the search path for quoted includes. This is what we are going to want to do for sustainable builds in MOOSE and Blacbear. I actually have to check and see whether this is an option for both gcc and clang. All the research I've done here for this discussion has been with clang.\n\nI am honestly kind of shocked we haven't run into an issue like this before",
                  "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-348226",
                  "updatedAt": "2022-06-02T15:01:14Z",
                  "publishedAt": "2021-02-08T04:56:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "THANKS @lindsayad   This should be on stack exchange.  No one had an explanation like this.\nI've replaced -I with -iquote in blackbear/contrib/neml.mk and it is building fine.\nIs this the fix you would recommend?  I can push it to a pr and see if it passes all of the tests, those should be testing with both clang and gcc.  Or should I change all of the headers in NEML to something like \"src/block.h\" ?",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350390",
                          "updatedAt": "2022-06-02T15:02:11Z",
                          "publishedAt": "2021-02-08T17:53:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "You're welcome! I realized that my \"Another compilation method that works fine\" didn't actually show the -iquote compilation example. I've updated the answer to have it.",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350635",
                          "updatedAt": "2022-06-02T15:02:28Z",
                          "publishedAt": "2021-02-08T18:33:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I'm going to make an issue for this in blackbear and update the neml.mk file with the -I replaced with -iquote .  I tried this on sawtooth which loads the gcc compilers and it still builds.",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350743",
                          "updatedAt": "2022-06-02T15:02:48Z",
                          "publishedAt": "2021-02-08T19:22:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "That's great to hear. No I think the -I -> -iquote fix is sufficient. src/foo looks kind of ugly and the src/ prefix is also pretty generic so you could still have name clashes. And yea I checked that gcc accepts -iquote as well, so I definitely think this is a great fix and something we will want to do more across MOOSE builds",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350862",
                          "updatedAt": "2022-11-05T12:25:33Z",
                          "publishedAt": "2021-02-08T20:03:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "D'Uh, Lynn, you're encountering this because you're using a case\ninsensitive filesystem. My fs is case sensitive (as I'm used to that from\nLinux), so I was unable to reproduce this issue.\n\u2026\nOn Mon, Feb 8, 2021 at 12:22 PM Lynn Munday ***@***.***> wrote:\n I'm going to make an issue for this in blackbear and update the neml.mk\n file with the -I replaced with -iquote .\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#16867 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AABRMPUR5MIE52CNGUDUAG3S6A2X3ANCNFSM4XACPMCQ>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350772",
                  "updatedAt": "2022-06-10T20:20:33Z",
                  "publishedAt": "2021-02-08T19:34:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I know case insensitive... smh. But I was also thinking about that and was wondering why there was no warning about non-portable paths since the system header is Block.h but the NEML file is block.h. I checked and there were no warnings in my blackbear compilation before the hundreds of errors. I do get a warning in my toy example if I change iostream to Iostream",
                          "url": "https://github.com/idaholab/moose/discussions/16867#discussioncomment-350809",
                          "updatedAt": "2022-06-10T20:20:33Z",
                          "publishedAt": "2021-02-08T19:45:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about example input file in combined module",
          "author": {
            "login": "Bala-1005"
          },
          "bodyText": "Hello everyone,\nI am trying to understand the example file given in the directory \"/moose/modules/combined/examples/phase_field-mechanics/kks_mechanics_VTS.i\".\nI have a question about how the elasticity tensor is constructed. Does the C_ijkl take values and multiply them with 10^9 to convert it into GPa scale or does it take values as it is?\nThanks,\nBala",
          "url": "https://github.com/idaholab/moose/discussions/16909",
          "updatedAt": "2022-11-01T17:59:28Z",
          "publishedAt": "2021-02-06T22:53:53Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jessecarterMOOSE"
                  },
                  "bodyText": "Looks like the values in the input file have already been converted from GPa. The unit conversion is in the referenced paper. Right @laagesen ?",
                  "url": "https://github.com/idaholab/moose/discussions/16909#discussioncomment-345978",
                  "updatedAt": "2022-11-01T17:59:27Z",
                  "publishedAt": "2021-02-07T00:07:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Yes that's right, thanks @jessecarterMOOSE - they are non-dimensionalized by the factor by 2 x 10^9 J/m^3 = 2 GPa (see p.12 of the paper) . So if you multiply the elastic constants in the input file by 2 GPa you will get the numbers in Table 1.",
                          "url": "https://github.com/idaholab/moose/discussions/16909#discussioncomment-349858",
                          "updatedAt": "2022-11-01T17:59:39Z",
                          "publishedAt": "2021-02-08T15:51:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bala-1005"
                          },
                          "bodyText": "Thank you @laagesen and @jessecarterMOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/16909#discussioncomment-350243",
                          "updatedAt": "2022-11-01T17:59:41Z",
                          "publishedAt": "2021-02-08T17:22:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use of PolycrystalVariableAction-created variables in inputfiles",
          "author": {
            "login": "leanderVS"
          },
          "bodyText": "Hi all\nI recently started looking into the possibilities of MOOSE for corrosion modelling using the Phase Field module.\nOne of my very simple ideas would be to adapt the PolycrystalKernelAction. For this I simple assume the electrolyte to be another order parameter within the PolycrystalVariablesAction system, i.e. gr_1/eta_1 refers to the electrolyte. To limit corrosion to the interface, I adapted the GBEvolutionBase.C file, such that L~gr_1 (very simple, but theoretically effective for a first try). So basically I am slightly adapting the available grain_growth_2D_random.i file within the phase field module.\nOn the long term, I would use EBSD input and stitch that input to an electrolyte mesh. For now, however, I am just manually defining two grains and one electrolyte phase (through the FunctionIC system), while still using the abovementioned actions for variable/kernel generation. The thing is, when I try using gr_1 within the inputfile to supply as input for the FunctionIC or GBEvolutionBase.C adaptation, it just doesn't recognize it.\n*** ERROR ***      Variable 'gr_1' requested in initial condition 'eta_electrolyte' does not exist.\nWhich makes me wonder if it is somehow related to the order of the blocks within the inputfile or if you just can't refer to internally/Action-generated variables? Well, I am new, so I might be making a rookie mistake here.\nKind regards\nLeander Van Speybroeck\nGhent University, Belgium",
          "url": "https://github.com/idaholab/moose/discussions/16871",
          "updatedAt": "2022-09-22T07:40:31Z",
          "publishedAt": "2021-02-03T09:23:02Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "SudiptaBiswas"
                  },
                  "bodyText": "The variable name that comes out of the PolycrystalVariableAction are gr0 gr1 .. or eta0 eta1 .. etc., based on the parameter var_name_base. Make sure you are proving the right variable name in your ICs and Materials. To avoid confusion, it might be better to manually add a separate variable in the input file for the electrolyte.",
                  "url": "https://github.com/idaholab/moose/discussions/16871#discussioncomment-342865",
                  "updatedAt": "2022-09-22T07:40:32Z",
                  "publishedAt": "2021-02-05T20:21:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "leanderVS"
                          },
                          "bodyText": "Thank you for your reply. Turns out I just kept mixing up the PolycrystalVariableAction source code. Indeed, the generated variables are called gr0, gr1, gr2 instead of gr_1, gr_2, gr_3. Thanks again for the quick fix!\nMy last resort was indeed to implement the (electrolyte) order parameter separately.",
                          "url": "https://github.com/idaholab/moose/discussions/16871#discussioncomment-348392",
                          "updatedAt": "2022-09-22T07:40:32Z",
                          "publishedAt": "2021-02-08T07:33:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PETSc/libMesh issues",
          "author": {
            "login": "gka80"
          },
          "bodyText": "Hello-\nI'm running into a weird issue when trying to update and rebuild PETSc and libMesh per the instructions specified here: https://mooseframework.inl.gov/getting_started/installation/install_moose.html\nI am able to update and rebuild PETSc and run the tests to completion. However, when I try to update and rebuild libMesh, I get the following error:\nchecking whether we can compile a trivial PETSc program... yes checking for TAO support via PETSc... yes configure: error: *** PETSc with Hypre was not found, but --enable-petsc-hypre-required was specified.\nThe interesting thing though is that PETSc runs the ex19 hypre demo successfully. If I set this requirement to 'no', I get the following error:\nIn file included from /gscratch/stf/gkelley/_sw/inl_moose/_projects/moose/scripts/../libmesh/src/numerics/numeric_vector.C:30: ./include/libmesh/petsc_vector.h:1213:32: error: static assertion failed: PETSc and libMesh integer sizes must match! static_assert(sizeof(PetscInt) == sizeof(numeric_index_type), ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~ make[1]: *** [Makefile:26843: src/numerics/libmesh_opt_la-numeric_vector.lo] Error 1 make[1]: Leaving directory '/gscratch/stf/gkelley/_sw/inl_moose/_projects/moose/libmesh/build' make: *** [Makefile:32014: all-recursive] Error 1\nOther details:\n\nTrying to compile on a compute/HPC cluster. CentOS 7. Will have to log on to give more specifics but will happily provide them.\ngcc: 8.2.1\ncmake 3.11.2. I've used this without issue.\nCompiled/installed mpich 3.3 using the directions specified here: https://mooseframework.inl.gov/getting_started/installation/manual_installation_gcc.html. No issues that I can tell. I've had success following this route before.\n\nAgain, I've had this process work in the past with no issue. The only reason why I'm reinstalling is because it's been awhile since I've used the framework and it's been scrubbed from the cluster.\nAny assistance would be greatly appreciated,\n-Garrett",
          "url": "https://github.com/idaholab/moose/discussions/16913",
          "updatedAt": "2022-06-23T08:46:34Z",
          "publishedAt": "2021-02-07T06:06:14Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "gka80"
                  },
                  "bodyText": "As an update, I went ahead and tried again with a fresh installation this morning. It appears everything went OK. I believe the issue was not unsetting the PETSC_DIR appropriately (may have been a typo on my part).\n-Garrett",
                  "url": "https://github.com/idaholab/moose/discussions/16913#discussioncomment-348022",
                  "updatedAt": "2022-06-23T08:46:35Z",
                  "publishedAt": "2021-02-08T01:15:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}