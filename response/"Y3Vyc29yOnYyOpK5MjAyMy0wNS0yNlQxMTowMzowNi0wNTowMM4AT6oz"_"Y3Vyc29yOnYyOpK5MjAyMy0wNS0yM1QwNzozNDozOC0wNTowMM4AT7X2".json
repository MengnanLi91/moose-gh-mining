{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNS0yM1QwNzozNDozOC0wNTowMM4AT7X2"
    },
    "edges": [
      {
        "node": {
          "title": "Curved mesh generation with second order elements",
          "author": {
            "login": "lindsayad"
          },
          "bodyText": "Do we have any mesh generators that create curved meshes (either 2D or 3D) with second order elements?",
          "url": "https://github.com/idaholab/moose/discussions/24484",
          "updatedAt": "2023-05-26T15:13:09Z",
          "publishedAt": "2023-05-25T18:59:58Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "oanaoana"
                  },
                  "bodyText": "The TransfiniteMeshGenerator can do any curved edge, but I think is only Q1 for now. It can be changed to be Q2.",
                  "url": "https://github.com/idaholab/moose/discussions/24484#discussioncomment-6004495",
                  "updatedAt": "2023-05-25T19:06:32Z",
                  "publishedAt": "2023-05-25T19:06:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Not a mesh generator but Cubit can get us that kind of meshes iirc",
                  "url": "https://github.com/idaholab/moose/discussions/24484#discussioncomment-6004508",
                  "updatedAt": "2023-05-25T19:08:44Z",
                  "publishedAt": "2023-05-25T19:08:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "roystgnr"
                  },
                  "bodyText": "FileMeshGenerator, for curved inputs.  libMesh build_sphere() will do second-order interpolation on curved surfaces, and it looks like SphereMeshGenerator is calling that.  MoveNodeGenerator ought to get you curves if you're painstaking about it, or ParsedNodeTransformGenerator with more ease.",
                  "url": "https://github.com/idaholab/moose/discussions/24484#discussioncomment-6004510",
                  "updatedAt": "2023-05-25T19:09:05Z",
                  "publishedAt": "2023-05-25T19:09:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aprilnovak"
                  },
                  "bodyText": "We have some curved mesh generators in Cardinal, because Nek uses second order meshes. These are currently tailored to pin bundles by moving existing nodes onto a curved cylindrical surface. Despite the name, this is agnostic of anything special in Nek, we just use it often to make Nek meshes: https://cardinal.cels.anl.gov/source/meshgenerators/NekMeshGenerator.html\nCould potentially move that into the reactor module if it'd be of interest.",
                  "url": "https://github.com/idaholab/moose/discussions/24484#discussioncomment-6006608",
                  "updatedAt": "2023-05-26T00:40:27Z",
                  "publishedAt": "2023-05-26T00:40:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I think there definitely would be interest in getting more second order mesh capability as far upstream as possible. There's questions on Discussions about surface tension, surface curvature, etc. But I would't make this a personal priority of yours. You've got a ton of stuff on your plate haha",
                          "url": "https://github.com/idaholab/moose/discussions/24484#discussioncomment-6013009",
                          "updatedAt": "2023-05-26T15:13:10Z",
                          "publishedAt": "2023-05-26T15:13:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Mass loss in simulating multiphase flow",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello,\nI am using coupled Cahn Hilliard Navier Stokes equation to simulate the droplet impact problem. The result that I am getting right now seems to be physically correct.\n\n\nUnfortunately I am witnessing a continuous mass loss. Is it because of the advection term that is added to the Cahn Hilliard equation? If this is the case, what are my options to correct this? (I think this is very similar to the rotating circle problem in level set module)\n\nThanks,",
          "url": "https://github.com/idaholab/moose/discussions/24414",
          "updatedAt": "2023-05-26T01:01:05Z",
          "publishedAt": "2023-05-17T19:39:03Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf you remove the CH equations, or just the advection term in the CH equation, do you still observe this mass loss?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5931585",
                  "updatedAt": "2023-05-17T20:06:51Z",
                  "publishedAt": "2023-05-17T20:06:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "I removed the advection term in the CH equation. The area is still decreasing, but the rate of the decrease is much smaller.",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5932002",
                          "updatedAt": "2023-05-17T21:05:41Z",
                          "publishedAt": "2023-05-17T21:05:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Can you elaborate how you compute the total mass?",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5932420",
                          "updatedAt": "2023-05-17T22:23:28Z",
                          "publishedAt": "2023-05-17T22:23:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "[./area]\n    type = LevelSetVolume\n    threshold = 0.5\n    variable = c\n    location = outside\n    execute_on = 'initial timestep_end'\n  [../]\n\nSince this is a 2d axisymmetric model, it is actually the volume.\nThanks,\nAli",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5932496",
                          "updatedAt": "2023-05-17T22:37:48Z",
                          "publishedAt": "2023-05-17T22:37:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Does ElementIntegralVariable report the same behavior?",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5932552",
                          "updatedAt": "2023-05-17T22:46:34Z",
                          "publishedAt": "2023-05-17T22:46:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Yes, I have both of them in the postprocessor.  ElementIntegralVariablePostprocessor also reports some continuous decrease.\n\n[Postprocessors]\n\n\n  # for testing we also monitor the total solute amount, which should be conserved.\n  [./total_solute]\n    type = ElementIntegralVariablePostprocessor\n    variable = c\n  [../]\n\n  [./area]\n    type = LevelSetVolume\n    threshold = 0.5\n    variable = c\n    location = outside\n    execute_on = 'initial timestep_end'\n  [../]\n\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5932574",
                          "updatedAt": "2023-05-17T22:50:18Z",
                          "publishedAt": "2023-05-17T22:50:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@dschwen have you done CH with advection? @alimostafavi24 can you share your phase-field/navier-stokes input file?",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5970030",
                          "updatedAt": "2023-05-22T17:14:03Z",
                          "publishedAt": "2023-05-22T17:14:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Sure.\nThanks,\n[Problem]\n  type = FEProblem\n  coord_type = RZ\n  rz_coord_axis = Y\n[]\n\n\n\n rho_water = 1.000 #g/cm^3\n#rho_water = 0.1 #g/cm^3\n rho_air = 0.0012 #g/cm3\n\n mu_water = 0.0101 #g/(cm s)\n mu_air = 0.000182 #g/(cm s)\n\n U = 0.0#m/s\n R = 125e-4 #m DROPLET DIMATER\n R2 = $fparse{2*R}\n b = $fparse{R^2}\n a = $fparse{(R)^2}\n\n w = 0.25  #well height\n gamma = 72 #g/s^2\n elem=200\n epsilon= ${fparse 0.096/100}\n epsilon2= ${fparse epsilon^2}\n\n\n K = ${fparse (-3*gamma)/(4*((2*w)^0.5)*epsilon)}\n\n M = 1e-3  #cm^2/s\n\n[GlobalParams]\n\n  enable_jit=false\n\n\n # Stabilization parameters\n # Weak form customization\n\n[]\n\n\n\n[Mesh]\n[gen]\n  type = GeneratedMeshGenerator\n  dim = 2\n  nx = 25\n  ny = 30\n  nz = 0\n  xmin = 0.0\n  ymin = 0\n  zmin = 0\n  xmax = 0.5\n  ymax = 0.6\n  zmax = 0\n  elem_type = QUAD4\n[]\n[]\n\n[AuxVariables]\n\n  [./x_coor]\n  [../]\n  [./y_coor]\n  [../]\n\n\n\n\n[]\n\n[Variables]\n# Velocity in radial (r) direction\n  [./vel_x]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n\t      type = FunctionIC\n        function = vel_x_IC\n    [../]\n  [../]\n\n# Velocity in axial (z) direction\n  [./vel_y]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n\t      type = FunctionIC\n        function = vel_y_IC\n    [../]\n [../]\n\n# pressure for the NS module\n  [./p]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n#########\n# phase-field module variables: concentration (c) and chemical potential (w)\n#########\n  [./c]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n\t      type = FunctionIC\n        function = phi_exact\n    [../]\n  [../]\n\n  [./w]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n# setting up 2D axisymmetric calculations\n\n\n[Functions]\n# concentration initial conditions\n  [./phi_exact]\n    type = LevelSetOlssonBubble\n    epsilon = ${epsilon}\n    center = '0 0.15 0'\n    radius = 0.096\n  [../]\n\n\n #velocity in X direction initial condition, in this problem it is zero\n  [./vel_x_IC]\n    type = ParsedFunction\n    expression = 'r:=(((x-0.0)/1)^2+((y-0.15)/1)^2);if(r<=0.009216,0.0,-0.0)'\n  [../]\n \n\n\n\n #velocity in Y direction initial conditions, vertical velocity is applied\n  [./vel_y_IC]\n    type = ParsedFunction\n    expression = 'r:=(((x-0.0)/1)^2+((y-0.15)/1)^2);if(r<=0.009216,-62,0.0)'\n  [../]\n\n[]\n\n\n\n\n  [AuxKernels]\n\n    [./x_coor]\n    type = FunctionAux\n    variable = x_coor\n    function = x\n  [../]\n        [./y_coor]\n      type = FunctionAux\n      variable = y_coor\n      function = y\n    [../]\n[]\n\n[Kernels]\n\n#########\n# 2D axisymmetric Navier-Stokes kernels: mass, momentum time and space\n#########\n  # mass\n  [./mass]\n    type = INSMassRZ\n    variable = p\n    u = vel_x\n    v = vel_y\n    pressure = p\n  pspg = true\n  transient_term = true\n\n  [../]\n\n  # x-momentum, time\n  [./x_momentum_time]\n    type = INSMomentumTimeDerivative\n    variable = vel_x\n  [../]\n\n  # x-momentum, space\n  [./x_momentum_space]\n    type = INSMomentumLaplaceFormRZ\n    variable = vel_x\n    u = vel_x\n    v = vel_y\n    pressure = p\n    component = 0\n      pspg = true\n      supg = true\n  convective_term = true\n  integrate_p_by_parts = true\n  transient_term = true\n  laplace = true\n    gravity = '0 -981 0'\n  [../]\n\n  # y-momentum, time\n  [./y_momentum_time]\n    type = INSMomentumTimeDerivative\n    variable = vel_y\n  [../]\n\n  # y-momentum, space\n  [./y_momentum_space]\n    type = INSMomentumLaplaceFormRZ\n    variable = vel_y\n    u = vel_x\n    v = vel_y\n    pressure = p\n    component = 1\n      supg = true\n        pspg = true\n\n  convective_term = true\n  integrate_p_by_parts = true\n  transient_term = true\n  laplace = true\n    gravity = '0 -981 0'\n  [../]\n\n  #coupled force, we need it to pass surface tension from the PFM to the NS module. It is needed for both x and y vel\n  [./force_x]\n   type = SurfaceTension3\n    variable = vel_x\n    coef = ${K}\n    component = 0    \n    c = c\n    w = w\n\n  [../]\n\n  [./force_y]\n    type = SurfaceTension3\n    variable = vel_y\n    coef = ${K}\n    component = 1\n    c = c\n    w = w\n\n  [../]\n\n\n  #########\n  # the PFM kernels\n  #########\n  [./c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n  [../]\n\n  [./w_res]\n    type =  SplitCHWRes #SplitCHWRes\n    variable = w\n    mob_name = M\n  [../]\n  [./time]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n  [../]\n\n# the term to add advection velocity to the Cahn-Hilliard eq. u*nabla(C):\n# dC/dt+u*nabla(C)=(1/Pe)*(M nabla(w)), Pe is the Peclet number Pe = L*u/(M*w), L is the characteristic lenght\n  [./MyConvection]\n    type = AdvectionKernel2\n\tu = vel_x\n\tv = vel_y\n  c = c\n  variable = w\n [../]\n\n\n[]\n\n\n[Materials]\n\n#########\n# setting up density and viscosity for the NS module\n#########\n\n  [./rho]\n     type = DerivativeParsedMaterial\n      args = 'c'\n      f_name = 'rho'\n\n\n     #function = '(1+c)^2/4*${rho_water}+(1-c)^2/4*${rho_air}'\n       function = 'c^2*${rho_water}+(1-c)^2*${rho_air}'\n\n      derivative_order = 0\n      outputs = exodus\n      output_properties = 'rho'\n    [../]\n\n    [./mu]\n       type = DerivativeParsedMaterial\n        args = 'c'\n        f_name = 'mu'\n  \n      #function = '(1+c)^2/4*${mu_water}+(1-c)^2/4*${mu_air}'\n             function = 'c^2*${mu_water}+(1-c)^2*${mu_air}'\n\n        #function = '1*((c)^2)^0.5+1*(1-((c)^2)^0.5)*lambda_mu'\n        derivative_order = 0\n        outputs = exodus\n        output_properties = 'mu'\n      [../]\n\n# anisotropic mobility, active only at the interface meaning no bulk mobility\n\n\n# gradient energy coefficient\n\n\n  [./free_energy]\n    type = DerivativeParsedMaterial\n    property_name = F\n\n    coupled_variables = 'c'\n    expression = '${w} * (c)^2 * (1-c)^2'\n\n    outputs = exodus\n   output_properties = F\n  [../]\n\n  [pfmobility]\n    type = GenericConstantMaterial\n    prop_names = 'M    kappa_c '\n    prop_values = '${M}  ${epsilon2}'\n  []\n \n\n\n\n[]\n\n[BCs]\n\n[./u_no_slip]\n  type = DirichletBC\n  boundary = 'bottom top'\n  variable = vel_x\n  value = 0\n[../]\n\n[./v_no_slip]\n  type = DirichletBC\n  boundary = 'bottom top'\n  variable = vel_y\n  value = 0\n[../]\n\n\n#########\n# BC for the PFM\n#########\n\n\n# no flux of c, in this case contact angle is 90 degree, n*M*nabla(C)=0\n  [./c_bottom_CHF_BC]\n    type = WettingBC2D\n    variable = c\n    boundary = bottom\n    cos = -0.22495105434\n  [../]\n\n\n# no flux of chemical potential\n  [./w_bottom_CHF_BC]\n    type = NeumannBC\n    variable = w\n    boundary = 'top bottom left right'\n    value = 0\n  [../]\n   \n\n[]\n\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed                \n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n #   petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  #  petsc_options_value = ' lu       mumps'\n\n    #petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -sub_pc_factor_levels -sub_pc_factor_shift_type'\n    #petsc_options_value = 'asm      2               ilu          4                     NONZERO'\n\n    #petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    #petsc_options_value = ' asm      lu           NONZERO                   2'\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -ksp_type -sub_pc_factor_shift_type'\n    petsc_options_value = 'lu superlu_dist gmres NONZERO   '\n\n#reuse_preconditioner = true\n#reuse_preconditioner_max_linear_its = 20\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n# dt = 1e2  \n  end_time = 0.5\n    [./TimeStepper]\n    type = ConstantDT\n    dt = 1e-6\n  [../]\n  nl_abs_tol = 1e-8\n  automatic_scaling = true\n\n#[./TimeIntegrator]\n    # type = ImplicitEuler\n    # type = BDF2\n    #type = CrankNicolson\n    # type = ImplicitMidpoint\n    # type = LStableDirk2\n    # type = LStableDirk3\n    # type = LStableDirk4\n    # type = AStableDirk4\n    #\n    # Explicit methods\n    # type = ExplicitEuler\n    # type = ExplicitMidpoint\n    # type = Heun\n    # type = Ralston\n # [../]\n\n[]\n\n\n[Outputs]\n  exodus = true\n  #  interval = 100\n  csv = true\n\n  [out]\n    type = Checkpoint\n    interval = 500\n    num_files = 2\n  []\n\n[]\n\n\n\n[Adaptivity]\n  initial_steps = 5\n  steps = 1\n  marker = error\n  [Indicators]\n    [jump]\n      type = GradientJumpIndicator\n      variable = c\n    []\n  []\n  [Markers]\n    [error]\n      type = ErrorFractionMarker\n      coarsen = 0.95\n      refine = 0.9\n      indicator = jump\n    []\n  []\n  max_h_level = 5\n[]\n\n\n\n[Postprocessors]\n\n\n  # for testing we also monitor the total solute amount, which should be conserved.\n  [./total_solute]\n    type = ElementIntegralVariablePostprocessor\n    variable = c\n  [../]\n\n  [./area]\n    type = LevelSetVolume\n    threshold = 0.5\n    variable = c\n    location = outside\n    execute_on = 'initial timestep_end'\n  [../]\n\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5983617",
                          "updatedAt": "2023-05-24T00:28:04Z",
                          "publishedAt": "2023-05-24T00:28:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ykvishal"
                  },
                  "bodyText": "Did you find reasons for your mass loss issue? I have another question, which may not be useful. Are you applying mesh adaptivity (and/or time stepper)? If yes, can you share mesh, adaptivity and time-stepper block?",
                  "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5953289",
                  "updatedAt": "2023-05-20T00:59:13Z",
                  "publishedAt": "2023-05-20T00:59:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "I think there are 2 reasons for that.\n\nThe advection term\nThe order parameter is not bounded which leads to mass loss.\n\nYes.\n    [./TimeStepper]\n    type = ConstantDT\n    dt = 1e-6\n  [../]\n\n[Adaptivity]\n  initial_steps = 5\n  steps = 1\n  marker = error\n  [Indicators]\n    [jump]\n      type = GradientJumpIndicator\n      variable = c\n    []\n  []\n  [Markers]\n    [error]\n      type = ErrorFractionMarker\n      coarsen = 0.95\n      refine = 0.9\n      indicator = jump\n    []\n  []\n  max_h_level = 5\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5953471",
                          "updatedAt": "2023-05-20T02:12:56Z",
                          "publishedAt": "2023-05-20T02:12:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ykvishal"
                          },
                          "bodyText": "You could run one identical simulation, but without mesh adaptivity and check mass loss again. Sometimes CH equation does not work well with mesh adaptivity.",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5953601",
                          "updatedAt": "2023-05-20T03:16:05Z",
                          "publishedAt": "2023-05-20T03:16:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "You might be right!",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5983600",
                          "updatedAt": "2023-05-24T00:24:19Z",
                          "publishedAt": "2023-05-24T00:24:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ykvishal"
                          },
                          "bodyText": "This looks interesting. Can you share mesh block for both cases ( with adapvity if any)?",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-5984755",
                          "updatedAt": "2023-05-24T04:08:55Z",
                          "publishedAt": "2023-05-24T04:08:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "alimostafavi24"
                  },
                  "bodyText": "",
                  "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-6006629",
                  "updatedAt": "2023-05-26T00:44:30Z",
                  "publishedAt": "2023-05-26T00:44:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ykvishal"
                          },
                          "bodyText": "Thanks, I wanted to see mesh block from your input files. Can you double nx and ny in your right hand side simulation while keeping everything same? I want to see if there is any improvement.",
                          "url": "https://github.com/idaholab/moose/discussions/24414#discussioncomment-6006696",
                          "updatedAt": "2023-05-26T01:01:06Z",
                          "publishedAt": "2023-05-26T01:01:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Invalid Function Error",
          "author": {
            "login": "trinabrough"
          },
          "bodyText": "The error message in my log says:\n*** ERROR ***\nInvalid function\nev_Jd(Ac+B(1-c)+Cclog(c)+D*(1-c)log(1-c)+\nEc*(1-c)+Fc(1-c)(2c-1)+Gc(1-c)(2c-1)^2)\nc\nin ParsedMaterialHelper.\nSyntax error: Unknown identifier\ufffd[39m\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\nI'm new to MOOSE, is this saying my c variable is unknown? It's declared in my [Variables]. I've attached my input file. Thank you for any help for a poor newbie. I'm running this on a parallel computing network which I schedule via a slurm batch. The MOOSE environment is recently installed using conda.\nFeCr.txt\nlog_slurm.txt",
          "url": "https://github.com/idaholab/moose/discussions/24489",
          "updatedAt": "2023-05-25T22:56:17Z",
          "publishedAt": "2023-05-25T22:10:32Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Question about initial condition setting",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nI want to divide the whole mesh as a 3*3 grid. The initial condition of each small square should be phi=0+randomly generated value,\nhow to set this initial condition?\n(The following is the model I want)\n\nI found that IsolatedBoundingBoxIC can divide the whole mesh to small square/rectangular and we can set different initial condition value to each small square/rectangular, however, it seems that this initial value can only be a certain value, it can not be set as randomly generated value in a range. How can I set a randomly generated value as the initial value in each small square/rectangular?\n(The following is IsolatedBoundingBoxIC)\n\nI also found that, using RandomIC can generate random value based on some distribution as the initial condition. How can I combine this with IsolatedBoundingBoxIC to set random generated value in each small box?\n(The following is RandomIC)\n\nThank you very much,\nBest,",
          "url": "https://github.com/idaholab/moose/discussions/24487",
          "updatedAt": "2023-05-25T22:05:26Z",
          "publishedAt": "2023-05-25T21:51:33Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nwe don\u2019t have that one premade. You can code a randomBoxesIC that does what you want.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24487#discussioncomment-6005948",
                  "updatedAt": "2023-05-25T21:54:14Z",
                  "publishedAt": "2023-05-25T21:54:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "How to code a randomBoxesIC? Does this need any specific language?",
                          "url": "https://github.com/idaholab/moose/discussions/24487#discussioncomment-6005977",
                          "updatedAt": "2023-05-25T22:02:31Z",
                          "publishedAt": "2023-05-25T22:02:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "C++\nMOOSE is open source and you can make any new object you want. This includes initial conditions",
                          "url": "https://github.com/idaholab/moose/discussions/24487#discussioncomment-6005994",
                          "updatedAt": "2023-05-25T22:05:26Z",
                          "publishedAt": "2023-05-25T22:05:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Eigenvalue analysis of waveguide in 1D periodic structures",
          "author": null,
          "bodyText": "Hi,\nIs it possible to do output eigenvalues of a waveguide in a periodic domain? (1D domain with periodic boundary conditions)\nI have attached a description of the problem below. E and rho are the material properties, k and omega the wavenumber and frequency. I would like to output the wavenumbers for a frequency sweep and create a dispersion.\nReference .pdf\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/24436",
          "updatedAt": "2023-05-25T21:34:10Z",
          "publishedAt": "2023-05-20T19:32:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@cticenhour any thoughts on this?",
                  "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5960765",
                  "updatedAt": "2023-05-21T17:30:53Z",
                  "publishedAt": "2023-05-21T17:30:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "Hi @obelix333 - there is an example I made for the calculation of a fundamental eigenvalue for 2D waveguide profiles (circular, coaxial, rectangular, etc.) in the electromagnetics module that you potentially could adapt to your scenario. Here's the link to a discussion of the benchmark, which compares MOOSE EM module results to analytical solutions and an older FEM code: https://mooseframework.inl.gov/benchmarks/WaveguideEigenvalue.html\nThe input files associated with this are located in the moose repository at: moose/modules/electromagnetics/test/tests/benchmarks/eigenvalue_problems\nTake a look through this and the input files, and feel free to ask me more questions about it.",
                  "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5960942",
                  "updatedAt": "2023-05-21T18:12:26Z",
                  "publishedAt": "2023-05-21T18:12:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Thanks @cticenhour.\nI will go through this example. Is it possible to output the matrices used to solve the eigen value problem in moose?",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5974545",
                          "updatedAt": "2023-05-23T06:42:31Z",
                          "publishedAt": "2023-05-23T06:42:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does -ksp_view_mat do what you want?\nThere's also a petsc option to dump it to csv.\nYou ll want to look at the petsc manual for more on these",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5977788",
                          "updatedAt": "2023-05-23T12:36:34Z",
                          "publishedAt": "2023-05-23T12:36:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "I aim to use the coefficients matrices to solve a second order eigenvalue problem in MATLAB.\nI tried using -ksp_view_mat, but it outputs a bunch of lines in console. Is it possible to export it to csv?",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5981348",
                          "updatedAt": "2023-05-23T18:10:01Z",
                          "publishedAt": "2023-05-23T18:10:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yeah there's an option to dump it the matlab format actually.\nI dont recall, please search the PETSC manual. Or maybe @oanaoana knows",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5981354",
                          "updatedAt": "2023-05-23T18:10:59Z",
                          "publishedAt": "2023-05-23T18:10:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "I will look in the PETSC manual. Thanks @GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-5981507",
                          "updatedAt": "2023-05-23T18:29:13Z",
                          "publishedAt": "2023-05-23T18:29:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Hi,\nAfter going through the PETSc manaul, I found out the options for saving matrices and vectors to a .m file (to be read in MATLAB). However, is it possible to identify which kernel the matrices belong to?",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-6004056",
                          "updatedAt": "2023-05-25T18:12:56Z",
                          "publishedAt": "2023-05-25T18:12:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "All the contributions from all the kernels are agglomerated.\nIf you want to look at just one contribution, you ll have to use the vector_tag and matrix_tag parameters. Though it will only get you the residual and/or the diagonal of the Jacobian. You can look at it as a field then using the TagVector/MatrixAux to fill an auxvariable",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-6004772",
                          "updatedAt": "2023-05-25T19:29:46Z",
                          "publishedAt": "2023-05-25T19:29:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Thanks! I don't think that would help me solve for eigenvalues, or would it? I might be missing something, being new to the MOOSE framework.",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-6005205",
                          "updatedAt": "2023-05-25T20:36:08Z",
                          "publishedAt": "2023-05-25T20:36:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Oh no that won\u2019t be enough.\nIf you develop, you can use a matrix tag then output the matrix tag to output the matrix to csv",
                          "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-6005718",
                          "updatedAt": "2023-05-25T21:15:47Z",
                          "publishedAt": "2023-05-25T21:15:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": null,
                  "bodyText": "Thank you so much @GiudGiud.",
                  "url": "https://github.com/idaholab/moose/discussions/24436#discussioncomment-6005839",
                  "updatedAt": "2023-05-25T21:33:32Z",
                  "publishedAt": "2023-05-25T21:33:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Wasp undefined reference",
          "author": {
            "login": "aprilnovak"
          },
          "bodyText": "I am helping @philipJFpfahl compile Cardinal (with MOOSE's conda), but they are hitting a bunch of errors like this\n/home/philip/mambaforge3/envs/moose/wasp/include/waspcore/Interpreter.i.h:206: undefined reference to `wasp::HITParser::HITParser(wasp::AbstractInterpreter&, std::istream&, std::shared_ptr<wasp::HITLexerImpl>)'\n/home/philip/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/philip/mambaforge3/envs/moose/wasp/include/waspcore/Interpreter.i.h:213: undefined reference to `wasp::HITParser::parse()'\n/home/philip/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/philip/mambaforge3/envs/moose/wasp/include/waspcore/Interpreter.i.h:206: undefined reference to `wasp::HITParser::~HITParser()'\n/home/philip/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/philip/mambaforge3/envs/moose/wasp/include/waspcore/Interpreter.i.h:206: undefined reference to `wasp::HITParser::~HITParser()'\ncollect2: error: ld returned 1 exit status\ngmake[1]: *** [Makefile:22: hit] Error 1\nmake: *** [/home/philip/Documents/DTU/MOOSE/cardinal/contrib/moose/framework/moose.mk:138: /home/philip/Documents/DTU/MOOSE/cardinal/contrib/moose/framework/contrib/hit/hit.so] Error 2\nmake: *** Waiting for unfinished jobs....\n\nDoes anyone have an idea for a workaround? Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/24426",
          "updatedAt": "2023-05-25T18:37:36Z",
          "publishedAt": "2023-05-19T02:25:52Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDid you git clean -xfd the MOOSE directory?\nBasically we ve gone through 2 versions of wasp, so older objects can be linked to the older one\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5944006",
                  "updatedAt": "2023-05-19T02:28:33Z",
                  "publishedAt": "2023-05-19T02:28:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "@philipJFpfahl  what hash are you using of Cardinal? Can you show me\ngit log\n\nand copy-paste the first couple lines here?",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5944023",
                          "updatedAt": "2023-05-19T02:30:42Z",
                          "publishedAt": "2023-05-19T02:30:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "Hello,\nThank you for the answers.\nHere is the output\ncommit a5448feab86faf38793b6922bbebc9d996b597dd (HEAD -> devel, origin/devel, origin/HEAD)\nMerge: 1d6d2507 ba5739b5\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 14:35:55 2023 -0700\n\n    Merge pull request #698 from aprilnovak/enum\n    \n    Remove nek_mesh parameter from NekRSSeparateDomainProblem\n\ncommit ba5739b54b1dbf7f759c17c0789cde7a364a0bdb\nAuthor: aprilnovak <novak@berkeley.edu>\nDate:   Thu May 18 14:19:33 2023 -0500\n\n    Use enum for nekRS mesh and unexpose to user in NekRSSeparateDomainProblem.\n\ncommit 1d6d25075baa96b14dc8e3d3f52bff2485cb9120\nMerge: adea4720 7d296388\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 13:06:00 2023 -0700\n\n    Merge pull request #699 from aprilnovak/removed-fixed\n    \n    Remove fixed_mesh from postprocessors\n\ncommit 7d296388a32f8d10cba1f515bcc2dcae9a965ca8\nAuthor: aprilnovak <novak@berkeley.edu>\nDate:   Thu May 18 14:03:01 2023 -0500\n\n    Remove fixed_mesh from postprocessors\n\ncommit adea4720f0ab5d9acb225ecf3064e2bbbf4ce5b5\nMerge: 50439311 2dd3ab5a\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 11:11:15 2023 -0700\n\n    Merge pull request #697 from aprilnovak/update-moose\n    \n    Update MOOSE\n\ncommit 2dd3ab5a08d3211e06aad530fac65b66e0eb850d\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 09:58:09 2023 -0700\n\n    Update potassium\n\ncommit 05d1e99282569069094fa409579fc9358b447eb3\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 09:57:49 2023 -0700\n\n    Update iapws\n\ncommit a2ab477d968e77956693d8c81f9a6538d2b702f5\nAuthor: April Novak <novak@berkeley.edu>\nDate:   Thu May 18 09:57:30 2023 -0700\n:",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5946862",
                          "updatedAt": "2023-05-19T10:00:53Z",
                          "publishedAt": "2023-05-19T10:00:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "@GiudGiud\nI deleted the old MOOSE dir and reinstalled conda and then set up a new MOOSE environment.\nThank you\nPhilip",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5946876",
                          "updatedAt": "2023-05-19T10:02:52Z",
                          "publishedAt": "2023-05-19T10:02:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "@GiudGiud, I already had Philip also do a completely fresh clone of Cardinal, so there shouldn't be any non-versioned files (e.g. git clean) hanging around. I also tried to reproduce his error on my machine (Mac) with this Cardinal hash, but could not.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949687",
                          "updatedAt": "2023-05-19T15:02:50Z",
                          "publishedAt": "2023-05-19T15:02:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "@philipJFpfahl, you are using the MOOSE submodule in Cardinal, right? I just want to check that you are not manually setting MOOSE_DIR to point somewhere else? If you are, then that version may be in need of updating.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949705",
                          "updatedAt": "2023-05-19T15:04:17Z",
                          "publishedAt": "2023-05-19T15:04:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If it s not moose I d go wipe the conda environment in case something got messed up there.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949865",
                          "updatedAt": "2023-05-19T15:19:22Z",
                          "publishedAt": "2023-05-19T15:19:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If it s not moose I d go wipe the conda environment in case something got messed up there.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949866",
                          "updatedAt": "2023-05-19T15:19:28Z",
                          "publishedAt": "2023-05-19T15:19:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "@aprilnovak can you explain what you mean by the MOOSE submodule in Cardinal? I don't point to a new dir deliberately. moose should be installed in ../moose\nThe MOOSE version in my conda environment should be new.\ncommit d38411d7b2d343afaa53afc1e36373f82aae49dc (HEAD -> master, origin/master)\nMerge: 18ac9ad003 b9c8e604ca\nAuthor: moosetest <bounces@inl.gov>\nDate:   Fri May 12 23:20:44 2023 -0600\n\n    Merge commit 'b9c8e604ca417526aacf5779b79226c",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949879",
                          "updatedAt": "2023-05-19T15:20:56Z",
                          "publishedAt": "2023-05-19T15:20:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "@philipJFpfahl can you try\nconda deactivate\nconda env remove -n moose\nconda create -n moose\n<open a new terminal window>\nconda activate moose\nmamba install moose-libmesh moose-tools\n\nand then repeat those steps (starting from deleting the Cardinal directory) I listed on the Cardinal discussion page?",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949884",
                          "updatedAt": "2023-05-19T15:21:56Z",
                          "publishedAt": "2023-05-19T15:21:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think we can use moose-dev now instead moose-libmesh moose-tools",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5949958",
                          "updatedAt": "2023-05-19T15:29:43Z",
                          "publishedAt": "2023-05-19T15:29:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aprilnovak"
                  },
                  "bodyText": "@philipJFpfahl can you perhaps try\nexport LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH\ncd cardinal\nrm -rf build install\nmake -j8\n\n@pshriwise do you know what is the correct way to find gsl?",
                  "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5956068",
                  "updatedAt": "2023-05-20T15:41:55Z",
                  "publishedAt": "2023-05-20T15:41:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "pshriwise"
                          },
                          "bodyText": "If it's a system installation, it should be found automatically. I pulled this version of gsl-lite (or as close as I could get, I didn't see a v0.36.1 here: https://github.com/gsl-lite/gsl-lite/releases) and I didn't run into any issues.\nGoing into the /build/openmc directory and running make clean; make VERBOSE=1 | tee omc_verbose_make.txt might be helpful to see all of the explicit paths used to look for headers during compilation -- could be some hints there.\n@philipJFpfahl once you've done that, can you up load the file here?",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5956681",
                          "updatedAt": "2023-05-20T18:21:59Z",
                          "publishedAt": "2023-05-20T18:21:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "@aprilnovak Yes,\nI did:\nrm -rf cardinal/\ngit clone https://github.com/neams-th-coe/cardinal.git\ncd cardinal\n./scripts/get-dependencies.sh\nconda activate moose\nexport ENABLE_NEK=false\nexport HDF5_ROOT=$CONDA_PREFIX\nexport LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH\nexport LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH\n\nwith  echo $LIBRARY_PATH I now get  /usr/local/lib:/usr/local/lib:\nBut the error is still there.\nfatal error: gsl/gsl-lite.hpp: No such file or directory\n\nThe gsl folder exists:\nusr/local/lib/cmake/gsl-lite$ ls\ngsl-lite-config.cmake  gsl-lite-config-version.cmake  gsl-lite-targets.cmake",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5956796",
                          "updatedAt": "2023-05-20T18:53:20Z",
                          "publishedAt": "2023-05-20T18:52:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "philipJFpfahl"
                  },
                  "bodyText": "@pshriwise thank you for helping!\nhere is the output file for:\n~/Documents/DTU/MOOSE/cardinal/build/openmc$ make clean; make VERBOSE=1 | tee omc_verbose_make.txt\n\n\nomc_verbose_make.txt",
                  "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5956904",
                  "updatedAt": "2023-05-20T19:24:35Z",
                  "publishedAt": "2023-05-20T19:24:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "pshriwise"
                          },
                          "bodyText": "Interesting! From what I can tell, it looks like that build of OpenMC was successful.\nFWIW here's the set of locations in the compile line where it's looking for headers (other than the default locations the compiler will look that aren't shown in the make command):\n/home/philip/Documents/DTU/MOOSE/cardinal/contrib/openmc/include\n/home/philip/Documents/DTU/MOOSE/cardinal/build/openmc/include \n/usr/local/include\n/home/philip/mambaforge3/envs/moose/libmesh/include \n/home/philip/mambaforge3/envs/moose/libmesh-vtk/include/vtk-9.2",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5974504",
                          "updatedAt": "2023-05-23T06:37:59Z",
                          "publishedAt": "2023-05-23T06:37:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "@philipJFpfahl, we believe this is happening due to the different build systems used by OpenMC and Cardinal. OpenMC uses CMake, whereas all MOOSE-based applications use Make. OpenMC is building fine with your system GSL, but those include dirs aren't propagated up to Cardinal, so it can't find it (this would be easy if MOOSE used CMake).\nI think we have a hot fix for you, that forces OpenMC to build with its submodule GSL, which Cardinal should know how to find. Can you try editing the cardinal/contrib/openmc/CMakeLists.txt file to comment out this line, like:\n#find_package_write_status(gsl-lite)\n\nAnd then re-build:\ncd cardinal\nrm -rf build install\nmake -j4",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5991587",
                          "updatedAt": "2023-05-24T15:38:39Z",
                          "publishedAt": "2023-05-24T15:38:38Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "Okay, first of all, I want to say a big thank you! It is amazing that you all put so much effort into solving this. An executable has been made and it passes all the tests. There were three more libraries missing:\n   12 | #include \"pugixml.hpp\"\n\n    8 | #include \"fmt/format.h\"\n\n   14 | #include \"xtensor/xadapt.hpp\"\n\n\nI also found them in the CMakeLists.txt and commented them out. And now it runs like a charm.\nSuper cool.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-5999974",
                          "updatedAt": "2023-05-25T11:41:27Z",
                          "publishedAt": "2023-05-25T11:41:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "That's great! Thanks for sticking with us :) We really appreciate the feedback so we know how to make the build process more robust going forward.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-6001055",
                          "updatedAt": "2023-05-25T13:29:23Z",
                          "publishedAt": "2023-05-25T13:29:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "philipJFpfahl"
                          },
                          "bodyText": "Much appreciate it! Without the helping hands in the forum, MOOSE would only be half as useful.",
                          "url": "https://github.com/idaholab/moose/discussions/24426#discussioncomment-6004296",
                          "updatedAt": "2023-05-25T18:37:36Z",
                          "publishedAt": "2023-05-25T18:37:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "convergence (polynomial vs log function) and a question about KKS model physics",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Hello Moose Experts,\nI tried to study KKS_system with a test example file,\n/modules/phase_field/test/tests/KKS_system/kks_example_split.i\nI have three questions.\n1. Why does not the log bulk free energy function converge?\n\nI changed the free energy function in the input file, kks_example_split.i just like below.\n\n[Materials]\n  # Free energy of the matrix\n  [./fm]\n    type = DerivativeParsedMaterial\n    property_name = fm\n    coupled_variables = 'cm'\n    expression = '0.4009*(1.9956*cm+cm*log(cm)+(1-cm)*log(1-cm))+0.0441'\n    outputs = exodus\n  [../]\n\n  # Free energy of the delta phase\n  [./fd]\n    type = DerivativeParsedMaterial\n    property_name = fd\n    coupled_variables = 'cd'\n#    expression = '(0.9-cd)^2'\n    expression = '0.4009*(-1.9956*cd+cd*log(cd)+(1-cd)*log(1-cd))+0.8441'\n    outputs = exodus\n  [../]\n\n\nBefore changes, they were polynomial functions like  '(0.9-cd)^2'.\nI changed them because, in many papers (even the first proposal of KKS phase field model(S.Kim et al., PRE 60, 6, 1999)), log free energy function was used.\nI don't know why this does not converge like below.\n\nTime Step 1, time = 2.32831e-11, dt = 2.32831e-11\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 1.16415e-11, dt = 1.16415e-11\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 5.82077e-12, dt = 5.82077e-12\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 2.91038e-12, dt = 2.91038e-12\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 1.45519e-12, dt = 1.45519e-12\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 7.27596e-13, dt = 7.27596e-13\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 3.63798e-13, dt = 3.63798e-13\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 1.81899e-13, dt = 1.81899e-13\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nTime Step 1, time = 1e-13, dt = 1e-13\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\n\nFor your information, I changed the polynomial function to the log function like below.\nred +: original polynomial function\nblue line: new log function (a1*(a2cm+cmlog(cm)+(1-cm)*log(1-cm))+a3), where a1, a2, and a3 are constants.\n\n\n2. What makes the phase transition?\nThree pictures below are the simulation results of the input file, kks_example_split.i at 0.1s, 20s, and 40s.\n\n\n\nIf I want the yellow region to grow all over the system and maintain, what should the Material property be?\nFor example, barrier height(w) is high and ...etc.\nAlso, It would be a great help if you let me know How I can make a rough guess before the simulation.\nThanks for reading this long discussion.\nBest regard,\nJeonghwan.",
          "url": "https://github.com/idaholab/moose/discussions/24441",
          "updatedAt": "2023-05-24T17:08:19Z",
          "publishedAt": "2023-05-22T11:21:23Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor your first question, your expression will create NaNs if cm <= 0 or cm >= 1. Same for cd\n0.4009*(1.9956cm+cmlog(cm)+(1-cm)*log(1-cm))+0.0441\nSo you need to bound cm and cd to make sure that does not happen.\nWe have created machinery in MOOSE to handle this.\nIn this material you will want to use tol_names and tol_values parameters to do this\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24441#discussioncomment-5967400",
                  "updatedAt": "2023-05-22T13:01:56Z",
                  "publishedAt": "2023-05-22T13:01:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Thanks for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/24441#discussioncomment-5992530",
                          "updatedAt": "2023-05-24T17:08:20Z",
                          "publishedAt": "2023-05-24T17:08:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Getting velocity vector as an auxillary variable",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello MOOSE experts,\nI wanted to know whether it is possible to get the velocity vector as an auxillary variable. For example, solving the NS equation without using AD, but get velocity vector as an auxillary variable by its components. I know that the vice versa is possible, but not sure about this one.\nThanks,",
          "url": "https://github.com/idaholab/moose/discussions/24376",
          "updatedAt": "2023-05-24T00:29:16Z",
          "publishedAt": "2023-05-15T23:38:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can extract every component from a vector variable using this:\nhttps://mooseframework.inl.gov/source/auxkernels/VectorVariableComponentAux.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5910552",
                  "updatedAt": "2023-05-16T00:30:31Z",
                  "publishedAt": "2023-05-16T00:30:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "I meant vice versa. Storing a vector variable from components.",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5910562",
                          "updatedAt": "2023-05-16T00:32:38Z",
                          "publishedAt": "2023-05-16T00:32:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not rn. lemme add this",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5910572",
                          "updatedAt": "2023-05-16T00:34:37Z",
                          "publishedAt": "2023-05-16T00:34:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nPlease feel free to try this, the ParsedVectorAux\n#24382\nThis will only set AUX variables.\nIf you need to set non linear ones, do this in a multiapp executed on initial on an auxvariable, then use a transfer to set the nonlinear varaible.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5915987",
                          "updatedAt": "2023-05-16T13:09:49Z",
                          "publishedAt": "2023-05-16T12:33:09Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Thank you, but I could not compile it!\nI am trying to couple the Navier stokes module to the level set equation. I already couple the navier stokes to the phase field, but I am getting unwanted mass loss. So here is my situation:\n\nAs we know level set is using AD, unfortunately when I couple AD-INS and level set, I get very bad results which means something is seriously wrong.\nThe main reason I am doing this is to use reinitialization. Is there non-AD code for levelset available to use?\nIs it possible to get the velocities using non-AD INS, and pass the velocity vector to the level set module?\n\nThanks,\nAli",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5952698",
                          "updatedAt": "2023-05-19T21:48:41Z",
                          "publishedAt": "2023-05-19T21:48:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I don't think the answers to points 2 and 3 are very relevant. Whether the code is AD or not conceptually should only really relate to the computation of the Jacobian. Conceptually it's not really related to the results you get (which are determined by the residual statements). It's more important to address point 1. How are you measuring mass loss? Note that continuous finite elements are conservative on a per-nodal-patch basis as opposed to a per-element basis.",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5960723",
                          "updatedAt": "2023-05-21T17:22:02Z",
                          "publishedAt": "2023-05-21T17:22:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "You are correct. But if level set was also available in non-AD like NS could be better. Because now that I am using ADINS and level set and seems that something is seriously wrong and I can't figure it out. I discuss the mass loss with more details here [https://github.com//discussions/24414].\nI will also attach the input file here. I have not yet included the surface tension term, but something should be very wrong here.\n\n[GlobalParams]\n  enable_jit = true\n  integrate_p_by_parts = true\n[]\n\n\n\n rho_water = 1.000 #g/cm^3\n rho_air = 0.0012 #g/cm3\n\n mu_water = 0.0101 #g/(cm s)\n mu_air = 0.000182 #g/(cm s)\n\n epsilon= ${fparse 0.096/200}\n\n\n\n\n\n\n[Mesh]\n[gen]\n  type = GeneratedMeshGenerator\n  dim = 2\n  nx = 300\n  ny = 150\n  nz = 0\n  xmin = -0.5\n  ymin = 0\n  zmin = 0\n  xmax = 0.5\n  ymax = 0.5\n  zmax = 0\n  elem_type = QUAD4\n  []\n\n  [./corner_node]\n    type = ExtraNodesetGenerator\n    new_boundary = 'pinned_node'\n    nodes = '0'\n    input = gen\n  [../]\n[]\n\n[AuxVariables]\n\n  [./x_coor]\n  [../]\n  [./y_coor]\n  [../]\n\n\n[]\n\n\n\n\n\n\n[Variables]\n\n  [./velocity]\n    order = FIRST\n    family = LAGRANGE_VEC\n  [../]\n\n\n\n# pressure for the NS module\n  [./p]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n#########\n#level set\n#########\n  [./phi]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n\n\n\n[]\n[ICs]\n  [./phi_IC]\n    type = FunctionIC\n    function = phi_exact\n    variable = phi\n  [../]\n  [./vel_ic]\n    type = VectorFunctionIC\n    variable = velocity\n    function = velocity_func\n  []\n\n[]\n\n[Functions]\n  [./velocity_func]\n    type = ParsedVectorFunction\n    expression_x = 'r:=(((x-0.0)/1)^2+((y-0.15)/1)^2);if(r<=0.009216,1e-15,1e-15)'\n    expression_y = 'r:=(((x-0.0)/1)^2+((y-0.15)/1)^2);if(r<=0.009216,-62.0,1e-15)'\n  [../]\n      [./phi_exact]\n    type = LevelSetOlssonBubble\n    epsilon = ${epsilon}\n    center = '0 0.15 0'\n    radius = 0.096\n  [../]\n[]\n\n\n\n  [AuxKernels]\n\n    [./x_coor]\n    type = FunctionAux\n    variable = x_coor\n    function = x\n  [../]\n        [./y_coor]\n      type = FunctionAux\n      variable = y_coor\n      function = y\n    [../]\n[]\n\n[Kernels]\n\n#########\n# 2D axisymmetric Navier-Stokes kernels: mass, momentum time and space\n#########\n  [./mass]\n    type = INSADMass\n    variable = p\n  [../]\n  [./mass_pspg]\n    type = INSADMassPSPG\n    variable = p\n  [../]\n\n  [./momentum_convection]\n    type = INSADMomentumAdvection\n    variable = velocity\n  [../]\n\n  [./momentum_viscous]\n    type = INSADMomentumViscous\n    variable = velocity\n  [../]\n\n  [./momentum_pressure]\n    type = INSADMomentumPressure\n    variable = velocity\n    pressure = p\n    integrate_p_by_parts = true\n  [../]\n\n  [./momentum_supg]\n    type = INSADMomentumSUPG\n    variable = velocity\n    velocity = velocity\n  [../]\n\n\n\n  #[./SurfaceTension]\n  #  type = ADSurfaceTension\n  #  variable = velocity\n  # coef = ${K}\n  ##  c = c\n   # w = w\n  #[../]\n\n  #########\n  # the LEVEL SET kernels\n  #########\n\n  [./time]\n    type = TimeDerivative\n    variable = phi\n [../]\n  [./advection]\n    type = LevelSetAdvection\n    velocity = velocity\n    variable = phi\n  [../]\n  [./advection_supg]\n    type = LevelSetAdvectionSUPG\n    velocity = velocity\n    variable = phi\n  [../]\n[]\n\n[Materials]\n\n#########\n# setting up density and viscosity for the NS module\n#########\n\n\n\n   [rho]\n    type = ADParsedMaterial\n    property_name = rho\n    expression = '${rho_water}*((phi)^2) + ${rho_air}*(( 1-phi)^2)'\n    #expression = '1'\n    coupled_variables = 'phi'\n    block = '0'\n    use_displced_mesh = true\n        outputs = exodus\n\n  []\n  [mu]\n    type = ADParsedMaterial\n    property_name = mu\n    expression = '${mu_water}*((phi)^2) + ${mu_air}*(( 1-phi)^2)'\n    #expression = '1'\n    coupled_variables = 'phi'\n    block = '0'\n    use_displaced_mesh = true\n            outputs = exodus\n\n  []\n\n\n\n\n  [ins_mat]\n    type = INSADTauMaterial\n    velocity = velocity\n    pressure = p\n    rho = rho\n    mu = mu\n    block = 0\n[]\n[]\n\n\n \n\n\n\n\n\n\n\n[BCs]\n\n\n\n\n  [./no_slip]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'bottom'\n  [../]\n\n\n [p_corner]\n    type = DirichletBC\n    boundary = 'bottom'\n    value = 0\n    variable = p\n\n[]\n\n\n[]\n\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed                \n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    #petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    #petsc_options_value = ' lu       mumps'\n\n     #petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -sub_pc_factor_levels -sub_pc_factor_shift_type'\n #petsc_options_value = 'asm      2               ilu          4                     NONZERO'\n\n #petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_type'\n #petsc_options_value = 'lu       superlu_dist                  vinewtonrsls'\n # petsc_options_iname = '-pc_type -pc_sub_type -ksp_gmres_restart'\n  #petsc_options_value = 'hypre    boomeramg    300'\n\n    petsc_options_iname = '-pc_type -pc_factor_shift_type'      \n    petsc_options_value = 'lu       NONZERO'\n\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n# dt = 1e2  \n  end_time = 0.5\n  [./TimeStepper]\n    type = PostprocessorDT\n    postprocessor = cfl\n    scale = 0.08\n  [../]\n\n\n\n  [./TimeIntegrator]\n    #type = ExplicitTVDRK2\n\n     type = ImplicitEuler\n    # type = BDF2\n    #type = CrankNicolson\n    # type = ImplicitMidpoint\n    # type = LStableDirk2\n    # type = LStableDirk3\n    # type = LStableDirk4\n    #type = AStableDirk4\n    #\n    # Explicit methods\n    # type = ExplicitEuler\n    # type = ExplicitMidpoint\n    # type = Heun\n    # type = Ralston\n\n  [../]\n\n\n  nl_rel_tol = 1e-15\n  nl_abs_tol = 1e-15\n  #nl_max_its = 15\n\n  l_tol = 1e-15\n  #l_max_its = 10\n  automatic_scaling = true\n[]\n\n\n[Outputs]\n  exodus = true\n  #  interval = 50\n  csv = true\n\n  [out]\n    type = Checkpoint\n    interval = 500\n    num_files = 2\n  []\n\n[]\n\n\n\n#[Adaptivity]\n#  initial_steps = 6\n#  steps = 1\n#  marker = error\n#  [Indicators]\n#    [jump]\n#      type = GradientJumpIndicator\n#      variable = c\n#    []\n#  []\n#  [Markers]\n#    [error]\n#      type = ErrorFractionMarker\n#      coarsen = 0.5\n#      refine = 0.9\n#      indicator = jump\n#    []\n#  []\n#  max_h_level = 6\n#[]\n\n\n\n[Postprocessors]\n  [./area]\n    type = LevelSetVolume\n    threshold = 0.5\n    variable = phi\n    location = outside\n    execute_on = 'initial timestep_end'\n  [../]\n  [./cfl]\n    type = LevelSetCFLCondition\n    velocity = velocity\n    execute_on = 'initial' #timestep_end'\n  [../]\n\n  [./total_sol]\n    type = ElementIntegralVariablePostprocessor\n    variable = phi\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5961282",
                          "updatedAt": "2023-05-21T19:51:39Z",
                          "publishedAt": "2023-05-21T19:51:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Thank you, but I could not compile it!\n\nIt's part of MOOSE now. So it definitely compiles. You could try to update MOOSE (and libmesh) and use it.\n\nI am trying to couple the Navier stokes module to the level set equation. I already couple the navier stokes to the phase field, but I am getting unwanted mass loss. So here is my situation:\n\n\nAs we know level set is using AD, unfortunately when I couple AD-INS and level set, I get very bad results which means something is seriously wrong.\n\nYou need to start small on this kind of things.\nFor example:\n\ndecouple the physics one way and work to obtain known solutions\nreproduce known 1D numerical or analytical solutions\n\n\nThe main reason I am doing this is to use reinitialization. Is there non-AD code for levelset available to use?\n\nAs Alex said this is not related. You can use reinitialization whether velocities are AD or not. You ll just need the extra steps I've explained (parsed vector aux (+ multiapps if solving for velocities)).",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5962741",
                          "updatedAt": "2023-05-22T02:55:10Z",
                          "publishedAt": "2023-05-22T02:55:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Thank you. The kernel works well.",
                          "url": "https://github.com/idaholab/moose/discussions/24376#discussioncomment-5983618",
                          "updatedAt": "2023-05-24T00:29:17Z",
                          "publishedAt": "2023-05-24T00:29:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Segmentation fault on pre-split mesh",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "Hi,\nI typically use pre-split meshes as (just like in  #23713) my mesh is large and I cannot replicate (will run out of RAM). Pre-splitting has worked well with previous installations but after I updated and rebuilt MOOSE on May 3, including Libmesh and PETSc, I get errors:\n--------------------------------------------------------------------------\nPrimary job  terminated normally, but 1 process returned\na non-zero exit code. Per user-direction, the job has been aborted.\n--------------------------------------------------------------------------\n--------------------------------------------------------------------------\nmpirun noticed that process rank 57 with PID 1637367 on node node05 exited on signal 11 (Segmentation fault).\n--------------------------------------------------------------------------\n\nThis is uniquely related to pre-splitting (I have some nodes on which I can use replicated mesh and then this error does not happen) and uniquely related to the update on May 3.\nAny ideas of what is going on?",
          "url": "https://github.com/idaholab/moose/discussions/24410",
          "updatedAt": "2023-05-23T18:33:39Z",
          "publishedAt": "2023-05-17T14:29:55Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDo you use multiapps?\nFrom when was your last working version? so we can narrow down which PR changed it\nDo you see anything helpful in debug mode? (just compiled in debug mode first, but running in a debugger could get us even more info)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930158",
                  "updatedAt": "2023-05-17T16:58:48Z",
                  "publishedAt": "2023-05-17T16:58:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Hi Guillaume. No multiapps - just usual stuff and a UserObject. Haven't run debug mode - I'll see if I get around to it (busy cranking out results so may not have time for a while to dig into debug).\nI pulled the MOOSE, Libmesh, and PETSc (updating Libmesh and PETSc using the MOOSE scripts) on May 3. Here is the Framework information:\nFramework Information:\nMOOSE Version:           git commit 2da0ccf on 2023-04-11\nLibMesh Version:         80494219d2293e467392189814d30330c4f87a25\nPETSc Version:           3.16.6\nSLEPc Version:           3.16.2",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930523",
                          "updatedAt": "2023-05-17T17:36:41Z",
                          "publishedAt": "2023-05-17T17:36:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do you have the hash for the working version? Presumably just the previous one you used",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930640",
                          "updatedAt": "2023-05-17T17:48:47Z",
                          "publishedAt": "2023-05-17T17:48:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it will be in any simulation log",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930642",
                          "updatedAt": "2023-05-17T17:49:02Z",
                          "publishedAt": "2023-05-17T17:49:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "It looks like this is related to the number of processes (MPI tasks). When I split 96 ways (96 cores in the node) I get the seg fault, but when I split 64 ways, things seem to work. I tried to split 96 ways using 8 or 16 tasks so as not to overwhelm RAM during splitting so I don't think that I ran out of RAM - looks like something else going on.",
                  "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930433",
                  "updatedAt": "2023-05-17T17:27:26Z",
                  "publishedAt": "2023-05-17T17:27:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We've changed a lot of things in how often we prepare the mesh (search for elem neighbors, delete remote elements, repartition) to do it as little as possible\nThis is probably tied. Can you share your mesh? or can you make a MWE?",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930479",
                          "updatedAt": "2023-05-17T17:32:21Z",
                          "publishedAt": "2023-05-17T17:32:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "I am afraid I cannot share the mesh (IP). What's MWE?",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930614",
                          "updatedAt": "2023-05-17T17:45:53Z",
                          "publishedAt": "2023-05-17T17:45:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "minimal (non) working example\nIf you can reproduce this error with a MOOSE mesh or anything else you can share",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930632",
                          "updatedAt": "2023-05-17T17:47:53Z",
                          "publishedAt": "2023-05-17T17:47:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "I'll see if I can mock up some MWE. Isn't the hash MOOSE Version: git commit 2da0ccf on 2023-04-11? Is it something else?",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930713",
                          "updatedAt": "2023-05-17T17:57:41Z",
                          "publishedAt": "2023-05-17T17:57:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That's for the working version then?",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930736",
                          "updatedAt": "2023-05-17T18:00:05Z",
                          "publishedAt": "2023-05-17T18:00:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "That's the current version I am running that sometimes splits successfully, sometimes not.",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930776",
                          "updatedAt": "2023-05-17T18:04:47Z",
                          "publishedAt": "2023-05-17T18:04:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "We've changed a lot of things in how often we prepare the mesh (search for elem neighbors, delete remote elements, repartition) to do it as little as possible\n\nI think the changes we merged ensure that we prepare the mesh at least as much as before and sometimes more. The \"more\" preparing has revealed some buggy behavior both in MOOSE and in libMesh that we've worked quickly to fix. I know there is at least one outstanding issue on the libMesh side that @roystgnr is working on. Perhaps he can comment on how often he thinks that might crop up in real user cases",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5930905",
                          "updatedAt": "2023-05-17T18:24:47Z",
                          "publishedAt": "2023-05-17T18:24:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "The only thing that I know we're not doing right yet is making sure that an already-constructed PointLocator gets reconstructed after mesh node positions are changed in the middle of a chain of mesh generators.  That's not going to be an easy case to hit, though; you'd need a mesh generator that uses a point locator, whose mesh is then fed to a generator that moves points, whose mesh is then fed to another generator that uses a point locator ... and even then you'd need the final generator to not do any kind of null-checking on the element returned by the locator.  That combination is probably not what's happening here.",
                          "url": "https://github.com/idaholab/moose/discussions/24410#discussioncomment-5981545",
                          "updatedAt": "2023-05-23T18:33:39Z",
                          "publishedAt": "2023-05-23T18:33:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to transfer element values from multiapps to master?",
          "author": {
            "login": "1791445402"
          },
          "bodyText": "Hello developers\nI currently have a master and multiple multiapps, and l need to pass the element value from one of the multiapps to the maste. However, when I used type = MultiAppNearestNodeTransfer in the [transfers] of the master, I found that the element value cannot be effectively passed, but when l change the element value to another node value, the value can be effectively passed.\nlt seems that type = MultiAppNearestNodeTransfer can only pass node values. Does anyone know how to pass element values?\nmaster.i\n[Transfers]\n  [A_from_multi]\n    type = MultiAppNearestNodeTransfer\n    direction = from_multiapp\n    multi_app = multi_A\n    source_variable = A\n    variable = A\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24449",
          "updatedAt": "2023-05-23T12:34:38Z",
          "publishedAt": "2023-05-23T07:29:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nMultiAppNearestNodeTransfer was not well named.\nIt actually defaults to passing the element centroid value for Constant Monomial variables.\nIt's on my to-do list to rename it.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24449#discussioncomment-5977777",
                  "updatedAt": "2023-05-23T12:34:39Z",
                  "publishedAt": "2023-05-23T12:34:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}