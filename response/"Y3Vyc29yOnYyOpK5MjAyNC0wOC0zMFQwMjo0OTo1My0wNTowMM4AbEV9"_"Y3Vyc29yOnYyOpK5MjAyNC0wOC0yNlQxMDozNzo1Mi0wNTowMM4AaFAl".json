{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wOC0yNlQxMDozNzo1Mi0wNTowMM4AaFAl"
    },
    "edges": [
      {
        "node": {
          "title": "Automatic scaling implementation question",
          "author": {
            "login": "starkekr"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI am wondering how the automatic scaling feature is implemented by default. I see that there is some documentation here:\nhttps://mooseframework.inl.gov/source/systems/NonlinearSystemBase.html.\nIt seems that Jacobian scaling is implemented by default and I have a question about this. Specifically, say that our kernels set up a linear system Ax=b, does the automatic scaling set up an auxillary system, A'x=b' and solve this system (where presumably A' now has a better condition number)? Also with diagonal scaling the matrix A' is typically written in the form A'=DAE (D & E are both diagonal matrices), and b'=E^(-1)b. It seems to me that in MOOSE D is the inverse of largest absolute value of diag(A) and E is the identity. Is this correct?\nApparently each variable also has a scaling factor thats gets added to this in some way",
          "url": "https://github.com/idaholab/moose/discussions/28496",
          "updatedAt": "2024-08-29T22:20:13Z",
          "publishedAt": "2024-08-29T16:51:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "starkekr"
                  },
                  "bodyText": "I made a mistake in the post, b'=Db, and you recover the solution with x=E^(-1)x",
                  "url": "https://github.com/idaholab/moose/discussions/28496#discussioncomment-10489803",
                  "updatedAt": "2024-08-29T16:54:09Z",
                  "publishedAt": "2024-08-29T16:54:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "does the automatic scaling set up an auxillary system\n\nWe should be modifying the existing one instead of creating a new one.\n\nIt seems to me that in MOOSE D is the inverse of largest absolute value of diag(A)\n\nThis is on a per-variable basis (well really groups of variables, they can be grouped for auto-scaling). So D isnt a single value.\n\nApparently each variable also has a scaling factor thats gets added to this in some way\n\nThis is for the manual scaling system. If you use this and automatic scaling, the manual scaling factor wont do much as the automatic scaling factors will adapt to include them",
                  "url": "https://github.com/idaholab/moose/discussions/28496#discussioncomment-10492253",
                  "updatedAt": "2024-08-29T22:20:14Z",
                  "publishedAt": "2024-08-29T22:20:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Stochstic term in Allen-Cahn equation",
          "author": {
            "login": "mdh23rct"
          },
          "bodyText": "Dear MOOSE experts,\nWould you be kind to let me know how to add a stochastic term in the Allen-Cahn equation in MOOSE?\n\nI have attached an image of the equation here. The last term on the right-hand side of the equation stands for the stochastic term.\nI would appreciate if you could manage time to reply.\nThanks, and best regards.",
          "url": "https://github.com/idaholab/moose/discussions/28429",
          "updatedAt": "2024-08-29T21:15:03Z",
          "publishedAt": "2024-08-19T17:10:56Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "Would some kind of initial condition for that term work seeded with a random distribution like this:\n[AuxVariables]\n  [./strength]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[ICs]\n  [./strength]\n    type = VolumeWeightedWeibull\n    variable = strength\n    reference_volume = 1e-7\n    weibull_modulus = 12.0\n    median = 130e6\n  [../]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10389418",
                  "updatedAt": "2024-08-19T23:47:39Z",
                  "publishedAt": "2024-08-19T23:47:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mdh23rct"
                          },
                          "bodyText": "Dear Dr. @lynnmunday,\nThank you for your advice. But how to add the stochastic term with the Allen-Chan equation? Do I need any kernel for that?\nThanks, and best regards.",
                          "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10390528",
                          "updatedAt": "2024-08-20T03:13:58Z",
                          "publishedAt": "2024-08-20T03:13:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I'm not familiar with this equation but if you just need to seed your domain with a random material property, this is the way to do that and then you can read that material property into your model as is done in the above example.",
                          "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10400369",
                          "updatedAt": "2024-08-20T21:06:19Z",
                          "publishedAt": "2024-08-20T21:06:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zahidhasan83"
                          },
                          "bodyText": "@lynnmunday\nDear Dr. Lynn,\nI need to add a random number (R3), as shown in this equation:\n\nWould you be kind to advise me how to do it in MOOSE?\nThanks, and best regards.",
                          "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10468097",
                          "updatedAt": "2024-08-27T22:21:09Z",
                          "publishedAt": "2024-08-27T22:20:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I have no idea what this equation is doing.   What I have above is something that will seed an auxvariable with a random number over some distribution.  It looks like you could random multiply this auxvariable by your material.",
                          "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10468436",
                          "updatedAt": "2024-08-27T23:30:51Z",
                          "publishedAt": "2024-08-27T23:30:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "@chaibhave Will you look at this.",
                          "url": "https://github.com/idaholab/moose/discussions/28429#discussioncomment-10491901",
                          "updatedAt": "2024-08-29T21:15:03Z",
                          "publishedAt": "2024-08-29T21:15:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Automatic scaling question",
          "author": {
            "login": "starkekr"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion",
          "url": "https://github.com/idaholab/moose/discussions/28495",
          "updatedAt": "2024-08-29T16:51:18Z",
          "publishedAt": "2024-08-29T16:24:20Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "MOOSE WorkShop training Registration",
          "author": {
            "login": "jiezhou1985"
          },
          "bodyText": "Hi guys, just want to know when we could have the feedback/decision on our workshop training registration. I did register for Oct. workshop at UIUC. Maybe the time is too further away? Really looking forward to participating in.",
          "url": "https://github.com/idaholab/moose/discussions/26855",
          "updatedAt": "2024-08-28T21:24:12Z",
          "publishedAt": "2024-02-21T15:29:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYes we ll typically email out one to two months ahead of time that's it.\nWe dont typically send auto-acceptance emails but we might start at some point\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-8545298",
                  "updatedAt": "2024-02-21T15:35:45Z",
                  "publishedAt": "2024-02-21T15:35:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jiezhou1985"
                          },
                          "bodyText": "it sounds great, so, could I confidently say that we are picked? :), since earlier plan could make some cheaper flight or living expenses. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-8545742",
                          "updatedAt": "2024-02-21T16:03:33Z",
                          "publishedAt": "2024-02-21T16:03:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes. We do not typically refuse anyone for MOOSE training (it s open source). For BISON, it's happened before",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-8545768",
                          "updatedAt": "2024-02-21T16:05:49Z",
                          "publishedAt": "2024-02-21T16:05:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiezhou1985"
                          },
                          "bodyText": "Thanks! Looking forward to the training!",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-8545884",
                          "updatedAt": "2024-02-21T16:16:16Z",
                          "publishedAt": "2024-02-21T16:16:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiezhou1985"
                          },
                          "bodyText": "Hello, since the date is approaching, not sure whether the registration confirmation is sending out? Do we have any expected date for this confirmation and guidance? Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-10467617",
                          "updatedAt": "2024-08-27T20:59:26Z",
                          "publishedAt": "2024-08-27T20:59:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@permcody",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-10469301",
                          "updatedAt": "2024-08-28T02:09:15Z",
                          "publishedAt": "2024-08-28T02:09:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "permcody"
                          },
                          "bodyText": "@jiezhou1985 - I see that you are registered. We will send out more detailed instructions soon (within the next two weeks) on travel and an agenda. You may start looking for flights and making arrangements to attend. I have every expectation that the workshop will occur.",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-10479290",
                          "updatedAt": "2024-08-28T19:44:55Z",
                          "publishedAt": "2024-08-28T19:44:53Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiezhou1985"
                          },
                          "bodyText": "Thanks so much, looking forward to it!",
                          "url": "https://github.com/idaholab/moose/discussions/26855#discussioncomment-10480020",
                          "updatedAt": "2024-08-28T21:24:12Z",
                          "publishedAt": "2024-08-28T21:24:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE/BISON builds but fails to run inputs",
          "author": {
            "login": "gardnerru"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI am attempting to build an updated BiSON, while the code builds without error, I get an illegal hardware instruction when running inputs. I tested this with BIsON and the heat_transfer module. I am running Intel mac with OS 14.6.1 and have gone as far as removing moose conda, conda itself, and starting over with the instructions as listed on the BISoN getting started with a new clone but keep hitting the same error. (By new clone I mean rm -rf bison, clone bison, submodule init recursive)\nI see that MOOSE still has a testing target for Intel with a slightly older OS that is green, which leads to a user problem I know. A quick google of the error only led to a list of M1 issues.\nThoughts?\n(Optional) code in question / simulation log / errors\n../../../../heat_transfer-opt -i const_hw.i \n[1]    18209 illegal hardware instruction  ../../../../heat_transfer-opt -i const_hw.i\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28472",
          "updatedAt": "2024-09-26T15:55:11Z",
          "publishedAt": "2024-08-26T20:04:00Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "This seems to be hitting more and more folks... #28340 (reply in thread)\nThe gist is to downgrade your version of moose-libmesh (details in link). This is not a fix, just a workaround until we figure out how to proceed.",
                  "url": "https://github.com/idaholab/moose/discussions/28472#discussioncomment-10456184",
                  "updatedAt": "2024-08-26T20:55:46Z",
                  "publishedAt": "2024-08-26T20:55:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "gardnerru"
                          },
                          "bodyText": "Ahh. I saw that but wasnt sure it would help here. Ill give it a go and report",
                          "url": "https://github.com/idaholab/moose/discussions/28472#discussioncomment-10456237",
                          "updatedAt": "2024-08-26T21:02:42Z",
                          "publishedAt": "2024-08-26T21:02:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gardnerru"
                          },
                          "bodyText": "@milljm That did work for me. Ill let you decide if you want to mark this as an answer and ill keep watching for updates. Thanks :)",
                          "url": "https://github.com/idaholab/moose/discussions/28472#discussioncomment-10456792",
                          "updatedAt": "2024-08-26T23:01:41Z",
                          "publishedAt": "2024-08-26T23:01:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "We're identifying the issue: #28484",
                          "url": "https://github.com/idaholab/moose/discussions/28472#discussioncomment-10477205",
                          "updatedAt": "2024-08-28T15:43:06Z",
                          "publishedAt": "2024-08-28T15:42:44Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Deciding the Number of Cores",
          "author": {
            "login": "ashishdhole"
          },
          "bodyText": "Hello,\nI am working on grain growth related model with 6400 grains in a box of 2000x2000. I find my simulations are taking really long time. Now the website says I need to use 1 core per 30k DOF's. but when using adaptive meshing, this DOF's changes with every timesteps. I tried printing ndof for each timestep which gives me the real time information on dof but then I have to stop the simulation and run with new number of cores. I tried restart option using \"--recover' but the restart option is only available for same number of cores.\nCan you suggest anything that can make the simulation faster. I was told that this type of simulations with same number of grains won't take much time to process.\nfollowing is my system's starting DOF looks like\nParallelism:\n  Num Processors:          400\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:\t   2\n  Nodes:\n    Total:                 641601\n    Local:                 1705\n    Min/Max/Avg:           1485/1724/1604\n  Elems:\n    Total:                 640000\n    Local:                 1606\n    Min/Max/Avg:           1554/1640/1600\n  Num Subdomains:          1\n  Num Partitions:          400\n  Partitioner:             metis\n\nNonlinear System:\n  Num DOFs:                64160100\n  Num Local DOFs:          170500\n  Num Constrained DOFs:    160100\n  Local Constrained DOFs:  2800\n  Variables:               { \"gr0\" \"gr1\" \"gr2\" \"gr3\" \"gr4\" ... \"gr95\" \"gr96\" \"gr97\" \"gr98\" \"gr99\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                3843202\n  Num Local DOFs:          9834\n  Num Constrained DOFs:    3202\n  Local Constrained DOFs:  56\n  Variables:               \"bnds\" { \"unique_grains\" \"var_indices\" } \"phi\" { \"err_bnds\" \"ind_bnds\" }\n  Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\"\n  Approximation Orders:    \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             IterationAdaptiveDT\n  TimeIntegrator:          BDF2\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg\n\nthis is what my execution block looks like\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  solve_type = PJFNK #Preconditioned JFNK (default)\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre    boomeramg'\n  steady_state_detection = true\n  steady_state_start_time = 0\n  steady_state_tolerance = 1e-8\n  automatic_scaling = true\n  compute_scaling_once = false\n  use_pre_SMO_residual = true\n  l_abs_tol = 1.0e-6\n  nl_abs_tol = 1.0e-6\n  l_tol = 1.0e-6\n  l_max_its = 30\n  nl_max_its = 30\n  nl_rel_tol = 1.0e-6\n  start_time = 0.0\n  #num_steps = 2\n  end_time = 20000000000\n  dtmin = 1e-20\n  #dt = 1\n  line_search = none\n\n    [TimeStepper]\n    type = IterationAdaptiveDT\n    cutback_factor = 0.8\n    dt = 0.1\n    growth_factor = 1.3\n  []\n[]\n[Adaptivity]\n  initial_steps = 3\n  max_h_level = 2\n  marker = err_bnds\n  [Markers]\n    [err_bnds]\n      type = ErrorFractionMarker\n      coarsen = 0.3\n      refine = 0.7\n      indicator = ind_bnds\n    []\n  []\n  [Indicators]\n    [ind_bnds]\n      type = GradientJumpIndicator\n      variable = bnds\n    []\n  []\n[]\n\nthank you",
          "url": "https://github.com/idaholab/moose/discussions/28361",
          "updatedAt": "2024-08-28T14:30:23Z",
          "publishedAt": "2024-08-13T16:37:53Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThat's a lot of grain variables.\n@laagesen are we used to that many?\nAt this point I would expect re-implementing the module to use array variables is the thing to do to get great performance.\nOtherwise profile an iteration using these instructions, then let's focus on what's actually slow\nhttps://mooseframework.inl.gov/application_development/profiling.html",
                  "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10330936",
                  "updatedAt": "2024-08-13T22:28:38Z",
                  "publishedAt": "2024-08-13T22:28:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "At this point I would expect re-implementing the module to use array variables is the thing to do to get great performance.\n\nHello,\nCan you explain this?\nProfiling will help me identify what is taking long time., but, as this is a custom kernel I am sure they are not so optimized. Still the simulation of such number of grains should not take this long time.\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10331012",
                          "updatedAt": "2024-08-13T22:50:33Z",
                          "publishedAt": "2024-08-13T22:50:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "With so many variables, I expect we can vectorize the assembly of the nonlinear system using arrayKernels",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10331095",
                          "updatedAt": "2024-08-13T23:08:38Z",
                          "publishedAt": "2024-08-13T23:08:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "After reducing my order parameters from 100 to 16, the simulation runtime is significantly improved. is there any rule to follow when choosing such number? Because once I start the simulation on HPC, I don't want to stop it and make changes in my input file. is there any other changes in the executioner block you think might help me improve the performance.\nThank you",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10331148",
                          "updatedAt": "2024-08-13T23:25:01Z",
                          "publishedAt": "2024-08-13T23:25:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I ll let the phase field experts comment on how to chose this order parameter\nYou can always work on improving the preconditioning, tuning your hypre parameters here",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10331203",
                          "updatedAt": "2024-08-13T23:40:21Z",
                          "publishedAt": "2024-08-13T23:40:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "you can definitely reduce the number of order parameters using the GrainTracker system as described here:\nhttps://mooseframework.inl.gov/source/postprocessors/GrainTracker.html\nI think you can use ~8 order parameters for 2D and ~25 for 3D if you use GrainTracker",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10360391",
                          "updatedAt": "2024-08-16T15:25:49Z",
                          "publishedAt": "2024-08-16T15:25:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "Hello,\nI have an put file as follows\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 50\n  ny = 50\n  nz = 50\n  xmin = 0\n  xmax = 500\n  ymin = 0\n  ymax = 500\n  zmin = 0\n  zmax = 500\n  unifortm_refine = 2\n[]\n[GlobalParams]\n  op_num = 80\n  var_name_base = gr\n  length_scale = 1.0e-6\n  time_scale = 1.0\n[]\n\n[Variables]\n  [PolycrystalVariables]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n[Modules]\n  [AdvanceFrictionPressureGG]\n    g = phi\n  []\n[]\n\n[UserObjects]\n  [voronoi]\n    type = PolycrystalVoronoi\n    grain_num = 27000 # Number of grains\n    rand_seed = 1234\n    coloring_algorithm = jp\n    int_width = 4\n  []\n  [grain_tracker]\n    type = GrainTracker\n    verbosity_level = 0\n    compute_var_to_feature_map = true\n  []\n[]\n[ICs]\n  [PolycrystalICs]\n    [PolycrystalColoringIC]\n      polycrystal_ic_uo = voronoi\n    []\n  []\n[]\n...\n\nwith 27000 grains in 3d, As you have mentioned that I need ~25 op_num for 3d,\nSetting Up\n  Initializing\n    Initializing Equation Systems.                                                       [^[[33m 18.04 s^[[39m] [^[[33m  524 MB^[[39m]\n  Finished Initializing                                                                  [^[[33m 19.08 s^[[39m] [^[[33m  524 MB^[[39m]\nFinished Setting Up                                                                      [^[[33m 25.90 s^[[39m] [^[[33m  524 MB^[[39m]\nFramework Information:\nMOOSE Version:           git commit 8b30259223 on 2024-04-17\nLibMesh Version:         7dbd90ade88cb16a5e855a4c345454c9c146ebec\nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1\nCurrent Time:            Tue Aug 27 03:34:47 2024\nExecutable Timestamp:    Thu Aug 15 19:47:37 2024\n\nParallelism:\n  Num Processors:          400\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:\t   3\n  Nodes:\n    Total:                 132651\n    Local:                 496\n    Min/Max/Avg:           156/525/331\n  Elems:\n    Total:                 125000\n    Local:                 305\n    Min/Max/Avg:           304/321/312\n  Num Subdomains:          1\n  Num Partitions:          400\n  Partitioner:             metis\n\nNonlinear System:\n  Num DOFs:                9285570\n  Num Local DOFs:          34720\n  Num Constrained DOFs:    535570\n  Local Constrained DOFs:  3640\n  Variables:               { \"gr0\" \"gr1\" \"gr2\" \"gr3\" \"gr4\" ... \"gr65\" \"gr66\" \"gr67\" \"gr68\" \"gr69\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                890302\n  Num Local DOFs:          2517\n  Num Constrained DOFs:    15302\n  Local Constrained DOFs:  104\n  Variables:               \"bnds\" { \"unique_grains\" \"var_indices\" } \"phi\" { \"err_bnds\" \"ind_bnds\" \"pid\"\n                             }\n  Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\"\n  Approximation Orders:    \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             IterationAdaptiveDT\n  TimeIntegrator:          BDF2\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg strong_threshold: 0.7 (auto)\n\n^[[31mLEGACY MODES ENABLED:^[[39m\n This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to t$\n^[[39m\nCurrently Executing\n  Performing Initial Setup\n    Computing User Objects\n      Computing Polycrystal Initial Condition..                                          [^[[33m 21.44 s^[[39m] [^[[33m  535 MB^[[39m]\n      Currently Finalizing Polycrystal Initial Condition\n        Finalizing Polycrystal Initial Condition\n          Communicating and Merging                                                      [^[[33m  7.31 s^[[39m] [^[[33m  904 MB^[[39m]\n        Finished Finalizing Polycrystal Initial Condition                                [^[[33m  7.79 s^[[39m] [^[[33m  905 MB^[[39m]\n\n^[[31m\n*** ERROR ***\n/gpfs/fs1/home/m/militzer/drashish/moose-projects/pfubc/3d/fp_3d.i:16: (GlobalParams/op_num):\n    Unable to find a valid grain to op coloring, Make sure you have created enough variables to hold a\n    valid polycrystal initial condition (no grains represented by the same variable should be allowed to\n    touch, ~8 for 2D, ~25 for 3D)?^[[39m\n\n--------------------------------------------------------------------------\nMPI_ABORT was invoked on rank 0 in communicator MPI_COMM_WORLD\nwith errorcode 1.\n\nNOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.\nYou may or may not see output from other processes, depending on\nexactly when Open MPI kills them.\n--------------------------------------------------------------------------\nsrun: Job step aborted: Waiting up to 62 seconds for job step to finish.\nslurmstepd: error: *** STEP 13478274.0 ON nia0996 CANCELLED AT 2024-08-27T03:36:42 ***\n      Still Finalizing Polycrystal Initial Condition..............srun: error: nia0999: tasks 240-316,318-319: Killed\nsrun: Terminating StepId=13478274.0\nsrun: error: nia0996: task 0: Exited with exit code 1\nsrun: error: nia0996: tasks 1-53,55-79: Killed\nsrun: error: nia0997: tasks 80-128,130-159: Killed\nsrun: error: nia1000: tasks 320-378,380-399: Killed\nsrun: error: nia0996: task 54: Killed\nsrun: error: nia0999: task 317: Killed\nsrun: error: nia0997: task 129: Killed\nsrun: error: nia0998: tasks 160-239: Killed\nsrun: error: nia1000: task 379: Killed\nDONE!!\n\nmy simulations still fails with error showing not enough op_num.\nIs there a way I can figure out the for certain number of order parameters I need certain number of op_num in the input file.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10468347",
                          "updatedAt": "2024-08-27T23:07:42Z",
                          "publishedAt": "2024-08-27T23:07:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@laagesen\nhave you tried increasing it?",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10469284",
                          "updatedAt": "2024-08-28T02:06:54Z",
                          "publishedAt": "2024-08-28T02:06:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "Yes. If I increase it too much the simulation runs. But then it's very slow.",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10469294",
                          "updatedAt": "2024-08-28T02:08:26Z",
                          "publishedAt": "2024-08-28T02:08:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is there a sweet spot?",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10469306",
                          "updatedAt": "2024-08-28T02:09:25Z",
                          "publishedAt": "2024-08-28T02:09:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "I haven't checked the minimum number. Just made op_num to 200 and it was running.",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10469316",
                          "updatedAt": "2024-08-28T02:11:14Z",
                          "publishedAt": "2024-08-28T02:11:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ashishdhole"
                  },
                  "bodyText": "Hello,\nIn any case, how do we choose the optimum number of cores to use when adaptive mesh is involved? The checkpoint recover works with the same number of cores only. is there a way I can figure out the number of cores for an efficient simulation run?\nthank you",
                  "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10333113",
                  "updatedAt": "2024-08-14T05:04:03Z",
                  "publishedAt": "2024-08-14T05:04:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would say plan for the final number of dofs per core to be above 20k\nWith adaptivity it's tough because you don't know how many dofs you will end up with",
                          "url": "https://github.com/idaholab/moose/discussions/28361#discussioncomment-10337098",
                          "updatedAt": "2024-08-14T12:50:13Z",
                          "publishedAt": "2024-08-14T12:50:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Build failure due to missing reference",
          "author": {
            "login": "Genzord111"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI very recently started exploring MOOSE. My first build keeps failing with the output below;\nLinking Executable /home/max/projects/Al-Mg-Si_evo/evolution-opt...\n/home/max/.conda/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/12.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/max/projects/Al-Mg-Si_evo/lib/libevolution-opt.so: undefined reference to `InputParameters validParams<AuxKernelTempl >()'\ncollect2: error: ld returned 1 exit status\nmake: *** [/home/max/projects/moose/framework/app.mk:457: /home/max/projects/Al-Mg-Si_evo/evolution-opt] Error 1\nIt is a rerun of a simulation setup I found online at\nhttps://github.com/Sachinscnpdl/Al-Cu-Ni_dft_pf/tree/main/Phase_fields/Moose_codes.\nCan I get some help with this?\n(Optional) code in question / simulation log / errors\nNo response\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28476",
          "updatedAt": "2024-08-28T06:34:25Z",
          "publishedAt": "2024-08-26T23:25:54Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis code is deprecated, we no longer use templates to define validParams\nSee this announcement for how to transition your code\nhttps://mooseframework.inl.gov/newsletter/2020/2020_04.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10461389",
                  "updatedAt": "2024-08-27T10:01:26Z",
                  "publishedAt": "2024-08-27T10:01:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "Thank you, I have been able to resolve that issue. I'm trying to run one of\nmy problem inputs but\nI get this error\n*** ERROR ***\nA 'SwitchingFunctionMultiPhaseMaterial' is not a registered object.\n\nIf you are trying to find this object in a dynamically loaded library, make\nsure that\nthe library can be found either in your \"Problem/library_path\" parameter or\nin the\nMOOSE_LIBRARY_PATH environment variable.\n\nCould you help me with this?\n\nSolomon\n\u2026\nOn Tue, Aug 27, 2024 at 10:01\u202fAM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n This code is deprecated, we no longer use templates to define validParams\n See this announcement for how to transition your code\n https://mooseframework.inl.gov/newsletter/2020/2020_04.html\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#28476 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AYGR6DISOJIYLTNJCKIMPSLZTRFAXAVCNFSM6AAAAABNE6SRBGVHI2DSMVQWIX3LMV43URDJONRXK43TNFXW4Q3PNVWWK3TUHMYTANBWGEZTQOI>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10463455",
                  "updatedAt": "2024-08-27T13:27:17Z",
                  "publishedAt": "2024-08-27T13:27:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you activate the PhaseField module in the Makefile of your application?\nIf not, then you need to, then git commit that change, then git clean everything, then rebuild",
                          "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10463665",
                          "updatedAt": "2024-08-27T13:48:33Z",
                          "publishedAt": "2024-08-27T13:48:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "I'm not so sure how to activate the PhaseField module in the makefile.\n\u2026\nOn Tue, Aug 27, 2024 at 1:48\u202fPM Guillaume Giudicelli < ***@***.***> wrote:\n did you activate the PhaseField module in the Makefile of your application?\n If not, then you need to, then git commit that change, then git clean\n everything, then rebuild\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#28476 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AYGR6DKP7F3QL5X2FXUWLYTZTR7UNAVCNFSM6AAAAABNE6SRBGVHI2DSMVQWIX3LMV43URDJONRXK43TNFXW4Q3PNVWWK3TUHMYTANBWGM3DMNI>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10465604",
                  "updatedAt": "2024-08-27T16:40:09Z",
                  "publishedAt": "2024-08-27T16:40:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if you open the Makefile in a text editor you can just write yes in front of PHASE_FIELD",
                          "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10465711",
                          "updatedAt": "2024-08-27T16:50:17Z",
                          "publishedAt": "2024-08-27T16:50:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "I'm still getting the same error message please.\n\n*** ERROR ***\nA 'SwitchingFunctionMultiPhaseMaterial' is not a registered object.\n\nIf you are trying to find this object in a dynamically loaded library, make\nsure that\nthe library can be found either in your \"Problem/library_path\" parameter or\nin the\nMOOSE_LIBRARY_PATH environment variable.\n\nStack frames: 21\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> >,\nstd::__cxx11::basic_string<char, std::char_traits<char>,\nstd::allocator<char> >)\n2: void mooseError<std::__cxx11::basic_string<char, std::char_traits<char>,\nstd::allocator<char> > >(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> >&&)\n3: Factory::reportUnregisteredError(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> > const&) const\n4: Factory::getValidParams(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> > const&) const\n5: MooseObjectAction::MooseObjectAction(InputParameters const&)\n6: AddMaterialAction::AddMaterialAction(InputParameters const&)\n7: RegistryEntry<AddMaterialAction>::buildAction(InputParameters const&)\n8: ActionFactory::create(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> > const&,\nstd::__cxx11::basic_string<char, std::char_traits<char>,\nstd::allocator<char> > const&, InputParameters&)\n9: Moose::Builder::walkRaw(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> >,\nstd::__cxx11::basic_string<char, std::char_traits<char>,\nstd::allocator<char> >, hit::Node*)\n10: Moose::Builder::walk(std::__cxx11::basic_string<char,\nstd::char_traits<char>, std::allocator<char> > const&,\nstd::__cxx11::basic_string<char, std::char_traits<char>,\nstd::allocator<char> > const&, hit::Node*)\n11: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n12: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n13: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n14: Moose::Builder::build()\n15: MooseApp::setupOptions()\n16: MooseApp::run()\n17: ./evolution-opt(+0x20e8) [0x55a29a1530e8]\n18: main\n19: __libc_start_main\n20: ./evolution-opt(+0x238b) [0x55a29a15338b]\nAbort(1) on node 0 (rank 0 in comm 0): application called\nMPI_Abort(MPI_COMM_WORLD, 1) - process 0\n\u2026\nOn Tue, Aug 27, 2024 at 4:50\u202fPM Guillaume Giudicelli < ***@***.***> wrote:\n if you open the Makefile in a text editor you can just write yes in front\n of PHASE_FIELD\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#28476 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AYGR6DNNLSOMSPPVMZ67U5DZTSU53AVCNFSM6AAAAABNE6SRBGVHI2DSMVQWIX3LMV43URDJONRXK43TNFXW4Q3PNVWWK3TUHMYTANBWGU3TCMI>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10465875",
                  "updatedAt": "2024-08-27T17:09:22Z",
                  "publishedAt": "2024-08-27T17:09:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "I have attached both my input file and Makefile\n\nOn Tue, Aug 27, 2024 at 5:08\u202fPM solomon felicien ***@***.***>\nwrote:\n\u2026\n I'm still getting the same error message please.\n\n *** ERROR ***\n A 'SwitchingFunctionMultiPhaseMaterial' is not a registered object.\n\n If you are trying to find this object in a dynamically loaded library,\n make sure that\n the library can be found either in your \"Problem/library_path\" parameter\n or in the\n MOOSE_LIBRARY_PATH environment variable.\n\n Stack frames: 21\n 0: libMesh::print_trace(std::ostream&)\n 1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> >,\n std::__cxx11::basic_string<char, std::char_traits<char>,\n std::allocator<char> >)\n 2: void mooseError<std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> >\n >(std::__cxx11::basic_string<char, std::char_traits<char>,\n std::allocator<char> >&&)\n 3: Factory::reportUnregisteredError(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> > const&) const\n 4: Factory::getValidParams(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> > const&) const\n 5: MooseObjectAction::MooseObjectAction(InputParameters const&)\n 6: AddMaterialAction::AddMaterialAction(InputParameters const&)\n 7: RegistryEntry<AddMaterialAction>::buildAction(InputParameters const&)\n 8: ActionFactory::create(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> > const&,\n std::__cxx11::basic_string<char, std::char_traits<char>,\n std::allocator<char> > const&, InputParameters&)\n 9: Moose::Builder::walkRaw(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> >,\n std::__cxx11::basic_string<char, std::char_traits<char>,\n std::allocator<char> >, hit::Node*)\n 10: Moose::Builder::walk(std::__cxx11::basic_string<char,\n std::char_traits<char>, std::allocator<char> > const&,\n std::__cxx11::basic_string<char, std::char_traits<char>,\n std::allocator<char> > const&, hit::Node*)\n 11: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n 12: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n 13: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n 14: Moose::Builder::build()\n 15: MooseApp::setupOptions()\n 16: MooseApp::run()\n 17: ./evolution-opt(+0x20e8) [0x55a29a1530e8]\n 18: main\n 19: __libc_start_main\n 20: ./evolution-opt(+0x238b) [0x55a29a15338b]\n Abort(1) on node 0 (rank 0 in comm 0): application called\n MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n\n On Tue, Aug 27, 2024 at 4:50\u202fPM Guillaume Giudicelli <\n ***@***.***> wrote:\n\n> if you open the Makefile in a text editor you can just write yes in front\n> of PHASE_FIELD\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <#28476 (reply in thread)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYGR6DNNLSOMSPPVMZ67U5DZTSU53AVCNFSM6AAAAABNE6SRBGVHI2DSMVQWIX3LMV43URDJONRXK43TNFXW4Q3PNVWWK3TUHMYTANBWGU3TCMI>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10465951",
                  "updatedAt": "2024-08-27T17:18:31Z",
                  "publishedAt": "2024-08-27T17:18:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont see them. You have to go on the GH website to reply with attachments.",
                          "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10466329",
                          "updatedAt": "2024-08-27T18:02:11Z",
                          "publishedAt": "2024-08-27T18:02:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "Sorry, Pls find them attached.\nI should mention that I am practicing PhaseField simulations using an input file I forked. So I'm not really sure what I am doing.\nMakefile.txt\nstrain_0.0..txt",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10466392",
                  "updatedAt": "2024-08-27T18:10:32Z",
                  "publishedAt": "2024-08-27T18:10:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "PHASE_FIELD                 := yes\n\nthis is correct.\nnow clean both repos and rebuild\nyou ll need to make sure to save those files you are working on as git clean -Xfd will remove them",
                          "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10466540",
                          "updatedAt": "2024-08-27T18:29:21Z",
                          "publishedAt": "2024-08-27T18:29:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Genzord111"
                  },
                  "bodyText": "Thank you very much for the help. I've been able to run my the code after\nrebuilding my moose app.\n\u2026\nOn Tue, Aug 27, 2024, 6:29\u202fPM Guillaume Giudicelli ***@***.***> wrote:\n PHASE_FIELD                 := yes\n\n this is correct.\n now clean both repos and rebuild\n you ll need to make sure to save those files you are working on as git\n clean -Xfd will remove them\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#28476 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AYGR6DNAY4VK7ZQOMJWK5F3ZTTARJAVCNFSM6AAAAABNE6SRBGVHI2DSMVQWIX3LMV43URDJONRXK43TNFXW4Q3PNVWWK3TUHMYTANBWGY2TIMA>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/28476#discussioncomment-10470935",
                  "updatedAt": "2024-08-28T06:34:26Z",
                  "publishedAt": "2024-08-28T06:34:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Is it possible to make a peridynamics ADKernel?",
          "author": {
            "login": "andrisfreimanis"
          },
          "bodyText": "Dear All,\nI want to modify peridynamics kernel, but writing the full jacobian for it would be a headache due to nonlocal interaction. Therefore, using an ADKernel seems like an attractive option.\nThe existing PD implementation inherits from the regular kernel and overrides the computeResidual() method rather than using computeQpResidual(). However, the computeResidual() in Kernel.h is virtual but it is not in ADKernel.h, and if my understanding is correct it is not meant to be overridden.\nBut it is better to ask before starting to write a long jacobian. So is it possible to implement a peridynamics ADKernel?",
          "url": "https://github.com/idaholab/moose/discussions/28465",
          "updatedAt": "2024-08-27T14:13:21Z",
          "publishedAt": "2024-08-26T07:45:09Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhether for ADKernel or Kernel you want to override computeQpResidual. Overriding computeResidual is for expert users.\nIt should be possible to write an ADKernel for PD. I think some complexity might come from how to handle the bonds breaking but a similar treatment as for non AD might be possible\nAD was added to moose after peridynamics which is why there is no AD in PD right now",
                  "url": "https://github.com/idaholab/moose/discussions/28465#discussioncomment-10452247",
                  "updatedAt": "2024-08-26T13:48:24Z",
                  "publishedAt": "2024-08-26T13:48:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Note that you can mix and match ADKernel(s) and Kernel(s), so you dont need to implement every PD kernel with AD immediately.\nThe only issue is material properties, which can be either AD or non AD but not both. They can be converted with this material\nhttps://mooseframework.inl.gov/source/materials/MaterialADConverter.html\nbut derivatives are generally lost in the process",
                          "url": "https://github.com/idaholab/moose/discussions/28465#discussioncomment-10463962",
                          "updatedAt": "2024-08-27T14:14:48Z",
                          "publishedAt": "2024-08-27T14:13:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ion interaction and segregation",
          "author": {
            "login": "zahidhasan83"
          },
          "bodyText": "Dear MOOSE users,\nI am trying to simulate the interaction of two different ion types and their segregation in two separate pores, whereby each pore will accommodate one ion type. Should I use the chemical reaction module for this sort of computation? I would appreciate your advice. If you can direct me to the right module or examples I can follow to set up such a simulation in MOOSE, I will be immensely grateful to you.\nThanks, and best regards,\nZahid",
          "url": "https://github.com/idaholab/moose/discussions/28460",
          "updatedAt": "2024-08-26T16:37:36Z",
          "publishedAt": "2024-08-23T03:23:05Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the spatial part of this process diffusion driven or advection driven?",
                  "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10425806",
                  "updatedAt": "2024-08-23T03:56:54Z",
                  "publishedAt": "2024-08-23T03:56:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the chemical reactions module will handle the reaction term well, and will have utilities to set up chains of reactions if needed. For two species, it should be easy enough to set up the equations manually with Reaction kernels though",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10431487",
                          "updatedAt": "2024-08-23T14:36:39Z",
                          "publishedAt": "2024-08-23T14:36:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zahidhasan83"
                          },
                          "bodyText": "@GiudGiud The spatial part of the process is diffusion-limited. Which reaction kernels do you mean? Will these reaction kernels consider the repulsion of chemical species and their segregation?",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10433696",
                          "updatedAt": "2024-08-23T18:42:36Z",
                          "publishedAt": "2024-08-23T18:42:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zahidhasan83"
                          },
                          "bodyText": "@GiudGiud can these reaction kernels assign repulsion between two positive or two negative ions?",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10434979",
                          "updatedAt": "2024-08-23T22:33:24Z",
                          "publishedAt": "2024-08-23T22:33:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I don't think we can do that with reaction terms?\nWhat does repulsion look like in the equations?",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10435759",
                          "updatedAt": "2024-08-24T03:32:43Z",
                          "publishedAt": "2024-08-24T03:32:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zahidhasan83"
                          },
                          "bodyText": "@GiudGiud the repulsion force is based on the Coulomb's law.\n\nTwo positive ions will diffuse through and exert repulsion force on each other. Any suggestion on solution method in MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10435932",
                          "updatedAt": "2024-08-24T04:43:44Z",
                          "publishedAt": "2024-08-24T04:43:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@permcody do you know who may have worked on this?\n@cticenhour same question, though I realize the EM module is not about ion repulsion",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10440076",
                          "updatedAt": "2024-08-24T22:17:17Z",
                          "publishedAt": "2024-08-24T22:17:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in any case this is a fairly simply form for the kernel, I could see a new kernel to model this.\nThe only difficulty is that there is not 2 individual ions here, but rather a concentration of ions in every mesh cell, so the force probably needs to be distributed in some manner",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10452540",
                          "updatedAt": "2024-08-26T14:16:52Z",
                          "publishedAt": "2024-08-26T14:16:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "@zahidhasan83 Without seeing the full set of partial differential equations (PDEs) you are trying to solve, I am unsure what to say here. I would guess that the repulsion force would impact the electromigration term of a Nernst\u2013Planck style equation modeling an individual particle concentration.\n@mangerij do you have thoughts there?",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10453265",
                          "updatedAt": "2024-08-26T15:20:39Z",
                          "publishedAt": "2024-08-26T15:20:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zahidhasan83"
                          },
                          "bodyText": "@GiudGiud the distribution of ion concentration looks similar as you have described. I am thinking if I can apply electrostatic force incorporated in the EM module, coupled with the matdiffusion kernel??\n@cticenhour Yes, the Nernst-Planck style equation is a reasonable one. The PDE looks like:\n\nSince there is no flow velocity, the advection term is gone. Another issue, ions are in a dilute solution. Therefore, if we would get a gradient in electric potential I am not sure! But ions will experience a minimal force similar to Coulomb's. Can I use the electrostatic contact condition interface-kernel in MOOSE for that? I am not quite sure. A bit lost here. Thanks for your advise.",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10453901",
                          "updatedAt": "2024-08-26T16:25:19Z",
                          "publishedAt": "2024-08-26T16:25:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "A simple electrostatic potential solve can be done using one of our family of Diffusion objects with a Reaction object (or multiple) to form what would be required from each species to form the charge density term on the right-hand-side. To simulate a simple jump in potential due to differing bulk material properties, the ElectrostaticContactCondition object may be sufficient for your needs. The tunable parameters for the contact conductance explained in the documentation were tuned to fit electric field assisted sintering (EFAS) experimental data, so you might need to get an external reference for data to find a better fit to use it in your model. This might involve running the electrostatic solve separately, with some \"dummy\" inputs for your charge density term until you find conductance behavior you're happy with.\nOnce you have potential being solved, you can then couple it in to the N-P equation you presented above. Term (3) (the potential term) might require a custom MOOSE object (inheriting from Diffusion, similar to our other Diffusion family objects) in order to take in (from the input file, or defined in source code) the properties you have laid out in this screenshot as well as the variable representing the potential. Term (1) can be represented via the TimeDerivative object, and Term (2) seems like a fairly simple MatDiffusion or FunctionDiffusion term, depending on how the Diffusivity is defined.",
                          "url": "https://github.com/idaholab/moose/discussions/28460#discussioncomment-10454023",
                          "updatedAt": "2024-08-26T16:40:00Z",
                          "publishedAt": "2024-08-26T16:37:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Crystal Plasticity Slow Computation",
          "author": {
            "login": "smithht"
          },
          "bodyText": "Hi there,\nI have been creating a dislocation density based crystal plasticity app in MOOSE. The app inherits from ComputeMultipleCrystalPlasticityStress and CrystalPlasticityStressUpdateBase. The app has been running just fine with smaller (~500 elements) simulations. As I have increased the size of my simulations to run more detailed microstructures, I have run into massive slowdowns. As an example, I ran a 36,000 element simulation on an HPC using 82 cores. It ran for 8 days, only getting to a strain of 0.00022 (0.022%) :\n\nI need to get to a strain of at least 1%, and I would also like to increase the resolution of my microstructure even further (to ~300k elements). However, the speed of my app right now is far too slow to come close to these goals. Looking into other discussion posts about a slow computation time for a crystal plasticity simulation, I see that a simulation of this size should be much faster:\n\nI see you are running with about 20k elements, for instance with 24 cpus, I would expect that simulation to take about 1 hour for each 1% strain load #26598\n\nI have profiled my code, and it revealed that most of the runtime was being spent calculating the Jacobian and the residual. A picture of the profile is found here:\n\nMuch of the runtime is spent in calculateConstitutiveSlipDerivative , and specifically pow within that function. Here is a snippet of that function:\nvoid\nCrystalPlasticityDDStressUpdate::calculateConstitutiveSlipDerivative(std::vector<Real> & dslip_dtau)\n{\n  Real effective_stress;\n  Real delF0 = (_enthalphy_const * _g * 1.0e6) * (std::pow(_burg_mag, 3.0)) * 1.0e-9;\n  // Boltzmann constant\n  Real B_k = 1.3806503e-23;\n  for (const auto i : make_range(_number_slip_systems))\n  {\n    effective_stress = _tau[_qp][i] - _backstress[_qp][i];\n    if (std::abs(effective_stress) <= _s_a[_qp][i])\n      dslip_dtau[i] = 0.0;\n    else if (MooseUtils::absoluteFuzzyEqual(_tau[_qp][i], 0.0))\n      dslip_dtau[i] = 0.0;\n    else\n    {\n      dslip_dtau[i] =\n          _slip_rate_reference *\n          std::exp((-delF0 / B_k / _temperature) *\n                   std::pow(1.0 - std::pow((std::abs(effective_stress) - _s_a[_qp][i]) / _s_t,\n                   _p),\n                            _q)) *\n          (delF0 / B_k / _temperature) * _q *\n          std::pow(1.0 - std::pow((std::abs(effective_stress) - _s_a[_qp][i]) / _s_t, _p),\n                   _q - 1.0) *\n          _p * std::pow((std::abs(effective_stress) - _s_a[_qp][i]) / _s_t, _p - 1.0) / _s_t *\n          sgn(effective_stress);\n    }\n    \n  }\n}\n\nI do not see any obvious points in this function that would be causing major slowdowns. I have tried replacing the pow function with a faster rough approximation, but that did not help.\nI believe a next step for me might be to improve the preconditioning? But I am not sure where to start with that. What type of preconditioning might give me better results for large ( > 30k elements) simulations? How would that implementation look for a CP app like this? Otherwise, would hardcoding the Jacobian improve my results? I have read that the Jacobian is calculated as part of ComputeMultipleCrystalPlasticityStress, but would hardcoding it myself improve the results? Where and how would I implement that in my app?\nHere is an example of an input file I have been using:\n[GlobalParams]\n  displacements = 'ux uy uz'\n  use_displaced_mesh = true\n[]\n\n[Mesh]\n  [cube]\n    type = EBSDMeshGenerator\n    filename = 'InitialStructure.txt'\n    show_info = true\n  []\n  [bot_corner]\n    type = ExtraNodesetGenerator\n    new_boundary = bot_corner\n    input = cube\n    coord = '0.0 0.0 0.0'\n  []\n  [bot_x_corner]\n    type = ExtraNodesetGenerator\n    new_boundary = bot_x_corner\n    input = bot_corner\n    coord = '3.0 0.0 0.0'\n  []\n  [bot_z_corner]\n    type = ExtraNodesetGenerator\n    new_boundary = bot_z_corner\n    input = bot_x_corner\n    coord = '0.0 0.0 3.0'\n  []\n[]\n\n[AuxVariables]\n  [pk2]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [fp_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [rotout]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [gss]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [euler_angle_1]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [euler_angle_2]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [euler_angle_3]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [s_a]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [grain_id]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[Modules]\n\n  [TensorMechanics]\n\n    [Master]\n\n      [all]\n        strain = FINITE\n        add_variables = true\n        generate_output = stress_yy\n      []\n    []\n  []\n[]\n\n[AuxKernels]\n  [fp_yy]\n    type = RankTwoAux\n    variable = fp_yy\n    rank_two_tensor = plastic_deformation_gradient\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  []\n  [pk2]\n    type = RankTwoAux\n    variable = pk2\n    rank_two_tensor = second_piola_kirchhoff_stress\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  []\n  [e_yy]\n    type = RankTwoAux\n    variable = e_yy\n    rank_two_tensor = total_lagrangian_strain\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  []\n  [gss]\n    type = MaterialStdVectorAux\n    variable = gss\n    property = slip_resistance\n    index = 0\n    execute_on = timestep_end\n  []\n  [slip_inc]\n    type = MaterialStdVectorAux\n    variable = slip_increment\n    property = slip_increment\n    index = 0\n    execute_on = timestep_end\n  []\n  [euler_angle_1]\n    type = MaterialRealVectorValueAux\n    variable = euler_angle_1\n    property = updated_Euler_angle\n    component = 0\n    execute_on = timestep_end\n  []\n  [euler_angle_2]\n    type = MaterialRealVectorValueAux\n    variable = euler_angle_2\n    property = updated_Euler_angle\n    component = 1\n    execute_on = timestep_end\n  []\n  [euler_angle_3]\n    type = MaterialRealVectorValueAux\n    variable = euler_angle_3\n    property = updated_Euler_angle\n    component = 2\n    execute_on = timestep_end\n  []\n  [s_a]\n    type = MaterialStdVectorAux\n    variable = s_a\n    property = s_a\n    index = 0\n    execute_on = timestep_end\n  []\n  [grain_id]\n    type = MaterialRealAux\n    variable = grain_id\n    property = grain_id\n    execute_on = timestep_end\n  []\n[]\n\n[BCs]\n  [y_roller]\n    type = DirichletBC\n    preset = true\n    variable = uy\n    boundary = bottom\n    value = 0.0\n  []\n  [x_corner]\n    type = DirichletBC\n    preset = true\n    variable = uz\n    boundary = bot_x_corner\n    value = 0.0\n  []\n  [z_corner]\n    type = DirichletBC\n    preset = true\n    variable = ux\n    boundary = bot_z_corner\n    value = 0.0\n  []\n\n  [z_bot]\n    type = DirichletBC\n    preset = true\n    variable = ux\n    boundary = bot_corner\n    value = 0.0\n  []\n\n  [y_bot]\n    type = DirichletBC\n    preset = true\n    variable = uy\n    boundary = bot_corner\n    value = 0.0\n  []\n\n  [x_bot]\n    type = DirichletBC\n    preset = true\n    variable = uz\n    boundary = bot_corner\n    value = 0.0\n  []\n\n  [tdisp]\n    type = FunctionDirichletBC\n    variable = uy\n    boundary = top\n    function = '0.01*t'\n  []\n[]\n\n[Materials]\n  [elasticity_tensor]\n    type = ComputeElasticityTensorCPCustom\n    C_ijkl = '243300.0 156700.0 156700.0 243300.0 156700.0 243300.0 111125.0 111125.0 111125.0'\n    # C11 C12 C12 C11 C12 C11 C44 C44 C44\n    fill_method = symmetric9\n    Dream3DReader = Dream3DReaderObject\n  []\n  [stress]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl'\n    tan_mod_type = exact\n\n    rtol = 1e-4 # Constitutive stress residual relative tolerance\n    # maxiter_state_variable = 50 # Maximum number of iterations for stress update\n    maximum_substep_iteration = 2 # Maximum number of substep iteration\n\n    use_line_search = true\n  []\n  [trial_xtalpl]\n    type = CrystalPlasticityDDStressUpdate\n    #type = CrystalPlasticityKalidindiUpdate\n    crystal_lattice_type = FCC\n    number_slip_systems = 12\n    slip_sys_file_name = fcc_slip_sys.txt\n    Dream3DReader = Dream3DReaderObject\n\n    g = 111125 # MPa\n    burg_mag = 2.53e-07\n\n    # params\n    slip_rate_reference = 4000000.0\n    enthalpy_const = 0.25\n    p = 0.35\n    q = 1.34140625\n    p0 = 1.65625\n    k_rho = 0.2845\n    k_i = 0.12\n    s_t = 290.0\n    r = 0.7937500000000001\n    h = 5.078125\n    rho_m_initial = 500000.0\n    rho_i_initial = 371093.75\n    k_m = 0.0363281249999999\n    r_c = 3.919375000000001e-06\n    k_ann = 2.0\n    k_d = 57.34375\n    k_bs1 = 74.53125\n    k_bs2 = 4812.5\n\n\n    slip_increment_tolerance = 1.0 # Maximum allowable slip in an increment\n    stol = 1.0 # Constitutive internal state variable relative change tolerance\n    resistance_tol = 1.0\n  []\n  [updated_euler_angle]\n    type = ComputeUpdatedEulerAngle\n    radian_to_degree = true\n  []\n[]\n\n[Postprocessors]\n  [stress_yy]\n    type = ElementAverageValue\n    variable = stress_yy\n  []\n  [pk2]\n    type = ElementAverageValue\n    variable = pk2\n  []\n  [fp_yy]\n    type = ElementAverageValue\n    variable = fp_yy\n  []\n  [e_yy]\n    type = ElementAverageValue\n    variable = e_yy\n  []\n  [gss]\n    type = ElementAverageValue\n    variable = gss\n  []\n  [slip_increment]\n    type = ElementAverageValue\n    variable = slip_increment\n  []\n\n  [run_time]\n    type = PerfGraphData\n    section_name = \"Root\"\n    data_type = total\n  []\n\n  [euler_angle_1]\n    type = ElementAverageValue\n    variable = euler_angle_1\n  []\n  [euler_angle_2]\n    type = ElementAverageValue\n    variable = euler_angle_2\n  []\n  [euler_angle_3]\n    type = ElementAverageValue\n    variable = euler_angle_3\n  []\n\n  [s_a]\n    type = ElementAverageValue\n    variable = s_a\n  []\n  [grain_id]\n    type = ElementAverageValue\n    variable = grain_id\n  []\n[]\n\n[UserObjects]\n  [Dream3DReaderObject]\n    type = Dream3DDataReader\n    file_name = 'InitialStructureASCII.txt'\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  petsc_options_value = ' asm      2              lu            gmres     200'\n  nl_abs_tol = 1e-10\n  nl_rel_tol = 1e-10\n  nl_abs_step_tol = 1e-10\n  nl_max_its = 5 # Max number of nonlinear iterations\n\n  start_time = 0.0\n  end_time = 3.0\n  #num_steps = 25\n  dt = 0.005\n\n  dtmin = 0.1e-9\n  dtmax = 0.01\n[]\n\n[Outputs]\n  file_base = 'out'\n  csv = true\n  exodus = true\n  perf_graph = true # prints a performance report to the terminal\n  #print_linear_residuals = true\n  #console = false\n  # [./console]\n  #   type = Console\n  #   output_linear = false\n  #   max_rows = 5\n  #   outlier_variable_norms = false\n  #   enable = false\n  #   #output_screen = false\n  # [../]\n[]\n\n# [Debug]\n#   show_var_residual_norms = true\n# []",
          "url": "https://github.com/idaholab/moose/discussions/27931",
          "updatedAt": "2024-08-26T15:37:52Z",
          "publishedAt": "2024-06-18T18:44:09Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nis std::pow( used with an integer exponent by any chance?",
                  "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9810583",
                  "updatedAt": "2024-06-18T20:41:53Z",
                  "publishedAt": "2024-06-18T20:41:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "No, they aren't integers. _p is ~0.35 and _q is ~1.3. So the exponents used in calculateConstitutiveSlipDerivative are 0.35, 1.3, -0.65, and 0.3 (or in that range. p and q can change by about +- 0.1)",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9810640",
                          "updatedAt": "2024-06-18T20:51:51Z",
                          "publishedAt": "2024-06-18T20:51:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok. We have an optimized pow() for integer exponents that's why I asked\nfor preconditioning,\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = ' lu'\n\nsolves in very few iterations but could be slower still, especially for larger simulations",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9810665",
                          "updatedAt": "2024-06-18T20:56:35Z",
                          "publishedAt": "2024-06-18T20:56:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "Hi, @GiudGiud , thank you for the suggestion. It looks like that petsc preconditioner helped improve the runtime by about 30%. However, the runtime for simulations with over 30,000 elements is still far too long to finish in a reasonable amount of time. Would changing the MOOSE preconditioner help in any way? What would changing that look like? Also, would hard coding the Jacobian yield any other improvements?",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9860998",
                          "updatedAt": "2024-06-24T13:52:35Z",
                          "publishedAt": "2024-06-24T13:52:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Also, would hard coding the Jacobian yield any other improvements?\n\nThis should be 30% faster than AD if you are up for the task. It may be even fasters with tensor computations.\n\nWould changing the MOOSE preconditioner help in any way?\n\nYes it can. However at 30k elements we don't expect any scaling issues. LU might already be one of the fastest options",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9861096",
                          "updatedAt": "2024-06-24T14:00:49Z",
                          "publishedAt": "2024-06-24T14:00:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "Thanks, I will try to hand code the Jacobian then. I am a little confused where I need to implement this. Where is it that computeQpJacobian() needs to be overridden? This is something that belongs to a kernel, and not a material right? If I am using the SolidMechanics/Quasistatic master action:\n[Physics/SolidMechanics/QuasiStatic/all]\n  strain = FINITE\n  add_variables = true\n  generate_output = stress_yy\n[]\n\nhow would I know what kernel to change? Thanks again for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9862123",
                          "updatedAt": "2024-06-24T15:34:34Z",
                          "publishedAt": "2024-06-24T15:34:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you use Physics/SolidMechanics/QuasiStatic/all then I dont think you need to implement anything\nuse_automatic_differentiation in this action defaults to false",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9862312",
                          "updatedAt": "2024-06-24T15:51:31Z",
                          "publishedAt": "2024-06-24T15:51:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "Where do I override computeQpJacobian() ?",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9862344",
                          "updatedAt": "2024-06-24T15:54:25Z",
                          "publishedAt": "2024-06-24T15:54:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in kernels",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-9862432",
                          "updatedAt": "2024-06-24T16:03:03Z",
                          "publishedAt": "2024-06-24T16:03:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "@GiudGiud , I think I may have misunderstood what you said here initially:\n\nIf you use Physics/SolidMechanics/QuasiStatic/all then I dont think you need to implement anything use_automatic_differentiation in this action defaults to false\n\nWere you saying that since the solid mechanics master action doesn\u2019t use AD by default, that I won't gain anything from trying to hand code my Jacobian?\nOn another note, @sapitts , I see that you have assisted with Crystal Plasticity questions in the past. Do you have any input as to why I might be having such bad scaling issues?",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-10431586",
                          "updatedAt": "2024-08-23T14:46:52Z",
                          "publishedAt": "2024-08-23T14:46:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If it does not use AD then it does benefit from implementing the Jacobian terms manually",
                          "url": "https://github.com/idaholab/moose/discussions/27931#discussioncomment-10431709",
                          "updatedAt": "2024-08-23T14:58:10Z",
                          "publishedAt": "2024-08-23T14:58:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}