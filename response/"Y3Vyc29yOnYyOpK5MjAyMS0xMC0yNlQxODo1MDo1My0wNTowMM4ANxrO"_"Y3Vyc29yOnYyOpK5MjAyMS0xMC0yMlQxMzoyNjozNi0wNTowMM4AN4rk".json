{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0xMC0yMlQxMzoyNjozNi0wNTowMM4AN4rk"
    },
    "edges": [
      {
        "node": {
          "title": "Unsupported Order: 257",
          "author": {
            "login": "japresa"
          },
          "bodyText": "Hello. I'm running SAM/MOOSE simulation for a reactor geometry I made using TRELIS and am confused on why I'm getting the following error. Couldn't understand the error-code or find any information online where to start debugging.\nThe error occurs after adding component physics. Here is a screen shot of some error code.\nAnything helps!",
          "url": "https://github.com/idaholab/moose/discussions/19207",
          "updatedAt": "2022-06-23T13:53:43Z",
          "publishedAt": "2021-10-26T06:46:54Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ABallisat"
                  },
                  "bodyText": "I normally get this when the variables are of a higher order than the elements in your mesh, e.g. using a second order variable with quad4 elements. What elements and order of variables are you using?",
                  "url": "https://github.com/idaholab/moose/discussions/19207#discussioncomment-1536710",
                  "updatedAt": "2022-06-23T13:53:36Z",
                  "publishedAt": "2021-10-26T07:39:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "japresa"
                          },
                          "bodyText": "Thank you so much! Just realized I was using second order when trying element HEX8. I changed all my second order equations to first order and was able to get the simulation running.",
                          "url": "https://github.com/idaholab/moose/discussions/19207#discussioncomment-1541426",
                          "updatedAt": "2022-06-23T13:53:38Z",
                          "publishedAt": "2021-10-26T21:09:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "inverse modelling using MOOSE",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hi everyone,\n@cpgr and i have a model containing some MaterialProperties that we'd like to estimate.  We do this by comparing the MOOSE outputs with experimental measurements.  We'd like to iteratively converge to the solution using Levenberg-Marquardt or Newton (or similar).  So, the steps are:\n\nInitialize model with guestimates for the Property values\nRun MOOSE with the current Property values, and calculate the objective function (difference between MOOSE output and experiment)\nModify the Property values one-by-one and Run MOOSE each time, calculating the change in the objective function.\nCalculate the Jacobian (change in objective function / change in Properties) and use Newton (or whatever) to update the Property values to reduce the objective function.  Goto 1, until the process converges.\n\nWe can do this process outside MOOSE, but it'd be great to use some MOOSE tools, if they exist.  Obviously (2) is embarrassingly parallel, and that's where the algorithm will spend its time.\nAny suggestions?\na",
          "url": "https://github.com/idaholab/moose/discussions/19086",
          "updatedAt": "2022-08-16T22:42:22Z",
          "publishedAt": "2021-10-13T01:53:34Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@lynnmunday @zachmprince",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1468040",
                  "updatedAt": "2022-08-16T22:42:24Z",
                  "publishedAt": "2021-10-13T02:39:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "Hi Andy,\nwe are working on this right now.  We have a new optimization executioner that is using TAO and the multiapp system to run the forward and adjoint problem.  We are in the process of getting this code cleaned up and made available in an external app called isopod.  I don't think it is clean enough to go into MOOSE.  I think it is going to be another few weeks before I have it documented and the tests passing and then we can make it available.",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1472038",
                  "updatedAt": "2022-08-16T22:42:25Z",
                  "publishedAt": "2021-10-13T16:26:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi Andy, we are working on this right now. We have a new optimization executioner that is using TAO and the multiapp system to run the forward and adjoint problem. We are in the process of getting this code cleaned up and made available in an external app called isopod. I don't think it is clean enough to go into MOOSE. I think it is going to be another few weeks before I have it documented and the tests passing and then we can make it available.\n\nDo you think we can wait for \"another few weeks\", @cpgr ?   My thought is we can't.\n@lynnmunday , if it's going to be publicly available, can you give us access now?\na",
                          "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473495",
                          "updatedAt": "2022-08-16T22:42:25Z",
                          "publishedAt": "2021-10-13T21:30:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zachmprince"
                          },
                          "bodyText": "@WilkAndy @cpgr, I just added you to the (temporary) Isopod repository so you can check it out. There is a  material inversion example in test/tests/formfunction/objective_minimize/material/. This example uses a gradient-free solver, so it is pretty inefficient, but based on your suggested algorithm it doesn't sound like that is much of a problem.  A good initial guess is very important here.",
                          "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473559",
                          "updatedAt": "2022-08-16T22:42:26Z",
                          "publishedAt": "2021-10-13T21:48:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Dvora-I"
                          },
                          "bodyText": "Long-time expect such a tool. Wait for isopod!",
                          "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1514119",
                          "updatedAt": "2022-08-16T22:42:29Z",
                          "publishedAt": "2021-10-21T12:24:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zhang-rite"
                          },
                          "bodyText": "Hope this module can go into MOOSE soon!",
                          "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1535792",
                          "updatedAt": "2022-08-18T15:22:59Z",
                          "publishedAt": "2021-10-26T02:01:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Thanks @zachmprince and @lynnmunday. As @WilkAndy said, we probably would have had to hack something together ourselves as we are time constrained with this problem, so letting us access your work is a great help and very generous.",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473670",
                  "updatedAt": "2022-08-16T22:42:29Z",
                  "publishedAt": "2021-10-13T22:27:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I second that!  This is great - i'm just compiling isopod now.",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473726",
                  "updatedAt": "2022-08-16T22:42:30Z",
                  "publishedAt": "2021-10-13T22:52:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "We had a similar situation where we want to adjust a parameter so the eigenvalue from calculation is equal to 1. We ended up writing our own solve object (or just executioner) with Newton method. The parameter must be something controllable in the input and the executioner accepts the parameter name. It will be nice to generalize this to multi-dimensional problems with the number of equations equal or greater than the number of parameters.",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473877",
                  "updatedAt": "2022-08-16T22:42:30Z",
                  "publishedAt": "2021-10-13T23:35:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "zachmprince"
                          },
                          "bodyText": "i would definitely like to hook Griffin in with isopod at some point. It works by computing an adjoint for the derivative in the parameter space, which is well defined for neutron transport. But it is probably overkill for something like criticality search.",
                          "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1475014",
                          "updatedAt": "2022-09-21T12:57:03Z",
                          "publishedAt": "2021-10-14T06:59:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "If this is a very simple 1D optimization problem, with a Real controllable parameter, you can also use the PIDTransientControl to use a PID controller to converge on the solution (as evaluated by postprocessors) during a pseudo transient",
                  "url": "https://github.com/idaholab/moose/discussions/19086#discussioncomment-1473883",
                  "updatedAt": "2022-09-21T12:57:03Z",
                  "publishedAt": "2021-10-13T23:38:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Control input parameter consistently in multi-level multiapps",
          "author": {
            "login": "dewenyushu"
          },
          "bodyText": "I would like to gather output data from a problem with different input parameters. The problem is designed as a multi-app problem, where one master app calling the full solve of one sub-app (master_app ->sub_app). The master-app and sub-app solves for different physics, but shares some input parameters that I'd like to perturb.\nSo what I am trying to do is to have a control app, which samples the input parameters and controls the master-app by using MultiAppCommandLineControl. However, I am not sure how to change the input parameters in the sub-app accordingly (e.g., for one sample, I'd like to keep the input parameters consistent between the master-app and the sub-app).",
          "url": "https://github.com/idaholab/moose/discussions/19203",
          "updatedAt": "2022-08-02T18:18:22Z",
          "publishedAt": "2021-10-25T21:52:06Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dewenyushu"
                  },
                  "bodyText": "@zachmprince would you mind providing some suggestions here?",
                  "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535138",
                  "updatedAt": "2022-08-02T18:18:23Z",
                  "publishedAt": "2021-10-25T21:53:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "zachmprince"
                  },
                  "bodyText": "This is how I would do this. So you have three files: stm.i (the stochastic tools driver), main.i (the main physics app), and sub.i (the sub physics app). Let's say you want to perturb the parameter value in a BodyForce kernel of a sub app.\nsub.i:\n[Kernels]\n  [force]\n    type = BodyForce\n    variable = u\n    value = 1 # Fake value\n  []\n[]\n\nmain.i\nbf_value = 1 # Fake value, which is sent to the sub app\n\n[MultiApps]\n  [sub]\n    ...\n    cli_args = 'Kernels/force/value=${bf_value}'\n  []\n[]\n\nstm.i:\n[Controls]\n  [cmdline]\n    type = MultiAppCommandLineControl\n    ...\n    param_names = 'bf_value'\n  []\n[]\n\nThe stm app will control the parameter bf_value in the main app which will subsequently send it to the kernel parameter in the sub app.",
                  "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535209",
                  "updatedAt": "2022-08-02T18:18:23Z",
                  "publishedAt": "2021-10-25T22:07:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "Thanks @zachmprince ! It is really nice that we can put cli_args  in the MultiApps .\nIt seems to be the case though that we can only have one cli_args per sub-app. Any idea how to pass multiple parameters for one sub-app?",
                          "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535287",
                          "updatedAt": "2022-08-02T18:18:28Z",
                          "publishedAt": "2021-10-25T22:46:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zachmprince"
                          },
                          "bodyText": "You can have multple values using cli_args='Kernels/force1/value=${bf_value1};Kernels/force2/value=${bf_value2}. Note the ; separating the parameters and there can't be any spaces.",
                          "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535300",
                          "updatedAt": "2022-08-02T18:18:28Z",
                          "publishedAt": "2021-10-25T22:54:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "Oh that's right - I was using spaces, which were recognized as one input per sub-app. Thanks Zach! This works great now!",
                          "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535311",
                          "updatedAt": "2022-08-02T18:18:29Z",
                          "publishedAt": "2021-10-25T22:58:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Let's document this trick with ; somewhere btw",
                          "url": "https://github.com/idaholab/moose/discussions/19203#discussioncomment-1535321",
                          "updatedAt": "2022-08-02T18:18:43Z",
                          "publishedAt": "2021-10-25T23:02:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Extract the component ID of a vector",
          "author": {
            "login": "QuangDom"
          },
          "bodyText": "Hi,\nI am looking for a method to extract the component id of a vector. For example, during the loop of _i in the method VectorIntegratedBC::computeResidual(). How can I know _i is belong to which component of the vector?\nVectorIntegratedBC::computeResidual()\n{\n  prepareVectorTag(_assembly, _var.number());\n  for (_qp = 0; _qp < _qrule->n_points(); _qp++)\n    for (_i = 0; _i < _test.size(); _i++)\n    {\n      Real residual = _JxW[_qp] * _coord[_qp] * computeQpResidual();\n      _local_re(_i) += residual;\n    }\n  accumulateTaggedLocalResidual();\n}",
          "url": "https://github.com/idaholab/moose/discussions/19201",
          "updatedAt": "2022-06-14T05:13:50Z",
          "publishedAt": "2021-10-25T19:53:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "_i should be the component index here.\nYou can look at the computeQpResidual routine to convince yourself\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19201#discussioncomment-1534703",
                  "updatedAt": "2022-06-14T05:13:51Z",
                  "publishedAt": "2021-10-25T20:03:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "doquang"
                          },
                          "bodyText": "Hi @GiudGiud,\nIn my case _i loops from 0..8. Where, the vector is a 2D-vector of QUAD4 element. Therefore, I would like to know which _i is x-component, and which _i is y-component.\nThanks in advance,",
                          "url": "https://github.com/idaholab/moose/discussions/19201#discussioncomment-1534768",
                          "updatedAt": "2022-06-14T05:13:57Z",
                          "publishedAt": "2021-10-25T20:18:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh true this is not as I thought.\nOk so this BC is built so that the residual is (usually) the result vector product, multiplied by the value of a vector. So all the components of the variable are involved in computing the residual.\nSee https://github.com/idaholab/moose/blob/next/framework/src/bcs/VectorPenaltyDirichletBC.C for an example in framework/\nand https://github.com/idaholab/moose/blob/next/modules/navier_stokes/src/bcs/INSADMomentumNoBCBC.C for an example in the context of fluid flow.\nYou should not have to modify computeResidual btw. Only the computeQpResidual routines should need to be provided.",
                          "url": "https://github.com/idaholab/moose/discussions/19201#discussioncomment-1534939",
                          "updatedAt": "2022-06-14T05:13:57Z",
                          "publishedAt": "2021-10-25T21:01:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Conda stuck solving environment",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "Hello,\nIm having trouble installing moose-tools and moose-libmesh on a linux cluster for continuous integration. I have followed the steps on the installation guide and when i get to the step:\nconda install moose-tools\nconda install moose-libmesh\n\nwhere It gets stuck on Solving environment: ...working...  for hours. I have tried googling this error but i have found no solution which works. I have also tried the previous solution found on the moose form. I have tried installing libmesh first but it has not worked, and using conda clean. The CI has a time limit of 6 hours before it kills the process. Anyone have ideas for how to fix this?\nThanks,\nZack",
          "url": "https://github.com/idaholab/moose/discussions/19196",
          "updatedAt": "2021-10-25T20:07:51Z",
          "publishedAt": "2021-10-25T15:06:51Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "Try this instead:\nconda update --all\nconda install mamba\nmamba install moose-tools moose-libmesh",
                  "url": "https://github.com/idaholab/moose/discussions/19196#discussioncomment-1533146",
                  "updatedAt": "2021-10-25T15:33:13Z",
                  "publishedAt": "2021-10-25T15:33:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "I get an error when installing mamba:\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: failed\nERROR conda.core.link:_execute(502): An error occurred while installing package 'conda-forge::colorama-0.4.4-pyh9f0ad1d_0'.\nOSError(2, 'No such file or directory')\nAttempting to roll back.",
                          "url": "https://github.com/idaholab/moose/discussions/19196#discussioncomment-1534302",
                          "updatedAt": "2021-10-25T18:45:43Z",
                          "publishedAt": "2021-10-25T18:45:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ah weird. Can you try again later? There s flukes with conda.\nIf it doesnt work can you try again from a fresh environment?",
                          "url": "https://github.com/idaholab/moose/discussions/19196#discussioncomment-1534708",
                          "updatedAt": "2021-10-25T20:06:00Z",
                          "publishedAt": "2021-10-25T20:06:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "My boss was able to get it to work. Thanks for the help, installing with mamba did the trick",
                          "url": "https://github.com/idaholab/moose/discussions/19196#discussioncomment-1534715",
                          "updatedAt": "2021-10-25T20:07:41Z",
                          "publishedAt": "2021-10-25T20:07:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Are you not able to use DG kernels and MOOSE FV objects?",
          "author": {
            "login": "aladshaw3"
          },
          "bodyText": "Hello,\nI am doing some testing with the incompressible Navier-Stokes module with MOOSE FVs. I wanted to couple the velocity field from FVs with another set of kernels for mass transport using DG methods. However, if I activate any DG kernels I get the following.\n*** ERROR ***\ndofIndicesLower not supported by MooseVariableFVBase\nI also get this even if no FV variable is coupled to any non-FV variable. Is it not possible to have DG kernels active with FV stuff in MOOSE?",
          "url": "https://github.com/idaholab/moose/discussions/19128",
          "updatedAt": "2022-06-15T18:03:09Z",
          "publishedAt": "2021-10-16T18:51:27Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere's very limited support for FE-FV coupling right now. We have this PR that will start to improve this: #18394\nbut I dont know that it includes DG kernels.\nWhat are you trying to do with those DG kernels? It s pretty likely it can be done in FV already, and if not we may want to add it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1491387",
                  "updatedAt": "2022-06-15T18:03:09Z",
                  "publishedAt": "2021-10-18T04:55:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aladshaw3"
                  },
                  "bodyText": "@GiudGiud\nSeveral years back, I had started developing a series of DG kernels for use in my own MOOSE modules for catalysis and adsorption (https://github.com/aladshaw3/cats). I used DG kernels for improved stability and conservation laws. When I developed them, I made them such that any velocity terms could be variables and I planned to later link those kernels to a flow field simulation. I had some success coupling with the CGFE incompressible Navier-Stokes modules, but wanted to try using the FV version of those kernels for stability.\nWhen I had started this work, there was no FV kernels. Now that there are FV kernels, I could rework some things to do everything with FV, but that is an undertaking that may take a lot of time, so I wanted to see about coupling DG kernels and variables (which I already have coded) with the new FV system for flow fields.",
                  "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1495198",
                  "updatedAt": "2022-06-15T18:03:14Z",
                  "publishedAt": "2021-10-18T12:26:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That's really cool. I hope FV improves the stability, it's easier to converge as far as I've noticed\n@csdechant does your PR enable DG Kernels?",
                          "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1497732",
                          "updatedAt": "2022-06-15T18:03:14Z",
                          "publishedAt": "2021-10-18T17:33:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@lindsayad @rwcarlsen since you're reviewing that PR",
                          "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1534571",
                          "updatedAt": "2022-06-15T18:03:13Z",
                          "publishedAt": "2021-10-25T19:36:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "#18394 should be agnostic of the backing FEType",
                          "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1534586",
                          "updatedAt": "2022-06-15T18:03:13Z",
                          "publishedAt": "2021-10-25T19:37:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "But @csdechant has been hard to pin down recently \ud83d\ude04",
                          "url": "https://github.com/idaholab/moose/discussions/19128#discussioncomment-1534587",
                          "updatedAt": "2022-06-15T18:06:17Z",
                          "publishedAt": "2021-10-25T19:38:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Modify input parameter 'NAME' during runtime [Control]",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI'm wondering if it's possible to modify input parameter 'NAME' during runtime?\nSince my simulation has quite a number of steps (100-300 mining frames), at each step we need to upload material property (damage) and it becomes very messy and might affect the memory usage of the simulation\nfor example at each time step we need to have 4 objects\nuserobject block\n  [./damage_read_1]\n    type = ElementPropertyReadFile\n    prop_file_name = 'damage_1.csv'     ******** control name here\n    nprop = 1\n    read_type = element\n  [../]\n\nmaterial block\n\n  [damage_1]\n    type = GenericConstantArrayTC\n    prop_name = damage_1\n    read_prop_user_object = damage_read_1   ******** or here\n    []\n\n  [./permeability_all_1]\n    type = PorousFlowPermeabilityConstTC\n    read_prop_user_object = perm_read\n    damage = damage_1\n    aw = 20\n    kmax = 1e-7\n  [../]\n  \nControl block\n  [right_control]\n    type = ConditionalFunctionEnableControl\n    enable_objects = 'Materials::permeability_all_1'\n    conditional_function = ''if(t=2,1,0)''\n    execute_on = 'initial timestep_begin'\n  []\n\ninstead, is it possible to just change the highlighted parameter name, base on the list from .csv file using [Control]?\nin this case, I can just change the material/damage/read_prop_user_object  then everything can stay the same.\nOr even better at userobject/ElementPropertyReadFile/prop_file_name = 'damage_1.csv'\nfor example\nt1 userobject/ElementPropertyReadFile/prop_file_name = 'damage_1.csv'\nt2 userobject/ElementPropertyReadFile/prop_file_name = 'damage_2.csv'\nt3 userobject/ElementPropertyReadFile/prop_file_name = 'damage_3.csv'\n\nin this case, i'd only need 100-300 control objects rather than 4x(100-300) objects in the input file.\nI checked https://mooseframework.inl.gov/syntax/Controls/index.html\nbut not sure which one is the right one for me\n\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/19167",
          "updatedAt": "2022-06-29T11:30:16Z",
          "publishedAt": "2021-10-21T01:45:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Not really. You can control objects, Real and bool. For some objects it would be totally valid to change a string, but for many others the string parameter is used to fetch a reference at initialization and changing the string during the simulation would just not do anything.\nI think your solution here is to code the reading of a CSV file with a column for the time coordinate.",
                  "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1511921",
                  "updatedAt": "2022-06-29T11:30:20Z",
                  "publishedAt": "2021-10-21T03:17:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "another solution would be to actually control the string (so add a new Control)\nand to add a timestepSetup routine to the UserObject (or whichever system you want the Control to intervene on) and in that routine, query the right object after the control has run\nThe timestepSetup routine comes from the SetupInterface, make sure the object you want to use inherits that interface",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1512186",
                          "updatedAt": "2022-06-29T11:30:20Z",
                          "publishedAt": "2021-10-21T04:54:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud, thank you! i'm still not sure if I understand all that yet, I need some time to digest and I will get back to you soon.",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1513875",
                          "updatedAt": "2022-06-29T11:30:21Z",
                          "publishedAt": "2021-10-21T11:30:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud, also a quick question, apparently it seems like my own material isn't controllable\nThe following error occurred in the object \"damage_control_1\", of type \"ConditionalFunctionEnableControl\".\nthis is the error message:\nThe desired parameter 'Materials::damage1/enable' was not located for the 'damage_control_1' object, it either does not exist or has not been declared as controllable.\nI thought it'd work out of the box, BCs and UserObjects are controllable though, not sure why materials isn't, where should I look into this?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1513890",
                          "updatedAt": "2022-06-29T11:30:21Z",
                          "publishedAt": "2021-10-21T11:33:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How old is your MOOSE?\nwe have fixed that (Materials being controllable) a few weeks ago",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1514612",
                          "updatedAt": "2022-07-05T12:33:05Z",
                          "publishedAt": "2021-10-21T14:01:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "How old is your MOOSE? we have fixed that (Materials being controllable) a few weeks ago\n\nHi @GiudGiud I updated it, seems like that problem is gone, but doesn't seem like it works properly\nso I tested it with MOOSE default material\nControl block\n  [perm_1]\n      type = ConditionalFunctionEnableControl\n      enable_objects = 'Materials::permeability_1'\n      conditional_function = 'if(t>=0 & t<1,1,0)'\n      execute_on =  'initial timestep_begin'\n  []\n  [perm_2]\n    type = ConditionalFunctionEnableControl\n    enable_objects = 'Materials::permeability_2'\n    conditional_function = 'if(t>=1 & t<2,1,0)'\n    execute_on =  'initial timestep_begin''\n  []\n\nMaterials block\n    [permeability_1]\n    type = PorousFlowPermeabilityConst\n    permeability = '1e-9 0 0 0 1e-9 0 0 0 1e-9'\n   []\n  [permeability_2]\n  type = PorousFlowPermeabilityConst\n  permeability = '5e-9 0 0 0 5e-9 0 0 0 5e-9'\n []\n\nSo after T>=1, permeability_1 should be deactivate, but seems like it's still active\nSo i got this error right at the start of the simulation\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nThe following material properties are declared on block 2 by multiple materials:\n  Material Property             Material Objects\n  PorousFlow_permeability_qp    PorousFlow_density_nodal_all PorousFlow_density_qp_all PorousFlow_relative_permeability_nodal_all PorousFlow_relative_permeability_qp_all PorousFlow_viscosity_nodal_all PorousFlow_viscosity_qp_all permeability_1 permeability_2 porosity_nodal \n  dPorousFlow_permeability_qp_dgradvarPorousFlow_density_nodal_all PorousFlow_density_qp_all PorousFlow_relative_permeability_nodal_all PorousFlow_relative_permeability_qp_all PorousFlow_viscosity_nodal_all PorousFlow_viscosity_qp_all permeability_1 permeability_2 porosity_nodal \n  dPorousFlow_permeability_qp_dvarPorousFlow_density_nodal_all PorousFlow_density_qp_all PorousFlow_relative_permeability_nodal_all PorousFlow_relative_permeability_qp_all PorousFlow_viscosity_nodal_all PorousFlow_viscosity_qp_all permeability_1 permeability_2 porosity_nodal \n\nMoreover, when I removed Control/perm2 and Materials/permeability_2 the simulation still works fine even when T>1, but perm1 should be gone when T>1. This makes me think the permeability_1 is still there even I deactivate it.\nCould you please help me look into this?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1517846",
                          "updatedAt": "2022-07-05T12:33:05Z",
                          "publishedAt": "2021-10-22T03:16:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud all good now, I just need\n[Problem]\n  material_dependency_check = false\n[]\n\nin my input file, not sure why, but it works, I will test with an actual case and get back to you",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1518120",
                          "updatedAt": "2022-07-05T12:33:13Z",
                          "publishedAt": "2021-10-22T04:58:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "merge the two control blocks and have a disable_objects parameter, i think that will help",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1518138",
                          "updatedAt": "2022-07-05T12:33:10Z",
                          "publishedAt": "2021-10-22T05:02:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "merge the two control blocks and have a disable_objects parameter, i think that will help\n\nI was thinking of doing that using TimePeriod, but when I have 120+ objects, I'm not sure how to chain them\nrn I'm doing the simplest case where I have 120 control objects and 120 material objects",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1518143",
                          "updatedAt": "2022-07-05T12:38:05Z",
                          "publishedAt": "2021-10-22T05:06:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ah yes.\nWell if it works with 120 controls I m glad but you could just write a single control that handles a vector of inputs and only activates one at a time at this point.",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1518180",
                          "updatedAt": "2022-07-05T12:38:10Z",
                          "publishedAt": "2021-10-22T05:20:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Ah yes. Well if it works with 120 controls I m glad but you could just write a single control that handles a vector of inputs and only activates one at a time at this point.\n\nyeh that's a good idea (similar to my constraints, I reckon), at this point I'm still not sure how to implement it with time, I know you posted about it above, but still not sure where to look for",
                          "url": "https://github.com/idaholab/moose/discussions/19167#discussioncomment-1518268",
                          "updatedAt": "2022-07-05T12:38:10Z",
                          "publishedAt": "2021-10-22T05:50:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Adjusting Executioner parameters during runtime or setting a Stopping criterion",
          "author": {
            "login": "ttruster"
          },
          "bodyText": "I am just starting into using MOOSE, so I apologize if this is covered in a test input somewhere, but I haven't located one yet. The analysis I am considering is of a multi element/material model, but I'll describe a simple problem by analogy.\nI am desiring to simulation a Maxwell material (spring and dashpot in series) under an applied force that is initially ramped quickly and then helped fixed for an indefinite time (solid mechanics folks: think of a creep experiment). Since the material is nonlinear, I'd like to use the IterationAdaptiveDT TimeStepper for Transient Execution. Thus, the simulation can have a small dt initially, and then adaptively increase once the load is at its hold period. Then, I'd like the simulation to finish/stop once the total elongation/displacement of the material has reached a \"criteria\"; for instance a certain target value. While I could set the end_time to some value that I think the device/material will pass/exceed the criterion, that time will change with different material coefficients and is thus \"hard\" to estimate.\nI am looking for a good example that talks about the Controls systems like TimePeriods or perhaps one that discusses the control_tags input parameter, which could shed light on how to build such a criteria.\nThank you,\nTim",
          "url": "https://github.com/idaholab/moose/discussions/19112",
          "updatedAt": "2022-06-14T16:32:25Z",
          "publishedAt": "2021-10-14T21:27:16Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Tim\nYou can use the steady state detection option, explained here\nhttps://mooseframework.inl.gov/source/executioners/Transient.html. It will terminate the transient in time based on the residual\nFor a custom termination criteria, you can also use a Terminator https://mooseframework.inl.gov/source/userobject/Terminator.html\nYou ll have to use postprocessors to retrieve terms in the criteria you want, then a formula can be parsed by the Terminator in the expression field. I think this will crash the simulation on request though! Might not be the end you want\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19112#discussioncomment-1479587",
                  "updatedAt": "2022-06-14T16:32:36Z",
                  "publishedAt": "2021-10-14T22:02:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "friedmud"
                          },
                          "bodyText": "Terminator is the right way to do this.  The default for the Terminator is to stop the solve at the end of the Timestep (faile_mode = HARD) and if you set error_level = INFO it will simply print the message and then the solve will end at the end of the timestep.\nThat error_level really should be the default... but it's not clear to me that it is.\n@andrsd - do you want to weigh in here?",
                          "url": "https://github.com/idaholab/moose/discussions/19112#discussioncomment-1479779",
                          "updatedAt": "2022-07-07T10:18:59Z",
                          "publishedAt": "2021-10-14T23:13:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ttruster"
                          },
                          "bodyText": "Hi Guillaume and Derek:\nI was able to add Terminator to my input file and have the simulation stop using that command with the HARD option. Thanks for the suggestions!\nTim",
                          "url": "https://github.com/idaholab/moose/discussions/19112#discussioncomment-1515525",
                          "updatedAt": "2022-07-07T10:19:00Z",
                          "publishedAt": "2021-10-21T16:32:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrsd"
                          },
                          "bodyText": "@friedmud If you are pinging me about the error_level, you have the wrong guy - that was done by @dschwen in 84d87ee346f.\nOtherwise, Terminator is the way to do this...",
                          "url": "https://github.com/idaholab/moose/discussions/19112#discussioncomment-1523752",
                          "updatedAt": "2022-07-07T10:33:31Z",
                          "publishedAt": "2021-10-22T23:20:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "EBSDMeshGenerator/Reader + Distributed Mesh Workflow",
          "author": {
            "login": "gka80"
          },
          "bodyText": "Hello-\nI'm working on a modification to the EBSDMeshGenerator/Reader workflow to take in data of a different format (e.g. particle geometry developed in a different program). For this application, I have the workflow operating quite nicely. The issue that I'm running into currently is that using a replicated mesh, the memory requirements are intensive. Some notes:\n\n\nThe goal is to run this on a cluster. Each node has access to 28 cores and 100 GB (useable) memory. Simple tests indicate that (100/28) ~3.5 GB/core is \"too low.\" The run shown in the file attachment was terminated at ~10 GB/core which means that I would be using less than 50% of the node core capacity which is too inefficient (as I don't have access to many nodes to begin with and am restricted to 10 hour increments). Tested on a PC with 64 GB memory.\n\n\nThe \"coarse\" (test) mesh is ~500,000 elements (HEX8). Small. I won't be running mesh adaptivity, but I would like to refine this mesh further for the final run.\n\n\nThe number of non-linear variables is ~20. Small but not inconsequential.\n\n\nThe number of variables in the auxiliary system isn't what I would consider \"excessive\" (although the number of DOF seems rather high [possibly due to the tensor mobility]).\n\n\nI've read and understand the mesh splitting documentation (Mesh Splitting) and have successfully used it on a few test problems. However, while I have an idea as to why the current workflow doesn't work as distributed, I'm unable to pinpoint \"what\" in the MOOSE framework needs to be implemented to make it work (I know it has to do with libMesh).\n\n\nbash output attached as an example.\n\n\nEDIT: Also, SMP preconditioning using ASM with \"sub\" preconditioning type ilu with 3 factor levels and an overlap of 1. I've tried other preconditioning options but found this combination to work the best on smaller test problems. Admittedly, this area is a bit new to me (I've read the PETSc documentation but didn't understand everything; have yet to make a second pass). AMG-based methods performed poorly but I've read that that could be because I'm using a split CH formulation (could also be because I'm a beginner).\n\n\nDoes anyone:\n\nHave any recommendations on a \"work around\" to be able to split the problem and run the model as distributed?\nHave any examples (or is willing to point me in the right direction) so that I can modify the EBSDMeshGenerator/Reader workflow so that it can be implemented as distributed?\n\nI know my problem is small, however I'm in personally uncharted territory. Not opposed to learning, just hoping someone can throw me a bone.\nThank you!\n-Garrett",
          "url": "https://github.com/idaholab/moose/discussions/17442",
          "updatedAt": "2022-07-20T06:19:47Z",
          "publishedAt": "2021-03-28T19:48:45Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "git blame says @dschwen is the expert here",
                  "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-554772",
                  "updatedAt": "2022-07-20T06:20:30Z",
                  "publishedAt": "2021-03-31T21:02:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Ugh, totally missed this thread. I'll take a look tomorrow!",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1499747",
                          "updatedAt": "2022-07-20T06:20:30Z",
                          "publishedAt": "2021-10-19T04:00:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Ok, it would be relatively straight forward to create a DistributedEBSDMeshGenerator (which inherits from DistributedRectilinearMeshGenerator rather than GeneratedMeshGenerator). I can do that in the next couple of days.",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1503031",
                          "updatedAt": "2022-07-20T06:20:30Z",
                          "publishedAt": "2021-10-19T14:59:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gka80"
                          },
                          "bodyText": "@dschwen Great! Thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1503476",
                          "updatedAt": "2022-07-20T06:20:42Z",
                          "publishedAt": "2021-10-19T16:08:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Check out #19155 I'd welcome any feedback on it.",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1504569",
                          "updatedAt": "2022-10-11T19:26:08Z",
                          "publishedAt": "2021-10-19T20:23:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gka80"
                          },
                          "bodyText": "@dschwen Thank you for turning this around so quickly. I'll give this a try by COB Friday (or wait until the potential implementation with sub-mesh generation?) and offer comments (if any).",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1509764",
                          "updatedAt": "2022-10-11T19:26:08Z",
                          "publishedAt": "2021-10-20T16:40:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "SubGenerator version is now merged into MOOSE. To take advantage of it just add parallel_type = DISTRIBUTED in the [Mesh] block.",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1511782",
                          "updatedAt": "2022-10-11T19:26:08Z",
                          "publishedAt": "2021-10-21T02:31:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gka80"
                          },
                          "bodyText": "@dschwen @GiudGiud\nThank you. It looks like this solution will work great. I'll chime in if I have any other questions.",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1522917",
                          "updatedAt": "2022-10-11T19:26:08Z",
                          "publishedAt": "2021-10-22T18:56:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "gka80"
                  },
                  "bodyText": "@dschwen (or anyone), any hints, sample codes, or links/advice on \"where to dig\"? I can provide more information, if necessary.",
                  "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-615031",
                  "updatedAt": "2022-07-20T06:20:43Z",
                  "publishedAt": "2021-04-15T11:53:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hey @gka80 are you still working on this?\nWe can hit up more people if so",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1498916",
                          "updatedAt": "2022-07-20T06:20:43Z",
                          "publishedAt": "2021-10-18T22:12:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gka80"
                          },
                          "bodyText": "Hey @GiudGiud,\nI was sidetracked with another project. However, this problem is still near the top of my priority list. I anticipate on getting back to it in the next few weeks.\nIf someone has capacity to look into the issue, that'd be great. I'm still not opposed to coding up a solution myself if someone was able to provide some guidance. Whatever is easiest.",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1499631",
                          "updatedAt": "2022-07-20T06:20:47Z",
                          "publishedAt": "2021-10-19T03:11:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@SudiptaBiswas  @jain651 @laagesen  any of you can offer guidance on that one?",
                          "url": "https://github.com/idaholab/moose/discussions/17442#discussioncomment-1499668",
                          "updatedAt": "2022-07-20T06:20:47Z",
                          "publishedAt": "2021-10-19T03:26:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error after updating MOOSE on Windows",
          "author": {
            "login": "tstepan333"
          },
          "bodyText": "Hello,\nI updated MOOSE and then tried to recompile makefile, but I got the error:\nIn file included from /home/tstepan/projects/moose/framework/build/unity_src/auxkernels_Unity.C:50: /home/tstepan/projects/moose/framework/src/auxkernels/SolutionAux.C: In member function 'virtual libMesh::Real SolutionAux::computeValue()': /home/tstepan/projects/moose/framework/src/auxkernels/SolutionAux.C:97:63: error: 'const class libMesh::Elem' has no member named 'vertex_average' 97 |       output = _solution_object.pointValue(_t, _current_elem->vertex_average(), _var_name); |                                                               ^~~~~~~~~~~~~~ In file included from /home/tstepan/projects/moose/framework/build/unity_src/auxkernels_Unity.C:52: /home/tstepan/projects/moose/framework/src/auxkernels/SpatialUserObjectAux.C: In member function 'virtual libMesh::Real SpatialUserObjectAux::computeValue()': /home/tstepan/projects/moose/framework/src/auxkernels/SpatialUserObjectAux.C:41:53: error: 'const class libMesh::Elem' has no member named 'vertex_average' 41 |     return _user_object.spatialValue(_current_elem->vertex_average()); |                                                     ^~~~~~~~~~~~~~ Compiling C++ (in opt mode) /home/tstepan/projects/moose/framework/build/unity_src/fviks_Unity.C... Compiling C++ (in opt mode) /home/tstepan/projects/moose/framework/build/unity_src/fvkernels_Unity.C... Compiling C++ (in opt mode) /home/tstepan/projects/moose/framework/build/unity_src/geomsearch_Unity.C... make: *** [/home/tstepan/projects/moose/framework/build.mk:144: /home/tstepan/projects/moose/framework/build/unity_src/auxkernels_Unity.x86_64-conda-linux-gnu.opt.lo] Error 1 make: *** Waiting for unfinished jobs.... In file included from /home/tstepan/projects/moose/framework/build/unity_src/geomsearch_Unity.C:3: /home/tstepan/projects/moose/framework/src/geomsearch/FindContactPoint.C: In function 'void Moose::findContactPoint(PenetrationInfo&, libMesh::FEBase*, libMesh::FEBase*, libMesh::FEType&, const libMesh::Point&, bool, libMesh::Real, bool&)': /home/tstepan/projects/moose/framework/src/geomsearch/FindContactPoint.C:104:44: error: 'const class libMesh::Elem' has no member named 'vertex_average' 104 |         dim - 1, fe_side_type, side, side->vertex_average(), TOLERANCE, false); |                                            ^~~~~~~~~~~~~~ In file included from /home/tstepan/projects/moose/framework/build/unity_src/fvkernels_Unity.C:3: /home/tstepan/projects/moose/framework/src/fvkernels/FVBodyForce.C: In member function 'virtual ADReal FVBodyForce::computeQpResidual()': /home/tstepan/projects/moose/framework/src/fvkernels/FVBodyForce.C:45:78: error: 'const class libMesh::Elem' has no member named 'vertex_average' 45 |   Real factor = _scale * _postprocessor * _function.value(_t, _current_elem->vertex_average()); |                                                                              ^~~~~~~~~~~~~~ make: *** [/home/tstepan/projects/moose/framework/build.mk:144: /home/tstepan/projects/moose/framework/build/unity_src/geomsearch_Unity.x86_64-conda-linux-gnu.opt.lo] Error 1 make: *** [/home/tstepan/projects/moose/framework/build.mk:144: /home/tstepan/projects/moose/framework/build/unity_src/fvkernels_Unity.x86_64-conda-linux-gnu.opt.lo] Error 1\nTo update your MOOSE repository I used the following commands:\ncd ~/projects/moose\ngit fetch origin\ngit rebase origin/master\nCould you help me?",
          "url": "https://github.com/idaholab/moose/discussions/19162",
          "updatedAt": "2022-11-30T20:49:39Z",
          "publishedAt": "2021-10-20T20:09:42Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou forgot to update libmesh.\nIs this a conda install? If so just run conda update --all\nProbably will be good to make clobberall before running make again too\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19162#discussioncomment-1510786",
                  "updatedAt": "2022-12-10T20:37:58Z",
                  "publishedAt": "2021-10-20T20:35:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "tstepan333"
                          },
                          "bodyText": "Thanks, it helped",
                          "url": "https://github.com/idaholab/moose/discussions/19162#discussioncomment-1522783",
                          "updatedAt": "2022-12-10T20:37:58Z",
                          "publishedAt": "2021-10-22T18:26:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}