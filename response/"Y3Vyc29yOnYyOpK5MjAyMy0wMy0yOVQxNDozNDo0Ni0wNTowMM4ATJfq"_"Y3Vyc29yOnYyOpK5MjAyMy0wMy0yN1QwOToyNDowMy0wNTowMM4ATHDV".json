{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMy0yN1QwOToyNDowMy0wNTowMM4ATHDV"
    },
    "edges": [
      {
        "node": {
          "title": "AD version of ComputeThermalExpansionEigenstrain with temperature dependent coefficient",
          "author": {
            "login": "BoZeng1997"
          },
          "bodyText": "Hi,\nI am trying to compute thermal expansion eigen strain $\\epsilon=\\alpha(T)(T-T_0)I$. I see there are two ways:\n\nIn #21785, ComputeVariableEigenstrain (I believe that is the new name for the object ComputeVariableDependentEigenstrainmentioned previously). The issue with this one is that it is non-AD. Do we have a AD version of it?\nwhat I want is very close to what MOOSE already have, Compute Thermal Expansion Eigenstrain, where it implements $\\epsilon=\\alpha(T-T_0)I$. The adaptation seems not complicated since it supports AD already: re-define  ADComputeThermalExpansionEigenstrain\\thermal_expansion_coeff to be ADMaterialProperty<Real> instead of Real, then use ADParsedMaterial to define such a material.\n\nI want to know which way is better. If 2 is better and no one is considering adding such feature, I can open an issue and submit a PR for it.",
          "url": "https://github.com/idaholab/moose/discussions/23864",
          "updatedAt": "2023-03-29T16:06:24Z",
          "publishedAt": "2023-03-27T21:31:28Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@bwspenc @dschwen @jiangwen84 do you have a suggestion for @BoZeng1997 ?",
                  "url": "https://github.com/idaholab/moose/discussions/23864#discussioncomment-5446400",
                  "updatedAt": "2023-03-27T22:58:37Z",
                  "publishedAt": "2023-03-27T22:58:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Have you looked at ComputeMeanThermalExpansionFunctionEigenstrain?  You can use temperature dependent thermal expansion.",
                          "url": "https://github.com/idaholab/moose/discussions/23864#discussioncomment-5455625",
                          "updatedAt": "2023-03-28T15:24:33Z",
                          "publishedAt": "2023-03-28T15:24:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "@jiangwen84 Hi! Thanks for the recommendation. I am running simulation with ComputeMeanThermalExpansionFunctionEigenstrain.  From the description on the webage, T_ref is a required parameter and usually is different from stress free temperature. I could not find T_ref for my material's thermal expansion coefficient data. But I dont see a problem in my simulation when setting the same value for both parameters. What is your advice on it?",
                          "url": "https://github.com/idaholab/moose/discussions/23864#discussioncomment-5456323",
                          "updatedAt": "2023-03-28T16:23:02Z",
                          "publishedAt": "2023-03-28T16:23:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "In the second equation on the MOOSE documentation page (https://mooseframework.inl.gov/source/materials/ComputeMeanThermalExpansionFunctionEigenstrain.html#!), if you set T_sf = T_ref, then you basically get\nepsilon = alpha (T-T_sf), which might be something you want.\nIn general, the T_sf and T_ref are different. You can also read this paper for more information https://www.sciencedirect.com/science/article/pii/S0029549311010387?ref=cra_js_challenge&fr=RR-1",
                          "url": "https://github.com/idaholab/moose/discussions/23864#discussioncomment-5457276",
                          "updatedAt": "2023-03-28T18:01:51Z",
                          "publishedAt": "2023-03-28T18:01:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "thanks. that is very helpful!",
                          "url": "https://github.com/idaholab/moose/discussions/23864#discussioncomment-5467853",
                          "updatedAt": "2023-03-29T16:05:53Z",
                          "publishedAt": "2023-03-29T16:05:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Does RACCOON require pre-defined cracks?",
          "author": {
            "login": "NeedOfHelp"
          },
          "bodyText": "Hi,\nAs the title says, when modelling using RACCOON, does the model require a pre-defined crack?\nIf not, is there any example code i can look at where it shows a new crack forming?\nThanks and cheers.",
          "url": "https://github.com/idaholab/moose/discussions/23883",
          "updatedAt": "2023-04-29T03:02:50Z",
          "publishedAt": "2023-03-29T13:48:03Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@hugary1995",
                  "url": "https://github.com/idaholab/moose/discussions/23883#discussioncomment-5466239",
                  "updatedAt": "2023-03-29T13:50:02Z",
                  "publishedAt": "2023-03-29T13:50:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "(if there are others knowledgeable please let me know so I can spread the tagging)",
                          "url": "https://github.com/idaholab/moose/discussions/23883#discussioncomment-5466245",
                          "updatedAt": "2023-03-29T13:50:39Z",
                          "publishedAt": "2023-03-29T13:50:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "You could also tag @jiangwen84 for phase field fracture (RACCOON) questions. I'm a little behind on other stuff so I probably won't monitor this discussion page frequently enough.\n@NeedOfHelp pre-defined crack in which representation? Regularized (phase-field) crack or sharp crack (mesh discontinuity)?\nFor a regularized crack, there are a few initial condition objects in RACCOON you can play with. More generally speaking, you can use any MOOSE initial condition object to set the initial phase field.\nFor a sharp crack, you need to prepare a meshed-in crack.",
                          "url": "https://github.com/idaholab/moose/discussions/23883#discussioncomment-5466672",
                          "updatedAt": "2023-03-29T14:27:58Z",
                          "publishedAt": "2023-03-29T14:27:57Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "NeedOfHelp"
                          },
                          "bodyText": "Thanks for your reply.\nI was thinking more in phase-field modelling of cracks. I have seen your tutorial codes on fracture and all of them seems to have a pre-defined crack, as far as I have seen.\nSo I started wondering how the simulations would go if the crack was defined in the middle, the sides, two cracks at the same time and also what if there were no initial crack at all?\nI'm a new user to RACCOON and MOOSE and I'm trying to learn my way up, so I am kinda clueless on what types of modules/packages that exists.\nCheers.",
                          "url": "https://github.com/idaholab/moose/discussions/23883#discussioncomment-5467203",
                          "updatedAt": "2023-03-29T15:09:25Z",
                          "publishedAt": "2023-03-29T15:09:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Why PJFNK calls computeQpResidual() during each linear step?",
          "author": {
            "login": "Richard-happy"
          },
          "bodyText": "From Krylov methods, what we need is vectors like ${-R_h, J(-R_h), J^2(-R_h),......}$. So it's OK just call computeQpResidual() once each nonlinear.\nFrom https://mooseframework.inl.gov/workshop/index.html#/9/10 ,it says During each linear step of PJFNK, the computeQpResidual method is called to approximate the action of the Jacobian on the Krylov vector. I'm not understand this.\nDose computeQpResidual() not mean computing $-R_h$?",
          "url": "https://github.com/idaholab/moose/discussions/23881",
          "updatedAt": "2023-03-29T13:36:52Z",
          "publishedAt": "2023-03-29T10:10:48Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nif you compute the residual twice, once with a slightly offset solution vector, you can approximate the action of the Jacobian\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23881#discussioncomment-5465733",
                  "updatedAt": "2023-03-29T13:09:04Z",
                  "publishedAt": "2023-03-29T13:09:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Richard-happy"
                          },
                          "bodyText": "understand .thank you ,GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/23881#discussioncomment-5466059",
                          "updatedAt": "2023-03-29T13:36:50Z",
                          "publishedAt": "2023-03-29T13:36:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "libmesh folder empty when installing MOOSE",
          "author": {
            "login": "lodhia92"
          },
          "bodyText": "Hi, I am trying to install MOOSE on a virtual machine and am having some difficulties. I cannot save and install from my home directory (as suggested by the instructions), this is due to the settings on my work system. Instead, I am trying to install MOOSE and have all associated files in a mounted volume called /mydata\nI am able to install Mamba and the MOOSE environment correctly (I think), since these steps in the instructions return no errors (see https://mooseframework.inl.gov/getting_started/installation/conda.html). However, When I get to the instruction step to run make -j 4, I get the following error:\n(moose) lod021@brc-2303-749004:/mydata/projects/moose/test$ sudo make -j 4\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/libtool: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/libtool: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\n/bin/sh: 1: /mydata/projects/moose/libmesh/installed/contrib/bin/libmesh-config: not found\nmake: python-config: No such file or directory\nmake: python-config: No such file or directory\nTraceback (most recent call last):\n  File \"/mydata/projects/moose/framework/scripts/get_repo_revision.py\", line 19, in <module>\n    from packaging import version\nModuleNotFoundError: No module named 'packaging'\nChecking if header needs updating: /mydata/projects/moose/framework/include/base/MooseRevision.h...\n\nFailed to generate MooseRevision.h\n\nCreating Unity /mydata/projects/moose/framework/build/unity_src/src_Unity.C\nSymlinking MOOSE configure /mydata/projects/moose/framework/build/header_symlinks/MooseConfig.h\nmake: *** [/mydata/projects/moose/framework/moose.mk:325: /mydata/projects/moose/framework/include/base/MooseRevision.h] Error 1\nmake: *** Waiting for unfinished jobs....\n\nI know the instructions say we shouldn't use sudo, however due to things not being located in my home directory as explained, I cannot avoid the use of sudo. I have checked and the folder /mydata/projects/moose/libmesh/ is empty. I've removed and repeated the earlier steps several times, however keep running into the same issue. Any help would be greatly appreciated!",
          "url": "https://github.com/idaholab/moose/discussions/23850",
          "updatedAt": "2023-04-29T03:03:44Z",
          "publishedAt": "2023-03-27T04:16:55Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhen you type sudo, my understanding is that you are running as an admin, and likely outside of the conda environment.\nSo then it cant find libmesh.\nYou MUST not run as sudo. It's just a bad idea to be always running as sudo.\nCan you fix the permissions in the folders instead? Using chmod u+rw -R ./ in the /mydata and the home too while you're at it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23850#discussioncomment-5440424",
                  "updatedAt": "2023-03-27T12:35:03Z",
                  "publishedAt": "2023-03-27T12:34:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lodhia92"
                          },
                          "bodyText": "Hi, thanks for the suggestion. I tried running chmod u+rw -R ./ in /mydata, however this did not do anything and I still can't run any commands without the use of sudo.\nWhen I try to do mamba create --prefix=/mydata/anaconda3/envs/moose moose-tools moose-libmesh without sudo to create the moose env, I get the following errors:\nLooking for: ['moose-tools', 'moose-libmesh']\n\nerror    libmamba Could not open lockfile '/mydata/mambaforge3/pkgs/cache/cache.lock'\nerror    libmamba Could not open lockfile '/mydata/mambaforge3/pkgs/cache/cache.lock'\nhttps://conda.software.inl.gov/public/linux-64                No change\nhttps://conda.software.inl.gov/public/noarch                  No change\nconda-forge/noarch                                  11.7MB @   4.4MB/s  2.7s\nconda-forge/linux-64                                30.5MB @   5.1MB/s  6.2s\nTransaction\n\n  Prefix: /home/USER/.conda/envs/moose\n\n  Updating specs:\n\n   - moose-tools\n   - moose-libmesh\n\n\nI then removed the two files in /mydata/mambaforge3/pkgs/cache and ran the above again, however at the end got the following error:\nDownloading and Extracting Packages\n\nPreparing transaction: failed\nUnable to create prefix directory '/mydata/anaconda3/envs/moose'.\nCheck that you have sufficient permissions.\n\nCondaError: Unable to create prefix directory '/mydata/anaconda3/envs/moose'.\nCheck that you have sufficient permissions.\n\nI'm not running commands using sudo as you suggested, however keep coming up against permission errors so am not sure how to proceed.\nThanks again for helping,\nBhavik",
                          "url": "https://github.com/idaholab/moose/discussions/23850#discussioncomment-5446845",
                          "updatedAt": "2023-03-28T00:49:44Z",
                          "publishedAt": "2023-03-28T00:37:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "The issue is that somewhere along the line, sudo was used. And so sudo must now always be used when performing operations which require write access (such as mamba <insert any command here>). This is a woopsie mistake that should have been fixed immediately with sudo rm -rf /mydata/mambaforge3, and then reinstalling mambaforge without using sudo.\n\nI cannot save and install from my home directory (as suggested by the instructions), this is due to the settings on my work system\n\nIf this is true, this is a serious limitation imposed on by your administrator.\nThere is nothing preventing you from installing MOOSE to anywhere you have write access. So if you must install MOOSE outside of your home directory, that is fine. Please attempt to reinstall mambaforge3 as suggested above. The only constraints: you cannot use sudo when installing Mambaforge, or building or running MOOSE or building/running your MOOSE-based application.\nIf you have to use sudo, then you must always run as root instead: sudo su -. This is due to how environment functions are not inherited during the use of sudo. Example:\n$ init_conda() { echo \"hello\" ; }\n$ init_conda\nhello\n$ sudo init_conda\nsudo: init_conda: command not found\nThere are functions being called when working with Conda. Like mamba activate moose. This will fail if you place sudo in front of that command.",
                          "url": "https://github.com/idaholab/moose/discussions/23850#discussioncomment-5454838",
                          "updatedAt": "2023-03-28T14:21:39Z",
                          "publishedAt": "2023-03-28T14:21:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lodhia92"
                          },
                          "bodyText": "Thanks for the response. I think I have sorted out the issue - since I am installing to a mounted volume, sudo had to be used when running commands in the volume itself, which kept leading to the errors. I've described this below in case any future users have the same issue.\nI changed the ownership of the mounted volume by doing  sudo chown $USER: /mydata after which I did not need to use sudo any more. I was able to install mamba and then compile moose by following the instructions on the instructions page online but making sure all paths were correctly set to the folder I wanted them to be in.\nThanks for all of your help!",
                          "url": "https://github.com/idaholab/moose/discussions/23850#discussioncomment-5460031",
                          "updatedAt": "2023-03-29T00:59:28Z",
                          "publishedAt": "2023-03-29T00:59:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Awesome. Thanks a lot for sharing the solution, might help us in the future!",
                          "url": "https://github.com/idaholab/moose/discussions/23850#discussioncomment-5460091",
                          "updatedAt": "2023-03-29T01:10:49Z",
                          "publishedAt": "2023-03-29T01:10:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "About Moose Handling Heat equation in two domain?",
          "author": {
            "login": "ashokgrg19"
          },
          "bodyText": "I am trying to model a solidification process in MOOSE.\nThis is how I approached the problem:\n\n\nCreated the two domains using mesh generator: The inside rectangle is the casting( primary block) b) The outside rectangle is the mold (secondary block). Please have a look into the attached input file.\n\n\nSolved the heat equation in respective blocks:\nFor Casting\ndH/dT_cdT_c/dt = \\nabla. k_c \\nabla T_c ; T_c, k_c and H stand for temperature, thermal conductivity and Enthalpy of  casting\nFor Mold\nrho_mC_m*dT_m/dt=\\nabla. k_m \\nabla T_m; T_m, k_m, rho_m and C_m stand for temperature, thermal conductivity , density and specific heat capacity of mold\nwith my interface conditions:\nT_m = T_c ..................................................................i\nand\n-k_m dT_m/dn = -k_c dT_c/dn..................................ii\nand Dirichlet boundary condition at mold surface\n\n\nI used MatchedValueBC for condition (i) and   InterfaceDiffusion kernel  for condition (ii)\n\n\nOn doing so, temperature of the casting T_c remains fixed while T_m evolves with the time.\nI am not sure why this is happening. Actually, T_c should be decreasing while T_m should be increasing with the time. Not sure what I am missing here.\n\n\nCould you please have a look into my input file and let me know if I am missing anything here?\nWould really appreciate any help and suggestions!\nThank you so much for your time!\n[Mesh]\n [gen]\n   type = GeneratedMeshGenerator\n   dim = 2\n   nx = 100\n   xmax = 0.6\n   ny = 100\n   ymax = 0.6\n []\n [subdomain1]\n   input = gen\n   type = SubdomainBoundingBoxGenerator\n   bottom_left = '0.2 0.20 0'\n   top_right = '0.40 0.40 0'\n   block_id = 1\n []\n [interface]\n   type = SideSetsBetweenSubdomainsGenerator\n   input = subdomain1\n   primary_block = '1'\n   paired_block = '0'\n   new_boundary = 'primary1_interface'\n []\n[]\n\n[Variables]\n [u] #casting\n   initial_condition = 500\n   block = 1\n []\n [v] #Mold\n   initial_condition = 17\n   block = 0\n []\n[]\n\n[Kernels]\n [./heat_conductionAlloy]\n   type = HeatConduction\n   variable = u\n   block=1\n [../]\n [./heat_conductionMold]\n   type = HeatConduction\n   variable = v\n   block=0\n [../]\n [./heat_conduction_time_derivative]\n   type = HeatConductionTimeDerivative\n   variable = u\n   block=1\n [../]\n [./heat_conduction_time_derivativeMold]\n   type = HeatConductionTimeDerivative\n   variable = v\n   block=0\n [../]\n[]\n\n[BCs]\n [u]\n   type = DirichletBC\n   variable = v\n   boundary = 'left bottom right top'\n   value= 17\n []\n [interface_bc]\n   type = MatchedValueBC\n   variable = v\n   v = u\n   boundary = primary1_interface\n []\n[]\n\n[Preconditioning]\n [./smp]\n   type = SMP\n   full = true\n [../]\n[]\n[Problem]\n type = FEProblem\n[]\n[Executioner]\n type = Transient\n   [./TimeStepper]\n   type = IterationAdaptiveDT\n   dt = 1\n   #iteration_window = 3\n   optimal_iterations = 5 #should be 5 probably\n   growth_factor = 1.4\n   linear_iteration_ratio = 1000\n   cutback_factor =  0.8\n [../]\n num_steps = 4000\n dtmax=10\n solve_type = 'PJFNK'       #\"PJFNK, JFNK, NEWTON\"\n petsc_options_iname = '-pc_type -pc_hypre_type'\n petsc_options_value = 'hypre boomeramg'\n scheme = 'crank-nicolson'   #\"implicit-euler, explicit-euler, crank-nicolson, bdf2, rk-2\"\n[]\n\n[Outputs]\n exodus = true\n print_linear_residuals = true\n[]\n\n[InterfaceKernels]\n active = 'diffusion'\n [./diffusion]\n   type = InterfaceDiffusion\n   variable = v\n   neighbor_var = u\n   boundary = primary1_interface\n   D = 'D'\n   D_neighbor = 'D'\n [../]\n[]\n\n[Materials]\n [mat0]\n   type = GenericConstantMaterial\n   prop_names = 'D'\n   prop_values = '-0.2'\n   block = 0\n []\n [mat1]\n   type = GenericConstantMaterial\n   prop_names = 'D'\n   prop_values = '-211'\n   block = 1\n []\n [./Alloy]\n   type = GenericConstantMaterial\n   prop_names = 'thermal_conductivity specific_heat density'\n   prop_values = '211 1190 2555'\n   block = 1\n [../]\n [./Mold]\n   type = GenericConstantMaterial\n   prop_names = 'thermal_conductivity specific_heat density'\n   prop_values = '0.2 1000 1380'\n   block = 0\n [../]\n[]\n[Postprocessors]\n [./0.00_temperature]\n   type = PointValue\n   point = '0.22 0.22 0.0'\n   variable = T\n [../]\n [./03_temperature]\n   type = PointValue\n   point = '0.18 0.18 0.0'\n   variable = T\n [../]\n[]\n\n[AuxVariables]\n [T][]\n[]\n\n[AuxKernels]\n [uK]\n   type = ParsedAux\n   variable = T\n   args = 'u'\n   function = 'u'\n   block = 1\n []\n [vK]\n   type = ParsedAux\n   variable = T\n   args = 'v'\n   function = 'v'\n   block = 0\n []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23823",
          "updatedAt": "2023-04-29T03:04:33Z",
          "publishedAt": "2023-03-23T02:53:52Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I m wondering if you need to duplicate the MatchedValueBC so that it comes in the equation for u as well\n [interface_bc]\n   type = MatchedValueBC\n   variable = v\n   v = u\n   boundary = primary1_interface\n []\n [interface_bc]\n   type = MatchedValueBC\n   variable = u\n   v = v\n   boundary = primary1_interface\n []\n\njust an idea",
                  "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411876",
                  "updatedAt": "2023-03-23T22:44:27Z",
                  "publishedAt": "2023-03-23T22:44:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is there supposed to be a source term or should this be all driven by the external dirichletBCs ?",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411881",
                          "updatedAt": "2023-03-23T22:45:38Z",
                          "publishedAt": "2023-03-23T22:45:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "One MatchedValueBC will enforce the condition that u = v. You don't need to enforce it twice",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411914",
                          "updatedAt": "2023-03-23T22:53:54Z",
                          "publishedAt": "2023-03-23T22:53:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "alright so it s not that",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411919",
                          "updatedAt": "2023-03-23T22:55:47Z",
                          "publishedAt": "2023-03-23T22:55:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "A matched value when the initial conditions are so different seems odd.\nCan you try with just a diffusion term?\nBesides, if you enforce continuity and a diffusion flux, maybe you should just use a single variable",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411926",
                          "updatedAt": "2023-03-23T22:56:42Z",
                          "publishedAt": "2023-03-23T22:56:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Besides, if you enforce continuity and a diffusion flux, maybe you should just use a single variable\n\nExcellent suggestion.\nI can tell you that if you swap u and v in your InterfaceDiffusion variable and neighbor_var, then stuff starts happening. variable should always correspond to the variable defined on the subdomain associated with the sideset you pass to boundary. I thought we had checks to help detect a bad setup like you currently have but I guess not.",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5411990",
                          "updatedAt": "2023-03-23T23:10:22Z",
                          "publishedAt": "2023-03-23T23:09:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "A matched value when the initial conditions are so different seems odd.\n\nYes. This actually creates a boundary shock in your v profile",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5412040",
                          "updatedAt": "2023-03-23T23:20:00Z",
                          "publishedAt": "2023-03-23T23:19:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So I made the following changes:\n\nChanged to use PenaltyInterfaceDiffusion which removes the need for the MatchedValueBC\nChanged from crank-nicolson to bdf2. The latter seems to be much less prone to both spatial and temporal oscillations\n\ndiff --git a/modules/heat_conduction/user.i b/modules/heat_conduction/user.i\nindex 03d37fa427..dfebdc6875 100644\n--- a/modules/heat_conduction/user.i\n+++ b/modules/heat_conduction/user.i\n@@ -64,12 +64,12 @@\n    boundary = 'left bottom right top'\n    value= 17\n  []\n- [interface_bc]\n-   type = MatchedValueBC\n-   variable = v\n-   v = u\n-   boundary = primary1_interface\n- []\n+ # [interface_bc]\n+ #   type = MatchedValueBC\n+ #   variable = v\n+ #   v = u\n+ #   boundary = primary1_interface\n+ # []\n []\n \n [Preconditioning]\n@@ -97,7 +97,7 @@\n  solve_type = 'PJFNK'       #\"PJFNK, JFNK, NEWTON\"\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre boomeramg'\n- scheme = 'crank-nicolson'   #\"implicit-euler, explicit-euler, crank-nicolson, bdf2, rk-2\"\n+ scheme = 'bdf2'   #\"implicit-euler, explicit-euler, crank-nicolson, bdf2, rk-2\"\n []\n \n [Outputs]\n@@ -108,12 +108,11 @@\n [InterfaceKernels]\n  active = 'diffusion'\n  [./diffusion]\n-   type = InterfaceDiffusion\n-   variable = v\n-   neighbor_var = u\n+   type = PenaltyInterfaceDiffusion\n+   variable = u\n+   neighbor_var = v\n    boundary = primary1_interface\n-   D = 'D'\n-   D_neighbor = 'D'\n+   penalty = 1e6\n  [../]\n []\n \n\nand things look pretty good after 80 time steps",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5412158",
                          "updatedAt": "2023-03-23T23:52:37Z",
                          "publishedAt": "2023-03-23T23:52:37Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashokgrg19"
                          },
                          "bodyText": "Thanks @lindsayad and @GiudGiud for helpful suggestions. It worked on normal heat conduction where there is no phase change involved (liquid to solid).\nYes, the initial condition looks bit weird. However, the initial temperature of the mold and cast largely differ on their scale, former one is at room temperature and later one is very hot--liquid phase.\nI have one question regarding the solution suggested: What's the difference between the InterfaceDiffusion and PenaltyInterfaceDiffusion? Looking on moose documentation PenaltyIntefraceDiffusion handles the continuity between the domains providing penalty value, but other does not. So, could you please explain me which condition these two kernels are suitable?\nThank you again for the help and suggestion.\nAshok",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5419732",
                          "updatedAt": "2023-03-24T15:14:11Z",
                          "publishedAt": "2023-03-24T15:14:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The differences are tied to the numerical scheme you want to use.\nthe intent is similar between the two methods, though InterfaceDiffusion only ensures a diffusive flux, while the second also attempts to impose variable continuity.",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5423052",
                          "updatedAt": "2023-03-24T22:38:15Z",
                          "publishedAt": "2023-03-24T21:28:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashokgrg19"
                          },
                          "bodyText": "Thank you so much @GiudGiud for explaining this!",
                          "url": "https://github.com/idaholab/moose/discussions/23823#discussioncomment-5456223",
                          "updatedAt": "2023-03-28T16:12:39Z",
                          "publishedAt": "2023-03-28T16:12:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Watervapor in unsaturated soil (PorousFlow)",
          "author": {
            "login": "marinsiebert"
          },
          "bodyText": "Hello everyone,\nI have stumbled into an issue which I am not sure how to resolve. I am trying to model a partially saturated soil (S < 1) with the PorousFlow module. the PorousFlowCapillaryPressureVG is used to calculate the saturations, which is currently done by the PorousFlow1PhaseP with negative porepressures according to Pp = - Pc.\nHowever, it is not possible to apply the Water97FluidProperties in this case, as this object requires pressures > 0.\nHow would one approach this issue? The goal would be to investigate evaporisation processes in partially saturated soils due to heat source.",
          "url": "https://github.com/idaholab/moose/discussions/23541",
          "updatedAt": "2023-04-04T07:39:06Z",
          "publishedAt": "2023-02-27T14:22:39Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@Rliu2020",
                  "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5124088",
                  "updatedAt": "2023-02-27T15:22:32Z",
                  "publishedAt": "2023-02-27T15:22:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "marinsiebert"
                  },
                  "bodyText": "As the issue is still unresolved kindly giving this a push, in the hopes of receiving some info.",
                  "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5330323",
                  "updatedAt": "2023-03-16T07:34:11Z",
                  "publishedAt": "2023-03-16T07:34:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "@WilkAndy - any ideas?",
                          "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5339232",
                          "updatedAt": "2023-03-16T21:59:19Z",
                          "publishedAt": "2023-03-16T21:59:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I have been decoupled from MOOSE for the last month, I'm sorry.  In single-phase systems, the convention is to set porepressure = 0 at the transition between full saturation and saturation < 1.  PorousFlow uses this convention.  However, in reality we know that at this point, porepressure equals atmospheric pressure (eg, 101kPa).   Therefore, if you are going to use Water97FluidProperties or any other FluidProperties equation of state that uses true pressure (and not the single-phase \"i'm going to pretend there is no atmospheric pressure by defining porepressure = 0 at the transition to full saturation\") then you have to add atmospheric pressure on to PorousFlow's single-phase porepressure.\nEg, if PorousFlow's single-phase porepressure = 0, then you've got to evaluate the FluidProperties using pressure = 101kPa.\nEg if PorousFlow's single-phase porepressure = 8MPa, then you've got to evaluate the FluidProperties using pressure = 8101kPa\nEg if PorousFlow's single-phase porepressure = -50kPa, then you've got to evaluate the FluidProperties using pressure = 51kPa\nThis is really annoying, I admit, but is just the convention used by single-phase solvers.  The problem really comes when the PorousFlow's single-phase porepressure = -1MPa (or something < -atmospheric_pressure), because then you'll end up supplying FluidProperties with a negative pressure, and your simulation will crash.\nSo....   my recommendation is to use TabulatedFluidProperties: https://mooseframework.inl.gov/moose/source/userobjects/TabulatedFluidProperties.html and manually do the shift with atmospheric pressure, and also (critically) extend to negative pressure.  This extension will likely be very important for convergence, even if your physical system never enters this regime in reality, because MOOSE will explore the regime as it iterates towards the solution.  I suggest do NOT simply use constant density and viscosity in this regime, but instead use some sort of exponentially-decaying thing as porepressure goes to negative infinity.  Eg, use a constant bulk modulus.  The problem with constant density (and viscosity) is that, because density doesn't change, MOOSE sees no penalty in making porepressure very negative - it might be essentially solving  Ax = 0, and with A = 0, then x can be anything.\nA",
                  "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5447934",
                  "updatedAt": "2023-03-28T04:02:54Z",
                  "publishedAt": "2023-03-28T04:02:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Sorry, i should have tagged @marinsiebert",
                          "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5447940",
                          "updatedAt": "2023-03-28T04:03:24Z",
                          "publishedAt": "2023-03-28T04:03:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I also see there are two open issues on this: #21794 and #22740",
                          "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5447964",
                          "updatedAt": "2023-03-28T04:08:06Z",
                          "publishedAt": "2023-03-28T04:08:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "Thank you for the detailed answer, it is much appreciated. I avoided the issue for now by switching to the 2PhasePS formulation, but will now go back and try to make this work.",
                          "url": "https://github.com/idaholab/moose/discussions/23541#discussioncomment-5449900",
                          "updatedAt": "2023-03-28T07:57:32Z",
                          "publishedAt": "2023-03-28T07:57:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "matrix norm",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello all\uff0c\nI have two questions:\n\nCan the user provide the preprocessor pmat?\nHow to output matrix norm?\nthanks",
          "url": "https://github.com/idaholab/moose/discussions/23845",
          "updatedAt": "2023-04-29T03:05:49Z",
          "publishedAt": "2023-03-26T08:28:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "MOOSE almost always supplies the preconditioning matrix to PETSc. You control what goes into the preconditioning matrix via how computeQpJacobian and computeQpOffDiagJacobian methods are implemented and what you supply in the Preconditioning block of your input file\nThis is not possible to do from the command line or MOOSE input file currently. In your application though you could use the API: https://petsc.org/release/docs/manualpages/Mat/MatNorm/",
                  "url": "https://github.com/idaholab/moose/discussions/23845#discussioncomment-5444232",
                  "updatedAt": "2023-03-27T17:45:52Z",
                  "publishedAt": "2023-03-27T17:45:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nanguaxiaofendui"
                          },
                          "bodyText": "thank you",
                          "url": "https://github.com/idaholab/moose/discussions/23845#discussioncomment-5446762",
                          "updatedAt": "2023-03-28T00:16:33Z",
                          "publishedAt": "2023-03-28T00:16:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ConjugateHeatTransfer with different element types",
          "author": {
            "login": "joe61vette"
          },
          "bodyText": "Hello:\nIn the attached, there are 2 blocks with an internal sideset between them.  In block 1, the variable T1 is a \"constant monomial\".  In block 2, T2 is a \"first Lagrange\".  I am trying to use the ConjugateHeatTransfer interface kernel to pass heat from one to the other.\nI get nonconvergence  of the linear solve:\nTime Step 1, time = 0.05, dt = 0.05\n0 Nonlinear |R| = 3.162278e+02\nLinear solve did not converge due to DIVERGED_PC_FAILED iterations 0\nPC failed due to FACTOR_NUMERIC_ZEROPIVOT\nNonlinear solve did not converge due to DIVERGED_LOCAL_MIN iterations 0\nAny ideas on how to couple these 2 types of FEM variables?\nThanks,\nJoe Kelly\nInterfaceTester_4.i.zip",
          "url": "https://github.com/idaholab/moose/discussions/23846",
          "updatedAt": "2023-04-29T03:06:09Z",
          "publishedAt": "2023-03-26T15:23:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Joe\nI ll check when I get back but I don\u2019t think we can use regular heat conduction kernels for constant monomials. I think it should be either DG or finite volume kernels to make it work\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5434042",
                  "updatedAt": "2023-03-26T20:44:52Z",
                  "publishedAt": "2023-03-26T20:44:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yeah I've been trying a few things and the formulation in the Diffusion kernel isnt meant for variables that have a flat shape function, the contribution to the residual is just 0.\nWhat numerical scheme do you want to be using ultimately?",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5434922",
                          "updatedAt": "2023-03-27T00:42:55Z",
                          "publishedAt": "2023-03-27T00:42:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Thanks for looking at this Guillaume.  I should have figured out that I would need a DGDiffusion kernel.  I am trying out a hybrid rDG/CG scheme. Some simple problems seem to work very well. I would like to have a fluid temperature that is DG but couples to a solid temperature that is CFEM (first Lagrange).  I had a problem with that but will try again later this week.  If I can get that to work, then I will still need a ConjugateHeatTransfer interface kernel that works for one variable being DG and the other CFEM.",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5440127",
                          "updatedAt": "2023-03-27T12:01:19Z",
                          "publishedAt": "2023-03-27T12:01:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This seems to do what you want?\n@lindsayad for double check please. The interface works, but the solution isnt matching the expected 1D profile (too high on the left). Do you have guidance on setting the DG parameters for coarse mesh diffusion?\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    nx = 10\n    ny = 10\n    dim = 2\n  []\n  [block1]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '0.5 1 0'\n    input = gen\n  []\n  [block2]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 2\n    bottom_left = '0.5 0 0'\n    top_right = '1 1 0'\n    input = block1\n  []\n  [sideset]\n    input = block2\n    type = SideSetsBetweenSubdomainsGenerator\n    new_boundary = 'int_ss'\n    primary_block = '2'\n    paired_block = '1'\n  []\n[]\n\n[Problem]\n  kernel_coverage_check = false\n[]\n\n[Variables]\n  [T1]\n    order = CONSTANT\n    family = MONOMIAL\n    block = '1'\n  []\n  [T2]\n    order = FIRST\n    family = LAGRANGE\n    block = '2'\n  []\n[]\n\n[ICs]\n  [t1]\n    type = FunctionIC\n    variable = T1\n    function = '2 + x +y'\n  []\n[]\n\n[Kernels]\n  [cond1]\n    type = HeatConduction\n    variable = T1\n    block = '1'\n  []\n  [cond2]\n    type = HeatConduction\n    variable = T2\n    block = '2'\n  []\n[]\n\n[DGKernels]\n  active = 'dg_diff'\n\n  [./dg_diff]\n    type = DGDiffusion\n    variable = T1\n    epsilon = -1\n    sigma = 6\n  [../]\n[]\n\n\n\n[InterfaceKernels]\n  [intf1]\n    type = ConjugateHeatTransfer\n    variable = T2\n    T_fluid = T2\n    neighbor_var = T1\n    boundary = int_ss\n    htc = 'alpha_wall'\n  []\n[]\n\n[BCs]\n  [left_flux]\n    type = NeumannBC\n    value = 1000\n    variable = T1\n    boundary = left\n  []\n  [right_temp]\n    type = DirichletBC\n    value = 0\n    variable = T2\n    boundary = right\n  []\n[]\n\n[Materials]\n  [thermal_cond]\n    type = GenericConstantMaterial\n    prop_names = 'thermal_conductivity'\n    prop_values = '10'\n  []\n  [htc]\n    type = ADGenericConstantMaterial\n    prop_names = 'alpha_wall'\n    prop_values = '1000'\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'NEWTON'\n\n  nl_rel_tol = 1e-10\n  nl_abs_tol = 1e-10\n\n  # petsc_options = '-pc_svd_monitor'\n  # petsc_options_iname = '-pc_type'\n  # petsc_options_value = 'svd'\n\n  dt = 0.05\n  num_steps = 1\n[]\n\n[Outputs]\n  print_linear_residuals = false\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5441978",
                          "updatedAt": "2023-03-27T14:26:28Z",
                          "publishedAt": "2023-03-27T14:22:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Yes!  That is exactly what I want.  I did try this but didn't have the DGDiffusion kernel, so (if I remember right) I got non-convergence due to the ZEROPIVOT. That should nave given me a clue.",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5443391",
                          "updatedAt": "2023-03-27T16:16:59Z",
                          "publishedAt": "2023-03-27T16:11:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I think that you need at least order = FIRST in order to get an accurate representation of the diffusion operator. If you look at DGDiffusion you will see that any term involving the diffusion coefficient will disappear if the elemental values of _grad_u and _grad_test are zero. Essentially all you have when order = CONSTANT is a penalty term for jumps in the solution. You can try running our 2d_diffusion_dg_test.i with order = CONSTANT and you can see that the error asymptotically is approaching a constant (the error does not decrease linearly as you refine the mesh)\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+\n| time           | dofs           | h              | l2_err         |\n+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+00 |   4.000000e+00 |   7.071068e-01 |   4.293667e-02 |\n|   2.000000e+00 |   1.600000e+01 |   3.535534e-01 |   3.182482e-02 |\n|   3.000000e+00 |   6.400000e+01 |   1.767767e-01 |   2.031878e-02 |\n|   4.000000e+00 |   2.560000e+02 |   8.838835e-02 |   1.296973e-02 |\n|   5.000000e+00 |   1.024000e+03 |   4.419417e-02 |   9.107862e-03 |\n|   6.000000e+00 |   4.096000e+03 |   2.209709e-02 |   7.314127e-03 |\n|   7.000000e+00 |   1.638400e+04 |   1.104854e-02 |   6.529575e-03 |\n+----------------+----------------+----------------+----------------+",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5444770",
                          "updatedAt": "2023-03-27T18:58:21Z",
                          "publishedAt": "2023-03-27T18:57:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@joe61vette are you trying to develop arbitrarily high order rDG? If you just want second order accurate rDG, then that is what MOOSE finite volume is: P0P1 rDG.",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5445808",
                          "updatedAt": "2023-03-27T21:09:12Z",
                          "publishedAt": "2023-03-27T21:09:11Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Hi Alex: this is related to ASP.  I use DG for all advected quantities except for the liquid mass equation that is solved for pressure.  That is CG.  Basically the hybrid rDG/CG scheme you suggested in order to bypass the difficulty associated with a two-phase Rhie-Chow interpolation.  Many simple test cases run very well (I am using upwind).  The AD system is truly awesome by the way.\nApproach has difficulties when full 6 or 9 equation model is solved when the liquid phase doesn't exist. I plan (hope) to revisit once a segregated solver is available in MOOSE. That would allow me to solve the phasic momentum equations together first.  Then the mass and energy equations would not see velocity as a non-linear variable but would see it as an AD value with associated derivatives (e.g., pressure).\nThe above has to do with the boundary between a fluid region and a solid wall.  I would like to take advantage of CFEM for solid heat conduction.\nThanks for all the help,\nJoe",
                          "url": "https://github.com/idaholab/moose/discussions/23846#discussioncomment-5446041",
                          "updatedAt": "2023-03-27T21:40:14Z",
                          "publishedAt": "2023-03-27T21:40:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Wrong heavy distortion during phase-field fracture test",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Dear MOOSEers,\nWhen I'm doing phase-field fracture with a tensile tension example as shown left below (fixed bottom and applied tension at top),  the simulation result shows the mesh is heavily distorted, which is totally unreasonable.  The input files are as follows https://github.com/rh201/Phase-field-ductile-fracture/blob/main/elasticity.i. Any comments and suggestions are highly appreciated. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/23863",
          "updatedAt": "2023-04-29T03:06:17Z",
          "publishedAt": "2023-03-27T21:05:04Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nAre you expecting to be able to simulate the rupture of sample or do you think it should not reach this situation?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23863#discussioncomment-5445795",
                  "updatedAt": "2023-03-27T21:07:15Z",
                  "publishedAt": "2023-03-27T21:07:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Hi yes. The sample is expected to fracture in the middle, as reported in the literature.",
                          "url": "https://github.com/idaholab/moose/discussions/23863#discussioncomment-5445812",
                          "updatedAt": "2023-03-27T21:09:48Z",
                          "publishedAt": "2023-03-27T21:09:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@jiangwen84 @dschwen\nYou ll want to look at removing elements to simulate the fracture.",
                          "url": "https://github.com/idaholab/moose/discussions/23863#discussioncomment-5445827",
                          "updatedAt": "2023-03-27T21:11:10Z",
                          "publishedAt": "2023-03-27T21:11:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "With the phase-field fracture method, the elements are not need to be removed.\nBTW, when I don't consider plasticity (simply, brittle fracture), it works ok.",
                          "url": "https://github.com/idaholab/moose/discussions/23863#discussioncomment-5445884",
                          "updatedAt": "2023-03-27T21:18:57Z",
                          "publishedAt": "2023-03-27T21:18:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to generate triangular mesh in cylinder?",
          "author": {
            "login": "lipxisi"
          },
          "bodyText": "Hello\nI have learned how to generate cylinder and mesh using ConcentricCircleMeshGenerator and MeshExtruderGenerator, which generator can generate triangular mesh in cylinder?\nThanks for your answer!",
          "url": "https://github.com/idaholab/moose/discussions/23852",
          "updatedAt": "2023-03-27T14:38:54Z",
          "publishedAt": "2023-03-27T14:13:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDo you mean a mesh made of triangular elements in 2D, and tetrahedrals or prisms in 3D?\nIf so you can use this generator for a 2D circle mesh, then you can extrude it the same way as before.\nhttps://mooseframework.inl.gov/moose/source/meshgenerators/XYDelaunayGenerator.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23852#discussioncomment-5442003",
                  "updatedAt": "2023-03-27T14:24:04Z",
                  "publishedAt": "2023-03-27T14:24:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}