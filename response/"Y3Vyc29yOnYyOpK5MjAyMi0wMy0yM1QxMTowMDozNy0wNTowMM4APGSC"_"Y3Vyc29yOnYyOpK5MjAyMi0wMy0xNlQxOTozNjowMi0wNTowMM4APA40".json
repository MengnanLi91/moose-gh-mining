{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wMy0xNlQxOTozNjowMi0wNTowMM4APA40"
    },
    "edges": [
      {
        "node": {
          "title": "[FIXED] Avoid MacOS 12.3",
          "author": {
            "login": "milljm"
          },
          "bodyText": "UPDATE: This issue has been resolved with updates to the MOOSE conda packages. Please take a look at Discussion announcement #20630. Thanks!\nA recent Discussion revealed a possible issue when using the latest version of MacOS (12.3):\nmpiexec -n 2 <your application>\n<trimmed>\nlibpmpi.12.dylib                    0x000000010cae3994 MPIR_Assert_fail + 52\nError in system call pthread_mutex_destroy: Invalid argument src/mpi/debugger/dbginit.c:189\n<trimmed>\n\nUntil we investigate a solution it is advised users refrain from upgrading to this version of MacOS.",
          "url": "https://github.com/idaholab/moose/discussions/20564",
          "updatedAt": "2022-06-10T15:21:00Z",
          "publishedAt": "2022-03-15T18:03:30Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "roystgnr"
                  },
                  "bodyText": "Does that take a full Moose run to trigger it, or can it be replicated with just libMesh (or just TIMPI?  just some_mpi_hello_world.c) too?\nThere's definitely enough Undefined Behavior in the pthread_mutex_destroy man page that it's hard to be certain this is an Xcode bug - if we (or more likely MPI, if it triggers without us even setting --n_threads= ?) somehow try to destroy a mutex that's still in use anywhere, it'd be entirely valid for some pthreads implementations to let us get away with it while other implementations scream and die.",
                  "url": "https://github.com/idaholab/moose/discussions/20564#discussioncomment-2367325",
                  "updatedAt": "2022-06-10T15:20:59Z",
                  "publishedAt": "2022-03-15T18:35:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Internal 'Conda' testing was able to trigger it during a recent conda mambabuild . for the moose-mpich package:\nMPICH configure: \t--prefix=$PREFIX --enable-shared --enable-sharedlibs=clang --enable-fast=O2 --enable-debuginfo --enable-two-level-namespace --with-device=ch3 CC=x86_64-apple-darwin13.4.0-clang CXX=x86_64-apple-darwin13.4.0-clang++ FC=x86_64-apple-darwin13.4.0-gfortran F77=x86_64-apple-darwin13.4.0-gfortran F90= CFLAGS=-march=core2 -mtune=haswell -I$PREFIX/include CXXFLAGS=-march=core2 -mtune=haswell -I$PREFIX/include FFLAGS=-march=core2 -mtune=haswell -I$PREFIX/include LDFLAGS=-L$PREFIX/lib -Wl,-rpath,$PREFIX/lib FCFLAGS=-march=core2 -mtune=haswell -I$PREFIX/include F90FLAGS= F77FLAGS=\nMPICH CC: \tx86_64-apple-darwin13.4.0-clang -march=core2 -mtune=haswell -I$PREFIX/include   -O2\nMPICH CXX: \tx86_64-apple-darwin13.4.0-clang++ -march=core2 -mtune=haswell -I$PREFIX/include  -O2\nMPICH F77: \tx86_64-apple-darwin13.4.0-gfortran -march=core2 -mtune=haswell -I$PREFIX/include  -O2\nMPICH FC: \tx86_64-apple-darwin13.4.0-gfortran -march=core2 -mtune=haswell -I$PREFIX/include  -O2\nMPICH Custom Information: \t\n$PREFIX/bin/mpiexec\nError in system call pthread_mutex_destroy: Invalid argument\n    src/mpi/debugger/dbginit.c:189\nAssertion failed in file src/mpi/debugger/dbginit.c at line 190: err == 0\n0   libpmpi.12.dylib                    0x000000010963e771 MPL_backtrace_show + 49\n1   libpmpi.12.dylib                    0x000000010959e9c4 MPIR_Assert_fail + 36\n2   libpmpi.12.dylib                    0x0000000109eba13b MPIR_Debugger_set_aborting + 107\n3   libpmpi.12.dylib                    0x0000000109608576 MPID_Abort + 198\n4   libpmpi.12.dylib                    0x0000000109597302 MPIR_Err_return_comm + 482\n5   mpivars                             0x00000001084836ce main + 46\n6   dyld",
                          "url": "https://github.com/idaholab/moose/discussions/20564#discussioncomment-2367358",
                          "updatedAt": "2022-06-10T15:21:04Z",
                          "publishedAt": "2022-03-15T18:40:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "FYI, I updated the Discussion. It turns out this is due to a MacOS update, not Xcode by itself.",
                          "url": "https://github.com/idaholab/moose/discussions/20564#discussioncomment-2367365",
                          "updatedAt": "2022-06-10T15:21:01Z",
                          "publishedAt": "2022-03-15T18:41:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Modeling water flow through a channel by thermal hydraulics module",
          "author": null,
          "bodyText": "Can I use THM to model water flow through a channel?  I tried to just replace the IdealGasFluidProperties with Water97FluidProperties, but an error occured saying that  s_from_v_e has not been implemented.",
          "url": "https://github.com/idaholab/moose/discussions/20626",
          "updatedAt": "2022-03-23T14:37:19Z",
          "publishedAt": "2022-03-23T11:52:20Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@andrsd",
                  "url": "https://github.com/idaholab/moose/discussions/20626#discussioncomment-2422920",
                  "updatedAt": "2022-03-23T14:08:31Z",
                  "publishedAt": "2022-03-23T14:08:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "andrsd"
                  },
                  "bodyText": "It is possible, but not with Water97FluidProperties class. This class is missing implementation that is needed for the compressible Navier-Stokes formulation w/rDG we are using inside THM.\nOut of the box you should be able to use IdealGasFluidProperties and StiffenedGasFluidProperties.",
                  "url": "https://github.com/idaholab/moose/discussions/20626#discussioncomment-2423147",
                  "updatedAt": "2022-03-23T14:37:19Z",
                  "publishedAt": "2022-03-23T14:37:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MPI_Abort(MPI_COMM_WORLD, 1) - process 0",
          "author": {
            "login": "ritamcj"
          },
          "bodyText": "Hello everyone,\nI am simulating uniaxial compression for a dual phase material using tensor mechanics module. After some amount of deformation, I see an MPI_Abort error. I compiled my files in debug mode and ran it in GDB. The output is attached in the pdf debug_17032022_17:04.pdf. Could someone kindly explain \"You requested to reuse the nonlinear residual vector as the base vector for computing the action of the matrix-free Jacobian, but the vectors are not the same. Your physics must have states; either remove the states from your code or make sure that you set_mf_reuse_base(false)\". Does \"state\" mean state variables? Also, I couldn't find where to put set_mf_reuse_base = false in my input file. My executioner block is as follows:\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 0.01\n    growth_factor = 1.0000001\n    cutback_factor = 0.9\n    optimal_iterations = 15\n    iteration_window = 2\n    reject_large_step = true\n    reject_large_step_threshold = 0.1\n  [../]\n\n\n  type = Transient\n  nl_max_its = 15\n  scheme = bdf2\n  solve_type = PJFNK\n  petsc_options = -snes_ksp_ew\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  l_max_its = 40\n  l_tol = 1.0e-3\n  nl_rel_tol = 1.0e-5\n  start_time = 0.0\n  num_steps = 200000\n  nl_abs_tol = 1e-5\n  line_search = none\n  automatic_scaling = true\n  scaling_group_variables = 'disp_x disp_y disp_z'\n  [./Predictor]\n    type = SimplePredictor\n    scale = 1.0\n    skip_after_failed_timestep = true\n  [../]\n[]\n\nApart from this, I don't see \"Bad file descriptor\" error when I run my file in opt mode. I look forward to your advice.\nThanks and regards,\nRitam",
          "url": "https://github.com/idaholab/moose/discussions/20581",
          "updatedAt": "2022-06-14T02:24:18Z",
          "publishedAt": "2022-03-17T11:58:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is a parameter in the Executioner, see the solver parameters\nhttps://mooseframework.inl.gov/source/executioners/Transient.html\nThis error means PETSc saw the nonlinear function change from nonlinear and linear iterations. That is not common, and in moose, that occurs primarily in mechanics contact module because of contact (@fdkong)\nDo you have contact in your simulation?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20581#discussioncomment-2381122",
                  "updatedAt": "2022-06-14T02:24:20Z",
                  "publishedAt": "2022-03-17T14:27:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Guillaume,\nI do not have contact in my simulation. However, I am applying uniaxial compression along z-axis on a dual phase grain structure with phase-2 situated at phase-1 grain boundaries. The initial and final structures (when the simulation fails) are attached. If the phases are coming in contact after some amount of deformation, it makes sense to me that the simulation fails. I will try snesmf_reuse_base = false and check. I'll also simulate the same problem for uniaxial tension and see whether I see the same error. Many thanks for your suggestions.\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/20581#discussioncomment-2383058",
                          "updatedAt": "2022-06-14T02:24:20Z",
                          "publishedAt": "2022-03-17T19:21:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi everyone,\nJust wanted to inform that MPI Abort error was due to improper node set generation inside Moose using BoundingBoxNodeSetGenerator. There were inaccuracies in the coordinates of the bottom left and top right corners of faces. I modified the mesh generation method and am now reading the mesh from an inp file from Dream3D. @GiudGiud Thank you for your help.\nWarm regards,\nRitam",
                          "url": "https://github.com/idaholab/moose/discussions/20581#discussioncomment-2422820",
                          "updatedAt": "2022-06-16T19:31:33Z",
                          "publishedAt": "2022-03-23T13:58:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "is it possible to make git commit hash available for an app?",
          "author": {
            "login": "mcacace"
          },
          "bodyText": "Dear all,\nwould it be possible  to have an app to console output the version and the Git commit hash (including possibly whether the repository was dirty) in a  similar to what can be done to the framework?\nSo far, myapp --version it only shows the framework commit hash. However, it works if I directly force the git commit hash (like >git describe --always --dirty --match 'NOT A TAG').\nThanks in advance,\nMauro",
          "url": "https://github.com/idaholab/moose/discussions/20528",
          "updatedAt": "2022-06-20T22:01:06Z",
          "publishedAt": "2022-03-10T15:37:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mcacace"
                  },
                  "bodyText": "I kind of found a solution by modifying the makefile of my application to include the commit stage:\n\nGIT_VERSION := $(shell git --no-pager describe --tags --always --dirty)\nADDITIONAL_CPPFLAGS += -DGOLEM_VERSION=\"$(GIT_VERSION)\"\n\nAnd then by overwrite the getVersion() call in my base App.C to return my GOLEM_VERSION instead of the default MOOSE_VERSION.\nNow, my question: do you think it is the proper way or should I have done things differently?\nThanks for any feedback,\nmauro",
                  "url": "https://github.com/idaholab/moose/discussions/20528#discussioncomment-2405754",
                  "updatedAt": "2022-06-20T22:01:07Z",
                  "publishedAt": "2022-03-21T10:33:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hey @mcacace\nI have done this before. From memory there is a GEN_REVISION := no in the app Makefile - changing this to a yes should generate a file include/base/GolemRevision.h that defines a variable GOLEM_REVISION that is the latest git hash.\nSo you can just add this header (#include \"GolemRevision\" ) wherever you need this information.",
                          "url": "https://github.com/idaholab/moose/discussions/20528#discussioncomment-2419335",
                          "updatedAt": "2022-06-20T22:01:10Z",
                          "publishedAt": "2022-03-23T03:24:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with installation",
          "author": {
            "login": "KhaledNabilSharafeldin"
          },
          "bodyText": "Hello,\ncurrently i'm updating the version of MOOSE I am currently using.\nI'm following HPC install steps, and loading\ncmake/3.20.6\ngcc/10.2.0\nopenmpi/4.0.5\nthis compiles PETSc and libmesh just fine, but when i try running the tests, it doesn't detect the python installation. for that I need to load anaconda\nhowever, whenever I try loading anaconda, installing PETSc fails with the error that there are no C compiler found.\nany suggestions?",
          "url": "https://github.com/idaholab/moose/discussions/20618",
          "updatedAt": "2022-06-13T18:45:14Z",
          "publishedAt": "2022-03-22T21:05:12Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf loading your conda environment comes with a set of compilers, a different MPI library, etc, then this will set it up for failure, as there will be conflicts between the modules you loaded and the conda packages.\nIs there a python module you can load instead? Or a clean anaconda environment?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2417934",
                  "updatedAt": "2022-06-13T18:45:12Z",
                  "publishedAt": "2022-03-22T21:08:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "I did ask the cluster team if there's a separate python module, but unfortunately no, that isn't the case.\nHowever, I tried loading up anaconda then creating a bare down environment, then activated it and tried to compile PETSc. I get the same error.  Could not locate a functional C compiler\nused this to create the env conda create --name tempenv python=3.6\nall $CC and other env vars are set correctly.",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2417987",
                          "updatedAt": "2022-06-13T18:45:13Z",
                          "publishedAt": "2022-03-22T21:19:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "i'm wondering if these installation steps need to compile both PETSc and libmesh afterwards or not\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418063",
                          "updatedAt": "2022-06-13T18:45:15Z",
                          "publishedAt": "2022-03-22T21:36:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "i'm wondering if these installation steps need to compile both PETSc and libmesh afterwards or not\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html\n\nThese installation steps are not for clusters. They are for local machines. You cannot mix these instructions at all.\n\nI did ask the cluster team if there's a separate python module, but unfortunately no, that isn't the case.\nHowever, I tried loading up anaconda then creating a bare down environment, then activated it and tried to compile PETSc. I get the same error. Could not locate a functional C compiler used this to create the env conda create --name tempenv python=3.6\nall $CC and other env vars are set correctly.\n\nWhat are CC and other env vars?\nIf it cant find a C compiler, there could be an issue.\nwhat do these return ?\necho $CC $CXX $FC\nand\nwhich mpirun \nand\nmodule list\nand paste the output of env as well please, just to check",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418129",
                          "updatedAt": "2022-06-13T18:45:14Z",
                          "publishedAt": "2022-03-22T21:48:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "~ $ echo $CC $CXX $FC\nmpicc mpiCC mpif90\n:~ $ which mpirun\n/apps/cent7/xalt/bin/mpirun\n:~ $ module list\nCurrently Loaded Modules:\n\nxalt/1.1.2 (S)   3) gmp/6.1.2    5) mpc/1.1.0    7) zlib/1.2.11     9) cmake/3.20.6\nrcac             4) mpfr/3.1.6   6) gcc/10.2.0   8) openmpi/4.0.5\n\nWhere:\nS:  Module is Sticky, requires --force to unload or purge\nconda env dir: ~/.conda/envs/cent7/2020.02-py37/tempenv",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418212",
                          "updatedAt": "2022-08-02T19:55:04Z",
                          "publishedAt": "2022-03-22T22:13:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Never seen this mpiCC , what does this return: mpiCC --version\nI'm not familiar with mpc? Is that an mpi distribution too? Do you need this?\nCan you try with as few modules as possible? And conda does not need to be loaded when installing.\nPython only helps for some of the tests.",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418237",
                          "updatedAt": "2022-08-02T19:55:15Z",
                          "publishedAt": "2022-03-22T22:21:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": ":~ $ mpiCC --version\ng++ (Spack GCC) 10.2.0\nCopyright (C) 2020 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418248",
                          "updatedAt": "2022-08-02T19:55:44Z",
                          "publishedAt": "2022-03-22T22:24:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "the reason I suspected a faulty installation is that when I compile my project, one of the errors i get is that\nexII is not a namespace. which i use in one of the source files to generate a mesh.\nnot really sure what the problem is since this namespace is defined in \"libmesh/exodusII_io_helper.h\" source file and i do include it. This is the first time I get this kind of error.\nnot to mention a bunch of errors due to old inputparameters syntax, which does not go away even after updating the syntax for it (no forward declaration, no template, etc..., basically following the example in the link provided by the error https://mooseframework.inl.gov/newsletter/2021_11.html#legacy-input-parameter-deprecation)",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418277",
                          "updatedAt": "2022-08-02T19:56:13Z",
                          "publishedAt": "2022-03-22T22:33:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you paste one of those inputParam errors here?\nAnd the corresponding code and header for which you get the error.\nLinks to pages on a github repo would work too obviously\nThis is all unrelated to a missing C compiler error.",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418357",
                          "updatedAt": "2022-08-02T19:56:18Z",
                          "publishedAt": "2022-03-22T22:51:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "Terminal output\nprojects/CDD-MOOSE/src/main.C:24:17: error: 'exII' is not a namespace-name\n   24 | using namespace exII;\n      |                 ^~~~\n\ncode snippet:\n#include \"cddAppTestApp.h\"\n#include \"MooseInit.h\"\n#include \"Moose.h\"\n#include \"MooseApp.h\"\n#include \"AppFactory.h\"\n\n#include \"libmesh/exodusII_io_helper.h\"\n// #include \"libmesh/exodusII.h\"\ndouble L_MESH;\ndouble X_MIN;\ndouble X_MAX;\ndouble Y_MIN;\ndouble Y_MAX;\ndouble Z_MIN;\ndouble Z_MAX;\nusing namespace exII;\n#include \"GlobalVars.h\"\n#include \"libmesh/boundary_info.h\"\n#include \"libmesh/enum_elem_type.h\"\n#include \"libmesh/elem.h\"\n\nTerminal error\nIn file included from /home/projects/moose/framework/build/header_symlinks/MooseADWrapper.h:12,\n                 from /home/projects/moose/framework/build/header_symlinks/MooseUtils.h:17,\n                 from /home/projects/moose/framework/build/header_symlinks/InputParameters.h:13,\n                 from /home/projects/moose/framework/build/header_symlinks/DistributionInterface.h:12,\n                 from /home/projects/moose/framework/build/header_symlinks/UserObject.h:13,\n                 from /home/projects/moose/framework/build/header_symlinks/ElementUserObject.h:13,\n                 from /home/projects/moose/framework/build/header_symlinks/ElementPostprocessor.h:12,\n                 from /home/projects/CDD-MOOSE/build/header_symlinks/ComputeMeanPlasicDistortion.h:11,\n                 from /home/projects/CDD-MOOSE/src/postprocessors/ComputeMeanPlasicDistortion.C:10,\n                 from /home/projects/CDD-MOOSE/build/unity_src/postprocessors_Unity.C:2:\n/home/projects/moose/framework/build/header_symlinks/MooseTypes.h:466:17: error: static assertion failed: defineLegacyParams is no longer supported as legacy input parameter construction is no longer supported; see mooseframework.org/newsletter/2021_11.html#legacy-input-parameter-deprecation for more information\n  466 |   static_assert(false,                                                                             \\\n      |                 ^~~~~\n/home/projects/moose/framework/build/header_symlinks/MooseTypes.h:466:17: note: in definition of macro 'defineLegacyParams'\n  466 |   static_assert(false,                                                                             \\\n      |                 ^~~~~\n\nsource:\n#include \"ComputeMeanPlasicDistortion.h\"\n\n#include <algorithm>\n#include <limits>\n\nregisterMooseObject(\"cddAppApp\", ComputeMeanPlasicDistortion);\n\nInputParameters\nComputeMeanPlasicDistortion::validParams()\n{\n  // Define the parameters\n  InputParameters params = ElementPostprocessor::validParams();\n  params.addRequiredCoupledVar(\"rho_vars\",\"This is the collection of density variables for all slip systems\");\n  params.addRequiredCoupledVar(\"z_vars\",\"This is the collection of density variables for all slip systems\");\n  params.addRequiredCoupledVar(\"chi_vars\",\"This is the collection of incompatible variables.\");\n  params.addRequiredCoupledVar(\"resolved_shear_stress\", \"The magnitude of the resolved shear stress used to calculate the dislocation velocities \");\n  params.addRequiredParam<unsigned int>(\"i\",\"row id\");\n  params.addRequiredParam<unsigned int>(\"j\",\"coloumn id\");\n  params.addRequiredParam<bool>(\"relaxed\",\"This specifies whether the initial mean plastic distortion is 0\");\n  params.addRequiredParam<unsigned int>(\"number_of_slip_systems\",\" \");\n  params.addParam<bool>(\"subtract_mean\",true,\"This is for debugging\");\n  return params;\n}\n\nHeader:\n#pragma once\n\n#include \"ElementPostprocessor.h\"\n#include \"MicrostructureHelper.h\"\n\n\n\n/// A postprocessor for collecting the nodal min or max value\nclass ComputeMeanPlasicDistortion : public ElementPostprocessor\n{\npublic:\n  /**\n   * Class constructor\n   * @param parameters The input parameters\n   */\n\n  ComputeMeanPlasicDistortion(const InputParameters & parameters);\n  static InputParameters validParams();\n\n  virtual void initialize() override;\n  virtual Real getValue() override;\n  virtual void execute() override;\n  virtual void threadJoin(const UserObject & y) override;",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2418804",
                          "updatedAt": "2022-08-02T19:56:34Z",
                          "publishedAt": "2022-03-23T01:04:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "I figured out the issue with legacyParamsDefinition, if the original source doesnt have defineLegacyParam() it will not prompt an error to that specific file, instead, it'll prompt one of the files within the same folder regardless if it's following the new syntax or not.\nstill havent figured out what is the issue with using namespace exII",
                          "url": "https://github.com/idaholab/moose/discussions/20618#discussioncomment-2419099",
                          "updatedAt": "2022-08-02T19:56:43Z",
                          "publishedAt": "2022-03-23T02:15:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use PorousFlowOutflowBC outside of Porous Flow module architecture",
          "author": {
            "login": "alexguev"
          },
          "bodyText": "Hi,\nI am trying to simulate a Darcy-Cahn-Hilliard model in a Hele-Shaw setting, following the equations (10) and (11) from this paper. I have implemented them without using the Porous Flow module as I was thinking that adding the coupling with Cahn-Hilliard might not be straightforward (I'll share my input file if that helps). In particular, coupling the initial Buckley\u2013Leverett problem with Cahn-Hilliard provides sufficient regularization, to some extent, to avoid resorting to artificial numerical diffusion or viscosity, while keeping a fairly sharp saturation front.\nIn addition, I have poromechanics coupling. In all, I am solving for the saturation, the pressure, the Cahn-Hilliard potential (usual splitting into two second-order PDEs) and the displacement. Note that there is only one pressure as I neglect capillary effects (Buckley\u2013Leverett setting). The porosity is coupled with the volumetric strain and pressure, as per usual poromechanics.\nI am interested in simulating the invasion of water into oil for instance. Notably, I have a Neumann BC in pressure at entry to have constant flow rate, and a Dirichlet BC in pressure at exit equal to 0; I want the fluids to be freely expelled out of the domain. However, for certain sets of parameters (e.g. low Young's modulus), the exit boundary can be highly deformed leading to convergence issues; this happens at first timestep and then the boundary relaxes back to a vertical position (see picture below at first timestep). In the setting below, saturation phase-field is shown, injection is on the left boundary, displacement is fixed to 0 everywhere but on exit right boundary (if I fix displacement on exit boundary as well, the mesh will then be distorted).\n\nI understand that this problem should be addressed by PorousFlowOutflowBC, to avoid the exit boundary to try and expel fluid that is not there yet, which I think leads to the deformation due to the poromechanics coupling. However, given the architecture of Porous Flow module, I can't really use it outside as such. I thus find myself at a crossroads between:\n\ntrying to implement this type of BC outside of the Porous Flow module architecture (how easy would that be?) and\nimplementing my model in the Porous Flow module, which benefits from all the hard work put here to address all that kind of tricky issues related to poromechanics, but might be tedious to implement my equations; in particular, adding the Cahn-Hilliard coupling and modify the existing porous flow equations accordingly. In addition, I will add in the near future further customization regarding the mechanics, which is not in Porous Flow module.\n\nThanks in advance,\nAlex",
          "url": "https://github.com/idaholab/moose/discussions/20590",
          "updatedAt": "2022-07-13T09:08:24Z",
          "publishedAt": "2022-03-18T16:23:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Hi @alexguev , i wrote about half of the PorousFlow module including PorousFlowOutflowBC.  Are you a little experienced with MOOSE C++?  If so, i suggest that you write your own version of the BC.  One of the benefits of MOOSE is that it is fairly easy to customize to your own physics, and i suspect your case is a situation where that is optimal.  One advantage here is that you can somewhat copy the code of PorousFlowOutflowBC.  You'll be able to omit a lot of that code because you probably don't have multicomponent fluids, and might not need upwinding.\nOne nice thing about PorousFlow is that it plays nicely with tensor_mechanics or geochemistry, which are the most common use-cases of inter-module coupling, but, you're right, it is not designed to couple naturally with all parts of MOOSE",
                  "url": "https://github.com/idaholab/moose/discussions/20590#discussioncomment-2398855",
                  "updatedAt": "2022-07-13T09:11:17Z",
                  "publishedAt": "2022-03-20T21:40:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Just wanted to say: it's really cool that you're doing this work.  Please keep us advised on progress (maybe in this dicussion?).   Also, the above it just my opinion based on only a little thought - no doubt others will have other opinions.",
                          "url": "https://github.com/idaholab/moose/discussions/20590#discussioncomment-2398877",
                          "updatedAt": "2022-07-13T09:11:42Z",
                          "publishedAt": "2022-03-20T21:45:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "Hey @WilkAndy, thanks for your reply and all the work you've been putting in for this module!\nYes I have just written my own version of the BC mimicking HeatConductionOutflow.C, which doesn't seem to solve my issue in the end (namely the exit boundary still deforms) - although I may have done something wrong.\nSince there seems to be many sources of error for such highly nonlinear problem (poromechanical Darcy-Cahn-Hilliard), would there be an example/test that would be fairly similar in the Porous Flow module? So I can see what issues/solutions I should be aware of. To put it briefly, I'm concerned with injecting water into oil in the \"beam\" domain above (ultimately in a Hele-Shaw cell), with constant flow rate (so Neumann BC in pressure at entry boundary). The oil pushed by water is free to flow out at the exit boundary. In addition, I want to capture the deformation due to pore pressure. Tentatively, I might be able to insert the Cahn-Hilliard bits into such example to benefit from the Porous Flow module framework.\nFirst of, I will check in more details the Convergence criteria page, which seems important in such hydromechanical coupling.\nI will be happy to share in more details once I make sure I don't have any too obvious mistakes. It is indeed a very interesting topic!",
                          "url": "https://github.com/idaholab/moose/discussions/20590#discussioncomment-2417391",
                          "updatedAt": "2022-07-13T09:11:48Z",
                          "publishedAt": "2022-03-22T19:45:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "There's not really an example that you can exactly follow.  I agree that the outflow end shouldn't deform too much, since fluid should just flow out!  Similar to your example, there are the following (off the top of my head)\n\nBuckley-Leverett https://mooseframework.inl.gov/modules/porous_flow/tests/buckley_leverett/buckley_leverett_tests.html\nCold CO2\u200b injection into an elastic reservoir - a multi-phase THM problem https://mooseframework.inl.gov/modules/porous_flow/thm_example.html\nSome of the examples towards the bottom of: https://mooseframework.inl.gov/modules/porous_flow/tests/sinks/sinks_tests.html\n\na",
                          "url": "https://github.com/idaholab/moose/discussions/20590#discussioncomment-2418003",
                          "updatedAt": "2022-07-13T09:12:25Z",
                          "publishedAt": "2022-03-22T21:22:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow - Excavation construction process",
          "author": {
            "login": "fcastiloo"
          },
          "bodyText": "Hi MOOSE,\nI am new in the MOOSE world. I am simulating an excavation process with PorousFlow module. I think I understand how it works and the coupling among physics. I also studied the simulation of a coal mine where the excavated rock gets permeability zero.\nBut I was wondering if it is possible to update the mesh and somehow remove the nodes where the excavation occurs, hence, I can also update the boundary conditions after the excavation. I know I can pass information between meshes with MultyApps, but I could not find a good example. Also, I would like to have a unique output file where I can see how the mesh changes over time. Please let me knwo if this doesnt make sense.\nThanks and regards,\nFelipe",
          "url": "https://github.com/idaholab/moose/discussions/20601",
          "updatedAt": "2022-07-26T16:05:42Z",
          "publishedAt": "2022-03-21T18:30:06Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I would like others to comment on this, but one way is to use BlockDeletionGenerator, https://mooseframework.inl.gov/source/meshgenerators/BlockDeletionGenerator.html .   Please note that your simulation might \"go crazy\" when you suddenly delete a block of elements, and you might have to soften the material before deleting it.",
                  "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2410156",
                  "updatedAt": "2022-07-26T16:05:48Z",
                  "publishedAt": "2022-03-21T21:18:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "fcastiloo"
                          },
                          "bodyText": "Hi,\nThanks! The only problem is that with BlockDeletionGenerator, every time the mesh changes, I will have to make a new MOOSE input file.\nMaybe someone else has another idea. Usually, in this kind of problems, the  simulation software allow the \"deactivation\" of the nodes. But my experience is only as user.",
                          "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2410487",
                          "updatedAt": "2022-07-26T16:06:49Z",
                          "publishedAt": "2022-03-21T22:37:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo you'll want to use a https://mooseframework.inl.gov/source/userobject/CoupledVarThresholdElementSubdomainModifier.html\nThis should be able to change the subdomain IDs of elements, and you can restrict them out of the domain of application of kernels that way, and it should also be able to update the sidesets for applying boundary conditions.\nOne restriction is that you have to frame the conditions for the mesh modification as a variable threshold. Hope that works for you\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2410545",
                  "updatedAt": "2022-07-26T16:06:49Z",
                  "publishedAt": "2022-03-21T22:50:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "fcastiloo"
                          },
                          "bodyText": "Hi GuidGuid,\nThanks!! This looks like what I need. One naive question: How can I define a rectangule as a function in MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2414894",
                          "updatedAt": "2022-07-26T16:06:51Z",
                          "publishedAt": "2022-03-22T13:30:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What do you mean a rectangle? This doesnt take a rectangle, this takes a single real\nIf this is for something else, you can make a 'rectangle' (function is 0 outside a rectangle) with both of those:\nhttps://mooseframework.inl.gov/source/functions/PiecewiseMulticonstant.html\nhttps://mooseframework.inl.gov/source/functions/MooseParsedFunction.html",
                          "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2415155",
                          "updatedAt": "2022-07-26T16:06:51Z",
                          "publishedAt": "2022-03-22T14:06:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fcastiloo"
                          },
                          "bodyText": "Thanks! In the example (https://mooseframework.inl.gov/source/userobject/CoupledVarThresholdElementSubdomainModifier.html), in the overview section, a function of a circle is defined and then re-defined as an auxvar. I was wondering how to define a rectangule instead of a circle. But it looks like I can do that with PasedFunction.\nThanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/20601#discussioncomment-2415673",
                          "updatedAt": "2022-07-26T16:06:51Z",
                          "publishedAt": "2022-03-22T15:14:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "mass fraction at PorousFlowPeacemanBorehole",
          "author": {
            "login": "lynnmunday"
          },
          "bodyText": "I have a single phase, 2 component simulation (variables are massFracCold , massFracHot, Pore_Pressure).  Injection is with massFracCold using a PorousFlowPointSourceFromPostprocessor and production is with a PorousFlowPeacemanBorehole.  When I look at the exodus output for the massFraction for each phase, they vary between 0 and 1 everywhere in the domain except at the peaceman borehole.  At the peaceman borehole, which coincides with a node, the massfraction for the injected phase (massFracCold) just keeps climbing and the initial phase (massFracHot) that is being displaced levels off.  It's like the values at the production node are being accumulated.  Is this the expected behavior at a production point?\nHere are what I think are the important parts of my input file (Some of these are falcon objects in a PR that has not been merged yet):\n[Variables]\n  [Pore_Pressure]\n  []\n  [massFracCold]\n    initial_condition = 0.00001\n  []\n  [massFracHot]\n    initial_condition = 0.99999\n  []\n[]\n\n[PorousFlowFullySaturated]\n  porepressure = Pore_Pressure\n  mass_fraction_vars = 'massFracCold massFracHot'\n  coupling_type = Hydro\n  fp = simple_fluid\n  stabilization = Full\n[]\n\n[UserObjects]\n  [kg_out_uo]\n    type = PorousFlowSumQuantity\n  []\n[]\n\n[Modules]\n  [FluidProperties]\n    [simple_fluid]\n      type = SimpleFluidProperties\n      viscosity = 0.0001\n    []\n  []\n[]\n\n[DiracKernels]\n  [inject_fluid_mass]\n    type = PorousFlowReporterPointSourcePP\n    mass_flux = inject_mass_flux\n    x_coord_reporter = 'inject_node/node_x'\n    y_coord_reporter = 'inject_node/node_y'\n    z_coord_reporter = 'inject_node/node_z'\n    variable = massFracCold\n  []\n  [withdraw_fluid]\n    type = PorousFlowPeacemanBorehole\n    fluid_phase = 0\n    SumQuantityUO = kg_out_uo\n    bottom_p_or_t = insitu_pp_borehole\n    character = 1\n    line_length = 1\n    x_coord_reporter = 'prod_node/node_x'\n    y_coord_reporter = 'prod_node/node_y'\n    z_coord_reporter = 'prod_node/node_z'\n    weight_reporter = 'prod_node/node_value'\n    unit_weight = '0 0 0'\n    use_mobility = true\n    variable = Pore_Pressure\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20589",
          "updatedAt": "2022-06-16T10:32:17Z",
          "publishedAt": "2022-03-18T00:00:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "@cpgr or @WilkAndy",
                  "url": "https://github.com/idaholab/moose/discussions/20589#discussioncomment-2384279",
                  "updatedAt": "2022-06-16T10:32:38Z",
                  "publishedAt": "2022-03-18T00:00:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "So is massfrachot being withdrawn and massfraccold not? You might need another PeacemanBorehole for the massfraccold variable and use the mass_fraction_component input parameter to specify the cold mass fraction?\nAndy would probably know better than me so hopefully he can chime in!",
                  "url": "https://github.com/idaholab/moose/discussions/20589#discussioncomment-2384356",
                  "updatedAt": "2022-06-16T10:33:27Z",
                  "publishedAt": "2022-03-18T00:30:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Are you sure you have 2 components?  I think you have 3 components: MassFracCold, MassFracHot and 1 - (MassFracCol + MassFracHot).\nYou will have to know the order of the unknowns: what Variable is associated with which fluid-component equation.  That's defined at the top of https://mooseframework.inl.gov/source/actions/PorousFlowFullySaturated.html",
                  "url": "https://github.com/idaholab/moose/discussions/20589#discussioncomment-2384480",
                  "updatedAt": "2022-06-16T10:33:34Z",
                  "publishedAt": "2022-03-18T01:00:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Sorry for being terse - i'm in a day-long workshop :-)",
                          "url": "https://github.com/idaholab/moose/discussions/20589#discussioncomment-2384482",
                          "updatedAt": "2022-06-16T10:33:32Z",
                          "publishedAt": "2022-03-18T01:01:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "@WilkAndy I didn't read your tutorial close enough!  Thanks for pointing me to the documentation for that action.  I did have three components.  I fixed that and put in another peaceman borehole for the new fluid like @cpgr pointed out and used the mass_fraction and it all seems to be working.",
                  "url": "https://github.com/idaholab/moose/discussions/20589#discussioncomment-2392548",
                  "updatedAt": "2022-06-16T10:33:52Z",
                  "publishedAt": "2022-03-19T02:53:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "outer_boundary_id  in PeripheralTriangleMeshGenerator",
          "author": null,
          "bodyText": "I want to use PeripheralTriangleMeshGenerator to generate a triangulated mesh between a generated outer circle boundary and a provided inner mesh.  The outer_boundary_id is set to define the mesh outer boundary. Then I use FancyExtruderGenerator to extrude the 2D mesh into 3D. But when I define  boundary condition for the radial boundary in my simulation, an error occures saying that this boundary ID does not exist.\nNot sure why this is the case?",
          "url": "https://github.com/idaholab/moose/discussions/20582",
          "updatedAt": "2022-03-18T12:14:52Z",
          "publishedAt": "2022-03-17T12:42:17Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAdd show_info = true to each mesh generator blocks to see if the boundary wasnt defined well in the first place or if it got removed by extrusion.\nYou can use another mesh generator such as https://mooseframework.inl.gov/source/meshgenerators/SideSetsAroundSubdomainGenerator.html with a non-fixed normal to paint a radial boundary around a mesh.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20582#discussioncomment-2381062",
                  "updatedAt": "2022-03-17T14:14:06Z",
                  "publishedAt": "2022-03-17T14:13:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Thank you. According to your suggestion, I added show_info= true and found that the ID on the outer boundary was defined with a fixed value of 10000. I can use this ID in my simulation.",
                          "url": "https://github.com/idaholab/moose/discussions/20582#discussioncomment-2387342",
                          "updatedAt": "2022-03-18T12:14:42Z",
                          "publishedAt": "2022-03-18T12:14:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[PorousFlow] why my drainage is less when I increase 'flux_function' to a certain value?",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nso I'm using PorousFlowPiecewiseLinearSink for my drain BC\n   [./drain_DRAINSRF_EOS_PITFILL]\n      type = PorousFlowPiecewiseLinearSinkBEH\n      variable = porepressure\n      boundary = 'DRAINSRF_UG'\n      pt_vals = '0 1e9'\n      multipliers = '0 1e9'\n      flux_function = 1\n      PT_shift = 0\n      v = min\n      use_mobility = true\n      fluid_phase = 0\n     [../]\n\nbelow is my drain surface 'DRAINSRF_UG' generated externally (Abaqus)\n\nand this is what I got from my BC, as you can see some of the lower parts (drives and stopes) are not being drained. This is the phreatic surface (isosurface where porepressure = 0)\n\nSo I thought, increase the flux_function would drain more > bigger phreatic surface, but it's not the case, here is when flux_function = 1e2, I drain less compared to when flux_function = 1\n\nNot sure why this is the case?\nNoted: I find this solver setting gives me the smoothes results, other standard settings dont give me anything as nice.\n  [Executioner]\n    type = Steady\n    solve_type = NEWTON\n    petsc_options = '-snes_converged_reason'\n    petsc_options_iname = '-pc_type -pc_hypre_type -pc_hypre_boomeramg_strong_threshold -pc_hypre_boomeramg_agg_nl  -pc_hypre_boomeramg_agg_num_paths -pc_hypre_boomeramg_max_levels  -pc_hypre_boomeramg_coarsen_type   -pc_hypre_boomeramg_interp_type -pc_hypre_boomeramg_P_max -pc_hypre_boomeramg_truncfactor'\n    petsc_options_value = 'hypre    boomeramg 0.5 0 4 25 Falgout ext+i 2 0.2'\n    nl_rel_tol = 1e-6\n    l_max_its = 300\n    nl_max_its = 100\n  []\n\nPlease let me know if you have any idea in mind, thank you!\n@GiudGiud could you please help me tag any expert in this field, I know @WilkAndy is an expert on this topic",
          "url": "https://github.com/idaholab/moose/discussions/20545",
          "updatedAt": "2022-07-26T15:01:39Z",
          "publishedAt": "2022-03-14T05:15:24Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I don't know the answer!\n\nCould it be the v = min in your version of the BC?  i don't know what that is doing.\nPerhaps when you run further in time, or tighten the tolerances, you'll get the expected behaviour.  Eg, when flux_function = 100, when using the same nl_tols then you might be actually 2 orders of magnitude \"less converged\" than when flux_function = 1.\nPerhaps nonlinear effects are coming into play: if you massively drawdown a section when flux_function = 100 and cause desaturation, then perhaps relative permeability prevents water from moving.\nIf you save_in the fluxes, do you get more or less when flux_function = 100?\n\nWell, those are some thoughts - tell us if they spark some understanding of this situation.  It's always difficult to debug huge models!  Thanks for the petsc_options info.",
                  "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2354621",
                  "updatedAt": "2022-07-26T15:02:13Z",
                  "publishedAt": "2022-03-14T06:12:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Thank you for getting back to me promptly @WilkAndy\nThe reason I mention the petsc_options because, even with flux_function = 1, but different pectsc_options, i got totally different results.\nHere is an example:  (this is an un-useable result IMO)\n\nfrom\n    petsc_options_iname = '-pc_type -sub_pc_type  -pc_asm_overlap'\n    petsc_options_value = ' asm      ilu           2              '\n\nfor v = min, min is basically the characteristic length of the element near the surface, this gives a minimal change to the solution (I just want to exactly follow Abaqus BCs)\nI'm using a FullySaturated action, I also tried UnSaturated action, minimal change, also note that this is a steady-state run\nI will try to address the save_in fluxes and other points tomorrow.\nThank you,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2357072",
                          "updatedAt": "2022-07-26T15:02:17Z",
                          "publishedAt": "2022-03-14T12:01:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "This suggests to me that your model hasn't properly converged, or there are multiple solutions.  I'm struggling to see why there might be multiple solutions here, but it's quite common in nonlinear/dissipative models.  Assuming there is a unique solution, the result should not depend on choice of petsc linear solver.\nCan you do some transient steps that lead up to the steady-state, eg take timestep 1s, 10s, 1e2, 1e3, ..., 1e10 or something similar?",
                          "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2360991",
                          "updatedAt": "2022-07-26T15:02:31Z",
                          "publishedAt": "2022-03-14T22:13:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @WilkAndy,\nSure i'm following the setting from the ground water example\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  dt = 1E6\n  [TimeStepper]\n    type = FunctionDT\n    function = 'max(1E6, t)'\n  []\n  end_time = 1E12\n  nl_abs_tol = 1E-13\n[]\n\nI will get back to you very soon\nthe model is massive, will take quite a bit of time",
                          "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2361414",
                          "updatedAt": "2022-07-26T15:02:37Z",
                          "publishedAt": "2022-03-15T00:10:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @WilkAndy, so the problem was that my nl_rel_tol wasn't low enough, I set it to 1e-6 for the most cases in the past\nwhen I see the jump of R from e6 to e1 (R initial is around 5e11), I thought it wouldn't go any further\n\nbut then I let it solve further till the system breakdown, it could reach R = e-2, then changed nl_abs_tol to that, and I got the results that I want (very good match Abaqus).\n\nthe wireframe is Abaqus, the surface is moose\n\nThank you for your help!\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2376816",
                          "updatedAt": "2022-11-10T08:10:46Z",
                          "publishedAt": "2022-03-17T00:15:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Phew !    I'm always stressed that something's not working in the code, so nice to know it was just some stupid tolerances :-)",
                          "url": "https://github.com/idaholab/moose/discussions/20545#discussioncomment-2376876",
                          "updatedAt": "2022-11-10T08:10:47Z",
                          "publishedAt": "2022-03-17T00:36:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}