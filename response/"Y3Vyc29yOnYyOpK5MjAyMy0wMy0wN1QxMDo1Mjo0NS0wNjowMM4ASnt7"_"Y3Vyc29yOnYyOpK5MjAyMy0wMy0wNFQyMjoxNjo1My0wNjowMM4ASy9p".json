{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMy0wNFQyMjoxNjo1My0wNjowMM4ASy9p"
    },
    "edges": [
      {
        "node": {
          "title": "indentation test",
          "author": {
            "login": "selarem"
          },
          "bodyText": "Hi all,\nI am modelling a dynamic test where an indentor hits a multilayered sold.\nThe indenter is linear elastic and the composite is modelled with phase field fracture approach.\nI have everytime put block = indentor or composite to distinguish between them.\nI the phase field  module action; in the material; in the kernels ....\nI still have this error message when running the code.\nSurface100_QUAD4 is my indentor. As if somewhere the indentor is said to be like the composite and\nneeds all the material properties.\nsaber\nregards,\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nMaterial property 'L', requested by 'c_ACInterface' is not defined on block Surface100_QUAD4\nMaterial property 'kappa_op', requested by 'c_ACInterface' is not defined on block Surface100_QUAD4\nMaterial property 'L', requested by 'c_AllenCahn' is not defined on block Surface100_QUAD4\nMaterial property 'dF/dc', requested by 'c_AllenCahn' is not defined on block Surface100_QUAD4\nMaterial property 'd^2F/dc^2', requested by 'c_AllenCahn' is not defined on block Surface100_QUAD4",
          "url": "https://github.com/idaholab/moose/discussions/23593",
          "updatedAt": "2023-04-29T03:45:23Z",
          "publishedAt": "2023-03-03T11:27:42Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo Surface100_QUAD4 is a 2D block in a 3D domain?\nIs the whole system 2D or 3D?\nAll these material properties are missing on that block. This physics is defined on that block and needs those properties. If you don't want to extend the material properties to the block, then you ll need to block restrict the physics away from it.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5192470",
                  "updatedAt": "2023-03-03T14:35:30Z",
                  "publishedAt": "2023-03-03T14:35:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "everything is in 2D. The 2D mesh is composed of two surfaces, and I have considered two different physics and do not know why it is asking for  L, kappa_op, ... while the Surface100_QUAD4 is defined as linear elastic homogenous material.",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5193367",
                          "updatedAt": "2023-03-03T14:58:35Z",
                          "publishedAt": "2023-03-03T14:58:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The physics must not be block restricted\ncan you please share your input?",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5194077",
                          "updatedAt": "2023-03-03T15:18:55Z",
                          "publishedAt": "2023-03-03T15:18:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "[Mesh]\n  # Mesh block.  Meshes can be read in or automatically generated\n [composite]\ntype = FileMeshGenerator\nfile =TotalMesh.inp\nconstruct_side_list_from_node_list=true\n  []\n[]  \n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]  \n[Variables]\n  [./disp_x]\n  [../]\n  [./disp_y]\n  [../]\n[]\n\n\n[Modules]\n  [./PhaseField]\n    [./Nonconserved]\n      [./c]\n        free_energy = F \n        mobility = L\n        kappa = kappa_op\n        block = 'plate'\n      [../]\n    [../]\n  [../]\n[]\n\n[Contact]\n    primary = ContactImpact \n    secondary = impact\n    model = frictionless\n    formulation =mortar # penalty\n    #penalty = 1e9\n    c_normal = 1e+2\n    #normalize_penalty = true\n[]\n\n[AuxVariables]\n[./bounds_dummy]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n[./resid_x]\n  [../]\n  [./resid_y]\n  [../]\n   [./vel_x]\n  [../]\n  [./accel_x]\n  [../]\n  [./vel_y]\n  [../]\n  [./accel_y]\n   [../]\n  [./stress_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[./stress_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[./stress_xy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n [./Von_Mises_stress]\n    family = MONOMIAL\n    order = CONSTANT\n  [../]\n [./total_strain_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n\n  [./total_strain_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[./total_strain_xy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n\n\n[Kernels]\n  [./gravity]\n    type = Gravity\n    variable = disp_y\n    value = -9.81\n  [../]\n  [./DynamicTensorMechanics]\n    displacements = 'disp_x disp_y'\n    alpha = -0.330 \n    use_displaced_mesh = false #true\n    save_in = 'resid_x resid_y'\n    #zeta = 0.001\n  [../]\n  [./inertia_x]\n    type = InertialForce\n    variable = disp_x\n    velocity = vel_x\n    acceleration = accel_x\n    alpha = -0.33\n    beta =0.44 #0.3025\n    gamma = 0.83 #0.6\n    #eta=0.001\n  [../]\n   [./inertia_y]\n    type = InertialForce\n    variable = disp_y\n    velocity = vel_y\n    acceleration = accel_y\n    alpha =-0.33\n    beta = 0.44 #0.3025\n    gamma =0.83 #0.6\n    #eta=0.001\n  [../]\n  [./solid_x]\n    type = PhaseFieldFractureMechanicsOffDiag\n    variable = disp_x\n    component = 0\n    c = c\n   block = 'plate'\n  [../]\n  [./solid_y]\n    type = PhaseFieldFractureMechanicsOffDiag\n    variable = disp_y\n    component = 1\n    c = c\n    block = 'plate'\n  [../]\n[]\n[AuxKernels]\n   [./accel_x]\n    type = NewmarkAccelAux\n    variable = accel_x\n    displacement = disp_x\n    velocity = vel_x\n    beta = 0.44 #0.3025\n    execute_on = timestep_end\n  [../]\n  [./vel_x]\n    type = NewmarkVelAux\n    variable = vel_x\n    acceleration = accel_x\n    gamma =0.83 #0.6\n    execute_on = timestep_end\n  [../]\n  [./accel_y]\n    type = NewmarkAccelAux\n    variable = accel_y\n    displacement = disp_y\n    velocity = vel_y\n    beta = 0.44 #0.3025 \n    execute_on = timestep_end\n  [../]\n  [./vel_y]\n    type = NewmarkVelAux\n    variable = vel_y\n    acceleration = accel_y\n    gamma = 0.83 #0.6 \n    execute_on = timestep_end\n  [../]\n  [./stress_yy]\n    type = RankTwoAux\n    variable = stress_yy\n    rank_two_tensor = stress\n    index_j = 1\n    index_i = 1\n    execute_on = timestep_end\n  [../]\n[./stress_xx]\n    type = RankTwoAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    index_j = 0 \n    index_i = 0\n    execute_on = timestep_end\n  [../]\n[./stress_xy]\n    type = RankTwoAux\n    variable = stress_xy\n    rank_two_tensor = stress\n    index_j = 0\n    index_i = 1\n    execute_on = timestep_end\n  [../]\n [./Von_Mises_stress]\n    type = RankTwoScalarAux\n    variable = Von_Mises_stress\n    rank_two_tensor = stress\n    scalar_type = VonMisesStress\n  [../]\n [./total_strain_yy]\n    type = RankTwoAux\n    rank_two_tensor = total_strain\n    variable = total_strain_yy\n    index_i = 1\n    index_j = 1\n  [../]\n[./total_strain_xx]\n    type = RankTwoAux\n    rank_two_tensor = total_strain\n    variable = total_strain_xx\n    index_i = 0\n    index_j = 0\n  [../]\n[./total_strain_xy]\n    type = RankTwoAux\n    rank_two_tensor = total_strain\n    variable = total_strain_xy\n    index_i = 0\n    index_j = 1 \n  [../]\n[]\n[BCs]\n[xtopImpact]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'topImpact'\n    value =0.0\n   []\n\n[ImpactRightx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'rightImpact'\n    value =0.0\n   []\n[rightx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'right'\n    value =0.0\n   []\n\n [leftx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'left'\n    value =0.0\n   []\n[lefty]\n    type = DirichletBC\n    variable = disp_y\n    boundary ='left'\n    value =0.0\n   []\n[]\n\n[Materials]\n[./density]\n    type = Density\n    density = '2500.0' \n  [../]\n\n  [./pfbulkmat]\n    type = GenericConstantMaterial\n    block = 'plate'\n    prop_names = 'gc_prop l visco'\n    #prop_values = '3e-7 6.67e-5 1.0e-6'\n    #prop_values = '3e-7 0.0001 1.0e-6'\n    #prop_values = '3e-7 0.0001 3.33330e-4'\n    prop_values = '2.7e3  0.00015 1.0e-3'\n  [../]\n  [./define_mobility]\n    block = 'plate'\n    type = ParsedMaterial\n    material_property_names = 'gc_prop visco'\n    f_name = L\n    function = '1.0/(gc_prop * visco)'\n  [../]\n  [./define_kappa]\n    block = 'plate'\n    type = ParsedMaterial\n    material_property_names = 'gc_prop l'\n    f_name = kappa_op\n    function = 'gc_prop * l * 3 / 4 '\n  [../]\n[./ElasticityImpact]\n    type = ComputeIsotropicElasticityTensor\n    block = 'Surface100_QUAD4'\n    youngs_modulus = 220.0e9 \n    poissons_ratio = 0.25\n  []\n[./elasticity_tensor17]\n    type = ComputeElasticityTensorCP\n    block = 'plate'\n    C_ijkl = '11e3 12e3 13e3 22e3 23e3 33e3 44e3 55e3 66e3'\n    fill_method = symmetric9\n  [../]\n\n  [./elastic]\n    type = ComputeLinearElasticPFFractureStress\n    c = c\n    block = 'plate'\n    E_name = 'elastic_energy'\n    D_name = 'degradation'\n    F_name = 'fracture_energy'\n    barrier_energy = 'barrier'\n    decomposition_type = stress_spectral #sqrt \n    use_snes_vi_solver = true\n  [../]\n  [./degradation]\n    type = DerivativeParsedMaterial\n    block = 'plate'\n    f_name = degradation\n    args = 'c'\n    function = '(1.0-c)^2*(1.0 - eta) + eta'\n    constant_names       = 'eta'\n    constant_expressions = '1.0e-4'\n    derivative_order = 2\n  [../]\n[./fracture_energy]\n    block = 'plate'\n    type = DerivativeParsedMaterial\n    f_name = fracture_energy\n    args = 'c'\n    material_property_names = 'gc_prop l'\n    function = '3 * gc_prop / (8 * l) * c'\n    derivative_order = 2\n  [../]\n\n  [./fracture_driving_energy]\n    type = DerivativeSumMaterial\n     block = 'plate'\n    args = c\n    sum_materials = 'elastic_energy fracture_energy'\n    derivative_order = 2\n    f_name = F\n  [../]\n [./barrier_energy]\n    type = ParsedMaterial\n    block = 'plate'\n    f_name = barrier\n    material_property_names = 'gc_prop l'\n    function = '3 * gc_prop / 16 / l'\n  [../]\n\n[./strain]\n    type = ComputeSmallStrain\n    block = 'plate'\n    displacements = 'disp_x disp_y'\n  [../]\n[./strainBille]\n    type = ComputeSmallStrain\n    block = 'Surface100_QUAD4'\n    displacements = 'disp_x disp_y'\n  [../]\n[stressBille]\n    type = ComputeLinearElasticStress\n   block = 'Surface100_QUAD4'\n  []\n[]\n\n[Bounds]\n  [./c_upper_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    block = 'Surface1_QUAD4 Surface2_QUAD4 Surface3_QUAD4 Surface4_QUAD4 Surface5_QUAD4 Surface6_QUAD4 Surface7_QUAD4'\n    bounded_variable = c\n    bound_type = upper\n    bound_value = 1.0\n  [../]\n  [./c_lower_bound]\n    type = VariableOldValueBoundsAux\n    variable = bounds_dummy\n    block = 'Surface1_QUAD4 Surface2_QUAD4 Surface3_QUAD4 Surface4_QUAD4 Surface5_QUAD4 Surface6_QUAD4 Surface7_QUAD4'\n    bounded_variable = c\n    bound_type = lower\n  [../]\n[]\n\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n[Executioner]\n type = Transient\n scheme =newmark-beta# Explicit-Midpoint # crank-nicolson #bdf2 # Type of time integration (2nd order backward euler)\n solve_type = 'NEWTON'\nautomatic_scaling = true\nnl_forced_its = 2\n[./TimeStepper]\n  type = IterationAdaptiveDT\n    dt = 3.0e-9 # Initial time step.  In this simulation it changes.\n    optimal_iterations = 7\n    growth_factor = 1.05 \n    cutback_factor = 0.5\n  [../]\n petsc_options_iname = '-pc_type  -snes_type'\n  petsc_options_value = 'lu vinewtonrsls'\n  dtmin = 1.0e-12\n   dtmax=3.0e-7\n  end_time = 1.0e-4\n  l_max_its = 200\n  nl_max_its = 12 \n  nl_rel_tol = 1.0e-6\n[]\n\n[Postprocessors]\n  [./resid_x]\n    type = NodalSum\n    variable = resid_x\n    boundary = top \n  [../]\n  [./resid_y]\n    type = NodalSum\n    variable = resid_y\n    boundary = top\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n csv = true\n  interval =10 \n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5217581",
                          "updatedAt": "2023-03-06T16:11:14Z",
                          "publishedAt": "2023-03-06T15:55:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This looks right. I ll need to run this to find out what's happening.\nIf anyone can help here, otherwise there'll be a delay",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5218416",
                          "updatedAt": "2023-03-06T17:11:11Z",
                          "publishedAt": "2023-03-06T17:11:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok the Nonconserved action is not well block restricted imo\nI ll try to patch this. i ll let you know",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5222407",
                          "updatedAt": "2023-03-07T01:48:23Z",
                          "publishedAt": "2023-03-07T01:48:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I tentatively put this PR up to fix this\n#23633\nIt's still unreviewed so use at your own risk but feel free to give me feedback!",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5222936",
                          "updatedAt": "2023-03-07T03:14:12Z",
                          "publishedAt": "2023-03-07T03:14:11Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "I have considered using the three kernels  separately instead of the PhaseField Action, with this it is possible to specify the blocks.\nthanks",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5227690",
                          "updatedAt": "2023-03-07T12:36:55Z",
                          "publishedAt": "2023-03-07T12:36:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That works as well!",
                          "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5229873",
                          "updatedAt": "2023-03-07T15:08:49Z",
                          "publishedAt": "2023-03-07T15:08:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "selarem"
                  },
                  "bodyText": "for the bounds:\n[Bounds]\n  [./c_upper_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    block = 'plate'\n    bounded_variable = c\n    bound_type = upper\n    bound_value = 1.0\n  [../]\n  [./c_lower_bound]\n    type = VariableOldValueBoundsAux\n    variable = bounds_dummy\n    block = 'plate'\n    bounded_variable = c\n    bound_type = lower\n  [../]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/23593#discussioncomment-5217594",
                  "updatedAt": "2023-03-06T16:10:58Z",
                  "publishedAt": "2023-03-06T15:56:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Numerical simulations don't show anisotropic features.",
          "author": {
            "login": "Johnney12138"
          },
          "bodyText": "Hello,\nI was trying to solve a phase field problem. After running, the numerical simulations don't show anisotropic features, but the file has the block about anisotropy. I don't know if it's the reason for the parameter, or do you have any suggestions for this?\nThe complete code is attached as follows:\n\n[Mesh]\n    type = GeneratedMesh\n    dim = 2               \n    nx = 300               # Number of elements in the X direction.\n    ny = 300               # Number of elements in the Y direction.\n    xmin = 0\n    xmax = 5              # Upper X Coordinate of the generated mesh.\n    ymin = 0\n    ymax = 5\n    uniform_refine = 2\n[]\n\n[Variables]\n    [./w]       # concentration\n    [../]\n    [./phi]   # phase field\n    [../]\n    [./T]   # temperature\n    [../]\n[]\n\n[ICs]\n    [./w]\n      type = ConstantIC\n      variable = w\n      value = 0.3\n    [../]\n    [./T]\n      type = ConstantIC\n      variable = T\n      value = 2.1\n    [../]\n    [./phi]\n      type = SmoothCircleIC\n      profile = TANH\n      variable = phi\n      x1 = 2.5\n      y1 = 2.5\n      invalue = -1\n      outvalue = 1\n      radius = 1\n      int_width = 0.405578\n    [../]\n[]\n\n[Kernels]\n  # phase field\n    [./phi_dot]\n      type = SusceptibilityTimeDerivative\n      variable = phi\n      f_name = tau\n    [../]\n    [./AllenCahn]\n      type = AllenCahn\n      variable = phi\n      f_name = Fr\n    [../]  \n    [./anisoACinterface1]\n      type = ACInterfaceKobayashi1\n      variable = phi\n    [../]\n    [./anisoACinterface2]\n      type = ACInterfaceKobayashi2\n      variable = phi\n    [../]\n  # Chemical potential.\n    [./w_dot]\n      type = SusceptibilityTimeDerivative   \n      variable = w\n      f_name = chi                          # Susceptibility function F defined in a FunctionMaterial.\n      coupled_variables = 'phi'\n    [../]\n    [./Diffusion]\n      type = MatDiffusion                   # Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n      variable = w\n      diffusivity = Dchi                    # D*chi defined in [material] > [mobility]\n    [../]\n    [./coupled_etaa0dot]\n      type = CoupledSusceptibilityTimeDerivative\n      variable = w\n      v = phi\n      f_name = ft\n      coupled_variables = 'phi'\n    [../]\n    [./coupled_antitrapping]\n      type = AntitrappingCurrent\n      variable = w\n      v = phi\n      f_name = rhodiff\n    [../]\n    # temperature.\n    [./T_dot]\n      type = TimeDerivative\n      variable = T\n    [../]\n    [./coupled_CoefDiffusion]\n      type = CoefDiffusion\n      variable = T\n      coef = 1e8\n    [../]\n    [./phi_dot_T]\n      type = CoefCoupledTimeDerivative\n      variable = T\n      v = phi\n      coef = 2\n    [../]    \n[]\n  \n[Materials]\n    [./material]\n      type = InterfaceOrientationMaterial\n      op = phi\n      anisotropy_strength = 0.05\n      mode_number = 4\n      eps_bar = 0.01\n    [../]\n    [./speexpress]\n      type = ParsedMaterial           \n      coupled_variables = 'phi w T'\n      f_name = Fr\n      material_property_names = 'lambda MCi'\n      function = 'phi^3-phi+lambda*(1-phi^2)^2*(MCi*w+T)'\n    [../]\n    [./mobility]\n      type = ParsedMaterial\n      coupled_variables = 'w'  \n      f_name = tau\n      material_property_names = 'tau0 Le MCi k eps'\n      expression = 'tau0*eps^2*(1/Le+MCi*(1+(1-k)*w))' \n    [../]\n    [./chemp]\n      type = ParsedMaterial\n      coupled_variables = 'phi'\n      f_name = chi\n      material_property_names = 'k'\n      function = '1+k-(1-k)*phi' \n    [../]\n    [./matdiff]\n      type = ParsedMaterial\n      coupled_variables = 'phi'\n      f_name = Dchi\n      material_property_names = 'D'\n      function = 'D*(1-phi)' \n    [../]\n    [./antitrap]\n      type = ParsedMaterial\n      coupled_variables = 'w'\n      f_name = rhodiff\n      material_property_names = 'k wid'\n      function = 'wid/sqrt(2)*(1+(1-k)*w)' \n    [../]\n    [./int]\n      type = ParsedMaterial\n      coupled_variables = 'w'\n      f_name = ft\n      material_property_names = 'k'\n      function = '1+(1-k)*w' \n    [../]\n    [./const]\n      type = GenericConstantMaterial\n      prop_names =  'tau0   Le  MCi   k  lambda   D  wid L'\n      prop_values = '1e-5  1.0  0.15  0.15  3.1913  2.0  0.1 1'\n    [../]\n[]\n\n  \n[Preconditioning]\n    [./SMP]\n      type = SMP        \n      full = true       \n    [../]\n[]\n  \n[Executioner]\n    type = Transient\n    scheme = bdf2           # second-order backward differentiation formula\n    solve_type = PJFNK      # NEWTON JFNK PJFNK\n    petsc_options_iname = '-pc_type -pc_hypre_type -ksp_gmres_restart'\n    petsc_options_value = 'hypre    boomeramg      31'\n    l_tol = 1.0e-2          # linear tolerance\n    l_max_its = 30          # max linear iterations\n    nl_max_its = 100         # max non-linear iterations\n    nl_rel_tol = 1.0e-4     # non-linear relative tolerance\n    nl_abs_tol = 1.0e-4       # non-linear absolute tolerance\n    end_time = 0.1          # The end time of the simulation. Default:1e+30\n    line_search = none\n    [./TimeStepper]\n      type = IterationAdaptiveDT  # Adjust the timestep based on the number of iterations\n      optimal_iterations = 6\n      iteration_window = 2\n      dt = 0.0005                 # The timestep size between solves\n      cutback_factor = 0.75        # Factor to apply to timestep if difficult convergence\n      growth_factor = 1.1         # Factor to apply to timestep if easy convergence\n    [../]\n[]\n\n[Adaptivity]\n  initial_steps = 3                   # The number of adaptive steps to do based on the initial condition.\n  max_h_level = 3                     # Maximum number of times a single element can be refined. If 0 then infinite.\n[]\n  \n\n  \n[Outputs]\n    exodus = true\n    interval = 50     # only output every 10 timesteps.\n[]\n\n[Debug]\n  show_material_props = true\n  show_var_residual_norms = true\n[]\n\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/23521",
          "updatedAt": "2023-03-20T15:13:55Z",
          "publishedAt": "2023-02-23T15:26:12Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hello,\nTo help us understand what you are seeing, what is the physical system that you are trying to simulate? (i.e. pure material, alloy, isothermal or varying temperature, etc.) Are you trying to implement a model that is already published? If yes, can you tell us what paper it is based on? If no, can you write up a description of the governing equations that you are trying to implement?\nYou may already be aware of this, but there is an input file that is one of the examples in the MOOSE repository that you can look at. This is for growth of a dendritic structure that has a snowflake-like morphology. It is for solidification of a pure material. This is a useful reference for you to start from: moose/modules/phase_field/examples/anisotropic_interfaces/snow.i",
                  "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5123438",
                  "updatedAt": "2023-02-27T14:24:34Z",
                  "publishedAt": "2023-02-27T14:24:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Johnney12138"
                          },
                          "bodyText": "Hello @laagesen ,\nThank you for your reply.\nThe physical system is about alloy (link: https://journals.aps.org/pre/abstract/10.1103/PhysRevE.69.051607). In this model (eqs. 45, 46, 47), in addition to the anisotropy of the interface energy, the mobility is also anisotropic. I looked carefully at the reference (snow.i) you mentioned. I guess because I put the mobility on the left side of the equal sign, numerical simulations don't show anisotropic features. Do you have any suggestions for this?",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5124497",
                          "updatedAt": "2023-02-27T15:57:41Z",
                          "publishedAt": "2023-02-27T15:57:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "I would try to do some more basic troubleshooting of your model first before worrying about the anisotropy. If you have the sign of the mobility incorrect it will cause more problems than just not having anisotropy appear. If the mobility has the wrong sign, you may see a nucleus shrink rather than grow. I would first start with a 1D test of a supersaturated liquid with a solid region in one side of the domain, in conditions where you expect the solid to grow, in that case the size of the solid region should grow. Then do a 2D problem without anisotropy, with a circular solid seed in the center of the simulation domain. In that case you should see the circular seed grow while maintaining the circular shape, at least until it gets to be comparable in size to the simulation domain volume. Once you make sure the model is working for those simpler cases, then try turning on the anisotropy.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5126271",
                          "updatedAt": "2023-02-27T17:54:13Z",
                          "publishedAt": "2023-02-27T17:54:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Johnney12138"
                          },
                          "bodyText": "Thank you very much.\nI will refer to your valuable suggestions. I would like to ask you one more question, how to choose the value of the radius in the initial condition (SmoothCircleIC)?",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5149497",
                          "updatedAt": "2023-02-28T14:23:35Z",
                          "publishedAt": "2023-02-28T14:23:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "The value is not critical, I would just make sure to use something significantly larger than your interface width but significantly smaller than your simulation domain.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5149533",
                          "updatedAt": "2023-02-28T14:25:41Z",
                          "publishedAt": "2023-02-28T14:25:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Johnney12138"
                          },
                          "bodyText": "Thank you very much for your response, which has been very helpful to me. I also appreciate @GiudGiud for organizing the code. Thank you both for your assistance.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5149707",
                          "updatedAt": "2023-02-28T14:38:58Z",
                          "publishedAt": "2023-02-28T14:38:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Johnney12138"
                          },
                          "bodyText": "Hello @laagesen ,\nI'm sorry to bother you again.\nHow should we determine the value of the free energy barrier height?\nThank you very much.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5201751",
                          "updatedAt": "2023-03-04T12:51:01Z",
                          "publishedAt": "2023-03-04T12:51:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "From Eq. (49) in the Phys Rev E paper, you should use the interfacial energy gamma for the physical system you are working with, then for your chosen interfacial width W, you can solve for the free energy barrier height H.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5216062",
                          "updatedAt": "2023-03-06T13:44:06Z",
                          "publishedAt": "2023-03-06T13:44:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Johnney12138"
                          },
                          "bodyText": "Thank you very much for your reply.",
                          "url": "https://github.com/idaholab/moose/discussions/23521#discussioncomment-5227306",
                          "updatedAt": "2023-03-07T12:10:38Z",
                          "publishedAt": "2023-03-07T12:10:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Vectorial material property from input",
          "author": {
            "login": "gabburgio"
          },
          "bodyText": "Hello everybody\nI am trying to define a material that provides as a property a vector of diffusivity values for a set of n coupled reaction-diffusion equation, n determined by the input file.\nThese values should be inserted as a parameter in the material declaration.\nThe way I have been trying to implement this is:\n\n#pragma once\n\n#include \"ADMaterial.h\"\n\n\nclass othermaterial : public ADMaterial\n{\npublic:\n  static InputParameters validParams();\n\n  othermaterial(const InputParameters & parameters);\n\nprotected:\n  virtual void computeQpProperties() override;\n\n  const std::vector<Real> & _vettore;\n\n  ADMaterialProperty<std::vector<Real>> & _diff_vector;\n\n};\n\nfor the header file and:\n\n#include \"othermaterial.h\"\n\nregisterMooseObject(\"pertyApp\", othermaterial);\n\nInputParameters\nothermaterial::validParams()\n{\n  InputParameters params = ADMaterial::validParams();\n  params.addRequiredParam<std::vector<Real>>(\n      \"vettore\", \"The vector of diffusivity values\");\n  return params;\n}\n\nothermaterial::othermaterial(const InputParameters & parameters)\n  : ADMaterial(parameters),\n    _diff_vector(declareADProperty<std::vector<Real>>(\"diff_vector\")),\n    _vettore(getParam<std::vector<Real>>(\"vettore\"))\n\n{\n}\n\nvoid\nothermaterial::computeQpProperties()\n{\n\n  for (int i = 0; i < _vettore.size(); ++i) {\n    _diff_vector[_qp][i] = _vettore[i];\n  }\n}\n\nFor the source file. However by declaring for example:\n  [Materials]\n    [./example]\n      type = othermaterial\n      vettore = '1 100'\n      block = 'domain'\n    [../]\n  []  [Materials]\n    [./example]\n      type = othermaterial\n      vettore = '1 100'\n      block = 'domain'\n    [../]\n  []\n\nin my input file I get a segfault with the following backtrace:\nThread 1 \"perty-dbg\" received signal SIGSEGV, Segmentation fault. 0x00007ffff7f3e1cf in MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, unsigned long, MetaPhysicL::NWrapper<53ul> >, true>::operator=<double> (this=0x0, scalar=@0x5555559bf050: 1) at /home/gburgio/mambaforge3/envs/moose/libmesh/include/metaphysicl/dualnumber.h:195 195\t  _val = scalar; (gdb) bt #0  0x00007ffff7f3e1cf in MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, unsigned long, MetaPhysicL::NWrapper<53ul> >, true>::operator=<double> (this=0x0, scalar=@0x5555559bf050: 1) at /home/gburgio/mambaforge3/envs/moose/libmesh/include/metaphysicl/dualnumber.h:195 #1  0x00007ffff7f4fb65 in othermaterial::computeQpProperties (this=0x5555559dac80) at /home/gburgio/projects/perty/src/materials/othermaterial.C:27 #2  0x00007ffff64f4034 in Material::computeProperties (this=0x5555559dac80) at /home/gburgio/projects/moose/framework/src/materials/Material.C:132 #3  0x00007ffff52c6d9f in MaterialData::reinit<std::vector<std::shared_ptr<MaterialBase>, std::allocator<std::shared_ptr<MaterialBase> > > > (this=0x5555559353d0, mats=...) at /home/gburgio/projects/moose/framework/build/header_symlinks/MaterialData.h:454 #4  0x00007ffff526b677 in FEProblemBase::reinitMaterials (this=0x555555949050, blk_id=2, tid=0, swap_stateful=true) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:3430 #5  0x00007ffff5df8df9 in NonlinearThread::onElement (this=0x7fffffffa5a0, elem=0x555555888ed0) at /home/gburgio/projects/moose/framework/src/loops/NonlinearThread.C:107 #6  0x00007ffff52d70f5 in ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator() (this=0x7fffffffa5a0,  range=..., bypass_threading=false) at /home/gburgio/projects/moose/framework/build/header_symlinks/ThreadedElementLoopBase.h:226 #7  0x00007ffff63cd30b in libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeResidualThread> ( range=..., body=...) at /home/gburgio/mambaforge3/envs/moose/libmesh/include/libmesh/threads_pthread.h:380 #8  0x00007ffff63a0592 in NonlinearSystemBase::computeResidualInternal (this=0x555555969e10, tags=...) at /home/gburgio/projects/moose/framework/src/systems/NonlinearSystemBase.C:1567 #9  0x00007ffff639a78f in NonlinearSystemBase::computeResidualTags (this=0x555555969e10, tags=...) at /home/gburgio/projects/moose/framework/src/systems/NonlinearSystemBase.C:789 #10 0x00007ffff5286ac6 in FEProblemBase::computeResidualTags (this=0x555555949050, tags=...) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:6174 #11 0x00007ffff5285966 in FEProblemBase::computeResidualInternal (this=0x555555949050, soln=..., residual=..., tags=...) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:6030 #12 0x00007ffff52842fc in FEProblemBase::computeResidual (this=0x555555949050, soln=..., residual=..., nl_sys_num=0) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:5806 #13 0x00007ffff5284001 in FEProblemBase::computeResidualSys (this=0x555555949050, sys=..., soln=..., residual=...) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:5771 #14 0x00007ffff6393431 in NonlinearSystem::solve (this=0x555555969e10) at /home/gburgio/projects/moose/framework/src/systems/NonlinearSystem.C:145 #15 0x00007ffff527fce6 in FEProblemBase::solve (this=0x555555949050, nl_sys_num=0) at /home/gburgio/projects/moose/framework/src/problems/FEProblemBase.C:5489 #16 0x00007ffff5db5f68 in FEProblemSolve::solve (this=0x5555559abbe8) at /home/gburgio/projects/moose/framework/src/executioners/FEProblemSolve.C:281 #17 0x00007ffff5dba910 in FixedPointSolve::solveStep (this=0x5555555f86b0, begin_norm=@0x555555abf5b0: 0, end_norm=@0x555555ab8740: 0, transformed_dofs=...) at /home/gburgio/projects/moose/framework/src/executioners/FixedPointSolve.C:426 #18 0x00007ffff5db98fa in FixedPointSolve::solve (this=0x5555555f86b0) at /home/gburgio/projects/moose/framework/src/executioners/FixedPointSolve.C:278 #19 0x00007ffff5dc1d0b in Steady::execute (this=0x5555559ab8c0) at /home/gburgio/projects/moose/framework/src/executioners/Steady.C:82 #20 0x00007ffff692f7e8 in MooseApp::executeExecutioner (this=0x5555556e3700) at /home/gburgio/projects/moose/framework/src/base/MooseApp.C:1113 #21 0x00007ffff693283e in MooseApp::run (this=0x5555556e3700) at /home/gburgio/projects/moose/framework/src/base/MooseApp.C:1418 #22 0x00005555555576a9 in main (argc=3, argv=0x7fffffffc288) at /home/gburgio/projects/perty/src/main.C:33 \nWhat is the cause of this? Do I need to somehow declare the number of equations as a global parameter in the input file to then initialize the vector parameter?",
          "url": "https://github.com/idaholab/moose/discussions/23612",
          "updatedAt": "2023-03-07T11:25:51Z",
          "publishedAt": "2023-03-06T13:56:00Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "gabburgio"
                  },
                  "bodyText": "(I have also tried with\n std::vector<Real> _vettore;\nin the header instead of\nconst std::vector<Real> & _vettore;\nto no avail)",
                  "url": "https://github.com/idaholab/moose/discussions/23612#discussioncomment-5216658",
                  "updatedAt": "2023-03-06T14:39:07Z",
                  "publishedAt": "2023-03-06T14:39:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is fine:\nconst std::vector<Real> & _vettore;\n\nWhat's erroring is this\n    _diff_vector[_qp][i] = _vettore[i];\n\nbecause there's nowhere in the code where you resize this vector so that you can insert at this position.\nYou should add something like:\n_diff_vector[_qp].resize(_vettore.size());\n\nbefore the for loop.\nOne note:\nA \"vector\" in MOOSE, such as a vector material or a vector variable, is a LIBMESH_DIM (usually 3) sized vector.\nA general sized vector is called an array instead. So you should look at array materials for example.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23612#discussioncomment-5223002",
                  "updatedAt": "2023-03-07T03:26:26Z",
                  "publishedAt": "2023-03-07T03:24:45Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "gabburgio"
                          },
                          "bodyText": "Perfect, thanks for the answer and the pointers",
                          "url": "https://github.com/idaholab/moose/discussions/23612#discussioncomment-5226929",
                          "updatedAt": "2023-03-07T11:25:51Z",
                          "publishedAt": "2023-03-07T11:25:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow: EOS for water, air, with vapor pressure lowering capability",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nI\u2019m looking to simulate a multiphase (liquid and gas) and multicomponent flow with water and air as the components. I\u2019d like to know which fluid EOS in PorousFlow is appropriate for this simulation. My search results reveal several fluid EOS, including that of water, but I don\u2019t see any EOS relating to the fluid properties of air. This simulation is, however, possible using the EOS4 module of TOUGH2. Is there an alternative for the TOUGH2 EOS4 module in PorousFlow? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/23280",
          "updatedAt": "2023-04-29T03:45:45Z",
          "publishedAt": "2023-01-30T20:18:44Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I don't believe that there is an air EOS yet, and I don't think that we have vapor pressure lowering like in TOUGH2's EOS4. I think from memory that EOS4 just uses an ideal gas for air.",
                  "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4823920",
                  "updatedAt": "2023-01-30T22:43:23Z",
                  "publishedAt": "2023-01-30T22:43:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks a lot, @cpgr. It\u2019s been a minute. Very refreshing to get feedback from you again! In my intended simulation, the liquid phase contains water and dissolved air as components, while the gaseous phase comprises air and water vapor as components. Please:\n\nDo you believe I can achieve this simulation in PorousFlow using the fluid properties of water and ideal gas?\nWill you advise that I implement/add the TOUGH2 EOS4 Module in PorousFlow? Or will this implementation take a while?\n\nThanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4824121",
                          "updatedAt": "2023-01-30T23:20:32Z",
                          "publishedAt": "2023-01-30T23:19:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I think that you could do 1 with only a very small amount of coding (basically making an AirFluidProperties that is an ideal gas but with Henry's law coefficients supplied, which IdealGasFluidProperties doesn't have) if an ideal gas representation is ok for your conditions. If not, it would be a bit more effort to implement an air EOS - not difficult, but tedious.\nTo add vapour pressure lowering will require another bit of code, but it probably wouldn't take too much effort either.\nBoth would be useful additions to MOOSE. If you are happy to have a go at this I'm happy to help.",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4825217",
                          "updatedAt": "2023-01-31T02:24:24Z",
                          "publishedAt": "2023-01-31T02:24:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks, @cpgr.\nI\u2019ll go with option 1. I\u2019m keeping this ticket open while I work on it. I\u2019ll get back to you shortly.",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4825576",
                          "updatedAt": "2023-01-31T03:31:54Z",
                          "publishedAt": "2023-01-31T03:31:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @cpgr,\nI supplied the Henry coefficient to the Ideal gas fluid property (I call this new fluid property the IdealgasHenry). I also created a PorousflowWaterAir fluid-state object based on the PorousflowWaterNCG object using this fluid property. The model ran well after I tested it on the waterncg.i. I\u2019m, however, not entirely convinced about my implementation. Could you please offer a second pair of eyes on it for me? The code is here:\nhttps://github.com/iyevugah/ERGS/tree/main/src/userobjects\nThe only minor addition to the PorousflowWaterAir is from lines 130 to 136, where I included the vapour pressure-lowering capability as follows (not sure if it is entirely correct):\n// Vapor pressure (with lowering capability)\n DualReal numer = _Mh2o *_pc.capillaryPressure(liquid.saturation, qp) * liquid.saturation;\n DualReal deno  = liquid.density * _R * (T + 273.15);\n DualReal f_vpl = std::exp(numer/deno);\n DualReal pv = f_vpl * psat;\n\n // Save pressures to FluidStateProperties object\n gas.pressure = p + pv;\n\n\nPlease, see the problem folder for the input file. Also, the formula for the vapour pressure lowering effect is available on page 145 in the TOUGH2 Manual as equation A.7. You can get it from the link below:\nhttps://drive.google.com/file/d/1nFowvaOJTImLmsScGu3mB5p-6khVexsn/view?usp=share_link\nThanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4843712",
                          "updatedAt": "2023-02-01T18:26:42Z",
                          "publishedAt": "2023-02-01T18:23:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "It looks ok at first glance. One thing to check is that I think T is in Kelvin once it gets to PorousflowWaterAir, so you probably don't want to add 273.15 to it.\nYou could also dramatically reduce the amount of code by inheriting from IdealGasFluidProperties and PorousFlowWaterNCG and only overriding the bits you added. For example, IdealGasHenryFluidProperties.h could be something like\n#pragma once\n\n#include \"IdealGasFluidProperties.h\"\n\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Woverloaded-virtual\"\n\n/**\n * Ideal gas fluid properties\n * Default parameters are for air at atmospheric pressure and temperature\n */\nclass IdealGasHenryFluidProperties : public IdealGasFluidProperties, public NaNInterface\n{\npublic:\n  static InputParameters validParams();\n\n  IdealGasHenryFluidProperties(const InputParameters & parameters);\n\n  virtual std::vector<Real> henryCoefficients() const override;\n};\n\n#pragma GCC diagnostic pop\n\nand similarly IdealGasHenryFluidProperties.C\n#include \"IdealGasHenryFluidProperties.h\"\n\nregisterMooseObject(\"FluidPropertiesApp\", IdealGasHenryFluidProperties);\n\nInputParameters\nIdealGasHenryFluidProperties::validParams()\n{\n  InputParameters params = IdealGasFluidProperties::validParams();\n\n  return params;\n}\n\nIdealGasHenryFluidProperties::IdealGasHenryFluidProperties(const InputParameters & parameters)\n  : IdealGasFluidProperties(parameters),\n    NaNInterface(this) {}\n\nstd::vector<Real>\nIdealGasHenryFluidProperties::henryCoefficients() const\n{\n  return {-8.55445, 4.01195, 9.52345};\n}\n\n(note: I actually haven't tried to compile this but it should be similar).",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4845937",
                          "updatedAt": "2023-02-01T23:33:26Z",
                          "publishedAt": "2023-02-01T23:33:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Great! Thanks a million, @cpgr!  I\u2019ll make the code more succinct! \ud83d\udc4d",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4846100",
                          "updatedAt": "2023-02-02T00:01:18Z",
                          "publishedAt": "2023-02-02T00:01:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Let me know if you run into any issues but it shouldn't be too hard. The TOUGH2 manual shows some results using EOS3/EOS4 for one of the sample problems. It would be good to see if you could reproduce that at all.",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4846574",
                          "updatedAt": "2023-02-02T01:38:14Z",
                          "publishedAt": "2023-02-02T01:38:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @cpgr, I have only one hurdle. I keep getting the following error which I\u2019m trying to fix:\nwarning: direct base 'NaNInterface' inaccessible in ' IdealGasHenryFluidProperties\n' due to ambiguity [-Winaccessible-base]\n   12 | class IdealGasHenryFluidProperties : public IdealGasFluidProperties, public NaNInterface \n\nIt seems I have a duplicate of NaNInterface, but when I removed it, I still got an error. Could you please help with this error?\nIt will be great to validate the code with those tests. I\u2019ll do that once I fix this error. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4847009",
                          "updatedAt": "2023-02-02T02:59:59Z",
                          "publishedAt": "2023-02-02T02:59:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Oops, I was copying and pasting and should have deleted the NanInterface things I think. How about\n#pragma once\n\n#include \"IdealGasFluidProperties.h\"\n\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Woverloaded-virtual\"\n\n/**\n * Ideal gas fluid properties\n * Default parameters are for air at atmospheric pressure and temperature\n */\nclass IdealGasHenryFluidProperties : public IdealGasFluidProperties\n{\npublic:\n  static InputParameters validParams();\n\n  IdealGasHenryFluidProperties(const InputParameters & parameters);\n\n  virtual std::vector<Real> henryCoefficients() const override;\n};\n\n#pragma GCC diagnostic pop\n\nand\n#include \"IdealGasHenryFluidProperties.h\"\n\nregisterMooseObject(\"FluidPropertiesApp\", IdealGasHenryFluidProperties);\n\nInputParameters\nIdealGasHenryFluidProperties::validParams()\n{\n  InputParameters params = IdealGasFluidProperties::validParams();\n\n  return params;\n}\n\nIdealGasHenryFluidProperties::IdealGasHenryFluidProperties(const InputParameters & parameters)\n  : IdealGasFluidProperties(parameters)\n{\n}\n\nstd::vector<Real>\nIdealGasHenryFluidProperties::henryCoefficients() const\n{\n  return {-8.55445, 4.01195, 9.52345};\n}",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4847058",
                          "updatedAt": "2023-02-02T03:10:54Z",
                          "publishedAt": "2023-02-02T03:10:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Also, maybe IdealGasAirFluidProperties would be a better name?",
                          "url": "https://github.com/idaholab/moose/discussions/23280#discussioncomment-4847111",
                          "updatedAt": "2023-02-02T03:22:16Z",
                          "publishedAt": "2023-02-02T03:22:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "auxiliary variable",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello everyone,\nI am trying to define a new auxiliary variable which is w*grad(c). w an c are both primary variables.\nI defined grad(c) components by VariableGradientComponent. My question is that what type of function I need to use in order to get a variable which is multiplication of grad(c) and w (w*grad(c)). I already tried ParsedFunction and failed.\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/23410",
          "updatedAt": "2023-04-29T03:45:48Z",
          "publishedAt": "2023-02-14T01:16:17Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Minjiang-Zhu"
                  },
                  "bodyText": "Try it in auxkernels.",
                  "url": "https://github.com/idaholab/moose/discussions/23410#discussioncomment-5211563",
                  "updatedAt": "2023-03-06T04:31:58Z",
                  "publishedAt": "2023-03-06T04:31:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Fatal error in internal_Init_thread: Other MPI error, error stack:",
          "author": {
            "login": "js-jixu"
          },
          "bodyText": "Hi, developers.\nI installed moose on a cloud host. But moose can't run in parallel:\nFatal error in internal_Init_thread: Other MPI error, error stack:\ninternal_Init_thread(60)...........: MPI_Init_thread(argc=0x7fff718e6c6c, argv=0x7fff718e6c60, required=0, provided=0x7fff718e6c7c) failed\nMPII_Init_thread(209)..............: \nMPID_Init(75)......................: \ninit_world(190)....................: channel initialization failed\nMPIDI_CH3_Init(84).................: \nMPID_nem_init(313).................: \nMPID_nem_tcp_init(175).............: \nMPID_nem_tcp_get_business_card(397): \nGetSockInterfaceAddr(369)..........: gethostbyname failed, simple (errno 1)\n\nThe installation process looks very smooth, and there are no errors. What is the reason?",
          "url": "https://github.com/idaholab/moose/discussions/23610",
          "updatedAt": "2023-03-06T02:06:59Z",
          "publishedAt": "2023-03-05T14:34:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease see this troubleshooting page for this particular error message\nhttps://mooseframework.inl.gov/help/troubleshooting.html#6790d8ab-b8fe-4f9d-bc56-04386260d3b1\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23610#discussioncomment-5207396",
                  "updatedAt": "2023-03-05T14:35:51Z",
                  "publishedAt": "2023-03-05T14:35:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "Hi, Guillaume.\nI've read the troubleshooting page but failed to find related information about my problem. I can activate moose and run the input file in serial. But when I use mpiexec -n 2 ~/projects/.../opt -i , it encounters an error.\nThis virtual machine has previously installed openmc. When I use conda info -- envs to check the environment, it shows this:\n\nAnd I've found that there is nothing in /root/mambaforge3/envs, while there is a moose folder in /root/mambaforge3/envs on my own PC's moose. Is it because I didn't install moose in the anaconda3 environment\uff1f",
                          "url": "https://github.com/idaholab/moose/discussions/23610#discussioncomment-5207496",
                          "updatedAt": "2023-03-05T15:01:36Z",
                          "publishedAt": "2023-03-05T15:01:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Did you search for gethostbyname on that page?\nIt s about modifying the hosts file",
                          "url": "https://github.com/idaholab/moose/discussions/23610#discussioncomment-5208007",
                          "updatedAt": "2023-03-05T16:34:49Z",
                          "publishedAt": "2023-03-05T16:34:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "Your suggestion is very helpful and I can run it in parallel!",
                          "url": "https://github.com/idaholab/moose/discussions/23610#discussioncomment-5210967",
                          "updatedAt": "2023-03-06T02:06:56Z",
                          "publishedAt": "2023-03-06T02:06:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Extract Derivatives from ADReal",
          "author": {
            "login": "joe61vette"
          },
          "bodyText": "Hello:\nI would like to get the pressure and temperature derivatives from the ADReal variable for density.  For example:\nReal drho_dT = _rho[_qp].derivatives()[1];\nThis does give me the temperature derivative but only for the 1st quadrature point. So, the \"1\" appears to correspond to the index of the non-linear variable.  How can I get the indices of _T[_qp] and _p[_qp]?\nThanks,\nJoe Kelly",
          "url": "https://github.com/idaholab/moose/discussions/23606",
          "updatedAt": "2023-03-05T14:31:37Z",
          "publishedAt": "2023-03-04T18:27:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is an example in the INSFVMomentumAdvection fvkernel. First we get the dof number (here from the element argument)\nconst auto dof_number = sided_elem->dof_number(_sys.number(), _var.number(), 0);\nthen access the derivatives at that index\nconst Real d_u_face_d_dof = u_face.derivatives()[dof_number];\nWhat kind of kernel or object are you using?\nAre _T and _p both nonlinear variables?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23606#discussioncomment-5205193",
                  "updatedAt": "2023-03-05T04:26:11Z",
                  "publishedAt": "2023-03-05T04:26:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Thanks Guillaume.  I knew there was some way to get the dof number but sometimes it is just hard to find.  Given that I would need to link to the variable number and then get the dof number, it is easier for me to just go ahead and add the eos functions that return the derivatives.  For example:\nrho_from_p_T(Real p, Real T, Real & rho, Real & drho_dp, Real & drho_dT)\nThanks again,\nJoe",
                          "url": "https://github.com/idaholab/moose/discussions/23606#discussioncomment-5207240",
                          "updatedAt": "2023-03-05T13:59:32Z",
                          "publishedAt": "2023-03-05T13:59:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This works.\nIn the context of fluid properties there's a few examples where the AD routine is used then the derivatives retrieved from that AD call manually. This is still not quite what you want but it could be a way to do rho_from_p_T(Real p, Real T, Real & rho, Real & drho_dp, Real & drho_dT) easily\nFor example:\nvoid\nWater97FluidProperties::T_from_p_h(\n    Real pressure, Real enthalpy, Real & temperature, Real & dT_dp, Real & dT_dh) const\n{\n// this creates simple AD numbers with a 1 at a known index into the derivative array, for the dp_dp=1 here\n  FPDualReal p = pressure;\n  Moose::derivInsert(p.derivatives(), 0, 1.0);\n  FPDualReal h = enthalpy;\n  Moose::derivInsert(h.derivatives(), 1, 1.0);\n\n// this is the AD routine. AD suffix is not needed if you implement an AD version of the routine manually\n  const FPDualReal T = T_from_p_h_ad(p, h);\n\n  temperature = T.value();\n// we know the derivative indexing because we just set it above\n  dT_dp = T.derivatives()[0];\n  dT_dh = T.derivatives()[1];\n}",
                          "url": "https://github.com/idaholab/moose/discussions/23606#discussioncomment-5207369",
                          "updatedAt": "2023-03-05T14:34:15Z",
                          "publishedAt": "2023-03-05T14:31:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A question about the RankFourTensor object initialization",
          "author": {
            "login": "TJT-post95"
          },
          "bodyText": "Hello\nIn my own app\u2019s header file, if I take the constructor with parameter to initiate the RankFourTensor object, like RankFourTensor C(RankFourTensorTempl<Real>::initIdentitySymmetricFour);, the compiling will not pass. But under the moose\u2019s header file, this declaration compiling could pass. So, is this a problem with C++ include headers?\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/23583",
          "updatedAt": "2023-04-29T03:46:02Z",
          "publishedAt": "2023-03-02T16:54:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease try this\nRankFourTensor C(RankFourTensor::initIdentitySymmetricFour)\nI think this is an issue with which header to include\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5181208",
                  "updatedAt": "2023-03-02T16:58:17Z",
                  "publishedAt": "2023-03-02T16:58:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Please post the corresponding error message.",
                  "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5201356",
                  "updatedAt": "2023-03-04T11:23:35Z",
                  "publishedAt": "2023-03-04T11:23:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TJT-post95"
                          },
                          "bodyText": "I tried RankFourTensor _test(RankFourTensorTempl<Real>::initIdentityDeviatoric) and RankFourTensor _test(RankFourTensor::initIdentityDeviatoric), and they both could not work in my own app: error: RankFourTensorTempl<double>::initIdentityDeviatoric is not a type and error: RankFourTensor::initIdentityDeviatoric is not a type. I include the header file #include \"ComputeElasticityTensorBase.h\" to build a new child class about the elastic tensor.",
                          "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5201509",
                          "updatedAt": "2023-03-04T11:59:41Z",
                          "publishedAt": "2023-03-04T11:59:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "#include \"RankFourTensor.h\"",
                          "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5202253",
                          "updatedAt": "2023-03-04T14:34:18Z",
                          "publishedAt": "2023-03-04T14:34:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TJT-post95"
                          },
                          "bodyText": "I give it a try, but still don\u2019t work with the same error.\ud83d\ude02",
                          "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5202361",
                          "updatedAt": "2023-03-04T14:52:40Z",
                          "publishedAt": "2023-03-04T14:52:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "I think its supposed to be RankFourTensor::IdentityDeviatoric()",
                          "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5202838",
                          "updatedAt": "2023-03-04T16:15:11Z",
                          "publishedAt": "2023-03-04T16:15:10Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TJT-post95"
                          },
                          "bodyText": "Yep, static member function could be an alternative!",
                          "url": "https://github.com/idaholab/moose/discussions/23583#discussioncomment-5205707",
                          "updatedAt": "2023-03-05T07:32:20Z",
                          "publishedAt": "2023-03-05T07:32:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Contact Modeling of Radom Particle Interactions",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "Are there any example problems of modeling random contact between multiple volumes in MOOSE?",
          "url": "https://github.com/idaholab/moose/discussions/23605",
          "updatedAt": "2023-04-29T03:46:05Z",
          "publishedAt": "2023-03-04T16:46:58Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat do you mean by random contact?\nLike contact between surfaces that you dont predetermine to be in contact?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23605#discussioncomment-5205172",
                  "updatedAt": "2023-03-05T04:18:21Z",
                  "publishedAt": "2023-03-05T04:18:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use GPU in moose",
          "author": {
            "login": "wangzhaohao"
          },
          "bodyText": "if i install moose with conda. how did i use GPU command\uff1f",
          "url": "https://github.com/idaholab/moose/discussions/23608",
          "updatedAt": "2023-04-29T03:39:19Z",
          "publishedAt": "2023-03-05T03:26:21Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSee this thread\n#21152\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23608#discussioncomment-5205164",
                  "updatedAt": "2023-03-05T04:16:53Z",
                  "publishedAt": "2023-03-05T04:16:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}