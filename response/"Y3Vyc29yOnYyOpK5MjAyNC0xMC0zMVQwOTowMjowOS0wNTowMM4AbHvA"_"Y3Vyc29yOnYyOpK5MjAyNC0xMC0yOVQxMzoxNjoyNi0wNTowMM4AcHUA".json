{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0xMC0yOVQxMzoxNjoyNi0wNTowMM4AcHUA"
    },
    "edges": [
      {
        "node": {
          "title": "Studying the Function of the SideDiffusiveFluxIntegral PostProcessor",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "For the SideDiffusiveFluxIntegral postprocessor a variable like vel_x is required. I have looked at the various associated .h and .C files and I do not see where the input for the variable is declared and applied. Which code file is the input and processor for the variable?",
          "url": "https://github.com/idaholab/moose/discussions/28968",
          "updatedAt": "2024-10-31T02:54:56Z",
          "publishedAt": "2024-10-30T05:49:21Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe  SideIntegralVariablePostprocessor is the base class of SideDiffusiveFluxIntegral  that actually adds the variable parameter and processes it. It can then be used as an attribute in SideDiffusiveFluxIntegral.\nThe variable probably wont be 'vel_x' though, velocities are generally not \"diffused\"",
                  "url": "https://github.com/idaholab/moose/discussions/28968#discussioncomment-11106760",
                  "updatedAt": "2024-10-31T02:20:26Z",
                  "publishedAt": "2024-10-31T02:20:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ElementPropertyReadFile is buggy",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "Now I am trying to perform crystal plasticity simulations using polycrystals. But I always get a weird error, as shown in the figure, there are exactly 271 grains(I check this in peacock, there are indeed 271 blocks named as grain-i, i is from 1 to 271). However, it always reports this error:\nElement block id 271 greater than than total number of blocks in mesh: 271. Blocks should be numbered consecutively. ![Screenshot from 2024-10-31 02-09-34](https://github.com/user-attachments/assets/ce513ee6-cce7-4b6d-97fc-f9e5c6d7576d) \nAnd there are indeed 271 lines in EulerAngles.txt:\n[UserObjects]\n[./prop_read]\ntype = ElementPropertyReadFile\nprop_file_name = 'EulerAngles.txt'\n# Enter file data as prop#1, prop#2, .., prop#nprop\nnprop = 3\nread_type = block\nnblock= 271\n[../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28974",
          "updatedAt": "2024-10-31T02:16:04Z",
          "publishedAt": "2024-10-31T01:23:34Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "RWTHLHK"
                  },
                  "bodyText": "Sry I didnt upload the figure successfully. This is the polycrystal I used. The maximum block id is grain-271.",
                  "url": "https://github.com/idaholab/moose/discussions/28974#discussioncomment-11106501",
                  "updatedAt": "2024-10-31T01:26:35Z",
                  "publishedAt": "2024-10-31T01:26:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "add a dummy line at the beginning of the prop_file_names file (EulerAngle.txt)",
                          "url": "https://github.com/idaholab/moose/discussions/28974#discussioncomment-11106667",
                          "updatedAt": "2024-10-31T01:59:47Z",
                          "publishedAt": "2024-10-31T01:59:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "Thanks for reply! I found the reason is in my .e mesh file, block id counts from 1, but in moose it should count from 0. I just fixed it.",
                          "url": "https://github.com/idaholab/moose/discussions/28974#discussioncomment-11106708",
                          "updatedAt": "2024-10-31T02:11:07Z",
                          "publishedAt": "2024-10-31T02:11:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I ll add a note in the error message. Thanks for letting us know",
                          "url": "https://github.com/idaholab/moose/discussions/28974#discussioncomment-11106735",
                          "updatedAt": "2024-10-31T02:16:04Z",
                          "publishedAt": "2024-10-31T02:16:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to export the thermal conductivity to AuxVariables calculated by PorousFlowThermalConductivityIdeal object?",
          "author": {
            "login": "lipxisi"
          },
          "bodyText": "Holle\nIn PorousFlow module, I use PorousFlowThermalConductivityIdeal object to calculate the thermal conductivity  of the liquid - porous media system. I want to visualize the change in thermal conductivity, how do I do that?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/28811",
          "updatedAt": "2024-10-31T02:34:08Z",
          "publishedAt": "2024-10-09T02:25:59Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSince this is a material, there are parameters on the material object to output the properties.\nSet \"outputs = <name of the exodus output (called exodus by default iirc)>\"\nand you can also set the name of the properties to output\nThese will output the properties as auxiliary variables to Exodus",
                  "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-10887093",
                  "updatedAt": "2024-10-09T03:19:57Z",
                  "publishedAt": "2024-10-09T03:19:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lipxisi"
                          },
                          "bodyText": "Hello\nTo calculate heat flux in my heat transfer calculations, I used the DiffusionFluxAux class in [AuxKernels]. But the 'diffusivity' of this class option cannot identify thermal conductivity 'PorousFlow_thermal_conductivity_ ' which is exported from PorousFlowThermalConductivityIdeal materials object using outputs = exodus. What should I do?\nThe following error occurs\n''The following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\nMaterial property 'PorousFlow_thermal_conductivity_', requested by 'flux' is not defined on boundary fluid_solid_interface''\nThanks very much",
                          "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-11094422",
                          "updatedAt": "2024-10-30T02:16:54Z",
                          "publishedAt": "2024-10-30T02:16:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The output to exodus are auxiliary variables. DiffusionFluxAux expects the conductivity as a material property. You can use Debug/show_material_props to find the name of the mateiral property before its output to an auxvariable",
                          "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-11094692",
                          "updatedAt": "2024-10-30T03:07:42Z",
                          "publishedAt": "2024-10-30T03:07:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lipxisi"
                          },
                          "bodyText": "Hello\nWhen I use Debug/show_material_props, the following information about flux and thermal conductivity is printed in the terminal:\n`Consumed Material Properties:\nObject: Kernel::flux1\nProperties: PorousFlow_fluid_phase_density_nodal, PorousFlow_fluid_phase_density_qp, PorousFlow_grad_porepressure_qp, PorousFlow_mass_frac_nodal, PorousFlow_permeability_qp, PorousFlow_porepressure_nodal, PorousFlow_relative_permeability_nodal, PorousFlow_viscosity_nodal, dPorousFlow_fluid_phase_density_nodal_dvar, dPorousFlow_fluid_phase_density_qp_dvar, dPorousFlow_grad_porepressure_qp_dgradvar, dPorousFlow_grad_porepressure_qp_dvar, dPorousFlow_mass_frac_nodal_dvar, dPorousFlow_permeability_qp_dgradvar, dPorousFlow_permeability_qp_dvar, dPorousFlow_relative_permeability_nodal_dvar, dPorousFlow_viscosity_nodal_dvar\n  Object: Kernel::heatconduct\n\nProperties: PorousFlow_grad_temperature_qp,  PorousFlow_thermal_conductivity_qp, dPorousFlow_grad_temperature_qp_dgradvar, dPorousFlow_grad_temperature_qp_dvar, dPorousFlow_thermal_conductivity_qp_dvar\n  Object: Kernel::heatflux\n\nProperties: PorousFlow_fluid_phase_density_nodal, PorousFlow_fluid_phase_density_qp, PorousFlow_fluid_phase_enthalpy_nodal, PorousFlow_grad_porepressure_qp, PorousFlow_permeability_qp, PorousFlow_porepressure_nodal, PorousFlow_relative_permeability_nodal, PorousFlow_viscosity_nodal, dPorousFlow_fluid_phase_density_nodal_dvar, dPorousFlow_fluid_phase_density_qp_dvar, dPorousFlow_fluid_phase_enthalpy_nodal_dvar, dPorousFlow_grad_porepressure_qp_dgradvar, dPorousFlow_grad_porepressure_qp_dvar, dPorousFlow_permeability_qp_dgradvar, dPorousFlow_permeability_qp_dvar, dPorousFlow_relative_permeability_nodal_dvar, dPorousFlow_viscosity_nodal_dvar\n  Object: MaterialBase::thermal_conductivity\n\nProperties: PorousFlow_saturation_qp, dPorousFlow_saturation_qp_dvar\n  Object: MaterialBase::thermal_conductivity_face\n\nProperties: PorousFlow_saturation_qp, dPorousFlow_saturation_qp_dvar\n  Object: MaterialBase::thermal_conductivity_neighbor\n\nProperties: PorousFlow_saturation_qp, dPorousFlow_saturation_qp_dvar`\nI set the diffusivity option in the DiffusionFluxAux  to diffusivity = PorousFlow_thermal_conductivity_qp and terminal output following ERROR:\n*** ERROR ***\nThe following error occurred in the object \"flux\", of type \"DiffusionFluxAux\".\nThe requested AD material property 'PorousFlow_thermal_conductivity_qp' of type 'double'\nis already retrieved or declared as a non-AD property of type 'libMesh::TensorValue'.\nHow can I provide the correct thermal conductivity to the diffusivity option.\nThanks very much!",
                          "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-11099055",
                          "updatedAt": "2024-10-30T11:12:15Z",
                          "publishedAt": "2024-10-30T11:12:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "DiffusionFluxAux expects a Real (single scalar) valued diffusivity. In porous flow the diffusivity is a tensor.\nI ll take a look but I don't think we have an auxkernel that handles a tensor in the framework",
                          "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-11099998",
                          "updatedAt": "2024-10-30T12:49:15Z",
                          "publishedAt": "2024-10-30T12:49:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "You should be able to use MaterialRealTensorValueAux, but the better solution long-term would be to add conductivity to PorousFlowPropertyAux",
                          "url": "https://github.com/idaholab/moose/discussions/28811#discussioncomment-11106082",
                          "updatedAt": "2024-10-31T00:04:45Z",
                          "publishedAt": "2024-10-31T00:04:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Dynamics and Large Deformation System: not converging after static initialization",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Hi all, I would like to simulate dynamic system with large deformation, what the boundary achieved is $\\sigma_{xx} = 120 MPa$ and $\\sigma_{yy} = 135 MPa$, see the attached minimal example:\n[Mesh]\n    [./msh]\n        type = GeneratedMeshGenerator\n        dim = 2\n        nx = 100\n        ny = 100\n        xmin = -60000\n        xmax = 60000\n        ymin = -60000\n        ymax = 60000\n    []\n    [./extranodeset1]\n        type = ExtraNodesetGenerator\n        coord = '0 -60000 0'\n        new_boundary = corner_ptr\n        input = msh\n    []\n    displacements = 'disp_x disp_y'\n    use_displaced_mesh = true\n[]\n\n[GlobalParams]\n    displacements = 'disp_x disp_y'\n[]\n\n\n[Variables]\n    [disp_x]\n        order = FIRST\n        family = LAGRANGE     \n    []\n    [disp_y]\n        order = FIRST\n        family = LAGRANGE    \n    []\n[]\n\n[AuxVariables]\n    [vel_x]\n        order = FIRST\n        family = LAGRANGE\n    []\n    [accel_x]\n        order = FIRST\n        family = LAGRANGE\n    []\n    [vel_y]\n        order = FIRST\n        family = LAGRANGE\n    []\n    [accel_y]\n        order = FIRST\n        family = LAGRANGE\n    []\n[]\n\n[AuxKernels]\n    [accel_x]\n        type = NewmarkAccelAux\n        variable = accel_x\n        displacement = disp_x\n        velocity = vel_x\n        beta = 0.25\n        execute_on = timestep_end\n    []\n    [vel_x]\n        type = NewmarkVelAux\n        variable = vel_x\n        acceleration = accel_x\n        gamma = 0.5\n        execute_on = timestep_end\n    []\n    [accel_y]\n        type = NewmarkAccelAux\n        variable = accel_y\n        displacement = disp_y\n        velocity = vel_y\n        beta = 0.25\n        execute_on = timestep_end\n    []\n    [vel_y]\n        type = NewmarkVelAux\n        variable = vel_y\n        acceleration = accel_y\n        gamma = 0.5\n        execute_on = timestep_end\n    []\n[]\n\n[Kernels]\n    [dispkernel_x]\n        type = TotalLagrangianStressDivergence\n        variable = disp_x\n        component = 0\n        large_kinematics = true\n    []\n    [dispkernel_y]\n        type = TotalLagrangianStressDivergence\n        variable = disp_y\n        component = 1\n        large_kinematics = true\n    []\n    [./inertia_x]\n        type = InertialForce\n        use_displaced_mesh = true\n        variable = disp_x\n        acceleration = accel_x\n        velocity = vel_x\n        beta = 0.25\n        gamma = 0.5\n    []\n    [./inertia_y]\n        type = InertialForce\n        use_displaced_mesh = true\n        variable = disp_y\n        acceleration = accel_y\n        velocity = vel_y\n        beta = 0.25\n        gamma = 0.5\n    []\n[]\n\n[Materials]\n    [density]\n        type = GenericConstantMaterial\n        prop_names = 'density'\n        prop_values = '2700'\n    []\n    [strain]\n        type = ComputeLagrangianStrain\n        large_kinematics = true\n        output_properties = 'deformation_gradient'\n        outputs = exodus\n    []\n    [elastic_tensor]\n        type = ComputeIsotropicElasticityTensor\n        lambda = 1e10\n        shear_modulus = 1e10\n    []\n    [compute_stress]\n        type = ComputeStVenantKirchhoffStress\n        large_kinematics = true\n        output_properties = 'green_lagrange_strain pk2_stress'\n        outputs = exodus\n    []   \n[]  \n\n[Preconditioning]\n    [smp]\n      type = SMP\n      full = true\n    []\n[]\n  \n[Executioner]\n    type = Transient\n    solve_type = 'NEWTON'\n    # solve_type = 'PJFNK'\n    start_time = 0\n    end_time = 1e100\n    # num_steps = 1\n    l_max_its = 100\n    l_tol = 1e-7\n    nl_rel_tol = 1e-8\n    nl_max_its = 20\n    nl_abs_tol = 1e-10\n    petsc_options_iname = '-ksp_type -pc_type'\n    petsc_options_value = 'gmres     hypre'\n    # petsc_options_iname = '-pc_type -pc_factor_shift_type'\n    # petsc_options_value = 'lu       NONZERO'\n    # petsc_options_iname = '-ksp_gmres_restart -pc_type -sub_pc_type'\n    # petsc_options_value = '101                asm      lu'\n    # petsc_options_iname = '-ksp_type -pc_type -pc_hypre_type  -ksp_initial_guess_nonzero -ksp_pc_side -ksp_max_it -ksp_rtol -ksp_atol'\n    # petsc_options_value = 'gmres        hypre      boomeramg                   True        right       1500        1e-7      1e-9    '\n    # automatic_scaling = true\n    # nl_forced_its = 3\n    line_search = 'bt'\n    dt = 1e-8\n    [./TimeIntegrator]\n        type = NewmarkBeta\n        beta = 0.25\n        gamma = 0.5\n        inactive_tsteps = 1\n    [../]\n[]\n\n[Controls] # turns off inertial terms for the first time step\n  [./period0]\n    type = TimePeriod\n    disable_objects = '*/vel_x */vel_y */accel_x */accel_y */inertia_x */inertia_y'\n    start_time = 0.0\n    end_time = 1e-3 # dt used in the simulation\n  [../]\n[../]\n\n[Outputs] \n    exodus = true\n    time_step_interval = 1\n[]\n\n[BCs]\n    [bc_load_top_y]\n        type = DirichletBC\n        variable = disp_y\n        value = -337.5\n        boundary = top\n    []\n    [bc_fix_bottom_x]\n        type = DirichletBC\n        variable = disp_y\n        value = 0\n        boundary = bottom\n    []\n    [bc_load_left_x]\n        type = DirichletBC\n        variable = disp_x\n        value = 213.75\n        boundary = left\n    []\n    [bc_load_right_x]\n        type = DirichletBC\n        variable = disp_x\n        value = -213.75\n        boundary = right\n    []   \n    # fix ptr\n    [./fix_cptr1_x]\n        type = DirichletBC\n        variable = disp_x\n        boundary = corner_ptr\n        value = 0\n    []\n    [./fix_cptr2_y]\n        type = DirichletBC\n        variable = disp_y\n        boundary = corner_ptr\n        value = 0\n    []\n[]\n\nThe solution is unable to converge after static initialization, the nonlinear residual is unable to drop below the threshold:\nTime Step 0, time = 0\n\nTime Step 1, time = 0.001, dt = 0.001\nPre-SMO residual: 4553.43\n 0 Nonlinear |R| = 9.198460e+13\n      0 Linear |R| = 9.198460e+13\n      1 Linear |R| = 1.832397e+12\n      2 Linear |R| = 1.099771e+11\n      3 Linear |R| = 8.131518e+09\n      4 Linear |R| = 6.987512e+08\n      5 Linear |R| = 7.147934e+07\n      6 Linear |R| = 7.881670e+06\n 1 Nonlinear |R| = 6.985300e+13\n      0 Linear |R| = 6.985300e+13\n      1 Linear |R| = 1.176999e+12\n      2 Linear |R| = 5.558359e+10\n      3 Linear |R| = 3.994652e+09\n      4 Linear |R| = 3.251245e+08\n      5 Linear |R| = 3.553913e+07\n      6 Linear |R| = 4.296090e+06\n 2 Nonlinear |R| = 3.096218e+13\n      0 Linear |R| = 3.096218e+13\n      1 Linear |R| = 3.160956e+11\n      2 Linear |R| = 1.175575e+10\n      3 Linear |R| = 6.269621e+08\n      4 Linear |R| = 4.995027e+07\n      5 Linear |R| = 4.587469e+06\n      6 Linear |R| = 4.920255e+05\n 3 Nonlinear |R| = 2.070896e+12\n      0 Linear |R| = 2.070896e+12\n      1 Linear |R| = 2.259257e+10\n      2 Linear |R| = 9.136488e+08\n      3 Linear |R| = 5.926474e+07\n      4 Linear |R| = 6.822258e+06\n      5 Linear |R| = 7.688284e+05\n      6 Linear |R| = 7.898013e+04\n 4 Nonlinear |R| = 1.485067e+10\n      0 Linear |R| = 1.485067e+10\n      1 Linear |R| = 1.583929e+08\n      2 Linear |R| = 6.614170e+06\n      3 Linear |R| = 4.246260e+05\n      4 Linear |R| = 5.145280e+04\n      5 Linear |R| = 5.621947e+03\n      6 Linear |R| = 5.576845e+02\n 5 Nonlinear |R| = 9.039025e+05\n Solve Converged!\n\nTime Step 2, time = 0.002, dt = 0.001\nPre-SMO residual: 903903\n 0 Nonlinear |R| = 9.039025e+05\n      0 Linear |R| = 9.039025e+05\n      1 Linear |R| = 5.210092e+04\n      2 Linear |R| = 5.679163e+03\n      3 Linear |R| = 8.261564e+02\n      4 Linear |R| = 1.748659e+02\n      5 Linear |R| = 2.812000e+01\n      6 Linear |R| = 4.871999e+00\n      7 Linear |R| = 1.013468e+00\n      8 Linear |R| = 2.009413e-01\n      9 Linear |R| = 5.026781e-02\n 1 Nonlinear |R| = 6.720198e+03\n      0 Linear |R| = 6.720198e+03\n      1 Linear |R| = 5.664326e+02\n      2 Linear |R| = 1.076791e+02\n      3 Linear |R| = 2.050985e+01\n      4 Linear |R| = 4.079992e+00\n      5 Linear |R| = 1.253128e+00\n      6 Linear |R| = 2.933435e-01\n      7 Linear |R| = 8.639430e-02\n      8 Linear |R| = 2.735438e-02\n      9 Linear |R| = 8.229276e-03\n     10 Linear |R| = 2.375981e-03\n     11 Linear |R| = 6.550166e-04\n 2 Nonlinear |R| = 5.010084e+03\n      0 Linear |R| = 5.010084e+03\n      1 Linear |R| = 4.970719e+02\n      2 Linear |R| = 9.544612e+01\n      3 Linear |R| = 1.816948e+01\n      4 Linear |R| = 3.691453e+00\n      5 Linear |R| = 1.078413e+00\n      6 Linear |R| = 2.836297e-01\n      7 Linear |R| = 8.393670e-02\n      8 Linear |R| = 2.520353e-02\n      9 Linear |R| = 7.548594e-03\n     10 Linear |R| = 2.199123e-03\n     11 Linear |R| = 6.257451e-04\n     12 Linear |R| = 2.019227e-04\n 3 Nonlinear |R| = 4.692583e+03\n      0 Linear |R| = 4.692583e+03\n      1 Linear |R| = 4.107929e+02\n      2 Linear |R| = 7.826963e+01\n      3 Linear |R| = 1.593809e+01\n      4 Linear |R| = 3.269233e+00\n      5 Linear |R| = 9.755990e-01\n      6 Linear |R| = 2.459756e-01\n      7 Linear |R| = 7.532317e-02\n      8 Linear |R| = 2.390892e-02\n      9 Linear |R| = 6.912469e-03\n     10 Linear |R| = 2.020222e-03\n     11 Linear |R| = 5.925084e-04\n     12 Linear |R| = 1.894466e-04\n 4 Nonlinear |R| = 4.363519e+03\n      0 Linear |R| = 4.363519e+03\n      1 Linear |R| = 3.687721e+02\n      2 Linear |R| = 6.885182e+01\n      3 Linear |R| = 1.396455e+01\n      4 Linear |R| = 2.993200e+00\n      5 Linear |R| = 8.631987e-01\n      6 Linear |R| = 2.299164e-01\n      7 Linear |R| = 7.264178e-02\n      8 Linear |R| = 2.195557e-02\n      9 Linear |R| = 6.318704e-03\n     10 Linear |R| = 1.880952e-03\n     11 Linear |R| = 5.714754e-04\n     12 Linear |R| = 1.770981e-04\n 5 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n 6 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n 7 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n 8 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n 9 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n10 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n11 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n12 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n13 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n14 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n15 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n16 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n17 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n18 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n19 Nonlinear |R| = 4.324588e+03\n      0 Linear |R| = 4.324588e+03\n      1 Linear |R| = 3.657097e+02\n      2 Linear |R| = 6.782493e+01\n      3 Linear |R| = 1.377488e+01\n      4 Linear |R| = 2.950402e+00\n      5 Linear |R| = 8.503640e-01\n      6 Linear |R| = 2.281406e-01\n      7 Linear |R| = 7.245050e-02\n      8 Linear |R| = 2.160866e-02\n      9 Linear |R| = 6.241758e-03\n     10 Linear |R| = 1.856704e-03\n     11 Linear |R| = 5.682125e-04\n     12 Linear |R| = 1.756610e-04\n20 Nonlinear |R| = 4.324588e+03\n  Nonlinear solve did not converge due to DIVERGED_MAX_IT iterations 20\n Solve Did NOT Converge!\nCurrently Executing\n  Finished Solving                                                                       [ 14.10 s] [  177 MB]\nAborting as solve did not converge\n\nAlso if I try to add loading to the system during dynamic solving, it turns to give weird velocity and displacements results, I wonder if there are some settings I neglect to cause this issue, thanks a lot!",
          "url": "https://github.com/idaholab/moose/discussions/28967",
          "updatedAt": "2024-10-30T21:06:25Z",
          "publishedAt": "2024-10-30T05:40:48Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor your first time step you are accepting an unconverged solution. You ll want to tighten the tolerance on the nonlinear solver just in case that solution is causing trouble for the second time step",
                  "url": "https://github.com/idaholab/moose/discussions/28967#discussioncomment-11100049",
                  "updatedAt": "2024-10-30T12:53:18Z",
                  "publishedAt": "2024-10-30T12:53:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi Giud, I tried to tighten the tolerance but it is the same",
                          "url": "https://github.com/idaholab/moose/discussions/28967#discussioncomment-11100724",
                          "updatedAt": "2024-10-30T13:51:21Z",
                          "publishedAt": "2024-10-30T13:51:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi @GiudGiud, I'm just curious, in the current 2D setting, how can I make sure it is under plane strain condition? Thank!",
                          "url": "https://github.com/idaholab/moose/discussions/28967#discussioncomment-11101487",
                          "updatedAt": "2024-10-30T14:58:53Z",
                          "publishedAt": "2024-10-30T14:58:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "In your input file replace start_time = 0 to\nstart_time = -1e-12  in the control block and add automatic_scaling = true to the Executioner block.  Static Initialization is not well supported for solid dynamics but I think the way you did it was correct.",
                          "url": "https://github.com/idaholab/moose/discussions/28967#discussioncomment-11101862",
                          "updatedAt": "2024-10-30T15:29:37Z",
                          "publishedAt": "2024-10-30T15:29:36Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks @maxnezdyur, I think this kind of solves my problem!",
                          "url": "https://github.com/idaholab/moose/discussions/28967#discussioncomment-11105143",
                          "updatedAt": "2024-10-30T21:06:25Z",
                          "publishedAt": "2024-10-30T21:06:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ShouldApply",
          "author": {
            "login": "danschappel"
          },
          "bodyText": "Does the ShouldApply() clause still work with DirichletBCs? It still works with PenaltyDirichletBCs. However, when using the new computeQpValue() method DirichletBCs seem to have an issue of trying to both set and not set the boundary condition when should apply is false, and it produces a displacement that is neither 0 (the value if the BC is disabled) or the intended value when the BC is active. If you use the older computeQpResidual() it has convergence issues that seem similar to the results from setting use_preset = false.",
          "url": "https://github.com/idaholab/moose/discussions/28962",
          "updatedAt": "2024-10-30T12:31:14Z",
          "publishedAt": "2024-10-29T18:15:46Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt should. shouldApply is defined in the BoundaryCondition parent class.\n\nand it produces a displacement that is neither 0 (the value if the BC is disabled)\n\nWhy would it be 0 if the BC is disabled? 0 could be imposed with a DirichletBC but how do you know it is 0 if it's not imposed?\n\nIf you use the older computeQpResidual() it has convergence issues that seem similar to the results from setting use_preset = false.\n\nComputeQpResidual is set by the DirichletBCBase to (u - value). What are you modifying it to?",
                  "url": "https://github.com/idaholab/moose/discussions/28962#discussioncomment-11094009",
                  "updatedAt": "2024-10-30T00:58:34Z",
                  "publishedAt": "2024-10-30T00:58:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "danschappel"
                          },
                          "bodyText": "That BC is the only source of displacement in the simulation at present. When the BC is removed from the input file the displacement is zero and there are no other BCs on the surface.\nI've left it at _u[_qp] - value at the moment, but it still has this issue. However, it is good to know shouldapply is supposed to still work.",
                          "url": "https://github.com/idaholab/moose/discussions/28962#discussioncomment-11099131",
                          "updatedAt": "2024-10-30T11:22:26Z",
                          "publishedAt": "2024-10-30T11:22:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "danschappel"
                  },
                  "bodyText": "Ok I think I got it. When using a DirichletBC with shouldapply and computeQpValue(), at the beginning of each timestep it is trying to set the surface to the value if the BC is active and then work towards to an inactive condition. If the value is similar to what would happen if there was no BC this works, but if not then it's a problem.",
                  "url": "https://github.com/idaholab/moose/discussions/28962#discussioncomment-11099815",
                  "updatedAt": "2024-10-30T12:31:16Z",
                  "publishedAt": "2024-10-30T12:31:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "An error occurred when using MeshModifiers and Pressure",
          "author": {
            "login": "PEI0214"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nWhen I used MeshModifiers, and set the Pressure boundary condition, I got the following error:\n*** ERROR ***\n'Pressure_load_0' of type 'Pressure' depends on variable(s) 'disp_x,disp_y,disp_z'. However, that variable does not appear to be defined on (all of) boundary 'top'.\n\nMy input file is \u2018test1.i\u2019 below. Is there a way to solve this problem?\n\ntest1.i\n[Problem]\n  kernel_coverage_check = false\n  material_coverage_check = false\n  boundary_restricted_node_integrity_check = false\n[]\n\nnew_domain_blocks = '1001\t1002'\n\n[Mesh]\n  [box]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 10\n    ny = 10\n    nz = 10\n    xmin = 0\n    xmax = 1\n    ymin = 0\n    ymax = 1\n    zmin = 0\n    zmax = 1\n  []\n  [box1]\n    type = SubdomainBoundingBoxGenerator\n    input = box\n    block_id = 1\n    bottom_left = '0 0.5 0'\n    top_right = '1 1 1'\n  []\n\n  add_subdomain_ids = '${new_domain_blocks}'\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Variables]\n  [disp_x]\n    block = '${new_domain_blocks}'\n  []\n  [disp_y]\n    block = '${new_domain_blocks}'\n  []\n  [disp_z]\n    block = '${new_domain_blocks}'\n  []\n[]\n\n[Physics/SolidMechanics/QuasiStatic]\n  [./all]\n    strain = finite\n    add_variables = false\n    block = '${new_domain_blocks}'\n  [../]\n[]\n\n[Kernels]\n  [Gravity1]\n    type = Gravity\n    block = '${new_domain_blocks}'\n    use_displaced_mesh = false\n    variable = disp_y\n    value = -10\n  []\n[]\n\n[Functions]\n  [zhouya]\n    type = PiecewiseLinear\n    x = '0  500 1000'\n    y = '0  0   1e6'\n  []\n[]\n\n# ===== Boundary Conditions =====\n[BCs]\n  [archor_x]\n    type = DirichletBC\n    boundary = 'bottom'\n    variable = disp_x\n    value = 0\n  []\n\n  [archor_y]\n    type = DirichletBC\n    boundary = 'bottom'\n    variable = disp_y\n    value = 0\n  []\n\n  [archor_z]\n    type = DirichletBC\n    boundary = 'bottom'\n    variable = disp_z\n    value = 0\n  []\n\n  [Pressure]\n    [load]\n      boundary = 'top'\n      function = 'zhouya'\n    []\n  []\n[]\n\n# ===== Materials (linear-elastic to keep it simple) =====\n[Materials]\n  [elasticity_tensor1]\n    type = ComputeIsotropicElasticityTensor\n    block = '${new_domain_blocks}'\n    youngs_modulus = 50E6 # 50 MPa\n    poissons_ratio = 0.3\n  []\n\n  [stress]\n    type = ComputeFiniteStrainElasticStress\n    block = '${new_domain_blocks}'\n  []\n\n  [density1]\n    type = GenericConstantMaterial\n    block = '${new_domain_blocks}'\n    prop_names = density\n    prop_values = 2000\n  []\n[]\n\n[MeshModifiers]\n  [m1]\n    type = TimedSubdomainModifier\n    times = '200 300'\n    blocks_from = '0\t1'\n    blocks_to = '1001\t1002'\n  []\n[]\n\n# ===== Executioner =====\n[Executioner]\n  type = Transient\n  automatic_scaling = true\n\n  end_time = 1000\n  dt = 100\n\n  solve_type = 'PJFNK'\n\n  nl_abs_tol = 1E-5\n  nl_max_its = 400\n\n  l_tol = 1E-8\n  l_max_its = 200\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28946",
          "updatedAt": "2024-10-30T01:02:40Z",
          "publishedAt": "2024-10-28T14:39:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo 'top' is not connected to the domains where the displacements are being solved for.\nIs this intentional?\nYou could define the displacements everywhere on the domain, then use a NullKernel on the domains where you are not solving the solid mechanics equations for yet.\nOtherwise, you will need to turn off the other integrity check for nodal variables and BCs\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28946#discussioncomment-11077203",
                  "updatedAt": "2024-10-28T16:37:39Z",
                  "publishedAt": "2024-10-28T16:37:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "So 'top' is not connected to the domains where the displacements are being solved for. Is this intentional?\n\nIt wasn't my intention.\n\nYou could define the displacements everywhere on the domain, then use a NullKernel on the domains where you are not solving the solid mechanics equations for yet.\n\nI was trying to simulate the construction. If I define displacement on all domains and use NullKernel, the unconstructed regions will also be displaced.\n\nOtherwise, you will need to turn off the other integrity check for nodal variables and BCs\n\nI tried to turn off 'boundary_restricted_elem_integrity_check', but it had the following error.\nTime Step 0, time = 0\n\nTime Step 1, time = 100, dt = 100\n\nPerforming automatic scaling calculation\n\nSegmentation fault (core dumped)",
                          "url": "https://github.com/idaholab/moose/discussions/28946#discussioncomment-11081986",
                          "updatedAt": "2024-10-29T03:16:11Z",
                          "publishedAt": "2024-10-29T03:09:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok the integrity check is there for a reason. Consider this is not supported.\nI would recommend trying the no-restriction + null kernel approach",
                          "url": "https://github.com/idaholab/moose/discussions/28946#discussioncomment-11082007",
                          "updatedAt": "2024-10-29T03:11:12Z",
                          "publishedAt": "2024-10-29T03:11:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "If I define displacement on all domains and use NullKernel on subdomains that are not activated. Then the inactive subfields will also be deformed. As shown in the image below:\n\nThis is also the case when setting DirichletBC on the 'bottom' boundary. The problem is resolved when 'boundary_restricted_node_integrity_check' is turned off.",
                          "url": "https://github.com/idaholab/moose/discussions/28946#discussioncomment-11083988",
                          "updatedAt": "2024-10-29T08:17:25Z",
                          "publishedAt": "2024-10-29T08:17:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The problem is resolved when 'boundary_restricted_node_integrity_check' is turned off.\n\nThis should not be. It s just a diagnostic to make sure the nodal BCs are applied on surfaces on which the variable is defined.\n\nThen the inactive subfields will also be deformed\n\nAre they deformed or just translated?",
                          "url": "https://github.com/idaholab/moose/discussions/28946#discussioncomment-11094029",
                          "updatedAt": "2024-10-30T01:02:40Z",
                          "publishedAt": "2024-10-30T01:02:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Material Property not defined on block zero",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I am trying to solve this error below. Any help\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.check_inp(moose_srv)\nMaterial property 'phase0_deformation_gradient_0', requested by 'f0_xx' is not defined on block 0check_inp(moose_srv)\nMaterial property 'phase0_deformation_gradient_0', requested by 'f0_yy' is not defined on block 0check_inp(moose_srv)\n\nBelow is the relevant code snippet\n [f0_xx]\n      type = RankTwoAux\n      variable = f0_xx\n      rank_two_tensor =   phase0_deformation_gradient_0\n      index_j = 0\n      index_i = 0\n      execute_on = timestep_end\n    []\n    [f0_yy]\n      type = RankTwoAux\n      variable = f0_yy\n      rank_two_tensor =   phase0_deformation_gradient_0\n      index_j = 1\n      index_i = 1\n      execute_on = timestep_end\n    []\n[stress_phase0]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_phase0'\n    eigenstrain_names = 'phase0_eigenstrain_0'\n    tan_mod_type = exact\n    rtol = 1e-08\n    base_name = phase0\n    block = 0\n  []\n[phase0_eigenstrain_0]\n    type = ComputeCrystalPlasticityThermalEigenstrain\n    eigenstrain_name = phase0_eigenstrain_0\n    deformation_gradient_name =  phase0_deformation_gradient_0\n    temperature = temperature\n    thermal_expansion_coefficients = '1.2e-05 1.2e-05 1.2e-05'\n    base_name = phase0\n  []\n\nBelow is the material props from debug\nActive Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_plastic_deformation_gradient\" \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \n                             \"phase0_stress\" \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n                             \n      Material Name:       trial_xtalpl_phase0\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       phase0_eigenstrain_0\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/dtemperature\" \"phase0_phase0_deformation_gradient_0\" \n                             \"phase0_phase0_eigenstrain_0\" \"phase0_phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\n    Active Face Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_face\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_face\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_plastic_deformation_gradient\" \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \n                             \"phase0_stress\" \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n                             \n      Material Name:       trial_xtalpl_phase0_face\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       phase0_eigenstrain_0_face\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/dtemperature\" \"phase0_phase0_deformation_gradient_0\" \n                             \"phase0_phase0_eigenstrain_0\" \"phase0_phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0_face\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_face\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_face\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_face\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_face\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_face\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_face\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_face\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Neighboring Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_neighbor\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_neighbor\n      Property Names:      \"eigenstrain_deformation_gradient\" \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \n                             \"phase0_plastic_deformation_gradient\" \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \n                             \"phase0_stress\" \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n                             \n      Material Name:       trial_xtalpl_phase0_neighbor\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       phase0_eigenstrain_0_neighbor\n      Property Names:      \"dphase0_phase0_deformation_gradient_0/dtemperature\" \"phase0_phase0_deformation_gradient_0\" \n                             \"phase0_phase0_eigenstrain_0\" \"phase0_phase0_eigenstrain_0_lattice_thermal_expansion_coefficients\" \n                             \n      Material Name:       strain_phase0_neighbor\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_neighbor\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_neighbor\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_neighbor\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_neighbor\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_neighbor\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_neighbor\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_neighbor\n      Property Names:      \"Jacobian_mult\" \"stress\"",
          "url": "https://github.com/idaholab/moose/discussions/28965",
          "updatedAt": "2024-10-30T00:53:01Z",
          "publishedAt": "2024-10-30T00:30:47Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "you prefixed the phase0 deformation gradient twice\n[phase0_eigenstrain_0]\n    type = ComputeCrystalPlasticityThermalEigenstrain\n    eigenstrain_name = phase0_eigenstrain_0\n    deformation_gradient_name =  phase0_deformation_gradient_0\n    temperature = temperature\n    thermal_expansion_coefficients = '1.2e-05 1.2e-05 1.2e-05'\n    base_name = phase0\n  []\n\nshould be\n[phase0_eigenstrain_0]\n    type = ComputeCrystalPlasticityThermalEigenstrain\n    eigenstrain_name = eigenstrain_0\n    deformation_gradient_name =  deformation_gradient_0\n    temperature = temperature\n    thermal_expansion_coefficients = '1.2e-05 1.2e-05 1.2e-05'\n    base_name = phase0\n  []",
                  "url": "https://github.com/idaholab/moose/discussions/28965#discussioncomment-11093904",
                  "updatedAt": "2024-10-30T00:35:45Z",
                  "publishedAt": "2024-10-30T00:35:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Thanks a lot!",
                          "url": "https://github.com/idaholab/moose/discussions/28965#discussioncomment-11093977",
                          "updatedAt": "2024-10-30T00:52:59Z",
                          "publishedAt": "2024-10-30T00:52:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Restarting with checkpoints : huge generated data, procs number",
          "author": {
            "login": "selarem"
          },
          "bodyText": "Hello,\nIn the \"Small Strain\" framework, we typically restart jobs by utilizing the [UserObjects] block or by prescribing initial conditions (IC) on the desired variables. However, this approach has not been feasible in the \"Finite Strain\" framework, and we are unclear why it's impossible to apply an IC condition in this context.\nTo address this, we have switched to using checkpoints for restarting jobs. This method, however, results in the creation of numerous large subfolders  and several gigabytes of data. Additionally, a limitation we've encountered is the inability to change the number of processors (procs) between the initial job and the restart\u2014running the first job with X procs means we must use the same number for subsequent jobs.\nWe have reviewed the \"Restart and Recover\" documentation but have not found an effective solution to these issues. Could you please provide guidance on how to reduce the volume of generated data and advise on a strategy to run jobs with varying numbers of procs?\nThank you for your assistance.",
          "url": "https://github.com/idaholab/moose/discussions/28933",
          "updatedAt": "2024-10-30T00:41:03Z",
          "publishedAt": "2024-10-25T13:19:47Z",
          "category": {
            "name": "Show and tell"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "selarem"
                  },
                  "bodyText": "Could anyone help in explaining to us why it is not possible to apply IC in  solid mechanics within the   \"finite strain\" assumption ?",
                  "url": "https://github.com/idaholab/moose/discussions/28933#discussioncomment-11073638",
                  "updatedAt": "2024-10-28T11:12:08Z",
                  "publishedAt": "2024-10-28T11:12:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ICs are for variables. You need to be restarting stresses iirc, which are material properties\nCheckpoints are the correct way to restart these simulations.",
                          "url": "https://github.com/idaholab/moose/discussions/28933#discussioncomment-11079336",
                          "updatedAt": "2024-10-28T20:08:17Z",
                          "publishedAt": "2024-10-28T20:08:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "You could alternatively try applying an eigenstrain at the start of the simulation, although depending on your strain field \"your mileage may vary\". @dewenyushu may have some additional insights, if the initial stress method @GiudGiud suggested will not work for your case",
                          "url": "https://github.com/idaholab/moose/discussions/28933#discussioncomment-11079439",
                          "updatedAt": "2024-10-28T20:17:18Z",
                          "publishedAt": "2024-10-28T20:17:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "While we have successfully resolved our issue using checkpoints, we still lack clarity on why initial conditions (ICs) fail to function as expected. For any given prescribed displacement, the solver is supposed to iterate until it converges. This is not happening in our case. It only works in \"small strain\".",
                          "url": "https://github.com/idaholab/moose/discussions/28933#discussioncomment-11088734",
                          "updatedAt": "2024-10-29T15:16:58Z",
                          "publishedAt": "2024-10-29T15:16:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Could you please provide guidance on how to reduce the volume of generated data and advise on a strategy to run jobs with varying numbers of procs?\n\nYou can set the number of checkpoint files to 1 instead of 2 to reduce the amount of data by a factor of 2.\nJobs with varying number of procs wont be supported with checkpoints.\n\nwe still lack clarity on why initial conditions (ICs) fail to function as expected\n\nThe finite strain approach is relying on this object right?\nhttps://mooseframework.inl.gov/source/materials/ADComputeFiniteStrain.html\nIf so that's a stateful material property, which ICs cannot restart.",
                          "url": "https://github.com/idaholab/moose/discussions/28933#discussioncomment-11093921",
                          "updatedAt": "2024-10-30T00:41:04Z",
                          "publishedAt": "2024-10-30T00:41:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "nucleated grains not captured by grain tracker",
          "author": {
            "login": "ashishdhole"
          },
          "bodyText": "Hello,\nI am working on phase transformation with nucleation in a two phase system. I am using multiphase model for the phase transformation. I want to nucleate new grains with particular phase in the system of poly crystals.\nfollowing is the input file I made\n[Mesh]\n    type = GeneratedMesh\n    dim = 2\n    nx = 150\n    ny = 150\n    xmin = 0\n    xmax = 100\n    ymin = 0\n    ymax = 100\n    elem_type = QUAD4\n[]\n\n[GlobalParams]\n    op_num = 4\n    var_name_base = eta\n[]\n\n[Variables]\n    # carbon concentration\n[c]\n    order = FIRST\n    family = LAGRANGE\n[InitialCondition]\n    type = ConstantIC\n    value = 0.1\n[]\n[]\n[w]\n    order = FIRST\n    family = LAGRANGE\n[]\n[PolycrystalVariables]\n    order = FIRST\n    family = LAGRANGE\n[]\n\n# Lagrange multiplier\n[lambda]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 1e-5\n[]\n[]\n\n[ICs]\n[PolycrystalICs]\n[PolycrystalColoringIC]\n    polycrystal_ic_uo = voronoi\n[]\n[]\n[]\n[AuxVariables]\n[bnds]\n[]\n[unique_grains]\n    order = CONSTANT\n    family = MONOMIAL\n[]\n[]\n[AuxKernels]\n[BndsCalc]\n    type = BndsCalcAux\n    variable = bnds\n    execute_on = 'timestep_end'\n[]\n[unique_grains]\n    type = FeatureFloodCountAux\n    variable = unique_grains\n    field_display = UNIQUE_REGION\n    execute_on = 'initial timestep_end'\n    flood_counter = grain_tracker\n[]\n[]\n[UserObjects]\n[grain_tracker]\n    type = GrainTracker\n    verbosity_level = 0\n    compute_var_to_feature_map = true\n    reserve_op = 1\n[]\n[voronoi]\n    type = PolycrystalVoronoi\n    grain_num = 3 # Number of grains\n    rand_seed = 123\n    coloring_algorithm = bt\n[]\n[inserter]\n    type = DiscreteNucleationFromFile\n    hold_time = 100\n    file = nuclei2.csv\n    radius = 4\n[]\n[map]\n    type = DiscreteNucleationMap\n    int_width = 0.5\n    periodic = eta3\n    inserter = inserter\n[]\n[]\n[BCs]\n[Periodic]\n[all]\n    auto_direction = ''\n[]\n[]\n[]\n\n[Materials]\n[fb]\n    type = DerivativeParsedMaterial\n    property_name = fb\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 95.0*c_mn*c_va,-3.76634024154742e-33*T^15/(c_mn*c_va + 1.05263157894737e-11)^15 - 1.23049163062049e-20*T^9/(c_mn*c_va + 1.05263157894737e-11)^9 - 2.03517994308988e-7*T^3/(c_mn*c_va + 1.05263157894737e-11)^3 + 1 - 0.86033875460538*(95.0*c_mn*c_va + 1.0e-9)/T,if(T < -285.0*c_mn*c_va,-2.62482727189424e-40*T^15/(-c_mn*c_va + 3.50877192982456e-12)^15 - 6.25154514362899e-25*T^9/(-c_mn*c_va + 3.50877192982456e-12)^9 - 7.53770349292548e-9*T^3/(-c_mn*c_va + 3.50877192982456e-12)^3 + 1 - 0.86033875460538*(-285.0*c_mn*c_va + 1.0e-9)/T,if(T > -285.0*c_mn*c_va & 285.0*c_mn*c_va < 0,-80269907448.7061*(-c_mn*c_va + 3.50877192982456e-12)^5/T^5 - 9.00929501779248e+33*(-c_mn*c_va + 3.50877192982456e-12)^15/T^15 - 6.6889616090583e+57*(-c_mn*c_va + 3.50877192982456e-12)^25/T^25,if(T > 95.0*c_mn*c_va & 285.0*c_mn*c_va > 0,-330328837.237474*(c_mn*c_va + 1.05263157894737e-11)^5/T^5 - 6.27873260157897e+26*(c_mn*c_va + 1.05263157894737e-11)^15/T^15 - 7.8945491943478e+45*(c_mn*c_va + 1.05263157894737e-11)^25/T^25,0))))*log(-0.66*c_mn*c_va*if(0.66*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (-36732.0*c_fe*c_mn*c - 10184.0*c_fe*c_mn*c_va - 34671.0*c_fe*c*c_va - 52204.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 80000.0) + c_fe*c_va*(if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 4745.0) + c_mn*c*(27.46525*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))))/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '1100 0.0001 0.001'\n[]\n[ff]\n    type = DerivativeParsedMaterial\n    property_name = ff\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va,-1.05647165480942e-46*T^15/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15 - 9.09581551984581e-29*T^9/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^9 - 3.9645187279453e-10*T^3/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^3 + 1 - 0.86033875460538*(689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va + 1.0e-9)/T,if(T < -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va,-7.36273260959473e-54*T^15/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15 - 4.62115303553615e-33*T^9/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^9 - 1.46834026960937e-11*T^3/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^3 + 1 - 0.86033875460538*(-2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va + 1.0e-9)/T,if(T > -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va < 0,-2.64184091899323e+15*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^5/T^5 - 3.21182969926491e+47*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15/T^15 - 2.58302259505429e+80*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^25/T^25,if(T > 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va > 0,-10871773329190.3*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^5/T^5 - 2.23837934085496e+40*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15/T^15 - 3.04857467251016e+68*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^25/T^25,0))))*log((-2.1*c_fe*c - 2.1*c_fe*c_va - 1.86*c_mn*c_va)*if(2.1*c_fe*c + 2.1*c_fe*c_va + 1.86*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(-15.877*T + if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + 77207.0) + c_fe*c_va*if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + c_mn*c*(13.659*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 1519.0,69600.0*1/T - 24.5177*T*log(T) + 131.884*T - 0.006*T^2.0 - 3439.3,2.205113e+30*T^(-9.0) - 2.5984*T + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))) + 2663.31))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c_mn*c*(20082.0 - 11.6312*T) + c_fe*c_mn*c_va*(3.865*T - 7762.0) - 259.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 34671.0*c_fe*c*c_va - 41333.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '1100 0.0001 0.001'\n[]\n\n[free_energy_A]\n    type = DerivativeParsedMaterial\n    property_name = Fa\n    coupled_variables = 'c'\n    expression = '(c-0.1)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n[free_energy_B]\n    type = DerivativeParsedMaterial\n    property_name = Fb\n    coupled_variables = 'c'\n    expression = '(c-0.9)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n[nucleation]\n    # The nucleation material is configured to insert nuclei into the free energy\n    # tht force the concentration to go to 0.95, and holds this enforcement for 500\n    # time units.\n    type = DiscreteNucleation\n    property_name = Fn\n    op_names  = eta3\n    op_values = 0.90\n    map = map\n    outputs = exodus\n[]\n[free_energy_nuc]\n    # add the chemical and nucleation free energy contributions together\n    type = DerivativeSumMaterial\n    derivative_order = 2\n    coupled_variables = 'eta3 c'\n    sum_materials = 'Fa Fn'\n    property_name = Fan\n[]\n\n# h(eta)\n[h0]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta0\n    function_name = h0\n[]\n[h1]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta1\n    function_name = h1\n[]\n[h2]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta2\n    function_name = h2\n[]\n[h3]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta3\n    function_name = h3\n[]\n# g(eta)\n[barrier]\n    type = MultiBarrierFunctionMaterial\n    etas = 'eta0 eta1 eta2 eta3'\n[]\n\n# constant properties\n[constants]\n    type = GenericConstantMaterial\n    prop_names = 'M   L   kappa_eta kappa_c'\n    prop_values = '0.1 2 1 1'\n[]\n\n[free_energy]\n    type = DerivativeMultiPhaseMaterial\n    property_name = F\n    fi_names = 'Fa Fb Fb Fan' # free energy from thermodynamic database\n    hi_names = 'h0  h1 h2 h3'\n    etas     = 'eta0 eta1 eta2 eta3'\n    coupled_variables = 'c'\n    W = 1\n[]\n[]\n\n[Kernels]\n[eta_force]\n    type = DiscreteNucleationForce\n    variable = eta3\n    map = map\n    no_nucleus_value = 0\n    nucleus_value = 0.9\n[]\n[eta_react]\n    type = Reaction\n    variable = eta3\n[]\n[c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n    coupled_variables = 'eta0 eta1 eta2 eta3'\n[]\n[w_res]\n    type = SplitCHWRes\n    variable = w\n    mob_name = M\n[]\n[time1]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n[]\n\n# Allen Cahn for eta_s\n[deta0dt]\n    type = TimeDerivative\n    variable = eta0\n[]\n[ACBulk0]\n    type = AllenCahn\n    variable = eta0\n    coupled_variables = 'c eta1 eta2 eta3'\n    f_name = F\n[]\n[ACInterface0]\n    type = ACInterface\n    variable = eta0\n    coupled_variables = 'eta1 eta2 eta3'\n    kappa_name = kappa_eta\n[]\n[lagrange0]\n    type = SwitchingFunctionConstraintEta\n    variable = eta0\n    h_name   = h0\n    lambda = lambda\n    coupled_variables = 'eta1 eta2 eta3'\n[]\n\n#\n[deta1dt]\n    type = TimeDerivative\n    variable = eta1\n[]\n[ACBulk1]\n    type = AllenCahn\n    variable = eta1\n    coupled_variables = 'c eta0 eta2 eta3'\n    f_name = F\n[]\n[ACInterface1]\n    type = ACInterface\n    variable = eta1\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta2 eta3'\n[]\n[lagrange1]\n    type = SwitchingFunctionConstraintEta\n    variable = eta1\n    h_name   = h1\n    lambda = lambda\n    coupled_variables = 'eta0 eta2 eta3'\n[]\n\n#\n[deta2dt]\n    type = TimeDerivative\n    variable = eta2\n[]\n[ACBulk2]\n    type = AllenCahn\n    variable = eta2\n    coupled_variables = 'c eta0 eta1 eta3'\n    f_name = F\n[]\n[ACInterface2]\n    type = ACInterface\n    variable = eta2\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta1 eta3'\n[]\n[lagrange2]\n    type = SwitchingFunctionConstraintEta\n    variable = eta2\n    h_name   = h2\n    lambda = lambda\n    coupled_variables = 'eta1 eta0 eta3'\n[]\n\n#\n[deta3dt]\n    type = TimeDerivative\n    variable = eta3\n[]\n[ACBulk3]\n    type = AllenCahn\n    variable = eta3\n    coupled_variables = 'c eta0 eta1 eta2'\n    f_name = F\n[]\n[ACInterface3]\n    type = ACInterface\n    variable = eta3\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta1 eta2'\n[]\n[lagrange3]\n    type = SwitchingFunctionConstraintEta\n    variable = eta3\n    h_name   = h3\n    lambda = lambda\n    coupled_variables = 'eta1 eta2 eta0'\n[]\n\n[lagrange]\n    type = SwitchingFunctionConstraintLagrange\n    variable = lambda\n    etas    = 'eta0 eta1 eta2 eta3'\n    h_names = 'h0   h1 h2 h3'\n    epsilon = 1e-6\n[]\n[]\n\n[Preconditioning]\n[SMP]\n    type = SMP\n    full = true\n[]\n[]\n\n[Executioner]\n    type = Transient\n    scheme = 'bdf2'\n\n    solve_type = 'NEWTON'      \n    line_search = none\n\n    l_max_its = 15\n    l_tol = 1.0e-6\n\n    nl_max_its = 50\n    nl_rel_tol = 1.0e-8\n    nl_abs_tol = 1.0e-10\n\n    start_time = 0.0\n    num_steps = 1000\n    dt = 0.1\n    #dtmin = 0.01\n[]\n\n[Debug]\n    # show_var_residual_norms = true\n[]\n\n[Outputs]\n    execute_on = 'timestep_end'\n    exodus = true\n[]\n\nI was able to get the phase transformation effect without nucleation. But I think I am missing soething in the nucleation blocks that is preventing it to capture the newly formed nuclei.\nat t=0\n\nat t=10\n\nbut nucleation shows no effect\n\nThank you\nAshish",
          "url": "https://github.com/idaholab/moose/discussions/28938",
          "updatedAt": "2024-10-29T23:09:25Z",
          "publishedAt": "2024-10-26T23:13:00Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen",
                  "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11065354",
                  "updatedAt": "2024-10-27T10:19:52Z",
                  "publishedAt": "2024-10-27T10:19:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ashishdhole"
                  },
                  "bodyText": "Hello,\nCan you explain what is happening with my nucleus?\nThis is my input file\n[Mesh]\n    type = GeneratedMesh\n    dim = 2\n    nx = 150\n    ny = 150\n    xmin = 0\n    xmax = 100\n    ymin = 0\n    ymax = 100\n    elem_type = QUAD4\n    parallel_type = DISTRIBUTED\n[]\n\n[GlobalParams]\n    op_num = 5\n    var_name_base = eta\n[]\n\n[Variables]\n    # carbon concentration\n[c]\n    order = FIRST\n    family = LAGRANGE\n[InitialCondition]\n    type = ConstantIC\n    value = 0.1900000000\n[]\n[]\n[w]\n    order = FIRST\n    family = LAGRANGE\n[]\n[PolycrystalVariables]\n    order = FIRST\n    family = LAGRANGE\n[]\n\n# Lagrange multiplier\n[lambda]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 1e-5\n[]\n[]\n#[Modules]\n#[PhaseField]\n#[EulerAngles2RGB]\n#    crystal_structure = cubic\n#    euler_angle_provider = euler_angle_file\n#    grain_tracker = grain_tracker\n#[]\n#[]\n#[]\n[ICs]\n[PolycrystalICs]\n[PolycrystalColoringIC]\n    polycrystal_ic_uo = voronoi\n[]\n[]\n[]\n[AuxVariables]\n[bnds]\n[]\n[unique_grains]\n    order = CONSTANT\n    family = MONOMIAL\n[]\n[]\n[AuxKernels]\n[BndsCalc]\n    type = BndsCalcAux\n    variable = bnds\n    execute_on = 'timestep_end'\n[]\n[unique_grains]\n    type = FeatureFloodCountAux\n    variable = unique_grains\n    field_display = UNIQUE_REGION\n    execute_on = 'initial timestep_end'\n    flood_counter = grain_tracker\n[]\n[]\n[UserObjects]\n[grain_tracker]\n    type = GrainTracker\n    verbosity_level = 0\n    compute_var_to_feature_map = false\n    reserve_op = 1\n    #connecting_threshold = 0.1\n    remap_grains = true\n[]\n[voronoi]\n    type = PolycrystalVoronoi\n    grain_num = 4 # Number of grains\n    rand_seed = 8\n    coloring_algorithm = bt\n[]\n#[inserter1]\n#    type = DiscreteNucleationInserter\n#    hold_time = 100\n#    probability = P1\n#    seed = 12346\n#    radius = 4\n#[]\n#[inserter2]\n#    type = DiscreteNucleationInserter\n#    hold_time = 100\n#    probability = P2\n#    seed = 123\n#    radius = 4\n#[]\n[inserter1]\n    type = DiscreteNucleationFromFile\n    hold_time = 100\n    file = nuclei1.csv\n    radius = 3\n[]\n#[inserter2]\n#    type = DiscreteNucleationFromFile\n#    hold_time = 100\n#    file = nuclei2.csv\n#    radius = 3\n#[]\n[map1]\n    type = DiscreteNucleationMap\n    int_width = 0.2\n    periodic = eta4\n    inserter = inserter1\n[]\n#[map2]\n#    type = DiscreteNucleationMap\n#    int_width = 0.1\n#    #periodic = eta4\n#    inserter = inserter2\n#[]\n#[euler_angle_file]\n#    type = RandomEulerAngleProvider\n#    grain_tracker_object = grain_tracker\n#    execute_on = 'initial timestep_begin'\n#[]\n[]\n[BCs]\n[Periodic]\n[all]\n    auto_direction = 'x y'\n[]\n[]\n[]\n\n[Materials]\n[fb]\n    type = DerivativeParsedMaterial\n    property_name = fb\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 95.0*c_mn*c_va,-3.76634024154742e-33*T^15/(c_mn*c_va + 1.05263157894737e-11)^15 - 1.23049163062049e-20*T^9/(c_mn*c_va + 1.05263157894737e-11)^9 - 2.03517994308988e-7*T^3/(c_mn*c_va + 1.05263157894737e-11)^3 + 1 - 0.86033875460538*(95.0*c_mn*c_va + 1.0e-9)/T,if(T < -285.0*c_mn*c_va,-2.62482727189424e-40*T^15/(-c_mn*c_va + 3.50877192982456e-12)^15 - 6.25154514362899e-25*T^9/(-c_mn*c_va + 3.50877192982456e-12)^9 - 7.53770349292548e-9*T^3/(-c_mn*c_va + 3.50877192982456e-12)^3 + 1 - 0.86033875460538*(-285.0*c_mn*c_va + 1.0e-9)/T,if(T > -285.0*c_mn*c_va & 285.0*c_mn*c_va < 0,-80269907448.7061*(-c_mn*c_va + 3.50877192982456e-12)^5/T^5 - 9.00929501779248e+33*(-c_mn*c_va + 3.50877192982456e-12)^15/T^15 - 6.6889616090583e+57*(-c_mn*c_va + 3.50877192982456e-12)^25/T^25,if(T > 95.0*c_mn*c_va & 285.0*c_mn*c_va > 0,-330328837.237474*(c_mn*c_va + 1.05263157894737e-11)^5/T^5 - 6.27873260157897e+26*(c_mn*c_va + 1.05263157894737e-11)^15/T^15 - 7.8945491943478e+45*(c_mn*c_va + 1.05263157894737e-11)^25/T^25,0))))*log(-0.66*c_mn*c_va*if(0.66*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (-36732.0*c_fe*c_mn*c - 10184.0*c_fe*c_mn*c_va - 34671.0*c_fe*c*c_va - 52204.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 80000.0) + c_fe*c_va*(if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 4745.0) + c_mn*c*(27.46525*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))))/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '1058 0.0001 0.001'\n[]\n[ff]\n    type = DerivativeParsedMaterial\n    property_name = ff\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va,-1.05647165480942e-46*T^15/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15 - 9.09581551984581e-29*T^9/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^9 - 3.9645187279453e-10*T^3/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^3 + 1 - 0.86033875460538*(689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va + 1.0e-9)/T,if(T < -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va,-7.36273260959473e-54*T^15/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15 - 4.62115303553615e-33*T^9/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^9 - 1.46834026960937e-11*T^3/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^3 + 1 - 0.86033875460538*(-2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va + 1.0e-9)/T,if(T > -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va < 0,-2.64184091899323e+15*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^5/T^5 - 3.21182969926491e+47*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15/T^15 - 2.58302259505429e+80*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^25/T^25,if(T > 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va > 0,-10871773329190.3*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^5/T^5 - 2.23837934085496e+40*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15/T^15 - 3.04857467251016e+68*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^25/T^25,0))))*log((-2.1*c_fe*c - 2.1*c_fe*c_va - 1.86*c_mn*c_va)*if(2.1*c_fe*c + 2.1*c_fe*c_va + 1.86*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(-15.877*T + if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + 77207.0) + c_fe*c_va*if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + c_mn*c*(13.659*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 1519.0,69600.0*1/T - 24.5177*T*log(T) + 131.884*T - 0.006*T^2.0 - 3439.3,2.205113e+30*T^(-9.0) - 2.5984*T + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))) + 2663.31))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c_mn*c*(20082.0 - 11.6312*T) + c_fe*c_mn*c_va*(3.865*T - 7762.0) - 259.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 34671.0*c_fe*c*c_va - 41333.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '1058 0.0001 0.001'\n[]\n\n[free_energy_A]\n    type = DerivativeParsedMaterial\n    property_name = Fa\n    coupled_variables = 'c'\n    expression = '(c-0.1)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n[free_energy_B]\n    type = DerivativeParsedMaterial\n    property_name = Fb\n    coupled_variables = 'c'\n    expression = '(c-0.9)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n\n#[probability1]\n#    # This is a made up toy nucleation rate it should be replaced by\n#    # classical nucleation theory in a real simulation.\n#    type = ParsedMaterial\n#    property_name = P1\n#    coupled_variables = eta0\n#    expression = 'if(eta0 < 0.6, if(eta0 > 0.4, 0.001, 0), 0)'\n#    outputs = exodus\n#[]\n#[probability2]\n#    # This is a made up toy nucleation rate it should be replaced by\n#    # classical nucleation theory in a real simulation.\n#    type = ParsedMaterial\n#    property_name = P2\n#    coupled_variables = eta1\n#    expression = 0#'if(eta1 < 0.6, if(eta1 > 0.4, 0.0000, 0), 0)'\n#    outputs = exodus\n#[]\n# h(eta)\n[h0]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta0\n    function_name = h0\n[]\n[h1]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta1\n    function_name = h1\n[]\n[h2]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta2\n    function_name = h2\n[]\n[h3]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta3\n    function_name = h3\n[]\n[h4]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta4\n    function_name = h4\n[]\n# g(eta)\n[barrier]\n    type = MultiBarrierFunctionMaterial\n    etas = 'eta0 eta1 eta2 eta3 eta4'\n[]\n\n# constant properties\n[constants]\n    type = GenericConstantMaterial\n    prop_names = 'M   L L1  kappa_eta kappa_c'\n    prop_values = '0.1 1 1 0.8 0.8'\n[]\n\n[free_energy]\n    type = DerivativeMultiPhaseMaterial\n    property_name = F\n    fi_names = 'Fb Fb Fb Fb Fa' # free energy from thermodynamic database\n    hi_names = 'h0  h1 h2 h3 h4'\n    etas     = 'eta0 eta1 eta2 eta3 eta4'\n    coupled_variables = 'c'\n    W = 1\n[]\n\n[material_anisotropic]\n    type = InterfaceOrientationMaterial\n    op = eta4\n    reference_angle = 45\n    anisotropy_strength = 0.045\n    eps_bar = 0.4\n    mode_number = 1\n[]\n[]\n\n[Kernels]\n    #[c_force1]\n    #    \n    #    type = DiscreteNucleationForce\n    #    variable = eta3\n    #    map = map1\n    #       \n    #    no_nucleus_value = 0.1\n    #    nucleus_value = 0.9\n    #  \n    #[]\n    #[eta_react1]\n    #    type = Reaction\n    #    variable = eta3\n    #[]\n[c_force2]\n    \n    type = DiscreteNucleationForce\n    variable = eta4\n    map = map1\n       \n    no_nucleus_value = 0\n    nucleus_value = 0.9\n  \n[]\n[eta_react2]\n    type = Reaction\n    variable = eta4\n[]\n[c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n    coupled_variables = 'eta0 eta1 eta2 eta3 eta4'\n[]\n[w_res]\n    type = SplitCHWRes\n    variable = w\n    mob_name = M\n[]\n[time1]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n[]\n\n# Allen Cahn for eta_s\n[deta0dt]\n    type = TimeDerivative\n    variable = eta0\n[]\n[ACBulk0]\n    type = AllenCahn\n    variable = eta0\n    coupled_variables = 'c eta1 eta2 eta3 eta4'\n    f_name = F\n    mob_name = L\n[]\n[ACInterface0]\n    type = ACInterface\n    variable = eta0\n    coupled_variables = 'eta1 eta2 eta3 eta4'\n    kappa_name = kappa_eta\n[]\n[lagrange0]\n    type = SwitchingFunctionConstraintEta\n    variable = eta0\n    h_name   = h0\n    lambda = lambda\n    coupled_variables = 'eta1 eta2 eta3 eta4'\n[]\n\n#\n[deta1dt]\n    type = TimeDerivative\n    variable = eta1\n[]\n[ACBulk1]\n    type = AllenCahn\n    variable = eta1\n    coupled_variables = 'c eta0 eta2 eta3 eta4'\n    f_name = F\n    mob_name = L\n[]\n[ACInterface1]\n    type = ACInterface\n    variable = eta1\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta2 eta3 eta4'\n[]\n[lagrange1]\n    type = SwitchingFunctionConstraintEta\n    variable = eta1\n    h_name   = h1\n    lambda = lambda\n    coupled_variables = 'eta0 eta2 eta3 eta4'\n[]\n\n#\n[deta2dt]\n    type = TimeDerivative\n    variable = eta2\n[]\n[ACBulk2]\n    type = AllenCahn\n    variable = eta2\n    coupled_variables = 'c eta0 eta1 eta3 eta4'\n    f_name = F\n    mob_name = L\n[]\n[ACInterface2]\n    type = ACInterface\n    variable = eta2\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta1 eta3 eta4'\n[]\n[lagrange2]\n    type = SwitchingFunctionConstraintEta\n    variable = eta2\n    h_name   = h2\n    lambda = lambda\n    coupled_variables = 'eta1 eta0 eta3 eta4'\n[]\n\n#\n[deta3dt]\n    type = TimeDerivative\n    variable = eta3\n[]\n[ACBulk3]\n    type = AllenCahn\n    variable = eta3\n    coupled_variables = 'c eta0 eta1 eta2 eta4'\n    f_name = F\n    mob_name = L\n[]\n[ACInterface3]\n    type = ACInterface\n    variable = eta3\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta1 eta2 eta4'\n[]\n[lagrange3]\n    type = SwitchingFunctionConstraintEta\n    variable = eta3\n    h_name   = h3\n    lambda = lambda\n    coupled_variables = 'eta1 eta2 eta0 eta4'\n[]\n\n#\n[deta4dt]\n    type = TimeDerivative\n    variable = eta4\n[]\n[ACBulk4]\n    type = AllenCahn\n    variable = eta4\n    coupled_variables = 'c eta0 eta1 eta2 eta3'\n    f_name = F\n    mob_name = L\n[]\n[ACInterface4]\n    type = ACInterface\n    variable = eta4\n    kappa_name = kappa_eta\n    coupled_variables = 'eta0 eta1 eta2 eta3'\n[]\n#[anisoACinterface1]\n#    type = ACInterfaceKobayashi1\n#    variable = eta4\n#    mob_name = L\n#    coupled_variables = 'eta0 eta1 eta2 eta3'\n#[]\n#[anisoACinterface2]\n#    type = ACInterfaceKobayashi2\n#    variable = eta4\n#    mob_name = L\n#    coupled_variables = 'eta0 eta1 eta2 eta3'\n#[]\n[lagrange4]\n    type = SwitchingFunctionConstraintEta\n    variable = eta4\n    h_name   = h4\n    lambda = lambda\n    coupled_variables = 'eta1 eta2 eta0 eta3'\n[]\n\n[lagrange]\n    type = SwitchingFunctionConstraintLagrange\n    variable = lambda\n    etas    = 'eta0 eta1 eta2 eta3 eta4'\n    h_names = 'h0 h1 h2 h3 h4'\n    epsilon = 1e-6\n[]\n[]\n\n#[Preconditioning]\n#[SMP]\n#    type = SMP\n#    full = true\n#[]\n#[]\n\n[Executioner]\n    type = Transient\n    scheme = 'bdf2'\n\n    solve_type = 'newton'\n\n    l_max_its = 30\n    l_tol = 1.0e-3\n\n    nl_max_its = 30\n    nl_rel_tol = 1.0e-3\n    nl_abs_tol = 1.0e-3\n\n    start_time = 0.0\n    num_steps = 100000\n[TimeStepper]\n    type = IterationAdaptiveDT\n    cutback_factor = 0.1\n    growth_factor = 1.1\n    dt = 0.05\n    optimal_iterations = 8\n[]\n[]\n\n[Debug]\n    # show_var_residual_norms = true\n[]\n\n[Outputs]\n    execute_on = 'timestep_end'\n    exodus = true\n[]\n\n\n  \n    \n    \n\n    output.mov\n    \n  \n\n  \n\n  \n\n\nThank you",
                  "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11093000",
                  "updatedAt": "2024-10-29T21:53:18Z",
                  "publishedAt": "2024-10-29T21:49:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Do you mean the oscillations? Are they physical or numerical?",
                          "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11093142",
                          "updatedAt": "2024-10-29T22:08:14Z",
                          "publishedAt": "2024-10-29T22:08:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "Yes. The newly formed grain is supposed to stay and grow based on the free energy I have supplied. But it seems multiple nucleation are taking place at the same place. I think it is physical because the free energy is generic single well function.",
                          "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11093182",
                          "updatedAt": "2024-10-29T22:11:35Z",
                          "publishedAt": "2024-10-29T22:11:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'd be concerned about numerical instabilities. How converged is this? Does it still appear with a tight convergence criterion?\n@dschwen is the \"multiple nucleation\" scenario a possibility?",
                          "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11093464",
                          "updatedAt": "2024-10-29T23:01:44Z",
                          "publishedAt": "2024-10-29T23:01:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "So in the meantime I did some changes they are\nremap_grains = false\nin GrainTracker\nand commented     #periodic = eta4\nfrom Map1 in the input file.\nThis is what I am getting now\n\n  \n    \n    \n\n    output.mov\n    \n  \n\n  \n\n  \n\n\nBut if I look at the grain boundaries only, I am still not sure if this is correct. you can see the grey region inside newly formed grain.\n\n  \n    \n    \n\n    output1.mov",
                          "url": "https://github.com/idaholab/moose/discussions/28938#discussioncomment-11093500",
                          "updatedAt": "2024-10-29T23:09:26Z",
                          "publishedAt": "2024-10-29T23:09:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "SUBPC_ERROR while using multiphase model",
          "author": {
            "login": "ashishdhole"
          },
          "bodyText": "Hello,\nI am working on phase transformation in steels. I am using multiphase model at the moment because:\na. I will be using thermodynamics database for free energies of each phase and will have multiple grains per phase. Usinf lagrange's multiplier It will be easy for me to keep the sum of order parameter  = 1 at every point. (I tried KKS system, but fr some reason Lagrange multiplier was not working)\nb. I have to introduce elastic field later in my model.\nc. incorporation of discrete nucleation model.\nWith all these requirements I thought multiphase model is good. I made the following input file\n[Mesh]\n    type = GeneratedMesh\n    dim = 2\n    nx = 50\n    ny = 50\n    xmin = 0\n    xmax = 50\n    ymin = 0\n    ymax = 50\n    elem_type = QUAD4\n[]\n\n[GlobalParams]\n    op_num = 2\n    var_name_base = eta\n[]\n\n[Variables]\n    # carbon concentration\n[c]\n    order = FIRST\n    family = LAGRANGE\n[InitialCondition]\n    type = ConstantIC\n    value = 0.1\n[]\n[]\n[w]\n    order = FIRST\n    family = LAGRANGE\n[]\n[eta0]\n    order = FIRST\n    family = LAGRANGE\n[InitialCondition]\n    type = SmoothCircleIC\n    x1 = 25\n    y1 = 25\n    radius = 10\n    invalue = 0.9\n    outvalue = 0.1\n    int_width = 1\n[]\n[]\n[eta1]\n    order = FIRST\n    family = LAGRANGE\n[InitialCondition]\n    type = SmoothCircleIC\n    x1 = 25\n    y1 = 25\n    radius = 10\n    invalue = 0.1\n    outvalue = 0.9\n    int_width = 1\n[]\n[]\n[PolycrystalVariables]\n    order = FIRST\n    family = LAGRANGE\n[]\n\n# Lagrange multiplier\n[lambda]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n[]\n[]\n\n[AuxVariables]\n[bnds]\n[]\n[]\n[AuxKernels]\n[BndsCalc]\n    type = BndsCalcAux\n    variable = bnds\n    execute_on = 'timestep_end'\n[]\n[]\n\n[BCs]\n[Periodic]\n[all]\n    auto_direction = ''\n[]\n[]\n[]\n\n[Materials]\n[fb]\n    type = DerivativeParsedMaterial\n    property_name = fb\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 95.0*c_mn*c_va,-3.76634024154742e-33*T^15/(c_mn*c_va + 1.05263157894737e-11)^15 - 1.23049163062049e-20*T^9/(c_mn*c_va + 1.05263157894737e-11)^9 - 2.03517994308988e-7*T^3/(c_mn*c_va + 1.05263157894737e-11)^3 + 1 - 0.86033875460538*(95.0*c_mn*c_va + 1.0e-9)/T,if(T < -285.0*c_mn*c_va,-2.62482727189424e-40*T^15/(-c_mn*c_va + 3.50877192982456e-12)^15 - 6.25154514362899e-25*T^9/(-c_mn*c_va + 3.50877192982456e-12)^9 - 7.53770349292548e-9*T^3/(-c_mn*c_va + 3.50877192982456e-12)^3 + 1 - 0.86033875460538*(-285.0*c_mn*c_va + 1.0e-9)/T,if(T > -285.0*c_mn*c_va & 285.0*c_mn*c_va < 0,-80269907448.7061*(-c_mn*c_va + 3.50877192982456e-12)^5/T^5 - 9.00929501779248e+33*(-c_mn*c_va + 3.50877192982456e-12)^15/T^15 - 6.6889616090583e+57*(-c_mn*c_va + 3.50877192982456e-12)^25/T^25,if(T > 95.0*c_mn*c_va & 285.0*c_mn*c_va > 0,-330328837.237474*(c_mn*c_va + 1.05263157894737e-11)^5/T^5 - 6.27873260157897e+26*(c_mn*c_va + 1.05263157894737e-11)^15/T^15 - 7.8945491943478e+45*(c_mn*c_va + 1.05263157894737e-11)^25/T^25,0))))*log(-0.66*c_mn*c_va*if(0.66*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (-36732.0*c_fe*c_mn*c - 10184.0*c_fe*c_mn*c_va - 34671.0*c_fe*c*c_va - 52204.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 80000.0) + c_fe*c_va*(if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) + 4745.0) + c_mn*c*(27.46525*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))))/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '900 0.0001 0.01'\n[]\n[ff]\n    type = DerivativeParsedMaterial\n    property_name = ff\n    expression = 'c_fe:=1-c_mn-c; G := 8.3145*T*(1.0*if(c_fe > 1.0e-15,c_fe*log(c_fe),0) + 1.0*if(c_mn > 1.0e-15,c_mn*log(c_mn),0) + 1.0*if(c > 1.0e-15,c*log(c),0) + 1.0*if(c_va > 1.0e-15,c_va*log(c_va),0))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + 8.3145*T*if(T < 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va,-1.05647165480942e-46*T^15/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15 - 9.09581551984581e-29*T^9/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^9 - 3.9645187279453e-10*T^3/(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^3 + 1 - 0.86033875460538*(689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va + 1.0e-9)/T,if(T < -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va,-7.36273260959473e-54*T^15/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15 - 4.62115303553615e-33*T^9/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^9 - 1.46834026960937e-11*T^3/(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^3 + 1 - 0.86033875460538*(-2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va + 1.0e-9)/T,if(T > -2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 2282.0*c_fe*c_mn*c_va - 201.0*c_fe*c - 201.0*c_fe*c_va - 1620.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va < 0,-2.64184091899323e+15*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^5/T^5 - 3.21182969926491e+47*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^15/T^15 - 2.58302259505429e+80*(-0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) - c_fe*c_mn*c_va - 0.0880806310254163*c_fe*c - 0.0880806310254163*c_fe*c_va - 0.709903593339176*c_mn*c_va + 4.38212094653812e-13)^25/T^25,if(T > 689.333333333333*c_fe*c_mn*c_va*(c_fe - c_mn) + 760.666666666667*c_fe*c_mn*c_va + 67.0*c_fe*c + 67.0*c_fe*c_va + 540.0*c_mn*c_va & 2068.0*c_fe*c_mn*c_va*(c_fe - c_mn) + 2282.0*c_fe*c_mn*c_va + 201.0*c_fe*c + 201.0*c_fe*c_va + 1620.0*c_mn*c_va > 0,-10871773329190.3*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^5/T^5 - 2.23837934085496e+40*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^15/T^15 - 3.04857467251016e+68*(0.906222611744084*c_fe*c_mn*c_va*(c_fe - c_mn) + c_fe*c_mn*c_va + 0.0880806310254163*c_fe*c + 0.0880806310254163*c_fe*c_va + 0.709903593339176*c_mn*c_va + 1.31463628396144e-12)^25/T^25,0))))*log((-2.1*c_fe*c - 2.1*c_fe*c_va - 1.86*c_mn*c_va)*if(2.1*c_fe*c + 2.1*c_fe*c_va + 1.86*c_mn*c_va >= 0,-0.333333333333333,1.0) + 1)/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c*(-15.877*T + if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + 77207.0) + c_fe*c_va*if(T < 1811.0,-1.15*T*log(T) + 8.282*T + 0.00064*T^2.0 + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1462.4,4.9251e+30*T^(-9.0) + 0.940009*T + if(T < 50.0,-9.929623*T - 1.975e-6*T^4.0 + 4701.3908,if(T < 170.0,8.75517*T*log(T) - 41.511332*T - 0.13106*T^2.0 + 9.2615e-5*T^3.0 + 4871.6848,if(T < 1811.0,77359.0*1/T - 23.5143*T*log(T) + 124.134*T - 0.00439752*T^2.0 - 5.8927e-8*T^3.0 + 1225.7,2.29603e+31*T^(-9.0) - 46.0*T*log(T) + 299.31255*T - 25383.581))) - 1713.815) + c_mn*c*(13.659*T + if(T < 103.0,-0.09009204*T - 2.75e-5*T^3.0 - 1049.140845,if(T < 350.0,1.76583*T*log(T) - 7.39898691*T - 0.01706952*T^2.0 - 988.25091,12000000000.0*T^(-3.0) - 264300000.0*T^(-2.0) + 2562600.0*1/T - 24.3*T*log(T) + 170.73*T - 0.0004723*T^2.0 - 17368.441)) + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41)))) + c_mn*c_va*if(T < 1519.0,69600.0*1/T - 24.5177*T*log(T) + 131.884*T - 0.006*T^2.0 - 3439.3,2.205113e+30*T^(-9.0) - 2.5984*T + if(T < 36.7,-1.0947477*T - 4.25e-6*T^4.0 - 4901.51892,if(T < 165.0,5.82736*T*log(T) - 20.019344*T - 0.12386*T^2.0 + 8.75e-5*T^3.0 - 4822.7003,if(T < 1519.0,69827.0*1/T - 23.4582*T*log(T) + 130.059*T - 0.00734768*T^2.0 - 8115.28,1.656847e+30*T^(-9.0) - 48.0*T*log(T) + 312.2648*T - 28733.41))) + 2663.31))/(1.0*c_fe + 1.0*c_mn + 1.0*c) + (c_fe*c_mn*c*(20082.0 - 11.6312*T) + c_fe*c_mn*c_va*(3.865*T - 7762.0) - 259.0*c_fe*c_mn*c_va*(c_fe - c_mn) - 34671.0*c_fe*c*c_va - 41333.0*c_mn*c*c_va)/(1.0*c_fe + 1.0*c_mn + 1.0*c); G/100000'\n    coupled_variables = 'c'\n    constant_names = 'T c_mn c_va'\n    constant_expressions = '900 0.0001 0.01'\n[]\n\n[free_energy_A]\n    type = DerivativeParsedMaterial\n    property_name = Fa\n    coupled_variables = 'c'\n    expression = '(c-0.1)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n[free_energy_B]\n    type = DerivativeParsedMaterial\n    property_name = Fb\n    coupled_variables = 'c'\n    expression = '(c-0.9)^2'\n    derivative_order = 2\n    enable_jit = true\n[]\n\n# h(eta)\n[h0]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta0\n    function_name = h0\n[]\n[h1]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta1\n    function_name = h1\n[]\n# g(eta)\n[barrier]\n    type = MultiBarrierFunctionMaterial\n    etas = 'eta0 eta1'\n[]\n\n# constant properties\n[constants]\n    type = GenericConstantMaterial\n    prop_names = 'M   L   kappa_eta kappa_c'\n    prop_values = '0.1 1 1 1'\n[]\n\n[free_energy]\n    type = DerivativeMultiPhaseMaterial\n    property_name = F\n    fi_names = 'fb ff' # free energy from thermodynamic database\n    hi_names = 'h0  h1'\n    etas     = 'eta0 eta1'\n    coupled_variables = 'c'\n    W = 1\n[]\n[]\n\n[Kernels]\n[c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n    coupled_variables = 'eta0 eta1'\n[]\n[w_res]\n    type = SplitCHWRes\n    variable = w\n    mob_name = M\n[]\n[time1]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n[]\n\n# Allen Cahn for eta_s\n[deta0dt]\n    type = TimeDerivative\n    variable = eta0\n[]\n[ACBulk0]\n    type = AllenCahn\n    variable = eta0\n    coupled_variables = 'c eta1'\n    f_name = F\n[]\n[ACInterface0]\n    type = ACInterface\n    variable = eta0\n    kappa_name = kappa_eta\n[]\n[lagrange0]\n    type = SwitchingFunctionConstraintEta\n    variable = eta0\n    h_name   = h0\n    lambda = lambda\n[]\n\n#\n[deta1dt]\n    type = TimeDerivative\n    variable = eta1\n[]\n[ACBulk1]\n    type = AllenCahn\n    variable = eta1\n    coupled_variables = 'c eta0'\n    f_name = F\n[]\n[ACInterface1]\n    type = ACInterface\n    variable = eta1\n    kappa_name = kappa_eta\n[]\n[lagrange1]\n    type = SwitchingFunctionConstraintEta\n    variable = eta1\n    h_name   = h1\n    lambda = lambda\n[]\n\n[lagrange]\n    type = SwitchingFunctionConstraintLagrange\n    variable = lambda\n    etas    = 'eta0 eta1'\n    h_names = 'h0   h1'\n    epsilon = 0\n[]\n[]\n\n[Preconditioning]\n[SMP]\n    type = SMP\n    full = true\n[]\n[]\n\n[Executioner]\n    type = Transient\n    scheme = 'bdf2'\n\n    solve_type = 'NEWTON'      \n    line_search = none\n\n    l_max_its = 15\n    l_tol = 1.0e-6\n\n    nl_max_its = 50\n    nl_rel_tol = 1.0e-8\n    nl_abs_tol = 1.0e-10\n\n    start_time = 0.0\n    num_steps = 1000\n    dt = 0.1\n    #dtmin = 0.01\n[]\n\n[Debug]\n    # show_var_residual_norms = true\n[]\n\n[Outputs]\n    execute_on = 'timestep_end'\n    exodus = true\n[]\n\nMy simulation runs only for some time. and reach an error\nTime Step 31, time = 3.1, dt = 0.1\n 0 Nonlinear |R| = 1.111361e+00\n      0 Linear |R| = 1.111361e+00\n      1 Linear |R| = 6.090967e-02\n      2 Linear |R| = 3.624371e-03\n      3 Linear |R| = 5.666513e-04\n      4 Linear |R| = 9.757378e-05\n      5 Linear |R| = 2.279333e-05\n      6 Linear |R| = 6.711429e-06\n      7 Linear |R| = 1.893094e-06\n      8 Linear |R| = 6.346924e-07\n 1 Nonlinear |R| = 9.296200e-03\n      0 Linear |R| = 9.296200e-03\n      1 Linear |R| = 4.807362e-04\n      2 Linear |R| = 4.283650e-05\n      3 Linear |R| = 6.014787e-06\n      4 Linear |R| = 6.285949e-07\n      5 Linear |R| = 1.301810e-07\n      6 Linear |R| = 2.560505e-08\n      7 Linear |R| = 6.969041e-09\n 2 Nonlinear |R| = 9.270756e-05\n      0 Linear |R| = 9.270756e-05\n      1 Linear |R| = 5.288269e-06\n      2 Linear |R| = 4.785061e-07\n      3 Linear |R| = 8.712457e-08\n      4 Linear |R| = 8.980206e-09\n      5 Linear |R| = 1.801790e-09\n      6 Linear |R| = 3.482315e-10\n      7 Linear |R| = 9.738035e-11\n      8 Linear |R| = 3.046745e-11\n 3 Nonlinear |R| = 8.602855e-07\n      0 Linear |R| = 8.602855e-07\n      1 Linear |R| = 4.493172e-08\n      2 Linear |R| = 4.348744e-09\n      3 Linear |R| = 1.175112e-09\n      4 Linear |R| = 4.701996e-10\n      5 Linear |R| = 1.917130e-10\n      6 Linear |R| = 5.935528e-11\n      7 Linear |R| = 1.765063e-11\n      8 Linear |R| = 4.577082e-12\n      9 Linear |R| = 1.715771e-12\n     10 Linear |R| = 3.829734e-13\n 4 Nonlinear |R| = 8.633468e-09\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  eta0: 6.104782e-09\n  eta1: 6.104786e-09\n\nTime Step 32, time = 3.2, dt = 0.1\n 0 Nonlinear |R| = 1.110754e+00\n      0 Linear |R| = 1.110754e+00\n      1 Linear |R| = 6.094338e-02\n      2 Linear |R| = 3.626445e-03\n      3 Linear |R| = 5.685494e-04\n      4 Linear |R| = 9.735900e-05\n      5 Linear |R| = 2.273736e-05\n      6 Linear |R| = 6.687574e-06\n      7 Linear |R| = 1.884154e-06\n      8 Linear |R| = 6.317986e-07\n 1 Nonlinear |R| = 9.294519e-03\n    Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                   PC failed due to SUBPC_ERROR \n  Nonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 1\n Solve Did NOT Converge!\nAborting as solve did not converge\n\nTime Step 32, time = 3.15, dt = 0.05\n 0 Nonlinear |R| = 9.873180e-01\n\n\n\nat this line the simulation stops.\nAm I doing anything wrong?\nThank you\nAshish",
          "url": "https://github.com/idaholab/moose/discussions/28937",
          "updatedAt": "2024-10-30T00:47:35Z",
          "publishedAt": "2024-10-25T23:24:11Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nLet's see if a more robust PC can pass this point in the simulation.\nUse -pc_type LU with a nonzero -pc_factor_shift_type.\nAlso output all the material properties. If one of them evaluates to NaN anywhere on the mesh, that would take out the subPC",
                  "url": "https://github.com/idaholab/moose/discussions/28937#discussioncomment-11082039",
                  "updatedAt": "2024-10-29T03:17:48Z",
                  "publishedAt": "2024-10-29T03:17:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ashishdhole"
                          },
                          "bodyText": "This issue was solved by changing the initial condition of lambda in\n[lambda]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n[]\n[]\n\nI used initial_condition = 1e-6\nand later the\n[lagrange]\n    type = SwitchingFunctionConstraintLagrange\n    variable = lambda\n    etas    = 'eta0 eta1'\n    h_names = 'h0   h1'\n    epsilon = 0\n[]\n\nepsilon = 1e-9\nThank you",
                          "url": "https://github.com/idaholab/moose/discussions/28937#discussioncomment-11090995",
                          "updatedAt": "2024-10-29T18:16:27Z",
                          "publishedAt": "2024-10-29T18:16:26Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}