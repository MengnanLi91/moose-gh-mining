{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNy0xNlQxMzoyNTo0NS0wNTowMM4AUQTD"
    },
    "edges": [
      {
        "node": {
          "title": "Show App version when run simulation",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI have a question regarding showing App version when run simulation.\nSo when we run moose simulation we will have these lines showing the version of MOOSE, right?\n\nBUT I want to show my app version instead of MOOSE version, is this even possible?\n\n\nas you can see they are different\nPlease let me know if this is possible, if so how to do it? thank you!\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/24983",
          "updatedAt": "2023-07-18T03:40:25Z",
          "publishedAt": "2023-07-18T01:13:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIn your header() routine (if it exists yet) in your MooseBehApp.C file you can add something like:\n  ss << std::setw(25) << \"MooseBehApp version: \" << MOOSEBEH_REVISION << \"\\n\";\n\nthis variable is defined in the ./include/base/MooseBehRevision.h as you saw already\nIf you dont like how it displays I would recommend overriding the MOOSE header (if that s possible, not sure we allow it)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473043",
                  "updatedAt": "2023-07-18T01:21:41Z",
                  "publishedAt": "2023-07-18T01:21:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud,\nI thought this would be an easy fix, but apparently it's not.\nFirst of all I didnt have a header() routine yet, so here is what I did:\nhere is my moose_behApp.h\n#pragma once\n#pragma once\n\n#include \"MooseApp.h\"\n#include \"MooseBehRevision.h\"\n\nclass moose_behApp : public MooseApp\n{\npublic:\n  static InputParameters validParams();\n\n  moose_behApp(InputParameters parameters);\n  virtual ~moose_behApp();\n\n\n\n  virtual std::string header() const;\n  \n  static void registerApps();\n  static void registerAll(Factory & f, ActionFactory & af, Syntax & s);\n  // static void registerAllObjects(Factory & f, ActionFactory & af, Syntax & s);\n};\n\nHere is my  header() routine in moose_behApp.C\nstd::string\nmoose_behApp::header() const\n{\n  std::ostringstream ss;\n  ss << std::setw(25) << \"MooseBehApp version: \" << MOOSEBEH_REVISION << \"\\n\";\n  return ss.str();\n}\n\nit still doesn't print anything\ndid I do something wrong?\nThanks!\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473272",
                          "updatedAt": "2023-07-18T02:06:01Z",
                          "publishedAt": "2023-07-18T02:06:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this should be it though.\nIf you look in MooseApp.C you can see the call to header() which you should be overriding\ncan you add override to your function declaration in your moose-behapp.h to make sure it s properly overriding",
                          "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473366",
                          "updatedAt": "2023-07-18T02:22:46Z",
                          "publishedAt": "2023-07-18T02:22:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "virtual std::string header() const override;",
                          "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473371",
                          "updatedAt": "2023-07-18T02:23:14Z",
                          "publishedAt": "2023-07-18T02:23:13Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Awesome @GiudGiud, I got it, though it looks a bit weird\n\nThank you!",
                          "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473716",
                          "updatedAt": "2023-07-18T03:35:14Z",
                          "publishedAt": "2023-07-18T03:35:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ah this isnt great.\nMaybe just override the MOOSE routine that prints the  whole header (setupOptions) and pick what you want to print\nIt s not good practice (if it ends up being a big copy-paste from MOOSE) but it should look as you wish",
                          "url": "https://github.com/idaholab/moose/discussions/24983#discussioncomment-6473735",
                          "updatedAt": "2023-07-18T03:41:05Z",
                          "publishedAt": "2023-07-18T03:40:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to write my own kernel about surface tension term",
          "author": {
            "login": "Wolke926"
          },
          "bodyText": "Hi all,\nI am a new MOOSE user and trying to compile my own kernel, I have already gone through the examples on the MOOSE tutorial homepage but am still confused about the source code.\nThe exact problem I want to solve is similar to @liang-tech so I am trying to understand the code here:\nhttps://github.com/idaholab/moose/discussions/23382\nThe key point in his reference paper doi:10.1103/PhysRevE.106.015111 is the surface tension part in Navier-stokes equation combined with Cahn Hilliard equation, fr = psi * grad phi (psi is the chemical potential and phi denotes the phase)\nSome questions from my side are listed:\n\n\nwhen should we calculate qp Jacobian? Why in the following example there are only \"compute QP residual\"?\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/step03_moose_object.html\n\n\nwhat is off-diagonal Jacobian and when do we need to calculate it? Based on the link above, there is no off-diagonal Jacobian. Is there any introduction about what these variables (such as jvar, jac) mean?\n\n\nhow do we decide which kind of other base objects to heritage? Because in the tutorial, it shows \" ADDiffusion : public ADKernelGrad\" and I can only find these examples.\n\n\n\nthanks for your help!",
          "url": "https://github.com/idaholab/moose/discussions/24976",
          "updatedAt": "2023-07-19T15:47:33Z",
          "publishedAt": "2023-07-17T19:25:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "when should we calculate qp Jacobian? Why in the following example there are only \"compute QP residual\"?\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/step03_moose_object.html\n\n\nIn that example, the Jacobian is computed automatically using automatic differentiation (AD). If you use AD then you do not need to hand-code a Jacobian.\n\n\nwhat is off-diagonal Jacobian and when do we need to calculate it? Based on the link above, there is no off-diagonal Jacobian. Is there any introduction about what these variables (such as jvar, jac) mean?\n\n\nWith AD no Jacobian routines are necessary. I would recommend starting with AD and then once you are modeling your physics successfully you can worry about optimizing code speed and hand-coding your Jacobians.\n\n\nhow do we decide which kind of other base objects to heritage? Because in the tutorial, it shows \" ADDiffusion : public ADKernelGrad\" and I can only find these examples.\n\n\nIf the weak form of your term only involves the test function and not its gradient, then you can use ADKernelValue. If you only use the test function gradient and not its value, then you use ADKernelGrad.  If it uses both gradient and value, then you use ADKernel.",
                  "url": "https://github.com/idaholab/moose/discussions/24976#discussioncomment-6471945",
                  "updatedAt": "2023-07-17T21:28:20Z",
                  "publishedAt": "2023-07-17T21:28:19Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Need parent dir for computeJacobian under phase_field",
          "author": {
            "login": "Dadakskn"
          },
          "bodyText": "hi,\nI am currently working on implementing the Multi-scale Finite Volume (MsFV) method into the MOOSE framework. As part of this implementation, I require the parent directory for the computeJacobian method, which is responsible for generating a Jacobian matrix within the phase_field module. However, I have been unable to locate the specific directory, and I would greatly appreciate your assistance in this matter.\nThank you very much for your help.",
          "url": "https://github.com/idaholab/moose/discussions/24977",
          "updatedAt": "2023-07-17T21:18:16Z",
          "publishedAt": "2023-07-17T19:39:14Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nEvery kernel and BC should have its own computeJacobian routine\nThe ones that do not usually leverage automatic differentiation, which is able to compute derivatives in computeResidual calls\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24977#discussioncomment-6471884",
                  "updatedAt": "2023-07-17T21:18:17Z",
                  "publishedAt": "2023-07-17T21:18:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "convergence problems",
          "author": {
            "login": "asgauthier"
          },
          "bodyText": "Hello everyone,\nI'm asking you for help because I did a 3D model with faults and a HydroThermoMechanical coupling with PorousFlowFullySaturated in my input file but I do not manage to make it converge. I don't know if it is a problem of scaling, or the mesh, or the parameters so if you have any idea tell me :D Here is the link to the mesh file https://we.tl/t-DSWRd63Jks\n`[Mesh]\n[basic_mesh]\ntype = FileMeshGenerator\nfile=Mol_Mesh3.e\n[ ]\n[renamed_mesh]\ntype = RenameBlockGenerator\ninput = basic_mesh\nold_block = '0 1 2 3'\nnew_block = 'matrix Ber Des Ret'\n[]\n[finalMesh]\ntype = RenameBoundaryGenerator\ninput = renamed_mesh\nold_boundary = '1 2 3 4 5 6 7 8 9'\nnew_boundary = 'bottom top Ber Des Ret front left back right'\n[]\n[ ]\n[GlobalParams]#Every parameter in the block will be inserted into every block/sub-block where that parameter name is defined\nPorousFlowDictator = dictator\ndisplacements = 'disp_x disp_y disp_z'\nbiot_coefficient=0.85\n[ ]\n[Variables]#define the unknowns within a system of partial differential equations\n[porepressure]\ninitial_condition=38.3E6\n[ ]\n[temperature]\ninitial_condition=401.15\nscaling=1E-6\n[]\n[disp_x]\nscaling=1E-10\n[ ]\n[disp_y]\nscaling=1E-10\n[ ]\n[disp_z]\nscaling=1E-10\n[ ]\n[ ]\n[BCs]\n[porepressure]\ntype = DirichletBC #Imposes the essential boundary condition u=g\nvalue = 38.3E6 #pression initiale du fluide en Pascal\nvariable = porepressure\nboundary = 'right left top bottom back front'\n[ ]\n[temperature]\ntype = DirichletBC\nvariable = temperature\nvalue = 401.15\nboundary = 'right left top bottom back front'\n[]\n[stress_x_right]\ntype = NeumannBC #Imposes the integrated boundary condition du/dn=h\nvalue = -55.75E6 #pourquoi ??\nvariable = disp_x\nboundary = right\n[ ]\n[stress_x_left]\ntype = NeumannBC\nvalue = 55.75E6\nvariable = disp_x\nboundary = left\n[ ]\n[stress_y_back]\ntype = NeumannBC\nvalue = -55.75E6\nvariable = disp_y\nboundary = back\n[ ]\n[stress_y_front]\ntype = NeumannBC\nvalue = 55.75E6\nvariable = disp_y\nboundary = front\n[ ]\n[stress_z_top]\ntype = NeumannBC\nvalue = -55.75E6\nvariable = disp_z\nboundary = top\n[ ]\n[stress_z_bottom]\ntype = NeumannBC\nvalue = 55.75E6\nvariable = disp_z\nboundary = bottom\n[ ]\n[ ]\n[PorousFlowFullySaturated]\nporepressure = porepressure\ntemperature = temperature\ncoupling_type = ThermoHydroMechanical\ngravity = '0 0 0'\nfp = the_simple_fluid\nstabilization=KT\neigenstrain_names = 'thermal_contribution ini_stress'\nadd_stress_aux=true\nuse_displaced_mesh = false\n[]\n[DiracKernels]\n[fluid_injection]\ntype = PorousFlowPointSourceFromPostprocessor\npoint = '202340 213597 -3126.2'\nmass_flux = 18.05\nvariable = porepressure\n[]\n[source_h]\ntype = PorousFlowPointEnthalpySourceFromPostprocessor\nvariable = temperature\nmass_flux = 18.05\npoint = '202340 213597 -3126.2'\nT_in = 333.15\npressure = porepressure\nfp = the_simple_fluid\n[]\n[fluid_production]\ntype = PorousFlowPointSourceFromPostprocessor\npoint = '202340 212731 -3168.34'\nmass_flux = -18.05\nvariable = porepressure\n[]\n[]\n[FluidProperties]\n[the_simple_fluid]#Fluid properties for a simple fluid with a constant bulk density\ntype = SimpleFluidProperties\nbulk_modulus = 2E9\nviscosity = 1.0E-3\ndensity0 = 1000.0\nthermal_expansion = 0.0002\ncp = 4194\ncv = 4186\nporepressure_coefficient = 0\n[ ]\n[ ]\n[Materials]\n[porosity_reservoir]\ntype = PorousFlowPorosity\nporosity_zero = 0.024\nmechanical = false\nfluid = true\nreference_porepressure = 38.3E6\nsolid_bulk = 15E9\nblock='matrix'\n[ ]\n[porosity_faults]\ntype = PorousFlowPorosityConst\nporosity=1\nblock='Ber Des Ret'\n[ ]\n[permeability_reservoir]\ntype = PorousFlowPermeabilityKozenyCarman #calculates the permeability tensor\nporoperm_function = kozeny_carman_phi0\nk0 = 1.5E-12\nm = 2 #(1-porosity) exponent\nn = 3 #Porosity exponent\nphi0 = 0.024\nblock='matrix'\n[ ]\n[permeability_faults]\ntype = PorousFlowPermeabilityConst\npermeability='1E-14 0 0 0 1E-14 0 0 0 1E-14'\nblock='Ber Des Ret'\n[ ]\n[rock_internal_energy_rock]\ntype = PorousFlowMatrixInternalEnergy\ndensity = 2700.0\nspecific_heat_capacity = 1200.0\nblock='matrix'\n[]\n[rock_internal_energy_fault]\ntype = PorousFlowMatrixInternalEnergy\ndensity = 2700.0\nspecific_heat_capacity = 0\nblock='Ber Des Ret'\n[]\n[thermal_conductivity]\ntype = PorousFlowThermalConductivityIdeal\ndry_thermal_conductivity = '2.6 0 0  0 2.6 0  0 0 2.6'\n[]\n[elasticity_tensor]\ntype = ComputeIsotropicElasticityTensor\nbulk_modulus = 15E9\npoissons_ratio = 0.281\n[]\n[strain]\ntype = ComputeSmallStrain\ndisplacements = 'disp_x disp_y disp_z'\neigenstrain_names ='thermal_contribution ini_stress'\n[ ]\n[thermal_contribution]\ntype = ComputeThermalExpansionEigenstrain\ntemperature = temperature\nthermal_expansion_coeff = 10E-5 # this is the linear thermal expansion coefficient\neigenstrain_name = thermal_contribution\nstress_free_temperature = 401.15\n[]\n[stress]\ntype = ComputeLinearElasticStress\n[ ]\n[ini_stress]\ntype = ComputeEigenstrainFromInitialStress\ninitial_stress = ' -55.75E6 0 0 0 -55.75E6 0 0 0 -77.7E6'\neigenstrain_name = ini_stress\n[ ]\n[ ]\n[Postprocessors]#object that computes a single scalar\n[runtime]\ntype = PerfGraphData\ndata_type = TOTAL\nsection_name = 'Root'\n[ ]\n    [porepressure]\n        type = PointValue\n        point = '203457 214307 -3531.87'\n        variable = porepressure\n    [ ]\n    [temperature]\n        type = PointValue\n        point = '203457 214307 -3531.87'\n        variable = temperature\n    [ ]\n\n[ ]\n[Preconditioning]#to define which type of preconditioning matrix to build and what process to apply\nactive = basic\n[basic]\ntype = SMP#Single matrix preconditioner (SMP) builds a preconditioner using user defined off-diagonal parts of the Jacobian\nfull = true\n[ ]\n[ ]\n[Executioner]\ntype = Transient #Executioner for time varying simulations\nsolve_type = Newton\nnl_abs_tol = 1E-3\nend_time = 50\n[TimeStepper]\ntype = TimeSequenceStepper\ntime_sequence = '0 10 20 30 40 50'\n[ ]\nsteady_state_detection = true\n[ ]\n[Outputs]\nperf_graph = true\nexodus = true\ncsv = true\n[ ]`",
          "url": "https://github.com/idaholab/moose/discussions/24967",
          "updatedAt": "2023-07-17T17:22:15Z",
          "publishedAt": "2023-07-14T16:53:54Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyour nonlinear tolerance is likely too loose for starters. You could turn on automatic_scaling in the executioner to get a more fair convergence criterion.\nThen two things: you ll only want to use Newton s method if your Jacobian has been coded 100% correctly. You can check that using the analyze_jacobian utility or by checking if a finite different preconditioner makes a difference.\nThen you ll want to work on preconditioning. You are getting the default right now. If you can afford it you could try a direct solve with LU preconditioning.\nAll this advice and much more is summarized on the \u00ab\u00a0troubleshooting failed solve\u00a0\u00bb page on the website\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24967#discussioncomment-6461889",
                  "updatedAt": "2023-07-16T19:06:49Z",
                  "publishedAt": "2023-07-16T19:06:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "The Jacobian should be ok, but I agree the tolerance should be tighter.\nAs a guess, I would be almost certain that your BC's on displacements are the issue. Could you replace them with roller BC's to test - so DirichletBC's with value = 0 for each displacement?",
                          "url": "https://github.com/idaholab/moose/discussions/24967#discussioncomment-6463095",
                          "updatedAt": "2023-07-17T00:58:57Z",
                          "publishedAt": "2023-07-17T00:58:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "asgauthier"
                          },
                          "bodyText": "This converges better with Dirichlet indeed :D Is there a better way to impose the initial stress state of the rock ?",
                          "url": "https://github.com/idaholab/moose/discussions/24967#discussioncomment-6470174",
                          "updatedAt": "2023-07-17T17:22:16Z",
                          "publishedAt": "2023-07-17T17:22:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Thermal conductivity file",
          "author": {
            "login": "nourriahi"
          },
          "bodyText": "Hello Everyone,\nI am trying lately to define one of my variables in the heat conduction equation which is the thermal conductivity as it looks in the graph below:\n\nI have already defined this variable using a csv file (packed column) and it works, the problem for me is that I want to have a csv file which include data as in the graph, to my knowledge this is impossible as I am defining two outputs for the same input (two thermal conductivity values for one temperature), I thought  about using timeperiods to control this but I think it is not accurate as different regions will have different temperatures and the thermal conductivity values will not be the correct ones for the different regions.\nAny suggestions regarding this to be able to define thermal conductivity as in the graph?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/24973",
          "updatedAt": "2023-07-17T14:39:49Z",
          "publishedAt": "2023-07-17T10:57:47Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDo you have a variable for the phase fraction?\nI think you could blend two thermal conductivities (from two CSV files for example). You just need some variable to decide the mix of each\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24973#discussioncomment-6468628",
                  "updatedAt": "2023-07-17T14:39:50Z",
                  "publishedAt": "2023-07-17T14:39:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to Apply Shear Force at Boundary",
          "author": {
            "login": "FanZhangchen"
          },
          "bodyText": "Hi,\nI have an elastoplastic model with a shear force boundary condition. But I am not sure which boundary types I should use for the tensor mechanics problem. I have tried Pressure and it doesn't work in my model. Could you give me some suggestions about which boundary types I could use to apply shear force at the boundary?\nBest,\nzc",
          "url": "https://github.com/idaholab/moose/discussions/24946",
          "updatedAt": "2023-07-17T14:38:35Z",
          "publishedAt": "2023-07-11T08:30:27Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I think this has come up before\nIs it similar to this?\n#24726",
                  "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6420185",
                  "updatedAt": "2023-07-11T20:07:59Z",
                  "publishedAt": "2023-07-11T20:07:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "For Pressure under the tensor_mechanics module, I copied this file to the bcs and modified the name of it. The only modification for the header file and the c file is that I changed the Pressure to MyShear, and I got this error after compiling\nexplicit instantiation of non-template type.\nDo you know how to solve this class template problem?",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6449041",
                          "updatedAt": "2023-07-14T11:43:40Z",
                          "publishedAt": "2023-07-14T11:43:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you paste the source and header? I can guess right now but it d be easier to say which line",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6449470",
                          "updatedAt": "2023-07-14T12:38:20Z",
                          "publishedAt": "2023-07-14T12:38:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Here is the source.\n\n#include \"MyShear.h\"\n\n#include \"Assembly.h\"\n#include \"Function.h\"\n#include \"MooseError.h\"\n\nregisterMooseObject(\"TensorMechanicsApp\", MyShear);\nregisterMooseObject(\"TensorMechanicsApp\", ADMyShear);\n\ntemplate <bool is_ad>\nInputParameters\nMyShearTempl<is_ad>::validParams()\n{\n  InputParameters params = MyShearParent<is_ad>::validParams();\n  params.addClassDescription(\"Applies a MyShear on a given boundary in a given direction\");\n  params.addDeprecatedParam<unsigned int>(\n      \"component\", \"The component for the MyShear\", \"This parameter is no longer necessary\");\n  params.addRequiredCoupledVar(\"displacements\",\n                               \"The string of displacements suitable for the problem statement\");\n  params.addDeprecatedParam<Real>(\"constant\",\n                                  \"The magnitude to use in computing the MyShear\",\n                                  \"Use 'factor' in place of 'constant'\");\n  params.addParam<Real>(\"factor\", 1.0, \"The magnitude to use in computing the MyShear\");\n  params.addParam<FunctionName>(\"function\", \"The function that describes the MyShear\");\n  params.addParam<PostprocessorName>(\"postprocessor\",\n                                     \"Postprocessor that will supply the MyShear value\");\n  params.addParam<Real>(\"alpha\", 0.0, \"alpha parameter required for HHT time integration scheme\");\n  params.set<bool>(\"use_displaced_mesh\") = true;\n  return params;\n}\n\ntemplate <bool is_ad>\nMyShearTempl<is_ad>::MyShearTempl(const InputParameters & parameters)\n  : MyShearParent<is_ad>(parameters),\n    _component(libMesh::invalid_uint),\n    _ndisp(this->coupledComponents(\"displacements\")),\n    _factor(parameters.isParamSetByUser(\"factor\")     ? this->template getParam<Real>(\"factor\")\n            : parameters.isParamSetByUser(\"constant\") ? this->template getParam<Real>(\"constant\")\n                                                      : 1.0),\n    _function(this->isParamValid(\"function\") ? &this->getFunction(\"function\") : NULL),\n    _postprocessor(\n        this->isParamValid(\"postprocessor\") ? &this->getPostprocessorValue(\"postprocessor\") : NULL),\n    _alpha(this->template getParam<Real>(\"alpha\")),\n    _fe_side(_assembly.getFEFace(_var.feType(), _sys.mesh().dimension())),\n    _q_dxi(nullptr),\n    _q_deta(nullptr),\n    _phi_dxi(nullptr),\n    _phi_deta(nullptr),\n    _use_displaced_mesh(this->template getParam<bool>(\"use_displaced_mesh\")),\n    _fe(libMesh::n_threads())\n{\n  if (parameters.isParamSetByUser(\"factor\") && parameters.isParamSetByUser(\"constant\"))\n    mooseError(\"Error in \" + _name + \". Cannot set 'factor' and 'constant'.\");\n\n  for (unsigned int i = 0; i < _ndisp; ++i)\n  {\n    _disp_var.push_back(this->coupled(\"displacements\", i));\n    if (_var.number() == _disp_var[i])\n    {\n      _component = i;\n      if (parameters.isParamSetByUser(\"component\") &&\n          _component != this->template getParam<unsigned int>(\"component\"))\n        mooseError(\"Incompatibility between component and displacements in \" + _name);\n    }\n  }\n  if (_component == libMesh::invalid_uint)\n    mooseError(\"Problem with displacements in \" + _name);\n}\n\ntemplate <bool is_ad>\nvoid\nMyShearTempl<is_ad>::initialSetup()\n{\n  auto boundary_ids = this->boundaryIDs();\n  std::set<SubdomainID> block_ids;\n  for (auto bndry_id : boundary_ids)\n  {\n    auto bids = _mesh.getBoundaryConnectedBlocks(bndry_id);\n    block_ids.insert(bids.begin(), bids.end());\n  }\n\n  _coord_type = _fe_problem.getCoordSystem(*block_ids.begin());\n  for (auto blk_id : block_ids)\n  {\n    if (_coord_type != _fe_problem.getCoordSystem(blk_id))\n      mooseError(\"The MyShear BC requires subdomains to have the same coordinate system.\");\n  }\n}\n\ntemplate <bool is_ad>\nGenericReal<is_ad>\nMyShearTempl<is_ad>::computeQpResidual()\n{\n  return computeFactor() * (_normals[_qp](_component) * _test[_i][_qp]);\n}\n\ntemplate <bool is_ad>\nGenericReal<is_ad>\nMyShearTempl<is_ad>::computeFactor() const\n{\n  GenericReal<is_ad> factor = _factor;\n\n  if (_function)\n    factor *= _function->value(_t + _alpha * _dt, _q_point[_qp]);\n\n  if (_postprocessor)\n    factor *= *_postprocessor;\n\n  return factor;\n}\n\nReal\nMyShear::computeFaceStiffness(const unsigned int local_j, const unsigned int coupled_component)\n{\n  //\n  // Note that this approach will break down for shell elements, i.e.,\n  //   topologically 2D elements in 3D space with MyShear loads on\n  //   the faces.\n  //\n  const Real phi_dxi = (*_phi_dxi)[local_j][_qp];\n  const Real phi_deta = _phi_deta ? (*_phi_deta)[local_j][_qp] : 0;\n\n  const RealGradient & dqdxi = (*_q_dxi)[_qp];\n  const RealGradient out_of_plane(0, 0, 1);\n  const RealGradient & dqdeta = _q_deta ? (*_q_deta)[_qp] : out_of_plane;\n  // Here, b is dqdxi (cross) dqdeta\n  // Then, normal is b/length(b)\n  RealGradient b(dqdxi(1) * dqdeta(2) - dqdxi(2) * dqdeta(1),\n                 dqdxi(2) * dqdeta(0) - dqdxi(0) * dqdeta(2),\n                 dqdxi(0) * dqdeta(1) - dqdxi(1) * dqdeta(0));\n  const Real inv_length = 1 / (b * _normals[_qp]);\n\n  const unsigned int i = _component;\n  const unsigned int j = coupled_component;\n\n  // const int posneg[3][3] = {{0, -1, 1}, {1, 0, -1}, {-1, 1, 0}};\n  const int posneg = 1 - (j + (2 - (i + 1) % 3)) % 3;\n\n  // const unsigned int index[3][3] = {{0, 2, 1}, {2, 1, 0}, {1, 0, 2}};\n  const unsigned int index = 2 - (j + (i + 2) % 3) % 3;\n\n  const Real variation_b = posneg * (phi_deta * dqdxi(index) - phi_dxi * dqdeta(index));\n\n  Real rz_term = 0;\n  if (_coord_type == Moose::COORD_RZ && j == _subproblem.getAxisymmetricRadialCoord())\n  {\n    rz_term = _normals[_qp](i) * _phi[_j][_qp] / _q_point[_qp](0);\n  }\n\n  return computeFactor() * _test[_i][_qp] * (inv_length * variation_b + rz_term);\n}\n\nReal\nMyShear::computeStiffness(const unsigned int coupled_component)\n{\n  if (_ndisp > 1)\n  {\n    const std::map<unsigned int, unsigned int>::iterator j_it = _node_map.find(_j);\n    if (_test[_i][_qp] == 0 || j_it == _node_map.end())\n      return 0;\n\n    return computeFaceStiffness(j_it->second, coupled_component);\n  }\n\n  else if (_coord_type == Moose::COORD_RSPHERICAL)\n  {\n    return computeFactor() * _normals[_qp](_component) * _test[_i][_qp] * _phi[_j][_qp] *\n           (2 / _q_point[_qp](0));\n  }\n\n  if (_coord_type == Moose::COORD_RZ)\n  {\n    return computeFactor() * _normals[_qp](_component) * _test[_i][_qp] * _phi[_j][_qp] /\n           _q_point[_qp](0);\n  }\n\n  return 0;\n}\n\nReal\nMyShear::computeQpJacobian()\n{\n  if (_use_displaced_mesh)\n    return computeStiffness(_component);\n\n  return 0;\n}\n\nReal\nMyShear::computeQpOffDiagJacobian(const unsigned int jvar_num)\n{\n  if (_use_displaced_mesh)\n    for (unsigned int j = 0; j < _ndisp; ++j)\n      if (jvar_num == _disp_var[j])\n        return computeStiffness(j);\n\n  return 0;\n}\n\nvoid\nMyShear::precalculateQpJacobian()\n{\n  if (_ndisp == 1)\n    return;\n\n  if (_fe[_tid] == nullptr)\n  {\n    const unsigned int dim = _sys.mesh().dimension() - 1;\n    QBase * const & qrule = _assembly.writeableQRuleFace();\n    _fe[_tid] = FEBase::build(dim, _var.feType());\n    _fe[_tid]->attach_quadrature_rule(qrule);\n  }\n\n  _q_dxi = &_fe[_tid]->get_dxyzdxi();\n  _phi_dxi = &_fe[_tid]->get_dphidxi();\n  if (_coord_type == Moose::COORD_XYZ)\n  {\n    _q_deta = &_fe[_tid]->get_dxyzdeta();\n    _phi_deta = &_fe[_tid]->get_dphideta();\n  }\n\n  _fe[_tid]->reinit(_current_side_elem);\n\n  if (_coord_type == Moose::COORD_XYZ)\n  {\n    if (_q_deta->empty())\n      _q_deta = nullptr;\n    if (_phi_deta->empty())\n      _phi_deta = nullptr;\n  }\n\n  // Compute node map (given elem node, supply face node)\n  _node_map.clear();\n  const unsigned int num_node_elem = _current_elem->n_nodes();\n  const Node * const * elem_nodes = _current_elem->get_nodes();\n  const unsigned int num_node_face = _current_side_elem->n_nodes();\n  const Node * const * face_nodes = _current_side_elem->get_nodes();\n  unsigned int num_found = 0;\n  for (unsigned i = 0; i < num_node_elem; ++i)\n  {\n    for (unsigned j = 0; j < num_node_face; ++j)\n      if (**(elem_nodes + i) == **(face_nodes + j))\n      {\n        _node_map[i] = j;\n        ++num_found;\n        break;\n      }\n    if (num_found == num_node_face)\n      break;\n  }\n}\n\nvoid\nMyShear::precalculateQpOffDiagJacobian(const MooseVariableFEBase & /*jvar*/)\n{\n  precalculateQpJacobian();\n}\n\ntemplate class MyShearTempl<false>;\ntemplate class MyShearTempl<true>;\n\n\nAnd here is the header file\n#pragma once\n\n#include \"ADIntegratedBC.h\"\n#include \"IntegratedBC.h\"\n#include \"MooseTypes.h\"\n\n#include \"MooseTypes.h\"\n#include \"libmesh/quadrature_gauss.h\"\n\nclass Function;\n\n/**\n * Pressure applies a pressure on a given boundary in the direction defined by component\n */\n\ntemplate <bool is_ad>\nusing PressureParent = typename std::conditional<is_ad, ADIntegratedBC, IntegratedBC>::type;\n\ntemplate <bool is_ad>\nclass PressureTempl : public PressureParent<is_ad>\n{\npublic:\n  static InputParameters validParams();\n\n  PressureTempl(const InputParameters & parameters);\n\nprotected:\n  virtual void initialSetup() override;\n  virtual GenericReal<is_ad> computeQpResidual() override;\n\n  GenericReal<is_ad> computeFactor() const;\n\n  /// displacement component to apply the bc to\n  unsigned int _component;\n\n  /// Number of displacement variables\n  const unsigned int _ndisp;\n\n  ///@{ Pressure value constant factor, function factor, and postprocessor factor\n  const Real _factor;\n  const Function * const _function;\n  const PostprocessorValue * const _postprocessor;\n  ///@}\n\n  /// _alpha Parameter for HHT time integration scheme\n  const Real _alpha;\n\n  /// Variable numbers of coupled displacement variables\n  std::vector<unsigned int> _disp_var;\n\n  const FEBase * const & _fe_side;\n  const std::vector<RealGradient> * _q_dxi;\n  const std::vector<RealGradient> * _q_deta;\n  const std::vector<std::vector<Real>> * _phi_dxi;\n  const std::vector<std::vector<Real>> * _phi_deta;\n  const bool _use_displaced_mesh;\n\n  // One FE for each thread\n  std::vector<std::unique_ptr<FEBase>> _fe;\n\n  std::map<unsigned int, unsigned int> _node_map;\n\n  /// Coordinate system type\n  Moose::CoordinateSystemType _coord_type;\n\n  using PressureParent<is_ad>::_assembly;\n  using PressureParent<is_ad>::_dt;\n  using PressureParent<is_ad>::_fe_problem;\n  using PressureParent<is_ad>::_i;\n  using PressureParent<is_ad>::_mesh;\n  using PressureParent<is_ad>::_name;\n  using PressureParent<is_ad>::_normals;\n  using PressureParent<is_ad>::_q_point;\n  using PressureParent<is_ad>::_qp;\n  using PressureParent<is_ad>::_sys;\n  using PressureParent<is_ad>::_t;\n  using PressureParent<is_ad>::_test;\n  using PressureParent<is_ad>::_var;\n};\n\nclass Pressure : public PressureTempl<false>\n{\npublic:\n  using PressureTempl<false>::PressureTempl;\n\nprotected:\n  virtual Real computeQpJacobian() override;\n  virtual void precalculateQpJacobian() override;\n  virtual Real computeQpOffDiagJacobian(const unsigned int jvar_num) override;\n  virtual void precalculateQpOffDiagJacobian(const MooseVariableFEBase & jvar) override;\n\n  Real computeStiffness(const unsigned int coupled_component);\n  Real computeFaceStiffness(const unsigned int local_j, const unsigned int coupled_component);\n};\n\ntypedef PressureTempl<true> ADPressure;\n\n\nWhat I want is to change the _normals to _tangents so that I could apply shear stress at the boundary.\nThank you",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6450267",
                          "updatedAt": "2023-07-14T14:07:25Z",
                          "publishedAt": "2023-07-14T14:07:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What is MyShearParent? Is that defined?",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6450507",
                          "updatedAt": "2023-07-14T14:38:32Z",
                          "publishedAt": "2023-07-14T14:38:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Also the header is still all about Pressure, not your custom MyShear class?",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6450519",
                          "updatedAt": "2023-07-14T14:39:54Z",
                          "publishedAt": "2023-07-14T14:39:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Actually, I am not sure how to define the MyShearParent and the class. Could you give me some info about it?",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6450792",
                          "updatedAt": "2023-07-14T15:11:56Z",
                          "publishedAt": "2023-07-14T15:11:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It seems you copy pasted the header but did not change it to refer to myShearParent instead of PressureParent.\nUnless you did not mean to create a myShearParent class?",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6461666",
                          "updatedAt": "2023-07-16T18:10:58Z",
                          "publishedAt": "2023-07-16T18:10:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Sorry. I pasted the wrong file. Here is the header\n\n#pragma once\n\n#include \"ADIntegratedBC.h\"\n#include \"IntegratedBC.h\"\n#include \"MooseTypes.h\"\n\n#include \"MooseTypes.h\"\n#include \"libmesh/quadrature_gauss.h\"\n\nclass Function;\n\n/**\n * Pressure applies a pressure on a given boundary in the direction defined by component\n */\n\ntemplate <bool is_ad>\nusing MyShearParent = typename std::conditional<is_ad, ADIntegratedBC, IntegratedBC>::type;\n\ntemplate <bool is_ad>\nclass MyShearTempl : public MyShearParent<is_ad>\n{\npublic:\n  static InputParameters validParams();\n\n  MyShearTempl(const InputParameters & parameters);\n\nprotected:\n  virtual void initialSetup() override;\n  virtual GenericReal<is_ad> computeQpResidual() override;\n\n  GenericReal<is_ad> computeFactor() const;\n\n  /// displacement component to apply the bc to\n  unsigned int _component;\n\n  /// Number of displacement variables\n  const unsigned int _ndisp;\n\n  ///@{ Pressure value constant factor, function factor, and postprocessor factor\n  const Real _factor;\n  const Function * const _function;\n  const PostprocessorValue * const _postprocessor;\n  ///@}\n\n  /// _alpha Parameter for HHT time integration scheme\n  const Real _alpha;\n\n  /// Variable numbers of coupled displacement variables\n  std::vector<unsigned int> _disp_var;\n\n  const FEBase * const & _fe_side;\n  const std::vector<RealGradient> * _q_dxi;\n  const std::vector<RealGradient> * _q_deta;\n  const std::vector<std::vector<Real>> * _phi_dxi;\n  const std::vector<std::vector<Real>> * _phi_deta;\n  const bool _use_displaced_mesh;\n\n  // One FE for each thread\n  std::vector<std::unique_ptr<FEBase>> _fe;\n\n  std::map<unsigned int, unsigned int> _node_map;\n\n  /// Coordinate system type\n  Moose::CoordinateSystemType _coord_type;\n\n  using MyShearParent<is_ad>::_assembly;\n  using MyShearParent<is_ad>::_dt;\n  using MyShearParent<is_ad>::_fe_problem;\n  using MyShearParent<is_ad>::_i;\n  using MyShearParent<is_ad>::_mesh;\n  using MyShearParent<is_ad>::_name;\n  using MyShearParent<is_ad>::_normals;\n  using MyShearParent<is_ad>::_q_point;\n  using MyShearParent<is_ad>::_qp;\n  using MyShearParent<is_ad>::_sys;\n  using MyShearParent<is_ad>::_t;\n  using MyShearParent<is_ad>::_test;\n  using MyShearParent<is_ad>::_var;\n};\n\nclass Pressure : public MyShearTempl<false>\n{\npublic:\n  using MyShearTempl<false>::MyShearTempl;\n\nprotected:\n  virtual Real computeQpJacobian() override;\n  virtual void precalculateQpJacobian() override;\n  virtual Real computeQpOffDiagJacobian(const unsigned int jvar_num) override;\n  virtual void precalculateQpOffDiagJacobian(const MooseVariableFEBase & jvar) override;\n\n  Real computeStiffness(const unsigned int coupled_component);\n  Real computeFaceStiffness(const unsigned int local_j, const unsigned int coupled_component);\n};\n\ntypedef MyShearTempl<true> ADPressure;",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6466628",
                          "updatedAt": "2023-07-17T11:16:42Z",
                          "publishedAt": "2023-07-17T11:16:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think these are wrong:\nclass Pressure : public MyShearTempl<false>\n\ntypedef MyShearTempl<true> ADPressure;\n\nunless you want to be overriding the current Pressure class",
                          "url": "https://github.com/idaholab/moose/discussions/24946#discussioncomment-6468613",
                          "updatedAt": "2023-07-17T14:38:35Z",
                          "publishedAt": "2023-07-17T14:38:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issues after update",
          "author": {
            "login": "Bigdogcat"
          },
          "bodyText": "After I update MOOSE and compile my previous project with make -j4, the following error comes up\n/Users/sunqingpei/projects/moose/framework/build/header_symlinks/Moose.h:55:1: error: static_assert failed due to requirement '201402L >= 201703L' \"MOOSE requires a C++17 compatible compiler (GCC >= 7.5.0, Clang >= 5.0.2). Please update your compiler or, if compatible, add '-std=c++17' to your compiler flags and try again. If using the MOOSE conda package, please attempt a MOOSE environment update (using mamba update --all). If this update is not successful, please create a new MOOSE environment (see https://mooseframework.inl.gov/getting_started/installation/conda.html#uninstall-conda-moose-environment).\"\nMy Clang version is 12.0.0 (clang-1200.0.32.29), does it meet the version requirement or it's due to the compiler flag problem?\nThanks very much.",
          "url": "https://github.com/idaholab/moose/discussions/24956",
          "updatedAt": "2023-07-17T14:00:09Z",
          "publishedAt": "2023-07-12T09:08:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Bigdogcat"
                  },
                  "bodyText": "And how to modify the compiler flags?",
                  "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6425212",
                  "updatedAt": "2023-07-12T09:28:30Z",
                  "publishedAt": "2023-07-12T09:28:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Can you post your libmesh_diagnostic.log? It should be located at moose/scripts/libmesh_diagnostic.log. Unless you are not building your own libMesh and using Conda packages? I can't tell with the output provided.",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6427891",
                          "updatedAt": "2023-07-12T14:09:44Z",
                          "publishedAt": "2023-07-12T14:09:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bigdogcat"
                          },
                          "bodyText": "Thanks for your reply. According to the answer in #24957, I first check the environment variables, and the results are\nCXXFLAGS=-march=core2 -mtune=haswell -mssse3 -ftree-vectorize -fPIC -fPIE -fstack-protector-strong -O2 -pipe -stdlib=libc++ -fvisibility-inlines-hidden -std=c++14 -fmessage-length=0 -isystem /Users/sunqingpei/miniconda3/envs/moose/include\nDEBUG_CXXFLAGS=-march=core2 -mtune=haswell -mssse3 -ftree-vectorize -fPIC -fPIE -fstack-protector-strong -O2 -pipe -stdlib=libc++ -fvisibility-inlines-hidden -std=c++14 -fmessage-length=0 -Og -g -Wall -Wextra -isystem /Users/sunqingpei/miniconda3/envs/moose/include\nThen I use  export CXXFLAGS=\"\u2014std=c++17:$CXXFLAGS\" to add the flag, but the compiling still has error as below\nCompiling C++ (in opt mode) /Users/sunqingpei/projects/moose/framework/build/unity_src/kernels_Unity.C...\nclang-11: error: no such file or directory: '\u2014std=c++17:-march=core2'\nclang-11: error: no such file or directory: '\u2014std=c++17:-march=core2'",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433377",
                          "updatedAt": "2023-07-13T02:53:32Z",
                          "publishedAt": "2023-07-13T02:53:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "just make sure the syntax is correct. It s not accepting \u2014std=c++17:-march=core2, try with a space",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433387",
                          "updatedAt": "2023-07-13T02:55:16Z",
                          "publishedAt": "2023-07-13T02:55:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bigdogcat"
                          },
                          "bodyText": "Could you please explain a little bit about putting a space in which place? IS it in the command export CXXFLAGS=\"\u2014std=c++17:$CXXFLAGS\"      Thanks very much.",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433466",
                          "updatedAt": "2023-07-13T03:11:00Z",
                          "publishedAt": "2023-07-13T03:10:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "try\nexport CXXFLAGS=\"\u2014std=c++17 $CXXFLAGS\"\n\nbut starting from the previous definition of CXXFLAGS (so open a new tab first)",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433531",
                          "updatedAt": "2023-07-13T03:25:35Z",
                          "publishedAt": "2023-07-13T03:25:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bigdogcat"
                          },
                          "bodyText": "Thanks. I try the following commands in a new terminal window\n(base) sunqingpei@sundeMacBook-Pro ~ % conda activate moose\n(moose) sunqingpei@x86_64-apple-darwin13 ~ % export CXXFLAGS=\"\u2014std=c++17 $CXXFLAGS\"\n(moose) sunqingpei@x86_64-apple-darwin13 ~ % cd ~/projects/lemur_PFv3\n(moose) sunqingpei@x86_64-apple-darwin13 lemur_PFv3 % make -j4\nBu the following error still exists\nCompiling C++ (in opt mode) /Users/sunqingpei/projects/moose/framework/build/unity_src/kernels_Unity.C...\nclang-11: error: no such file or directory: '\u2014std=c++17'\nclang-11: error: no such file or directory: '\u2014std=c++17'",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433580",
                          "updatedAt": "2023-07-13T03:40:01Z",
                          "publishedAt": "2023-07-13T03:40:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "try exporting the list of flags directly then, without referring to the old value of CXXFLAGS",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433584",
                          "updatedAt": "2023-07-13T03:41:54Z",
                          "publishedAt": "2023-07-13T03:41:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also it should be -std=c++17 not --std=c++17",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433595",
                          "updatedAt": "2023-07-13T03:44:46Z",
                          "publishedAt": "2023-07-13T03:44:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you paste the output of echo $CXXFLAGS ? it should already be there",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433597",
                          "updatedAt": "2023-07-13T03:45:07Z",
                          "publishedAt": "2023-07-13T03:45:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bigdogcat"
                          },
                          "bodyText": "Yes, it seems -std=c++17 was written as --std=c++17 previously. But this time after I input the following\n(base) sunqingpei@sundeMacBook-Pro ~ % conda activate moose\n(moose) sunqingpei@x86_64-apple-darwin13 ~ % export CXXFLAGS=\"-std=c++17 $CXXFLAGS\"\n(moose) sunqingpei@x86_64-apple-darwin13 ~ % cd ~/projects/lemur_PFv3\n(moose) sunqingpei@x86_64-apple-darwin13 lemur_PFv3 % make -j4\nSame error as at the very beginning comes up\n/Users/sunqingpei/projects/moose/framework/build/header_symlinks/Moose.h:55:1: error: static_assert failed due to requirement '201402L >= 201703L' \"MOOSE requires a C++17 compatible compiler (GCC >= 7.5.0, Clang >= 5.0.2). Please update your compiler or, if compatible, add '-std=c++17' to your compiler flags and try again. If using the MOOSE conda package, please attempt a MOOSE environment update (using mamba update --all). If this update is not successful, please create a new MOOSE environment (see https://mooseframework.inl.gov/getting_started/installation/conda.html#uninstall-conda-moose-environment).\"",
                          "url": "https://github.com/idaholab/moose/discussions/24956#discussioncomment-6433648",
                          "updatedAt": "2023-07-13T03:57:03Z",
                          "publishedAt": "2023-07-13T03:57:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Could you see my kernel if it is wrong?",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Hello Moose experts,\nI am making a kernel for Qpresidual and QpJacobian so I want to ask Moose experts if my kernel is right.\nThis is the residual that I want to implement.\n\nBelow is a part of my . C file.\nReal\nNernstElec::computeQpResidual()\n{\n  return _elec_cond[_qp] * _u[_qp] * _grad_u[_qp] * _grad_test[_i][_qp];\n}\n\nReal\nNernstElec::computeQpJacobian()\n{\n  return _elec_cond[_qp] * _grad_test[_i][_qp] * (_phi[_j][_qp] * _grad_u[_qp] + _u[_qp] * _grad_phi[_j][_qp]);\n}\n\n_elec_cond[_qp] is a material property that is considered a constant.\nI am not sure, especially, the Jacobian part.\nCould you see my kernel if it is wrong?\nIf it is, can you teach me the right one?\nAlso, It would be a big help if you tell me the reference from which I can learn how to implement simple Jacobian and also OffDiagJacobian.\nThank you.\nBest Wishes,\nJeonghwan",
          "url": "https://github.com/idaholab/moose/discussions/24961",
          "updatedAt": "2023-07-17T08:55:15Z",
          "publishedAt": "2023-07-13T05:33:40Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt looks right to me.\nBut fortunately you dont have to trust me either, you can use our automated jacobian testing to check:\nhttps://mooseframework.inl.gov/help/development/analyze_jacobian.html\nThere's no off-diagonal terms here, as there is no other variable than the variable for this equation in this term.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24961#discussioncomment-6440549",
                  "updatedAt": "2023-07-13T15:17:02Z",
                  "publishedAt": "2023-07-13T15:17:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Thank you so much!!",
                          "url": "https://github.com/idaholab/moose/discussions/24961#discussioncomment-6465413",
                          "updatedAt": "2023-07-17T08:55:15Z",
                          "publishedAt": "2023-07-17T08:55:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "adding gravity with PorousFlowFullySaturated",
          "author": {
            "login": "asgauthier"
          },
          "bodyText": "Hi everyone,\nI used PorousFlowFullySaturated in my input file and I tried to add gravity but here is the error i get :\n\nWhat I'm missing ?\nThanks in advance for your help !",
          "url": "https://github.com/idaholab/moose/discussions/24972",
          "updatedAt": "2023-07-17T00:25:38Z",
          "publishedAt": "2023-07-15T13:23:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nit looks like you should be defining a density material property in all the regions that have gravity.\nyou should look at examples in the porous flow module to see how they do that\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24972#discussioncomment-6461945",
                  "updatedAt": "2023-07-16T19:17:57Z",
                  "publishedAt": "2023-07-16T19:17:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Yeah, you probably should add a PorousFlowTotalGravitationalDensityFullySaturatedFromPorosity material",
                          "url": "https://github.com/idaholab/moose/discussions/24972#discussioncomment-6463014",
                          "updatedAt": "2023-07-17T00:25:38Z",
                          "publishedAt": "2023-07-17T00:25:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE compilation and unable to use debugger build executable due Lib mesh error",
          "author": {
            "login": "salaudeen-ya"
          },
          "bodyText": "Hello,\nI am trying to build an executable to debug my application. By using METHOD=dbg make -j1, I got the following error:\nLinking Library /home/salau/projects/moose/modules/peridynamics/lib/libperidynamics-dbg.la...\nlibtool:   error: '/home/salau/projects/moose/modules/peridynamics/build/unity_src/nodalkernels_Unity.x86_64-conda-linux-gnu.dbg.lo' is not a valid libtool object\nmake: *** [/home/salau/projects/moose/framework/app.mk:345: /home/salau/projects/moose/modules/peridynamics/lib/libperidynamics-dbg.la] Error 1\n\nHow do I go about this?",
          "url": "https://github.com/idaholab/moose/discussions/24724",
          "updatedAt": "2023-07-16T18:25:45Z",
          "publishedAt": "2023-06-18T00:15:17Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nGit clean the repo then try to build again\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6207129",
                  "updatedAt": "2023-06-18T02:41:45Z",
                  "publishedAt": "2023-06-18T02:41:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "Thank you, I have been trying this and the build is still not succesful.\nIn fact, I even try to install a new MOOSE which also fails to build. The error I got is this:\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/base/ResidualObject.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/base/MaxVarNDofsPerNode.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/base/Attributes.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/base/Factory.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/base/MooseError.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/utils/MooseEnum.C...\n/home/salau/projects/moose/framework/src/base/MooseApp.C: In constructor 'MooseApp::MooseApp(InputParameters)':\n/home/salau/projects/moose/framework/src/base/MooseApp.C:411:48: error: 'class libMesh::Parallel::Communicator' has no member named 'sync_type'\n  411 |   const_cast<Parallel::Communicator &>(comm()).sync_type(timpi_sync);   \n      |                                                ^~~~~~~~~\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/utils/SolutionInvalidityRegistry.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/utils/LeastSquaresFitBase.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/src/utils/MooseEnumBase.C...\nmake: *** [/home/salau/projects/moose/framework/build.mk:148: /home/salau/projects/moose/framework/src/base/MooseApp.x86_64-conda-linux-gnu.opt.lo] Error 1     \nmake: *** Waiting for unfinished jobs....",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6221004",
                          "updatedAt": "2023-06-19T15:39:50Z",
                          "publishedAt": "2023-06-19T15:39:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "let s update libmesh and moose again.\nThis looks like MOOSE is more up to date than libmesh\nsee this page\nhttps://mooseframework.inl.gov/getting_started/new_users.html#update",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6221058",
                          "updatedAt": "2023-06-19T15:46:29Z",
                          "publishedAt": "2023-06-19T15:46:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "Okay. I will wait for both the libmesh and moose to be updated.",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6221731",
                          "updatedAt": "2023-06-19T16:55:48Z",
                          "publishedAt": "2023-06-19T16:55:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you need to update locally.\nWe are in sync at all times with the repo. So a brand new install should always work.\nThe problem arose because you updated libmesh (through conda) or MOOSE (through git)",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6221809",
                          "updatedAt": "2023-06-19T17:13:46Z",
                          "publishedAt": "2023-06-19T17:04:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "I have done that a couple of times today and am still getting a failed build.\nI have a brand new install:\ncd ~/projects\nrm -rf moose\ngit clone https://github.com/idaholab/moose.git\ncd moose\ngit checkout master\n\n\nThe installation works fine and I build using:\ncd ~/projects/moose/test\nmake -j 4\n\n\nThis still give the following error:\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/build/unity_src/parser_Unity.C...\nCompiling C++ (in opt mode) /home/salau/projects/moose/framework/build/unity_src/relationshipmanagers_Unity.C...\nx86_64-conda-linux-gnu-c++: fatal error: Killed signal terminated program cc1plus\ncompilation terminated.\nmake: *** [/home/salau/projects/moose/framework/build.mk:148: /home/salau/projects/moose/framework/build/unity_src/systems_Unity.x86_64-conda-linux-gnu.opt.lo] Error 1\nmake: *** Waiting for unfinished jobs....",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6222204",
                          "updatedAt": "2023-06-19T17:59:00Z",
                          "publishedAt": "2023-06-19T17:58:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this is yet another error message though\nx86_64-conda-linux-gnu-c++: fatal error: Killed signal terminated program cc1plus\nusually means you are running out of memory. Try make -j 2 and if not, make -j 1",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6222563",
                          "updatedAt": "2023-06-19T18:39:04Z",
                          "publishedAt": "2023-06-19T18:39:03Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "Hello,\nI am trying to use the traditional method of debugging the libmesh by setting up several print statements in the code using standard ostream. For now, I am modifying the fe_map.C.  I followed up with the procedures of updating the libmesh by running the script update_and_rebuild_libmesh.sh  as found here:\nhttps://mooseframework.inl.gov/getting_started/installation/build_libmesh.html\nhttps://mooseframework.inl.gov/help/faq/libmesh_issues.html\nIs there any other thing to do to make the changes effective? Since it neither catches the deliberate error I introduced in the print statement nor has the line printed on the terminal when I test a simple 1D input file.",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6295530",
                          "updatedAt": "2023-06-27T15:46:57Z",
                          "publishedAt": "2023-06-27T15:46:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "are you on mac or linux?\nand when building libmesh, did you skip-submodule-update ?",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6295647",
                          "updatedAt": "2023-06-27T15:57:07Z",
                          "publishedAt": "2023-06-27T15:57:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "Yes,\nI did try (base) salau@LAPTOP-9A1UOG6G:~/projects/moose/scripts$ ./update_and_rebuild_libmesh.sh --skip-submodule-update.\nI am on Windows Subsystem for Linux (WSL).",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6295800",
                          "updatedAt": "2023-06-27T16:10:35Z",
                          "publishedAt": "2023-06-27T16:10:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you ldd moose_test-opt or whatever executable you are building, do you see the expected libmesh in moose/libmesh\nAre you sure that the code you are writing in libmesh is being executed?",
                          "url": "https://github.com/idaholab/moose/discussions/24724#discussioncomment-6295866",
                          "updatedAt": "2023-06-27T16:18:40Z",
                          "publishedAt": "2023-06-27T16:18:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}