{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wNi0zMFQxMToyNzo1NC0wNTowMM4ANHMR"
    },
    "edges": [
      {
        "node": {
          "title": "I cannot compile application suddenly",
          "author": {
            "login": "hokonkim"
          },
          "bodyText": "Until yesterday noon, I can recompile my application whenever I want.\nBut, suddenly with this error message, I cannot recompile the application anymore.\n\nI tried to set MOOSE_DIR, first.\n(MOOSE_DIR=/anaconda3/envs/moose/ or MOOSE_DIR=/Users/HOKON/projects/moose)\nBoth of MOOSE_DIR doesn't give me change for fixing the problem, so I unset the MOOSE_DIR currently.\nWhat am I supposed to do fix this problem?\nI always appreciate help for MOOSE!\n============================================\nI searched trobuleshooting in the MOOSE website.\nI did \"conda update -all\" and \"make -j4\" in my application folder.\n\nNow, I got above error.... I am stuck... I think I should wait for a reply from MOOSE staff...\n============================================\nPS. Because I work on two kinds of operating system (Windows 10 on desktop and MacOS on laptop),\n   Usually I edited the source kernel (*.c and *.h) on Windows 10(desktop).\n\n   After that, I copy and paste the edited source kernel to application \"src\" and \"include\" folders existed at MacOs(laptop).\n\n   Can this kind of copying and pasting the source codes cause the issue like this?\n\n   I knew the file type? is different between Windows 10(NTFS) and MacOS(..?).\n\n   Even the file format is the same, working different OS for the source code might be an issue for this??",
          "url": "https://github.com/idaholab/moose/discussions/18263",
          "updatedAt": "2022-06-29T09:27:00Z",
          "publishedAt": "2021-07-06T04:22:34Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIssue with loading dynamic libraries are commonly due to having an old build lying around. We recommend using make clobberall to clean up the directory, then compiing again.\nIf that doesn't work, it may be that the cleaning was not enough. In which case, you should commit ALL your chances, then run git clean -xfd.\nThis type of copy pasting should be fine. You could get issues with line endings if you moved the file, but copy pasting probably works.\nI would recommend using a shared folder for doing this though, or just coding on the mac, for a more efficient workflow.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18263#discussioncomment-970387",
                  "updatedAt": "2022-06-29T09:27:04Z",
                  "publishedAt": "2021-07-06T14:08:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "I think now an issue to laptop looks solved.\nI tried to recompile the application on HPC.\nAfter \"make clobberall\" and \"make -j4\" in my application directory.\n\n\nIf I recompile without module (this means, Iuse the local MOOSE in my account),\nit works properly, only for a one time. After the modification of src and include folders, I cannot recompile again.\nWhat I saw was the same message Iike above.\n\"Using HIT from...\" and back to command line. It doesn't look like compile.\n\n\nIf I recompile the application with the MOOSE module,\nI got error messages like below.\n\n\n\nI asked this to HPC staff as well, and wait for his reply. But I don't know why this happens.\nFor your information, I run a simulation on HPC by using this bash file.\n\nUsually, I do not comment out the load module command line.. (2nd one, latest MOOSE)\nI knew without loading the MOOSE module, above bash file works.\nLet me clear....\n\"How I fix the compiling problem on HPC in this situation?\"\n\"What is the function of Module on HPC? I thought Module let me use the virtual environment.\nI thought If I load \"MOOSE module\", then even without local MOOSE file,\nI could make new application (./moose/scirpts/stork.sh app_name), but actually it doesn't work.\nIs there any documents for how module works or what is module on HPC?\"\nI always appreciate your help!",
                          "url": "https://github.com/idaholab/moose/discussions/18263#discussioncomment-971205",
                          "updatedAt": "2022-06-29T09:27:08Z",
                          "publishedAt": "2021-07-06T17:27:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you have not modified any files after you compiled, it will not recompile. Because everything is already compiled.\nSo this may be why you are seeing this \"it compiles only once\" behavior\nPlease search the Discussions board for HPC modules related discussions. This has come up recently.\nYou cannot switch between MPI distributions between moose and your application, this is likely what is happening here given the error message",
                          "url": "https://github.com/idaholab/moose/discussions/18263#discussioncomment-971243",
                          "updatedAt": "2022-07-25T21:30:09Z",
                          "publishedAt": "2021-07-06T17:35:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Also, please refrain from posting pictures of text whenever possible; Search queries cannot find text within a picture (therefor hindering the next user from finding answers if they happen to hit the same error you posted).",
                          "url": "https://github.com/idaholab/moose/discussions/18263#discussioncomment-971325",
                          "updatedAt": "2022-07-25T21:30:44Z",
                          "publishedAt": "2021-07-06T17:50:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "transform_func in 3D?",
          "author": {
            "login": "mangerij"
          },
          "bodyText": "Hi,\nI am rotating a regular 3D geometry: does the transform_func approach to setting the periodic boundaries only work in 2D?\nI get this error\n[31] ./include/libmesh/remote_elem.h, line 120, compiled Feb 16 2021 at 16:53:25\n\n*** ERROR ***\nError: not implemented!\n\nMy input file for example contains:\n  [./Periodic]\n    [./x]\n      primary = bottom\n      secondary = top\n      transform_func = 'tr_x tr_y tr_z'\n      inv_transform_func = 'itr_x itr_y itr_z'\n    [../]\n  [../]\n\nand I see there are only 2D examples in the bcs/periodic tests. Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/18261",
          "updatedAt": "2023-12-28T13:57:29Z",
          "publishedAt": "2021-07-05T14:44:34Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mangerij"
                  },
                  "bodyText": "Update: top and bottom are for y-faces (not x-)!\n\"Not implemented\" is a bad way of telling me I am wrong\nrelated to libMesh/libmesh#2958",
                  "url": "https://github.com/idaholab/moose/discussions/18261#discussioncomment-970912",
                  "updatedAt": "2023-12-28T13:57:35Z",
                  "publishedAt": "2021-07-06T16:09:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "compile petsc on cluster",
          "author": {
            "login": "rrezakhani"
          },
          "bodyText": "Hello,\nI am trying to install moose on a cluster, and I get the following error when installing petsc:\nTrying to download git://https://bitbucket.org/petsc/pkg-mumps.git for MUMPS\nCompiling Mumps; this may take several minutes\nUNABLE to CONFIGURE with GIVEN OPTIONS    (see configure.log for details):\nError running make on MUMPS\nAttached is the configure.log. Also, here are the loaded modules:\nCurrently Loaded Modules:\n\nshared   2) cpu/0.15.4   3) DefaultModules   4) gcc/10.2.0   5) python/3.8.5   6) slurm/expanse/20.02.3   7) sdsc/1.0   8) cmake/3.18.2   9) openmpi/4.0.4\n\nThank you very much for your help,\nRoozbeh\nconfigure.log",
          "url": "https://github.com/idaholab/moose/discussions/17941",
          "updatedAt": "2022-07-21T13:05:37Z",
          "publishedAt": "2021-05-26T21:11:29Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Roozbeh\nA few of the first errors are referencing dos.h. This is odd since your cluster should be on linux.\nCan you check your environment PATH, CC, CXX, FC, etc for anything odd?\n@fdkong who's the expert on mumps?\nAnd do we absolutely need mumps or is it once of the ones we can disable temporarily?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17941#discussioncomment-805200",
                  "updatedAt": "2022-07-21T13:05:40Z",
                  "publishedAt": "2021-05-31T04:35:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rrezakhani"
                          },
                          "bodyText": "Hi Guillaume,\nThanks for your response. Actually I recompiled today using the module mvapich2, and it worked.\nCheers,\nRoozbeh",
                          "url": "https://github.com/idaholab/moose/discussions/17941#discussioncomment-807276",
                          "updatedAt": "2022-07-21T13:05:42Z",
                          "publishedAt": "2021-05-31T14:31:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ahmad681"
                  },
                  "bodyText": "I am having the same problem with compiling PETSc too, but my error is as follows:\nTESTING: checkCCompiler from config.setCompilers(config/BuildSystem/config/setCompilers.py:717)                                                                                                               *******************************************************************************\nUNABLE to CONFIGURE with GIVEN OPTIONS    (see configure.log for details):\nCould not locate a functional C compiler\nAny clue? Thanks",
                  "url": "https://github.com/idaholab/moose/discussions/17941#discussioncomment-963914",
                  "updatedAt": "2022-07-22T22:45:58Z",
                  "publishedAt": "2021-07-05T01:41:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "This question has been answered. If the steps which lead to that answer didn't work for you, please start a new discussion.",
                          "url": "https://github.com/idaholab/moose/discussions/17941#discussioncomment-969956",
                          "updatedAt": "2022-07-22T22:46:23Z",
                          "publishedAt": "2021-07-06T12:48:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Questions about coupled variable and global parameter",
          "author": {
            "login": "hokonkim"
          },
          "bodyText": "I made an application that has 3 variables and 3 kernels.\nI would like to introduce a new variable and there is no kernel for this variable.\nWhat I want to know is\n\"Can coupled variable (introduced new variable) be changed by off-diagonal jacobian?\"\nAlso, in this application, I set the global parameter (e.g. A=1000).\n\nLike above, there is a pipe. Everywhere in pipe has constant A (A=1000), except for triangle (A=0).\nSo far, A was constant number, however I want to change A at a certain condition(place). Is it possible through MOOSE?",
          "url": "https://github.com/idaholab/moose/discussions/18218",
          "updatedAt": "2022-06-21T12:51:17Z",
          "publishedAt": "2021-06-30T20:42:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @hokonkim\nThe coupling of a variable inside a user defined kernel is described in example number 3:\nhttps://github.com/idaholab/moose/tree/next/examples/ex03_coupling\nIf you specify better your equations and the terms you want to introduce, it is easier to help you.\nIf you want a different A parameter in different part of the geometry the best strategy is to create multiple \"blocks\",\nthis can be done in gmsh by specifying more \"physical volumes\".\n\"A\" can be defined as a material property in a material object, then restrict the material to a certain block,\nyou will need two materials with A = 0 and A = 1000 in your simulation.\nThe material property can be imported into the kernel with getMaterialProperty, you can see many examples of this in this repository:\nhttps://github.com/ngrilli/c_pfor_am\nBest Regards,\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-945380",
                  "updatedAt": "2022-06-21T12:51:23Z",
                  "publishedAt": "2021-06-30T20:56:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "@ngrilli Thanks for your reply.\nIf the geometry (pipe) consists of one volume (block), then what is the best way to implement this?",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-945417",
                          "updatedAt": "2022-06-21T12:51:24Z",
                          "publishedAt": "2021-06-30T21:05:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You will want to use a function to define the spatial dependency if you want to only use one block",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-945444",
                          "updatedAt": "2022-06-21T12:51:24Z",
                          "publishedAt": "2021-06-30T21:16:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "I tried to check \"Functions\" in Syntax, however still I have no idea about this.\nCould you point me out for specific syntax?  or\nIs there any uploaded input examples at MOOSE framework website?",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-945484",
                          "updatedAt": "2022-06-21T12:51:24Z",
                          "publishedAt": "2021-06-30T21:34:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Just use a ParsedFunction for the defintion. Then a (AD?) GenericFunctionMaterial to take that parsed function\nhttps://mooseframework.inl.gov/source/functions/MooseParsedFunction.html\nhttps://mooseframework.inl.gov/source/materials/GenericFunctionMaterial.html",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-945528",
                          "updatedAt": "2021-06-30T21:49:51Z",
                          "publishedAt": "2021-06-30T21:49:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "Dear @hokonkim\nIf you have no specific reason to use a single block, just add another block.\nYou need to create two \"physical volumes\" in gmsh.\nThere are plenty of examples online, for instance this one:\nhttps://stackoverflow.com/questions/53914425/create-single-mesh-for-multiple-bodies-in-gmsh\nNicol\u00f2",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-948439",
                          "updatedAt": "2021-07-01T08:47:22Z",
                          "publishedAt": "2021-07-01T08:47:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I fully agree with Nicolo that this is the more natural way to do this.\nDoing a single block is likely not to capture the true shape of that triangle, unless you are very careful with meshing",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-950073",
                          "updatedAt": "2021-07-01T14:55:56Z",
                          "publishedAt": "2021-07-01T14:55:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "@ngrilli @GiudGiud\nI think it needs more detail explanation.\nWhat I am trying to implement is degradation (\"poisoning) happens in the fuel cell.\nWhen degradation happens, somewhere in TPB (in previous discussion, I said the pipe) will be deactivated.\nIf somewhere in TPB is deactivated, then that point(element?) in TPB should be shut off or at least there is no more reaction contributing to a performance.\nAlso, in TPB, there is an only S0 constants related to TPB reaction.\nIn terms of volumetric mesh, TPB is just one mesh.\nSo, I tried to find a way to give a zero S0 value to deactivated TPB  when TPB are poisoned.",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-950539",
                          "updatedAt": "2022-09-01T03:05:18Z",
                          "publishedAt": "2021-07-01T16:24:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so you're trying to remove elements during the simulation essentially?\nor just disable the reaction in those elements?\nFor the latter:\nIf you go the function route, you can make that function depend on time.\nIf you need more fine grained control you will have to create your own reaction kernel, and have the criteria for activation/deactivation of the reaction there.",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-953824",
                          "updatedAt": "2022-09-01T03:05:19Z",
                          "publishedAt": "2021-07-02T00:53:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "@GiudGiud\nI think disabling the reaction in the elements is enough.\nI've made a simple function in an input file.\nBut, \"how to disable the reaction in the element?\". Are there any examples I can refer?\nI've made several reaction kernels as well, but still I need to think more about this if I want to use kernel...\nCan I control a reaction with probability?\nex) when species A and B exist in (or near) an element, A + B -> C reaction occurs with 0.01% probability.\nPS. Can GlobalParams in input file override the value given at the source kernel?\nex) (input file) GlobalParams/z = 8\n(source kernel) params.addParam(\"z\", 4.0, \"Electron number (num of electrons transferred)\");\nIn this case, z = 8 or z = 4?",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-955496",
                          "updatedAt": "2022-09-01T03:05:19Z",
                          "publishedAt": "2021-07-02T07:58:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok good, that is very doable. What does the disabling depend on?\nIf it's just a profile that you are imposing and that you already know the time dependence of, then just use a function in space and time. Then use a reaction kernel with a function for the coefficent.\nIf not that use a (material property + reaction kernel with coefficient material property) OR (reaction kernel with the coefficient hard-coded in the kernel)  and put in the criteria for disabling here.\nTheoretically speaking, you absolutely could use a probabilistic approach. I do not think it is required here, a continuous approach will be just as easy to follow, and will not necessitate an uncertainty study.\nGlobalParams can fill the parameters yes.\nFor example for this parameter you gave, the default of 4 is not used, the global parameter is used.\nNow if you specify for that given block a value of 6 in the input block, then BOTH the default and the global parameters are overridden.",
                          "url": "https://github.com/idaholab/moose/discussions/18218#discussioncomment-958140",
                          "updatedAt": "2022-09-01T03:05:19Z",
                          "publishedAt": "2021-07-02T18:52:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Coupled Properties Update in a MultiApp to Decouple Flow and Mechanics Physics",
          "author": {
            "login": "AhmedAlmetwally"
          },
          "bodyText": "I am building a MultiApp to decouple the poro-elasticity problems. The transfer will be for the non-linear variables between the apps, pressure and displacement which is not possible because the transfer is allowed only for auxVariables.\nThe fluid flow materApp is structured in a way that the material objects call a porous-media dictator that combines the non-linear variables. It is needed for populating the coupled fluid properties, e.g. density, viscosity,\u2026 which are function of nonlinear variables, e.g., pressure. That pressure is updated while the solution proceeds and the dictator\u2019s job is to pass that updated field to these materials\u2019 objects to be reevaluated.\nIn our workflow, we need to update the fluid-flow coupled properties which depends on the mechanics attributes, e.g. strain, porosity, and pore volume as a result of the updated results from the mechanics app \u2013 displacement. I tried to enforce the displacement as auxVariables. As per the following error, the dictator did not allow combining the displacement as auxVariables. So, based on my understanding, we should rewrite that dictator in a way that can facilitate accepting the auxVariables. Another option is to store the mechanics auxVariables (displacements) to fake nonlinear variables which will require a non-needed additional kernels.\n\n\nI need also to copy the pressure as a non linear variable in an auxVariable so I can pass it to the subApp. Do you have a suggestion for that?\nDo you have suggestions for those two points!",
          "url": "https://github.com/idaholab/moose/discussions/18127",
          "updatedAt": "2022-06-23T12:54:40Z",
          "publishedAt": "2021-06-21T15:29:41Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "@WilkAndy, @cbolisetti and I were trying to help Ahmed with this.  He is going to break the poro_elasticity/mandel.i input up into a multiapp.   The poro-elasticity problem would then be two separate problems, elasticity by itself on the subapp and darcy flow on the main app.  The main app would send pressure to the subapp and the subapp would send displacements back to the main app.  The main app would use the displacement auxvariables received form the subapp as to compute a new porosity.  The main app will probably also need to solve for the other derivatives that are found in PoroFullSatMaterial.C.  I think the subapp receives the pressure and applies it as a body load.\nMaybe @AhmedAlmetwally  could comment on the accuracy of what I wrote.",
                  "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-900002",
                  "updatedAt": "2022-06-23T12:55:03Z",
                  "publishedAt": "2021-06-21T21:30:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AhmedAlmetwally"
                          },
                          "bodyText": "Thanks @lynnmunday! That is correct.",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-900334",
                          "updatedAt": "2022-06-23T12:55:10Z",
                          "publishedAt": "2021-06-22T00:27:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Just saw this while searching the discussions and was curious as I have never done this decoupling of fluid and mechanics. I thought I would give it a quick try on the mandel.i test, and managed to split this test into two: a fluid flow app and mechanics sub app. Apart from the initial few steps where I haven't put in an initial condition, the MultiApp version converges to the fully coupled results.\n\nI can post the input files if you like, but basically I removed the displacements from the PorousFlowDictator in the fluid app, and the porepressure in the mechanics sub app, and used MultiAppCopyTransfers to copy variables to aux variables between the apps.",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-954344",
                          "updatedAt": "2022-06-23T12:55:09Z",
                          "publishedAt": "2021-07-02T05:22:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks for doing this @cpgr .   I failed to see this question, sorry @AhmedAlmetwally and @lynnmunday",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-954350",
                          "updatedAt": "2022-06-23T12:55:10Z",
                          "publishedAt": "2021-07-02T05:26:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AhmedAlmetwally"
                          },
                          "bodyText": "Thanks, @cpgr @WilkAndy,\nYes, that was the right approach and I did the same and get a good match.\nWould you please share your .i files to compare!\n@lynnmunday, FYI!\nRegards",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955009",
                          "updatedAt": "2022-07-13T18:08:42Z",
                          "publishedAt": "2021-07-02T05:59:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Sure - here are the two input files I used:\n# Mandel's problem of consolodation of a drained medium - fluid flow master app\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 10\n  ny = 1\n  nz = 1\n  xmin = 0\n  xmax = 1\n  ymin = 0\n  ymax = 0.1\n  zmin = 0\n  zmax = 1\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  PorousFlowDictator = dictator\n  block = 0\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'porepressure'\n    number_fluid_phases = 1\n    number_fluid_components = 1\n  []\n  [pc]\n    type = PorousFlowCapillaryPressureVG\n    m = 0.8\n    alpha = 1e-5\n  []\n[]\n\n[Variables]\n  [porepressure]\n  []\n[]\n\n[AuxVariables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n\n[BCs]\n  [xmax_drained]\n    type = DirichletBC\n    variable = porepressure\n    value = 0\n    boundary = right\n  []\n[]\n\n[Kernels]\n  [poro_vol_exp]\n    type = PorousFlowMassVolumetricExpansion\n    variable = porepressure\n    fluid_component = 0\n  []\n  [mass0]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 0\n    variable = porepressure\n  []\n  [flux]\n    type = PorousFlowAdvectiveFlux\n    variable = porepressure\n    gravity = '0 0 0'\n    fluid_component = 0\n  []\n[]\n\n[Modules]\n  [FluidProperties]\n    [simple_fluid]\n      type = SimpleFluidProperties\n      bulk_modulus = 8\n      density0 = 1\n      thermal_expansion = 0\n      viscosity = 1\n    []\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n  []\n  [eff_fluid_pressure]\n    type = PorousFlowEffectiveFluidPressure\n  []\n  [vol_strain]\n    type = PorousFlowVolumetricStrain\n  []\n  [ppss]\n    type = PorousFlow1PhaseP\n    porepressure = porepressure\n    capillary_pressure = pc\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n  []\n  [simple_fluid]\n    type = PorousFlowSingleComponentFluid\n    fp = simple_fluid\n    phase = 0\n  []\n  [porosity]\n    type = PorousFlowPorosity\n    fluid = true\n    mechanical = true\n    ensure_positive = false\n    porosity_zero = 0.1\n    biot_coefficient = 0.6\n    solid_bulk = 1\n  []\n  [permeability]\n    type = PorousFlowPermeabilityConst\n    permeability = '1.5 0 0   0 1.5 0   0 0 1.5'\n  []\n  [relperm]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 0 # unimportant in this fully-saturated situation\n    phase = 0\n  []\n[]\n\n[MultiApps]\n  [mechanics]\n    type = TransientMultiApp\n    input_files = mandel_mechanics.i\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n[Transfers]\n  [porepressure]\n    type = MultiAppCopyTransfer\n    direction = to_multiapp\n    multi_app = mechanics\n    source_variable = porepressure\n    variable = porepressure\n  []\n  [disp]\n    type = MultiAppCopyTransfer\n    direction = from_multiapp\n    multi_app = mechanics\n    source_variable = 'disp_x disp_y disp_z'\n    variable = 'disp_x disp_y disp_z'\n  []\n  [total_force]\n    type = MultiAppPostprocessorTransfer\n    multi_app = mechanics\n    direction = from_multiapp\n    reduction_type = average\n    from_postprocessor = total_downwards_force\n    to_postprocessor = total_downwards_force\n  []\n[]\n\n[Postprocessors]\n  [p0]\n    type = PointValue\n    outputs = csv\n    point = '0.0 0 0'\n    variable = porepressure\n  []\n  [p1]\n    type = PointValue\n    outputs = csv\n    point = '0.1 0 0'\n    variable = porepressure\n  []\n  [p2]\n    type = PointValue\n    outputs = csv\n    point = '0.2 0 0'\n    variable = porepressure\n  []\n  [p3]\n    type = PointValue\n    outputs = csv\n    point = '0.3 0 0'\n    variable = porepressure\n  []\n  [p4]\n    type = PointValue\n    outputs = csv\n    point = '0.4 0 0'\n    variable = porepressure\n  []\n  [p5]\n    type = PointValue\n    outputs = csv\n    point = '0.5 0 0'\n    variable = porepressure\n  []\n  [p6]\n    type = PointValue\n    outputs = csv\n    point = '0.6 0 0'\n    variable = porepressure\n  []\n  [p7]\n    type = PointValue\n    outputs = csv\n    point = '0.7 0 0'\n    variable = porepressure\n  []\n  [p8]\n    type = PointValue\n    outputs = csv\n    point = '0.8 0 0'\n    variable = porepressure\n  []\n  [p9]\n    type = PointValue\n    outputs = csv\n    point = '0.9 0 0'\n    variable = porepressure\n  []\n  [p99]\n    type = PointValue\n    outputs = csv\n    point = '1 0 0'\n    variable = porepressure\n  []\n  [xdisp]\n    type = PointValue\n    outputs = csv\n    point = '1 0.1 0'\n    variable = disp_x\n  []\n  [ydisp]\n    type = PointValue\n    outputs = csv\n    point = '1 0.1 0'\n    variable = disp_y\n  []\n  [total_downwards_force]\n     type = Receiver\n     outputs = csv\n  []\n  [dt]\n    type = FunctionValuePostprocessor\n    outputs = console\n    function = if(0.15*t<0.01,0.15*t,0.01)\n  []\n[]\n\n\n[Preconditioning]\n  [andy]\n    type = SMP\n    full = true\n    petsc_options_iname = '-ksp_type -pc_type -sub_pc_type -snes_atol -snes_rtol -snes_max_it'\n    petsc_options_value = 'gmres asm lu 1E-14 1E-10 10000'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  start_time = 0\n  end_time = 0.7\n  [TimeStepper]\n    type = PostprocessorDT\n    postprocessor = dt\n    dt = 0.001\n  []\n[]\n\n[Outputs]\n  execute_on = 'timestep_end'\n  file_base = mandel_fluid\n  exodus = true\n  [csv]\n    interval = 3\n    type = CSV\n  []\n[]\n\n# Mandel's problem of consolodation of a drained medium - mechanics subapp\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 10\n  ny = 1\n  nz = 1\n  xmin = 0\n  xmax = 1\n  ymin = 0\n  ymax = 0.1\n  zmin = 0\n  zmax = 1\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  PorousFlowDictator = dictator\n  block = 0\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'disp_x disp_y disp_z'\n    number_fluid_phases = 1\n    number_fluid_components = 1\n  []\n  [pc]\n    type = PorousFlowCapillaryPressureVG\n    m = 0.8\n    alpha = 1e-5\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n\n[BCs]\n  [roller_xmin]\n    type = DirichletBC\n    variable = disp_x\n    value = 0\n    boundary = 'left'\n  []\n  [roller_ymin]\n    type = DirichletBC\n    variable = disp_y\n    value = 0\n    boundary = 'bottom'\n  []\n  [plane_strain]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = 'back front'\n  []\n  [top_velocity]\n    type = FunctionDirichletBC\n    variable = disp_y\n    function = top_velocity\n    boundary = top\n  []\n[]\n\n[Functions]\n  [top_velocity]\n    type = PiecewiseLinear\n    x = '0 0.002 0.006   0.014   0.03    0.046   0.062   0.078   0.094   0.11    0.126   0.142   0.158   0.174   0.19 0.206 0.222 0.238 0.254 0.27 0.286 0.302 0.318 0.334 0.35 0.366 0.382 0.398 0.414 0.43 0.446 0.462 0.478 0.494 0.51 0.526 0.542 0.558 0.574 0.59 0.606 0.622 0.638 0.654 0.67 0.686 0.702'\n    y = '-0.041824842    -0.042730269    -0.043412712    -0.04428867     -0.045509181    -0.04645965     -0.047268246 -0.047974749      -0.048597109     -0.0491467  -0.049632388     -0.050061697      -0.050441198     -0.050776675     -0.051073238      -0.0513354 -0.051567152      -0.051772022     -0.051953128 -0.052113227 -0.052254754 -0.052379865 -0.052490464 -0.052588233 -0.052674662 -0.052751065 -0.052818606 -0.052878312 -0.052931093 -0.052977751 -0.053018997 -0.053055459 -0.053087691 -0.053116185 -0.053141373 -0.05316364 -0.053183324 -0.053200724 -0.053216106 -0.053229704 -0.053241725 -0.053252351 -0.053261745 -0.053270049 -0.053277389 -0.053283879 -0.053289615'\n  []\n[]\n\n[AuxVariables]\n  [porepressure]\n  []\n  [stress_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [tot_force]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[AuxKernels]\n  [stress_yy]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_yy\n    index_i = 1\n    index_j = 1\n  []\n  [tot_force]\n    type = ParsedAux\n    args = 'stress_yy porepressure'\n    execute_on = timestep_end\n    variable = tot_force\n    function = '-stress_yy+0.6*porepressure'\n  []\n[]\n\n[Kernels]\n  [grad_stress_x]\n    type = StressDivergenceTensors\n    variable = disp_x\n    component = 0\n  []\n  [grad_stress_y]\n    type = StressDivergenceTensors\n    variable = disp_y\n    component = 1\n  []\n  [grad_stress_z]\n    type = StressDivergenceTensors\n    variable = disp_z\n    component = 2\n  []\n  [poro_x]\n    type = PorousFlowEffectiveStressCoupling\n    biot_coefficient = 0.6\n    variable = disp_x\n    component = 0\n  []\n  [poro_y]\n    type = PorousFlowEffectiveStressCoupling\n    biot_coefficient = 0.6\n    variable = disp_y\n    component = 1\n  []\n  [poro_z]\n    type = PorousFlowEffectiveStressCoupling\n    biot_coefficient = 0.6\n    component = 2\n    variable = disp_z\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n  []\n  [elasticity_tensor]\n    type = ComputeElasticityTensor\n    C_ijkl = '0.5 0.75'\n    # bulk modulus is lambda + 2*mu/3 = 0.5 + 2*0.75/3 = 1\n    fill_method = symmetric_isotropic\n  []\n  [strain]\n    type = ComputeSmallStrain\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n  [eff_fluid_pressure]\n    type = PorousFlowEffectiveFluidPressure\n  []\n  [ppss]\n    type = PorousFlow1PhaseP\n    porepressure = porepressure\n    capillary_pressure = pc\n  []\n[]\n\n[Postprocessors]\n  [total_downwards_force]\n     type = ElementAverageValue\n     variable = tot_force\n  []\n  [dt]\n    type = FunctionValuePostprocessor\n    function = if(0.15*t<0.01,0.15*t,0.01)\n  []\n[]\n\n[Preconditioning]\n  [andy]\n    type = SMP\n    full = true\n    petsc_options_iname = '-ksp_type -pc_type -sub_pc_type -snes_atol -snes_rtol -snes_max_it'\n    petsc_options_value = 'gmres asm lu 1E-14 1E-10 10000'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  start_time = 0\n  end_time = 0.7\n  [TimeStepper]\n    type = PostprocessorDT\n    postprocessor = dt\n    dt = 0.001\n  []\n[]\n\n[Outputs]\n  execute_on = 'timestep_end'\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955033",
                          "updatedAt": "2022-07-13T18:08:42Z",
                          "publishedAt": "2021-07-02T06:13:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AhmedAlmetwally"
                          },
                          "bodyText": "Thanks @cpgr",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955071",
                          "updatedAt": "2022-07-13T18:09:04Z",
                          "publishedAt": "2021-07-02T06:27:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "@WilkAndy - I don't think we have a loosely-coupled HM or THM example in the porous flow tests or examples? Did you want to work this up as a test/example @AhmedAlmetwally (as you raised it originally)?",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955141",
                          "updatedAt": "2022-07-13T18:09:05Z",
                          "publishedAt": "2021-07-02T06:54:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AhmedAlmetwally"
                          },
                          "bodyText": "yes, we do @WilkAndy  @cpgr",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955233",
                          "updatedAt": "2022-07-13T18:09:04Z",
                          "publishedAt": "2021-07-02T07:01:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I'm kind of not keen to do this, as i've got other higher-priority things to look after.  But don't let me discourage you from doing it yourself !!!!!",
                          "url": "https://github.com/idaholab/moose/discussions/18127#discussioncomment-955533",
                          "updatedAt": "2022-07-13T18:09:04Z",
                          "publishedAt": "2021-07-02T08:05:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow - GW eq",
          "author": {
            "login": "MatiasAllay"
          },
          "bodyText": "Dear MOOSE,\nIn think that the equations in the GW documentation miss the source/sink term. Obviously this is well implemented since a pumping test is simulated just bellow. So where are the sources/sink implemented?\nHope that my question makes sense.\nThanks again!!\nMatias",
          "url": "https://github.com/idaholab/moose/discussions/18227",
          "updatedAt": "2023-04-11T16:22:58Z",
          "publishedAt": "2021-07-01T11:18:24Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "There are so many different ways for implementing sources and sinks, depending on the particular physical situation.  For a start, look at https://mooseframework.inl.gov/modules/porous_flow/sinks.html and https://mooseframework.inl.gov/modules/porous_flow/boundaries.html",
                  "url": "https://github.com/idaholab/moose/discussions/18227#discussioncomment-949133",
                  "updatedAt": "2023-04-11T16:23:02Z",
                  "publishedAt": "2021-07-01T11:31:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "Hi Andy,\nThanks, I just wanted to know where are the sources added in the equations.\nAnother related question, the presentation 2 and 3 represent a HM coupled system?",
                          "url": "https://github.com/idaholab/moose/discussions/18227#discussioncomment-949514",
                          "updatedAt": "2023-04-11T16:23:03Z",
                          "publishedAt": "2021-07-01T13:07:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Presentation 2 can be considered a coupled HM system, but note there's no physics prescribed to \"espilon\" - it's just assumed to appear from somewhere.  For a true HM system you'd have to add some TensorMechanics Kernels to calculate stresses, which would give the strain epsilon.\nPresentation >=3 can kind-of be considered a coupled HM system.  \"epsilon\" is implicit inside the Biot Modulus or specific storage, and its only physics is associated with the very simple evolution captured by Eqn(7).  A solid mechanics person would scoff at this, but it's better than nothing, since it describes the impact of changing porepressure on the porosity of the rock matrix.",
                          "url": "https://github.com/idaholab/moose/discussions/18227#discussioncomment-953550",
                          "updatedAt": "2023-04-11T16:23:02Z",
                          "publishedAt": "2021-07-01T22:27:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MatiasAllay"
                          },
                          "bodyText": "Ahhh that makes it pretty clear. Thanks for the great documentation, I also really like the figures.\nMatias",
                          "url": "https://github.com/idaholab/moose/discussions/18227#discussioncomment-955409",
                          "updatedAt": "2023-04-11T16:23:09Z",
                          "publishedAt": "2021-07-02T07:36:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Trouble installing moose - all tests fail",
          "author": {
            "login": "eshemon"
          },
          "bodyText": "Our cluster recently went through an upgrade (I'm mentioning this in case something wonky happened that might be related to this). Anyways, I'm building MOOSE from scratch using https://mooseframework.inl.gov/getting_started/installation/conda.html\nEverything works perfectly/as expected until I execute \"./run_tests -j 4\" at which point all tests fail. The error given for basically all tests is FAILED (Application not found).\nI followed the troubleshooting guide https://mooseframework.inl.gov/help/troubleshooting.html#failingtests. However, the \"Application not found\" issue does not seem to be the problem? Make works, and a valid moose_test-opt is present, which can be executed and run a sample problem. I performed all the debugging in the Build section (hello world, etc). Everything seems fine?\nNeed help understanding why all tests are failing and any suggestions how to fix it. Screen output is attached from the failed tests and debugging attempts...\nmoose_build_errors.txt",
          "url": "https://github.com/idaholab/moose/discussions/17888",
          "updatedAt": "2023-05-05T20:51:19Z",
          "publishedAt": "2021-05-20T03:31:18Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "permcody"
                  },
                  "bodyText": "This is odd. I haven't seen this happen before, but I know that the logic to build or discover what the executable name should be can be fairly complex. It relies on various information from the platform, the directory structure and can be influenced by the \"testroot\" file too. There haven't been any changed merged to the TestHarness or testers in the last 2-3 months.\nWhat I would suggest is that we attempt to printout what the TestHarness \"thinks\" the name of the binary should be and go from there. It appears that much of the logic for figuring out the app name occurs here. Adding a simple print statement after this block should do it:\n\n  \n    \n      moose/python/TestHarness/TestHarness.py\n    \n    \n        Lines 881 to 902\n      in\n      7aeadfc\n    \n  \n  \n    \n\n        \n          \n           ## Save executable-under-test name to self.executable \n        \n\n        \n          \n           exec_suffix = 'Windows' if platform.system() == 'Windows' else '' \n        \n\n        \n          \n           self.executable = app_name + '-' + self.options.method + exec_suffix \n        \n\n        \n          \n           # if the executable has a slash - assume it is a file path \n        \n\n        \n          \n           if '/' in app_name: \n        \n\n        \n          \n               self.executable = os.path.abspath(self.executable) \n        \n\n        \n          \n           # look for executable in PATH - if not there, check other places. \n        \n\n        \n          \n           elif shutil.which(self.executable) is None: \n        \n\n        \n          \n               if os.path.exists(os.getcwd() + '/' + self.executable): \n        \n\n        \n          \n                   # it's in the current working directory \n        \n\n        \n          \n                   self.executable = os.getcwd() + '/' + self.executable \n        \n\n        \n          \n               elif os.path.exists(os.path.join(self._rootdir, self.executable)): \n        \n\n        \n          \n                   # it's in the testroot file's directory \n        \n\n        \n          \n                   self.executable = self.executable \n        \n\n        \n          \n                   # we may be hopping around between multiple (module) \n        \n\n        \n          \n                   # subdirectories of tests - so the executable needs to be an \n        \n\n        \n          \n                   # absolute path. \n        \n\n        \n          \n                   self.executable = os.path.abspath(os.path.join(self._rootdir, self.executable)) \n        \n\n        \n          \n               else: \n        \n\n        \n          \n                   # it's (hopefully) in an installed location \n        \n\n        \n          \n                   mydir = os.path.dirname(os.path.realpath(__file__)) \n        \n\n        \n          \n                   self.executable = os.path.join(mydir, '../../../..', 'bin', self.executable) \n        \n    \n  \n\n\n@aeslaughter or @milljm, any thoughts?",
                  "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-763614",
                  "updatedAt": "2023-05-05T20:51:22Z",
                  "publishedAt": "2021-05-20T14:19:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "OK - I printed self.executable after line 902:\nSTART DEBUG PRINT: TestHarness.py printing self.executable:\nmoose_test-opt\nEND DEBUG PRINT\nIs there supposed to be a path in front of that?",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-763829",
                          "updatedAt": "2023-05-05T20:51:23Z",
                          "publishedAt": "2021-05-20T15:00:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "eshemon"
                  },
                  "bodyText": "Cody suggested running ./run_tests -j4 -v --dry-run to see if the executable path was correct. The running command includes an executable name without a full path - possibly the issue?\ndirackernels/material_point_source.material_point_source_test: Working Directory: /beegfs1/home/eshemon/projects/moose/test/tests/dirackernels/material_point_sour                                                                                                                                     ce\ndirackernels/material_point_source.material_point_source_test: Running command: moose_test-opt -i material_point_source.i --error --error-unused --error-override                                                                                                                                      --no-gdb-backtrace",
                  "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-764155",
                  "updatedAt": "2023-05-05T20:51:23Z",
                  "publishedAt": "2021-05-20T16:01:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Can you provide the results of your environment before running ./run_tests?:\nenv\nI'd like a clear picture as to the environment the TestHarness is seeing.",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-764448",
                          "updatedAt": "2021-05-20T16:52:24Z",
                          "publishedAt": "2021-05-20T16:52:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "Yes, sure. Here is the result of  env\nenv.txt",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-764524",
                          "updatedAt": "2021-05-20T17:09:24Z",
                          "publishedAt": "2021-05-20T17:09:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "permcody"
                          },
                          "bodyText": "Well your PYTHON_PATH isn't set, that was another idea we had.\nI'd like to continue to troubleshoot, but as a quick workaround you might just (temporarily) export the path to the binary you are trying to run. It's a hack but it should make all your tests pass.\nexport PATH=$PATH:/beegfs1/home/eshemon/projects/moose/test/",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-765780",
                          "updatedAt": "2023-05-05T20:51:24Z",
                          "publishedAt": "2021-05-20T22:31:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "Thanks Cody, exporting the path definitely works as a quick workaround. Tests passing now.",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-768187",
                          "updatedAt": "2023-05-05T20:51:24Z",
                          "publishedAt": "2021-05-21T13:17:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "Any update on why this issue was happening and a more permanent fix? I'm happy to debug online via remote call if that's easier.",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-818014",
                          "updatedAt": "2023-05-05T20:51:24Z",
                          "publishedAt": "2021-06-02T21:45:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Your PATH (was) is set to:\nPATH=/home/eshemon/miniconda3/envs/moose/bin:/home/eshemon/miniconda3/condabin:.:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/eshemon/bin\nCan you remove the path to current working directory? :.: Basically make your path's value:\nexport PATH=/home/eshemon/miniconda3/envs/moose/bin:/home/eshemon/miniconda3/condabin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/eshemon/bin\nSometimes there exists aliases, symlinks, or some 'thing' in a current working directory which may end up finding stuff that we don't want. I realize people add a path like this so they don't have to invoke binaries with a prefixed ./, but the trouble this sometimes causes is not worth it. Not sure if this is your issue, but it's worth a shot.",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-820767",
                          "updatedAt": "2023-05-05T20:51:24Z",
                          "publishedAt": "2021-06-03T13:19:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eshemon"
                          },
                          "bodyText": "I forgot to update this conversation, but I wanted to let you know that your suggestion worked. I removed the path to the current working directory and it fixed everything. Thanks for the help.",
                          "url": "https://github.com/idaholab/moose/discussions/17888#discussioncomment-953384",
                          "updatedAt": "2023-05-05T20:51:25Z",
                          "publishedAt": "2021-07-01T21:24:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Altering Solution after solving step",
          "author": {
            "login": "KhaledNabilSharafeldin"
          },
          "bodyText": "Hello,\nI was wondering if there is a way to alter the nonlinear variable solution after the solving step. I'm doing operator splitting on reaction transport model, I have a kernel for transport part, but the reactions part which solves a simple ODE. So I was wondering if there's a way in MOOSE to alter the solution after the transport problem.\nThanks,\nKhaled",
          "url": "https://github.com/idaholab/moose/discussions/18229",
          "updatedAt": "2021-07-25T19:30:33Z",
          "publishedAt": "2021-07-01T17:34:49Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Khaled\nThe canon moose way is to add all kernels and solve the problem without operator splitting.\nThe transport and the reactions, is this for the same variable / quantity?\nIf not, then a transient multiapp and transferring the quantities is a proper way to do this.\nIf they are for the same quantity, then I'd still recommend using a multiapp, but you are going to have to be very careful as to what equation each app is solving and what the final numerical scheme ends up being.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18229#discussioncomment-951788",
                  "updatedAt": "2021-07-01T19:12:43Z",
                  "publishedAt": "2021-07-01T19:05:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "AuxVariables indexing for nodes",
          "author": {
            "login": "KhaledNabilSharafeldin"
          },
          "bodyText": "Hello,\nI am trying to solve a variable that is being locally updated on each node where it accumulates over time and used in the main kernel in my application. The updating of the variable is very simple and i am trying to avoid coupling nonlinear variables as the problem is complex as it is. So i think that using an AuxKernel is the way to go.\nHowever, I am not sure how the nodal variables are accessed in AuxKernels, since _u_old is evaluated at _qp, and I am aware also that there is a _nodal flag for AuxKernels but I still do not know how it is indexed for each node and didn't find examples for it. As far as I have seen in the code is that isNodal() function determines whether _qp=0 but it is not clear how to index different nodes. Also, are the initial conditions for AuxVariables are set to zero by default?\nThis is not a boundary variable, so would you recommend using AuxKernel or Material for this?\nThank you,\nKhaled",
          "url": "https://github.com/idaholab/moose/discussions/18228",
          "updatedAt": "2022-08-05T17:30:59Z",
          "publishedAt": "2021-07-01T15:32:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "If your aux variable is nodal type, e.g. LAGRANGE, the Auxkernel will set the value directly for each node. _qp=0 refers to the node. You can use _current_node->id() to give you the node id.\nIt seems to be correct that IC for aux variables are zero by default.",
                  "url": "https://github.com/idaholab/moose/discussions/18228#discussioncomment-950392",
                  "updatedAt": "2022-08-05T17:30:59Z",
                  "publishedAt": "2021-07-01T15:54:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "is _u_old refer to the nodal values or does it always refer to the qp values. Does it get stored at qp or at nodes for the case of nodal auxVariables.",
                          "url": "https://github.com/idaholab/moose/discussions/18228#discussioncomment-951360",
                          "updatedAt": "2022-08-05T17:32:17Z",
                          "publishedAt": "2021-07-01T17:23:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "For all AuxKernels and Kernels that access Variables and AuxVariables, the size of _u, _u_old, etc will be set automatically depending on if the kernel is nodal or not. That is, if it is nodal it will have a size of 1 (access nodal value at [0]), and if it is not nodal it will have the size of the number of quadrature points on the current element.",
                          "url": "https://github.com/idaholab/moose/discussions/18228#discussioncomment-951367",
                          "updatedAt": "2022-08-05T17:32:17Z",
                          "publishedAt": "2021-07-01T17:25:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Stochastic sampling for a function of boundary condition",
          "author": {
            "login": "purepuremilk-zz"
          },
          "bodyText": "Dear MOOSE team,\nI am trying to use stochastic tool for sampling the boundary condition of my simulations. Instead of sampling a constant value of BC, I am sampling a function parameter \"alpha\" in function 'bc_func' for my BC. However, when I am trying to transfer the sampled values from a uniform distribution to the function parameter, I get an error saying:\n\"The desired parameter 'The desired parameter 'Functions/bc_func/vals' was not located for the 'stochastic' object, it either does not exist or has not been declared as controllable.\"\nCould someone please help resolve this issue?\nFollows are more details of my input. For the simulation input, I am using the ParsedFunction for the function of boundary condition:\n[Functions] [./bc_func] type = ParsedFunction value = sin(alpha*t)+1 vars = 'alpha' vals = 0.05 [../] []\nThis ParsedFunction is later called in the boundary condition:\n[BCs] [top] type = FunctionDirichletBC variable = T boundary = 'top' function = bc_func [] []\nThe simulation runs fine. The error appears when I try to run with stochastic too. In the master input, I have a transfer block:\n[Transfers] [parameters] type = SamplerParameterTransfer multi_app = runner sampler = hypercube parameters = 'Materials/constant/prop_values BCs/bottom/value Functions/bc_func/vals Kernels/source/value' to_control = 'stochastic' [] []",
          "url": "https://github.com/idaholab/moose/discussions/18205",
          "updatedAt": "2022-06-12T21:39:10Z",
          "publishedAt": "2021-06-29T21:50:47Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "The error message tells that the vals has not been declared as controllable.\nYou can use MultiAppCommandLineControl  and we discuss that a bit in #18046",
                  "url": "https://github.com/idaholab/moose/discussions/18205#discussioncomment-940482",
                  "updatedAt": "2022-06-12T21:39:11Z",
                  "publishedAt": "2021-06-29T22:00:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Another option would be to make this parameter controllable, but requires a change to MOOSE.\nhttps://mooseframework.inl.gov/moose/syntax/Controls/index.html",
                          "url": "https://github.com/idaholab/moose/discussions/18205#discussioncomment-944323",
                          "updatedAt": "2022-06-12T21:39:10Z",
                          "publishedAt": "2021-06-30T16:27:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}