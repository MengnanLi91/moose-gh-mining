{
  "discussions": {
    "pageInfo": {
      "hasNextPage": false,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMC0wOC0yNFQxODo1NDo0OS0wNTowMM07GQ=="
    },
    "edges": [
      {
        "node": {
          "title": "Reporter system, JSON library, and Geochemistry module help",
          "author": {
            "login": "aeslaughter"
          },
          "bodyText": "@WilkAndy I hoping you could help me with a problem I am seeing with the geochemistry module. I am working on creating a new system: Reporter system. This is a generalization of the Postprocessor and VectorPostprocessor system to allow for arbitrary types. This new system includes JSON output to handle complex/arbitrary types. To facility the JSON output I am changing the underlying library we use for JSON support.\nI have attempted to update the geochemistry module to use this new library, but I have one test still failing and was hoping you could take a look. The offending test is a CSVDIFF and the values are completely different.\n    DIFF FAILED (CSVDIFF) test:time_dependent_reactions.cooling\n\nIf you have time you can take a look? You can get the code here: https://github.com/aeslaughter/moose/tree/reporter-11323",
          "url": "https://github.com/idaholab/moose/discussions/15796",
          "updatedAt": "2022-07-05T19:00:24Z",
          "publishedAt": "2020-09-03T00:48:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Sure, where do i see the diffs?  I don't think i have time to pull from your branch and recompile - it takes my computer about an hour usually and i don't have that time to spare.",
                  "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-60882",
                  "updatedAt": "2022-07-05T19:00:23Z",
                  "publishedAt": "2020-09-03T07:59:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Here is the diff, unfortunately they are completely different. I will keep digging, but if you have any insight that would be great.\n$ diff cooling_out.csv gold/cooling_out.csv \n4,31c4,31\n< 10,11.54141898215,0.77688728905613,15.590522755031,8.4032251924934,290\n< 20,8.200363308286,0,18.125665406182,9.9379916370605,280\n< 30,6.0820051794106,0,19.449799930141,10.742118727918,270\n< 40,4.7302780001717,0,20.294768075156,11.257647043208,260\n< 50,3.9779908582935,0,20.765068476027,11.547403042803,250\n< 60,3.5985924568425,0,21.002295439433,11.696687568705,240\n< 70,3.4191948121143,0,21.114504785601,11.770578876017,230\n< 80,3.3378110969368,0,21.165441499485,11.807420839502,220\n< 90,3.3019145211899,0,21.187939575272,11.82692029575,210\n< 100,3.2864158074652,0,21.197685017782,11.838460932358,200\n< 110,3.2798558027864,0,21.201844567032,11.846312007676,190\n< 120,3.2771504141633,0,21.203599298688,11.852361497845,180\n< 130,3.2760886772454,0,21.204332542889,11.857432022236,170\n< 140,3.2757210088493,0,21.204636559725,11.861883705647,160\n< 150,3.2756398951534,0,21.204761802814,11.865880933997,150\n< 160,3.275666891023,0,21.204813125078,11.869506386651,140\n< 170,3.2757223595362,0,21.204834063846,11.872806044249,130\n< 180,3.2757830691759,0,21.204842575292,11.875798942324,120\n< 190,3.2759019342859,0,21.20484602432,11.878455598302,110\n< 200,3.276323223148,0,21.20484741808,11.880616534481,100\n< 210,3.2778256152027,0,21.204847979852,11.881758265474,90\n< 220,3.282645136094,0,21.204848205703,11.880366121524,80\n< 230,3.2968116661229,0,21.204848296257,11.872346226888,70\n< 240,3.3356640026972,0,21.204848332454,11.847275733682,60\n< 250,3.4356335479374,0,21.20484834687,11.780389215187,50\n< 260,3.6754243418668,0,21.204848352583,11.618173590003,40\n< 270,4.2010615890797,0,21.204848354828,11.261331280116,30\n< 275,4.634744053004,0,21.204848355364,10.966626741676,25\n---\n> 10,18.94173279687,11.148792954471,4.9998037774527,2.0048258790889,290\n> 20,17.924766315917,12.25305816618,5.0001605211656,2.011190510366,280\n> 30,16.951632494155,13.309767095694,5.0004907970772,2.0186255929182,270\n> 40,16.023798980675,14.31732819853,5.0007887751934,2.0267544239692,260\n> 50,15.141901107302,15.275055487346,5.0010498588671,2.0352531945155,250\n> 60,14.305960764259,16.182928567974,5.001271619614,2.0438577990397,240\n> 70,13.515579338177,17.041380464231,5.0014542002143,2.0523642994991,230\n> 80,12.77010288991,17.851116990883,5.0016001651923,2.0606243512705,220\n> 90,12.068757946346,18.612969725984,5.0017139045309,2.0685373789824,210\n> 100,11.410756583384,19.327783439827,5.0018007915981,2.0760412843555,200\n> 110,10.795370054751,19.996338011507,5.0018663266297,2.0831030930646,190\n> 120,10.221970976376,20.619304210294,5.001915455968,2.0897104594609,180\n> 130,9.6900449650207,21.197232047494,5.0019521678553,2.0958645060896,170\n> 140,9.1991736714807,21.73056955266,5.0019793678177,2.1015741448883,160\n> 150,8.7489923680173,22.219708690819,5.0019989661355,2.1068518228424,150\n> 160,8.3391266409887,22.665053697752,5.0020120826121,2.1117105413328,140\n> 170,7.9691142411778,23.067105458274,5.0020192843129,2.1161619817061,130\n> 180,7.6383196178186,23.426553885876,5.0020208021368,2.1202155889427,120\n> 190,7.345849885228,23.744368868838,5.0020167035717,2.1238784846703,110\n> 200,7.0904816533878,24.021879568356,5.0020070207392,2.1271560780064,100\n> 210,6.8706079839728,24.260832022435,5.0019918424899,2.1300532155418,90\n> 220,6.6842134448703,24.463416377556,5.0019713800385,2.1325756823356,80\n> 230,6.5288826959783,24.632257726602,5.0019460121471,2.1347318754288,70\n> 240,6.4018443707786,24.770368332619,5.0019163118179,2.1365345400957,60\n> 250,6.3000477565976,24.881063558871,5.0018830536164,2.1380024971196,50\n> 260,6.22026586412,24.967848471292,5.0018471994731,2.1391620745239,40\n> 270,6.1592157092931,25.034286063106,5.0018098609538,2.140047441393,30\n> 275,6.1347049796925,25.060970134853,5.0017910086353,2.1403997366763,25",
                          "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61015",
                          "updatedAt": "2022-07-05T19:00:23Z",
                          "publishedAt": "2020-09-03T14:35:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Here is the complete diff of the geochemistry module code, I am going through it again to see if I can figure out what I messed up.\nreporter.log",
                          "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61039",
                          "updatedAt": "2022-07-05T19:00:27Z",
                          "publishedAt": "2020-09-03T15:03:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "By the way, you might like to run\ncd geochemistry/test/tests/time_dependent_reactions/\n cooling.i\ncp cooling_out.csv gold/.\npython cooling.py\nto compare your results with the \"gold standard\" GWB software.",
                  "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-60902",
                  "updatedAt": "2022-07-05T19:00:27Z",
                  "publishedAt": "2020-09-03T08:55:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "I did something wrong:",
                          "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61020",
                          "updatedAt": "2022-07-05T19:00:27Z",
                          "publishedAt": "2020-09-03T14:37:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "On another note, the geochemistry/unit seems to have a segfault on upstream/next (166c9f3).\n/Users/slauae/projects/moose2/modules/geochemistry/unit\n$ lldb -- ./geochemistry-unit-devel\n(lldb) target create \"./geochemistry-unit-devel\"\nCurrent executable set to './geochemistry-unit-devel' (x86_64).\n(lldb) b MPI_Abort\nBreakpoint 1: where = libmpi.12.dylib`MPI_Abort, address = 0x000000000004fbb0\n(lldb) r\nProcess 79850 launched: '/Users/slauae/projects/moose2/modules/geochemistry/unit/geochemistry-unit-devel' (x86_64)\nProcess 79850 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x2e0)\n    frame #0: 0x0000000108c22959 libopenblasp-r0.3.8.dylib`dnrm2_ + 25\nlibopenblasp-r0.3.8.dylib`dnrm2_:\n->  0x108c22959 <+25>: movq   0x2e0(%rax), %rax\n    0x108c22960 <+32>: popq   %rbp\n    0x108c22961 <+33>: jmpq   *%rax\n    0x108c22963 <+35>: xorps  %xmm0, %xmm0\nTarget 0: (geochemistry-unit-devel) stopped.\n(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x2e0)\n  * frame #0: 0x0000000108c22959 libopenblasp-r0.3.8.dylib`dnrm2_ + 25\n    frame #1: 0x000000010bea2a14 libopenblasp-r0.3.8.dylib`dlarfg_ + 68\n    frame #2: 0x000000010be3a249 libopenblasp-r0.3.8.dylib`dgebd2_ + 505\n    frame #3: 0x000000010be3adc6 libopenblasp-r0.3.8.dylib`dgebrd_ + 1766\n    frame #4: 0x000000010be5140b libopenblasp-r0.3.8.dylib`dgesvd_ + 6667\n    frame #5: 0x0000000102bb5018 libmesh_dbg.0.dylib`libMesh::DenseMatrix<double>::_svd_helper(char, char, std::__1::vector<double, std::__1::allocator<double> >&, std::__1::vector<double, std::__1::allocator<double> >&, std::__1::vector<double, std::__1::allocator<double> >&) + 680\n    frame #6: 0x0000000102bb5377 libmesh_dbg.0.dylib`libMesh::DenseMatrix<double>::_svd_lapack(libMesh::DenseVector<double>&, libMesh::DenseMatrix<double>&, libMesh::DenseMatrix<double>&) + 311\n    frame #7: 0x0000000102badedd libmesh_dbg.0.dylib`libMesh::DenseMatrix<double>::svd(libMesh::DenseVector<double>&, libMesh::DenseMatrix<double>&, libMesh::DenseMatrix<double>&) + 45\n    frame #8: 0x00000001005232a0 libgeochemistry-devel.0.dylib`GeochemistrySpeciesSwapper::constructInverseMatrix(this=<unavailable>, mgd=<unavailable>, basis_index_to_replace=<unavailable>, eqm_index_to_insert=<unavailable>) at GeochemistrySpeciesSwapper.C:92:18 [opt]\n    frame #9: 0x000000010050e68c libgeochemistry-devel.0.dylib`GeochemistrySpeciesSwapper::performSwap(this=0x00000001003af7f8, mgd=0x00000001003afca8, replace_this=\"Ca++\", with_this=\"Calcite\") at GeochemistrySpeciesSwapper.C:119:3 [opt]\n    frame #10: 0x000000010050c45a libgeochemistry-devel.0.dylib`GeochemicalSystem::checkAndInitialize(this=<unavailable>, kin_name=<unavailable>, kin_initial_moles=<unavailable>) at GeochemicalSystem.C:175:16 [opt]\n    frame #11: 0x000000010050db21 libgeochemistry-devel.0.dylib`GeochemicalSystem::GeochemicalSystem(this=0x00000001003b4170, mgd=<unavailable>, gac=<unavailable>, is=<unavailable>, swapper=<unavailable>, swap_out_of_basis=<unavailable>, swap_into_basis=size=1, charge_balance_species=\"H+\", constrained_species=size=4, constraint_value=size=4, constraint_meaning=size=4, initial_temperature=25, iters_to_make_consistent=0, min_initial_molality=0.0000000000000000000099999999999999995, kin_name=size=0, kin_initial_moles=size=0) at GeochemicalSystem.C:136:3 [opt]\n    frame #12: 0x00000001001c8ece libgeochemistry-unit-devel.0.dylib`_GLOBAL__sub_I_GeochemicalSystemTest.C [inlined] __cxx_global_var_init.788 at GeochemicalSystemTest.C:38:25 [opt]\n    frame #13: 0x00000001001c8c0f libgeochemistry-unit-devel.0.dylib`_GLOBAL__sub_I_GeochemicalSystemTest.C at GeochemicalSystemTest.C:0 [opt]\n    frame #14: 0x000000010002515d dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) + 539\n    frame #15: 0x0000000100025582 dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) + 40\n    frame #16: 0x000000010001fdc7 dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 493\n    frame #17: 0x000000010001fd32 dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 344\n    frame #18: 0x000000010001de58 dyld`ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 188\n    frame #19: 0x000000010001def8 dyld`ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) + 82\n    frame #20: 0x000000010000c6b1 dyld`dyld::initializeMainExecutable() + 199\n    frame #21: 0x0000000100011cd0 dyld`dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 6797\n    frame #22: 0x000000010000b227 dyld`dyldbootstrap::start(dyld3::MachOLoaded const*, int, char const**, dyld3::MachOLoaded const*, unsigned long*) + 453\n    frame #23: 0x000000010000b025 dyld`_dyld_start + 37\n(lldb) q",
                  "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61028",
                  "updatedAt": "2022-07-05T19:00:27Z",
                  "publishedAt": "2020-09-03T14:50:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks for that.  it needs a bit more digging to fix, which is a bit complicated since i don't get failures on any of my systems.....   In geochemistry there are a tonne of unit tests, which really need to be checked by CIVET so ensure everything is OK with all architectures/compilers.\na",
                          "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61221",
                          "updatedAt": "2022-07-05T19:00:27Z",
                          "publishedAt": "2020-09-03T20:33:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "OK, the json problem is almost definitely that it's not parsing the \"note\" in the following correctly.\n    \"Al13O4(OH)24(7+)\": {\n      \"species\": {\n        \"Al+++\": 13.0,\n        \"H+\": -32.0,\n        \"H2O\": 28.0\n      },\n      \"charge\": 7.0,\n      \"radius\": 11.0,\n      \"molecular weight\": 822.9328,\n      \"logk\": [\n        125.1868,\n        98.7072,\n        61.6358,\n        19.2684,\n        -33.6908,\n        -86.65,\n        -139.6092,\n        -192.5684\n      ],\n      \"note\": \"Missing array values in original database have been filled using a linear fit. Original values are [125.1868, 98.7072, 500.0000, 500.0000, 500.0000, 500.0000, 500.0000, 500.0000]\"\n    },\n\nThese lines of C++ are not working properly:\n    if (_root[\"secondary species\"][name].isMember(\"note\"))\n      _root[\"secondary species\"].removeMember(name);\n}",
                  "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61214",
                  "updatedAt": "2022-07-05T19:00:28Z",
                  "publishedAt": "2020-09-03T20:26:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "That did the trick. I was removing elements while iterating. You are my friend.",
                          "url": "https://github.com/idaholab/moose/discussions/15796#discussioncomment-61226",
                          "updatedAt": "2022-07-05T19:00:28Z",
                          "publishedAt": "2020-09-03T20:41:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Evolving Dirichlet and Neumann boundary with respect to time",
          "author": {
            "login": "sahu15"
          },
          "bodyText": "Dear MOOSE team,\nI am using KKS example in phase field module to simulate microstructure evolution. I have a generated 3D mesh in MOOSE with a user-defined sideset ( the red patch). I have applied dirichlet boundary on the red patch and Neumann boundary condition ( Flux=0 ) everywhere else in the boundary (top, bottom, left, right , front, back).\nNow during my simulation, I want to change the radius of the red patch as a function of time depending upon the evolution of field variables within my system. Could you provide any suggestions to accomplish this?\n\nRegards,\nSarita",
          "url": "https://github.com/idaholab/moose/discussions/15783",
          "updatedAt": "2022-06-22T07:38:58Z",
          "publishedAt": "2020-08-24T16:13:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "You can create a new integrated BC that on the entire boundary. For the points within the radius, you can apply the Dirichlet condition weakly (check out PenaltyDirichletBC). And you apply Neumann BC elsewhere. You can make radius as a function of time.",
                  "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-55656",
                  "updatedAt": "2022-06-22T09:25:20Z",
                  "publishedAt": "2020-08-24T16:53:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sahu15"
                          },
                          "bodyText": "Hi Yaqi,\nThank you for the suggestion. I will try it out.\nRegards,\nSarita",
                          "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-55927",
                          "updatedAt": "2022-06-22T09:25:45Z",
                          "publishedAt": "2020-08-25T01:24:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sahu15"
                          },
                          "bodyText": "Hi Yaqi,\nI am creating \"ADMixedDirichletBC\" class to enforce the boundary condition I described earlier. In the computeQpResidual() function, I  need the x and y coordinates of the current quadrature point(_qp). I know my xo, yo and ro.   How to extract x and y co-ordinates from _qp object ? I tried to refer to the workshop video, but I could not find it.\nRegards,\nSarita",
                          "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-56506",
                          "updatedAt": "2022-06-22T09:25:45Z",
                          "publishedAt": "2020-08-25T15:51:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sahu15"
                          },
                          "bodyText": "Also, I am using \"ADPenaltyDirichlet.C\" as my template. So _p and _v are my penalty factor and boundary value, repectively.",
                          "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-56512",
                          "updatedAt": "2022-06-22T09:25:51Z",
                          "publishedAt": "2020-08-25T15:58:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "_q_point[_qp] holds the coordinates of the quadrature point. _normals[_qp] is for outward unit norm, which could be useful for you. _current_boundary_id is the boundary ID of the boundary.",
                          "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-56550",
                          "updatedAt": "2022-06-22T09:27:26Z",
                          "publishedAt": "2020-08-25T16:59:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sahu15"
                          },
                          "bodyText": "Thank you, Yaqi!",
                          "url": "https://github.com/idaholab/moose/discussions/15783#discussioncomment-56556",
                          "updatedAt": "2022-06-22T09:27:26Z",
                          "publishedAt": "2020-08-25T17:09:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "use postprocessor value in ParsedMaterial?",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "I'd like to use a postprocessor value in my ParsedMaterial. I tried to put the name in the 'args' list but that didn't work because it seems to be looking for variables. I suppose I could make an AuxVariable that holds the postprocessor value everywhere, but that seems to be a bit overkill. Is there a better way?",
          "url": "https://github.com/idaholab/moose/discussions/15784",
          "updatedAt": "2022-06-23T16:07:01Z",
          "publishedAt": "2020-08-24T16:30:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "No, there isn't a better way yet, sorry. It would not be hard to add that capability though.",
                  "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55696",
                  "updatedAt": "2022-06-23T16:07:01Z",
                  "publishedAt": "2020-08-24T17:39:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "tophmatthews"
                  },
                  "bodyText": "What about holding the postprocessor as a function instead of an aux? Still an extra step, but at least it's not an aux defined everywhere?",
                  "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55700",
                  "updatedAt": "2022-06-23T16:07:01Z",
                  "publishedAt": "2020-08-24T17:41:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Makes sense \ud83d\udc4d",
                          "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55713",
                          "updatedAt": "2022-06-23T16:07:03Z",
                          "publishedAt": "2020-08-24T17:57:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Well, that's a possibility, but it doesn't really answer the question, because to get a Function value into a ParsedMaterial you'd have to use another step - either FunctionAux or GenericFunctionMaterial :-D (the latter would be more memory efficient)",
                          "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55854",
                          "updatedAt": "2022-06-23T16:07:03Z",
                          "publishedAt": "2020-08-24T22:33:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tophmatthews"
                          },
                          "bodyText": "oh ya...what a pain...",
                          "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55856",
                          "updatedAt": "2022-06-23T16:07:03Z",
                          "publishedAt": "2020-08-24T22:36:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "To make this a markable answer: Use a GenericFunctionMaterial to capture the PostProcessor value and add it to ParsedMaterial using the material_property_names parameter.",
                  "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55857",
                  "updatedAt": "2022-06-23T16:07:03Z",
                  "publishedAt": "2020-08-24T22:36:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "tophmatthews"
                          },
                          "bodyText": "Or bug @dschwen enough until he adds the capability you need :)",
                          "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55858",
                          "updatedAt": "2022-06-23T16:07:05Z",
                          "publishedAt": "2020-08-24T22:37:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "I ended up using @tophmatthews 's suggestion because what I was actually, secretly doing was using the material to mark a region either 0 or 1 and then integrating that material with a postprocessor to find the area fraction of that marker, then normalize that value by another postprocessor. Dividing the area fraction postprocessor value by the other in a ParsedFunction was all that was required. Guess I should have been more clear on what I was after. Though to @dschwen 's credit, using the GenericFunctionMaterial would have worked too. Both require an extra step.\nWhat would also be neat is a ParsedPostprocessor where I can just divide the two postprocessors directly instead of making the intermediate function. Then you might be able to get rid of Difference, LinearCombination, and Scale postprocessors, and maybe a few others.",
                          "url": "https://github.com/idaholab/moose/discussions/15784#discussioncomment-55905",
                          "updatedAt": "2022-06-23T16:07:03Z",
                          "publishedAt": "2020-08-24T23:54:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}