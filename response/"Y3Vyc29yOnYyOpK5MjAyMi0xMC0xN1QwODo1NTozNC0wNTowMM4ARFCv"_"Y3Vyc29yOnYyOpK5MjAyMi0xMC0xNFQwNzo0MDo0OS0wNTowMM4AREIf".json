{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0xMC0xNFQwNzo0MDo0OS0wNTowMM4AREIf"
    },
    "edges": [
      {
        "node": {
          "title": "Loading solutions from two different exodus files",
          "author": {
            "login": "mangerij"
          },
          "bodyText": "Is it possible to load in two exodus files (say A.e and B.e) and take\nvar1 var2 var3 from A.e\nvar4 var5 var6 from B.e as an initial condition (using restart)\n?",
          "url": "https://github.com/idaholab/moose/discussions/22418",
          "updatedAt": "2022-10-22T00:04:12Z",
          "publishedAt": "2022-10-17T08:41:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nnot directly. But you can do it with a multiapps and transfer the initialized quantities\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22418#discussioncomment-3896013",
                  "updatedAt": "2022-10-17T12:16:10Z",
                  "publishedAt": "2022-10-17T12:16:09Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I guess alternatively you can add as many SolutionUserobjects as you want... Then use SolutionAux to initialize these variables at INITIAL.",
                          "url": "https://github.com/idaholab/moose/discussions/22418#discussioncomment-3896648",
                          "updatedAt": "2022-10-17T13:37:56Z",
                          "publishedAt": "2022-10-17T13:37:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Integrating moose based app into our online calculation platform",
          "author": {
            "login": "Chaoyue-Liu"
          },
          "bodyText": "Hello Moose Team,\nWe are currently developing an online calculation website which consists of several models developed by our research team. The website is nonprofitable platform, which is open to everyone to access and do the calculation with the model we provide. Because Moose is an open-source code, we are considering to build one of our model with Moose and integrate it to our platform. We want to know if this is under the permission of the Moose license?\nThank you!",
          "url": "https://github.com/idaholab/moose/discussions/22406",
          "updatedAt": "2022-10-17T07:58:29Z",
          "publishedAt": "2022-10-14T18:35:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@friedmud\nYes, LGPL 2.1 will allow that",
                  "url": "https://github.com/idaholab/moose/discussions/22406#discussioncomment-3881530",
                  "updatedAt": "2022-10-14T18:44:10Z",
                  "publishedAt": "2022-10-14T18:44:09Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "Thank you. Another question, are we obliged to make our app code open source too?",
                          "url": "https://github.com/idaholab/moose/discussions/22406#discussioncomment-3881565",
                          "updatedAt": "2022-10-14T18:51:48Z",
                          "publishedAt": "2022-10-14T18:51:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "LGPL does not enforce that.\nit s the straight GPL that does that.",
                          "url": "https://github.com/idaholab/moose/discussions/22406#discussioncomment-3881897",
                          "updatedAt": "2022-10-14T19:56:28Z",
                          "publishedAt": "2022-10-14T19:56:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "OK, Thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/22406#discussioncomment-3893894",
                          "updatedAt": "2022-10-17T07:58:26Z",
                          "publishedAt": "2022-10-17T07:58:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Unable to build moose.",
          "author": {
            "login": "Edward-Eth"
          },
          "bodyText": "",
          "url": "https://github.com/idaholab/moose/discussions/22369",
          "updatedAt": "2022-10-17T07:53:33Z",
          "publishedAt": "2022-10-11T14:58:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is indeed the problem, you need to update libmesh.\nMaybe there is a LIBMESH_DIR variable set that is preventing finidng the new version?\nCan you remove moose/libmesh then try to update again?\nwhat does echo $LIBMESH_DIR return?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851621",
                  "updatedAt": "2022-10-11T15:05:43Z",
                  "publishedAt": "2022-10-11T15:05:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": ".",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851698",
                          "updatedAt": "2022-10-17T08:00:01Z",
                          "publishedAt": "2022-10-11T15:11:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no this is very problematic.\nYou can either have libmesh ithrough conda or through a manual install with the update_and_rebuild script not both\nIf you want to use conda, just mamba update --all",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851728",
                          "updatedAt": "2022-10-11T15:13:51Z",
                          "publishedAt": "2022-10-11T15:13:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Is there anyway to remove the libmesh installed by update_and_rebuild?",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851810",
                          "updatedAt": "2022-10-11T15:21:14Z",
                          "publishedAt": "2022-10-11T15:21:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "rm moose/libmesh -rf",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851858",
                          "updatedAt": "2022-10-11T15:23:27Z",
                          "publishedAt": "2022-10-11T15:23:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "I have performed this and mamba update --all and still get the same errors when I make -j8, even after a clobberall",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3851920",
                          "updatedAt": "2022-10-11T15:28:36Z",
                          "publishedAt": "2022-10-11T15:28:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok then your mamba is not updating properly\nthis can happen as dependency resolution can prevent updates.\nUnless mamba list shows you have a libmesh from September, I would remove the conda environment and re-install it",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3852013",
                          "updatedAt": "2022-10-11T15:37:08Z",
                          "publishedAt": "2022-10-11T15:37:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Yeah my mamba wasn't updating the libmesh version for some reason, removing the environment and recreating it has fixed the issue. Thanks for the help!",
                          "url": "https://github.com/idaholab/moose/discussions/22369#discussioncomment-3852297",
                          "updatedAt": "2022-10-11T16:07:14Z",
                          "publishedAt": "2022-10-11T16:07:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "solution type",
          "author": {
            "login": "dingqiushi"
          },
          "bodyText": "I would like to know whether the expression of the solution is of nodal or modal type. With my current knowledge of the code, I think the type of the variable in the configuration file is nodal when set to lagrange and modal when set to monomial. I don't know if I understand this correctly. Is there a specific document that says something about nodal\nrepresentation and modal representation?",
          "url": "https://github.com/idaholab/moose/discussions/22412",
          "updatedAt": "2022-10-22T00:04:04Z",
          "publishedAt": "2022-10-16T11:28:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere's a lot of finite element families supported and whether a variable is 'nodal' or 'elemental' isnt always the best description as a variable can have degrees of freedom on both nodes and elements (especially as libmesh often stores shared dofs whether nodal, edge or face-based dofs, on the nodes).\nI dont think we have a documentation page on all the families supported. There's an enum there:\nhttps://libmesh.github.io/doxygen/namespacelibMesh.html#abcdbcd8364bf9fb7a67b3b4013031b2d\nThe nodal ones are lagrange and hierarchic iirc.\nWithin the code, you can perform a call to var->isNodal() (from a MooseVariable* pointer) to see if a variable is nodal\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22412#discussioncomment-3892207",
                  "updatedAt": "2022-10-17T02:16:53Z",
                  "publishedAt": "2022-10-17T02:15:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about the INSBase.c file",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Hello, I am learning the INSBase.C. But I find the following information. I donot understand why there is a difference when we want to couple velocity and pressure? Why not using   params.addRequiredCoupledVar(\"p\", \"pressure\"); ?\n// Coupled variables\nparams.addRequiredCoupledVar(\"u\", \"x-velocity\");\nparams.addCoupledVar(\"v\", 0, \"y-velocity\"); // only required in 2D and 3D\nparams.addCoupledVar(\"w\", 0, \"z-velocity\"); // only required in 3D\nparams.addRequiredCoupledVar(NS::pressure, \"pressure\");\nparams.addDeprecatedCoupledVar(\"p\", NS::pressure, \"1/1/2022\");\nThanks a lot.",
          "url": "https://github.com/idaholab/moose/discussions/22416",
          "updatedAt": "2022-10-22T00:03:47Z",
          "publishedAt": "2022-10-16T18:23:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe are requiring pressure with this line, and it's a coupled variable the same way as velocity\n  params.addRequiredCoupledVar(NS::pressure, \"pressure\");\n\nThis other line is for a deprecated old name for the parameter (just p instead of pressure)\nparams.addDeprecatedCoupledVar(\"p\", NS::pressure, \"1/1/2022\");\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22416#discussioncomment-3891883",
                  "updatedAt": "2022-10-17T00:55:28Z",
                  "publishedAt": "2022-10-17T00:55:27Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "finite element method works in moose",
          "author": {
            "login": "Joseph-0123"
          },
          "bodyText": "Dear all, could you please help with the following questions\uff1a\n\n\nhow does the finite element method works in moose? for example, if we have a 1D domain with 5 global nodes, now we need to solve two different equations such as the mass equation and the Navier stokes equation. In the end, we will sum up all the residuals from two equations together such that residual from eq 1+residual from eq 2=0 ?\n\n\nSimilarly, if we have momentum equations in 3 directions, will we sum up all residuals from 3 directions and let it =0?\n\n\nIn the Navier stokes equation, we may have a double derivative of velocity in the viscous term, after we multiply the test function, we still have a gradient of velocity which is one variable I want to solve. whenever I use _grad_u to represent it, moose tells me some error. Is it because the grad_u (gradient of velocity) is a tensor since velocity is a tensor?\n\n\nThanks a lot.\nJ",
          "url": "https://github.com/idaholab/moose/discussions/22333",
          "updatedAt": "2022-10-16T02:48:12Z",
          "publishedAt": "2022-10-07T22:01:22Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNo sum of residuals involved. The residuals are a field for each equation\nMaybe this documentation page will help\nhttps://mooseframework.inl.gov/source/systems/NonlinearSystem.html#newtons_method\n_grad_u is of the type you specified in the header of the source file.\nIf u is the whole velocity vector, then yes it s a tensor.\nIf u is just a component, then grad_u can be a vector\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3826201",
                  "updatedAt": "2022-10-10T13:40:39Z",
                  "publishedAt": "2022-10-07T22:13:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "Hello\nNo sum of residuals involved. The residuals are a field for each equation Maybe this documentation page will help https://mooseframework.inl.gov/source/systems/NonlinearSystem.html#newtons_method\n_grad_u is of the type you specified in the header of the source file. If u is the whole velocity vector, then yes it s a tensor. If u is just a component, then grad_u can be a vector\nGyukkayne\n\nThanks for your answers, Gyukkayne. I learned an INSADMaterial in navier_stokes module of MOOSE.\n_INSADMaterial::INSADMaterial(const InputParameters & parameters)\n  : Material(parameters),\n    _velocity(adCoupledVectorValue(\"velocity\")),\n    _grad_velocity(adCoupledVectorGradient(\"velocity\")),_\n\nHere. the _velocity and _grad_velocity are all Vectors. It may not match the 'If u is the whole velocity vector, then yes it s a tensor.' Is it correct ? Thanks.\nJ",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3837774",
                          "updatedAt": "2022-10-10T13:41:00Z",
                          "publishedAt": "2022-10-10T09:39:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "See the doxygen for that adCoupledVectorGradient\nconst\u00a0ADVectorVariableGradient\u00a0& | adCoupledVectorGradient\u00a0(const std::string &var_name, unsigned\u00a0int\u00a0comp=0) const\n\nThen clicking on the return type:\nhttps://mooseframework.inl.gov/docs/doxygen/moose/MooseTypes_8h.html#ac94e300de96c5e84492712644437fcb9\nIt is a tensor.",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3839561",
                          "updatedAt": "2022-10-10T13:45:07Z",
                          "publishedAt": "2022-10-10T13:44:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "See the doxygen for that adCoupledVectorGradient\nconst\u00a0ADVectorVariableGradient\u00a0& | adCoupledVectorGradient\u00a0(const std::string &var_name, unsigned\u00a0int\u00a0comp=0) const\n\nThen clicking on the return type: https://mooseframework.inl.gov/docs/doxygen/moose/MooseTypes_8h.html#ac94e300de96c5e84492712644437fcb9 It is a tensor.\n\nGood, Guillaume. Thank you.\nToday I learn the navier_stokes. I find that there are two methods used to write the kernels for incompressible and compressible fluids in the navier_stokes module.\n\n\nUsing ADKernels. In the related ADkernels, the velocity is a vector and is not defined as 3 components.  The strong form residuals are defined as properties in the Materials and are directly used in the related ADKernels.\n\n\nUsing Kernels. In the related kernels, the velocity is a vector and defined as 3 components.  Each component is a scalar. The weak form residuals are written in the related Kernels.\n\n\nI find that the incompressible fluid has the above two methods, but the compressible fluid only has the Kernel method. So I have questions about them.\n\nInCompressible fluid\n\n(1) Is there some difference between the two methods used for incompressible fluid besides their intrinsic differences (e.g., the ADkernel doesn't need the hand-coded Jacobian, etc)?\n(2) How could I choose them? Is the ADkernels with strong form residuals better than the Kernels with weak form residuals?\n\nCompressible fluid\n\nCan the ADKernels method with strong form residual be used for compressible fluid? How could I choose between the strong form residual and weak form residual if I use ADkernel method?\nThanks for your help.\nJ",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3841633",
                          "updatedAt": "2022-10-10T19:16:11Z",
                          "publishedAt": "2022-10-10T17:45:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So whether a vector or 3 components are used is completely an implementation choice. We generally prefer using vectors for velocity, but it required more work.\nAnything AD does not need to use a hand coded jacobian. That is the point of automatic differentiation, to be able to compute the derivatives of the residual to form the Jacobian.\nADKernels still use the weak form. What you are seeing creating the strong form residual is for the purpose of SUPG stabilization. The weak form is still used for most of the solve\nI recommend using ADKernels and implenenting the weak form",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3844724",
                          "updatedAt": "2022-10-11T04:00:37Z",
                          "publishedAt": "2022-10-11T04:00:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "We generally prefer using vectors for velocity, but it required more work.\n\nThanks, Guillaume.  I am using the ADKernels and implementing the weak form for my problem.\n'We generally prefer using vectors for velocity, but it required more work.'  Sorry, I don't understand what 'more work' means here.\nJ",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3851804",
                          "updatedAt": "2022-10-11T15:20:57Z",
                          "publishedAt": "2022-10-11T15:20:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "In MOOSE we started by developing regular field variables. Vector variables came later and needed more development to work.",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3851869",
                          "updatedAt": "2022-10-11T15:24:23Z",
                          "publishedAt": "2022-10-11T15:24:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "In MOOSE we started by developing regular field variables. Vector variables came later and needed more development to work.\n\nHello, Guillaume. I am learning the NSMomentumInviscidFlux.C\n. I find that the following content.\nReal\nNSMomentumInviscidFlux::computeQpResidual()\n{\n// For _component = k,\n// (rhou) * u_k = (rhou_k) * u <- we write it this way\nRealVectorValue vec(_u[_qp] * _u_vel[_qp],  // (U_k) * u_1\n_u[_qp] * _v_vel[_qp],  // (U_k) * u_2\n_u[_qp] * _w_vel[_qp]); // (U_k) * u_3\n// (rho*u_k) * u + e_k * P [ e_k = unit vector in k-direction ]\nvec(_component) += _pressure[_qp];\n// -((rho*u_k) * u + e_k * P) * grad(phi)\nreturn -(vec * _grad_test[_i][_qp]);\n}\nFor example, if the component is 0, it means that _u represents velocity in the x direction. In this case, we will have _u*u_vel.  In my understanding, _u and u_vel are the same but here moose will only detect _u as a variable, right? This is strange to me since u_vel is also a variable that we need to solve. how to understand this? Thank you.\nJ",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3882170",
                          "updatedAt": "2022-10-14T20:58:58Z",
                          "publishedAt": "2022-10-14T20:58:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nI think _u is rho * v_x here.\nThis would be because the conserved variables (density, momentum, energy) are used for this set of kernels.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3885212",
                          "updatedAt": "2022-10-15T12:59:17Z",
                          "publishedAt": "2022-10-15T12:59:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "Hello\nI think _u is rho * v_x here. This would be because the conserved variables (density, momentum, energy) are used for this set of kernels.\nGuillaume\n\nyes, I know this. but u_vel is also _u, why do they have different expression and how moose can recognise that both are the same variable?",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3885405",
                          "updatedAt": "2022-10-15T14:00:02Z",
                          "publishedAt": "2022-10-15T14:00:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "u_vel is just the velocity not the momentum",
                          "url": "https://github.com/idaholab/moose/discussions/22333#discussioncomment-3885655",
                          "updatedAt": "2022-10-15T14:57:02Z",
                          "publishedAt": "2022-10-15T14:57:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Two Equation Turbulence Model",
          "author": {
            "login": "suqingji"
          },
          "bodyText": "As mentioned elsewhere, the finite element module of MOOSE does not have a two-equation turbulence model. Now we are trying to add this module, but we have encountered many problems. I wonder whether any experts have tried to add a two-equation turbulence model, or which users have done such work based on MOOSE.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/20854",
          "updatedAt": "2022-10-14T16:57:18Z",
          "publishedAt": "2022-04-23T13:07:43Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@lindsayad",
                  "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2621323",
                  "updatedAt": "2022-06-03T04:47:34Z",
                  "publishedAt": "2022-04-23T16:35:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "suqingji"
                          },
                          "bodyText": "In fact, I think I saw an expert who developed the K-Epsilon turbulence model in 2017, but it seems to have broken down halfway through, and now I'm developing the K-Omega turbulence model, which is able to do some simple examples, and the results look good, but in a slightly more complicated problem, there are convergence problems, I wonder if there is an opportunity to exchange such questions with experts in this question.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2622933",
                          "updatedAt": "2022-06-03T04:47:34Z",
                          "publishedAt": "2022-04-24T04:32:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "There is an issue for this: #9007. From that issue you can link to some commits that I worked on a very long time ago. We (the MOOSE team) do not have programmatic funding to work on the finite element side of the navier_stokes module, but we would love any outside contribution that added that capability. I do not know whether my old commits would help you in any way, but please feel free to work from them if they are of any help. If you do decide to develop this yourself, I may be able to provide some limited coaching as my time allows",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2625776",
                          "updatedAt": "2022-06-03T04:47:34Z",
                          "publishedAt": "2022-04-24T21:04:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "suqingji"
                          },
                          "bodyText": "Hi, Prof. lindsayad\nThanks for your reply. I would like to describe some of the problems I encountered in the development of turbulence programs.\nI had finished a kind of two turbulence model which is Wilcox k-omega turbulence model, and I had finished testing some important cases like the \"2D Zero Pressure Gradient Flat Plate Verification Case\" and \u201cbackward-facing-step Case\". When I simulated the above simple cases, convergence is fine and from the computed solution I could find that the relationship between u+ and log(y+) compared with the DNS solution is about the same in the \"2D Zero Pressure Gradient Flat Plate Verification Case\". But in other complex cases, I always face a big issue which is a convergence problem. As I know, in other FVM programs we need to use some method to stabilize the simulation for turbulence equation in particular the production and dissipation term, but in FEM programs I wonder if there is a method to stabilize simulation like SUPG/PSPG.\nLooking forward to your reply. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2636667",
                          "updatedAt": "2022-06-03T04:47:34Z",
                          "publishedAt": "2022-04-26T07:40:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "In the navier_stokes module in our FEM implementation, we have both SUPG and PSPG available. However, if you want to add a turbulence model, you would have to implement the SUPG stabilization of the additional equations yourself, e.g. you would have to develop the SUPG stabilization of k and epsilon for a k-epsilon model. Additionally if you add an additional term like a Reynolds stress for the turbulent momentum transport, you would have to add that term into the existing SUPG and PSPG stabilization of the momentum and mass equations.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2640084",
                          "updatedAt": "2022-06-03T04:47:37Z",
                          "publishedAt": "2022-04-26T15:27:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If you have not seen it already, we have an article on the FEM portion of the navier_stokes module. The journal article is here; if you do not have access, there is an arXiv version of it here.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2640100",
                          "updatedAt": "2022-06-03T04:47:37Z",
                          "publishedAt": "2022-04-26T15:29:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "suqingji"
                          },
                          "bodyText": "Thank you for your reply in spite of your busy schedule. I am sorry that my description may not be accurate, so you did not understand what I mean.\nYes, I did add SUPG stabilization to the k and omega equation according to the journal article named \"Overview of the Incompressible Navier Stokes simulation capabilities in the MOOSE Framework\". But due to the production terms of those turbulence equations are too complex to add the jacobian term to matrix by hand. Then I tried to add those jacobian terms by AD, which will cause non-convergence. In other words, my Jacobian matrix is right made by hand, but it is the production term of those turbulence equations is complex that causes the convergence problem even though I had added SUPG to those equations. So I wonder if there are need to add other stabilization methods to those turbulence equations to stabilize those turbulence equations' simulation, or if there are some other details worth noting I did not know.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2644159",
                          "updatedAt": "2022-06-03T04:47:37Z",
                          "publishedAt": "2022-04-27T06:55:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Then I tried to add those jacobian terms by AD, which will cause non-convergence.\n\nI doubt that the AD-generated Jacobian caused non-convergence. You can check the accuracy of your Jacobian by running with the PETSc command-line option -snes_test_jacobian.\nWhat Reynolds numbers are you trying to run at? Maybe @tanoret would have some comment on stability of the k-epsilon equations",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2647686",
                          "updatedAt": "2022-06-03T04:47:37Z",
                          "publishedAt": "2022-04-27T15:27:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "suqingji"
                          },
                          "bodyText": "Thanks for your reply,\nYour advice is of great help to me. I had finished running with the PETSc command-line option '-snes_test_jacobian'. And I found that the Jacobian is not very accurate. However, that's not the root cause. I tried to run with the FDP(Finite Difference Preconditioner) which could build the perfect approximate Jacobian. But some otherwise solvable problems do not converge. So I doubt that the residual term of production and dissipation caused non-convergence. Maybe those terms need to be restricted, but I have never found references such as literature or code implementing restrictions by the finite element method.\nLooking forward to your reply. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2818194",
                          "updatedAt": "2022-05-25T08:36:21Z",
                          "publishedAt": "2022-05-25T08:36:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I could help try to debug this, but you would need to submit a pull request for me to do so",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2821978",
                          "updatedAt": "2022-05-25T17:20:34Z",
                          "publishedAt": "2022-05-25T17:20:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "suqingji"
                          },
                          "bodyText": "Thanks again for your reply, and I really appreciate you would like to help me to debug this by taking time out of your busy schedule.\nNow I have finished pushing those codes to Github, you could pull it through https://github.com/suqingji/i_flow.git.\nI have added a readme.md file to /i_flow/case/backstep_sparse/, if you have any questions about i_flow, please contact me at suqj5@mail2.sysu.edu.cn or here.",
                          "url": "https://github.com/idaholab/moose/discussions/20854#discussioncomment-2825646",
                          "updatedAt": "2022-05-26T07:40:55Z",
                          "publishedAt": "2022-05-26T07:40:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "My test ran a few steps and quit.",
          "author": {
            "login": "Adairle"
          },
          "bodyText": "Thank you for your reply\nEnvironment Name Not Found : Could not find  conda environment: moose\nYou can list all discoverable environments with\nBut when l run the command \"mamba activate mouse\". The above situation will occur.\n@guidguid",
          "url": "https://github.com/idaholab/moose/discussions/22403",
          "updatedAt": "2022-10-22T00:02:43Z",
          "publishedAt": "2022-10-14T13:22:53Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou need to follow the instructions from the beginning. Likely the environment did not get created, or you skipped the 'close and reopen your console' part.\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html\nAlso please do not open new posts for the next reply.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22403#discussioncomment-3879495",
                  "updatedAt": "2022-10-14T13:59:28Z",
                  "publishedAt": "2022-10-14T13:59:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Diffusion problem cannot converge with small scale model",
          "author": {
            "login": "Chaoyue-Liu"
          },
          "bodyText": "Hello,\nI'm trying to do a simple transient diffusion calculation within a small domain with size of 50*50 \u00b5m. It somehow cannot converge properly. The input file is here: https://github.com/Chaoyue-Liu/battery/blob/main/problem/simplediffusion.i\nI also tried to calculate the same problem at steady state, by ignoring TimeDerivative kernel and adding a DirichletBC condition. The calculation works well (https://github.com/Chaoyue-Liu/battery/blob/main/problem/steady_diffuison.i), but if I calculate this in transient, it doesn't converge https://github.com/Chaoyue-Liu/battery/blob/main/problem/Transient_diffusion.i . Could you check what am I doing wrong? Thank you!",
          "url": "https://github.com/idaholab/moose/discussions/22397",
          "updatedAt": "2022-10-14T12:55:47Z",
          "publishedAt": "2022-10-14T12:29:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe residuals are very small on this case, because you are very close to the solution with your 0 initialization it seems.\nYou can raise the tolerances on the linear and nonlinear solver when the solver seems to never accept the solution, even though the residual is very small.\nThis input converges fine\n\n    [Mesh]\n        type = GeneratedMesh\n        dim = 2\n        nx = 50\n        ny = 50\n        xmax = 0.00005\n        ymax = 0.00005\n    []\n    \n    [Variables]\n    [phis]\n    []\n    []\n    \n    [Materials]\n    [d]\n    type=GenericConstantMaterial\n    prop_names='sigmas'\n    prop_values='1'\n    []\n    []\n    \n    [Kernels]\n    [ohm_s]\n    type=MatDiffusion\n    variable=phis\n    diffusivity='sigmas'\n    []\n    [time_s]\n    type=TimeDerivative\n    variable=phis\n    []\n    []\n    \n    [ICs]\n    [phis_ic]\n    type=ConstantIC\n    variable=phis\n    value=0\n    []\n    []\n    \n    [BCs]\n    [phis_neumann]\n    boundary='bottom'\n    type=ADNeumannBC\n    variable=phis\n    value=0.0001\n    []\n    [phis_dirichlet]\n    boundary='top'\n    type=ADDirichletBC\n    variable=phis\n    value=0\n    []\n    []\n    \n    [Executioner]\n    type=Transient\n    dt=1\n    end_time=100\n    automatic_scaling=true\n    nl_abs_tol = 1e-12\n    l_tol = 1e-8\n    []\n    \n    [Outputs]\n    exodus=true\n    []\n\nPS: the links are not set up properly, you need to do this : [text for the link](address for the link)",
                  "url": "https://github.com/idaholab/moose/discussions/22397#discussioncomment-3878905",
                  "updatedAt": "2022-10-14T12:52:28Z",
                  "publishedAt": "2022-10-14T12:52:27Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Chaoyue-Liu"
                          },
                          "bodyText": "Thank you. It is indeed the problem with tolerance. I increased it and it converges fine. Thanks for the guidance.",
                          "url": "https://github.com/idaholab/moose/discussions/22397#discussioncomment-3878936",
                          "updatedAt": "2022-10-14T12:55:44Z",
                          "publishedAt": "2022-10-14T12:55:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "moose installation",
          "author": {
            "login": "412120052"
          },
          "bodyText": "Hai,\nwhile installing moose through ssh, after entering this command\n[conda create --name moose moose-libmesh moose-tools]\nscreen showing like this below\nSolving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\nCollecting package metadata (repodata.json): - failed\nso i cant able to activate moose (conda activate moose). kindly help me with this. Thanking You",
          "url": "https://github.com/idaholab/moose/discussions/22396",
          "updatedAt": "2022-10-22T00:02:39Z",
          "publishedAt": "2022-10-14T11:04:59Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt could be that you have the old channel for idaholab\ncan you please try to remove it conda config --remove  <channel address>\nthen follow these instructions again from adding the channel onwards.\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22396#discussioncomment-3878805",
                  "updatedAt": "2022-10-14T13:03:21Z",
                  "publishedAt": "2022-10-14T12:40:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}