{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNy0wMVQxNjo0NjowNC0wNTowMM4AaRck"
    },
    "edges": [
      {
        "node": {
          "title": "questiong about the unit system in MOOSE",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "I am running an inelastic numerical simulation in which I set the loading boundary condition to 0.005*t, but at t=1000s, the average elemental displacement is 5000 instead of 5mm, so I am a little confused about how the unit system works in MOOSE",
          "url": "https://github.com/idaholab/moose/discussions/28057",
          "updatedAt": "2024-07-04T05:26:58Z",
          "publishedAt": "2024-07-03T16:05:59Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor the others, the units in MOOSE are first determined by the units of the mesh (for length), then the input has to be consistent with those.",
                  "url": "https://github.com/idaholab/moose/discussions/28057#discussioncomment-9954755",
                  "updatedAt": "2024-07-04T05:26:58Z",
                  "publishedAt": "2024-07-04T05:26:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Outputting Kernels",
          "author": {
            "login": "bbattas"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI had thought there was a way to basically print out all the kernels used in MOOSE instead of solving, but I can't find it in the documentation anywhere.  I want to see all the individual kernels created by an action, and ideally also their various components like would be in an input file if I had manually defined the kernel.  Is there a way to do that?",
          "url": "https://github.com/idaholab/moose/discussions/28058",
          "updatedAt": "2024-07-04T14:37:59Z",
          "publishedAt": "2024-07-03T17:49:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere are debugging options listed there.\nDebug/show_actions is probably one of the easiest ways to do this\nhttps://mooseframework.inl.gov/source/actions/SetupDebugAction.html\notherwise:\n[Problem]\n  verbose_setup = true\n\nis helpful and so is switching to this problem:\nhttps://mooseframework.inl.gov/source/problems/DumpObjectsProblem.html",
                  "url": "https://github.com/idaholab/moose/discussions/28058#discussioncomment-9954749",
                  "updatedAt": "2024-07-04T05:26:01Z",
                  "publishedAt": "2024-07-04T05:26:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Polymer Solidification Simulation from Wang et al., 2013",
          "author": {
            "login": "Josh-Web-700"
          },
          "bodyText": "Hello MOOSE experts,\nI am working on reproducing the solidification simulations for polymer crystallization from the article, \u201c A Phase-Field Model for Simulating Various Spherulite Morphologies of Semi-Crystalline Polymers,\u201d (Wang Xiao-Dong et al 2013 Chinese Phys. B 22 106103). So far, I have not been able to reproduce the crystallographic branching that would be expected in the simulation. I am not sure if this is an error in my understanding of the article\u2019s parameters or in my MOOSE implementation, and any insight would be much appreciated.\nGoverning Equations & Variables\nThere are two governing equations:  a nonconserved Ginzburg-Landau (Allen-Cahn) equation for crystallinity, and a heat equation for temperature. The two equations are shown below in nondimensional form:\n\nListed below are the expressions used to evaluate the governing equations:\n\n(below is a modified evaluation for zeta, \u03b6-overbar)\n\n\n\nNondimensional Parameters\nAs mentioned, the simulation was executed with nondimensional parameters. The actual parameters at a temperature of 210 degrees Celsius are:\n\nThe nondimensional parameters were obtained by:\n\nAlso, temperature was nondimensionalized as U=(T-T_m)/(T_m-T_c).\nIf I understood the article correctly, these are the nondimensional parameters that I used:\n\nzeta_0 = 0.96\nalpha = 0.658\nK =k = 2.07\nkappa_0^2 = 1.2\nW = 10.69\nT_m, T_c, and T_m_0 remain unchanged\n\nNumerical Methods and Initial Conditions\nAccording to the authors, these equations were solved on a 512x512 grid where d\u03c4 = 0.1 and dx = dy = 1.0. They used homogeneous Neumann boundary conditions (\u2202\u03c8/\u2202\u03c4=0, \u2202U/\u2202\u03c4=0). The initial conditions for the order parameter (\u03c8) where 0 over the domain, except at the nuclei/seeds, where the order parameter is set equal to zeta_0 (\u03c8 = \u03b6_0 = 0.96). The initial conditions for temperature (U) are -1 over the domain.\nAs far as I am aware, the article made no mention of including any thermal noise. I am unsure of this is important, and I assume that I would get at least some branching in my results from the anisotropy function if I was implementing this correctly.\nExpected Results\nAt a crystallization temperature of 210 degrees Celsius, with j=6 and \u03b5=0.06, the simulation should appear as the following at dimensionless time of 300:\n\nI performed the simulation in two ways:  First, with a constant zeta (\u03b6), taken as \u03b6= 0.167. Second, I used an ADDerivativeParsedMaterial for \u03b6 to be computed in real time.\nWhen I used a constant \u03b6, I obtained the following result, shown at a nondimensional time of \u03c4 = 25.8:\n\nWhen I used a nonconstant \u03b6, the simulation had difficulty making it past a nondimensional time of about \u03c4 = 2.0.\nMOOSE Program\nI followed the format of the MOOSE example program, \"ad_snow.i\" (moose/modules/phase_field/examples/anisotropic_interfaces/ad_snow.i), since the simulations in that example are fairly similar. I used two custom kernels by adding a scalar coefficient (kappa_0) to the MOOSE kernels ADACInterfaceKobayashi1 and ADACInterfaceKobayashi1.\npfm.i\nIn case it is helpful, this is the program I used for a nonconstant (temperature-dependent) zeta (\u03b6). As mentioned, I used a smaller grid to speed up the simulation and also added adaptive mesh refinement from the ad_snow.i template.\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  nx = 32\n  ny = 32\n  xmin = -128\n  xmax = 128\n  ymin = -128\n  ymax = 128\n[]\n\n[Variables]\n  [psi]\n  []\n  [U]\n  []\n[]\n\n[ICs]\n  [psiIC]\n    type = SmoothCircleIC\n    variable = psi\n    x1 = 0\n    y1 = 0\n    radius = 2\n    outvalue = 0\n    invalue = 0.96\n  []\n  [UIC]\n    type = ConstantIC\n    variable = U\n    value = -1\n  []\n[]\n\n[Kernels]\n  [psi_dot]\n    type = ADTimeDerivative\n    variable = psi\n  []\n  [anisoACinterface1]\n    type = ADCoefACInterfaceKobayashi1\n    variable = psi\n    mob_name = M\n  []\n  [anisoACinterface2]\n    type = ADCoefACInterfaceKobayashi2\n    variable = psi\n    mob_name = M\n  []\n  [ACbulk]\n    type = ADAllenCahn\n    variable = psi\n    mob_name = M\n    f_name = floc\n  []\n\n  [U_dot]\n    type = ADTimeDerivative\n    variable = U\n  []\n  [coefDiffusion] \n    type = ADHeatConduction\n    variable = U\n    thermal_conductivity = 0.658\n  []\n  [psi_dot_term]\n    type = ADCoefCoupledTimeDerivative\n    variable = U\n    v = psi\n    coef = -2.07\n  []\n[]\n\n[Materials]\n  [consts]\n    type = ADGenericConstantMaterial\n    prop_names  = 'M kappa0Squared'\n    prop_values = '1 1.2'\n  []\n  [local_free_energy]\n    type = ADDerivativeParsedMaterial\n    property_name = floc\n    coupled_variables = 'psi U'\n    constant_names = 'W zeta0'\n    constant_expressions = '10.69 0.96'\n    material_property_names = 'zeta'\n    expression = 'W * ( 1/4*psi^4 - (zeta+zeta0)/3*psi^3 + (zeta*zeta0)/2*psi^2)'\n    derivative_order = 2\n    outputs = exodus\n  []\n  [./energy_barrier]\n    type = ADDerivativeParsedMaterial\n    property_name = zeta\n    coupled_variables = 'U'\n    constant_names = 'pi T_m T_m0 T_c k zeta0'\n    constant_expressions = '4*atan(1) 233 242 210 2.07 0.96'\n    expression = 'T:=T_m+U*(T_m-T_c); psiHat:=zeta0*(T_m0-T_m)/(T_m0-T); (1+2/pi*atan(k*U)) * (4*zeta0*psiHat - 3*psiHat^2)/(6*zeta0 - 4*psiHat)'\n    derivative_order = 2\n    outputs = exodus\n  [../]\n  [anisotropy]\n    type = ADInterfaceOrientationMaterial\n    op = psi\n    anisotropy_strength = 0.06\n    eps_bar = 1\n    mode_number = 6\n    reference_angle = 0\n    outputs = exodus\n  []\n[]\n\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  solve_type = NEWTON\n\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu   '\n\n  nl_abs_tol = 1e-10\n  nl_rel_tol = 1e-08\n  l_max_its = 30\n  nl_max_its = 30\n\n  end_time = 300\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    optimal_iterations = 10\n    iteration_window = 2\n    dt = 0.1\n    growth_factor = 1.1\n    cutback_factor = 0.95\n  [../]\n  [./Adaptivity]\n    initial_adaptivity = 2 # Number of times mesh is adapted to initial condition\n    refine_fraction = 0.7 # Fraction of high error that will be refined\n    coarsen_fraction = 0.1 # Fraction of low error that will coarsened\n    max_h_level = 5 # Max number of refinements used, starting from initial mesh (before uniform refinement)\n    weight_names = 'psi U'\n    weight_values = '1 0.5'\n  [../]\n[]\n\n[Outputs]\n  time_step_interval = 5\n  exodus = true\n[]\n\nFirst Modified Kernel - ADCoefACInterfaceKobayashi1.C\n#include \"ADCoefACInterfaceKobayashi1.h\"\n\nregisterMooseObject(\"pfmsolid2App\", ADCoefACInterfaceKobayashi1);\n\nInputParameters\nADCoefACInterfaceKobayashi1::validParams()\n{\n  InputParameters params = ADKernelGrad::validParams();\n  params.addClassDescription(\"Anisotropic gradient energy Allen-Cahn Kernel Part 1\");\n  params.addParam<MaterialPropertyName>(\"mob_name\", \"L\", \"The mobility used with the kernel\");\n  params.addParam<MaterialPropertyName>(\"eps_name\", \"eps\", \"The anisotropic interface parameter\");\n  params.addParam<MaterialPropertyName>(\"deps_name\", \"deps\", \"The derivative of the anisotropic interface parameter with respect to angle\");\n  params.addParam<MaterialPropertyName>(\"kappa0Squared\", \"kappa0Squared\", \"The interfaical energy coefficient\");\n  return params;\n}\n\nADCoefACInterfaceKobayashi1::ADCoefACInterfaceKobayashi1(const InputParameters & parameters)\n  : ADKernelGrad(parameters),\n    _mob(getADMaterialProperty<Real>(\"mob_name\")),\n    _eps(getADMaterialProperty<Real>(\"eps_name\")),\n    _deps(getADMaterialProperty<Real>(\"deps_name\")),\n    _kappa0Squared(getADMaterialProperty<Real>(\"kappa0Squared\"))\n{\n}\n\nADRealGradient\nADCoefACInterfaceKobayashi1::precomputeQpResidual()\n{\n  // Set modified gradient vector\n  const ADRealGradient v(-_grad_u[_qp](1), _grad_u[_qp](0), 0);\n\n  // Define anisotropic interface residual\n  return _kappa0Squared[_qp] * _eps[_qp] * _deps[_qp] * _mob[_qp] * v;\n}\n\nSecond Modified Kernel - ADCoefACInterfaceKobayashi2.C\n#include \"ADCoefACInterfaceKobayashi2.h\"\n\nregisterMooseObject(\"pfmsolid2App\", ADCoefACInterfaceKobayashi2);\n\nInputParameters\nADCoefACInterfaceKobayashi2::validParams()\n{\n  InputParameters params = ADKernelGrad::validParams();\n  params.addClassDescription(\"Anisotropic Gradient energy Allen-Cahn Kernel Part 2\");\n  params.addParam<MaterialPropertyName>(\"mob_name\", \"L\", \"The mobility used with the kernel\");\n  params.addParam<MaterialPropertyName>(\"eps_name\", \"eps\", \"The anisotropic parameter\");\n  params.addParam<MaterialPropertyName>(\"kappa0Squared\", \"kappa0Squared\", \"The interfacial energy coefficient\");\n  return params;\n}\n\nADCoefACInterfaceKobayashi2::ADCoefACInterfaceKobayashi2(const InputParameters & parameters)\n  : ADKernelGrad(parameters),\n    _mob(getADMaterialProperty<Real>(\"mob_name\")),\n    _eps(getADMaterialProperty<Real>(\"eps_name\")),\n    _kappa0Squared(getADMaterialProperty<Real>(\"kappa0Squared\"))\n{\n}\n\nADRealGradient\nADCoefACInterfaceKobayashi2::precomputeQpResidual()\n{\n  // Set interfacial part of residual\n  return _kappa0Squared[_qp] * _eps[_qp] * _eps[_qp] * _mob[_qp] * _grad_u[_qp];\n}",
          "url": "https://github.com/idaholab/moose/discussions/28036",
          "updatedAt": "2024-07-03T16:03:24Z",
          "publishedAt": "2024-07-02T02:33:35Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen",
                  "url": "https://github.com/idaholab/moose/discussions/28036#discussioncomment-9931431",
                  "updatedAt": "2024-07-02T02:52:24Z",
                  "publishedAt": "2024-07-02T02:52:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "This is pretty far outside of my recent experience, and dendritic sidebranching is a pretty tricky topic in phase-field modeling. I believe that often thermal noise is not explicitly included in such modeling, but often numerical noise resulting from error in numerical solution of the PDEs is enough to induce sidebranching. However this is highly dependent on parameters you use. You might try increasing the strength of the anisotropy (epsilon) or including thermal noise explicitly. You might have a look at our article https://iopscience.iop.org/article/10.1088/1361-651X/ac46dc\nalso tagging @SudiptaBiswas if she has anything else to add",
                          "url": "https://github.com/idaholab/moose/discussions/28036#discussioncomment-9939420",
                          "updatedAt": "2024-07-02T17:07:46Z",
                          "publishedAt": "2024-07-02T17:07:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Josh-Web-700"
                          },
                          "bodyText": "Thank you so much for the feedback. That is helpful!",
                          "url": "https://github.com/idaholab/moose/discussions/28036#discussioncomment-9950238",
                          "updatedAt": "2024-07-03T16:03:24Z",
                          "publishedAt": "2024-07-03T16:03:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Wrong number of displacement variables",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "I generated a quarter cylinder using gmsh and load it into MOOSE. I set the:\n[GlobalParams]\ndisplacements = 'disp_x disp_y disp_z'\n[]\nWhy do I get wrong number of displacement variables error? Isn't a cylinder a 3D mesh?\n*** ERROR ***\nThe following error occurred in the Kernel 'TM_all0' of type StressDivergenceTensors.\nThe number of displacement variables supplied must match the mesh dimension",
          "url": "https://github.com/idaholab/moose/discussions/28043",
          "updatedAt": "2024-07-03T08:47:46Z",
          "publishedAt": "2024-07-02T13:30:18Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt should be fine.\nDo you mind changing the error message to\n    mooseError(\"The number of displacement variables \" + std::to_string(_ndisp) + \" supplied must match the mesh dimension \" + std::to_string(_mesh.dimension()));\n\nand recompiling so we can see which one is counted wrong\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937066",
                  "updatedAt": "2024-07-02T13:37:26Z",
                  "publishedAt": "2024-07-02T13:37:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "Thanks for reply! Now the error message is:\n`*** ERROR ***\nThe following error occurred in the Kernel 'TM_all0' of type StressDivergenceTensors.\nThe number of displacement variables 3 supplied must match the mesh dimension 2`",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937371",
                          "updatedAt": "2024-07-02T14:02:28Z",
                          "publishedAt": "2024-07-02T14:02:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Do you have a picture of the mesh?",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937388",
                          "updatedAt": "2024-07-02T14:03:59Z",
                          "publishedAt": "2024-07-02T14:03:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937550",
                          "updatedAt": "2024-07-02T14:18:56Z",
                          "publishedAt": "2024-07-02T14:18:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks 3D to me.\nI notice the name is mispelled, can you paste the moose [Mesh] block and the output of ls in that directory?",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937565",
                          "updatedAt": "2024-07-02T14:20:38Z",
                          "publishedAt": "2024-07-02T14:20:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "I noticed that and already renamed the file.\nThe [Mesh] block is:\n[Mesh]\n  [rb]\n    type = FileMeshGenerator\n    file = 'quarter_cylinder.msh'\n  []\n[]\n\nAnd ls returns:\ncleavage.i        cleavage_out.e                                       crack2d_computeCrackedStress_finitestrain_plastic_out.csv  quarter_cylinder.msh\ncleavage_out.csv  crack2d_computeCrackedStress_finitestrain_plastic.i  crack2d_computeCrackedStress_finitestrain_plastic_out.e",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937632",
                          "updatedAt": "2024-07-02T14:30:12Z",
                          "publishedAt": "2024-07-02T14:27:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no idea then.\nThe mesh is made of volumetric elements right? Not just the surface mesh?\nCan you edit the gmsh file to see if there is an integrer for dimension somewhere?",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937667",
                          "updatedAt": "2024-07-02T14:30:58Z",
                          "publishedAt": "2024-07-02T14:30:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "Weird. In gmsh it is indeed 3D mesh, but in the output file it is only the surface mesh. I will inspect it into more detail. Thanks for reply!",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937741",
                          "updatedAt": "2024-07-02T14:36:34Z",
                          "publishedAt": "2024-07-02T14:36:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "chatgpt has some ideas about this lolol\nCopy paste:\nIf Gmsh is generating only a surface mesh instead of a 3D mesh, you likely need to specify or enable volume meshing. Here are some steps and tips to ensure you get a 3D mesh:\n\n\nDefine the Volume:\nEnsure that you have defined the volume (3D region) in your geometry. In Gmsh, volumes are defined using the Volume keyword.\n// Example: Define a simple box volume\nPoint(1) = {0, 0, 0, 1};\nPoint(2) = {1, 0, 0, 1};\nPoint(3) = {1, 1, 0, 1};\nPoint(4) = {0, 1, 0, 1};\nPoint(5) = {0, 0, 1, 1};\nPoint(6) = {1, 0, 1, 1};\nPoint(7) = {1, 1, 1, 1};\nPoint(8) = {0, 1, 1, 1};\n\nLine(1) = {1, 2};\nLine(2) = {2, 3};\nLine(3) = {3, 4};\nLine(4) = {4, 1};\nLine(5) = {1, 5};\nLine(6) = {2, 6};\nLine(7) = {3, 7};\nLine(8) = {4, 8};\nLine(9) = {5, 6};\nLine(10) = {6, 7};\nLine(11) = {7, 8};\nLine(12) = {8, 5};\n\nLine Loop(13) = {1, 2, 3, 4};\nPlane Surface(14) = {13};\n\nLine Loop(15) = {5, -9, -8, 12};\nPlane Surface(16) = {15};\n\nLine Loop(17) = {6, -10, -7, 9};\nPlane Surface(18) = {17};\n\nLine Loop(19) = {7, -11, -6, 10};\nPlane Surface(20) = {19};\n\nLine Loop(21) = {8, -12, -5, 11};\nPlane Surface(22) = {21};\n\nSurface Loop(23) = {14, 16, 18, 20, 22};\nVolume(24) = {23};\n\n\nMesh the Volume:\nEnsure that you generate the volume mesh. In the Gmsh GUI, you can do this by going to the mesh options and selecting 3D.\nIn the .geo file, you can specify the meshing command as follows:\nMesh 3;\n\n\nCheck Mesh Options:\nIn the Gmsh GUI, you can go to Tools -> Options -> Mesh -> General and ensure that the \"Mesh dimension\" is set to 3.\n\n\nEnsure All Boundaries are Defined:\nMake sure that all the surfaces that form the boundary of the volume are properly defined and connected.\n\n\nPhysical Groups (Optional but recommended):\nDefine physical groups for the volume. This helps Gmsh understand what you want to mesh and can improve meshing performance.\nPhysical Volume(\"MyVolume\") = {24};\n\n\nBy following these steps, Gmsh should generate a 3D mesh instead of just a surface mesh. If you still encounter issues, please share your .geo file or the specific error messages you are seeing for more tailored assistance.",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9937919",
                          "updatedAt": "2024-07-02T14:52:27Z",
                          "publishedAt": "2024-07-02T14:52:03Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "thanks a lot for your help! Now it works!",
                          "url": "https://github.com/idaholab/moose/discussions/28043#discussioncomment-9945564",
                          "updatedAt": "2024-07-03T08:47:47Z",
                          "publishedAt": "2024-07-03T08:47:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Exit code 11 when run jobs on cluster",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi Community,\nI have written a CZM model which runs fine on local Mac using 8 processes, however after I run it on the INL cluster, even with only 10 processes I received the following error:\n*** Warning, This code is deprecated and will be removed in future versions:\nPlease update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'.\n\n\n^[[33m\n*** Warning, This code is deprecated and will be removed in future versions:\n/scratch/zhaochun/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:225.5: The 'Modules/TensorMechanics/Master' syntax is deprecated. Please use 'Physics/SolidMechanics/QuasiStatic' instead.^[[39m\n\n\n^[[33m\n*** Warning, This code is deprecated and will be removed in future versions:\n/scratch/zhaochun/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:226.9: The 'Modules/TensorMechanics/Master' syntax is deprecated. Please use 'Physics/SolidMechanics/QuasiStatic' instead.^[[39m\n\n\n^[[36m\n*** Info ***\nSolidMechanics Action: selecting 'total small strain' formulation. Use `incremental = true` to select 'incremental small strain' instead.^[[39m\n\n^[[33m\n*** Warning, This code is deprecated and will be removed in future versions:\n/scratch/zhaochun/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:663: (Outputs/interval):\n'interval' has been deprecated and will be removed on 02/01/2025. Please use 'time_step_interval' instead.\n^[[39m\nCurrently Setting Up....\n  Initializing\n    Initializing Equation Systems..                                                      [^[[33m 19.88 s^[[39m] [^[[33m 1145 MB^[[39m]\n    Initializing Displaced Equation System..                                             [^[[33m 22.76 s^[[39m] [^[[33m 1472 MB^[[39m]\n  Finished Initializing                                                                  [^[[33m 50.45 s^[[39m] [^[[33m 1472 MB^[[39m]\nFinished Setting Up                                                                      [^[[33m 87.33 s^[[39m] [^[[33m 1472 MB^[[39m]\n\nFramework Information:\nMOOSE Version:           git commit 462f0ad39e on 2024-06-26\nLibMesh Version:         1c5369aa05eaae8ebeb7930845fce3b1d59cbb37\nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1\nCurrent Time:            Mon Jul  1 00:10:07 2024\nExecutable Timestamp:    Mon Jul  1 00:06:39 2024\n\nParallelism:\n  Num Processors:          30\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:       3\n  Nodes:\n    Total:                 159594\n    Local:                 6030\n    Min/Max/Avg:           4628/6058/5319\n  Elems:\n    Total:                 860608\n    Local:                 28695\n    Min/Max/Avg:           28182/29372/28686\n  Num Subdomains:          3\n  Num Partitions:          30\n  Partitioner:             metis\n\nNonlinear System:\n  Num DOFs:                478782\n  Num Local DOFs:          18090\n  Variables:               { \"disp_x\" \"disp_y\" \"disp_z\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                21680792\n  Num Local DOFs:          742740\n  Variables:               { \"resid_x\" \"resid_y\" \"resid_z\" \"resid_slipweakening_x\" \"resid_slipweakening_y\"\n                             ... \"vel_slipweakening_y\" \"vel_slipweakening_z\" \"accel_slipweakening_x\"\n                             \"accel_slipweakening_y\" \"accel_slipweakening_z\" } { \"mu_s\" \"mu_d\" } \"ini_shear_stress\"\n                             { \"tangent_jump\" \"tangent_jump_rate\" \"elem_length\" \"jump_x\" \"jump_y\" ...\n                             \"jump_rate_y\" \"jump_rate_z\" \"traction_x\" \"traction_y\" \"traction_z\" } { \"check_function_initial_stress_xx\"\n                             \"check_function_initial_stress_xy\" \"check_function_initial_stress_xz\" \"check_function_initial_stress_yy\"\n                             \"check_function_initial_stress_yz\" \"check_function_initial_stress_zz\" } { \"stress_xx\"\n                             \"stress_yy\" \"stress_xy\" \"strain_xx\" \"strain_xy\" \"strain_yy\" }\n  Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\"\n  Approximation Orders:    \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator:          CentralDifference\n  Solver Mode:             Linear\n\n^[[31mLEGACY MODES ENABLED:^[[39m\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n^[[39m\n^[[31mLEGACY MODES ENABLED:^[[39m\n This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\n^[[39m\n\n\n===================================================================================\n=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES\n=   PID 67277 RUNNING AT r5i4n30.ib0.sawtooth.hpc.inl.gov\n=   EXIT CODE: 11\n=   CLEANING UP REMAINING PROCESSES\n=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\n===================================================================================\nYOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application.\nPlease see the FAQ page for debugging suggestions\n\nI wonder if someone could guide me on how to proceed with the debugging, thanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/28029",
          "updatedAt": "2024-07-02T19:22:35Z",
          "publishedAt": "2024-07-01T07:13:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nthe instructions for debugging are there\nhttps://mooseframework.inl.gov/application_development/debugging.html\nFirst, it would be really good to get the bug to appear in serial\nI would consider using a linux machine to debug in parallel\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9926739",
                  "updatedAt": "2024-07-01T15:02:19Z",
                  "publishedAt": "2024-07-01T15:02:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi @GiudGiud, thanks for your answer. The problem does exist in serial on INL cluster, so it's easier for me to debug, however, after I try to build dbg METHOD=dbg make -j 8, it gives the following error:\n/usr/bin/ld/usr/bin/ld: cannot find : cannot find -lmesh_dbg-lmesh_dbg\n\n/usr/bin/ld: cannot find -ltimpi_dbg\n/usr/bin/ld: cannot find -ltimpi_dbg\n/usr/bin/ld: cannot find -lmesh_dbg\n/usr/bin/ld: cannot find -ltimpi_dbg\ncollect2: error: ld returned 1 exit status\nmake: *** [/scratch/zhaochun/projects/moose/framework/moose.mk:464: /scratch/zhaochun/projects/moose/framework/contrib/exodiff/exodiff] Error 1\nmake: *** Waiting for unfinished jobs....\ncollect2: error: ld returned 1 exit status\ncollect2: error: ld returned 1 exit status\nmake: *** [/scratch/zhaochun/projects/moose/framework/moose.mk:397: /scratch/zhaochun/projects/moose/framework/contrib/pcre/libpcre-dbg.la] Error 1\nmake: *** [/scratch/zhaochun/projects/moose/framework/moose.mk:409: /scratch/zhaochun/projects/moose/framework/contrib/hit/libhit-dbg.la] Error 1\n\nI wonder how to fix it? Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930766",
                          "updatedAt": "2024-07-02T00:47:02Z",
                          "publishedAt": "2024-07-02T00:45:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nyou need to build libmesh (and maybe petsc too) first\nthere might be a module you can use to save yourself some time installing",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930864",
                          "updatedAt": "2024-07-02T01:07:17Z",
                          "publishedAt": "2024-07-02T01:06:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi @GiudGiud, i have libmesh and petsc loaded, but still encounter this error:\n[zhaochun@sawtooth2 farms_benchmark]$ module list\n\nCurrently Loaded Modules:\n  1) flex/2.6.4-gcc-12.3.0-cnsv     7) patchelf/0.18.0             13) use.moose\n  2) bison/3.0.4-gcc-12.3.0-547w    8) gmp/6.1.2-gcc-10.5.0-wep3   14) moose-tools/2023-10-19\n  3) curl/7.61.1-gcc-12.3.0-5t73    9) mpfr/4.2.0-gcc-10.5.0-cec4  15) moose-dev/2023-10-23\n  4) ncurses/6.1-gcc-12.3.0-7zps   10) mpc/1.3.1-gcc-10.5.0-mpcb   16) petsc/3.19.3\n  5) zlib/1.2.13-gcc-12.3.0-c2ww   11) zstd/1.4.4-gcc-10.5.0-yue3  17) libmesh/1.8.0\n  6) cmake/3.27.7-gcc-12.3.0-5cfk  12) gcc/12.3.0-gcc-10.5.0-vx2f  18) mvapich2/2.3.7-1-gcc-12.3.0",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930909",
                          "updatedAt": "2024-07-02T01:13:09Z",
                          "publishedAt": "2024-07-02T01:13:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "set PETSC_DIR and LIBMESH_DIR then and try again.\nThis is an old-ish but should be fine petsc.\nThis is a really old libmesh, it likely wont build with this module",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930943",
                          "updatedAt": "2024-07-02T01:19:17Z",
                          "publishedAt": "2024-07-02T01:19:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "I see. So how should I set PETSC_DIR and LIBMESH_DIR? Like how should I find the locations?",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930952",
                          "updatedAt": "2024-07-02T01:21:35Z",
                          "publishedAt": "2024-07-02T01:21:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I m not sure where the modules are installed.\nMaybe load a module with an executable and get the address of that executable with the  \"which\" command",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9930957",
                          "updatedAt": "2024-07-02T01:23:04Z",
                          "publishedAt": "2024-07-02T01:23:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Okay after I update MOOSE to the recent version 2024.06.17, now I can reproduce the same error on my local computer, not sure what happens, but I will build dbg on my local then",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9931065",
                          "updatedAt": "2024-07-02T01:41:56Z",
                          "publishedAt": "2024-07-02T01:41:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok this is good news in a way. If it's a version problem, then a git-bisect will find out which commit causes the problem",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9931144",
                          "updatedAt": "2024-07-02T01:59:20Z",
                          "publishedAt": "2024-07-02T01:59:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Here is the output. So it might relate to the definition of material property?\n(lldb) target create \"./farms-dbg\"\nCurrent executable set to '/Users/andyz/projects/farms_benchmark/farms-dbg' (arm64).\n(lldb) settings set -- target.run-args  \"-i\" \"examples/benchmark_tpv2053D/version5/tpv2053d.i\"\n(lldb) b MPI_Abort\nBreakpoint 1: where = libmpi.12.dylib`MPI_Abort, address = 0x0000000000095444\n(lldb) r\nProcess 89656 launched: '/Users/andyz/projects/farms_benchmark/farms-dbg' (arm64)\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nPlease update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'. \nStack frames: 6\n0: 0   libmesh_dbg.0.dylib                 0x00000001248a963c libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) + 444\n1: 1   libmoose-dbg.0.dylib                0x0000000111577234 void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>, char const (&) [136]>(libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>&, bool, bool, char const (&) [136]) + 596\n2: 2   libmoose-dbg.0.dylib                0x0000000111576ef8 void mooseDeprecated<char const (&) [136]>(char const (&) [136]) + 56\n3: 3   libmoose-dbg.0.dylib                0x00000001115769b8 AppFactory::createAppShared(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, char**, int) + 100\n4: 4   farms-dbg                           0x0000000100013538 main + 104\n5: 5   dyld                                0x000000018a1dff28 start + 2236\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/Users/andyz/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:225.5: The 'Modules/TensorMechanics/Master' syntax is deprecated. Please use 'Physics/SolidMechanics/QuasiStatic' instead.\nStack frames: 15\n0: 0   libmesh_dbg.0.dylib                 0x00000001248a963c libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) + 444\n1: 1   libmoose-dbg.0.dylib                0x00000001107e28d8 void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>&, bool, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) + 616\n2: 2   libmoose-dbg.0.dylib                0x000000011076e474 void mooseDeprecated<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) + 56\n3: 3   libmoose-dbg.0.dylib                0x000000011076d778 Moose::Builder::walkRaw(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, hit::Node*) + 1120\n4: 4   libmoose-dbg.0.dylib                0x00000001107bbbb0 Moose::Builder::walk(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, hit::Node*) + 188\n5: 5   libhit-dbg.0.dylib                  0x00000001007f7b30 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 300\n6: 6   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n7: 7   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n8: 8   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n9: 9   libmoose-dbg.0.dylib                0x00000001107c0858 hit::Node::walk(hit::Walker*, hit::NodeType) + 84\n10: 10  libmoose-dbg.0.dylib                0x00000001107c0554 Moose::Builder::build() + 2604\n11: 11  libmoose-dbg.0.dylib                0x000000011155cc94 MooseApp::setupOptions() + 15544\n12: 12  libmoose-dbg.0.dylib                0x0000000111558704 MooseApp::run() + 5088\n13: 13  farms-dbg                           0x0000000100013554 main + 132\n14: 14  dyld                                0x000000018a1dff28 start + 2236\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/Users/andyz/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:226.9: The 'Modules/TensorMechanics/Master' syntax is deprecated. Please use 'Physics/SolidMechanics/QuasiStatic' instead.\nStack frames: 16\n0: 0   libmesh_dbg.0.dylib                 0x00000001248a963c libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) + 444\n1: 1   libmoose-dbg.0.dylib                0x00000001107e28d8 void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(libMesh::BasicOStreamProxy<char, std::__1::char_traits<char>>&, bool, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) + 616\n2: 2   libmoose-dbg.0.dylib                0x000000011076e474 void mooseDeprecated<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) + 56\n3: 3   libmoose-dbg.0.dylib                0x000000011076d778 Moose::Builder::walkRaw(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, hit::Node*) + 1120\n4: 4   libmoose-dbg.0.dylib                0x00000001107bbbb0 Moose::Builder::walk(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, hit::Node*) + 188\n5: 5   libhit-dbg.0.dylib                  0x00000001007f7b30 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 300\n6: 6   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n7: 7   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n8: 8   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n9: 9   libhit-dbg.0.dylib                  0x00000001007f7bf4 hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder) + 496\n10: 10  libmoose-dbg.0.dylib                0x00000001107c0858 hit::Node::walk(hit::Walker*, hit::NodeType) + 84\n11: 11  libmoose-dbg.0.dylib                0x00000001107c0554 Moose::Builder::build() + 2604\n12: 12  libmoose-dbg.0.dylib                0x000000011155cc94 MooseApp::setupOptions() + 15544\n13: 13  libmoose-dbg.0.dylib                0x0000000111558704 MooseApp::run() + 5088\n14: 14  farms-dbg                           0x0000000100013554 main + 132\n15: 15  dyld                                0x000000018a1dff28 start + 2236\n\n\n\n*** Info ***\nSolidMechanics Action: selecting 'total small strain' formulation. Use `incremental = true` to select 'incremental small strain' instead.\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/Users/andyz/projects/farms_benchmark/examples/benchmark_tpv2053D/version5/tpv2053d.i:663: (Outputs/interval):\n'interval' has been deprecated and will be removed on 02/01/2025. Please use 'time_step_interval' instead.\n\nCurrently Setting Up....\n  Finished Setting Mesh                                                                  [  7.78 s] [  845 MB]\n  Currently Setting Up Undisplaced Mesh\n    Preparing Mesh\n      Updating Mesh                                                                      [  5.79 s] [  855 MB]\n    Finished Preparing Mesh                                                              [  6.32 s] [  855 MB]\n  Finished Setting Up Undisplaced Mesh                                                   [  6.32 s] [  855 MB]\n  Currently Setting Up Displaced Mesh\n    Preparing Mesh\n      Updating Mesh                                                                      [  5.76 s] [  867 MB]\n    Finished Preparing Mesh                                                              [  6.26 s] [  867 MB]\n  Finished Setting Up Displaced Mesh                                                     [  6.26 s] [  867 MB]\n  Initializing\n    Updating Because Mesh Changed\n      Updating Mesh                                                                      [  5.78 s] [  954 MB]\n    Finished Updating Because Mesh Changed                                               [  6.07 s] [  957 MB]\n    Currently Updating Because Mesh Changed\n      Updating Mesh                                                                      [  5.77 s] [  973 MB]\n    Finished Updating Because Mesh Changed                                               [  6.03 s] [  981 MB]\n    Currently Initializing Equation Systems........................................................................ [370.27 s] [ 2572 MB]\n    Initializing Displaced Equation System..........................................     [223.52 s] [ 1884 MB]\n    Currently Updating Because Mesh Changed\n      Updating Mesh                                                                      [  6.05 s] [ 1946 MB]\n    Finished Updating Because Mesh Changed                                               [  6.32 s] [ 1964 MB]\n  Finished Initializing                                                                  [612.32 s] [ 1964 MB]\nFinished Setting Up                                                                      [668.54 s] [ 2126 MB]\nCurrently Executing\n  Performing Initial Setup\n    Finished Computing Max Dofs Per Element                                              [  8.58 s] [ 2167 MB]\nFramework Information:\nMOOSE Version:           git commit 13540f3c5f on 2024-07-01\nLibMesh Version:         \nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1\nCurrent Time:            Mon Jul  1 19:58:07 2024\nExecutable Timestamp:    Mon Jul  1 19:44:20 2024\n\nCheckpoint:\n  Wall Time Interval:      Every 3600.000000 s\n  User Checkpoint:         Disabled\n  # Checkpoints Kept:      2\n  Execute On:              TIMESTEP_END \n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:       3\n  Nodes:                   159594\n  Elems:                   860608\n  Num Subdomains:          3\n\nNonlinear System:\n  Num DOFs:                478782\n  Num Local DOFs:          478782\n  Variables:               { \"disp_x\" \"disp_y\" \"disp_z\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                21680792\n  Num Local DOFs:          21680792\n  Variables:               { \"resid_x\" \"resid_y\" \"resid_z\" \"resid_slipweakening_x\" \"resid_slipweakening_y\" \n                             ... \"vel_slipweakening_y\" \"vel_slipweakening_z\" \"accel_slipweakening_x\" \n                             \"accel_slipweakening_y\" \"accel_slipweakening_z\" } { \"mu_s\" \"mu_d\" } \"ini_shear_stress\" \n                             { \"tangent_jump\" \"tangent_jump_rate\" \"elem_length\" \"jump_x\" \"jump_y\" ... \n                             \"jump_rate_y\" \"jump_rate_z\" \"traction_x\" \"traction_y\" \"traction_z\" } { \"check_function_initial_stress_xx\" \n                             \"check_function_initial_stress_xy\" \"check_function_initial_stress_xz\" \"check_function_initial_stress_yy\" \n                             \"check_function_initial_stress_yz\" \"check_function_initial_stress_zz\" } { \"stress_xx\" \n                             \"stress_yy\" \"stress_xy\" \"strain_xx\" \"strain_xy\" \"strain_yy\" } \n  Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\" \n  Approximation Orders:    \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator:          CentralDifference\n  Solver Mode:             Linear\n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\nLEGACY MODES ENABLED:\n This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\n\n    Projecting Initial Solutions............................................................................................................................................................................................................................ [1318.09 s] [  993 MB]\n\n\nAssertion `hasValue(i)' failed\nNull object\nat /Users/andyz/projects/moose/framework/build/header_symlinks/UniqueStorage.h, line 100\nStack frames: 16\n0: 0   libmesh_dbg.0.dylib                 0x00000001248a963c libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) + 444\n1: 1   libmoose-dbg.0.dylib                0x000000010f060cc0 UniqueStorage<PropertyValue>::operator[](unsigned long) const + 600\n2: 2   libmoose-dbg.0.dylib                0x000000010f05fab8 UniqueStorage<PropertyValue>::operator[](unsigned long) + 36\n3: 3   libmoose-dbg.0.dylib                0x000000010f3ec5ac MaterialPropertyStorage::initProps(unsigned int, unsigned int, libMesh::Elem const*, unsigned int, unsigned int) + 396\n4: 4   libmoose-dbg.0.dylib                0x000000010f3eaaac MaterialPropertyStorage::initProps(unsigned int, libMesh::Elem const*, unsigned int, unsigned int) + 256\n5: 5   libmoose-dbg.0.dylib                0x000000010f49e480 MaterialPropertyStorage::initStatefulProps(unsigned int, std::__1::vector<std::__1::shared_ptr<MaterialBase>, std::__1::allocator<std::__1::shared_ptr<MaterialBase>>> const&, unsigned int, libMesh::Elem const&, unsigned int) + 1824\n6: 6   libmoose-dbg.0.dylib                0x0000000110e45b0c ComputeMaterialsObjectThread::onInterface(libMesh::Elem const*, unsigned int, short) + 424\n7: 7   libmoose-dbg.0.dylib                0x000000010fcb7a68 ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>>::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool) + 1216\n8: 8   libmoose-dbg.0.dylib                0x000000011007b810 void libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeMaterialsObjectThread>(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, ComputeMaterialsObjectThread&) + 96\n9: 9   libmoose-dbg.0.dylib                0x000000011007b748 FEProblemBase::initElementStatefulProps(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool) + 96\n10: 10  libmoose-dbg.0.dylib                0x00000001100b560c FEProblemBase::initialSetup() + 31288\n11: 11  libmoose-dbg.0.dylib                0x000000010f33eea0 Transient::init() + 88\n12: 12  libmoose-dbg.0.dylib                0x000000011155ee14 MooseApp::executeExecutioner() + 2512\n13: 13  libmoose-dbg.0.dylib                0x0000000111558f00 MooseApp::run() + 7132\n14: 14  farms-dbg                           0x0000000100013554 main + 132\n15: 15  dyld                                0x000000018a1dff28 start + 2236\n[0] /Users/andyz/projects/moose/framework/build/header_symlinks/UniqueStorage.h, line 100, compiled Jul  1 2024 at 19:40:13\nProcess 89656 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010266d444 libmpi.12.dylib`MPI_Abort\nlibmpi.12.dylib`MPI_Abort:\n->  0x10266d444 <+0>:  sub    sp, sp, #0x50\n    0x10266d448 <+4>:  stp    x24, x23, [sp, #0x10]\n    0x10266d44c <+8>:  stp    x22, x21, [sp, #0x20]\n    0x10266d450 <+12>: stp    x20, x19, [sp, #0x30]\nTarget 0: (farms-dbg) stopped.\n(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x000000010266d444 libmpi.12.dylib`MPI_Abort\n    frame #1: 0x000000010f060d24 libmoose-dbg.0.dylib`UniqueStorage<PropertyValue>::operator[](this=0x000060001e6c9210, i=21) const at UniqueStorage.h:100:5\n    frame #2: 0x000000010f05fab8 libmoose-dbg.0.dylib`UniqueStorage<PropertyValue>::operator[](this=0x000060001e6c9210, i=21) at UniqueStorage.h:103:64\n    frame #3: 0x000000010f3ec5ac libmoose-dbg.0.dylib`MaterialPropertyStorage::initProps(this=0x000000010e882270, tid=0, state=0, elem=0x000060000350cc60, side=0, n_qpoints=4) at MaterialPropertyStorage.C:558:31\n    frame #4: 0x000000010f3eaaac libmoose-dbg.0.dylib`MaterialPropertyStorage::initProps(this=0x000000010e882270, tid=0, elem=0x000060000350cc60, side=0, n_qpoints=4) at MaterialPropertyStorage.C:529:27\n    frame #5: 0x000000010f49e480 libmoose-dbg.0.dylib`MaterialPropertyStorage::initStatefulProps(this=0x000000010e882270, tid=0, mats=size=11, n_qpoints=4, elem=0x000060000350cc60, side=0) at MaterialPropertyStorage.C:349:16\n    frame #6: 0x0000000110e45b0c libmoose-dbg.0.dylib`ComputeMaterialsObjectThread::onInterface(this=0x000000016fdf7948, elem=0x000060000350cc60, side=0, bnd_id=0) at ComputeMaterialsObjectThread.C:233:27\n    frame #7: 0x000000010fcb7a68 libmoose-dbg.0.dylib`ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>>::operator()(this=0x000000016fdf7948, range=0x00006000021ee9e0, bypass_threading=false) at ThreadedElementLoopBase.h:297:17\n    frame #8: 0x000000011007b810 libmoose-dbg.0.dylib`void libMesh::Threads::parallel_reduce<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*>, ComputeMaterialsObjectThread>(range=0x00006000021ee9e0, body=0x000000016fdf7948) at threads_pthread.h:367:5\n    frame #9: 0x000000011007b748 libmoose-dbg.0.dylib`FEProblemBase::initElementStatefulProps(this=0x000000010d050e00, elem_range=0x00006000021ee9e0, threaded=true) at FEProblemBase.C:7749:5\n    frame #10: 0x00000001100b560c libmoose-dbg.0.dylib`FEProblemBase::initialSetup(this=0x000000010d050e00) at FEProblemBase.C:1009:7\n    frame #11: 0x000000010f33eea0 libmoose-dbg.0.dylib`Transient::init(this=0x000000010d054c00) at Transient.C:225:12\n    frame #12: 0x000000011155ee14 libmoose-dbg.0.dylib`MooseApp::executeExecutioner(this=0x000000011d808218) at MooseApp.C:1160:19\n    frame #13: 0x0000000111558f00 libmoose-dbg.0.dylib`MooseApp::run(this=0x000000011d808218) at MooseApp.C:1544:5\n    frame #14: 0x0000000100013554 farms-dbg`main(argc=3, argv=0x000000016fdff590) at main.C:33:8\n    frame #15: 0x000000018a1dff28 dyld`start + 2236",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9931304",
                          "updatedAt": "2024-07-02T02:27:43Z",
                          "publishedAt": "2024-07-02T02:27:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This looks like it has to do with stateful material properties. There has been changes on this lately\n@dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/28029#discussioncomment-9931341",
                          "updatedAt": "2024-07-02T02:34:10Z",
                          "publishedAt": "2024-07-02T02:34:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PenaltyPeriodicSegmentalConstraint with different materials on the boundary",
          "author": {
            "login": "sebastianpech"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi,\nI'm trying to do computational homogenization of a deformation problem by using the PenaltyPeriodicSegmentalConstraint. I use this instead of the periodic boundary condition constraint because my mesh is not necessarily periodic. I pretty much followed the test/tests/mortar/periodic_segmental_constraint/penalty_periodic_simple2d.i example from the documentation (https://mooseframework.inl.gov/source/constraints/PenaltyPeriodicSegmentalConstraint.html), but I'm running into the following problem.\nIn comparison to the example from above, I have material inclusions that touch the boundary. As I understand I can only supply one pair of primary_subdomain and secondary_subdomain for a PenaltyPeriodicSegmentalConstraint. However, for applying the material I need to distinguish the lower-level elements in the subdomain and I can't seem to find a way to do this.\nI tried to use the boundary option of ComputeIsotropicElasticityTensor, however, this does not seem to work. Moose is still complaining about a missing material definition, so it seems that the newly generated subdomain is probably not in the sideset.\nSo my general problem (from my point of view) comes down to the following: I need all lower-level elements of one side of my specimen to be contained in one subdomain to use them in the PenaltyPeriodicSegmentalConstraint. However, In my material definition I need to be able to apply different materials to some of the elements in the subdomain. I can't seem to access them through a sideset definition and I can't split the subdomains because I need a single subdomain for the PenaltyPeriodicSegmentalConstraint.\nSo is this even possible?\nWhile reading through https://mooseframework.inl.gov/syntax/Materials/ I saw a note on \"Evaluation of Material Properties on Element Faces\". Maybe this could be an alternative approach, because the higher-level elements connected to the boundary have the material definition I need on the boundary. However, I couldn't find any further documentation on this.",
          "url": "https://github.com/idaholab/moose/discussions/28039",
          "updatedAt": "2024-07-02T16:08:10Z",
          "publishedAt": "2024-07-02T07:42:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I need all lower-level elements of one side of my specimen to be contained in one subdomain to use them in the PenaltyPeriodicSegmentalConstraint\n\n\nHowever, In my material definition I need to be able to apply different materials to some of the elements in the subdomain\n\nThis wont work with just block restriction of materials.\nYou'll have to use a trick. For example a 3rd material that based on the current subdomain ids uses one or the other definition of a material",
                  "url": "https://github.com/idaholab/moose/discussions/28039#discussioncomment-9937456",
                  "updatedAt": "2024-07-02T14:10:12Z",
                  "publishedAt": "2024-07-02T14:10:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sebastianpech"
                          },
                          "bodyText": "Ok, thanks. So how would I approach this? Coding a custom material?",
                          "url": "https://github.com/idaholab/moose/discussions/28039#discussioncomment-9938709",
                          "updatedAt": "2024-07-02T15:53:26Z",
                          "publishedAt": "2024-07-02T15:53:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "most likely yes.\nyou use declareMaterialProperty to declare the new property\nand you use getMaterialProperty in the constructor to retrieve references to the two material properties you are switching between",
                          "url": "https://github.com/idaholab/moose/discussions/28039#discussioncomment-9938852",
                          "updatedAt": "2024-07-02T16:08:11Z",
                          "publishedAt": "2024-07-02T16:08:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Dream3d output file suitable for simulating polycrystalline plasticity in Moose",
          "author": {
            "login": "gaoweijian1"
          },
          "bodyText": "Hello, I created a 3D polycrystalline RVE using EBSD data from one direction in dream3d (not based on statistical information, but a 1:1 replication). I want to know what type of file should be output in dream3d in order to input it into moose for crystal plasticity calculation. I have read a lot of discussions and saw some keywords including surface mesh generation and. msh files. Can you tell me the correct operation?\nKind greetings!\nWeijian Gao",
          "url": "https://github.com/idaholab/moose/discussions/28037",
          "updatedAt": "2024-07-02T12:03:15Z",
          "publishedAt": "2024-07-02T03:02:54Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is the reader you can use in moose\nhttps://mooseframework.inl.gov/source/meshgenerators/EBSDMeshGenerator.html\nEveryone seems to be using .txt for the file name extension. I am not sure what the exact file type is but you can look through the examples to check\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28037#discussioncomment-9931545",
                  "updatedAt": "2024-07-02T03:17:08Z",
                  "publishedAt": "2024-07-02T03:17:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "gaoweijian1"
                          },
                          "bodyText": "Hello\u00a0\u4f60\u597d\nThis is the reader you can use in moose\u8fd9\u662f\u60a8\u53ef\u4ee5\u5728\u9a7c\u9e7f\u4e2d\u4f7f\u7528\u7684\u9605\u8bfb\u5668 https://mooseframework.inl.gov/source/meshgenerators/EBSDMeshGenerator.html\nEveryone seems to be using .txt for the file name extension. I am not sure what the exact file type is but you can look through the examples to check\u4f3c\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u5728\u4f7f\u7528 .txt \u6587\u4ef6\u6269\u5c55\u540d\u3002\u6211\u4e0d\u786e\u5b9a\u786e\u5207\u7684\u6587\u4ef6\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u4f46\u60a8\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b\u8fdb\u884c\u68c0\u67e5\nBest,\u00a0\u6700\u597d Guillaume\u00a0\u7eaa\u5c27\u59c6\n\nThank you for your answer!",
                          "url": "https://github.com/idaholab/moose/discussions/28037#discussioncomment-9935996",
                          "updatedAt": "2024-07-02T12:03:15Z",
                          "publishedAt": "2024-07-02T12:03:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Viscoelasticity model in RACCOON",
          "author": {
            "login": "rynomcavoy"
          },
          "bodyText": "Hi, I didn't see any related discussions on this board so I'm posting a new one on this topic.\nI'm trying to implement a viscoelastic material into RACCOON for fracture simulation. The only related documentation for RACCOON that allows for viscoelasticity without plasticity that I saw is ComputeLargeDeformationStress which takes in an elasticity and viscoelasticity model.\nHowever, some other aspects of the RACCOON + viscoelastic marriage weren't clear. For example, ComputeLargeDeformationStress requires finite deformation measures, and those viscoelastic models that use finite strain measures require cree updates, and it's not clear how to include creep updates in the RACCOON framework. I'm wondering if anyone's seen some documentation anywhere that goes into this in a bit more detailed manner.\nHere's my input file, though there's an ADerror as it stands now:\n*** ERROR ***\n...:173.3:\nThe following error occurred in the MaterialBase 'stress' of type ComputeLargeDeformationStress.\n\nThe declared AD material property 'stress' of type 'RankTwoTensorTempl<double>'\nis already retrieved or declared as a non-AD property of type 'RankTwoTensorTempl<double>'.\n\n`E = 660e6\nnu = 0.3\nK = '${fparse E/3/(1-2*nu)}'\nG = '${fparse E/2/(1+nu)}'\n\nGc = 2.7 #need good values for this\nl = 0.02\n\noutput_name = 'tendon_fracture_predamaged_visco'\n\n[MultiApps]\n  [fracture]\n    type = TransientMultiApp\n    input_files = fracture_predamaged.i\n    cli_args = 'Gc=${Gc};l=${l}'\n    execute_on = 'TIMESTEP_END'\n  []\n[]\n\n[Transfers]\n  [from_d]\n    type = MultiAppCopyTransfer\n    from_multi_app = 'fracture'\n    variable = d\n    source_variable = d\n  []\n  [to_psie]\n    type = MultiAppCopyTransfer\n    to_multi_app = 'fracture'\n    variable = psie\n    source_variable = psie\n  []\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n  #density = 1e4\n[]\n\n[Mesh]\n  [generated]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 40\n    ny = 20\n    xmax = 2\n    ymax = 1\n  []\n  construct_side_list_from_node_list = true\n  #uniform_refine = 1\n[]\n\n[Adaptivity]\n  marker = marker\n  initial_marker = marker\n  initial_steps = 1\n  stop_time = 0\n  max_h_level = 1\n  [Markers]\n    [marker]\n      type = BoxMarker\n      bottom_left = '0.7 0 0'\n      top_right = '1.3 1 0'\n      outside = DO_NOTHING\n      inside = REFINE\n    []\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n[]\n\n[AuxVariables]\n  [fx]\n  []\n  [d]\n  []\n[]\n\n[ICs]\n  [IC_damage]\n    type = RndBoundingBoxIC\n    x1 = 0.95\n    x2 = 1.05\n    y1 = 0.3\n    y2 = 0.7\n    mx_invalue = 1.0\n    mn_invalue = 0.9\n    mx_outvalue = 0\n    mn_outvalue = 0\n    variable = d\n  [../]\n[]\n\n[Kernels]\n  [SolidMechanics]\n    displacements = 'disp_x disp_y'\n    use_displaced_mesh = true\n    use_automatic_differentiation = true \n  []\n[]\n\n[BCs]\n  [left_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  []\n  [left_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = left\n    value = 0\n  []\n  [right_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = right\n    value = 0\n  []\n  [right_x]\n    type = FunctionNeumannBC\n    function = '5e5 * 0.1 * (1 + sin(2*pi*t*5))'\n    #type = FunctionDirichletBC\n    #function = '0.001 * (sin(2*pi*t*5))'\n    variable = disp_x\n    boundary = right\n  []\n[]\n\n[Materials]\n  [bulk]\n    type = ADGenericConstantMaterial\n    prop_names = 'K G'\n    prop_values = '${K} ${G}'\n  []\n  [degradation]\n    type = PowerDegradationFunction\n    property_name = g\n    expression = (1-d)^p*(1-eta)+eta\n    phase_field = d\n    parameter_names = 'p eta'\n    parameter_values = '2 1e-6'\n  []\n  [./strain]\n    type = ADComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n  [../]\n  [defgrad]\n    type = ComputeDeformationGradient\n  []\n  [elasticity]\n    type = HenckyIsotropicElasticity\n    bulk_modulus = K\n    shear_modulus = G\n    phase_field = d\n    degradation_function = g\n    output_properties = 'elastic_strain psie'\n    outputs = exodus\n  []\n  [viscoelasticity]\n    type = GeneralizedKelvinVoigtModel\n    creep_modulus = '10e9 10e9'\n    creep_viscosity = '1 10'\n    poisson_ratio = 0.3\n    young_modulus = 660e6\n  [../]\n  [stress]\n    type = ComputeLargeDeformationStress\n    elasticity_model = elasticity\n    viscoelasticity_model = viscoelasticity\n    output_properties = 'stress'\n    outputs = exodus\n  []\n[]\n\n[UserObjects]\n  [./update]\n    type = LinearViscoelasticityManager\n    viscoelastic_model = viscoelasticity\n    use_automatic_differentiation = true\n  [../]\n[]\n\n[Postprocessors]\n  [Fx]\n    type = NodalSum\n    variable = fx\n    boundary = right\n  []\n  [damage_max]\n    type = ElementExtremeValue\n    value_type = max\n    variable = d\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  end_time = 1\n  dt = 0.01\n[]\n\n[Outputs]\n  file_base = '${output_name}'\n  exodus = true\n  csv = true\n  print_linear_residuals = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28028",
          "updatedAt": "2024-07-02T05:14:52Z",
          "publishedAt": "2024-07-01T06:10:22Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor the current error, ComputeLargeDeformationStress seems to expect stress to be an AD tensor property.\nBut the producer of stress, whichever it is, is producing it as a regular tensor property\nYou will need to use\n[Debug]\n  show_material_props = true\n\nto sort out who is producing what and with what type.",
                  "url": "https://github.com/idaholab/moose/discussions/28028#discussioncomment-9930954",
                  "updatedAt": "2024-07-02T01:22:07Z",
                  "publishedAt": "2024-07-02T01:22:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rynomcavoy"
                          },
                          "bodyText": "Got it. Looks like it was either the GeneralizedKelvinVoigtModel or the LinearViscoelasticityManager. Commenting out either of those two fixes the error, but thne there needs to be another way to include viscous effects.",
                          "url": "https://github.com/idaholab/moose/discussions/28028#discussioncomment-9931967",
                          "updatedAt": "2024-07-02T04:50:46Z",
                          "publishedAt": "2024-07-02T04:50:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Seems only one can be used. Maybe you can try with a prefix (base_name) and some sort of stress combiner matrix, like\nhttps://mooseframework.inl.gov/source/materials/ComputeMultipleInelasticStress.html\n@hugary1995 thoughts?",
                          "url": "https://github.com/idaholab/moose/discussions/28028#discussioncomment-9932098",
                          "updatedAt": "2024-07-02T05:14:52Z",
                          "publishedAt": "2024-07-02T05:14:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Negative Jacobians During Thermal Expansion and Elastic Deformation",
          "author": {
            "login": "wrkendrick"
          },
          "bodyText": "Hey all,\nI'm running a pretty large mesh (generated via the Reactor module in MOOSE) doing a thermal solve w/ HeatConduction and deformation with IsotropicElasticityTensor, ComputeThermalExpansionEigenstrain, ComputeFiniteStrainElasticStress, and Physics/SolidMechanics/QuasiStatic. I'll provide an example of my use of each below.\nThe problem I'm running in to, is negative Jacobians specifically at certain TRI mesh blocks. The blocks where this happens are the TRIs in created from PolygonConcentricCircleMeshGenerator, almost all occurring in bottom of the geometry (where the reflector is defined). I've seen this happen before where a mesh element is small and the expansion inverts the mesh, but that's not what's happening here. All the volumes in the error report are positive, nothing stands out when I visually inspect the mesh, I even increased the size of the TRI elements and still get the errors.\nHere's the geometry and the specific blocks that get the errors:\n\n\nAny ideas on what's causing this? Feel free to ask questions, I'm a bit in the dark of how to approach debugging this, so any help is very appreciated.\nEdit: Also of note, my first attempt to debug this was setting the thermal expansion coefficient for the entire reflector material to 0. This worked for a handful of non-linear iterations, but eventually failed.\nI'll attach my input and the error output so you can check it out. Apologies in advance for how large the input it, I generate it via a few scripts so it's not very human-readable.\ninput.txt\nproblems.txt\nThanks y'all.",
          "url": "https://github.com/idaholab/moose/discussions/28023",
          "updatedAt": "2024-07-02T02:17:37Z",
          "publishedAt": "2024-06-30T16:40:02Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI can see some really narrow tris in the problem.e mesh. Did you try to coarsen the mesh?\nThe mesh diagnostics generator detects thousands of non-planar sides.\n*** Info ***\nNumber of non-planar element sides detected: 19388\n\nAre these the ones on the outer part of cylinders? I think we expect those to be non planar on a second order mesh. That should be ok if so. We should still check that:\nn_azim * n_pins * n_axial is equal to 19388\ndoes this run with first order?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9919053",
                  "updatedAt": "2024-06-30T20:26:54Z",
                  "publishedAt": "2024-06-30T20:26:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wrkendrick"
                          },
                          "bodyText": "Apologies, I uploaded incorrectly. Problem.txt is the exodus mesh of the problem subdomains reported from the error output, as you probably figured out. I ran a 2nd order run (slightly different geometry, same errors) and I'll attach the actual error output and the mesh generator file so you can check it out and rebuild the mesh yourself.\ncore_gen.txt\nerror.txt\nI'll check this number of sides.\nI just ran a case with 1st order and it worked with no errors! Does that mean it's a 2nd order problem? Something to do with stress tensor calculations on the 2nd order tri elements?\nI regenerated a new mesh using the quad_center_elements = false for all PolygonConcentricCircleMeshGenerator, so it may get further. I don't see any way to avoid TRI elements in HexagonConcentricCircleAdaptiveBoundaryMeshGenerator so it may still break.",
                          "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9919763",
                          "updatedAt": "2024-06-30T23:47:57Z",
                          "publishedAt": "2024-06-30T23:47:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you try with PRISM18?\nTo get those you have to extrude from a lower order TRI. So TRI6 instead of TRI7\nsee tri_element_type in\nhttps://mooseframework.inl.gov/source/meshgenerators/PolygonConcentricCircleMeshGenerator.html\nEDIT I tried and the PeripheralRingMeshGenerator does not support higher order for now. i ll hit up the reactor module team\nEDIT how did you even get PRISM21? I see PRISM18 from the conversion?",
                          "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9931062",
                          "updatedAt": "2024-07-02T02:06:38Z",
                          "publishedAt": "2024-07-02T01:40:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There is two groups of problematic elements in error.txt.\n(hmin = small side, hmax = largest side)\nSome are 0.2 for hmin and 10 for hmax\nand some are 0.03 for hmin and 10 for hmax\nBoth groups have a single side with 1 nullptr element? Do you know why that is? Are they on an actual external boundary of the mesh?\nboth are very thin. If we could have a less fine discretization (with less sectors) I think it could help\nquad_center_elements = false  actually does not help make nice tri elements. With a quad element at the center, the mesh looks better imo\nEDIT I tried and the PeripheralRingMeshGenerator does not support higher order for now. i ll hit up the reactor module team",
                          "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9931079",
                          "updatedAt": "2024-07-02T01:57:05Z",
                          "publishedAt": "2024-07-02T01:44:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Something to do with stress tensor calculations on the 2nd order tri elements?\n\nthat's possible. Or something to do with prism21 being finicky.\nNote that you don't use all 21 nodes, in the error.txt output 3 nodes have no dofs",
                          "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9931109",
                          "updatedAt": "2024-07-02T01:51:53Z",
                          "publishedAt": "2024-07-02T01:51:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Could you please share a version of the thermo-mechanics input that works with the mesh from core_gen.txt out of the box?\nI am getting missing subdomains, I am guessing you used a different mesh for the input.i(txt) file",
                          "url": "https://github.com/idaholab/moose/discussions/28023#discussioncomment-9931238",
                          "updatedAt": "2024-07-02T02:17:37Z",
                          "publishedAt": "2024-07-02T02:17:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Mesh object for creating internal surface?",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I'm trying to create an internal surface in a rectangular mesh to use an interface BC with. This is the setup:\n\n(NB, the surface does not cut through the blue box). Previously, with the case where theta = 0, I had simply created two different blocks in the lower (black) rectangle with BoundingBoxNodeSetGenerator (even though both sides had the same material properties), and then I used SideSetsBetweenSubdomainsGenerator to define the surface.\nNow that I have an angle, is it still possible to do this, or would I need to try to do it directly from the mesh generation software? I was having issues with that in the past (refining specific subregions within the meshing software and still retaining domain names) hence why I did the subdomain definitions within MOOSE.",
          "url": "https://github.com/idaholab/moose/discussions/28033",
          "updatedAt": "2024-07-01T21:46:09Z",
          "publishedAt": "2024-07-01T20:20:32Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you use the ParsedGenerateSideset?\nthis can work with an equation, if the nodes exist already at the right location\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9929642",
                  "updatedAt": "2024-07-01T20:32:24Z",
                  "publishedAt": "2024-07-01T20:32:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "this should work, thanks. Is there a way to run an input file and have it output the mesh (without running the whole simulation) with the moose-defined sidesets viewable in paraview? Just to be sure that my equation is defining it appropriately.",
                          "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9929956",
                          "updatedAt": "2024-07-01T21:27:15Z",
                          "publishedAt": "2024-07-01T21:27:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "add --mesh-only on the command line after the input file name",
                          "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9929969",
                          "updatedAt": "2024-07-01T21:30:18Z",
                          "publishedAt": "2024-07-01T21:30:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "thanks. but I just realized that actually, this might not work- I'm defining a variable jump so I need to be able to define different variables on each side of the sideset. Would there be a way to split the block into two based on the defined sideset?",
                          "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9929975",
                          "updatedAt": "2024-07-01T21:31:35Z",
                          "publishedAt": "2024-07-01T21:31:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if the expression you use to define the sideset is good enough for ParsedGenerateSideset, then it will work very similarly in ParsedSubdomainGenerator which you can use to split the mesh into blocks",
                          "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9930035",
                          "updatedAt": "2024-07-01T21:43:39Z",
                          "publishedAt": "2024-07-01T21:43:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "hmm okay this should work, thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/28033#discussioncomment-9930044",
                          "updatedAt": "2024-07-01T21:46:05Z",
                          "publishedAt": "2024-07-01T21:46:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}