{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wMy0xMFQxMjo1MDo0Mi0wNjowMM4AO-eM"
    },
    "edges": [
      {
        "node": {
          "title": "How to output creep strain rate in the class \"PowerLawCreepStressUpdate\"",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Hi Moose experts or users,\nCould anyone share advice about how to output creep strain rate in PowerLawCreepStressUpdate with me? The power-law creep model just describes the secondary steady-state case and it cannot reflect whole creep behavior usually including three stages. Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/20575",
          "updatedAt": "2022-06-06T14:54:32Z",
          "publishedAt": "2022-03-16T15:33:32Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "recuero"
                  },
                  "bodyText": "The creep strain rate in PowerLawCreepStressUpdate is an internal local variable, so it can't be outputted as of now. You can output creep_strain instead, from which you could compute its rate.\nYeah, this is a fairly basic model. Blackbear (https://github.com/idaholab/blackbear), a MOOSE app, couples a library with more advanced creep models, in case you are interested.",
                  "url": "https://github.com/idaholab/moose/discussions/20575#discussioncomment-2375802",
                  "updatedAt": "2022-06-06T14:54:31Z",
                  "publishedAt": "2022-03-16T20:50:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Hi @recuero. Thank you for your advice. Could you tell me more about if there is an easy way to accurately compute creep strain rate from creep_strain? I saw there are many equations reported in the literature, which are not convenient to solve the rate from outputted strain.",
                          "url": "https://github.com/idaholab/moose/discussions/20575#discussioncomment-2376203",
                          "updatedAt": "2022-06-06T14:54:31Z",
                          "publishedAt": "2022-03-16T21:55:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "Probably the most convenient is to compute it from the stress by making use of the power law equation and the input parameters. This class implements the typical A * stress^{n} Norton model with some extra parameters.",
                          "url": "https://github.com/idaholab/moose/discussions/20575#discussioncomment-2376324",
                          "updatedAt": "2022-06-06T14:54:31Z",
                          "publishedAt": "2022-03-16T22:15:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "I see. Appreciate your help.",
                          "url": "https://github.com/idaholab/moose/discussions/20575#discussioncomment-2376337",
                          "updatedAt": "2022-06-06T14:54:31Z",
                          "publishedAt": "2022-03-16T22:18:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "mambaforge3 installation problem",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hey everyone,\nI decided to attempt to completely wipe my MOOSE and reinstall everything (due to an ugly non-MOOSE problem i was having).   I just rm -Rf /opt/moose and deleted some stuff from my .zshrc.  I started to follow the instructions at https://mooseframework.inl.gov/getting_started/installation/conda.html but got stuck on the 2nd step (!!)\nwil04q@FOURIER-PH: /Users/wil04q/> bash Mambaforge-MacOSX-x86_64.sh -b -p ~/mambaforge3\nPREFIX=/Users/wil04q/mambaforge3\nUnpacking payload ...\nMambaforge-MacOSX-x86_64.sh: line 362: /Users/wil04q/mambaforge3/conda.exe: Input/output error\nMambaforge-MacOSX-x86_64.sh: line 365: /Users/wil04q/mambaforge3/preconda.tar.bz2: No such file or directory\n\nAny ideas how to fix this?\na",
          "url": "https://github.com/idaholab/moose/discussions/20573",
          "updatedAt": "2022-06-10T17:10:15Z",
          "publishedAt": "2022-03-16T10:37:14Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Can you try using sh instead of bash (just for funzies). I think I've seen something like this in the past for a bad interpreter parameter.",
                  "url": "https://github.com/idaholab/moose/discussions/20573#discussioncomment-2372428",
                  "updatedAt": "2022-06-10T17:10:35Z",
                  "publishedAt": "2022-03-16T12:28:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @milljm : I got the same error using sh and bash.  I'm wondering whether this is a recent error in mambaforge, as there is an issue with identical error message opened 16 days ago at mamba-org/mamba#1543 .    FYI, the command brew install miniforge also gives the same error message.\nI ended up installing anaconda for python3.7 as per https://docs.anaconda.com/anaconda/install/mac-os/ .  I then followed the instructions at https://mooseframework.inl.gov/getting_started/installation/conda.html , replacing mamba with conda, viz\nconda config --add channels https://conda.software.inl.gov/public\nconda init\nconda create --name moose -q -y\nconda activate moose\nconda install moose-tools moose-libmesh\nconda deactivate\nconda activate moose\n\nand also adding conda activate moose to the bottom of my .zshrc.\nDo you think that's OK for now?\na",
                          "url": "https://github.com/idaholab/moose/discussions/20573#discussioncomment-2375932",
                          "updatedAt": "2022-06-10T17:10:40Z",
                          "publishedAt": "2022-03-16T21:09:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@WilkAndy\nyou can use conda that should work well too, just a little slower than mamba.\nWe'll keep an eye out to see if others are affected with mamba",
                          "url": "https://github.com/idaholab/moose/discussions/20573#discussioncomment-2375966",
                          "updatedAt": "2022-06-10T17:10:47Z",
                          "publishedAt": "2022-03-16T21:15:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Divergence of vector AuxVariable in AuxKernel",
          "author": {
            "login": "RossMech"
          },
          "bodyText": "Hello everyone,\nI would like to ask if one can calculate divirgence of vector AuxVariable as scalar AuxVariable with some kind of AuxKernel? If there is no such functionality implemented, then how it is possible to call divergence operator inside of AuxKernel source code?\nThank you for the answer in advance!\nBest regards,\nRostyslav Nizinkovskyi.",
          "url": "https://github.com/idaholab/moose/discussions/20554",
          "updatedAt": "2022-08-01T06:34:24Z",
          "publishedAt": "2022-03-15T10:22:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is this one:\nhttps://mooseframework.inl.gov/source/auxkernels/INSDivergenceAux.html\nin the Navier Stokes module. What modules are you currently using?\nNevermind the description in the documentation, it does compute the divergence.\nI ll fix the docs in an upcoming PR\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20554#discussioncomment-2368499",
                  "updatedAt": "2022-08-01T06:34:24Z",
                  "publishedAt": "2022-03-15T22:22:08Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Thank you for the answer. I will try to implement it in the model!",
                          "url": "https://github.com/idaholab/moose/discussions/20554#discussioncomment-2372601",
                          "updatedAt": "2022-08-01T06:34:24Z",
                          "publishedAt": "2022-03-16T12:52:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Change Executioner parameters during run",
          "author": {
            "login": "reverendbedford"
          },
          "bodyText": "I would like to change an executioner parameter during a simulation run (as a function of time).  Specifically I want to switch automatic_scaling or possibly adjust rtol or atol to deal with a radical change in the how my model is loaded, which occurs sometime pretty late in the simulation.  These parameters are not controllable, according to the docs, so I can't use the [Control] system.  Is there any other way to do something like this?",
          "url": "https://github.com/idaholab/moose/discussions/20548",
          "updatedAt": "2022-07-18T16:09:09Z",
          "publishedAt": "2022-03-14T13:50:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I recall there is a parameter to recompute the scaling factor at every step. Probably something like compute_scaling_once = false.",
                  "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2357882",
                  "updatedAt": "2022-07-17T00:39:23Z",
                  "publishedAt": "2022-03-14T13:56:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "Yes, I tried that but it's not helping.\nI'm in a situation where automatic scaling is very helpful and probably required to get convergence for a large part of the simulation time.  But then I change my BCs radically near the end of the run (contact stops occuring) and if I keep automatic scaling on (either fixed or recomputed) nonlinear convergence \"bottoms out\"  and won't go below the tolerances I have configured for the bulk of the simulation.\nI could increase nl_atol or nl_rtol  for the whole simulation but then I would get less accuracy than I want for the bulk of the simulation.  So it would be better to be able to control those as a function of time.  I could also switch automatic_scaling off at some point, if that was possible.",
                          "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2357903",
                          "updatedAt": "2022-07-17T00:39:23Z",
                          "publishedAt": "2022-03-14T14:00:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Currently not. Though there is interest for this feature, so either making a bunch of executioner parameters controllable, or making them be functions instead of single scalar/boolean values.\nMOOSE team is pretty busy rn so I dont think this will come soon unless outside contributors pitch in",
                  "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2361513",
                  "updatedAt": "2022-07-17T00:39:23Z",
                  "publishedAt": "2022-03-15T00:40:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "Thanks.  I take it it's not as easy as just marking those parameters as controllable :)",
                          "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2362023",
                          "updatedAt": "2022-07-17T00:39:28Z",
                          "publishedAt": "2022-03-15T02:51:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Actually for some of them it very well might be. Also make sure the class holds a reference to the scalar/boolean and not a value",
                          "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2362342",
                          "updatedAt": "2022-07-17T00:39:28Z",
                          "publishedAt": "2022-03-15T04:45:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "No, it's currently a no-go. Because NonlinearSystemBase doesn't have access to the outer FEProblemSolve. If you attempt to declare a parameter in FEProblemSolve as controllable, you'll have to store a reference in FEProblemSolve, and provide getters for others. This looks like a design issue to me.",
                          "url": "https://github.com/idaholab/moose/discussions/20548#discussioncomment-2365442",
                          "updatedAt": "2022-07-17T00:39:28Z",
                          "publishedAt": "2022-03-15T14:17:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Methodology for solving computational homogenization problems",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Dear all,\nI am finally down to the problem of selecting the right approach for performing homogenization calculations for my work.  (#18776) can be referred for the background information related to this work. The sub-model that is currently in use is driven by a stress tensor and solved by a global strain approach. I initially found this to be suitable to my requiremements when things are raw and not matured. As i tend to refine my approach to the solution of this multi-level FE problem i found out that the sub-model i am executing is supposed to be driven by a macroscopic deformation gradient, rather than a conventional stress tensor. The attached paper can be referred back to understand the specifics involved in this approach.\nGeers_computational_homogenization.pdf\nAs you can refer from section 4.2 the micro-scale problem is mainly influenced by the macro deformation gradient for each gauss point, that plays a key role in the macro-micro kinematcis and the ensuing boundary conditions. Please could you suggest if there are any such alternate methods available in MOOSE that can execute an RVE model purely through the application of macro deformation gradient? Also i will need to homogenize the PK stress tensor and tangent stiffness matrix and so i want the sub-model to be operating under a finite strain space. Can this be a possibility?\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/19997",
          "updatedAt": "2022-06-15T15:00:10Z",
          "publishedAt": "2022-01-10T18:17:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@SudiptaBiswas @sapitts",
                  "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-1987212",
                  "updatedAt": "2022-06-15T15:00:16Z",
                  "publishedAt": "2022-01-18T01:40:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "It is possible but I do not think it is even been solved before yet. For this, you need a multi-app models in which the master app is the macro problem and sub apps are the micro problem. If my understanding is correct, at each quadrature point of the macro problem, you need to solve a micro problem. For that you need to transfer the information, such as macro deformation gradient and homogenized PK stress and tangential stiffness from/to master to/from sub apps. That means you need implement customized transfer and figure out how to calculate/store those data.",
                  "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-1987468",
                  "updatedAt": "2022-06-15T15:00:17Z",
                  "publishedAt": "2022-01-18T03:13:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Thanks Wen. Thats indeed what i am working at the moment. I did create a method earlier for the customized transfer of key data items you listed here. I am currently trying to check how i can set up the RVE model, essentially the periodic boundary conditions driven by the macro deformation gradient tensor FM. Moose currently can handle the general PBC's by ensuring equal displacements along the periodic boundaries, u+ = u-.\nFor an FM driven RVE you may want to say (FM - I) (X+ - X-) = u+ - u-. Here I is the identity tensor and X being the position vector in the dimensional space.\nRe-writing this equation for the repsective periodic faces we can say\n(FM - I) X+ - u+ = (FM - I) X- - u-\nThe LHS and RHS literally implies the displacement quantities for the opposite periodic faces and this would seem analogous to U+ = U- and eventually required to be implemented in to PBC's. My intention here is to check if there are any possibilities to represent this expression ((FM - I) X- u) as PBC constraints through existing features available in MOOSE. Probably somebody might've tried similar attempts while addressing computational homogenization problems. Any thoughtful ideas here would be much appreciated.\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2017573",
                          "updatedAt": "2022-06-15T15:00:16Z",
                          "publishedAt": "2022-01-21T17:54:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "MOOSE uses GlobalStrain approach to enforce periodic BCs for mechanics problems. See https://mooseframework.inl.gov/syntax/Modules/TensorMechanics/GlobalStrain/",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2018056",
                          "updatedAt": "2022-06-15T15:00:17Z",
                          "publishedAt": "2022-01-21T18:57:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Wen,\nThanks for the suggestions. More questions from my side.\n\nIt seems like the global strain approach is another way of enforcing periodicity constraints while running an RVE sub-model, however driven by a macro stress tensor. I wonder whether this model gives equivalent results as that of the conventional RVE models for computational homogenization driven by a macro deformation gradient. I was particularly keen to know how the micro-fluctuation field is super-imposed in the calculation of current configuration in MOOSE as it was the case for the FM driven analysis\ngiven here Geers_Kuznetsova_EncyclopCompMech_Chapter.pdf in section 4.2.\nI would want to see the global strain approach to be extended to large strain material models, so that calculation of PK1 (for homogenization) makes relevance there. I am not sure how extensive this work is, if one wants to take initiative and do the extension activities.\nIs it necessary to use CPFE material models alongside global strain models to be able to generate the right results reflecting the micro material-behavour at this scale. At the current level of implementation CPFE models aren't supported and so additional work required here.\nDo you see the homogenized tangent stiffness matrix to be returned to the macro model along with PK1?\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2033316",
                          "updatedAt": "2022-06-15T15:00:17Z",
                          "publishedAt": "2022-01-24T11:52:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@jiangwen84",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2084022",
                          "updatedAt": "2022-07-11T09:23:57Z",
                          "publishedAt": "2022-01-31T19:11:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "We have a publication, where you can find more about the applicability of the GlobalStrain approach.  It has mostly been used for RVE based mesoscale simulations. https://www.sciencedirect.com/science/article/pii/S0168874X20301165",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2085824",
                          "updatedAt": "2022-07-11T09:23:57Z",
                          "publishedAt": "2022-02-01T01:42:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Sudipta,\nI find GlobalStrain approach to be suitable for solving RVE homogenization problems but with certain adjustments. Once after the RVE solution phase is completed i may need to add up the macro-displacement field with the fluctuation field to arrive at the current configuration. The macro-deformation gradient is further added up with the deformation gradient due to fluctuation field in order to obtain the micro-deformation gradient. This would then help me to compute the Piola stresses needed to be scaled to the macro gauss points. I would be required to work in a large strain setting if want to compute these stress measures and accomplish the task of homogenization. May i ask your help in porting the global strain models to work under an incremental strain setting #18776, so that we provide an interface to access large strain material models. Without this activity we may not be able to achieve the correct set of stress measures for homogenization.\nThanks and regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2090838",
                          "updatedAt": "2022-07-11T09:23:57Z",
                          "publishedAt": "2022-02-01T17:43:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "Hi Arun, Unfortunately, I won't have the opportunity to work on it any time soon.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2145886",
                          "updatedAt": "2022-07-11T09:23:57Z",
                          "publishedAt": "2022-02-10T01:07:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "This was done as part of the new tensor_mechanics \"Lagrangian\" kernels.  See https://mooseframework.inl.gov/modules/tensor_mechanics/Homogenization.html.  You can drive the RVE with either an imposed 1st PK stress tensor, an imposed deformation gradient, or a combination of both.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2154725",
                          "updatedAt": "2022-07-11T09:24:00Z",
                          "publishedAt": "2022-02-11T03:48:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Thanks for suggesting this method. It indeed looks very much interesting. Before integrating this RVE model, i wanted to clarify certain things, mainly on the front of data quantities that needed to be passed between the macro and RVE models to accomplish the workflow. Looking at the system documentation, it seems like this method primarily aims at imposing scale transition constraints based on the targets set by the user. These targets are either the stress or deformation gradient measures for a model that exhibits a large strain kinematic behaviour. My question is how do we know these targets before we intend to run the RVE model. Essentially the effective properties (PK1) that we might expect to compute from a typical homogenization scheme, are volume averaged and are equivalent to these targets which are eventually transferred to the macro gauss points. This scenario now presents with a dilemma as to what quantities are to be passed from and to the macro gauss points. Any clarification on this would be highly appreciated.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2228040",
                          "updatedAt": "2022-07-11T09:24:04Z",
                          "publishedAt": "2022-02-22T11:53:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "The imposed deformation gradient on the microscale problems would come from the displacement gradient in the macroscale problem.  The stress contributing to the residual in the macroscale problem would be the averaged PK1 stress calculated via the homogenization system over the microscale problems.\nIf you're asking about how to connect the microscale and macroscale problems I haven't done anything like that in the past.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2228901",
                          "updatedAt": "2022-07-11T09:24:01Z",
                          "publishedAt": "2022-02-22T14:17:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "abarun22"
                  },
                  "bodyText": "Hi Mark,\nI started working towards integrating this system in to my workflow. I am keen to know the requirement for item 3 in your previous note. Please could you let me know?",
                  "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2297166",
                  "updatedAt": "2022-06-15T15:00:22Z",
                  "publishedAt": "2022-03-04T18:49:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "Sorry, I missed the notification you replied.\n\nYou need that derivative in the macroscale problem to solve for equilibrium.\nPresumably you would calculate it as a scalar AuxVariable in your microscale problems with some sort of user object and then transfer it to the material property (\"pk1_jacobian\") in the macroscale problem.\nThe usual MOOSE way.  You can either use newton's method or PJFNK.  If you are careful with your Jacobians I would use newton.\nYes, there will be iterations on both the macroscale problem (equilibrium of the macroscale stress field) and on the microscale problems (equilibrium on the microscale + complying with the deformation gradient constraints).",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2297434",
                          "updatedAt": "2022-06-15T15:00:22Z",
                          "publishedAt": "2022-03-04T19:53:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Mark,\nI was trying to think of a framework from the multi-scale perspective and wanted to clarify the following.\n\nConcerning the derivative of first piola stress with respect to the macro deformation gradient, i am interested in the following relation when visualized from a macro model.\n\nThe variable _pk1_stress_hom is volume averaged and supposed to be transferred from the micro model. My concern is whether this quantity is already present in the volume averaged condition or i may need to do that explicitly in the micro-model before i transfer that to the macro. For example when you look at this line _pk1_stress[_qp](_indices[_h].first, _indices[_h].second) this does not seem to be a volume averaged variable, as it has been referenced for a quadrature point and not for a domain.\nI planned to compute this derivative from within the macro model as this seems the most optimal place to incorporate this material property. I guess just naming this variable as _pk1_jacobian and placing the calculations inside computeQpPK1Stress() will do the job.\nI presume that Newton's method will make use of the jacobian that we derive. How different is PJFNK from Newton's in this case?\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2317047",
                          "updatedAt": "2022-06-15T15:00:23Z",
                          "publishedAt": "2022-03-08T14:30:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "If you do things as I've suggested (use the system to impose the macroscale deformation) you will need to calculate the volume-averaged stress yourself.  You can use a postprocessor to average the \"pk1\" material property over the microscale domain.\nI don't think so.  You will need to calculate the derivative in the microscale problems and then transfer the information to your macroscale problem.\nAssuming you get your Jacobian correct Newton's method will likely convergence quicker (fewer iterations) and is generally faster for \"standard\" one scale mechanics problems.  But your situation is rather different.  If you don't want to get your Jacobian correct than you might use PJFNK, which is less sensitive to problems with the Jacobian.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2328593",
                          "updatedAt": "2022-06-15T15:00:23Z",
                          "publishedAt": "2022-03-10T03:39:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Mark,\nI wanted to recall one of my earlier question and clarify that before i move on with further activities. I am still not very clear how different are the homogenized RVE stresses as against the original macro stresses, since the method is based entirely on constraining the stresses or strains through the construction of residual. The stresses may not vary much even when the deformation gradients are allowed to drive the RVE model. If these arguments are valid, could this be relieved by adding the macro deformation gradient to the deformation gradient computed by the system? The later one is computed by the gradient of the micro-fluctuation field against the original RVE configuration. In that case we could also use the macro stresses instead of macro deformation gradients to drive the RVE. Do you see if these modifications are reasonable and compatible with the system assumptions?\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2360162",
                          "updatedAt": "2022-08-31T16:23:13Z",
                          "publishedAt": "2022-03-14T19:36:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "reverendbedford"
                          },
                          "bodyText": "That's what the system already does.  Please review the math in the documentation.\nThe displacements used in solving for the stresses in the microscale problem are the superposition of the  macroscale displacements and the microscale displacements.  If you entirely impose deformation gradient constraints, as I've suggested, the macroscale displacements are affine with the macroscale deformation gradient (your \"macro deformation gradient\".  The microscale displacements (your \"micro-flucation field\") are periodic but otherwise unconstrained.",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2362063",
                          "updatedAt": "2022-08-31T16:23:13Z",
                          "publishedAt": "2022-03-15T03:04:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Yes Mark, i see that the macro displacements are superposed over the micro-scale displacements while formulating the constraints. That's the key in coupling the macro model with the fine scale model and we might be able to see the influence of one on the other. I am currently working on developing a relevant transfer scheme for carrying the tensors between the scales. Do you see any other issues concerning this model to be going in to my work? If things are OK, i shall look further in to integrating the system with my framework.\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/19997#discussioncomment-2363832",
                          "updatedAt": "2022-08-31T16:23:13Z",
                          "publishedAt": "2022-03-15T10:01:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Show kernels for variables",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "Hello,\nIs there a debug flag, similar to show_material_props, which shows which kernels are attached to which variables?\nThanks,\nZack",
          "url": "https://github.com/idaholab/moose/discussions/20536",
          "updatedAt": "2022-03-14T15:03:23Z",
          "publishedAt": "2022-03-11T19:37:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDont think so. But verbose output for the kernel_coverage_check would do the trick if you're willing to dive in\nhttps://mooseframework.inl.gov/framework_development/sanity_checking.html#!\nHere's the list of all the Debug flags btw\nhttps://mooseframework.inl.gov/syntax/Debug/index.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20536#discussioncomment-2342407",
                  "updatedAt": "2022-03-11T21:33:21Z",
                  "publishedAt": "2022-03-11T21:33:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Dynamic] apply the impulse (BCs) on the nodes or the elements level instead of surface?",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nJust wondering if it is possible to apply the impulse on nodes or elements level? I see from the example, like this one dynamics/prescribed_displacement/3D_QStatic_1_Ramped_Displacement_with_gravity.i, we can apply BCs [PresetAcceleration PresetDisplacement PresetVelocity] only on the surface level.\n[Functions]\n  [./displacement_front]\n    type = PiecewiseLinear\n    data_file = 'displacement.csv'\n    format = columns\n  [../]\n[]\n\n[BCs]\n  [./prescribed_displacement]\n    type = PresetDisplacement\n    variable = disp_z\n    velocity = vel_z\n    acceleration = accel_z\n    beta = 0.25\n    boundary = front\n    function = displacement_front\n  [../]\n\n\nIs there any way to work around this?\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/20121",
          "updatedAt": "2024-04-01T22:54:48Z",
          "publishedAt": "2022-01-25T09:50:49Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@jiangwen84",
                  "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2093491",
                  "updatedAt": "2024-04-01T22:54:55Z",
                  "publishedAt": "2022-02-02T05:13:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@Traiwit still need help on this?\nI can tag others who may know",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2281724",
                          "updatedAt": "2024-04-01T22:54:58Z",
                          "publishedAt": "2022-03-02T16:27:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud I kinda know how to work around it using external software to create surfaces around particular nodes/elements, but yeh it would be nice to hear from the expert if it is possible to do this without having to generate extra surfaces.\nThanks!\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2292359",
                          "updatedAt": "2024-04-01T22:54:59Z",
                          "publishedAt": "2022-03-04T02:38:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen @lindsayad",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2300533",
                          "updatedAt": "2024-04-01T22:54:55Z",
                          "publishedAt": "2022-03-05T15:52:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "In theory we could develop classes that apply displacements for specific node ids but I don't know if this is widely desired thing. Picking out node ids is often a cumbersome process, especially for large number of nodes. Consequently choosing to apply for sidesets/nodesets is typically more desirable for our users. We do have the ExtraNodesetGenerator that allows you to create a nodeset from specific nodes.\nLet me know if I have misunderstood what you want.",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2311998",
                          "updatedAt": "2024-04-01T22:54:56Z",
                          "publishedAt": "2022-03-07T21:47:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @lindsayad,\nApplying BCs on nodesets is at least better than having to generate surfaces/sidesets.\nBUT is it possible to do that? for example PresetDisplacement requires boundary/side, or do you mean use ExtraNodesetGenerator then convert that into boundary/side?\n\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2312770",
                          "updatedAt": "2024-04-01T22:54:56Z",
                          "publishedAt": "2022-03-08T00:18:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Use ExtraNodesetGenerator to create a new nodeset and then whatever you specified for new_boundary in the ExtraNodesetGenerator should be your argument to boundary in PresetDisplacement",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2312801",
                          "updatedAt": "2024-04-01T22:55:15Z",
                          "publishedAt": "2022-03-08T00:27:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "works perfectly, thank you @lindsayad and @GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/20121#discussioncomment-2335365",
                          "updatedAt": "2024-04-01T22:55:16Z",
                          "publishedAt": "2022-03-10T23:14:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Custom damage",
          "author": {
            "login": "AdrienWehrle"
          },
          "bodyText": "Hi everyone,\nas a new MOOSE user, I am trying to implement, using MASTODON, my own equation for a custom damage as a function of the von Mises stress and some constants and defined as a first order variable across my domain. I found many examples for a damage as a function of (x, y, t) and its influence on stresses but couldn't find (most likely missed) an example that would help me in my application.\nI tried to have damage as a new material variable and access the von Mises stress to compute it. However, I run into an error when I want to multiply the stress to a value because it is a tensor... While I think it should, in theory, simply be a scalar?\nFiles needed to replicate this error are available here.\nerror: cannot convert 'libMesh::boostcopy::enable_if_c<true, libMesh::TypeTensor<double> >::type' {aka 'libMesh::TypeTensor<double>'} to 'libMesh::Real' {aka 'double'} in initialization\n   49 |   Real Xi = _alpha * _von_mises;\n      |             ~~~~~~~^~~~~~~~~~~~\n      |                    |\n      |                    libMesh::boostcopy::enable_if_c<true, libMesh::TypeTensor<double> >::type {aka libMesh::TypeTensor<double>}\n\nI think I am probably already wrong in my strategy. Damage should probably be an auxiliary variable and not a material one. I took that decision as I would like to have the material viscosity to depend on the damage in the case of viscous deformation in the future. What do you think?\nAny help and/or advice would be much appreciated! Thank you a lot!",
          "url": "https://github.com/idaholab/moose/discussions/20473",
          "updatedAt": "2022-06-30T04:03:39Z",
          "publishedAt": "2022-03-04T16:04:15Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "bwspenc"
                  },
                  "bodyText": "I believe that in MOOSE/tensor_mechanics we only have the damage base class as well as a couple of simple models that are really only useful for testing purposes. It sounds like those are the ones that you found. I would suggest looking at the Mazars damage model for concrete, which is implemented in the open-source BlackBear code:\nhttps://github.com/idaholab/blackbear/blob/devel/src/materials/MazarsDamage.C\nIt's a stress-dependent scalar damage model. I believe that you can optionally link BlackBear in with MASTODON if that model happens to suit your needs.",
                  "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2297985",
                  "updatedAt": "2022-06-30T04:03:40Z",
                  "publishedAt": "2022-03-04T21:54:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Thank you a lot @bwspenc, this is very useful and exactly what I needed (a basis to start working with)!",
                          "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2299222",
                          "updatedAt": "2022-06-30T04:03:53Z",
                          "publishedAt": "2022-03-05T06:56:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "bwspenc"
                  },
                  "bodyText": "I guess I didn't answer your question about why you got the compile error. You are coupling to a variable that provides a scalar, but to access the value of that at your quadrature point, you'd need to index into it like this: _von_mises[_qp].\nHowever, that isn't really the best way to get at the von Mises stress, because you're extracting that from the stress tensors at the quadrature points, and then converting that to a field variable, so you're losing information. It would be better to extract it directly as a scalar material property at your quadrature point, and then use that material property containing the von Mises stress in your damage model. The RankTwoInvariant material model in the tensor_mechanics module can give you the von Mises stress as a material property, and then you can grab that in your damage model using getMaterialProperty().",
                  "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2298314",
                  "updatedAt": "2022-06-30T04:04:27Z",
                  "publishedAt": "2022-03-04T23:14:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "However, that isn't really the best way to get at the von Mises stress, because you're extracting that from the stress tensors at the quadrature points, and then converting that to a field variable, so you're losing information. It would be better to extract it directly as a scalar material property at your quadrature point, and then use that material property containing the von Mises stress in your damage model. The RankTwoInvariant material model in the tensor_mechanics module can give you the von Mises stress as a material property, and then you can grab that in your damage model using getMaterialProperty().\n\nThank you a lot again, I haven't thought about using RankTwoInvariant, that indeed sounds like a much better and cleaner idea. Thank you a lot!",
                          "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2299227",
                          "updatedAt": "2022-06-30T04:05:04Z",
                          "publishedAt": "2022-03-05T06:59:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "AdrienWehrle"
                  },
                  "bodyText": "Based on @bwspenc's inputs I worked on my own custom damage material starting from BlackBear's MazarsDamage.\nAfter some debugging to (try to) get everything right, I finally got my application to run. Unfortunately now I am running into a logic error:\nmy damage variable is successfully initialized but somehow updateQpDamageIndex is never called. I tried to better understand what was happening through silly checks/prints in ScalarDamageBase.C but couldn't find what I'm doing wrong here... My damage update looks right and compiles but is apparently simply not called... Or I'm missing some important logs...\nThe custom damage object and my input file can be found here.\nAny help would be much appreciated, thank you a lot for your already precious help!",
                  "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2317169",
                  "updatedAt": "2022-06-30T04:05:04Z",
                  "publishedAt": "2022-03-08T14:48:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bwspenc"
                          },
                          "bodyText": "I think that's just because you need to comment out the block for the ComputeFiniteStrainElasticStress model and uncomment the block for the ComputeDamageStress model in your input file.",
                          "url": "https://github.com/idaholab/moose/discussions/20473#discussioncomment-2334885",
                          "updatedAt": "2022-06-30T04:05:20Z",
                          "publishedAt": "2022-03-10T21:36:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How can we get the example of laser melt pool in MOOSE homepage?",
          "author": {
            "login": "Salma-Mao"
          },
          "bodyText": "Dear everyone,\nI am new to MOOSE. I am trying the simulate the molten pool of selective laser melting. And I find a video about laser melt pool in MOOSE homepage. Anyone can share me the example.\nthanks,\nMS",
          "url": "https://github.com/idaholab/moose/discussions/20341",
          "updatedAt": "2022-06-29T16:18:36Z",
          "publishedAt": "2022-02-18T03:30:04Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cticenhour this was generated with Baldr I think",
                  "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2201678",
                  "updatedAt": "2022-06-29T16:18:43Z",
                  "publishedAt": "2022-02-18T03:35:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "I do not believe we have a laser melt pool example in the MOOSE repo. We developed ALE and Level-set based melt pool in a MOOSE-based application, called Malamute (was named as Baldr and Vahalla before).  @cticenhour do you know if it is possible for external users to get access to it?",
                  "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2201699",
                  "updatedAt": "2022-06-29T16:18:44Z",
                  "publishedAt": "2022-02-18T03:41:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "EDIT: MALAMUTE is now open source (no INL HPC account required). Please see https://github.com/idaholab/malamute\nThe process starts with obtaining an INL HPC account. MALAMUTE isn't under the new access control procedures, so I would have to double-check to see what the process would be for us. I can report back on this.\nOne note on the Baldr capability - we did have to update it from a much earlier version of MOOSE, so aspects of those models aren't quite working again yet. @lindsayad and I have been working on it as we've had time. I can also report back once we've got something more stable there.",
                  "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2205786",
                  "updatedAt": "2023-03-09T16:59:16Z",
                  "publishedAt": "2022-02-18T15:58:08Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "Thank you very much\uff01Look forward to the work in the future.",
                          "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2209054",
                          "updatedAt": "2022-06-29T16:18:44Z",
                          "publishedAt": "2022-02-19T07:16:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Eng-Mauvec"
                  },
                  "bodyText": "Hi, I am also interested on utilising MOOSE to simulate the melt pool during SLM. I have been trying to utilise the Heat Conduction module to mimic the latter but cannot find the way to apply the heat input from the laser as a boundary condition. Hence, may I also ask further instructions/information about getting access to MALAMUTE and the melt-pool example previously shown in the MOOSE homepage?\nMany thanks,\nM",
                  "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2308714",
                  "updatedAt": "2022-07-14T02:49:57Z",
                  "publishedAt": "2022-03-07T13:46:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "We will let you know when we have more information on getting the access to MALAMUTE.\nLet me try to help you with your first question regarding how to apply the heat input as a boundary condition. Could you provide a bit more information on what you are trying to do?",
                          "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2308921",
                          "updatedAt": "2022-07-14T02:50:15Z",
                          "publishedAt": "2022-03-07T14:21:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Salma-Mao"
                          },
                          "bodyText": "There is a example https://mooseframework.inl.gov/source/materials/FunctionPathEllipsoidHeatSource.html. You can change the example to Gaussian heat source  of SLM. If you have new idea, we can exchange the opinion.",
                          "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2308980",
                          "updatedAt": "2022-07-14T02:50:16Z",
                          "publishedAt": "2022-03-07T14:31:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eng-Mauvec"
                          },
                          "bodyText": "@jiangwen84 thank your for your response. Yes, I would like to apply a single BCs kernel that contains multiple heat transfer phenomena contributions e.g. convective + radiation, and/or the option to add more such as beam power. However, I only found independent BCs kernels for the radiation and convection.\nMay I also ask if there's a way to couple Thermo-Calc databases into MOOSE in order to retrieve temperature-dependent material properties, thermodynamic and mobility data  into the Heat Conduction and/or Phase-field modules?\nSecond question, is there a way to also account for phase transformations within the Heat Conduction module?\n@shuine-09 thank you for your suggestion, I was not aware about this Material kernel. I just recently started to explore the in-built heat conduction kernels in MOOSE before aiming to create alternative kernels. An initial idea was to perform the coordinate transformation approach published here: https://www.sciencedirect.com/science/article/pii/S1359645419307979.",
                          "url": "https://github.com/idaholab/moose/discussions/20341#discussioncomment-2334018",
                          "updatedAt": "2022-07-14T02:50:16Z",
                          "publishedAt": "2022-03-10T18:53:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Slow computation when when using tensor mechanics",
          "author": {
            "login": "geoyanzhan3"
          },
          "bodyText": "Hi,\nI am benchmarking MOOSE with COMSOL Multiphysics.\nWhen solving the same problem, MOOSE takes 10x more time than COMSOL. Both of them used 8 cores.\n\n\n\nSoftware\nNum Elems\nDOF\nTime\n\n\n\n\nMOOSE\n14152\n63714\n40+s\n\n\nCOMSOL\n22390\n98910\n4s\n\n\n\nI wonder if I miss something or my input setting needs optimization.\nI have attached the input files and meshes.\nThank you very much!\nYan\nTensorMechanics_speedup.zip\n[Mesh]\n  file = box3d_Grav0DefM1SOrd1P2_Nelem1.msh\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    strain = SMALL\n    add_variables = true\n  []\n[]\n\n[Materials]\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 30e9\n    poissons_ratio = 0.25\n  []\n  [elastic_stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[BCs]\n  [bottom]\n    type = DirichletBC\n    variable = disp_z\n    boundary = bottom\n    value = 0\n  []\n  [lf]\n    type = DirichletBC\n    variable = disp_x\n    boundary = leftright\n    value = 0\n  []\n  [fb]\n    type = DirichletBC\n    variable = disp_y\n    boundary = frontback\n    value = 0\n  []\n  [pressure_x]\n    type = Pressure\n    boundary = chamber\n    variable = disp_x\n    component = 0\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n  [pressure_y]\n    type = Pressure\n    boundary = chamber\n    variable = disp_y\n    component = 1\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n  [pressure_z]\n    type = Pressure\n    boundary = chamber\n    variable = disp_z\n    component = 2\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n[]\n\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Steady\n\n  solve_type = 'NEWTON'\n\n  petsc_options = '-snes_ksp_ew'\n  petsc_options_iname = '-pc_type -sub_pc_type -pc_asm_overlap -ksp_gmres_restart'\n  petsc_options_value = 'asm lu 1 101'\n[]\n\n\n[Outputs]\n  exodus = true\n  perf_graph = true\n  csv = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20513",
          "updatedAt": "2022-06-22T18:24:45Z",
          "publishedAt": "2022-03-09T15:49:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "@geoyanzhan3 The number of elements and dofs are different.  Any reason why you use different mesh or element types to solve the same problem? For this small problem, using 8 cores is not optimal. What linear solver does Comsol use?",
                  "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325403",
                  "updatedAt": "2022-06-22T18:25:06Z",
                  "publishedAt": "2022-03-09T16:28:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "@jiangwen84 Due to COMSOL does not support using the meshes created by gmsh. Also, the element types of COMSOL and MOOSE should be the same (tet 10 nodes).\nAnd if I don't use \"mpiexec -n 8\", it took MOOSE for >250s. COMSOL is using 8 cores. So I use 8 cores for MOOSE as well.\nIt seems COMSOL is using PARDISO. I have also tested MUMP. It took 4s to finish as well.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325497",
                          "updatedAt": "2022-06-22T18:25:08Z",
                          "publishedAt": "2022-03-09T16:38:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@geoyanzhan3 you need to use the same linear solver in both applications.\nand the same mesh. The size and shape of the cells influence the difficulty of solving the linear system.\nAs @jiangwen84 mentioned 8 cores is not optimal, it brings the simulation to ~8k dofs per processor. Our guideline is at least 20k\nalso, are you using the conda installation? It's not optimized for your machine, it's not architecture specific. You ll need to install your own MPI, petsc and libmesh to get better performance on your machine.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325527",
                          "updatedAt": "2022-06-22T18:25:07Z",
                          "publishedAt": "2022-03-09T16:44:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "@GiudGiud @jiangwen84 Do you know if MOOSE supports any of these mesh files from COMSOL?",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325542",
                          "updatedAt": "2022-06-22T18:25:08Z",
                          "publishedAt": "2022-03-09T16:47:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "@GiudGiud And, I followed this link https://mooseframework.inl.gov/getting_started/installation/conda.html, when installing the MOOSE. Is that what you do not recommend?",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325554",
                          "updatedAt": "2022-10-11T13:43:02Z",
                          "publishedAt": "2022-03-09T16:49:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "does not look like it\nHere's the list of mesh formats we support\nhttps://mooseframework.inl.gov/moose/source/mesh/FileMesh.html\nThat installation method is fine (great) for regular use. For benchmarking, I d follow that one instead:\nhttps://mooseframework.inl.gov/getting_started/installation/manual_installation_gcc.html",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325570",
                          "updatedAt": "2022-10-11T13:43:05Z",
                          "publishedAt": "2022-03-09T16:51:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "You can try MUMPS solver with MOOSE. I forgot if MUMPS is installed by default or not though.\n\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'\n\n\nI do not see any COMSOL supported mesh files can be directly imported to MOOSE. Maybe we can try a simple problem  (e.g., cube) that can be meshed in a same way in MOOSE and COMSOL.\nTake a closer look at the perf_graph. There is computational cost in problem setup, output, besides solving the system. So we want to make sure we are doing apples-to-apples comparison.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2325628",
                          "updatedAt": "2022-10-11T13:43:05Z",
                          "publishedAt": "2022-03-09T16:59:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "@jiangwen84 Thank you!\nI do see the solving time reduce from 40s to 7s when using:\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'\n\nUnfortunately, there is no obvious speed up when using:\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n\nas @hugary1995 suggested. Make me wonder if I should manually install gcc/mpich? Can it be the reason @GiudGiud ?",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326659",
                          "updatedAt": "2022-10-11T13:43:11Z",
                          "publishedAt": "2022-03-09T19:55:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "If you do not specify the pc_factor_mat_solver_package as @hugary1995 suggested, I believe the default will be superlu_dist for parallel runs. I have not seen any major difference in performance between MUMPS and superlu_dist. Maybe something is wrong with your installation as @GiudGiud mentioned.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326865",
                          "updatedAt": "2022-10-11T13:43:13Z",
                          "publishedAt": "2022-03-09T20:33:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "nothing is wrong afaik. It's just not as fast to install this way.\nHe's running serial in this case. So not sure it's that default",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326882",
                          "updatedAt": "2022-10-11T13:43:16Z",
                          "publishedAt": "2022-03-09T20:37:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "I think @jiangwen84 and @hugary1995 's suggestion has already helped a lot! I appreciate that! Also many thanks to @GiudGiud! I will try to use the mesh to conduct the benchmark. Please let me know if there is a good way to make COMSOL and MOOSE use the same mesh. This work aims to introduce MOOSE to earth science (volcanology) and make FEM more accessible to people who cannot afford expensive, commercial software",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326934",
                          "updatedAt": "2022-10-11T13:43:20Z",
                          "publishedAt": "2022-03-09T20:46:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Using the following options bring the solve time from 23.7 seconds down to 3.1 seconds on my laptop.\n[Executioner]\n  type = Steady\n\n  solve_type = 'NEWTON'\n\n  # petsc_options = '-snes_ksp_ew'\n  # petsc_options_iname = '-pc_type -sub_pc_type -pc_asm_overlap -ksp_gmres_restart'\n  # petsc_options_value = 'asm lu 1 101'\n\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n[]\nWe should really put a big bold emphasis somewhere in the tensor mechanics module doc saying that \"using a direct solver, e.g. superlu_dist, mumps, strumpack, etc. is strooooongly recommended\".",
                  "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326221",
                  "updatedAt": "2022-06-28T07:42:27Z",
                  "publishedAt": "2022-03-09T18:31:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Depends on your problem size I reckon. This is a really small problem, so LU scaling is not an issue.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326275",
                          "updatedAt": "2022-06-28T07:42:27Z",
                          "publishedAt": "2022-03-09T18:42:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Yeah, let's put a conditional so it reads:\n\n\"Using a direct solver, e.g. superlu_dist, mumps, strumpack, etc. is strooooongly recommended if memory isn't a concern\".",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326367",
                          "updatedAt": "2022-06-28T07:42:27Z",
                          "publishedAt": "2022-03-09T18:56:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "3.1s though. Are we faster than COMSOL now @geoyanzhan3  ?",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326392",
                          "updatedAt": "2022-06-28T07:42:27Z",
                          "publishedAt": "2022-03-09T19:00:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "With his box3d_Grav0DefM1SOrd1P2_Nelem1.msh mesh with 34791 dofs, the solve time reduces from 24s to 3.1s.\nWith his box3d_Grav0DefM1SOrd1P2_Nelem4.msh mesh with 63714 dofs, the solve time reduces from 56.8s to 9.5s.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326462",
                          "updatedAt": "2022-06-28T07:43:12Z",
                          "publishedAt": "2022-03-09T19:14:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "@hugary1995 Thank you! Have you changed other settings than 'petsc_options'? Why was my solve time only reduced from 40.27s to 40.03? I am using a single core.\nHere is the new code:\n[Mesh]\n  file = box3d_Grav0DefM1SOrd1P2_Nelem1.msh\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    strain = SMALL\n    add_variables = true\n  []\n[]\n\n[Materials]\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 30e9\n    poissons_ratio = 0.25\n  []\n  [elastic_stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[BCs]\n  [bottom]\n    type = DirichletBC\n    variable = disp_z\n    boundary = bottom\n    value = 0\n  []\n  [lf]\n    type = DirichletBC\n    variable = disp_x\n    boundary = leftright\n    value = 0\n  []\n  [fb]\n    type = DirichletBC\n    variable = disp_y\n    boundary = frontback\n    value = 0\n  []\n  [pressure_x]\n    type = Pressure\n    boundary = chamber\n    variable = disp_x\n    component = 0\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n  [pressure_y]\n    type = Pressure\n    boundary = chamber\n    variable = disp_y\n    component = 1\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n  [pressure_z]\n    type = Pressure\n    boundary = chamber\n    variable = disp_z\n    component = 2\n    factor = 1e6\n    use_displaced_mesh = true\n  []\n[]\n\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Steady\n\n  solve_type = 'NEWTON'\n\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  \n[]\n\n\n[Outputs]\n  exodus = true\n  perf_graph = true\n  csv = false\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326589",
                          "updatedAt": "2022-06-28T07:43:06Z",
                          "publishedAt": "2022-03-09T19:44:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I haven't changed other settings. I was using 8 cores.",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326936",
                          "updatedAt": "2022-06-28T07:43:20Z",
                          "publishedAt": "2022-03-09T20:47:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "Thank you @hugary1995 !\nIt works on my computer, when specify the \"pc_factor_mat_solver_package\".\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'",
                          "url": "https://github.com/idaholab/moose/discussions/20513#discussioncomment-2326943",
                          "updatedAt": "2022-06-28T07:43:20Z",
                          "publishedAt": "2022-03-09T20:48:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}