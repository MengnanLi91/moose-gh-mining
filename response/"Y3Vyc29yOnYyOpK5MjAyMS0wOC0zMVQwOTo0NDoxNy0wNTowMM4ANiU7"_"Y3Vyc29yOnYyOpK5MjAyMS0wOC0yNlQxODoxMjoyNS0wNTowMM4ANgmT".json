{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wOC0yNlQxODoxMjoyNS0wNTowMM4ANgmT"
    },
    "edges": [
      {
        "node": {
          "title": "Wave attenuation in Elastic Media",
          "author": {
            "login": "pharshaad"
          },
          "bodyText": "Hi all,\nI'm studying 1D wave propagation in an elastic material. I'm sending a sinusoidal pulse with 5MHz frequency by displacing one of the boundaries using FuncionDirichletBC (similar to wave_newmark.i example in tests/dynamics folder). What I'm observing is that the wavefront gets attenuated quite a bit even though the Newmark time integration parameters are \\beta = 0.25 and \\gamma = 0.5. This effect seems to be less pronounced in lower frequencies though. I was wondering what mechanism is behind this that I'm missing and is there a way to avoid it?\nThanks,\nLeon",
          "url": "https://github.com/idaholab/moose/discussions/18720",
          "updatedAt": "2022-06-22T02:16:18Z",
          "publishedAt": "2021-08-28T17:29:58Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Are you suggesting the Newmark beta time integrators is giving you incorrect solution? If so, could provide us with the correct/analytical solution to benchmark with?\nIf you are asking why wave attenuation is more pronounced with higher frequency inputs, then I honestly don't know (this isn't a moose question TBH). Tagging @cbolisetti in case he has some suggestions in this regard.",
                  "url": "https://github.com/idaholab/moose/discussions/18720#discussioncomment-1250159",
                  "updatedAt": "2022-06-22T02:16:20Z",
                  "publishedAt": "2021-08-29T15:06:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "This sounds like a meshing issue. In wave propagation, you need to make sure that your mesh is fine enough to capture all the frequencies you want. Higher frequencies have a smaller wavelength, and if your mesh is too coarse it may not be able to resolve these wavelengths. In wave propagation for seismic waves in soil, we typically follow a rule of thumb of having 10 elements per wavelength for the highest frequency you want to capture. We refine the mesh based on this number. That should ensure that the frequencies you are aiming for will propagate without attenuation. Let us know if that works.\n--\nSorry for the autocorrect errors earlier. Was typing on the phone while I was in a rush.",
                          "url": "https://github.com/idaholab/moose/discussions/18720#discussioncomment-1250335",
                          "updatedAt": "2022-06-22T02:16:22Z",
                          "publishedAt": "2021-08-29T16:11:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "If you attach the input file, it will be easier to answer.\nAs suggested by others, try to refine the mesh and see if the effect goes away,\nmake sure there are no damping terms as described here:\nhttps://mooseframework.inl.gov/modules/tensor_mechanics/Dynamics.html\nMake sure your time step is appropriate,\nstart with:\ndt = element size / propagation velocity / 10\nI have done wave propagation in moose and never\nobserved damping unless I introduced it on purpose.\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/18720#discussioncomment-1255611",
                  "updatedAt": "2022-06-22T02:16:22Z",
                  "publishedAt": "2021-08-30T18:35:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "pharshaad"
                          },
                          "bodyText": "Thanks @hugary1995 , @cbolisetti, and @ngrilli for the suggestions. It was the issue of time step size not being chosen small enough.\nCheers,\nLeon",
                          "url": "https://github.com/idaholab/moose/discussions/18720#discussioncomment-1255635",
                          "updatedAt": "2022-06-22T02:16:22Z",
                          "publishedAt": "2021-08-30T18:42:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to create a circular hole in square by mesh generator",
          "author": {
            "login": "KaijieNing"
          },
          "bodyText": "Hi, team,\nI wanted to create a circular hole in the square by mesh generator. I  used the following blocks from the input file, but the result was not good as seen below in Fig. 1. The expected result should be like a hole in Fig. 2.  Could you give me some advice on how to make it? Thanks very much.\n[./gen]\ntype = GeneratedMeshGenerator\ndim = 2\nnx = 30\nny = 30\nxmax = 60\nymax = 60\nelem_type = TRI3\n[../]\n[./hole]\ninput = gen\ntype = ParsedSubdomainMeshGenerator\ncombinatorial_geometry = 'r:=sqrt((x-30)^2+(y-30)^2);if(r<=15,1,0)'\nblock_id = 1\n[../]\n[block_deleted]\ntype = BlockDeletionGenerator\ninput = hole\nblock = 1\n[]\nFig.1\n\nFig.2",
          "url": "https://github.com/idaholab/moose/discussions/18557",
          "updatedAt": "2022-06-20T18:17:36Z",
          "publishedAt": "2021-08-09T04:31:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nUse this mesh generator with the outer_box parameter\nhttps://mooseframework.inl.gov/source/meshgenerators/ConcentricCircleMeshGenerator.html\nthen delete the center circle.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1147271",
                  "updatedAt": "2022-06-20T18:18:02Z",
                  "publishedAt": "2021-08-09T04:41:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Hi,\nI wanted to create a hole on a rectangular plate instead of a square plate. I found it is not straightforward. Can you give me some suggestions?\nThanks very much,\nKaijie",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1246619",
                          "updatedAt": "2022-06-20T18:18:02Z",
                          "publishedAt": "2021-08-28T03:15:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can stitch meshes on the sides on the square mesh to make it a rectangle.",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1246708",
                          "updatedAt": "2022-06-20T18:18:03Z",
                          "publishedAt": "2021-08-28T04:59:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "I am trying to solve it from your suggestion. I stitched the other one on the right side. [See below]. But now there is a boundary problem.\nI wanted to apply pressure to the right, but actually, it was on the top. The input and mesh info are shown below. Can you help me? Thanks very much.\n[Mesh]\n[./square]\ntype = ConcentricCircleMeshGenerator\nnum_sectors = 10\nradii = '    10    20'\nrings = '4     10     6'\nhas_outer_square = on\npitch = 60\npreserve_volumes = off\nsmoothing_max_it = 8\n[]\n[square_hole]\ntype = BlockDeletionGenerator\ninput = square\nblock = 1\n[]\n[./rect_top]\ntype = GeneratedMeshGenerator\ndim = 2\nny = 24\nnx = 10\nxmin = 30\nxmax = 50\nymin = -30\nymax = 30\n[]\n[./smg]\ntype = StitchedMeshGenerator\ninputs = 'square_hole rect_top '\nclear_stitched_boundary_ids = true\nstitch_boundaries_pairs = 'right left'\nparallel_type = 'replicated'\nshow_info = true\n[]\n[]\nIn ReplicatedMesh::stitch_meshes:\nThis mesh has 27 nodes on boundary 1.\nOther mesh has 27 nodes on boundary 3.\nMinimum edge length on both surfaces is 1.\nIn ReplicatedMesh::stitch_meshes:\nFound 27 matching nodes.\nIn ReplicatedMesh::stitch_meshes:\nThis mesh has 53 nodes on boundary 2.\nOther mesh has 53 nodes on boundary 4.\nMinimum edge length on both surfaces is 1.\nIn ReplicatedMesh::stitch_meshes:\nFound 53 matching nodes.\nIn ReplicatedMesh::stitch_meshes:\nThis mesh has 25 nodes on boundary 3.\nOther mesh has 25 nodes on boundary 3.\nMinimum edge length on both surfaces is 2.5.\nIn ReplicatedMesh::stitch_meshes:\nFound 25 matching nodes.\nStitchedMeshGenerator 'smg':  Mesh Information:\nStitchedMeshGenerator 'smg':   elem_dimensions()={2}\nStitchedMeshGenerator 'smg':   spatial_dimension()=2\nStitchedMeshGenerator 'smg':   n_nodes()=1194\nStitchedMeshGenerator 'smg':     n_local_nodes()=325\nStitchedMeshGenerator 'smg':   n_elem()=1116\nStitchedMeshGenerator 'smg':     n_local_elem()=279\nStitchedMeshGenerator 'smg':     n_active_elem()=1116\nStitchedMeshGenerator 'smg':   n_subdomains()=3\nStitchedMeshGenerator 'smg':   n_partitions()=4\nStitchedMeshGenerator 'smg':   n_processors()=4\nStitchedMeshGenerator 'smg':   n_threads()=1\nStitchedMeshGenerator 'smg':   processor_id()=0\nStitchedMeshGenerator 'smg':   is_prepared()=true\nStitchedMeshGenerator 'smg':   is_replicated()=true\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Bounding Box:\nStitchedMeshGenerator 'smg':   Minimum: (x,y,z)=(     -30,      -30,        0)\nStitchedMeshGenerator 'smg':   Maximum: (x,y,z)=(      50,       30,        0)\nStitchedMeshGenerator 'smg':   Delta:   (x,y,z)=(      80,       60,        0)\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Element Type(s):\nStitchedMeshGenerator 'smg':   QUAD4\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Nodesets:\nStitchedMeshGenerator 'smg':   Nodeset 0 (bottom), 10 nodes\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(      32,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':   Nodeset 1 (left), 25 nodes\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(      50,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':   Nodeset 2 (bottom), 10 nodes\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(      32,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(-1.79769e+308, -1.79769e+308, -1.79769e+308)\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Sidesets:\nStitchedMeshGenerator 'smg':   Sideset 0 (bottom), 10 sides (EDGE2), 10 elems (QUAD4), 11 nodes\nStitchedMeshGenerator 'smg':    Side volume: 20\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(      30,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      50,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      20, 7.10543e-15,        0)\nStitchedMeshGenerator 'smg':   Sideset 1 (left), 48 sides (EDGE2), 48 elems (QUAD4), 50 nodes\nStitchedMeshGenerator 'smg':    Side volume: 120\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(     -30,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      50,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      80,       60,        0)\nStitchedMeshGenerator 'smg':   Sideset 2 (bottom), 34 sides (EDGE2), 34 elems (QUAD4), 36 nodes\nStitchedMeshGenerator 'smg':    Side volume: 80\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(     -30,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      50,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      80,       60,        0)\nStitchedMeshGenerator 'smg':   Sideset 4 (top), 24 sides (EDGE2), 24 elems (QUAD4), 25 nodes\nStitchedMeshGenerator 'smg':    Side volume: 60\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(     -30,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      30,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      60, 3.55271e-15,        0)\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Edgesets:\nStitchedMeshGenerator 'smg':   None\nStitchedMeshGenerator 'smg':\nStitchedMeshGenerator 'smg':  Mesh Subdomains:\nStitchedMeshGenerator 'smg':   Subdomain 0: 240 elems (QUAD4, 240 active), 275 active nodes\nStitchedMeshGenerator 'smg':    Volume: 1200\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(      30,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      50,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      20,       60,        0)\nStitchedMeshGenerator 'smg':   Subdomain 2: 400 elems (QUAD4, 400 active), 437 active nodes\nStitchedMeshGenerator 'smg':    Volume: 938.607\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(     -20,      -20,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      20,       20,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      40,       40,        0)\nStitchedMeshGenerator 'smg':   Subdomain 3: 476 elems (QUAD4, 476 active), 541 active nodes\nStitchedMeshGenerator 'smg':    Volume: 2348.52\nStitchedMeshGenerator 'smg':    Bounding box minimum: (x,y,z)=(     -30,      -30,        0)\nStitchedMeshGenerator 'smg':    Bounding box maximum: (x,y,z)=(      30,       30,        0)\nStitchedMeshGenerator 'smg':    Bounding box delta: (x,y,z)=(      60,       60,        0)\nStitchedMeshGenerator 'smg':   Global mesh volume = 4487.13\nThe following total 1 aux variables:\nFe\nare added for automatic output by MaterialOutputAction.",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1247569",
                          "updatedAt": "2022-06-20T18:18:03Z",
                          "publishedAt": "2021-08-28T14:21:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Those mesh generators have pre-defined names and maybe the stitched ones dont match so well.\nI would re-define the boundary you want using the sidesetmesh generators",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1247584",
                          "updatedAt": "2022-06-20T18:18:43Z",
                          "publishedAt": "2021-08-28T14:28:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Here is what I changed in the input file. But it showed an error. How should I further improve it? Thanks.\n\n[Mesh]\n[./rectR]\ntype = GeneratedMeshGenerator\ndim = 2\nny = 24\nnx = 10\nxmin = 30\nxmax = 50\nymin = -30\nymax = 30\n[]\n[./square]\ntype = ConcentricCircleMeshGenerator\nnum_sectors = 10\nradii = '    10    20'\nrings = '4     10     6'\nhas_outer_square = on\npitch = 60\npreserve_volumes = off\nsmoothing_max_it = 8\n[]\n[squareHole]\ntype = BlockDeletionGenerator\ninput = square\nblock = 1\n[]\n[./smg]\ntype = StitchedMeshGenerator\ninputs = 'squareHole rectR '\nclear_stitched_boundary_ids = true\nstitch_boundaries_pairs = 'right left'\nparallel_type = 'replicated'\nshow_info = true\n[]\n[./block_1]\ntype = SideSetsAroundSubdomainGenerator\ninput = smg\nblock = 'rectR'\nnew_boundary = 'pull'\nnormal = '1 0 0'\n[]\n[./block_2]\ntype = SideSetsAroundSubdomainGenerator\ninput = block_1\nblock = 'squareHole'\nnew_boundary = 'fix'\nnormal = '-1 0 0'\n[]\nconstruct_side_list_from_node_list = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1247621",
                          "updatedAt": "2022-06-20T18:18:38Z",
                          "publishedAt": "2021-08-28T14:48:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you run with --mesh-only mode, look at the mesh in paraview then examine what sidesets seem to be missing?\nWhat is the name of the sideset you are trying to reference in the boundary condition?",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1247661",
                          "updatedAt": "2022-06-20T18:18:46Z",
                          "publishedAt": "2021-08-28T15:05:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Great. I am doing it. It is getting better.\nWith ParaView, I can see the element block ID (fig 1 below), but I cannot see boundary ID(fig 2 below). Where should I see boundary ID? Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1248499",
                          "updatedAt": "2022-06-20T18:18:46Z",
                          "publishedAt": "2021-08-28T21:44:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "which sideset is the boundary condition meant to be on ?\nAny sideset missing in what you see in Paraview?\nYou should be able to see sidesets under Sets in the Properties tab",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1248685",
                          "updatedAt": "2022-06-20T18:18:45Z",
                          "publishedAt": "2021-08-29T00:57:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Now I can see the boundary from your suggestion.\nI  noticed that, after stitching the meshes, though no boundary ids are missing, I could not apply the boundary id 3 (left). The error occurred:\n\nThen I further added AllSideSetsByNormalsGenerator, and then I can apply the boundary id 3. Why is that? When should I use AllSideSetsByNormalsGenerator ? Thanks very much.",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1251795",
                          "updatedAt": "2022-06-20T18:18:55Z",
                          "publishedAt": "2021-08-30T03:14:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Those are probably removed because they are likely to not be valid anymore. Imagine if you had stitched on the left rather on the right, left would be in the middle of the domain.\nSome generators will re-do those boundaries after they are applied I think",
                          "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1254729",
                          "updatedAt": "2022-06-20T18:18:55Z",
                          "publishedAt": "2021-08-30T15:28:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "KaijieNing"
                  },
                  "bodyText": "Great. It worked. I just made a 60x60 square with a 20 diameter hole. See below. Thanks very much.",
                  "url": "https://github.com/idaholab/moose/discussions/18557#discussioncomment-1152146",
                  "updatedAt": "2022-06-20T18:18:33Z",
                  "publishedAt": "2021-08-10T03:27:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can MOOSE's data_file read data from an unstructured mesh (PiecewiseMulticonstant)?",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nJust wondering if the 'data_file' option from PiecewiseMulticonstant and PiecewiseMultilinear can read data from an unstructured mesh?\nIt seems possible from the description, but when I checked the example, it seems like it only read the cartesian mesh value. Most of the data_file in the examples look like this (attached below)\n\nJust wondering, is it possible for PiecewiseMulticonstant to read unstructured grid data from a file? for example in this format >> (x,y,z,value).\nNote that I tried ReporterPointSource, but it introduces a source term to the variable, I only want to store data from a file, so I can use it elsewhere e.g. in BCs and Materials. @lynnmunday\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/18727",
          "updatedAt": "2023-04-11T09:23:35Z",
          "publishedAt": "2021-08-30T01:00:57Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I think I ran into this issue before. If I remember correctly, the piecewisemultixxx readers only support data that is somehow structured due to the way it is read, i.e. x, y, z, t have to be somehow \"monotone\". This is required to do fast interpolation at locations not directly specified in the data file.\nImagine if you provide data in (x, y, z, value) format, that would require a projection \"solve\" to get the entire field.\nThat reporter point source is essentially relying on finite element shape functions to integrate Dirac sources. I don't think that's what you want.",
                  "url": "https://github.com/idaholab/moose/discussions/18727#discussioncomment-1251662",
                  "updatedAt": "2023-04-11T09:23:43Z",
                  "publishedAt": "2021-08-30T01:56:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @hugary1995, I have a look at this: https://mooseframework.inl.gov/source/utils/MooseUtils.html\nI see MOOSE has CSVReader, but the only examples that come with it are 'Dirac sources', just wonder if we can apply this CSVReader to other applications?",
                          "url": "https://github.com/idaholab/moose/discussions/18727#discussioncomment-1251827",
                          "updatedAt": "2023-04-11T09:23:44Z",
                          "publishedAt": "2021-08-30T03:33:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Yes, of course. Just include \"MooseUtils.h\" in the file you want to use it.",
                          "url": "https://github.com/idaholab/moose/discussions/18727#discussioncomment-1253828",
                          "updatedAt": "2023-04-11T09:23:45Z",
                          "publishedAt": "2021-08-30T12:14:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Exit of code due to system crash running Contact Model",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I have developed a contact model, and I get the following error when I run the code:\nReiniting because of ghosting ....                                                         [  5.17 s]\nCrashed\nCrashed: Exit code: 11\nThe geometry and meshing appear to be well developed. I am thinking that the error may be due to the time stepping and the domain size (modeled moving and colliding components on the order of 1mm) of the objects involved. I used the indentation example model as a basis for my model, maintaining all the defined functions as is. The scale of that 2D model and mesh are much larger that my 2D model. Any ideas on what may be causing the crash?",
          "url": "https://github.com/idaholab/moose/discussions/18718",
          "updatedAt": "2021-09-21T00:34:06Z",
          "publishedAt": "2021-08-27T19:42:59Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCould you be running out of memory?\nIf not could you please compile in debug mode (METHOD=dbg make) then run in a debugger to get a backtrace for the crash\n(shorthand: gdb --ex run --ex bt --args executable -i input_file.i)",
                  "url": "https://github.com/idaholab/moose/discussions/18718#discussioncomment-1246725",
                  "updatedAt": "2021-08-28T05:05:04Z",
                  "publishedAt": "2021-08-28T05:04:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "An error with the mesh file of the exodus code caused the crash. When certain node sets were selected in peacock, it would cause a crash of the software, which in turn would have to be restarted.",
                  "url": "https://github.com/idaholab/moose/discussions/18718#discussioncomment-1250322",
                  "updatedAt": "2021-08-29T16:08:12Z",
                  "publishedAt": "2021-08-29T16:08:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do you consistently get that crash? Are you comfortable providing us with a backtrace for it?",
                          "url": "https://github.com/idaholab/moose/discussions/18718#discussioncomment-1251770",
                          "updatedAt": "2021-08-30T02:55:59Z",
                          "publishedAt": "2021-08-30T02:55:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "I realized the mesh file was causing the crash related to this problem. Thank you for your continued support.\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n\u2026\n________________________________\nFrom: Guillaume Giudicelli ***@***.***>\nSent: Sunday, August 29, 2021 10:56:09 PM\nTo: idaholab/moose ***@***.***>\nCc: Wise, Tammy ***@***.***>; Author ***@***.***>\nSubject: Re: [idaholab/moose] Exit of code due to system crash running Contact Model (#18718)\n\n\ndo you consistently get that crash? Are you comfortable providing us with a backtrace for it?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=182656b8-47bd6fa0-18261879-865f84946d4c-554069329110a5b4&q=1&e=e8dc680d-eaa1-4837-8094-469db7eb2bfa&u=https%3A%2F%2Fgithub.com%2Fidaholab%2Fmoose%2Fdiscussions%2F18718%23discussioncomment-1251770>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=cf4ff495-90d4cd8d-cf4fba54-865f84946d4c-cb53ec8a68ed7bd5&q=1&e=e8dc680d-eaa1-4837-8094-469db7eb2bfa&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJQ6AYRQIKEZHDZ7VEJCPR3T7LXMTANCNFSM5C6FORFQ>.",
                  "url": "https://github.com/idaholab/moose/discussions/18718#discussioncomment-1251784",
                  "updatedAt": "2021-08-30T03:05:54Z",
                  "publishedAt": "2021-08-30T03:05:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Follow up question about the boundary flux",
          "author": {
            "login": "emmelines"
          },
          "bodyText": "Hi\nI am simulating the microstructure evolution of the polycrystal two-phase separate system. I combined the Allen-Cahn and Cahn-Hillard equation into my system.\nThe boundary condition I set is NeumannBC. But from the video, you could see the upper grains disappeared, and the lower grain coarsen. So that is the reason I bring up the question for boundary condition did not work.\nI agreed with the numerical error @jiangwen84 mention. (Thank you. I appreciated it.)\nHowever, the problem I faced is a flux systematic non-zero, and it alternated the conclusion of the simulation.\nIs there anything I should check?\n-3.avi.zip\nThanks,\nEmmeline",
          "url": "https://github.com/idaholab/moose/discussions/18711",
          "updatedAt": "2023-05-23T09:49:03Z",
          "publishedAt": "2021-08-26T22:07:31Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "But from the video, you could see the upper grains disappeared, and the lower grain coarsen. So that is the reason I bring up the question for boundary condition did not work.\n\nNo, this isn't the correct logic to me. If you apply zero flux, then all you get is global conservation of concentration. This is indeed observed in your video.\nIn your video, the movement of the interface is likely driven by something in your free energy, instead of the Neumann BC.",
                  "url": "https://github.com/idaholab/moose/discussions/18711#discussioncomment-1249961",
                  "updatedAt": "2023-05-23T09:49:08Z",
                  "publishedAt": "2021-08-29T14:02:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Coupling multiple domains into a source term",
          "author": {
            "login": "AnthonyB08"
          },
          "bodyText": "what source files would I utilize to impose a source term on an interface boundary that is coupled with the variable in the neighboring domain? See figure for governing problem\n\nSo far, I am thinking I will need to use Auxvariable to hold the value of the P interface and pass it into the source kernel of the domain.",
          "url": "https://github.com/idaholab/moose/discussions/18709",
          "updatedAt": "2022-06-11T16:09:04Z",
          "publishedAt": "2021-08-26T21:51:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou should have a look at InterfaceKernels.\nWhat kind of source is it? Diffusive? A current proportional to a the value of the variable?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1242038",
                  "updatedAt": "2022-06-11T16:09:06Z",
                  "publishedAt": "2021-08-27T00:00:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "AnthonyB08"
                  },
                  "bodyText": "it is a permeation source term. Where the accumulation or depletion of the species is dependent on the interface variables i.e pressure .",
                  "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1242075",
                  "updatedAt": "2022-06-11T16:09:11Z",
                  "publishedAt": "2021-08-27T00:19:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok seems like you will want to work with an interface kernel then. Note that you can have some of the coefficients be defined completely in the kernel or be defined as material properties, depending on what is most convenient for you",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1242095",
                          "updatedAt": "2022-06-11T16:09:12Z",
                          "publishedAt": "2021-08-27T00:31:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Could you elaborate more on the type of interface kernels, I.e what specific class files would you recommend. I am still in the process of learning moose.",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1244765",
                          "updatedAt": "2022-06-11T16:09:12Z",
                          "publishedAt": "2021-08-27T14:43:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Also I do not believe interface kernels are the route, because I would need to describe the source term (permeation) in the respected domain with its dependency of value on the respected interface ( pressure).",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1244773",
                          "updatedAt": "2022-06-11T16:09:12Z",
                          "publishedAt": "2021-08-27T14:46:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the permeation term, is it a surface term or a volumetric one?",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1247585",
                          "updatedAt": "2022-06-12T05:16:38Z",
                          "publishedAt": "2021-08-28T14:29:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Surface Term ( mass transfer of u1 into domain 2) k*(c-c^*)",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1247673",
                          "updatedAt": "2022-06-12T05:16:38Z",
                          "publishedAt": "2021-08-28T15:12:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would look at the conjugate heat transfer interface kernel.\nIf it werent for that pressure dependence (variables from the other side of the interface right?) I would say a boundary condition would work.",
                          "url": "https://github.com/idaholab/moose/discussions/18709#discussioncomment-1249018",
                          "updatedAt": "2022-06-12T05:16:38Z",
                          "publishedAt": "2021-08-29T05:51:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "assigning properties to each elements (for drainage/Porousflow)",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi all,\nI'd like to assign the particular value of drainage to each element instead of each block/surface.\nby the value of drainage, I mean C in PorousFlowPiecewiseLinearSink\nhttps://mooseframework.inl.gov/modules/porous_flow/boundaries.html\nI checked https://mooseframework.inl.gov/modules/porous_flow/heterogeneous_models.html\nbut it assigns permeability base on the location (x-y), I want it to be based on the elementID.\nIt would be ideal if I can import value from like csv file into moose like (elementID, property value)\nNot sure if this's possible?\nThank you guys.\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/18542",
          "updatedAt": "2022-07-12T08:52:06Z",
          "publishedAt": "2021-08-06T04:49:21Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Would DiracKernels help?",
                  "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1137575",
                  "updatedAt": "2022-07-12T08:52:12Z",
                  "publishedAt": "2021-08-06T04:53:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I tried to look into this, it doesn't look like what I want. I checked, most of DiracKernels specify at the location (x,y,z).\nLet's step back to a more generic question, is it possible for MOOSE to assign material properties base on elementID instead of blockID?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1152303",
                          "updatedAt": "2022-07-12T08:52:08Z",
                          "publishedAt": "2021-08-10T04:36:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I don't think it is. Can you explain more why you can't use (x,y,z) coordinates for this?",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1152394",
                          "updatedAt": "2022-07-12T08:52:08Z",
                          "publishedAt": "2021-08-10T05:24:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "It's just easier for us to integrate MOOSE to our framework, since we normally assigning properties base on elementID via Abaqus.\nQuestion: if we assign properties base on location using data_file: PiecewiseMultilinear PiecewiseMulticonstant, where would the properties be assigned to? at the node of at the element?\nThanks you.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1152438",
                          "updatedAt": "2022-07-12T08:52:09Z",
                          "publishedAt": "2021-08-10T05:41:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "josebastiase"
                          },
                          "bodyText": "Hi Traiwit,\nMaterial properties are assigned to the elements and you can easily get the coordinates of the elementID when you generate the mesh or in paraview.\nYou can assign spatial distributed properties with the workflow Andy and I made a while ago. I made a simple example for you. Seems to work fine.\nhttps://drive.google.com/drive/folders/1zneEcLT-LpScxtw4HUdKI1_akEwoXauI?usp=sharing\nCheers,\nJose",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1153497",
                          "updatedAt": "2022-09-08T06:40:16Z",
                          "publishedAt": "2021-08-10T10:12:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "by 'the coordinates of the elementID' you mean the centroid of the element right?\nThank you for the link, I will have a look tomorrow and get back to you.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1153655",
                          "updatedAt": "2022-09-08T06:40:20Z",
                          "publishedAt": "2021-08-10T10:50:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @josebastiase\nI checked the files, they are nice and highly likely to be applicable to my problem.\nI have a quick question regarding the Python script, say if I have a CSV file with drainage value and its location like this >>> (x, y, z, drainage)\nhow should I reformat it so MOOSE can read it using the block below?\n[C_fcn]\n    type = PiecewiseMulticonstant\n    direction = 'left right'\n    data_file = C.data\n  []\n\nThanks again.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1156851",
                          "updatedAt": "2022-09-08T06:40:20Z",
                          "publishedAt": "2021-08-11T04:01:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Take a look at https://mooseframework.inl.gov/source/functions/PiecewiseMulticonstant.html\nand some examples https://github.com/idaholab/moose/tree/next/test/tests/functions/piecewise_multilinear",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1156867",
                          "updatedAt": "2022-09-08T06:40:27Z",
                          "publishedAt": "2021-08-11T04:13:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@cpgr sorry for being stubborn, but how should I work around this if I have unstructured mesh (like the one below)? It seems like the examples only show cartesian data file\n\n\nFrom this link: https://mooseframework.inl.gov/modules/porous_flow/heterogeneous_models.html\nI guess I need to use em2ex (https://github.com/cpgr/em2ex) then, not sure what it is, but ill give it a go.\n\nThis pre-processing must be performed using software that can take a geological model and convert it into a form that PorousFlow can read. One example of a pre-processing code that may be used is em2ex. This code converts a reservoir model in either Eclipse format or cell centered csv format to an Exodus mesh that can used in PorousFlow.\n\nPlease suggest if there is an alternative way to work with the problem.\nThank you.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1157008",
                          "updatedAt": "2022-09-08T06:40:27Z",
                          "publishedAt": "2021-08-11T05:46:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I assume that each cell has a different property value, rather than each cell in the red domain having the same property?\nIn that case, I'm not sure how you can easily achieve this in MOOSE without making a custom AuxKernel or Material. And I don't think em2ex will help - it is made for going from a Petrel model to an exodus model.\nOutside writing a custom AuxKernel/Material,I have used meshio before to quickly modify meshes before using in MOOSE. It reads Abaqus files and exports Exodus, so it might be possible to read the Abaqus mesh, assign the property values based on element id (if these aren't read directly), and export to exodus. Then you can read in those values as AuxVariables, and proceed as normal?",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1157067",
                          "updatedAt": "2022-09-08T06:40:31Z",
                          "publishedAt": "2021-08-11T06:09:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Or maybe PiecewiseMultiConstant works with unstructured grids if you give it centroids? I don't know, but it might be worth trying first?",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1157070",
                          "updatedAt": "2022-09-08T06:40:33Z",
                          "publishedAt": "2021-08-11T06:11:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "@GiudGiud i agree, source term in a PDE isn't what I want, I want something that I can impose to material properties or BCs",
                  "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1167046",
                  "updatedAt": "2022-07-12T08:52:09Z",
                  "publishedAt": "2021-08-13T08:04:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud is there any update on this issue?\nA quick question, is there a read_file.C or (data_file.C) file or something that I can look into? I checked PiecewiseMultiConstant.C but couldn't find that data_file option in there.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1203796",
                          "updatedAt": "2022-07-12T08:52:10Z",
                          "publishedAt": "2021-08-19T01:22:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No new object to do that afaik.\nI m still convinced best way would be to add a spatialValue routine to the CSVReader then just use that in a SpatialUOAux",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1204242",
                          "updatedAt": "2022-07-12T08:52:10Z",
                          "publishedAt": "2021-08-19T05:07:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @Traiwit\nWhenever I want to assign a material property based on element ID,\nwhat I do is mimicking the approach used for the crystal plasticity code.\nYou can use the UserObject:\nhttps://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/src/userobjects/ElementPropertyReadFile.C\nto read a file of properties element by element.\nIf you have a structured mesh, the element ID will grow along the x axis, then y axis, then z axis.\nThen you can use the user object into a material object, like in:\nhttps://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/src/materials/crystal_plasticity/ComputeElasticityTensorCP.C\nThis is the way you can obtain your property based on element ID:\n_read_prop_user_object->getData(_current_elem, 0);\nAn example input file is:\nhttps://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/test/tests/crystal_plasticity/monolithic_material_based/crysp_user_object.i\nIn the case of crystal plasticity, this method allows to assign Euler angles based on element ID,\nbut you can use the same for any other material property.\nTrust this helps,\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1211668",
                  "updatedAt": "2022-07-12T08:52:10Z",
                  "publishedAt": "2021-08-20T13:22:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Thank you @ngrilli I believe this is very close to what I want.\nI have some questions, maybe @GiudGiud can also help me out as well.\n\n\nI check the examples I see that only crystal plasticity related files have _read_prop_user_object->getData(_current_elem, 0); in their .C file, does this mean I have to add this myself to other material properties .C files such as PorousFlowPermeabilityConst and PorousFlowPorosityConst\n\n\nis it possible to convert what I read from ElementPropertyReadFile into function format? one of my goals is to impose the property's value to flux_function in PorousFlowPiecewiseLinearSink\n\n\n          [./water_grad_right]\n            type = PorousFlowPiecewiseLinearSink\n          variable = porepressure\n          boundary = 'right'\n          pt_vals = '0 1e9'\n          multipliers = '0 1e9' \n          flux_function = xxxx ******HERE*******\n          fluid_phase = 0\n          [../]\n\nThank you gents\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1220420",
                          "updatedAt": "2022-07-12T08:52:10Z",
                          "publishedAt": "2021-08-23T04:38:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Porous flow includes the tensor_mechanics module so you use ElementPropertyReadFile there.\nIt is indeed currently not used in porous_flow, but that does not mean you can't use it the same way it s used for crystal plasticity\nIt's possible if you code a new function. This new function will look at the position, get the element from the mesh, then call this _read_prop_user_object->getData(_current_elem, 0);",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1228872",
                          "updatedAt": "2022-07-12T08:52:20Z",
                          "publishedAt": "2021-08-24T17:51:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud thank you for your reply, i'm working on the first part, and I'm getting there :)\na quick question on the 2nd point, is there an example of creating 'a new function'?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1230450",
                          "updatedAt": "2022-07-12T08:52:20Z",
                          "publishedAt": "2021-08-25T01:09:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont think there's an example. I would just copy-paste an existing one then modify it. For what you want you could start from SolutionFunction.C. There might be better starting points but this one seems close enough\nEDIT: I had a look, the tutorial covers kernels, materials and auxvariables, but not functions. You can still have a look at tutorial 1 if you have not",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1230654",
                          "updatedAt": "2022-09-19T16:09:09Z",
                          "publishedAt": "2021-08-25T02:48:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud Thank you\nwith my limited knowledge of C++, I'm slowly working on it (still failing to compile)\nI will come back as ask if I'm really stuck.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1231600",
                          "updatedAt": "2022-09-20T09:13:01Z",
                          "publishedAt": "2021-08-25T07:55:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "Hi guys,\nI'm having a problem converting the type of input parameter. I'm trying to follow what @ngrilli suggested #18542 (comment).\nIn the example, the code read ElementPropertyReadFile into RealVectorValue\nbut what I want now is to convert what I read in ElementPropertyReadFile to RealTensorValue (shown below)\nIt compiles fine, but when I run the input file I have this problem >\n*** ERROR ***\nThe parameter \"permeability\" is being retrieved before being set.\n\nI notice that what I read from .CSV isn't in tensor format, I've also tried to convert the csv cell into tensor (X 0 0 0 X 0 0 0 X) but then ElementPropertyReadFile won't read.\n\nPlease suggest if you know how to work with this issue, sorry for my limited knowledge of C++, hope I could explain it better.\nKind regards,\nTraiwit",
                  "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1237194",
                  "updatedAt": "2022-07-12T08:52:20Z",
                  "publishedAt": "2021-08-26T04:59:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what's in your input for this block?\npermeability seems declared and retrieved properly here,",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1237227",
                          "updatedAt": "2022-07-22T07:48:40Z",
                          "publishedAt": "2021-08-26T05:23:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud, that is when i didnt give permeability value into the block to it,\n\nbut when I do, I have this error instead\n  [./permeability_top]\n    type = PorousFlowPermeabilityConstTC\n    permeability = '1e-10 0 0   0 1e-10 0   0 0 1e-10'\n    read_prop_user_object = prop_read\n  [../]\n\n\nI notice that permeability is  (x 0 0 0 x 0 0 0 x), but I only supply a single number into   _permeability_qp[_qp]\nHence the error occurs, but I'm not sure how to fix this",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1237250",
                          "updatedAt": "2022-08-15T22:21:08Z",
                          "publishedAt": "2021-08-26T05:33:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you retrieve a parameter with getParam it needs to be set in the input file, or it needs a default in the validParams\nYour error is a hypre error. Let's see if @fdkong has seen it before.",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1237257",
                          "updatedAt": "2022-08-15T22:21:08Z",
                          "publishedAt": "2021-08-26T05:36:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud noted, i fact i don't think i even need _input_permeability since I'm trying to obtain this value from _read_prop_user_object instead. So I just quoted it out, and it still complies.\nNow the problem should be that RHS and LHS of this line are not match\n\nsince LHS should be tensor but the RHS is a single constant value (from CSV)",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1237268",
                          "updatedAt": "2022-08-15T22:21:35Z",
                          "publishedAt": "2021-08-26T05:44:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Is there another routine than getData you could use for that object?\nIf not you can always fill the tensor component by component",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1240061",
                          "updatedAt": "2022-08-15T22:21:35Z",
                          "publishedAt": "2021-08-26T15:32:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud,\nI finally got it to works now, thank you for going through this with me\n\nNow I still need to import what I read from CSV via ElementPropertyReadFile  to Function format so then I can apply it to PorousFlowPiecewiseLinearSink\nI tried SolutionFunction.C but it takes different type of userobject (SolutionUserObject rather than ElementPropertyReadFile)\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18542#discussioncomment-1242538",
                          "updatedAt": "2022-08-15T22:21:35Z",
                          "publishedAt": "2021-08-27T04:41:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue w/ Pressure Diffusion Example Output",
          "author": null,
          "bodyText": "I'm currently trying to work through the application development tutorial from the MOOSE framework website on my device with Ubuntu OS. Specifically, I'm trying to run the pressure diffusion example. I have used both the code displayed on the website and the code provided in the MOOSE workshop slides, but neither of them display a result resembling the one displayed on the MOOSE website:\n\nInstead, Peacock is displaying this after execution:\n\nHas anyone else experienced a similar issue, or know what I can try to fix it? I can provide the input file if necessary.\nThanks!\nEdit: This error does not exist when I perform the simulation using the darcy_thermo_mech directory within moose/tutorials that comes with installation. This error was a result from attempting to perform the same simulation using my own developed application, so I assume there is an issue in the way I setup my application originally.",
          "url": "https://github.com/idaholab/moose/discussions/17983",
          "updatedAt": "2024-07-30T13:45:23Z",
          "publishedAt": "2021-06-01T20:05:59Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAre you talking about the darcy_thermo_mech example?\nWhich step of the workshop slides?\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17983#discussioncomment-814259",
                  "updatedAt": "2024-07-30T13:45:23Z",
                  "publishedAt": "2021-06-02T06:28:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Yes, I'm speaking of that one; which is on Step 1: Geometry and Diffusion in the workshop slides (slide 7). Sorry for not specifying earlier!",
                          "url": "https://github.com/idaholab/moose/discussions/17983#discussioncomment-815876",
                          "updatedAt": "2024-07-30T13:45:30Z",
                          "publishedAt": "2021-06-02T13:22:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no worries.\nI tried it just now in tutorials/darcy_thermo_mech/step01_diffusion/problems and it looks just like in the top picture in peacock.\nCan you paste your input? I ll look if it differs from the code in the repository",
                          "url": "https://github.com/idaholab/moose/discussions/17983#discussioncomment-817495",
                          "updatedAt": "2024-07-30T13:45:30Z",
                          "publishedAt": "2021-06-02T18:56:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "crswong888"
                  },
                  "bodyText": "@speyres, you probably just need to rescale the contours to render it like the image in the tutorial. Double check the contour limits you used when rendering this image (I think there are settings \"min\" and \"max\" in Peacock, set these to the values for the BCs at the right (0 Pa) and left (4000 Pa) of the pipe, respectively).",
                  "url": "https://github.com/idaholab/moose/discussions/17983#discussioncomment-1245749",
                  "updatedAt": "2024-07-30T13:45:30Z",
                  "publishedAt": "2021-08-27T18:51:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to well compute the gradient of a 'Material' object?",
          "author": {
            "login": "lgab13"
          },
          "bodyText": "Hi moose experts\uff0c\nI created my application but as I'm a beginner with MOOSE, I miss a lot of basic things.\nI defined a Real property and  I would like to define its gradient in order to use it in one of my PDE. How can I do this easily?\nPlease consider the following basic example:\nMyProperty::MyProperty(const InputParameters & parameters)\n: Material(parameters),\n  _Rmax(getParam<Real>(\"Rmax\")),\n  _profile(declareProperty<Real>(\"MyProfile\"))\n{\n}\n\nvoid\nMyProperty::computeQpProperties()\n{\n  const auto rx = _q_point[_qp](0);\n  const auto ry = _q_point[_qp](1);\n  const auto rz = _q_point[_qp](2);\n  const auto sqr_norm = rx*rx+ry*ry+rz*rz;\n  _profile[_qp] = __Rmax*_Rmax - sqr_norm;\n}\nHere-above, I simply defined f(rx,ry,rz) and now, my goal is to work with  ' grad f ' in the weak form of a diffusive flux of my PDE.\nIs the following approach correct and if not, how do it?\nMyProperty::MyProperty(const InputParameters & parameters)\n: Material(parameters),\n  _Rmax(getParam<Real>(\"Rmax\")),\n  _profile(declareProperty<Real>(\"MyProfile\")),\n  _grad_profile(declareProperty<RealGradient>(\"Mygradient\"))\n{\n}\n\nvoid\nMyProperty::computeQpProperties()\n{\n  const auto rx = _q_point[_qp](0);\n  const auto ry = _q_point[_qp](1);\n  const auto rz = _q_point[_qp](2);\n  const auto sqr_norm = rx*rx+ry*ry+rz*rz;\n  _profile[_qp] = _Rmax*_Rmax - sqr_norm;\n  _grad_profile[_qp][0] = - 2. * rx ;\n  _grad_profile[_qp][1] = - 2. * ry ;\n  _grad_profile[_qp][2] = - 2. * rz ;\n}\nIn this example, the function clearly depends on the spatial coordinates. But, if the property only defines a constant per quadrature points, how can we built the gradient of this property in order to use it in the weak form of a diffusive flux ? When the gradient of the function f is defined as the pressure gradient in the NS equations, that's good for me. But, in case of diffusive flux, I didn't find examples. Maybe I have to populate an AuxVariable or to use an UserObject?\nbest regards\nlg",
          "url": "https://github.com/idaholab/moose/discussions/18674",
          "updatedAt": "2022-10-04T19:45:13Z",
          "publishedAt": "2021-08-21T23:57:16Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease consult #18415 for more information on this topic.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18674#discussioncomment-1220088",
                  "updatedAt": "2022-10-04T19:45:54Z",
                  "publishedAt": "2021-08-23T02:16:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lgab13"
                          },
                          "bodyText": "Thank you  Guillaume. This is what I was looking for.\nbest regards,\nLG",
                          "url": "https://github.com/idaholab/moose/discussions/18674#discussioncomment-1242055",
                          "updatedAt": "2022-10-04T19:45:55Z",
                          "publishedAt": "2021-08-27T00:09:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Executing moose's executable (on WSL) through Matlab.",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nI am using moose as the engine to solve the forward problem required for optimization problems. I am using Matlab's optimization toolbox for the optimization process (such as BFGS). Now, I am trying to call moose's executable from Matlab. I am using moose on WSL.\nSo, is there a way to call moose's executable from Matlab? for instance,\nsomething like this system('cmd /C myprogram.exe');\nThank you.",
          "url": "https://github.com/idaholab/moose/discussions/18707",
          "updatedAt": "2022-12-14T12:40:34Z",
          "publishedAt": "2021-08-26T18:23:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "You need to use the wsl wrapper command. https://docs.microsoft.com/en-us/windows/wsl/wsl-config",
                  "url": "https://github.com/idaholab/moose/discussions/18707#discussioncomment-1241904",
                  "updatedAt": "2022-12-14T12:40:34Z",
                  "publishedAt": "2021-08-26T23:12:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}