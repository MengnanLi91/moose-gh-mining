{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wOC0zMFQxNzoxOToxOS0wNTowMM4AQiTT"
    },
    "edges": [
      {
        "node": {
          "title": "Proper weak form",
          "author": {
            "login": "Leni-Yeo"
          },
          "bodyText": "Good morning,\nI am trying to figure out what the weak form from the last part (kernel) in \"New phase-field model for polycrystalline systems with anisotropic grain boundary properties\" from \"Nele Moelans\" would look like: -m\u25bd .  (\u2211_(j\u2260i) ((\u2202\u03b3_ij)/(\u2202\u25bd\u03b7_i )) \u03b7_i^2  \u03b7_j^2)\n\nI think the weak form should be : ( ( (-1) * m * 2 * \u03b7_i * grad(\u03b7_i) * (\u2202\u03b3_ij)/(\u2202\u25bd\u03b7_i ) * \u2211_(j\u2260i)  \u03b7_j^2 ) , \u03c8 )\nI am taking everything outside the gradient as constants and doing \u25bd . \u03b7_i^2 =  \u03b7_i * grad(\u03b7_i)  +  \u03b7_i * grad(\u03b7_i) =  2 * \u03b7_i * grad(\u03b7_i)\nI am not sure if I am correct on that. If anyone has some insight, please advise since I am relatively new to phase field.\nThank you in advance.",
          "url": "https://github.com/idaholab/moose/discussions/21937",
          "updatedAt": "2022-09-29T16:33:10Z",
          "publishedAt": "2022-08-25T17:15:26Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nthe derivation of the weak form looks too short. There seems to be many more terms in your base equation than in your result\nFeel free to paste a step by step derivation and we could point you to potential issues\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3491260",
                  "updatedAt": "2022-08-28T04:18:56Z",
                  "publishedAt": "2022-08-28T00:12:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Leni-Yeo"
                          },
                          "bodyText": "Good afternoon,\nThank you for the reply and sorry for the delay in response.\nI redid the derivation and corrected a mistake I  found. I attached the new derivation. Please give your inputs on it whenever you can.\nThank you in advance.!\nLast Kernel Derivation.pdf",
                          "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3529936",
                          "updatedAt": "2022-09-01T19:17:32Z",
                          "publishedAt": "2022-09-01T19:17:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont see the grad (eta_i^2) in your initial equation? I see grad(eta_i^2 eta_j^2)?\nalso why is there only one term in your derivation?\nIs this the only term you care about?",
                          "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3530068",
                          "updatedAt": "2022-09-01T19:37:19Z",
                          "publishedAt": "2022-09-01T19:37:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Leni-Yeo"
                          },
                          "bodyText": "I assumed the summation of eta_j^2 and the fraction (partial derivative) to come out from under the gradient operator as constants so that the the gradient operator only applies to eta_i^2. I thought that would be the case since only the ith order parameter is considered each time. I might be wrong there. ???",
                          "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3530195",
                          "updatedAt": "2022-09-01T19:58:37Z",
                          "publishedAt": "2022-09-01T19:58:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is eta_j not a variable?\nthere are off-diagonal terms as well in the Jacobian, so eta_j being in the equation for eta_i will mean some of these contributions",
                          "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3530578",
                          "updatedAt": "2022-09-01T20:52:31Z",
                          "publishedAt": "2022-09-01T20:52:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Leni-Yeo"
                  },
                  "bodyText": "I see. I guess I will try again. Please advise whenever you can. Thank you!\n\u2026\nOn Thu, Sep 1, 2022, 3:52 PM Guillaume Giudicelli ***@***.***> wrote:\n is eta_j not a variable?\n there are off-diagonal terms as well in the Jacobian, so eta_j being in\n the equation for eta_i will mean some of these contributions\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21937 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ASUM7YWQSDJU7FANQZ43CA3V4EJRVANCNFSM57T4X5NA>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3530754",
                  "updatedAt": "2022-09-01T21:22:00Z",
                  "publishedAt": "2022-09-01T21:21:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I recommend you lean hard on the examples in the phase field module. Try to identify models that are similar to what you are doing.\nAlso you should just leverage automatic differentiation if you can. Then you wont have to worry about coding up a jacobian, just the residual",
                          "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3530866",
                          "updatedAt": "2022-09-01T21:44:34Z",
                          "publishedAt": "2022-09-01T21:44:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Leni-Yeo"
                  },
                  "bodyText": "Will do. Thank you!\n\u2026\nOn Thu, Sep 1, 2022, 4:44 PM Guillaume Giudicelli ***@***.***> wrote:\n I recommend you lean hard on the examples in the phase field module. Try\n to identify models that are similar to what you are doing.\n\n Also you should just leverage automatic differentiation if you can. Then\n you wont have to worry about coding up a jacobian, just the residual\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21937 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ASUM7YSRC3PDSVEFHTKWFJTV4EPUXANCNFSM57T4X5NA>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21937#discussioncomment-3531367",
                  "updatedAt": "2022-09-01T23:21:36Z",
                  "publishedAt": "2022-09-01T23:21:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "NumSideQPs and NumElemQPs",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI was trying to experiment with the Quadrature-Block a bit and wanted to check the resulting number of QPs with NumSideQPs and NumElemQPs but it seems like my application can't find the objects. The error I get is\n*** ERROR ***\nA 'NumSideQPs' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nI guess it's because the .C files are located in the moose/test folder rather than in some module folder. But I don't quite know how to use the MOOSE_LIBRARY_PATH environment variable to resolve that issue. What do I have to do to access said objects?",
          "url": "https://github.com/idaholab/moose/discussions/21987",
          "updatedAt": "2022-09-01T21:20:19Z",
          "publishedAt": "2022-09-01T16:45:33Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I think they are test objects. You ll have to pass the allow-test-objects flag to use them\nI think you ll need to add the BUILD_TEST_OBJECTS boolean in the makefile too.\nand possibly just move the source from moose/test to your repo in last resort",
                  "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3528932",
                  "updatedAt": "2022-09-01T16:54:09Z",
                  "publishedAt": "2022-09-01T16:54:08Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "The MOOSE documentation only shows the flag --disallow-test-objects. Doesn't that imply that --allow-test-objects is the default?\nI tried BUILD_TEST_OBJECTS := yes in my Makefile but it didn't help. I also tried BUILD_TEST_OBJECTS_LIB := yes because that command is used in the moose_test-opt Makefile. Didn't help either.\n\nI also copied the files in my repo but had no success with that either. Which is kind of confusing.\nWhat else can I try?",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3529642",
                          "updatedAt": "2022-09-01T18:33:38Z",
                          "publishedAt": "2022-09-01T18:32:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "move the test source files in your app then recompile",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530032",
                          "updatedAt": "2022-09-01T19:30:21Z",
                          "publishedAt": "2022-09-01T19:30:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "That's what I meant when I said\nI also copied the files in my repo but had no success with that either. Which is kind of confusing. (and recompiled my app afterwards)\nStill not working.",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530254",
                          "updatedAt": "2022-09-01T20:07:23Z",
                          "publishedAt": "2022-09-01T20:07:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Re-register them to your application. Not mooseTestApp. See the source file at the top",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530293",
                          "updatedAt": "2022-09-01T20:13:15Z",
                          "publishedAt": "2022-09-01T20:13:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "I can't quite follow. You mean copy the .C into intro/src and the .h into intro/include and then recompile with make, right? Because that's what I did and it doesn't work.",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530344",
                          "updatedAt": "2022-09-01T20:20:35Z",
                          "publishedAt": "2022-09-01T20:20:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "modify them too\nopen the source you ll see the call to register to MooseTestApp",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530348",
                          "updatedAt": "2022-09-01T20:21:28Z",
                          "publishedAt": "2022-09-01T20:21:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Ok well that worked. Thanks!\nIn case anyone with equally slim knowledge of C++ stumbles across this in the future:\nI copied the files in question to my own app. Then I had to change registerMooseObject(\"MooseTestApp\", NumSideQPs); to registerMooseObject(\"introTestApp\", NumSideQPs); and run my input with the --allow-test-objects flag. Modifications to the Makefile are not necessary for this workaround to work.",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530641",
                          "updatedAt": "2022-09-01T21:02:34Z",
                          "publishedAt": "2022-09-01T21:02:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if enough users need these objects we can move them outside of the test objects and into the official objects. Please let us know, future readers of this thread",
                          "url": "https://github.com/idaholab/moose/discussions/21987#discussioncomment-3530655",
                          "updatedAt": "2022-09-01T21:05:37Z",
                          "publishedAt": "2022-09-01T21:05:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Relevant executioner params for inelastic materials problems",
          "author": {
            "login": "AndrewFalkowski"
          },
          "bodyText": "In trying to incorporate inelastic stress responses in my models, I've run into a number issues with convergence stability. The example input files included under the material docs for inelastic stress computation tend to have more sophisticated executioner blocks (example). I am wondering if there is any information on relevant executioner params (or considerations) for improving convergence in solving inelastic stress problems with creep and/or plastic deformation? Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/21973",
          "updatedAt": "2022-09-29T16:33:15Z",
          "publishedAt": "2022-08-30T17:44:08Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@hugary1995 @dschwen",
                  "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3512565",
                  "updatedAt": "2022-08-30T21:13:06Z",
                  "publishedAt": "2022-08-30T21:13:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I wonder if we don't already have a page talking about solvers in the tensor mechanics module. Anyways, here are some general considerations:\n\nThe non AD kernels/materials in the old system give inaccurate Jacobian, hence you are better off using PJFNK.\nThe AD kernels/materials give exact Jacobian, so Newton should perform better.\nFor preconditioner, a direct solver will generally perform the best if you have enough memory. If memory is a concern, you should use an iterative solver. Hyper/boomeramg is a very effective iterative solver for plasticity/creep problems.\n\nLet us know which route you want to take, and we can provide more details regarding settings and solver parameters.",
                  "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3522188",
                  "updatedAt": "2022-08-31T22:58:15Z",
                  "publishedAt": "2022-08-31T22:58:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AndrewFalkowski"
                          },
                          "bodyText": "Thank you this was helpful. Assuming I am using the AD kerneIs, what would be the best approach for modeling plasticity and creep in a multi-material composite subject to thermal strains with materials exhibiting temperature dependent properties? And would you use different solver setup if you were solving plasticity or creep alone?\nAlso, could you elaborate a little more or point me to a resource discussing direct solver vs. iterative solver options?\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3529564",
                          "updatedAt": "2022-09-01T18:18:46Z",
                          "publishedAt": "2022-09-01T18:18:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "A direct solver can be specified by\npetsc_option_iname = '-pc_type'\npetsc_option_value = 'lu'\nThen choose your favorite parallel implementation of the matrix factorization package using -mat_factor_solver_package, typically your options are superlu_dist, mumps and strumpack.\nHypre/Boomeramg is documented here https://mooseframework.inl.gov/application_development/hypre.html\n\nAssuming I am using the AD kerneIs, what would be the best approach for modeling plasticity and creep in a multi-material composite subject to thermal strains with materials exhibiting temperature dependent properties? And would you use different solver setup if you were solving plasticity or creep alone?\n\nThis depends on the material. If the solid softens with temperature increase, then the nature of the problem won't change much compared to plasticity alone. Hence you can use similar options for the iterative solver.\nIf the solid hardens with temperature increase, then you'll be dealing with a potentially non-convex system. The usual path forward is\n\nlagging the temperature, or\nusing fixed point iteration, or\nusing a solver that handles local nonconvexity, e.g. trust-region or CG.",
                          "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3529731",
                          "updatedAt": "2022-09-01T18:54:54Z",
                          "publishedAt": "2022-09-01T18:45:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Well, actually in most cases there is heat loss due to thermal softening, and you are back to an easy, convex problem, hence you probably don't need the \"usual path forward\" methods...",
                          "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3529752",
                          "updatedAt": "2022-09-01T18:48:37Z",
                          "publishedAt": "2022-09-01T18:48:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AndrewFalkowski"
                          },
                          "bodyText": "Ah ok that makes a lot of sense. I seem to be getting a more stable solve, but I think my tolerances are off as I am having trouble with nonlinear convergence. How (and under what block) should one go about setting these tolerances? I was reading through this page, but I'm still not sure about the general application of these.",
                          "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3530100",
                          "updatedAt": "2022-09-01T19:41:58Z",
                          "publishedAt": "2022-09-01T19:41:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AndrewFalkowski"
                          },
                          "bodyText": "Realized this might be because I am near a steady state, but general advice on setting those tolerances would be appreciated.",
                          "url": "https://github.com/idaholab/moose/discussions/21973#discussioncomment-3530281",
                          "updatedAt": "2022-09-01T20:10:53Z",
                          "publishedAt": "2022-09-01T20:10:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Jacobian Debugger analyze_jacobian.py error",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI tried checking the jacobian of an input file I have. I did this before a few times and it always worked no problems. But now I get the following error:\nTraceback (most recent call last):\n  File \"/home/florian/projects/intro/../moose/python/jacobiandebug/analyzejacobian.py\", line 339, in <module>\n    executable = findExecutable(options.executable, options.method)\n  File \"/home/florian/projects/intro/../moose/python/jacobiandebug/analyzejacobian.py\", line 82, in findExecutable\n    elif shutil.which(executable_option):\n  File \"/home/florian/mambaforge3/envs/moose/lib/python3.10/shutil.py\", line 1444, in which\n    if os.path.dirname(cmd):\n  File \"/home/florian/mambaforge3/envs/moose/lib/python3.10/posixpath.py\", line 152, in dirname\n    p = os.fspath(p)\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\nI reinstalled Conda recently, could this be the source of this error? How can I resolve this?",
          "url": "https://github.com/idaholab/moose/discussions/21986",
          "updatedAt": "2022-09-29T16:33:37Z",
          "publishedAt": "2022-09-01T13:53:32Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Is the opt-executable built?\nthis looks like it s not finding an executable",
                  "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528211",
                  "updatedAt": "2022-09-01T15:26:10Z",
                  "publishedAt": "2022-09-01T15:26:09Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "It is, I can perform simulations with intro-opt as usual",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528224",
                          "updatedAt": "2022-09-01T15:28:14Z",
                          "publishedAt": "2022-09-01T15:28:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how are you calling this? from which directory and with what command?",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528255",
                          "updatedAt": "2022-09-01T15:31:55Z",
                          "publishedAt": "2022-09-01T15:31:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Assuming I'm in my intro directory I'd call:\n../moose/python/jacobiandebug/analyzejacobian.py problems/Kontakt/segment_penalty_coulomb/2_lock_corr/jacobian/2_lock_corr_hypo_scaling.i\nWhere the first part is the relative path to the script and the second part is the relative path to my input file.",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528404",
                          "updatedAt": "2022-09-01T15:50:58Z",
                          "publishedAt": "2022-09-01T15:49:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you try specifying the executable\n -e EXECUTABLE, --executable=EXECUTABLE\n                        The executable you would like to build an input file\n                        for.  If not supplied an executable will be searched\n                        for.  The searched for executable will default to the\n                        optimized version of the executable (if available).",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528564",
                          "updatedAt": "2022-09-01T16:09:42Z",
                          "publishedAt": "2022-09-01T16:09:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "That yields\nError executing moose based application to gather DOF map\nShould I try reinstalling Conda?",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528816",
                          "updatedAt": "2022-09-01T16:39:43Z",
                          "publishedAt": "2022-09-01T16:39:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "doubt that will fix.\nwhat kind of error? can you get sort of the backtrace / where it happens?",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528937",
                          "updatedAt": "2022-09-01T16:54:54Z",
                          "publishedAt": "2022-09-01T16:54:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "The line I quoted in my last reply is the only output I get when I do\n../moose/python/jacobiandebug/analyzejacobian.py problems/Kontakt/segment_penalty_coulomb/2_lock_corr/jacobian/2_lock_corr_hypo_scaling.i -e intro-opt",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3528966",
                          "updatedAt": "2022-09-01T16:57:55Z",
                          "publishedAt": "2022-09-01T16:57:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "weird. I dont know of any modification.\nThe analyzejacobian script is just a wrapper around a bunch of options. You can run this manually and find out what s not working",
                          "url": "https://github.com/idaholab/moose/discussions/21986#discussioncomment-3530107",
                          "updatedAt": "2022-09-01T19:42:57Z",
                          "publishedAt": "2022-09-01T19:42:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Strange Translation/Jittering Artifact in Phase Field Model",
          "author": {
            "login": "aclin4"
          },
          "bodyText": "I've encountered some strange behavior with one of my phase field models that I was wondering if anyone else has come across before. It's a fairly standard 2-phase (1 order parameter) 3-species (2 concentration variables) WBM model. In the two-phase region of my model, I observe the expected phase separation behavior, but it seems that my model seems to jitter randomly, translating in the x-direction after separating.\nHave anyone ever seen this before or have any idea of what could be causing this?\nThanks,\nAlbert",
          "url": "https://github.com/idaholab/moose/discussions/21972",
          "updatedAt": "2022-09-29T16:33:45Z",
          "publishedAt": "2022-08-30T17:20:58Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@SudiptaBiswas @laagesen",
                  "url": "https://github.com/idaholab/moose/discussions/21972#discussioncomment-3512560",
                  "updatedAt": "2022-08-30T21:12:33Z",
                  "publishedAt": "2022-08-30T21:12:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "That is weird. What boundary conditions are you using for all the variables? The behavior of the psi=1 phase on the LHS seems a little weird and I'm wondering if there may be some inconsistency in the BCs.\nAlso, what are your solver settings? You are approaching a steady-state condition at the end, so the Transient Executioner may struggle to converge the problem as you approach the steady-state. If you've increased nl_rel_tol to deal with this, that could potentially cause problems. Usually if you want to run a problem all the way to steady-state, it's best to set an absolute solver tolerance using nl_abs_tol = 1e-11 or something along those lines. There are fancier ways to do this in MOOSE, but that has usually worked well for me in the past.",
                          "url": "https://github.com/idaholab/moose/discussions/21972#discussioncomment-3519040",
                          "updatedAt": "2022-08-31T15:26:36Z",
                          "publishedAt": "2022-08-31T15:26:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Also I assume the variable here is a non-conserved order parameter because it doesn't look like it is being conserved (volume fraction seems to increase at the end). But, for a coupled model that may indicate that there is a problem with volume conservation with one of your conserved variables. I would add a postprocessor to integrate each of your concentration variables at each time step and make sure they are being conserved.",
                          "url": "https://github.com/idaholab/moose/discussions/21972#discussioncomment-3519065",
                          "updatedAt": "2022-08-31T15:29:26Z",
                          "publishedAt": "2022-08-31T15:29:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aclin4"
                          },
                          "bodyText": "Hi Larry,\nYou're right that the order parameter shown here is non-conserved; it's just evolving the phase fraction to accommodate concentration-enriched and depleted phases. I've checked that the concentration variables are indeed conserved throughout the simulation.\nFor all the variables, I'm using periodic boundary conditions:\n[BCs]\n  [./Periodic]\n    [./all]\n      variable = 'c_cr c_ni psi w_ni w_cr'\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]\n\nwhich is probably why there is an additional interface that appears on the left side of the simulation cell.\nAs for the Executioner settings, it seems that all the parameters are already pretty close to what you've suggested.\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = 'lu      superlu_dist'\n  line_search = 'none'\n\n  nl_max_its = 20\n  l_max_its = 20\n  l_tol = 1e-12\n  nl_rel_tol = 1e-10\n  nl_abs_tol = 1e-12\n  end_time = 1e15\n  #dtmax = 1e6\n  dtmin = 2e-20\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1e-3\n    cutback_factor = 0.5\n    growth_factor = 1.25\n    optimal_iterations = 12\n  [../]\n[]\n\nI thought it may be due to the way I set up my mesh adaptivity:\n[Adaptivity]\n  marker = combo\n  max_h_level = 2\n  [./Indicators]\n    [./psiind]\n      type = GradientJumpIndicator\n      variable = psi\n    [../]\n    [./Niind]\n      type = GradientJumpIndicator\n      variable = c_ni\n    [../]\n    [./Crind]\n      type = GradientJumpIndicator\n      variable = c_cr\n    [../]\n    [./wNiind]\n      type = GradientJumpIndicator\n      variable = w_ni\n    [../]\n    [./wCrind]\n      type = GradientJumpIndicator\n      variable = w_cr\n    [../]\n  [../]\n  [./Markers]\n   [./combo]\n     type = ComboMarker\n     markers =  'psierror cnierror ccrerror wcrerror wnierror'\n   [../]\n    [./psierror]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = psiind\n      refine = 0.7\n    [../]\n    [./cnierror]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = Niind\n      refine = 0.7\n    [../]\n    [./ccrerror]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = Crind\n      refine = 0.7\n    [../]\n    [./wcrerror]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = wCrind\n      refine = 0.7\n    [../]\n    [./wnierror]\n      type = ErrorFractionMarker\n      coarsen = 0.2\n      indicator = wNiind\n      refine = 0.7\n    [../]\n  [../]\n[]\n\nDoes that seem reasonable to you?\nThanks,\nAlbert",
                          "url": "https://github.com/idaholab/moose/discussions/21972#discussioncomment-3529006",
                          "updatedAt": "2022-09-01T17:09:28Z",
                          "publishedAt": "2022-09-01T17:03:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "I think you might have too many different markers/indicators. It could be refinement/coarsening is happening too frequently based on different interfacial widths for different variables and how the settings interact with them. It could be that excessive coarsening/refinement is causing the interfaces to move when you are suddenly solving the governing equations on a different grid, especially if the amount of refinement changes a lot between time steps. I would try solving the problem without mesh refinement to see if that makes the problem go away. Also I'd make sure your concentration variables are conserved based on what I observed before about the volume fraction.",
                          "url": "https://github.com/idaholab/moose/discussions/21972#discussioncomment-3529463",
                          "updatedAt": "2022-09-01T18:03:58Z",
                          "publishedAt": "2022-09-01T18:03:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "the diffrrence of elemental solution and nadal solution",
          "author": {
            "login": "xiaojbing"
          },
          "bodyText": "Hello,\nIn moose, the elemental solution is the variable value at quadrature point. and then nadal solution is computed by values at quadrature points.\nI want to know what is is the specific process that get nodal solution from elemental solution in moose.\nI heard in ansys, every element will have nodal solution, which is computed from variable value at quadrature point in this element. When a node is shared by several elements, the final nodal solution is the average of nodal solution of respective element.",
          "url": "https://github.com/idaholab/moose/discussions/21985",
          "updatedAt": "2022-09-02T20:12:47Z",
          "publishedAt": "2022-09-01T11:51:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "I am not aware of a nodal auxiliary kernel that can take an elemental variable, and perform the average (possibly should be weighted by the angle/solid angle of the element contribution on the node). MOOSE output system can output elemental variables into nodal variables for visualization. I did not check the code but assume that is using libMesh functionalities and is close to what you want.",
                  "url": "https://github.com/idaholab/moose/discussions/21985#discussioncomment-3527813",
                  "updatedAt": "2022-09-01T14:43:49Z",
                  "publishedAt": "2022-09-01T14:43:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "For an elemental variable:\n\nIf the node is a quadrature point, and if the FE family is continuous, then the nodal value is the quadrature point value of the variable\nif the node is a Qp and the FE family is discontinuous, the nodal value is ill-defined, you'd need to specify which element to use\nif the node is not a Qp, and the FE family is continuous, the nodal value may be computed by evaluating the shape functions there\nif the node is not a Qp and the FE family is discontinuous, the nodal value is ill-defined, you d need to specify from which element to come from when evaluating\n\nYou can indeed do projections from one type to another using either the Transfers system, and in some cases the SelfAux",
                  "url": "https://github.com/idaholab/moose/discussions/21985#discussioncomment-3528165",
                  "updatedAt": "2022-09-01T15:21:06Z",
                  "publishedAt": "2022-09-01T15:21:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Thermal hydraulics module problem",
          "author": {
            "login": "YuhangNIU"
          },
          "bodyText": "Hi all,\nI want to know how the pipe component works in the thermal-hydraulic module. So I try to restore an input file (clg.densityvelocity_3eqn.i\n\u201cclg.densityvelocity_3eqn.txt\u201d) to a normal form \u201cpipe.txt\u201d (without encapsulation). But something goes wrong. Could anyone kindly help me to understand it?\n\nBest regards,\nYuhang Niu",
          "url": "https://github.com/idaholab/moose/discussions/21641",
          "updatedAt": "2022-09-02T20:12:42Z",
          "publishedAt": "2022-07-20T08:25:06Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@licharlot seg-fault in thm, might be worth a look",
                  "url": "https://github.com/idaholab/moose/discussions/21641#discussioncomment-3390126",
                  "updatedAt": "2022-08-13T16:16:37Z",
                  "publishedAt": "2022-08-13T16:16:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "licharlot"
                          },
                          "bodyText": "Hi Yuhang,\nCould you please give us more details about what you are trying to understand/do? THM is designed to be used with the Components syntax. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/21641#discussioncomment-3424134",
                          "updatedAt": "2022-08-18T15:36:06Z",
                          "publishedAt": "2022-08-18T15:36:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "Yuhang, just to clarify, we're trying to see if there's an easier solution to what you're trying to do, and we still are interested in knowing. However, I did look into your input file and found the segfault is occurring in ADRDG3EqnMaterial. You directly provide values for the A_linear and A_elem parameters, but the parameters are actually variable names (MOOSE allows values to be used in place of variable names). The segfault occurs because we make a call getVar(\"A_elem\", 0), for example. To fix your input file, add\n[AuxVariables]\n  [A_elem]\n    initial_condition = 1.907720E-04\n  []\n  [A]\n    initial_condition = 1.907720E-04\n  []\n[]\n\nand then in your GlobalParams:\n  A_elem = A_elem\n  A_linear = A",
                          "url": "https://github.com/idaholab/moose/discussions/21641#discussioncomment-3424264",
                          "updatedAt": "2022-08-18T15:57:25Z",
                          "publishedAt": "2022-08-18T15:54:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Thank you for your reply. Now, it works.",
                          "url": "https://github.com/idaholab/moose/discussions/21641#discussioncomment-3523794",
                          "updatedAt": "2022-09-01T06:22:05Z",
                          "publishedAt": "2022-09-01T06:22:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "could not import matplotlib",
          "author": {
            "login": "hhy2022"
          },
          "bodyText": "Hi, I am a new user of MOOSE. I was trying to use peacock to run the input because I would like to see the visualized result. My command was the one provide in the slides of 2022. '~/projects/moose/python/peacock/peacock -i step1.i'\nHowever, when I use this command, I got a message saying that--\n'Error starting peacock: Could not import matplotlib\n'You need to use the miniconda module. Run:\n'module load miniconda'\nI tried to run 'module load miniconda' and it said command not found.\nI guess there might be something wrong with my peacock but I don't know how to fix it.\nBesides, I use Ubuntu.\nThank you very much for any help.",
          "url": "https://github.com/idaholab/moose/discussions/20459",
          "updatedAt": "2022-09-01T05:18:10Z",
          "publishedAt": "2022-03-02T05:59:23Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou are using Ubuntu on your local machine?\nDid you activate the conda (mamba) environement?\nCan you install matplotlib with mamba install matplotlib ?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20459#discussioncomment-2278201",
                  "updatedAt": "2022-07-20T18:02:56Z",
                  "publishedAt": "2022-03-02T06:03:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Yes. I am using Ubuntu on local machine. I had activated conda.\nI install matplotlib successfully, and I can call peakcock successfully.\nThank you so much for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/20459#discussioncomment-2282755",
                          "updatedAt": "2022-07-20T18:02:57Z",
                          "publishedAt": "2022-03-02T19:20:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "captaink-3"
                          },
                          "bodyText": "hello, i have also got a same problem saying that 'Error starting peacock: Could not import vtk\n'You need to use the miniconda vtk. Run:'module load miniconda'. I have also tried mabmba install vtk. but it does not work.",
                          "url": "https://github.com/idaholab/moose/discussions/20459#discussioncomment-3523479",
                          "updatedAt": "2022-09-01T05:12:47Z",
                          "publishedAt": "2022-09-01T05:12:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think there s a libmesh-vtk package you can download. @milljm suggested creating another environment just for peacock and listed the packages. It s in another post if you care to search (getting late for me)",
                          "url": "https://github.com/idaholab/moose/discussions/20459#discussioncomment-3523498",
                          "updatedAt": "2022-09-01T05:18:10Z",
                          "publishedAt": "2022-09-01T05:18:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Confusing results with counter flow heat exchanger (Thermal Hydraulics)",
          "author": {
            "login": "TheBEllis"
          },
          "bodyText": "Hi MOOSE team, I am currently trying to compare the results from the thermal hydraulics module to the NTU method (aka the effectiveness method) to see if there is any similarity in the results. To do this I am modelling a counter current heat exchanger. The cross section of said heat exchanger is shown below. The inlet temperature of the fluid in the outer channel is 500 K and the inlet of the fluid in the inner channel is 300 K. The wall in between is modeled using a basic steel model. The graph below plots the outlet temperature of the inner channel against time. This outlet temperature is obtained using the [core_T_out] postprocessor.  I was expecting this inner channel to reach some kind of steady state temperature that was higher than 300K due to the heating from the outer channel. However, as the graphs show, a peak temperature is reached early in the simulation and then the temperature tends towards the 300 K inlet temperature of the inner channel. I have added my input file at the bottom for anyone to take a look if they wish. This could be a limitation of my fluids understanding, and I was just wondering if anyone had some clarification as to why this behavior is happening. Thanks in advance!\n\n\nT_in = 300         # K\nm_dot_in = 10    #kg/s\npress = 1e5         # Pa\n\n# core parameters\nwall_thickness = ${units 5. cm -> m}\nfch_length = 10.    # m\nfch_n_elems = 100\nfch_dia = 0.5\nfch_radius_wall = ${fparse fch_dia/2 + wall_thickness}\n\n#counter flow params\nfch_outer_dia = 1.0\n\n\n\n[GlobalParams]\n  initial_p = ${press}\n  initial_vel = 0\n\n  rdg_slope_reconstruction = full\n  closures = simple_closures\n[]\n\n[HeatStructureMaterials]\n  [steel]\n    type = SolidMaterialProperties\n    rho = 8050\n    k = 45\n    cp = 466\n  []\n[]\n\n[Modules/FluidProperties]\n  [fluid1]\n    type = StiffenedGasFluidProperties\n    gamma = 2.35\n    cv = 1500.0\n    q = -1.167e6\n    p_inf = 1.0e9\n    q_prime = 0\n  []\n\n  [fluid2]\n    type = StiffenedGasFluidProperties\n    gamma = 2.35\n    cv = 1000.0\n    q = -1.167e6\n    p_inf = 1.0e9\n    q_prime = 0\n  []\n[]\n\n[Closures]\n  [simple_closures]\n    type = Closures1PhaseSimple\n  []\n[]\n\n[Components]\n\n  [channels]\n    #Flow channel setup\n    [fch]\n      type = FlowChannel1Phase\n      position = '0 0 0'\n      orientation = '0 0 1'\n      length = ${fch_length}\n      n_elems = ${fch_n_elems}\n      A = ${fparse pi * fch_dia * fch_dia / 4.}\n      D_h = ${fparse fch_dia}\n      fp = fluid1\n      f = 1.6\n      initial_T = 300\n    []\n\n    [fch_outer]\n      type = FlowChannel1Phase\n      position = '${fparse wall_thickness} 0 0'\n      orientation = '0 0 1'\n      length = ${fch_length}\n      n_elems = ${fch_n_elems}\n      A = ${fparse pi * ((fch_outer_dia * fch_outer_dia/4) - fch_radius_wall * fch_radius_wall)}\n      D_h = ${fparse fch_outer_dia - (2*fch_radius_wall)}\n      f = 1.6\n      fp = fluid2\n      initial_T = 500\n    []\n\n\n  []\n\n  [inlet_fch]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'channels/fch:in'\n    m_dot = ${m_dot_in}\n    T = ${T_in}\n  []\n\n  [outlet_fch]\n    type = Outlet1Phase\n    input = 'channels/fch:out'\n    p = ${press}\n  []\n\n  [inlet_fch_outer]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'channels/fch_outer:out'\n    m_dot = ${m_dot_in}\n    T = 500\n  []\n\n  [outlet_fch_outer]\n    type = Outlet1Phase\n    input = 'channels/fch_outer:in'\n    p = ${press}\n  []\n\n  #Heat structure setup\n\n  [hs]\n    type = HeatStructureCylindrical\n    position = '0 0 0'\n    orientation = '0 0 1'\n    inner_radius = ${fparse fch_dia / 2.}\n    length = ${fch_length}\n    n_elems = ${fch_n_elems}\n    materials = 'steel'\n    initial_T = 300\n    names = 'block'\n    widths = ${fparse wall_thickness}\n    n_part_elems = 20\n  []\n\n  [HeatStructureHeatTransferOuter]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = 'channels/fch_outer'\n    hs = hs\n    hs_side = outer\n    Hw = 2000\n    P_hf = ${fparse 2 * fch_radius_wall * pi}\n  []\n\n  [HeatStructureHeatTransferInner]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = 'channels/fch'\n    hs = hs\n    hs_side = inner\n    Hw = 2000\n    P_hf = ${fparse fch_dia * pi}\n  []\n[]\n\n[Postprocessors]\n  [core_T_in]\n    type = SideAverageValue\n    boundary = inlet_fch\n    variable = T\n  []\n\n  [core_T_out]\n    type = SideAverageValue\n    boundary = outlet_fch\n    variable = T\n  []\n\n  [outer_T_in]\n    type = SideAverageValue\n    boundary = inlet_fch_outer\n    variable = T\n  []\n[]\n\n[Preconditioning]\n  [pc]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  start_time = 0\n  end_time = 10000\n  dt = 50\n  steady_state_detection = false\n  line_search = basic\n  solve_type = NEWTON\n  abort_on_solve_fail = true\n  nl_rel_tol = 1e-6\n  nl_abs_tol = 1e-1\n  nl_max_its = 100\n\n  l_tol = 1e-7\n  l_max_its = 1000\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/21911",
          "updatedAt": "2022-08-31T10:08:14Z",
          "publishedAt": "2022-08-22T13:02:27Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@joshuahansel",
                  "url": "https://github.com/idaholab/moose/discussions/21911#discussioncomment-3448213",
                  "updatedAt": "2022-08-22T14:30:14Z",
                  "publishedAt": "2022-08-22T14:30:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "Your inlet_fch_outer has flow going in the wrong direction. It needs to be\n  [inlet_fch_outer]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'channels/fch_outer:out'\n    m_dot = -${m_dot_in}\n    T = 500\n  []\n\nThe convention for the velocity/mass-flow-rate is that positive means in the direction of orientation.",
                  "url": "https://github.com/idaholab/moose/discussions/21911#discussioncomment-3451024",
                  "updatedAt": "2022-08-22T20:51:26Z",
                  "publishedAt": "2022-08-22T20:51:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheBEllis"
                          },
                          "bodyText": "Thank you @GiudGiud  @joshuahansel! My results are much much more sane now",
                          "url": "https://github.com/idaholab/moose/discussions/21911#discussioncomment-3516495",
                          "updatedAt": "2022-08-31T10:08:15Z",
                          "publishedAt": "2022-08-31T10:08:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Import external dataset as CSV file",
          "author": {
            "login": "rudilien"
          },
          "bodyText": "I would like to import temperature data into a MOOSE model. I attempted to test this by importing a CSV file with made-up temperature data corresponding to X and Y coordinates that should result in a small region (rectangular in shape) of elevated temperature at the center of the geometry. Instead, a rhombus-like shape of elevated temperature is displayed, as well as elevated temperatures on the left and right boundaries. Can I get help with how to fix this issue? I am relatively new to using MOOSE so detailed answers would be appreciated in responses! I've attached my input file (attached as .txt), CSV file to be imported (column 1: X coord; column 2: Y coord; column 3: Temp (K)), and what is currently displaying as the imported temperature data.\nI would also like to know how to save either node ID or coordinates and MOOSE results (such as displacement and stress) as a CSV file.\nFiles:\ntensmech_DataImportTest.txt\nExData_nodes.csv",
          "url": "https://github.com/idaholab/moose/discussions/21941",
          "updatedAt": "2022-08-30T22:19:19Z",
          "publishedAt": "2022-08-25T22:42:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou are indeed seeing this because of numbering issues. The data numbering does not match your mesh ordering. Is this mesh from one of our mesh generators? Or from a file you imported?\nhow are you loading the CSV data? Which object and which options?\nyou should look at the vectorpostprocessor system or an auxkernel (elementIDaux andnodeidaux) to save/output the element/node numbering\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3491249",
                  "updatedAt": "2022-08-28T00:01:01Z",
                  "publishedAt": "2022-08-28T00:01:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rudilien"
                          },
                          "bodyText": "The mesh is made using the \"GeneratedMeshGenerator\", not an imported file. In future work, I will likely use an imported mesh.\nI am loading the CSV data using \"PropertyReadFile\" with \"read_type = 'node'\" as a User Object and then the \"PiecewiseConstantFromCSV\" Function, also with \"read_type = 'node'\". To apply the data as an initial condition, I also use \"FunctionIC\" in the ICs block, which is linked to the function defined within the Functions block. I am attempting to import and apply the CSV data to nodes by specifying the XY coordinates of the nodes in the CSV file. It was unclear from the Moose website whether the CSV data should include node numbers or coordinates of the nodes when using \"read_type = node\", so maybe I need to use a different read_type setting to import data corresponding to coordinates? The input file that I made is attached in my original post as \"tensmech_DataImportTest.txt\" - you can look at this to see how I loaded the CSV data if my answer here is unclear.\nI tried to follow data import methods that were described in other similar discussion posts in the Moose GitHub. I would like to know how to import data using XYZ (and eventually time) coordinates rather than element/node numbers so that I can import external data that may not have the same node numbering in the future.",
                          "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3503053",
                          "updatedAt": "2022-08-29T19:06:03Z",
                          "publishedAt": "2022-08-29T19:06:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "with the read_type = node the data should be ordered by node ID not by node coordinate.\nto use coordinates you may use the read_type = grain or VORONOI. This could be a little slower as it triggers searching for the nearest point to find the appropriate data",
                          "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3503598",
                          "updatedAt": "2022-08-29T20:36:05Z",
                          "publishedAt": "2022-08-29T20:36:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rudilien"
                          },
                          "bodyText": "Thanks for the clarification on node vs. voronoi read_type. I have switched my User Object and Function blocks to have \"read_type = voronoi\" but now receive this warning when running the input:\nThe following warning occurred in the object \"reader_nearest\", of type \"PropertyReadFile\".\nData size in /Users/rudilien/projects/moose/modules/tensor_mechanics/tutorials/introduction/MyScripts/ExData_nodes.csv is larger than 3 objects, some data will not be used.\nThe CSV file that I am importing has three columns: the first two are the X and Y coordinates, the third is the temperature data (see CSV attachment in my original post). I also recreated the CSV file in case something had been saved incorrectly. Is this related to the \"nvoronoi\" parameter? Could you provide more clarification on what the nvoronoi parameter should be set to as well?\nIn addition to the warning, the temperature import does not include the elevated temperature in the center of the mesh - screenshot attached:\n\nThanks for your assistance!",
                          "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3511768",
                          "updatedAt": "2022-08-30T18:58:42Z",
                          "publishedAt": "2022-08-30T18:58:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "nvoronoi should be set to the number of nodes if the number of points you want to use is the same as the number of nodes\nit's the number of nearest-neighbor regions",
                          "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3512575",
                          "updatedAt": "2022-08-30T21:15:40Z",
                          "publishedAt": "2022-08-30T21:15:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rudilien"
                          },
                          "bodyText": "Setting nvoronoi equal to the number of nodes fixed my issue. Thanks so much!",
                          "url": "https://github.com/idaholab/moose/discussions/21941#discussioncomment-3512893",
                          "updatedAt": "2022-08-30T22:19:20Z",
                          "publishedAt": "2022-08-30T22:19:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}