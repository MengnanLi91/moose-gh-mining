{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wMS0xOVQwNzoyODo1OS0wNjowMM4AXOs3"
    },
    "edges": [
      {
        "node": {
          "title": "Include errors",
          "author": {
            "login": "andrey1887"
          },
          "bodyText": "Hello. I try to create a custom aux kernel and currently i start with two files :\n/home/and/projects/thin_walled/include/auxkernels/LocalAxisVectorAux.h\n#pragma once\n#include \"Kernel.h\" \n\nand\n/home/and/projects/thin_walled/src/auxkernels/LocalAxisVectorAux.C\n#include \"LocalAxisVectorAux.h\"\nregisterMooseObject(\"LocalAxisVector\", LocalAxisVectorAux);\n\nBut i face such problem with includes in these both files:\n#include errors detected. Consider updating your compile_commands.json or includePath. \nSquiggles are disabled for this translation unit \n(/home/and/projects/thin_walled/src/auxkernels/LocalAxisVectorAux.C).C/C++(1696)\n\nMy c_cpp_properties.json:\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux\",\n            \"includePath\": [\n                \"${workspaceFolder}\",\n                \"${workspaceFolder}/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                \"${HOME}/mambaforge3/envs/moose/include\",\n                \"${HOME}/mambaforge3/envs/moose/libmesh/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/json/include\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"${HOME}/mambaforge3/envs/moose/bin/mpicxx\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"clang-x64\",\n            \"compileCommands\": \"${workspaceFolder}/compile_commands.json\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}\",\n                    \"${workspaceFolder}/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                    \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                    \"${HOME}/mambaforge3/envs/moose/include\",\n                    \"${HOME}/mambaforge3/envs/moose/libmesh/include\"\n                ]\n            }\n        }\n    ],\n    \"version\": 4\n}\n\n\nand settings.json\n{\n    \"workbench.colorTheme\": \"Atom One Dark\",\n    \"gitlens.hovers.currentLine.over\": \"line\",\n    \"[cpp]\": {\n        \"editor.defaultFormatter\": \"ms-vscode.cpptools\"\n    },\n    \"telemetry.telemetryLevel\": \"off\",\n    \"C_Cpp.default.cppStandard\": \"c++17\",\n    \"C_Cpp.default.includePath\": [\n        \"${workspaceFolder}/**\",\n        \"${env.CONDA_PREFIX}/**\",\n        \"/usr/include/**\"\n    ],\n    \"files.associations\": {\n        \"*.C\": \"cpp\",\n        \"*.h\": \"cpp\"\n    },\n    \"files.trimTrailingWhitespace\": true,\n    \"editor.tabSize\": 2,\n    \"editor.formatOnSave\": true,\n    \"files.insertFinalNewline\": true\n}\n\nHelp me please with this issue. What i doing wrong?",
          "url": "https://github.com/idaholab/moose/discussions/25775",
          "updatedAt": "2024-01-23T18:00:26Z",
          "publishedAt": "2023-10-19T07:51:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "If it s all there is in those files, that won't compile\nYou need to define a full blown class before being able to register it",
                  "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7325692",
                  "updatedAt": "2023-10-19T11:04:31Z",
                  "publishedAt": "2023-10-19T11:04:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I see workspaceFolder in the list of folders for the includes. Did you open vscode in the app's folder?\ncd projects/<app_folder>\ncode ./",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7327193",
                          "updatedAt": "2023-10-19T13:10:23Z",
                          "publishedAt": "2023-10-19T13:10:14Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "VSCode is opened in folder thin_walled:",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7328402",
                          "updatedAt": "2023-10-19T13:38:30Z",
                          "publishedAt": "2023-10-19T13:38:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "What is a right order of app development which allow to avoid such errors?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7328595",
                          "updatedAt": "2023-10-19T13:53:21Z",
                          "publishedAt": "2023-10-19T13:53:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "@GiudGiud explain me please, what additional directories and  files i need for custom kernel development?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330546",
                          "updatedAt": "2023-10-19T16:51:18Z",
                          "publishedAt": "2023-10-19T16:51:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "these folders are fine. can you compile on the command line following our getting started instructions?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330570",
                          "updatedAt": "2023-10-19T16:53:41Z",
                          "publishedAt": "2023-10-19T16:53:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "I try to compile and got following message:",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330686",
                          "updatedAt": "2023-10-19T17:05:30Z",
                          "publishedAt": "2023-10-19T17:05:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "does that file exist in MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330803",
                          "updatedAt": "2023-10-19T17:22:40Z",
                          "publishedAt": "2023-10-19T17:22:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "No. I thought, that it must included from moose subfolders, isn't it?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330861",
                          "updatedAt": "2023-10-19T17:30:19Z",
                          "publishedAt": "2023-10-19T17:30:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "where is it? VectorAuxKernel.h ? is it in moose/framework/include?\nI dont see it",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7330880",
                          "updatedAt": "2023-10-19T17:33:02Z",
                          "publishedAt": "2023-10-19T17:33:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "andrey1887"
                  },
                  "bodyText": "Yes you are right this file is absent. If i change include to this #include \"AuxKernel.h\" compilation run fine, but there are still errors in the includes:\n\nWhich file do I need to inherit from to create custom VectorAuxKernel, that you mensioned here #25653 (reply in thread).",
                  "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7331231",
                  "updatedAt": "2023-10-19T18:13:54Z",
                  "publishedAt": "2023-10-19T18:13:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "add                 \"${workspaceFolder}/include/*\",\nor                 \"${workspaceFolder}/include\",\nto the browser_path in the json",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7331307",
                          "updatedAt": "2023-10-19T18:24:22Z",
                          "publishedAt": "2023-10-19T18:24:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "just include auxkernel.h\nsee in that header, the definition of a VectorAuxkernel\ntypedef AuxKernelTempl<RealVectorValue> VectorAuxKernel;",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7331317",
                          "updatedAt": "2023-10-19T18:26:02Z",
                          "publishedAt": "2023-10-19T18:26:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "After adding:",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7331538",
                          "updatedAt": "2023-10-19T18:48:26Z",
                          "publishedAt": "2023-10-19T18:48:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "does it compile though",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7331670",
                          "updatedAt": "2023-10-19T19:02:53Z",
                          "publishedAt": "2023-10-19T19:02:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "There were two wrong things supposedly:\n\nredundant folder \n\n2.And VSCode must be started this way: #25775 (reply in thread)\nThanks a lot for help.",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-7339784",
                          "updatedAt": "2023-10-20T20:24:22Z",
                          "publishedAt": "2023-10-20T14:24:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "andrey1887"
                  },
                  "bodyText": "Hello, @GiudGiud. After reinstallation of moose something went wrong.\n\nmambaforge3 was changed to miniforge:\n\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux\",\n            \"includePath\": [\n                \"${workspaceFolder}\",\n                \"${workspaceFolder}/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                \"${HOME}/miniforge/envs/moose/include\",\n                \"${HOME}/miniforge/envs/moose/libmesh/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/json/include\",\n                \"${workspaceFolder}/include/**\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"${HOME}/miniforge/envs/moose/bin/mpicxx\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"clang-x64\",\n            \"compileCommands\": \"${workspaceFolder}/compile_commands.json\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}\",\n                    \"${workspaceFolder}/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                    \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                    \"${HOME}/miniforge/envs/moose/include\",\n                    \"${HOME}/miniforge/envs/moose/libmesh/include\",\n                    \"${workspaceFolder}/include/**\"\n                ]\n            }\n        }\n    ],\n    \"version\": 4\n}\n\n\n\nLocalAxisAux.h:\n\n\n\nLocalAxisAux.C\n\n\n\n4.After attemp to make:\n(moose) and@pc:~/projects/thin_walled$ make\nChecking if header needs updating: /home/and/projects/moose/framework/include/base/MooseRevision.h...\nCompiling C++ (in opt mode) /home/and/projects/thin_walled/build/unity_src/auxkernels_Unity.C...\nIn file included from /home/and/projects/thin_walled/build/unity_src/auxkernels_Unity.C:2:\n/home/and/projects/thin_walled/src/auxkernels/LocalAxisAux.C: In member function 'virtual libMesh::Real LocalAxisAux::computeValue()':\n/home/and/projects/thin_walled/src/auxkernels/LocalAxisAux.C:37:33: error: no matching function for call to 'SubProblem::assembly(THREAD_ID&)'\n   37 |       &_subproblem.assembly(_tid).getFE(FEType(), 1)->get_dxyzdxi();\n      |                                 ^\nIn file included from /home/and/projects/moose/framework/build/header_symlinks/MooseVariableFE.h:14,\n                 from /home/and/projects/moose/framework/build/header_symlinks/Assembly.h:15,\n                 from /home/and/projects/thin_walled/src/auxkernels/LocalAxisAux.C:1,\n                 from /home/and/projects/thin_walled/build/unity_src/auxkernels_Unity.C:2:\n/home/and/projects/moose/framework/build/header_symlinks/SubProblem.h:310:22: note: candidate: 'virtual Assembly& SubProblem::assembly(THREAD_ID, unsigned int)'\n  310 |   virtual Assembly & assembly(const THREAD_ID tid, const unsigned int nl_sys_num) = 0;\n      |                      ^~~~~~~~\n/home/and/projects/moose/framework/build/header_symlinks/SubProblem.h:310:22: note:   candidate expects 2 arguments, 1 provided\n/home/and/projects/moose/framework/build/header_symlinks/SubProblem.h:311:28: note: candidate: 'virtual const Assembly& SubProblem::assembly(THREAD_ID, unsigned int) const'\n  311 |   virtual const Assembly & assembly(const THREAD_ID tid, const unsigned int nl_sys_num) const = 0;\n      |                            ^~~~~~~~\n/home/and/projects/moose/framework/build/header_symlinks/SubProblem.h:311:28: note:   candidate expects 2 arguments, 1 provided\nmake: *** [/home/and/projects/moose/framework/build.mk:151: /home/and/projects/thin_walled/build/unity_src/auxkernels_Unity.x86_64-conda-linux-gnu.opt.lo] \u041e\u0448\u0438\u0431\u043a\u0430 1\n\n\nHelp me please to resolve this issue.",
                  "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8210861",
                  "updatedAt": "2024-01-22T16:26:01Z",
                  "publishedAt": "2024-01-22T16:26:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n1 is normal. We switched from mambaforge to miniforge\n2 & 3 are vscode 'warnings'. Essentially you ll need to add the path to wasp (moose-wasp is from a conda package right?) to the search page for vscode\n4 is a change in APIs.\nWe no longer let you access the Assembly without specifying the system number.\nSo please specify the nonlinear system number in those calls:\n&_subproblem.assembly(_tid, 0)....\n\nmost likely\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8213880",
                  "updatedAt": "2024-01-22T22:07:54Z",
                  "publishedAt": "2024-01-22T22:07:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you, @GiudGiud . After adding \"${HOME}/miniforge/envs/moose/wasp/include\" in include path of c_cpp_properties.json a squiggles are gone.\nRelated to system number:\nIn the ComputreIncrementalBeamStrain.C from which this line came in my LocalAxisAux.C it was changed to:\n&_subproblem.assembly(_tid, _nonlinear_sys.number()).getFE(FEType(), 1)->get_dxyzdxi();\nShould i use a new above variant with:\n_nonlinear_sys(_fe_problem.getNonlinearSystemBase(/*nl_sys_num=*/0)) in constructor\nor specify 0 as second argument as you show here:\n&_subproblem.assembly(_tid, 0).... is enough ?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8218750",
                          "updatedAt": "2024-01-23T10:11:17Z",
                          "publishedAt": "2024-01-23T10:11:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "every single function call where it now requires a system number you have to input it.\nI assume you are only using a single non linear system so 0 is a good value for now.\nWhen there is a _nonlinear_system member attribute, _nonlinear_system.number() is a better choice for sure",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8221561",
                          "updatedAt": "2024-01-23T14:36:04Z",
                          "publishedAt": "2024-01-23T14:36:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you, @GiudGiud . When i try to pass _nonlinear_sys(_fe_problem.getNonlinearSystemBase(/*nl_sys_num=*/0)) as parameter to constructor i get the next:\n\nHow it can be resolved?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8222745",
                          "updatedAt": "2024-01-23T16:02:34Z",
                          "publishedAt": "2024-01-23T16:02:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "your class does not have a _fe_problem attribute.\nbut every auxkernel has these\n  /// Subproblem this kernel is part of\n  SubProblem & _subproblem;\n  /// System this kernel is part of\n  SystemBase & _sys;\n  SystemBase & _nl_sys;\n  AuxiliarySystem & _aux_sys;\n\nso maybe just use _nl_sys ?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8222792",
                          "updatedAt": "2024-01-23T16:05:23Z",
                          "publishedAt": "2024-01-23T16:05:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "@GiudGiud, did you mean this:\n&_subproblem.assembly(_tid, _nl_sys.number()).getFE(FEType(), 1)->get_dxyzdxi(); ?\nBefore this \"SystemBase.h\" was included , line _nonlinear_sys(_fe_problem.getNonlinearSystemBase(/*nl_sys_num=*/0)) was deleted. No other changes. Is it right ?",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8223773",
                          "updatedAt": "2024-01-23T17:36:48Z",
                          "publishedAt": "2024-01-23T17:36:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This looks fine to me but I have not compiled it myself",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8223966",
                          "updatedAt": "2024-01-23T17:54:49Z",
                          "publishedAt": "2024-01-23T17:54:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank, you, @GiudGiud . Compilation completed successfully.",
                          "url": "https://github.com/idaholab/moose/discussions/25775#discussioncomment-8224024",
                          "updatedAt": "2024-01-23T18:00:27Z",
                          "publishedAt": "2024-01-23T18:00:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Switch DirichletBC to NeumannBC based on a calculation in the Materials block",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "All,\nI would like to switch DirichletBC to NeumannBC based on a calculation in the [Materials] block.\nFor instance, the run gets started with DirichletBC and when the value of sum reaches to 100 in the MaterialPropertyOld class (please see below), I would like to switch DirichletBC to NeumannBC.\nI have been looking at the Controls apps: AddControlAction, BoolFunctionControl, ConditionalFunctionEnableControl, LibtorchNeuralNetControl, PIDTransientControl, RealFunctionControl, and TimePeriod, but I have not found the way to do it.\nPlease help. S. Thomas\nMaterialPropertyOld::initQpStatefulProperties()\n{ _sum[_qp] = _initial_sum;}\n\nMaterialPropertyOld::computeQpProperties()\n{_sum[_qp] = _sum_old[_qp] + 10;}",
          "url": "https://github.com/idaholab/moose/discussions/26522",
          "updatedAt": "2024-01-23T16:36:28Z",
          "publishedAt": "2024-01-09T23:01:17Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo do you want this change to be local (on a per Qp basis, depending on the value of the sum) or global (the whole sideset switches)?\nif global:\nPostprocessor to report on the material property\nParsedFunction depending on the postprocessor\nConditionalFunctionEnableControl on this function\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8077943",
                  "updatedAt": "2024-01-10T10:15:36Z",
                  "publishedAt": "2024-01-10T10:15:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume.\nBasically, what I would like to do is that the run gets started with the \"zero\" DirichletBC, and then, switch to the NeumannBC with the flux value of  \"sum\" (I have modified the NeumannBC class to read the \"sum\" value) when the \"sum\" value reaches to 100, for instance.\nI am hoping I can do that ... S. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8083018",
                          "updatedAt": "2024-01-10T16:44:37Z",
                          "publishedAt": "2024-01-10T16:44:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Use the Controls system to make the switch then?\nThe sum is in a material property right?",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8083384",
                          "updatedAt": "2024-01-10T17:01:12Z",
                          "publishedAt": "2024-01-10T17:01:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume, as always.\nYes, I read \"sum\" by _sum(getMaterialProperty(\"sum\")).\nI am trying use the Controls system to switch but I cannot find the way to do.\nPlease help. S. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8083619",
                          "updatedAt": "2024-01-10T17:10:46Z",
                          "publishedAt": "2024-01-10T17:10:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Use a Postprcoessor to get the sum\nUse a ParsedFunction depending on the postprocessor (put the pp in the expression)\nthen use ConditionalFunctionEnableControl with this function to act on both boundary conditions",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8083752",
                          "updatedAt": "2024-01-10T17:19:02Z",
                          "publishedAt": "2024-01-10T17:19:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume.\nI am still learning your suggestion. Meanwhile I would like to make sure my understanding below.\nThe condition to switch DirichletBC to NeumannBC in my actual model is more complicated than the \"sum\" value reaches \"100\" as I stated above.\nI would like to ask that, in the expression below, DirichletBC can be switched to NeumannBC when _bc_switch[_qp] = 1 and use \"sum\" of _sum(getMaterialProperty(\"sum\")) as the flux value as far as bc_switch is used as _bc_switch(getMaterialProperty(\"bc_switch\")) and your suggestion can be still used.\nPlease help, S. Thomas\nMaterialPropertyOld::initQpStatefulProperties()\n{ _sum[_qp] = _initial_sum;}\n\nMaterialPropertyOld::computeQpProperties()\n{\n_sum[_qp] = _sum_old[_qp] + 10;\n\n_bc_switch[_qp] = 0;\n\nIf (_sum[_qp] > 100)\n   {\n    _bc_switch[_qp] = 1;\n   }\n}",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8099845",
                          "updatedAt": "2024-01-11T19:56:36Z",
                          "publishedAt": "2024-01-11T19:03:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "bc_swtich is a material property. So what I said (use a PP, then parsedFunction, then the COnditionalFunctionEnableControl) applies?\nBtw you will not be able to use a single BC object to act both as a Dirichlet and Neumann BC. You ll need to use two objects",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8100292",
                          "updatedAt": "2024-01-11T19:58:07Z",
                          "publishedAt": "2024-01-11T19:58:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "For\nMaterialPropertyOld::computeQpProperties()\n{_sum[_qp] = _sum_old[_qp] + 10;\n_bc_switch[_qp] = 0;\nIf (_sum[_qp] > 100)\n{_bc_switch[_qp] = 1;}\n}\n[Controls]\n[./switch_bcs]\ntype = ConditionalFunctionEnableControl\nconditional_function = 'conditional_function01'\nenable_objects = 'BCs::NeumannBC'\ndisable_objects = 'BCs::DirichletBC'\nexecute_on = 'initial timestep_begin timestep_end'\n[../]\n[]\n[Functions]\n[conditional_function01]\ntype = ParsedFunction\nexpression = 'bc_switch_ck > 0'\nsymbol_names = 'bc_switch_ck'\nsymbol_values = 'pp_bc_switch'\n[]\n[]\n[Postprocessors]\n[pp_bc_switch]\ntype = PointValue\npoint = '0.5 0.5 0.0'\nvariable = 'bc_switch'\nexecute_on = 'initial timestep_begin timestep_end'\n[]\n[]\nI am getting pp_bc_switch = 0.5, not 1, on the monitor. I don't know why.\nPlease help. S. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8150675",
                          "updatedAt": "2024-01-17T00:35:22Z",
                          "publishedAt": "2024-01-17T00:35:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We re missing the BC block here I think to see what s going on.\nAnd I m correct in assuming the PointValue is being sampled near the boundary?",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8151614",
                          "updatedAt": "2024-01-17T03:16:42Z",
                          "publishedAt": "2024-01-17T03:16:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume.\nSwitching DirichletBC to NeumannBC (I am giving the value of _sum[_qp]) looks good.\nYes, the location of PointValue is near or at the boundary.\"\n\"std::cout << _bc_switch[_qp]\" prints exactly \"1\" but pp_bc_switch prints \"0.5.\" They should be the same, shouldn't them?",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8159865",
                          "updatedAt": "2024-01-17T17:34:38Z",
                          "publishedAt": "2024-01-17T17:34:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Maybe. I d like to see your variables block with bc_switch and your boundary conditions block to be more sure",
                          "url": "https://github.com/idaholab/moose/discussions/26522#discussioncomment-8161673",
                          "updatedAt": "2024-01-17T20:43:44Z",
                          "publishedAt": "2024-01-17T20:43:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Using _total_rotation to rotational transformation of submartices of beam element stiffness matrix",
          "author": {
            "login": "andrey1887"
          },
          "bodyText": "Hello. In ComputeIncrementalBeamStrain::computeStiffnessMatrix() the next code is present:\n  // relation between translational displacements at node 0 and translational forces at node 0\n  RankTwoTensor K11_local;\n  K11_local.zero();\n  K11_local(0, 0) = youngs_modulus * A_avg / _original_length[0];\n  K11_local(1, 1) = shear_modulus * A_avg / _original_length[0];\n  K11_local(2, 2) = shear_modulus * A_avg / _original_length[0];\n  _K11[0] = _total_rotation[0].transpose() * K11_local * _total_rotation[0];\n\n  // relation between displacements at node 0 and rotational moments at node 0\n  RankTwoTensor K21_local;\n  K21_local.zero();\n  K21_local(2, 1) = shear_modulus * A_avg * 0.5;\n  K21_local(1, 2) = -shear_modulus * A_avg * 0.5;\n  _K21[0] = _total_rotation[0].transpose() * K21_local * _total_rotation[0];\n\n  // relation between rotations at node 0 and rotational moments at node 0\n  RankTwoTensor K22_local;\n  K22_local.zero();\n  K22_local(0, 0) = shear_modulus * Ix_avg / _original_length[0];\n  K22_local(1, 1) = youngs_modulus * Iz_avg / _original_length[0] +\n                    shear_modulus * A_avg * _original_length[0] / 4.0;\n  K22_local(2, 2) = youngs_modulus * Iy_avg / _original_length[0] +\n                    shear_modulus * A_avg * _original_length[0] / 4.0;\n  _K22[0] = _total_rotation[0].transpose() * K22_local * _total_rotation[0];\n\n  // relation between rotations at node 0 and rotational moments at node 1\n  RankTwoTensor K22_local_cross = -K22_local;\n  K22_local_cross(1, 1) += 2.0 * shear_modulus * A_avg * _original_length[0] / 4.0;\n  K22_local_cross(2, 2) += 2.0 * shear_modulus * A_avg * _original_length[0] / 4.0;\n  _K22_cross[0] = _total_rotation[0].transpose() * K22_local_cross * _total_rotation[0];\n\n  // relation between displacements at node 0 and rotational moments at node 1\n  _K21_cross[0] = -_K21[0];\n\nSo for all submatrices _K11, _K21, _K22, _K21_cross, _K22_cross the _total_rotation applied, this mean, that each 3x3 part of stiffness matrix will be transformed the same way.\nIn some literature sources i found the next form of transformation matix:\n\nExplain me please why in current beam element implementation the different approach is used.",
          "url": "https://github.com/idaholab/moose/discussions/26400",
          "updatedAt": "2024-01-23T10:40:56Z",
          "publishedAt": "2023-12-22T16:08:11Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cbolisetti",
                  "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7929385",
                  "updatedAt": "2023-12-22T16:39:05Z",
                  "publishedAt": "2023-12-22T16:39:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "The literature snippet you showed is for state variables - displacements, rotations, etc. The way to rotate stiffness matrices from global to local is different. If you derive that for the stiffness matrices, you get what you see in the code.",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7929453",
                          "updatedAt": "2023-12-22T16:47:59Z",
                          "publishedAt": "2023-12-22T16:47:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you @cbolisetti and @GiudGiud.\nAnother example:",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7929733",
                          "updatedAt": "2023-12-22T17:29:15Z",
                          "publishedAt": "2023-12-22T17:29:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "Yes, this is consistent with the code in MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7929801",
                          "updatedAt": "2023-12-22T17:38:55Z",
                          "publishedAt": "2023-12-22T17:38:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Thank you, @cbolisetti, but i can't understand how it can be. T matrix consist of 4 submartices placed on it's diagonal, all another elements equals to 0. It is the same thing as in my first message.",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7929852",
                          "updatedAt": "2023-12-22T17:46:18Z",
                          "publishedAt": "2023-12-22T17:46:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "@cbolisetti , i have some simply example of c++ code fore 3d truss element.\nfinite-element-method-by-example-in-qt-slash-c-plus-plus (3).pdf\nAnd there i see, that T for the force vector transformation and T for stiffness matrix transformation are the same - in (21) and (29).\n\nMay be you meant the final variant of single transformation matrix which multiplied on k in (29):\n\nThen i agree that they are same, but in moose beam element used both transposed and initial _total_rotation:\n _K22_cross[0] = _total_rotation[0].transpose() * K22_local_cross * _total_rotation[0];",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7930078",
                          "updatedAt": "2023-12-22T18:20:00Z",
                          "publishedAt": "2023-12-22T18:19:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "Are you talking about the difference between having 4 us matrices in the diagonal vs multiplying them individually? I haven't done the math but I trust the developers that they are equivalent. I'd be surprised if they aren't. May be you can try doing the math separately and let us know if the implementation is actually wrong.",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-7945482",
                          "updatedAt": "2023-12-25T22:06:24Z",
                          "publishedAt": "2023-12-25T22:06:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "andrey1887"
                          },
                          "bodyText": "Hello, @cbolisetti , sorry for late response. I did the next:\n\n\nFirst i consider, the local stiffness matrix K from 3.66 have elements equals to one and multiple T matrix to K:\n\n\n\nAfter that i took obtained result and multiply it to T (transposed):\n\n\n\nFinally this results in:\n\n\n\nWhere highlighted snippet (3\u04453) is repeated 16 times.\nSo you were right, that multiplying whole matrices and multiplying it's submatrices with subsequent substitution into overall are equivalent.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/26400#discussioncomment-8219044",
                          "updatedAt": "2024-01-23T10:40:57Z",
                          "publishedAt": "2024-01-23T10:40:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Missing coupled variables",
          "author": {
            "login": "Krystalbbling"
          },
          "bodyText": "Hello dear experts\uff0c\nRecently I tried to use MOOSE to simulate the thermal flow field, but encountered a warning.The details are as follows. I have not encountered this error before. The forces in the model only involve deformation caused by thermal expansion, but these modules do not exist in my input file. Maybe there are some problems when I configure or call them. , can you help me analyze it?\n()\nfluidheat.txt",
          "url": "https://github.com/idaholab/moose/discussions/26603",
          "updatedAt": "2024-01-22T22:36:37Z",
          "publishedAt": "2024-01-22T09:52:35Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "liang-tech"
                  },
                  "bodyText": "I neet this problem too when I upgrade the moose version to the newest.",
                  "url": "https://github.com/idaholab/moose/discussions/26603#discussioncomment-8208430",
                  "updatedAt": "2024-01-22T13:06:48Z",
                  "publishedAt": "2024-01-22T13:06:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Can you paste your input file instead of attaching it as a file?",
                  "url": "https://github.com/idaholab/moose/discussions/26603#discussioncomment-8214045",
                  "updatedAt": "2024-01-22T22:36:38Z",
                  "publishedAt": "2024-01-22T22:36:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Import output from AuxKernel in Kernel",
          "author": {
            "login": "ashishdhole"
          },
          "bodyText": "I am working on Grain growth model with Solute drag pressure, which is a function of interface/grain Boundary Velocity. is there a way I can import the velocity at each _qp at each timestep (AuxKernel - GrainBoundaryVelocity) into the Kernel (ACGrGrPoly).\nThank you",
          "url": "https://github.com/idaholab/moose/discussions/26602",
          "updatedAt": "2024-02-17T00:44:54Z",
          "publishedAt": "2024-01-22T07:23:45Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can represent the velocity as a variable or as a material property. Those can then be retrieved inside a kernel.\nSee CoupledForce and MatDiffusion kernels for examples\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26602#discussioncomment-8205609",
                  "updatedAt": "2024-01-22T08:35:04Z",
                  "publishedAt": "2024-01-22T08:35:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Block restrict mass_fraction_vars variable",
          "author": {
            "login": "1runer"
          },
          "bodyText": "Hi all, hi @cpgr,\nIs there any way to block restrict (and solve) the mass_fraction variable to a particular block?\nOr a different approach to achieve this?\nI saw this post. This doesn't solve my question (?) since I want to have PorousFlow everywhere active but with different amount of components?\nExemplary problem setting:\nHaving a 2D fracture embedded in a 3D matrix where a tracer is supposed to just flow along the fracture.\nThe tracer can't diffuse into the matrix (e.g. due to pore size limitations). Unfortunately, numerical diffusion causes always some tracer flow perpendicular to the fracture. Therefore, I would like to restrict the mass_fraction_variable tracer to just the fracture block.\nUnfortunately, PorousFlow doesn't support the use of two dictators (one for the fracture with 1p2c and one for the matrix with 1p1c) and two PorousFlowMassFraction materials.\n[UserObjects]\n  [dictator1]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pressure tracer'\n    number_fluid_phases = 1\n    number_fluid_components = 2\n    block = fracture\n  []\n  [dictator2]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pressure'\n    number_fluid_phases = 1\n    number_fluid_components = 1\n    block = 'matrix'\n  []\n[]\n\n[Materials]\n  [massfrac1]\n    type = PorousFlowMassFraction\n    mass_fraction_vars = 'tracer'\n    block = 'fracture'\n  []\n  [massfrac2]\n    type = PorousFlowMassFraction\n    block = 'matrix'\n  []\n[]\n\nErrors with:\nThe following parameter error occurred in the object \"massfrac2\", of type \"PorousFlowMassFraction\".\n\nmass_fraction_vars:\n    This value must be equal to the Dictator's num_phases (1) multiplied by num_components-1 (1)",
          "url": "https://github.com/idaholab/moose/discussions/26590",
          "updatedAt": "2024-01-22T04:16:52Z",
          "publishedAt": "2024-01-18T18:29:38Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "since I want to have PorousFlow everywhere active but with different amount of components?\n\nI think you will need duplicate the entire input (every UOs etc) to vary that amount of components.\nOtherwise did you try having the same number of components everywhere but some naturally stay at 0 over part of the domain?",
                  "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8173104",
                  "updatedAt": "2024-01-18T18:52:36Z",
                  "publishedAt": "2024-01-18T18:52:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "1runer"
                          },
                          "bodyText": "I don't have other UOs involved besides FluidProperties (SimpleFluid).\nOk, I was able to solve the error by overwriting the GlobalParam statement that I had forgotten initially (my bad).\nBut still doesn't work as I would like to have it.\nThe simulations fails due to FACTOR_OUTMEMORY. Same applies for just block-restricting tracer-related kernels to the fracture.\n  [massfrac1\n    type = PorousFlowMassFraction\n    mass_fraction_vars = 'tracer'\n    block = 'fracture'\n    PorousFlowDictator = dictator1\n  []\n  [massfrac2]\n    type = PorousFlowMassFraction\n    block = 'matrix'\n    PorousFlowDictator = dictator2\n  []\n\n 0 Nonlinear |R| = 8.063257e-01\n    |residual|_2 of individual variables:\n                   pressure: 0.806326\n                   tracer: 2.14625e-17\n      0 Linear |R| = 4.732462e+02\n  Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                 PC failed due to FACTOR_OUTMEMORY \nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n Solve Did NOT Converge!\nCurrently Executing\n  Finished Solving                                                                       \nAborting as solve did not converge\n\nAdding a NullKernel for 'tracer' at least solves. But with overshooting/undershooting in most areas, mostly in the matrix.\nOption 2 would be something like you mentioned:\n[Kernels]\n  [mass0]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 1\n    variable = pressure\n  []\n  [adv0]\n    type = PorousFlowFullySaturatedAdvectiveFlux\n    fluid_component = 1\n    variable = pressure\n  []\n  [adv1]\n    type = PorousFlowFullySaturatedAdvectiveFlux \n    fluid_component = 0\n    variable = tracer\n    block = fracture\n  []\n  [mass1]\n    type = PorousFlowMassTimeDerivative\n    fluid_component = 0\n    variable = tracer\n  []\n  [disp1]\n    type = PorousFlowDispersiveFlux\n    # Diffusion also 0\n    fluid_component = 0\n    variable = tracer\n    disp_trans = 0\n    disp_long = 0\n  []\n[]\n\nThis solves smoothly.\nBut for larger meshes/timestepping this will produce artificial diffusion into the matrix?\nThe fracture aperture and therefore the mass injected into the 2D fracture is tiny (1e-4 m) compared to the surrounding mesh size.",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8174406",
                          "updatedAt": "2024-01-18T21:45:38Z",
                          "publishedAt": "2024-01-18T21:40:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If a null kernel helps things you need to fix your block restriction of variables.\nSet the troubleshooting failed solves help page for more info on solving",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8174872",
                          "updatedAt": "2024-01-18T22:49:16Z",
                          "publishedAt": "2024-01-18T22:49:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "1runer"
                          },
                          "bodyText": "I managed to block-restrict the mass_fraction variable 'tracer' by adding the dictator manually to each PorousFlow-related section and duplicating lot's of code.\nThe results for a low-permeable matrix (1e-20 m2) are now identically to the results of a pure 2D model without any 3D matrix.\nIn contrast just limiting advection to the fracture and setting the diffusion_coef to 0 in the matrix does slow down the tracer propagation far below expected values even if pressure, pressure gradient and velocity are identical in all three cases:\nLINK to the INPUT FILES",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8176696",
                          "updatedAt": "2024-01-19T03:31:03Z",
                          "publishedAt": "2024-01-19T03:30:01Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Interesting! By 'duplicating lots of code' do you just mean in the input file, or did you have to modify the source code?",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8177094",
                          "updatedAt": "2024-01-19T04:36:55Z",
                          "publishedAt": "2024-01-19T04:36:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "1runer"
                          },
                          "bodyText": "I just had to modify the input file and adjust different Kernels, Materials, Auxkernels, etc. to the different Dictators (1 with pressure and tracer or 2 with pressure only)\nNo modification in the source code.\nSolve is perfect as with one Dictator. :)",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8183975",
                          "updatedAt": "2024-01-19T17:08:16Z",
                          "publishedAt": "2024-01-19T17:08:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "This is really useful to know!",
                          "url": "https://github.com/idaholab/moose/discussions/26590#discussioncomment-8203833",
                          "updatedAt": "2024-01-22T04:16:52Z",
                          "publishedAt": "2024-01-22T04:16:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "To output the material properties on element-face for visualization",
          "author": {
            "login": "schakrabortygithub"
          },
          "bodyText": "Hi,\nI was wondering if MOOSE already has some option to output material properties on the element-faces for visualization.\nIf material properties for some element faces are triggered to be computed, e.g, via boundary kernel or interface kernel, is it possible to output those values in exodus file for visualization?\nFor example, when I output some material property(yy component of stress tensor for an elastic problem) in an auxvariable of type Constant-Monomial using auxkernel:\n  [./Aux_pk2_yy]\n   type = RankTwoAux\n   variable = pk2_yy\n   rank_two_tensor = stress\n   index_j = 1\n   index_i = 1\n   #boundary = 'bottom '\n  [../]\n\nI get this:\n>\nAnd if I specify the boundary = 'bottom ' optional parameter, I get this:\n>\nSpecifying the 'boundary' optional parameter, it seems to still output the volumetric values for those elements that are adjacent to that boundary, though values are little off from the previous one.\nAnd if I select a boundary-set(bottom) in paraview then those properties(pk2_yy) are not available to visualize at all.\nAny suggestion?\nBest\nSubhendu",
          "url": "https://github.com/idaholab/moose/discussions/26554",
          "updatedAt": "2024-01-21T03:35:39Z",
          "publishedAt": "2024-01-15T08:21:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe boundary parameter to an auxiliary kernel is to restrict output to dofs near the boundary (or on the boundary for a nodal variable).\nIt does not have a special behavior for those auxkernels meant to output material properties.\nIt's not implemented. I think it can be implemented. I would create a new auxkernel FaceRankTwoMatAux that retrieves the face material property. I think I would use the same trick as for the boundary parameter, output the face value as a volumetric value in the element nearby, as we do not have much support for face variable output rn (though we have more and more face variable capability, so it s something that could be implemented too)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8132901",
                  "updatedAt": "2024-01-15T13:05:50Z",
                  "publishedAt": "2024-01-15T13:05:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "Thanks @GiudGiud for the suggestion. I will try to implement FaceRankTwoMatAux to output face materials property.",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8135378",
                          "updatedAt": "2024-01-15T17:01:40Z",
                          "publishedAt": "2024-01-15T17:01:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@lindsayad if you have some advice on face material property output",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8135409",
                          "updatedAt": "2024-01-15T17:04:24Z",
                          "publishedAt": "2024-01-15T17:04:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If you use the boundary parameter, you will get the face material property value. The issue with the visualization is that you need to color the internal values something, and since there is nothing setting the internal dof values, they are simply zero. Writing a new aux kernel would not do anything about the big red block for the dofs not on the boundary",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8138394",
                          "updatedAt": "2024-01-16T00:17:41Z",
                          "publishedAt": "2024-01-16T00:17:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Looking at your image again... the internal values in the bottom picture are not zero?! That is very troubling if you don't have some other aux kernel also outputting to the pk2_yy variable",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8138405",
                          "updatedAt": "2024-01-16T00:19:59Z",
                          "publishedAt": "2024-01-16T00:19:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "@lindsayad, the internal values in the second image is indeed zero. The confusion may be arising due to the range of the color bar. Since highest magnitude in the color bar is -1.8e+03, zero values are also getting colored with red.\nWhen I specify the boundary parameter it does compute the surface-averaged magnitude of that material property but places those values as volumetric quantity corresponding to that 3D element.\nI was wondering if we can output those values as surface quantity corresponding to the face-elements of that 3D parent element. That would help to inspect those material properties without need to declare multiple auxvariables one for volumetric values and one for each boundaries(to avoid common element).",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8141532",
                          "updatedAt": "2024-01-16T08:59:19Z",
                          "publishedAt": "2024-01-16T08:59:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I'm still unclear on what you want. We could (potentially, it would be a fair amount of work) create a variable that lives on lower dimensional elements coincident with the higher-dimensional element boundary face, and then populate that variable with one aux kernel, and then populate another aux variable that has the volumetric evaluations. Alternatively, you could go down the custom aux kernel route like @GiudGiud suggested. You would want to set the _dual_restrictable parameter like is done in the GapValueAux and NearestNodeValueAux framework classes. And then for elements adjacent to your boundary you could do face-based evaluations, and then for elements not adjacent you could do volumetric evaluations. Note that this is what I expect for the outcome pursuing this path:\n\nfor CONSTANT MONOMIAL variables, your visualization of boundary-adjacent elements will appear volumetric just by definition of the variable family type (it's a constant over the element)\nfor higher order MONOMIAL, your evaluation of the boundary-adjacent element is actually rank deficient ... there is not enough information from the aux kernel to populate all of the element's dofs. We do a singular value decomposition in this case. All that you're ensured is that the evaluation of the variable on the face will correspond to your material property evaluation. I don't know what the variable will look like in other places of the element\nfor nodal variables ... well these don't work with material properties so I don't need to say anything about them \ud83d\ude04",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8145973",
                          "updatedAt": "2024-01-16T15:45:40Z",
                          "publishedAt": "2024-01-16T15:44:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "@lindsayad,\nThanks for  the suggestions. Your first suggestion seems to be the ideal one, i.e, 'create a variable that lives on lower dimensional elements coincident with the higher-dimensional element boundary face'. But I do not need that one right now. I Just wanted to make sure that feature is not there in moose yet.",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8152955",
                          "updatedAt": "2024-01-17T07:07:28Z",
                          "publishedAt": "2024-01-17T07:07:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "You should in theory be able to do this now from your end. You can use a LowerDBlockFromSidesetGenerator and then create an aux variable and aux kernel restricted to that block. I cannot guarantee that this will work with the face material property evaluation; if it doesn't it wouldn't be too difficult to add support for it. We do have support for it in other places",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8158539",
                          "updatedAt": "2024-01-17T15:45:12Z",
                          "publishedAt": "2024-01-17T15:45:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "Hi @lindsayad,\nThis is exactly what I was looking for. Thanks for the suggestion!\nThough computation of face material property on this block seems to have some issue, as you have also mentioned.\nI was testing it for a simple elastic problem under uniaxial compression. I output the YY stress on this surface block(PK2_yy_Surface) as well as standard volumetric output(PK2_yy) to Auxvarible of type Constant-Monomial. There is significant difference between the surface values and the volumetric values to the corresponding adjacent element. See the image below,\n\nMy guess is that (not sure though), while computing the material properties on the element-face, the out-of-plane displacement gradients are not getting into the deformation gradient computation. That's causing wrong value of strain and hence stress on element-faces.\nmoose input script:\n[Mesh]\n[./gmg]\n  type = GeneratedMeshGenerator\n  dim = 3\n  nx = 4\n  ny = 4\n  nz = 2\n  xmax = 0.1\n  ymax = 0.1\n  zmax = 0.01\n  elem_type = HEX8 #TET4, HEX, HEX8\n []\n [SurfaceBlock]\n    input = gmg   # breakmesh surface_FB\n    type = LowerDBlockFromSidesetGenerator\n    sidesets = 'top bottom left right'\n    new_block_id = '2'\n    new_block_name = 'surface_LRTB'\n    show_info = True\n  []\n[]\n\n[Outputs]\n    file_base = Data_ElasticBasic_n1_Comp\n    csv = true\n    exodus = true\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Modules/TensorMechanics/Master/all]\n  strain = FINITE\n  add_variables = true\n  #new_system = true\n  #formulation = updated\n  #volumetric_locking_correction = true\n[]\n\n[Materials]\n  [./elasticity_tensor_iso]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1.68e5\n    poissons_ratio = 0.25\n  [../]\n  [./compute_stress]\n    type = ComputeFiniteStrainElasticStress\n  [../]\n[]\n\n\n[BCs]\n  [./BC_All_Y]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = 'top '\n    function = '(-0.1)*y*t'\n  [../]\n\n  [./BC_BottomLeft_X]\n    type = FunctionDirichletBC\n    variable = disp_x\n    boundary = 'bottom'  # mid_nodes, left_bottom_node back_bottom_node\n    function = 0.0\n  [../]\n   [./BC_BottomLeft_Y]\n    type = FunctionDirichletBC\n    variable = disp_y\n    boundary = 'bottom' # mid_nodes, left_bottom_node\n    function = 0.0\n  [../]\n   [./BC_BottomBack_Z]\n    type = FunctionDirichletBC\n    variable = disp_z\n    boundary = 'bottom'  #'back_bottom_node'\n    function = 0.0\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n    type = Transient\n  solve_type = 'PJFNK' #'NEWTON' , 'PJFNK'\n  #automatic_scaling = true\n  #scaling_group_variables = 'disp_x disp_y disp_z; Rho_EdgePositive Rho_EdgeNegative'\n  #petsc_options = '-pc_svd_monitor'\n  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  petsc_options_value = ' asm      2              lu            gmres     200'\n  nl_abs_tol = 1e-5  #1e-10 for all *_tol\n  nl_rel_tol = 1e-5\n  nl_abs_step_tol = 1e-5\n  nl_max_its = 10\n  l_abs_tol = 1e-5\n  l_tol = 1e-5\n  l_max_its = 20\n\n  dt = 0.05\n  dtmin = 0.0001\n  dtmax = 0.1\n  end_time = 0.2\n[]\n\n\n[AuxVariables]\n  [./pk2_yy_Surface]\n    order = CONSTANT\n    family = MONOMIAL\n    block = surface_LRTB\n  [../]\n  [./pk2_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./Aux_pk2_yy_Surface]\n   type = RankTwoAux\n   variable = pk2_yy_Surface\n   rank_two_tensor = stress\n   index_j = 1\n   index_i = 1\n   block = 'surface_LRTB'  \n  [../]\n  [./Aux_pk2_yy]\n   type = RankTwoAux\n   variable = pk2_yy\n   rank_two_tensor = stress\n   index_j = 1\n   index_i = 1\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8165094",
                          "updatedAt": "2024-01-18T05:48:54Z",
                          "publishedAt": "2024-01-18T05:48:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@recuero",
                          "url": "https://github.com/idaholab/moose/discussions/26554#discussioncomment-8169358",
                          "updatedAt": "2024-01-18T13:32:12Z",
                          "publishedAt": "2024-01-18T13:32:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error when compiling",
          "author": {
            "login": "lilei199908"
          },
          "bodyText": "When I followed the example\ncd ~/projects/YourAppName make -j 6 ./run_tests -j 6\nMy makefile file is\n`ALL_MODULES                 := no\nCHEMICAL_REACTIONS          := no\nCONTACT                     := no\nELECTROMAGNETICS            := no\nEXTERNAL_PETSC_SOLVER       := no\nFLUID_PROPERTIES            := no\nFSI                         := no\nFUNCTIONAL_EXPANSION_TOOLS  := no\nGEOCHEMISTRY                := no\nHEAT_TRANSFER               := yes\nLEVEL_SET                   := no\nMISC                        := no\nNAVIER_STOKES               := no\nOPTIMIZATION                := no\nPERIDYNAMICS                := no\nPHASE_FIELD                 := yes\nPOROUS_FLOW                 := no\nRAY_TRACING                 := no\nREACTOR                     := no\nRDG                         := no\nRICHARDS                    := no\nSTOCHASTIC_TOOLS            := no\nTHERMAL_HYDRAULICS          := no\nTENSOR_MECHANICS            := no\nXFEM                        := no\nreport an errorLinking Executable /home/lilei2023/projects/your_app_name/heat_transfer-opt...\n/home/lilei2023/miniforge/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lilei2023/projects/moose/modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.so: undefined reference to HeatTransferApp::registerExecFlags(Factory&)' /home/lilei2023/miniforge/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lilei2023/projects/your_app_name/lib/libheat_transfer-opt.so: undefined reference to HeatTransferApp::registerAll(Factory&, ActionFactory&, Syntax&)'\n/home/lilei2023/miniforge/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lilei2023/projects/moose/modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.so: undefined reference to HeatTransferApp::associateSyntax(Syntax&, ActionFactory&)' /home/lilei2023/miniforge/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lilei2023/projects/moose/modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.so: undefined reference to HeatTransferApp::registerObjects(Factory&)'\n/home/lilei2023/miniforge/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lilei2023/projects/moose/modules/module_loader/lib/libmodule_loader_with_ray_ht_tm_pf-opt.so: undefined reference to HeatTransferApp::registerApps()' collect2: error: ld returned 1 exit status make: *** [/home/lilei2023/projects/moose/framework/app.mk:445: /home/lilei2023/projects/your_app_name/heat_transfer-opt] Error 1",
          "url": "https://github.com/idaholab/moose/discussions/26584",
          "updatedAt": "2024-01-20T12:20:30Z",
          "publishedAt": "2024-01-18T10:44:34Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe just changed a few things about the main app source files.\nYou will need to save all your work using git commit then clean the entire repo with git clean -xfd run at the moose/ folder level\nThen recompile\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26584#discussioncomment-8169262",
                  "updatedAt": "2024-01-18T13:24:51Z",
                  "publishedAt": "2024-01-18T13:24:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lilei199908"
                          },
                          "bodyText": "I re-cloned it and it compiled successfully, thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/26584#discussioncomment-8189281",
                          "updatedAt": "2024-01-20T09:59:38Z",
                          "publishedAt": "2024-01-20T09:59:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to define temperature-related properties in SolidMaterialProperties?",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "@joshuahansel Hi Josh. As the description in the title, should I use ParsedFunction to define temperature-related properties in SolidMaterialProperties? Are there any cases which I can refer to?",
          "url": "https://github.com/idaholab/moose/discussions/26543",
          "updatedAt": "2024-01-20T01:47:52Z",
          "publishedAt": "2024-01-12T08:55:14Z",
          "category": {
            "name": "Q&A Modules: Thermal Hydraulics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Ethan-xj"
                  },
                  "bodyText": "I understand now. In the ParsedFunction, 't' is used to represent temperature.",
                  "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8116337",
                  "updatedAt": "2024-01-13T07:39:10Z",
                  "publishedAt": "2024-01-13T07:39:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "t is used to represent time in functions in general\nBut when the function is used, temperature is passed as time",
                          "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8117745",
                          "updatedAt": "2024-01-13T12:40:21Z",
                          "publishedAt": "2024-01-13T12:40:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud Thank you. And I have another question.\nHow can I output the temperature of the heatstructure?\nI set the parameter like this:\n  [ROD21]\n    type = HeatStructureCylindrical\n    position = '0 21 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = ${T_in}\n    names = 'clad gap fuel air'\n    widths = '0.0006 0.00015 0.0035 0.001'\n    n_part_elems = '3 2 5 1'\n    materials = 'clad-mat gap-mat fuel-mat air-mat'\n  [../]\n\nI want to get the temperature of these four parts: clad gap fuel and air. What should I do?",
                          "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8165220",
                          "updatedAt": "2024-01-18T06:12:53Z",
                          "publishedAt": "2024-01-18T06:12:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nI think you can use the PointValue postprocessor for this.\nI don't know if there is a dedicated heat structure variable output. @joshuahansel\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8169336",
                          "updatedAt": "2024-01-18T13:30:53Z",
                          "publishedAt": "2024-01-18T13:30:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "Which do you want?\n\ntemperature at a certain point in each: Guillaume answered that.\naverage temperature in each region: use AverageNodalVariableValue with variable = T_solid and block = R0D21:clad for example.\ntemperature at every point: just output to Exodus",
                          "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8170687",
                          "updatedAt": "2024-01-18T15:23:38Z",
                          "publishedAt": "2024-01-18T15:23:37Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Thank you very much !",
                          "url": "https://github.com/idaholab/moose/discussions/26543#discussioncomment-8187301",
                          "updatedAt": "2024-01-20T01:47:43Z",
                          "publishedAt": "2024-01-20T01:47:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to use coordinate values and time t in the material module, when simulating dendrite growth using the phase field method?",
          "author": {
            "login": "creepmhyang"
          },
          "bodyText": "Dear MOOSE experts,\nRecently, I used moose to simulate dendrite growth. The formula used is:\n\nwhere as(n)=1+mcos(j(xita-xita0))\nWhen I wrote the first term on the left side of formula 132, I used (z-vp*t)/lt, as shown in the figure below:\n\nThe following error occurred during operation. When I remove (z-vp*t)/lt, the error will not be reported.\n\nMy question is, in a function of type ParsedMaterial, how do I take into account the coordinate values (x, y, z) and the time t?\nThe complete code is as follows:\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmax = 960\n  ymax = 960\n  nx = 23\n  ny = 23\n  uniform_refine = 2\n[]\n\n[Variables]\n  [./phi]\n  [../]\n  [./U]\n#    initial_condition = 0.035\n  [../]\n[]\n\n[ICs]\n  [./phiIC]\n    type = FunctionIC\n    variable = phi\n    function = ic_func_phi\n  [../]\n  [./UIC]\n    type = FunctionIC\n    variable = U\n    function = ic_func_U\n  [../]\n[]\n\n[Functions]\n  [./ic_func_phi]\n    type = ParsedFunction\n    expression = 0.5*(0.0-2.0*tanh((y-50.0)*2.0))\n  [../]\n  [./ic_func_U]\n    type = ParsedFunction\n    expression = -0.4\n  [../]\n[]        \n\n[Kernels]\n  [./dphidt]\n    type = TimeDerivative\n    variable = phi\n  [../]\n  [./phibulk]\n    type = AllenCahn\n    variable = phi\n    f_name = f_chem\n    mob_name = tau_inv\n    coupled_variables = 'U'\n  [../]\n  [./phi_scary]\n    type = ACInterfaceKobayashi1\n    variable = phi\n    eps_name = eps\n    mob_name = tau_inv\n  [../]\n  [./phi_alsoscary]\n    type = ACInterfaceKobayashi2\n    variable = phi\n    eps_name = eps\n    mob_name = tau_inv\n  [../]\n  [./dUdt]    \n    type = SusceptibilityTimeDerivative\n    f_name = dUdt\n    variable = U\n    coupled_variables = phi\n  [../]\n  [./Udiffusion]\n    type = MatDiffusion\n    variable = U\n    args = 'phi'\n    diffusivity = D\n  [../]\n  [./antitrapping]\n    type = AntitrappingCurrent\n    variable = U\n    v = phi\n    f_name = anti\n  [../]\n  [./Ucoupledphi]\n    type = CoupledSusceptibilityTimeDerivative\n    f_name = dhdt\n    variable = U\n    v = phi\n  [../]\n[]\n\n[Materials]\n  [./constants]\n    type = GenericConstantMaterial\n    prop_names = ' a1      a2          L     cw    Tl     Dl    k     lmd  m     W0     tau0     cl0     Dt    lt        vp   deltaT0'\n    prop_values = '0.8839  0.62666667  2470  0.04  922.9  3000  0.14  1    -2.6  0.425  3.78e-5  0.2857  4530  0.638857  1.0  0.6389'\n  [../]\n  [./W]\n    type = InterfaceOrientationMaterial\n    op = phi\n    mode_number = '6'\n    anisotropy_strength = '0.02'\n    eps_bar = '0.425'\n    reference_angle = '0'\n  [../]\n  [./tau_inv]\n    type = ParsedMaterial\n    property_name = tau_inv\n    material_property_names = 'eps tau0 W0 k vp lt'\n#    coupled_variables = 'z t'\n    expression = 'tau:=tau0*(eps/W0)*(eps/W0); tau:=tau*(1-(1-k)*(z-vp*t)/lt); 1/tau'\n  [../]\n  [./f_chem]\n    type = DerivativeParsedMaterial\n    property_name = f_chem\n    material_property_names = 'lmd vp lt '\n#    coupled_variables = 'z t'\n    expression = '-0.5*phi^2+0.25*phi^4+lmd*(U+(z-vp*t)/lt)*(phi-2.0*phi^3/3.0+0.2*phi^5)'\n    derivative_order = 2\n  [../]\n  [./D]\n    type = ParsedMaterial\n    property_name = D\n    material_property_names = 'Dl'\n    coupled_variables = 'phi'\n    expression = 'Dl*(1-phi)/2.0'\n  [../]\n  [./dUdt]\n    type = ParsedMaterial\n    property_name = dUdt\n    material_property_names = 'k'\n    coupled_variables = 'phi'\n    expression = '(1+k)/2.0-(1-k)*phi/2.0'\n  [../]\n  [./anti]\n    type = DerivativeParsedMaterial\n    property_name = anti\n    coupled_variables = 'phi U'\n    material_property_names = 'eps k'\n    expression = '-0.354*eps*(1+(1-k)*U)'\n  [../]\n  [./dhdt]\n    type = DerivativeParsedMaterial\n    property_name = dhdt\n    material_property_names = 'eps k'\n    coupled_variables = 'U'\n    expression = '-0.5*eps*(1+(1-k)*U)'\n  [../]\n[]\n\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu      '\n  #petsc_options_iname = '-pc_type -sub_pc_type'\n  #petsc_options_value = 'asm       ilu        '\n  nl_abs_tol = 1e-10\n  nl_rel_tol = 1e-08\n  l_max_its = 30\n  end_time = 100.0\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    optimal_iterations = 6\n    iteration_window = 2\n    dt = 0.0002\n    growth_factor = 1.2\n    cutback_factor = 0.8\n  [../]\n  [./Adaptivity]\n    initial_adaptivity = 2\n    refine_fraction = 0.8\n    coarsen_fraction = 0.2\n    max_h_level = 4\n    interval = 3\n  [../]\n  dtmax = 5.5\n[]\n\n[Outputs]\n  [./exodus]\n    type = Exodus\n    interval = 5\n  [../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/26583",
          "updatedAt": "2024-01-19T13:28:59Z",
          "publishedAt": "2024-01-18T09:07:49Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nXyz and t are not coupled variables if they are spatial coordinates and time respectively.\nUnfortunately it does not look like they are supported directly in the expression.\nSo you need to use a FunctionAux to save x y z and t in 4 different auxiliary variables.\nThen use them as a coupled variable in the ParsedMaterial\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26583#discussioncomment-8169315",
                  "updatedAt": "2024-01-18T13:29:27Z",
                  "publishedAt": "2024-01-18T13:29:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "creepmhyang"
                          },
                          "bodyText": "Thank you!! It's work!",
                          "url": "https://github.com/idaholab/moose/discussions/26583#discussioncomment-8176215",
                          "updatedAt": "2024-01-19T02:28:13Z",
                          "publishedAt": "2024-01-19T02:28:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}