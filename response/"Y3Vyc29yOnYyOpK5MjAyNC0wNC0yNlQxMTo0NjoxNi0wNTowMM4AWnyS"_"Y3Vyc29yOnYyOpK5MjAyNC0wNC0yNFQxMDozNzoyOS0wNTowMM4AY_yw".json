{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNC0yNFQxMDozNzoyOS0wNTowMM4AY_yw"
    },
    "edges": [
      {
        "node": {
          "title": "HPC installation libraries moved (like GCC and other ones)",
          "author": {
            "login": "RotmanC"
          },
          "bodyText": "Hello,\nI have some issues when update moose in the HPC, so I start the installation again, but I have some errors when I update and build libmesh:\nlibtool: warning: '/dragofs/sw/foss/0.2/software/GCCcore/11.2.0/lib64/libstdc++.la' seems to be moved\nMore information is enclosed in the logfile: libesh_update_rebuild.log\nHere is the logfile of the petsc update and build too (I didn't find any extrange):\npetsc_update_rebuild.log\nI run scripts/diagnostics.sh (moose_scripts_diagnostics.log) and it seems that I'm not using Conda MOOSE packages. But since I know, in HPC it's good to install it with no environments to use already modules like GCC, MPI, right? Also, HPC install guides don't mention to install conda MOOSE environment.\nHow can I fix it and continue with the installation?\nThank you in advance",
          "url": "https://github.com/idaholab/moose/discussions/27461",
          "updatedAt": "2024-04-26T16:24:04Z",
          "publishedAt": "2024-04-24T15:28:13Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo do you hit an error?\nThis is a warning and you can ignore it.\nI think you should continue with the installation if it's just that warning.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9215250",
                  "updatedAt": "2024-04-24T15:34:58Z",
                  "publishedAt": "2024-04-24T15:34:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RotmanC"
                          },
                          "bodyText": "Hello.\nIt seems that it works!\nI increase the time conda config --set remote_read_timeout_secs new_timeout whit new_timeout = 300 (from the troubleshooting website) but it still failed for timeout.\nNow I have problems with the firewall\nA process or daemon was unable to complete a TCP connection to another process:\n  Local host:    drago31040125\n  Remote host:   drago31040126\nThis is usually caused by a firewall on the remote host. Please check that any firewall (e.g., iptables) has been disabled and try again.\n\nIf you have some advices, are more than welcome.\nThanks for your support.",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9223315",
                          "updatedAt": "2024-04-25T09:58:02Z",
                          "publishedAt": "2024-04-25T09:58:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RotmanC"
                          },
                          "bodyText": "Hi again.\nI try to run it again, but instead of using abatchslurm.sh, I used srun to see how it works easy and quickly.\nBut I get this error about Gcccore dependencies...\nIn file included from /dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/x86_64-pc-linux-gnu/bits/c++config.h:586,\n                 from /dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/cmath:41,\n                 from ./tmp_jit_2PjqQ4.cc:2:\n/dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/x86_64-pc-linux-gnu/bits/os_defines.h:39:10: fatal error: features.h: No such file or directory\n   39 | #include <features.h>\n\nDo you know what I am doing wrong? It could be convenient to install a the moose conda environment in the HPC?",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9225719",
                          "updatedAt": "2024-04-25T13:56:42Z",
                          "publishedAt": "2024-04-25T13:56:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nNo idea for the firewall.\nFor the GCCcore error when is this happening? At runtime?\nIf so it s likely caused by some parsed expression compilation. And you will want to make sure all the compilers are loaded in the run script, just like during installation",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9230964",
                          "updatedAt": "2024-04-26T00:46:39Z",
                          "publishedAt": "2024-04-26T00:46:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RotmanC"
                          },
                          "bodyText": "Hi.\nI uncomment calling modules and conda and it works by srun, but it still the message:\nIn file included from /dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/x86_64-pc-linux-gnu/bits/c++config.h:586,\n                 from /dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/cmath:41,\n                 from ./tmp_jit_bqYLv0.cc:2:\n/dragofs/sw/foss/0.2/software/GCCcore/11.2.0/include/c++/11.2.0/x86_64-pc-linux-gnu/bits/os_defines.h:39:10: fatal error: features.h: No such file or directory\n   39 | #include <features.h>\n      |          ^~~~~~~~~~~~\ncompilation terminated.\nJIT compile failed.\n\nUsing sbatch I was not able to check it since there is a long wait time until it starts running.",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9237553",
                          "updatedAt": "2024-04-26T13:55:40Z",
                          "publishedAt": "2024-04-26T13:55:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Some HPC clusters use SLURM as their job scheduler. Also, many HPC clusters will configure their cluster to prevent processes from using any resources in parallel unless the process is launched using srun. The TestHarness doesn't know that it needs to do this, and thus you see failures for some tests.\nThe TestHarness, for all intent and purposes is a job scheduler. It walks through all the tests it is being asked to perform, and figures out how to properly manage the amount of cores you are allowing to be using at any given time (like 6 cores. e.g. -j 6). The problem is, when the TestHarness encounters a test requiring multiple cores, it will launch this test using mpiexec -n . This is where a test running on SLURM clusters will fail. As this is not the proper way to execute a binary to be run in parallel (SLURM requires that binaries be scheduled to run using srun).\nBut it is very problematic for a job scheduler (which the TestHarness is) to use another job scheduler (which SLURM is).\nThat's the long of it.\nHowever the error you are receiving, about JIT Compilation... we might be able to solve. Can you explain how it is you ran that one test? Did you manually execute your binary (or moose_test-opt)? Can you print out all the commands you ran leading up to the failure? This will help me understand what to ask you next...",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9238396",
                          "updatedAt": "2024-04-26T14:56:44Z",
                          "publishedAt": "2024-04-26T14:56:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RotmanC"
                          },
                          "bodyText": "I include moose_test-opt in a batch file and I call it as: srun ./abatchslurm.sh\nNow GCCcore and JIT errors don't appear. May be the HPC managers made something (I wrote them about this issue too).\nThe problem is that srun is configured to run only 10 minutes. For larger simulations (not test of running) have to be send through sbatch protocols.\nI'm waiting to start the same simulation using the same batch file but using sbatch. I will let you know you how it works.\nThank you for your support.",
                          "url": "https://github.com/idaholab/moose/discussions/27461#discussioncomment-9239424",
                          "updatedAt": "2024-04-26T16:24:05Z",
                          "publishedAt": "2024-04-26T16:24:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MooseMesh: property \"add_subdomain_names\"?",
          "author": {
            "login": "jmeier"
          },
          "bodyText": "Dear Community,\nFollowing the procedure recommended here, I would like to propose the property \"add_subdomain_names\" for the object \"MooseMesh\" for discussion.\nMotivation and current situation\nUsing the property add_subdomain_ids of the MooseMesh base class a user can add (initially empty) subdomains to an existing mesh for later usage. Up to my knowledge today only subdomain IDs can be added and no name is provided for these subdomains. To ease reading and debugging of the Moose input file it would be great to also provide the possibility to add subdomain names. For this purpose I like to propose an additional property for the object \"MooseMesh\": add_subdomain_names\nProposed property \"add_subdomain_names\" for the object MooseMesh\nFollowing the design pattern of existing objects and their properties, e.g. with \"symbol_names\" and \"symbol_values\" in ParsedFunction I like to add the property add_subdomain_names as a companion property to the existing property add_subdomain_ids. While add_subdomain_ids is taking a vector of subdomain ids, the additional (optional) add_subdomain_names provides the corresponding vector of SubdomainNames. The property add_subdomain_names would only be valid, if add_subdomain_ids is defined.\nA input file using this property might look like:\n[Mesh]\n  ...\n  add_subdomain_ids  =  '5      6      7'\n  add_subdomain_names = 'BlockX BlockY BlockZ'\n  ...\n[]\n\nImpact to existing Moose apps\nAs this proposal only adds functionality. Existing Moose apps should be able to cope with the proposed changes without any problems.\nPlease find a crude proof of concept here and there.\nIf this proposal meets with interest, I need support in preparing the code before I can create a PR. The proof-of-concept works for me, but does not include support for \"parallel mesh\", for example.\nI would be delighted if you could consider this proposal.",
          "url": "https://github.com/idaholab/moose/discussions/27415",
          "updatedAt": "2024-04-26T16:22:00Z",
          "publishedAt": "2024-04-19T11:54:17Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is a good idea.\nI think we will want to match the number and names and ids\nOR have names specified and no ids\nOR have ids specified and no ids\nI'll tag the original contributor of the id feature on the PR for review\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27415#discussioncomment-9166258",
                  "updatedAt": "2024-04-19T12:42:14Z",
                  "publishedAt": "2024-04-19T12:42:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Dear Guillaume,\nThanks for your quick and positive reply.\n\nI think we will want to match the number and names and ids\n\nThis is how I implemented it in my proof of concept linked above.\n\nOR have names specified and no ids\n\nThen ids need to be generated on-the-fly. I would need help to implement that.\n\nOR have ids specified and no ids (I think you mean \"names\")\n\nTo just provide ids (and NO names) is possible in my proof of concept linked above and I think it is crucial to maintain this behavior. Otherwise we would break some of the existing models.\nPlease let me know when it is clear how to proceed. There are still a few things in my proof of concept that I am unsure about. Should these questions be asked here - or as part of a PR?",
                          "url": "https://github.com/idaholab/moose/discussions/27415#discussioncomment-9166670",
                          "updatedAt": "2024-04-19T13:20:53Z",
                          "publishedAt": "2024-04-19T13:20:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think a PR is the way forward if you have something working already",
                          "url": "https://github.com/idaholab/moose/discussions/27415#discussioncomment-9169151",
                          "updatedAt": "2024-04-19T17:13:04Z",
                          "publishedAt": "2024-04-19T17:13:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Please find the corresponding PR here: #27420",
                          "url": "https://github.com/idaholab/moose/discussions/27415#discussioncomment-9169631",
                          "updatedAt": "2024-04-19T18:04:31Z",
                          "publishedAt": "2024-04-19T18:04:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jmeier"
                  },
                  "bodyText": "The PR is now merged. Thanks to everyone for your support!",
                  "url": "https://github.com/idaholab/moose/discussions/27415#discussioncomment-9239397",
                  "updatedAt": "2024-04-26T16:20:36Z",
                  "publishedAt": "2024-04-26T16:20:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Searching for Creep Models in Moose",
          "author": {
            "login": "hardud"
          },
          "bodyText": "Hi,\nIs it possible to look at what all Creep models moose already has? I found Power Law Creep Stress Update, but if I want to apply another creep model, where can I look at all the options?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/27476",
          "updatedAt": "2024-09-24T18:54:51Z",
          "publishedAt": "2024-04-25T22:10:36Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe index of all objects available in MOOSE is at this page\nhttps://mooseframework.inl.gov/source/index.html\nYou can search for creep there\nAlternatively, all materials here:\nhttps://mooseframework.inl.gov/syntax/Materials/index.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27476#discussioncomment-9230694",
                  "updatedAt": "2024-04-25T23:41:13Z",
                  "publishedAt": "2024-04-25T23:41:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hardud"
                          },
                          "bodyText": "Thanks Dr. Guillaume,\nUnder these I could only find two materials that computes Creep: Power Law Creep and Hill Creep. Is it possible to add other common creep models for eg. Norton-Bailey Creep Law or Garofalo Creep Law?\nBest,\nHarsh",
                          "url": "https://github.com/idaholab/moose/discussions/27476#discussioncomment-9238241",
                          "updatedAt": "2024-04-26T14:46:52Z",
                          "publishedAt": "2024-04-26T14:46:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nIt certainly is. Are you looking into implementing them yourself?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27476#discussioncomment-9238467",
                          "updatedAt": "2024-04-26T15:01:21Z",
                          "publishedAt": "2024-04-26T15:01:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hardud"
                          },
                          "bodyText": "Yes, I would need to use some of the creep models for my research that are not available in moose. I can model them and let you know.\nHarsh",
                          "url": "https://github.com/idaholab/moose/discussions/27476#discussioncomment-9238508",
                          "updatedAt": "2024-04-26T15:04:24Z",
                          "publishedAt": "2024-04-26T15:04:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "sounds good. @bwspenc @gambka any of these two models you would be interested in seeing contributed back to MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/27476#discussioncomment-9238528",
                          "updatedAt": "2024-04-26T15:06:43Z",
                          "publishedAt": "2024-04-26T15:06:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error Assigning Elasticity Tensor with AD Material",
          "author": {
            "login": "m1russell"
          },
          "bodyText": "I have ran into the following error while attempting to convert a material class for thermally varying orthotopic elasticity to be compatible with AD using the \"Supporting both AD and non-AD variables through templating\" guide.   The error occurs at the  line where I assign my rank four orthroptic tesnor to the elasticity tensor:\n  _elasticity_tensor[_qp] = _ortho_Cijkl;/\nThe error message is as follows:\n/projects/moose/framework/build/header_symlinks/RankFourTensor.h: In instantiation of 'RankFourTensorTempl< <template-parameter-1-1> >::RankFourTensorTempl(const RankFourTensorTempl<T2>&) [with T2 = MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<64> >, true>; T = double]': /projects/phoenix/src/materials/ComputeVariableOrthotropicElasticityTensor.C:132:29:   required from 'void ComputeVariableOrthotropicElasticityTensorTempl<is_ad>::computeQpElasticityTensor() [with bool is_ad = true]' /projects/phoenix/src/materials/ComputeVariableOrthotropicElasticityTensor.C:139:16:   required from here /projects/moose/framework/build/header_symlinks/RankFourTensor.h:544:26: error: cannot convert 'const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<64> >, true>' to 'double' in assignment 544 |     _vals[i] = copy._vals[i]; |                ~~~~~~~~~~^ |                          | |                          const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<64> >, true> \nI attempted to use Generic type variable declaration but perhaps I got something wrong?\nBelow are my computeQpElasticityTensor function and .H file:\ntemplate <bool is_ad>\nvoid\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::computeQpElasticityTensor()\n{\n  \n    _ortho_stiffness_components.resize(12);\n\n    GenericReal<is_ad> nu21 = (_nu12[_qp] * _E22[_qp]) / _E11[_qp];\n    GenericReal<is_ad> nu31 = (_nu13[_qp] * _E33[_qp]) / _E11[_qp] ;\n    GenericReal<is_ad> nu32 = (_nu23[_qp] * _E33[_qp]) / _E22[_qp] ;\n\n    _ortho_stiffness_components[0]  = _E11[_qp] ;\n    _ortho_stiffness_components[1]  = _E22[_qp] ;\n    _ortho_stiffness_components[2]  = _E33[_qp] ;\n    _ortho_stiffness_components[3]  = _G12[_qp] ;\n    _ortho_stiffness_components[4]  = _G23[_qp] ;\n    _ortho_stiffness_components[5]  = _G13[_qp] ;\n    _ortho_stiffness_components[6]  = nu21;\n    _ortho_stiffness_components[7]  = nu31; \n    _ortho_stiffness_components[8]  = nu32;\n    _ortho_stiffness_components[9]  = _nu12[_qp] ;\n    _ortho_stiffness_components[10]  = _nu13[_qp] ; \n    _ortho_stiffness_components[11]  = _nu23[_qp] ;\n\n\n    //input\tEa, Eb, Ec, Gab, Gbc, Gca, nuba, nuca, nucb, nuab, nuac, nubc\n    _ortho_Cijkl.fillFromInputVector(_ortho_stiffness_components,  GenericRankFourTensor<is_ad> :: orthotropic);\n\n    if(_read_prop_user_object)\n    {\n      _ortho_Cijkl.rotate(_rotation_matrix_from_file_old[_qp]);//use _old to allow use of initQpStatefulProperties to only read once\n    }\n    else\n    {\n      _ortho_Cijkl.rotate(_rotation_matrix);//_rotation_matrix intialized a identity, can probably avoid rotation if not defined as a oarameter\n    }\n    // Assign elasticity tensor at a given quad point\n    _elasticity_tensor[_qp] = _ortho_Cijkl;//used in material/ComputeLinearElasticStress.C\n\n    \n\n}\n\ntemplate class ComputeVariableOrthotropicElasticityTensorTempl<false>;\ntemplate class ComputeVariableOrthotropicElasticityTensorTempl<true>;\n\n\n`\nprotected:\n  virtual void initialSetup() override;\n  virtual void initQpStatefulProperties() override;\n  virtual void computeQpElasticityTensor() override;\n\n  \n  /// vector to store the stiffness values for populating matrix\n  std::vector<GenericReal<is_ad>> _ortho_stiffness_components ; \n  /// matrix to store the stiffness values\n  GenericRankFourTensor<is_ad>  _ortho_Cijkl ;\n\n  /// Material defining the Modulli\n  const GenericMaterialProperty<Real, is_ad>& _E11;\n  const GenericMaterialProperty<Real, is_ad>& _E22;\n  const GenericMaterialProperty<Real, is_ad>& _E33;\n  const GenericMaterialProperty<Real, is_ad>& _G12;\n  const GenericMaterialProperty<Real, is_ad>& _G13;\n  const GenericMaterialProperty<Real, is_ad>& _G23;\n  const GenericMaterialProperty<Real, is_ad>& _nu12;\n  const GenericMaterialProperty<Real, is_ad>& _nu13;\n  const GenericMaterialProperty<Real, is_ad>& _nu23;\n  \n  \n  /// number of variables the moduli depend on\n  const unsigned int _num_args;\n\n  ///Element property read user object used to read in Euler angles\n  const PropertyReadFile * const _read_prop_user_object;\n\n  /// rotation Matrix Read in from file\n  GenericMaterialProperty<RankTwoTensor, is_ad> & _rotation_matrix_from_file;\n  const GenericMaterialProperty<RankTwoTensor, is_ad> & _rotation_matrix_from_file_old;\n\n};\ntypedef ComputeVariableOrthotropicElasticityTensorTempl ComputeVariableOrthotropicElasticityTensor;\ntypedef ComputeVariableOrthotropicElasticityTensorTempl ADComputeVariableOrthotropicElasticityTensor;\n`",
          "url": "https://github.com/idaholab/moose/discussions/27463",
          "updatedAt": "2024-04-25T23:54:53Z",
          "publishedAt": "2024-04-24T17:31:39Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe compiler is preventing you from losing the AD information by converting to 'double' from an 'ADReal'\ncannot convert 'const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<64> >, true>' to 'double'\n\nif you really mean to do that (it can be fair sometimes) then use MetaPhysicL::raw_value( on the number to turn it from AD to double\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27463#discussioncomment-9230763",
                  "updatedAt": "2024-04-25T23:54:53Z",
                  "publishedAt": "2024-04-25T23:54:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "vs code missing autocompletion",
          "author": {
            "login": "mcacace"
          },
          "bodyText": "Dear all,\nafter upgrading the moose-language extension to the latest version, I lost the autocompletion functionalities (at least for moose style input files).\nSome debugging helped me find this error\n\n[Error - 9:41:35 AM] Client MOOSE Language Server: connection to server is erroring.\nHeader must provide a Content-Length property.\n\nHowever, I am not sure how to solve it.\nBefore, I managed to get it running by downgrading the version of the extension, so now it also throws an error.\nHope anyone could help.\nThanks,\nmauro",
          "url": "https://github.com/idaholab/moose/discussions/27450",
          "updatedAt": "2024-04-25T21:35:11Z",
          "publishedAt": "2024-04-23T07:52:49Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mcacace"
                  },
                  "bodyText": "Sorry, but somehow copy and paste did not work properly. This is the full error message\n\n{\"\\n\\n*** warning, this code is deprecated and will be removed in future versions\":\"Please update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'. \\nStack frames: 6\\n0: libMesh::print_trace(std::ostream&)\\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits >, char const (&) [136]>(libMesh::BasicOStreamProxy<char, std::char_traits >&, bool, bool, char const (&) [136])\\n2: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, int, char**, int)\\n3: main\\n4: __libc_start_main\\n5: /home/mauro/projects/golem_gitlab/golem-opt(+0x33ef) [0x560f515f13ef]\\n\\nContent-Length: 286\"}\nShutting down server.\n[Error - 9:41:35 AM] Stopping server failed\nError: Client is not running and can't be stopped. It's current state is: starting\nat Ed.shutdown (/home/mauro/.vscode/extensions/danielschwen.moose-language-support-1.1.2/out/main.js:41:8468)\nat Ed.stop (/home/mauro/.vscode/extensions/danielschwen.moose-language-support-1.1.2/out/main.js:41:8047)\nat Ed.stop (/home/mauro/.vscode/extensions/danielschwen.moose-language-support-1.1.2/out/main.js:44:38372)\nat Ed.handleConnectionError (/home/mauro/.vscode/extensions/danielschwen.moose-language-support-1.1.2/out/main.js:43:63)\nat process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9197751",
                  "updatedAt": "2024-04-23T07:55:28Z",
                  "publishedAt": "2024-04-23T07:55:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "mcacace"
                  },
                  "bodyText": "me again, sorry... I think I solved the issue, by updating the main.C, though I unsure if I am doing it right, and if this was really the problem (parsing?!)\nold syntax:\nMooseInit init(argc, argv);\nGolemApp::registerApps();\nstd::shared_ptr<MooseApp> app = AppFactory::createAppShared(\"GolemApp\", argc, argv);\napp->run();\nnew syntax:\nMoose::main<GolemApp>(argc, argv);",
                  "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9200989",
                  "updatedAt": "2024-04-23T13:15:18Z",
                  "publishedAt": "2024-04-23T13:15:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nthis looks right",
                          "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9203127",
                          "updatedAt": "2024-04-23T16:18:41Z",
                          "publishedAt": "2024-04-23T16:18:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "brandonlangley"
                          },
                          "bodyText": "@mcacace -\nThis issue with deprecated code killing the VS Code extension was also reported yesterday, and I am in the process of fixing it.\nThe use of deprecated features is currently emitting a warning that breaks the extension integration when it should be ignored.\nSo if your update does not fully address the issue, then a new MOOSE should be available in the next couple of days fixing this.",
                          "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9203822",
                          "updatedAt": "2024-04-23T17:28:39Z",
                          "publishedAt": "2024-04-23T17:28:39Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mcacace"
                          },
                          "bodyText": "@GiudGiud thanks! And, @brandonlangley that's good news. Will wait for the next release, and I'll close the issue.",
                          "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9204091",
                          "updatedAt": "2024-04-23T17:59:17Z",
                          "publishedAt": "2024-04-23T17:59:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "brandonlangley"
                          },
                          "bodyText": "@mcacace -\nJust FYI, a fix for this issue was merged into MOOSE yesterday and has already made it to the devel and master branches.\nSo deprecated warning messages should no longer kill the VS Code extension if your MOOSE contains this commit: 6bb1d92",
                          "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9227989",
                          "updatedAt": "2024-04-25T17:29:26Z",
                          "publishedAt": "2024-04-25T17:29:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mcacace"
                          },
                          "bodyText": "Excellent (as always). Thanks for reporting @brandonlangley",
                          "url": "https://github.com/idaholab/moose/discussions/27450#discussioncomment-9229851",
                          "updatedAt": "2024-04-25T21:35:12Z",
                          "publishedAt": "2024-04-25T21:35:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue of using non-uniform mesh in THM",
          "author": {
            "login": "SomnusYu"
          },
          "bodyText": "Hi all,\nI would like to use non-uniform mesh in the pipe component. The input file is shown below:\npipe_with_non_uniform_mesh.txt\nI find there's an abrupt change in pressure at the junction.\n\nHow to fix this problem? Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/27435",
          "updatedAt": "2024-04-25T01:47:21Z",
          "publishedAt": "2024-04-22T03:22:29Z",
          "category": {
            "name": "Q&A Modules: Thermal Hydraulics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSome junctions will have a pressure loss. It s expected and it's physical. Mixing flows, changing directions etc come at a cost\n@joshuahansel will know whether this is the case for this input\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9190702",
                  "updatedAt": "2024-04-22T15:35:08Z",
                  "publishedAt": "2024-04-22T15:35:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "If you just want to have varying element sizes along a pipe, you don't need junctions. You can specify multiple values in the \"length\" and \"n_elems\" parameters for each of your subsections. Please try that to see if you still get the jump. Nothing in your input file suggests there should be a jump there (physically there should be no loss there). If you still get the jump, that suggests it related to the transition of the element sizes, not the presence of the junction component. In that case, I suspect the slope reconstruction to be at fault. Try setting \"rdg_slope_reconstruction = none\" and see if the jump persists. These aren't solutions, just troubleshooting.",
                  "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9191099",
                  "updatedAt": "2024-04-22T16:05:33Z",
                  "publishedAt": "2024-04-22T16:05:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Hi @joshuahansel,\nI try to use \"n_elems\" and \"length\" instead of the junction component. Also, I try to use \"rdg_slope_reconstruction = none\".\npipe_with_non_uniform_mesh.txt\nBut this problem still exists.",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9195006",
                          "updatedAt": "2024-04-23T01:05:47Z",
                          "publishedAt": "2024-04-23T01:05:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "I think the problem is we use flux to calculate the connection point rather than the nodal value. So we must refine the mesh as much as possible. The question is if we can use the non-refined mesh to do this. Using the volumeJunction component to offset this impact? I'm not sure.",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9195064",
                          "updatedAt": "2024-04-23T01:15:58Z",
                          "publishedAt": "2024-04-23T01:15:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "I tried \"rdg_slope_reconstruction = FULL\", and it appears to resolve the issue. This means that the jump is an artifact of spatial discretization error. We've seen this kind of behavior before.",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9204269",
                          "updatedAt": "2024-04-23T18:22:32Z",
                          "publishedAt": "2024-04-23T18:22:32Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks! \u201crdg_slope_reconstruction = FULL\u201d works very well!",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9206866",
                          "updatedAt": "2024-04-24T01:04:03Z",
                          "publishedAt": "2024-04-24T01:04:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Hi @joshuahansel,\nSometimes I need to use other slop methods (FULL may not converge), what should I do in this case?",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9214243",
                          "updatedAt": "2024-04-24T14:24:36Z",
                          "publishedAt": "2024-04-24T14:24:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "You can try the other methods. If nothing else works, I think your only option is just to refine your mesh with NONE.",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9216014",
                          "updatedAt": "2024-04-24T16:42:58Z",
                          "publishedAt": "2024-04-24T16:42:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/27435#discussioncomment-9219613",
                          "updatedAt": "2024-04-25T01:47:17Z",
                          "publishedAt": "2024-04-25T01:47:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Modeling a Curved Composite; Spatially Varying Orientation Field",
          "author": {
            "login": "marc1russell"
          },
          "bodyText": "It seems possible to define orientations for entire blocks, but is there functionality to define an orientation field and enable orientation to vary element to element? Application could be modeling an orthotopic material with a complex geometry or a grain-microstructure.",
          "url": "https://github.com/idaholab/moose/discussions/27104",
          "updatedAt": "2024-04-24T21:32:41Z",
          "publishedAt": "2024-03-15T18:44:42Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@dschwen @jiangwen84",
                  "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-8806425",
                  "updatedAt": "2024-03-15T18:51:25Z",
                  "publishedAt": "2024-03-15T18:51:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "m1russell"
                  },
                  "bodyText": "Perhaps a better question would be, what would be the best way to approach implementing such a functionality?",
                  "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-8987193",
                  "updatedAt": "2024-04-02T17:35:33Z",
                  "publishedAt": "2024-04-02T17:35:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "An auxiliary variable that is of a vector type, for example a constant monomial_vec should do the trick\nthere s work in the phase field module for orientations",
                          "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-8988764",
                          "updatedAt": "2024-04-02T19:52:55Z",
                          "publishedAt": "2024-04-02T19:52:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "m1russell"
                  },
                  "bodyText": "Thanks GiudGiud, that helped immensely.\nIt looks like the CP folks use PropertyReadFile within the ComputeElasticityTensorCP to read in Euler angles element by element from a txt file to rotate the element stiffness. Something similar should be possible for just a generic orthotopic material.",
                  "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-9075739",
                  "updatedAt": "2024-04-10T19:49:45Z",
                  "publishedAt": "2024-04-10T19:49:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok that makes sense. The PropertyReadFile will let you specify 'nearest' (voronoi-) partitions, which can map to grains.\nThere's also an option for specifying data on a per-element basis but then you have to use the ids so your workflow for generating data must be well integrated with your meshing workflow",
                          "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-9099184",
                          "updatedAt": "2024-04-12T18:29:16Z",
                          "publishedAt": "2024-04-12T18:29:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "m1russell"
                          },
                          "bodyText": "That worked. I was able to use PropertyReadFile and store the rotation as a StatefulProperty to avoid reading at every time-step. Many thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-9131437",
                          "updatedAt": "2024-04-16T15:02:47Z",
                          "publishedAt": "2024-04-16T15:02:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "m1russell"
                  },
                  "bodyText": "That worked. I was able to use PropertyReadFile and store the rotation as a StatefulProperty to avoid reading at every time-step. Many thanks.",
                  "url": "https://github.com/idaholab/moose/discussions/27104#discussioncomment-9218458",
                  "updatedAt": "2024-04-24T21:32:42Z",
                  "publishedAt": "2024-04-24T21:32:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Using postprocessor values in Materials System constructor",
          "author": {
            "login": "KamalnathOSU"
          },
          "bodyText": "Hi,\nI want to perform a phase-field simulation where I define my own free energy in a Materials class. I have to use the average alloy composition in the constructor of the materials class to parameterize my model. I use ElementAverageValue to calculate the average composition. I obtained the postprocessor value in the materials class using getPostprocessorValue(). However, when I use it in the constructor of the materials class, I only get zero.  It looks like the postprocessor evaluation happens only after the constructor of the materials class.\nEven in the input script, I specified, execute_on='INITIAL TIMESTEP_END', but it still does not help. How do fix this problem ?\n[Postprocessors]\n        [./x1_avg]\n                type = ElementAverageValue\n                execute_on = 'INITIAL TIMESTEP_END'\n                variable = X1\n        [../]\n        [./x2_avg]\n                type = ElementAverageValue\n                execute_on = 'INITIAL TIMESTEP_END'\n                variable = X2\n        [../]\n        [./TK_avg]\n                type = ElementAverageValue\n                execute_on = 'INITIAL TIMESTEP_END'\n                variable = TK\n        [../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27464",
          "updatedAt": "2024-04-24T20:56:19Z",
          "publishedAt": "2024-04-24T18:57:05Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can use Debug/show_actions to see when materials are being created.\nIt is much too early for a postprocessor to have been executed.\nThe solution is for you to use that postprocessor value later.\nIf you are capturing a reference (with &) you can retrieve the reference to the value that WILL be computed in the constructor.\nBut then do not use it until later on, during the initalization of the material for example\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27464#discussioncomment-9218230",
                  "updatedAt": "2024-04-24T20:56:19Z",
                  "publishedAt": "2024-04-24T20:56:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to use moose-based app2 in moose-based app1?",
          "author": {
            "login": "SomnusYu"
          },
          "bodyText": "Hi all,\nI  have developed two moose-based applications. Now, I would like to use the source code app2 (also run cases of app2) in app1, just like using modules of moose in app1. How to modify the Makefile of app1? Both app1 and app2 are in projects dir.\nI tried to modify the makefile of app1, but it doesn't work.\nMakefile.txt\nCould anyone kindly help me? Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/27460",
          "updatedAt": "2024-04-24T15:42:13Z",
          "publishedAt": "2024-04-24T12:56:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is an example of building two moose-based applications together in Cardinal, which can be built with many other apps\nhttps://github.com/neams-th-coe/cardinal/blob/devel/Makefile\nIt does come by modifying the makefile, but not just that. Also the src/base/...App.C file\nAnother option is to avoid building them together, but use dynamic loading instead\nhttps://mooseframework.inl.gov/source/actions/DynamicObjectRegistrationAction.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27460#discussioncomment-9215032",
                  "updatedAt": "2024-04-24T15:19:13Z",
                  "publishedAt": "2024-04-24T15:19:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/27460#discussioncomment-9215342",
                          "updatedAt": "2024-04-24T15:42:11Z",
                          "publishedAt": "2024-04-24T15:42:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "On the Coupling Method of Using Moose as an Interface",
          "author": {
            "login": "lvkas521424"
          },
          "bodyText": "Hello everyone, as a beginner user and learner of MOOSE, I would like to use MOOSE to provide interfaces to couple two programs with certain computing functions together. Do you have any ready-made cases for me to visit and learn? I cannot find enough tutorials to assist me in learning this knowledge, so I am very confused about how to execute them. Thank you all.\nJiahuilv",
          "url": "https://github.com/idaholab/moose/discussions/27458",
          "updatedAt": "2024-04-24T15:37:29Z",
          "publishedAt": "2024-04-24T08:17:16Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCardinal is an example of an application that compiles external program together with MOOSE\nhttps://github.com/neams-th-coe/cardinal\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27458#discussioncomment-9215280",
                  "updatedAt": "2024-04-24T15:37:30Z",
                  "publishedAt": "2024-04-24T15:37:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}