{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNi0yMlQyMTowNTo1MS0wNTowMM4AUTLY"
    },
    "edges": [
      {
        "node": {
          "title": "Difference in values between processors",
          "author": {
            "login": "lloyd-5731"
          },
          "bodyText": "Hi there,\nI am looking at my value of temperature, calculated from a custom kernel, and is supposed to be homogeneous across the medium.\nThe function is only defined with respect to time.\nThe value of the temperature in the output file however has a region which has a lower temperature than the rest of the object.\nThe region that is causing the issue is being calculated by 7 of the 24 processors used (checked using ProcessorIDAux), and the processor ID is overlay with the temperature function, and the boundaries of the regions of temperature line up perfectly with that of the processors. Figure attached, see anomalous region top left.\nIf I define the parallel_type = DISTRIBUTED this issue seems to go away.\nThe issue only happens when I am using more than 8 processors, and appears to get worse with the more compute used.\nDoes anyone have an idea why an homogeneous value is varying depending on which processor is used?\nIs this a known issue already?\nI know I could just leave parallel_type = DISTRIBUTED, but id like to understand the issue for the future.\nThanks for your help,\nLloyd",
          "url": "https://github.com/idaholab/moose/discussions/22478",
          "updatedAt": "2023-06-24T19:54:46Z",
          "publishedAt": "2022-10-24T13:59:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhy isotropic? There's no direction to temperature. Do you mean homogeneous / constant?\nWhat is this figure showing?\nIs temperature a nonlinear variable or an auxiliary variable?\nCan you share your input file?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3952100",
                  "updatedAt": "2022-10-24T15:05:35Z",
                  "publishedAt": "2022-10-24T15:05:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I'm pretty sure this is not due to PorousFlow , as i can't see why the PorousFlow stuff would change the temperature.  Can you change T to be an AuxVariable set by a FunctionAux ?  That may allow easier debugging",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3954830",
                  "updatedAt": "2022-10-24T20:57:44Z",
                  "publishedAt": "2022-10-24T20:57:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "I have run some more models and this is happening with as low as 5 cores. Regions calculated by certain processors have a different value to the rest. It appears the more cores the greater the magnitude of this effect.",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3957976",
                  "updatedAt": "2022-10-25T08:03:02Z",
                  "publishedAt": "2022-10-25T08:03:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "Hello Guillaume and Andy,\nI mean that the temperature is constant across all space at the same time.\nThe images attached show the temperature value varying between processors when it should be constant at the same time step.\nI have completely stripped back my code to narrow down the issue and it appears the issue lies in the calculation from my custom kernel.\nHere is my stripped back input file to find the source of the issue:\n[Mesh]\n    [plate]\n        type = GeneratedMeshGenerator\n        dim = 2\n        xmax = 0.8\n        nx = 120\n        ymax = 0.8\n        ny = 120\n    []\n  \n[]\n\n[Variables]\n    [T]\n        initial_condition = 293\n    []\n[]\n\n[Kernels]\n    [T_func]\n        type = ADFunctionVariable\n        variable = T\n        function = temp_func\n    []\n[]\n[Functions]\n    [temp_func]\n      type = ParsedFunction  # YOUR TEMP FUNC HERE\n      value = '298 + 202*(1 - exp(-t/80))'\n    []\n[]\n[Preconditioning]\n    [smp]\n        type = SMP\n        full = true\n        petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n        petsc_options_value = ' lu       mumps'\n    []\n[]\n\n[Executioner]\n    type = Transient\n    solve_type = 'NEWTON'\n    # dt = 0.2\n    end_time = 400\n    [TimeStepper]\n        type = SolutionTimeAdaptiveDT\n        dt = 0.5\n    []\n\n    automatic_scaling = true\n    nl_abs_tol = 2e-9\n[]\n\n[Outputs]\n    exodus = true\n    print_linear_residuals = false\n    []\n[]\n\nHence, the issue must be within the ADFunctionVariable kernel.\nFind the src code for ADFunctionVariable here:\nHEADER\n#pragma once\n\n#include \"ADKernelValue.h\"\n\n// class ADFunctionVariable;\nclass Function;\n\n\nclass ADFunctionVariable : public ADKernelValue\n{\npublic:\n  static InputParameters validParams();\n  ADFunctionVariable(const InputParameters & parameters);\n\nprotected:\n  virtual ADReal precomputeQpResidual() override;\n  const Function & _f;\n};\n\nC CODE\n// Kernel to set a variable equal to a function of space and time\n// (Variable should be h if used to drive mould height)\n\n#include \"ADFunctionVariable.h\"\n#include \"Function.h\"\n\nregisterMooseObject(\"MyApp\", ADFunctionVariable);\n\nInputParameters\nADFunctionVariable::validParams()\n{\n  InputParameters params = ADKernelValue::validParams();\n  params.addClassDescription(\"Sets the variable equal to a specified function (of space and time)\");\n  params.addParam<FunctionName>(\"function\", \"The function\");\n  return params;\n}\n\nADFunctionVariable::ADFunctionVariable(const InputParameters & parameters)\n  : ADKernelValue(parameters), _f(getFunction(\"function\"))\n{\n}\n\nADReal\nADFunctionVariable::precomputeQpResidual()\n{\n  return _u[_qp] - _f.value(_t, _q_point[_qp]);\n}\n\nTemperature value:\n\n^^^ This should all be one value and hence the same colour\nProcessor ID:\n\nThanks for the help!",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3958563",
                  "updatedAt": "2022-10-25T11:54:35Z",
                  "publishedAt": "2022-10-25T09:09:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "By the way, i wonder whether your Function should be an ADParsedFunction?  In your case it doesn't matter, but perhaps it's clearer for future readers that in principle it could depend on some Variables.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3959656",
                          "updatedAt": "2022-10-25T11:35:30Z",
                          "publishedAt": "2022-10-25T11:35:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Yes I think it is the ADParsedFunction, good spot. I have changed it locally and I am still getting the same incorrect results unfortunately.\nThanks Andy",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3959824",
                          "updatedAt": "2022-10-25T11:56:59Z",
                          "publishedAt": "2022-10-25T11:56:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what's your convergence history?\ncan you force more non linear iterations using nl_forced_its\nby the way, if T is meant to just be equal to this Function, then the way to do this is to use a FunctionAux and have T be an auxiliary variable.\nIf not, and it's just like this because you made a MWE, then it's ok that way.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3960056",
                          "updatedAt": "2022-10-25T12:26:44Z",
                          "publishedAt": "2022-10-25T12:26:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Yes this is currently a MWE of the situation as T will be changed later.\nnl_forced_its causes issues due to floating point error:\n\nTime Step 1, time = 0.25, dt = 0.25\n 0 Nonlinear |R| = 2.990296e-02\n 1 Nonlinear |R| = 2.970512e-16\n 2 Nonlinear |R| = 5.749818e-17\n 3 Nonlinear |R| = 5.718915e-17\n 4 Nonlinear |R| = 5.707936e-17\n 5 Nonlinear |R| = 5.705842e-17\nNonlinear solve did not converge due to DIVERGED_LOCAL_MIN iterations 5\n Solve Did NOT Converge!\nAborting as solve did not converge\nSolve failed... cutting timestep\n\nI have also tried having nl_abs_tol = 1e-16 (just larger than value from floating point) and it outputs:\nTime Step 24, time = 44.2487, dt = 4.47715\n 0 Nonlinear |R| = 3.551778e-02\n 1 Nonlinear |R| = 3.319341e-16\n Solve Converged!\n\nHowever the output still exhibits the strange behaviour, with large variation in temperature (~1e17 times bigger than the abs tol)\nAdditional points:\n\nNot all numbers of cores have issues, e.g 11 cores causes issues, but 12 cores and its fine.\nThe strange behaviour occurs after a certain time step, consistent to that number of cores when run again with the same tolerance, but varies when using a different number of cores or a different tolerance.\n\nPlot on the left is T plotted along the diagonal, on the right is T over the whole plate\nTime step 89:\n\nTime step 90:",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3960473",
                          "updatedAt": "2022-10-25T13:19:44Z",
                          "publishedAt": "2022-10-25T13:17:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this looks like a solver issue.\nCan you turn off the line search with line_search = 'none'\nand keep two forced non linear iterations",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3960488",
                          "updatedAt": "2022-10-25T13:19:23Z",
                          "publishedAt": "2022-10-25T13:19:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "That seems to have fixed it.\nWhat wind you recommend going forward?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3960520",
                          "updatedAt": "2022-10-25T13:23:14Z",
                          "publishedAt": "2022-10-25T13:23:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "having parallel_type = distributed also seemed to solve the issue, is that related?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3960525",
                          "updatedAt": "2022-10-25T13:23:50Z",
                          "publishedAt": "2022-10-25T13:23:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Going forward you need to look at the residuals and make sure a false convergence is not being accepted.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3961200",
                          "updatedAt": "2022-10-25T14:36:35Z",
                          "publishedAt": "2022-10-25T14:36:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "These are the residuals for an example. The strange behaviour begins at time step 32. The residuals before and after this behaviour appear almost identical.\n\nTime Step 30, time = 82.247, dt = 7.93155\n 0 Nonlinear |R| = 3.999619e-02\n 1 Nonlinear |R| = 9.480531e-17\n Solve Converged!\n\nTime Step 31, time = 90.9717, dt = 8.7247\n 0 Nonlinear |R| = 3.964952e-02\n 1 Nonlinear |R| = 5.717617e-16\n Solve Converged!\n\nTime Step 32, time = 100.569, dt = 9.59717\n 0 Nonlinear |R| = 3.521614e-02\n 1 Nonlinear |R| = 1.230550e-16\n Solve Converged!\n\nTime Step 33, time = 111.126, dt = 10.5569\n 0 Nonlinear |R| = 3.174585e-02\n 1 Nonlinear |R| = 3.550751e-16\n Solve Converged!\n\nTime Step 34, time = 122.738, dt = 11.6126\n 0 Nonlinear |R| = 3.097601e-02\n 1 Nonlinear |R| = 3.207153e-16\n Solve Converged!\n\nI do not understand how I am meant to spot the false convergence with these.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3961316",
                          "updatedAt": "2022-10-25T14:48:45Z",
                          "publishedAt": "2022-10-25T14:47:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "What change does line_search = 'none' make to the solve and why would that fix the issue?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3961339",
                          "updatedAt": "2022-10-25T14:49:51Z",
                          "publishedAt": "2022-10-25T14:49:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "I have just printed the value of the function in the .C file to the consol.\nThe value of the function output is correct and consistent across all qps even when the outputs to exodus, as seen in the post processor are not.\ni.e value of function (which is correct) =/= value at post processor for all qp",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3982799",
                  "updatedAt": "2022-10-27T14:34:28Z",
                  "publishedAt": "2022-10-27T14:34:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you print from all ranks? you need to pass --keep-cout on the command line to do so",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3982805",
                          "updatedAt": "2022-10-27T14:35:19Z",
                          "publishedAt": "2022-10-27T14:35:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "when I add --keep-cout I can see that the value of the function is going wrong, and is sometimes different within a block where it should be constant",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3982947",
                          "updatedAt": "2022-10-27T14:51:38Z",
                          "publishedAt": "2022-10-27T14:51:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok all you need to do is avoid the ParsedFunction if you need to keep going.\nAre you using multiple nodes on these runs? Or just multiple CPUs on the same node?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983005",
                          "updatedAt": "2022-10-27T14:55:28Z",
                          "publishedAt": "2022-10-27T14:55:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Currently multiple cpus same node for this mwe, however I will be using multiple nodes in the future.\nI need to couple time dependence to a function... can this be done without ParsedFunction?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983028",
                          "updatedAt": "2022-10-27T14:58:17Z",
                          "publishedAt": "2022-10-27T14:58:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you can write your own function for that.\nThere's also a number of 1 or multi-D functions which will do time dependence if you set the (or one of the) axis to time.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983041",
                          "updatedAt": "2022-10-27T15:00:05Z",
                          "publishedAt": "2022-10-27T14:59:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "OK, thanks.\nIs this a local issue or is it a Moose issue?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983078",
                          "updatedAt": "2022-10-27T15:04:47Z",
                          "publishedAt": "2022-10-27T15:04:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Tagging our FParser expert @dschwen as the issue seems to be coming from ParsedMaterial. Perhaps removing .jitcache isn't enough? Check if there are files named tmp_* in the working directory.",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983166",
                          "updatedAt": "2022-10-27T15:15:47Z",
                          "publishedAt": "2022-10-27T15:15:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "@hugary1995  there is tmp_jit_* inside the .gitignore\nshould this be deleted?",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983232",
                          "updatedAt": "2022-10-27T15:24:20Z",
                          "publishedAt": "2022-10-27T15:24:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no the .gitignore is fine.\nthis makes sure we dont git add jit files by accident",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983270",
                          "updatedAt": "2022-10-27T15:28:34Z",
                          "publishedAt": "2022-10-27T15:28:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "OK, thought so",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-3983281",
                          "updatedAt": "2022-10-27T15:29:48Z",
                          "publishedAt": "2022-10-27T15:29:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "Ive run 3 different versions of Moose I have available on the cluster using 14 cores.\nDates of versions: 22/03/31, 22/05/17, 22/09/28 left to right\nIt looks fine in the march version, however by the may version the issue has occurred. (same input file in each case)",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-4047430",
                  "updatedAt": "2022-11-03T13:59:14Z",
                  "publishedAt": "2022-11-03T13:59:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I tried again on a linux platform with 1-180 processes with the FunctionAux and a ParsedFunction and could not reproduce this.\nCan you please run the diagnostic script in moose/scripts and we ll see if we can get a platform close to yours to reproduce this",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-4053122",
                          "updatedAt": "2022-11-04T03:30:26Z",
                          "publishedAt": "2022-11-04T03:30:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I'm looking forward to you two getting to the bottom of this!",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-4070639",
                          "updatedAt": "2022-11-06T20:41:49Z",
                          "publishedAt": "2022-11-06T20:41:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Hi Guillaume,\nI hope you had a good weekend.\nThe diagnostic file is attached. Some paths have been redacted with [] fro security purposes.\nThank you for your help.\nFri  4 Nov 10:08:27 UTC 2022\n\nSystem Arch: CentOS Linux release 7.9.2009 (Core)\n\nMOOSE Package Version: Custom Build\n\nCPU Count: 24\n\nMemory Free: 124754.852 MB\n\nVariable `which $CC` check:\n/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/bin/mpicc\n\n$CC --version:\ngcc (GCC) 11.2.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nMPICC:\nwhich mpicc:\n\t/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/bin/mpicc\nmpicc -show:\n\tgcc -I/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/include -pthread -Wl,-rpath -Wl,/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib -Wl,--enable-new-dtags -L/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib -lmpi\n\nCOMPILER gcc:\ngcc (GCC) 11.2.0\nCopyright (C) 2021 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nPython:\n\t/usr/bin/python\n\tPython 2.7.5\n\nMODULES:\nCurrently Loaded Modulefiles:\n  1) cudatoolkit/10.0\n  2) gcc/11.2.0\n  3) openmpi/4.1.0-gcc11.2-cuda10.0\n  4) /[]/[]/[]/[]/[]]/moose-220928/[]/modulefile-[]\n\nPETSc configure:\nstatic const char *petscconfigureoptions = \"--download-hypre=1 --with-shared-libraries=1 --download-hdf5=1 --download-hdf5-fortran-bindings=0   --with-debugging=no --download-fblaslapack=1 --download-metis=1 --download-ptscotch=1 --download-parmetis=1 --download-superlu_dist=1 --download-mumps=1 --download-strumpack=1 --download-scalapack=1 --download-slepc=1 --with-mpi=1 --with-openmp=1 --with-cxx-dialect=C++11 --with-fortran-bindings=0 --with-sowing=0 --with-64-bit-indices --prefix=/[]/[]/[]/[]/moose-220928/petsc --prefix=/[]/[]/[]/[]/moose-220928/petsc\";\n\nPETSc linked libraries:\n\tlinux-vdso.so.1 =>  (0x00007ffef13da000)\n\tlibHYPRE-2.23.0.so => /[]/[]/[]/[]/moose-220928/petsc/lib/libHYPRE-2.23.0.so (0x00007f3aadb9d000)\n\tlibstrumpack.so => /[]/[]/[]/[]/moose-220928/petsc/lib/libstrumpack.so (0x00007f3aad0d6000)\n\tlibsuperlu_dist.so.7 => /[]/[]/[]/[]/moose-220928/petsc/lib/libsuperlu_dist.so.7 (0x00007f3aacdd6000)\n\tlibhdf5_hl.so.200 => /[]/[]/[]/[]/moose-220928/petsc/lib/libhdf5_hl.so.200 (0x00007f3aacbb3000)\n\tlibhdf5.so.200 => /[]/[]/[]/[]/moose-220928/petsc/lib/libhdf5.so.200 (0x00007f3aac53b000)\n\tlibparmetis.so => /[]/[]/[]/[]/moose-220928/petsc/lib/libparmetis.so (0x00007f3aac2fb000)\n\tlibmetis.so => /[]/[]/[]/[]/moose-220928/petsc/lib/libmetis.so (0x00007f3aac09a000)\n\tlibm.so.6 => /usr/lib64/libm.so.6 (0x00007f3aabd98000)\n\tlibX11.so.6 => /usr/lib64/libX11.so.6 (0x00007f3aaba5a000)\n\tlibstdc++.so.6 => /[]/[]/compilers/gcc-11.2.0/lib64/libstdc++.so.6 (0x00007f3aab654000)\n\tlibdl.so.2 => /usr/lib64/libdl.so.2 (0x00007f3aab450000)\n\tlibmpi_usempif08.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libmpi_usempif08.so.40 (0x00007f3aab212000)\n\tlibmpi_usempi_ignore_tkr.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libmpi_usempi_ignore_tkr.so.40 (0x00007f3aab004000)\n\tlibmpi_mpifh.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libmpi_mpifh.so.40 (0x00007f3aaada1000)\n\tlibmpi.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libmpi.so.40 (0x00007f3aaaa79000)\n\tlibgfortran.so.5 => /[]/[]/compilers/gcc-11.2.0/lib64/libgfortran.so.5 (0x00007f3aaa5d2000)\n\tlibgcc_s.so.1 => /[]/[]/compilers/gcc-11.2.0/lib64/libgcc_s.so.1 (0x00007f3aaa3ba000)\n\tlibquadmath.so.0 => /[]/[]/compilers/gcc-11.2.0/lib64/libquadmath.so.0 (0x00007f3aaa173000)\n\tlibpthread.so.0 => /usr/lib64/libpthread.so.0 (0x00007f3aa9f57000)\n\tlibrt.so.1 => /usr/lib64/librt.so.1 (0x00007f3aa9d4f000)\n\tlibgomp.so.1 => /[]/[]/compilers/gcc-11.2.0/lib64/libgomp.so.1 (0x00007f3aa9b0e000)\n\tlibc.so.6 => /usr/lib64/libc.so.6 (0x00007f3aa9740000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f3aafb3a000)\n\tlibxcb.so.1 => /usr/lib64/libxcb.so.1 (0x00007f3aa9518000)\n\tlibopen-rte.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libopen-rte.so.40 (0x00007f3aa925f000)\n\tlibopen-pal.so.40 => /[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib/libopen-pal.so.40 (0x00007f3aa8f51000)\n\tlibudev.so.1 => /usr/lib64/libudev.so.1 (0x00007f3aa8d3b000)\n\tlibpciaccess.so.0 => /usr/lib64/libpciaccess.so.0 (0x00007f3aa8b31000)\n\tlibutil.so.1 => /usr/lib64/libutil.so.1 (0x00007f3aa892e000)\n\tlibz.so.1 => /usr/lib64/libz.so.1 (0x00007f3aa8718000)\n\tlibXau.so.6 => /usr/lib64/libXau.so.6 (0x00007f3aa8514000)\n\tlibcap.so.2 => /usr/lib64/libcap.so.2 (0x00007f3aa830f000)\n\tlibdw.so.1 => /usr/lib64/libdw.so.1 (0x00007f3aa80be000)\n\tlibattr.so.1 => /usr/lib64/libattr.so.1 (0x00007f3aa7eb9000)\n\tlibelf.so.1 => /usr/lib64/libelf.so.1 (0x00007f3aa7ca1000)\n\tliblzma.so.5 => /usr/lib64/liblzma.so.5 (0x00007f3aa7a7b000)\n\tlibbz2.so.1 => /usr/lib64/libbz2.so.1 (0x00007f3aa786b000)\n\nENVIRONMENT:\nSLURM_NODELIST=[]-[]\nMODULE_VERSION_STACK=3.2.10\nSLURM_JOB_NAME=temp_test\nMANPATH=/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/share/man:/[]/[]/compilers/gcc-11.2.0/share/man:/opt/local/munge/default/share/man::/opt/local/slurm/default/share/man:\nGNU_VERSION=gcc-11.2.0\nXDG_SESSION_ID=[]\nSLURMD_NODENAME=[]-[]\nSLURM_TOPOLOGY_ADDR=spinesprod.ibsw3prod.[]-[]\nSLURM_NTASKS_PER_NODE=24\nHOSTNAME=[]-[]\nTERM_PROGRAM=vscode\nSLURM_PRIO_PROCESS=0\nSLURM_NODE_ALIASES=(null)\nSHELL=/bin/bash\nTERM=xterm-256color\nSLURM_JOB_QOS=ondemand\nHISTSIZE=1000\nTMPDIR=/tmp\nSLURM_TOPOLOGY_ADDR_PATTERN=switch.switch.node\nSSH_CLIENT=[]\nTERM_PROGRAM_VERSION=1.72.2\nACE_SYSTEM_NAME=[]\nQTDIR=/usr/lib64/qt-3.3\nACE_SERVER_TYPE=service\nACE_HOST_NAME=ACE-HOST-NAME-UNKNOWN\nQTINC=/usr/lib64/qt-3.3/include\nQT_GRAPHICSSYSTEM_CHECKED=1\nSLURM_NNODES=1\nUSER=[]\nLD_LIBRARY_PATH=/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/lib:/[]/[]/compilers/gcc-11.2.0/lib64:/opt/cray/cudatoolkit/10.0.130/lib64:/global/opt/cray/lib64:/usr/lib64:/global/opt/cray/lib64:/usr/lib64:/global/opt/cray/lib64:/usr/lib64:\nLS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:do=38;5;5:bd=48;5;232;38;5;11:cd=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:\nSLURM_JOBID=[]\nSLURM_NTASKS=24\nGCC_VERSION=gcc-11.2.0\nCCACHE_CPP2=\nACE_CLUSTER_NAME=\nSLURM_TASKS_PER_NODE=24\nMODULE_VERSION=3.2.10\nACE_SERVER_NAME=server-[]\nMAIL=/var/spool/mail/[]\nPATH=/[]/[]/cmake/cmake-3.22.1-linux-x86_64/bin:/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0/bin:/[]/[]/compilers/gcc-11.2.0/bin:/opt/cray/cudatoolkit/10.0.130/bin:/usr/lpp/mmfs/bin:/[]/[]/[]/[]/.vscode-server/bin/d045a5eda657f4d7b676dedbfa7aab8207f8a075/bin/remote-cli:/usr/lpp/mmfs/bin:/usr/lib64/qt-3.3/bin:/usr/lpp/mmfs/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/ibutils/bin:/opt/local/munge/default/bin:/opt/local/slurm/default-head/bin:/[]/[]/[]/[]/.local/bin:/[]/[]/[]/[]/bin:/[]/[]/[]/[]/.local/bin:/[]/[]/[]/[]/bin\nSLURM_WORKING_CLUSTER=[]:mgmt:[]\nSLURM_CONF=/global/opt/local/slurm/20.11.9v2/etc/sysconfig/slurm/slurm.conf\nSLURM_JOB_ID=[]\nSLURM_JOB_USER=[]\nPWD=/[]/[]/[]/[]/[]\nF90=mpif90\nLIBMESH_DIR=/[]/[]/[]/[]/moose-220928/libmesh\n_LMFILES_=/opt/modulefiles2/compilers/cudatoolkit/10.0:/opt/modulefiles2/compilers/gcc/11.2.0:/opt/modulefiles2/mpi/openmpi/4.1.0-gcc11.2-cuda10.0:/[]/[]/[]/[]/projects/moose-220928-[]/moose/modulefile-[]\nLANG=en_GB.utf8\nMODULEPATH=/opt/cray/craype/default/modulefiles:/opt/cray/modulefiles:/opt/modulefiles2/applications:/opt/modulefiles2/compilers:/opt/modulefiles2/mpi:/global/modules\nSLURM_JOB_UID=[]\nKDEDIRS=/usr\nLOADEDMODULES=cudatoolkit/10.0:gcc/11.2.0:openmpi/4.1.0-gcc11.2-cuda10.0:modulefile-[]\nSLURM_NODEID=0\nVSCODE_GIT_ASKPASS_EXTRA_ARGS=\nMOOSE_DIR=/[]/[]/[]/[]/projects/moose-220928-[]/moose\nSLURM_SUBMIT_DIR=/[]/[]/[]/[]/[]\nF77=mpif77\nSLURM_TASK_PID=21490\nSLURM_NPROCS=24\nSLURM_CPUS_ON_NODE=24\nSLURM_PROCID=0\nENVIRONMENT=BATCH\nHISTCONTROL=ignoredups\nCXX=mpicxx\nSLURM_JOB_NODELIST=[]-[]\nSHLVL=6\n[]=/[]/[]/[]/[]\nSLURM_LOCALID=0\nACE_HOST_ID=ACE-HOST-ID-UNKNOWN\nVSCODE_GIT_ASKPASS_MAIN=/[]/[]/[]/[]/.vscode-server/bin/d045a5eda657f4d7b676dedbfa7aab8207f8a075/extensions/git/dist/askpass-main.js\nSLURM_JOB_GID=4000\nSLURM_JOB_CPUS_PER_NODE=24\nSLURM_CLUSTER_NAME=[]\nSLURM_GTIDS=0\nSLURM_SUBMIT_HOST=[]\nFC=mpif90\nGCC_PATH=/[]/[]/compilers/gcc-11.2.0\nSLURM_JOB_PARTITION=standard\nLOGNAME=[]\nQTLIB=/usr/lib64/qt-3.3/lib\nCVS_RSH=ssh\nSLURM_JOB_ACCOUNT=[].[]\nXDG_DATA_DIRS=/[]/[]/[]/[]/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share\nSSH_CONNECTION=[]\nVSCODE_GIT_IPC_HANDLE=/run/user/4174/vscode-git-4940359da1.sock\nSLURM_JOB_NUM_NODES=1\nMODULES[]=/usr/Modules/3.2.10\nVSCODE_IPC_HOOK_CLI=/run/user/4174/vscode-ipc-dde97cf7-40bd-4f3e-b9bd-e3fa85c8d1e0.sock\nMPI_[]=/[]/[]/mpi/openmpi/4.1.0-gcc11.2.0\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nBROWSER=/[]/[]/[]/[]/.vscode-server/bin/d045a5eda657f4d7b676dedbfa7aab8207f8a075/bin/helpers/browser.sh\nGIT_ASKPASS=/[]/[]/[]/[]/.vscode-server/bin/d045a5eda657f4d7b676dedbfa7aab8207f8a075/extensions/git/dist/askpass.sh\nVSCODE_GIT_ASKPASS_NODE=/[]/[]/[]/[]/.vscode-server/bin/d045a5eda657f4d7b676dedbfa7aab8207f8a075/node\nINFOPATH=/[]/[]/compilers/gcc-11.2.0/share/info\nXDG_RUNTIME_DIR=/run/user/4174\nCC=mpicc\nQT_PLUGIN_PATH=/usr/lib64/kde4/plugins:/usr/lib/kde4/plugins\nACE_SERVER_ID=186\nPETSC_DIR=/[]/[]/[]/[]/moose-220928/petsc\nSLURM_MEM_PER_NODE=124000\nCOLORTERM=truecolor\nCCACHE_HASHDIR=\nBASH_FUNC_module()=() {  eval `/usr/Modules/$MODULE_VERSION/bin/modulecmd bash $*`\n}\n_=/usr/bin/env",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-4075095",
                          "updatedAt": "2022-11-07T10:26:19Z",
                          "publishedAt": "2022-11-07T10:26:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@milljm do you see anything off there?\nAlso do we have a machine that closely resembles this one?\nThe OP is hitting an issue I cant reproduce",
                          "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-4076269",
                          "updatedAt": "2022-11-07T13:10:07Z",
                          "publishedAt": "2022-11-07T13:10:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "The possibly final word on this is that there was an issue with JIT in parallel on some platforms\nIt ended up being fixed there\n#24208\nIf you still have you could try again to see if that fixed it",
                  "url": "https://github.com/idaholab/moose/discussions/22478#discussioncomment-6270659",
                  "updatedAt": "2023-06-24T19:54:45Z",
                  "publishedAt": "2023-06-24T19:54:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Stress free temperature",
          "author": {
            "login": "deepakbiitk"
          },
          "bodyText": "Hi all,\nIn  \"ComputeThermalExpansionEigenstrain\" Can we provide a function in stress free temperature? In most examples I saw, it takes an constant value?\nThanks,\nDeepak",
          "url": "https://github.com/idaholab/moose/discussions/24783",
          "updatedAt": "2023-06-24T19:39:48Z",
          "publishedAt": "2023-06-22T12:53:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to check the other strain models for functions.\nYou want a functions right? like a pre-determined function of space and time, not a variable\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24783#discussioncomment-6255115",
                  "updatedAt": "2023-06-22T18:40:46Z",
                  "publishedAt": "2023-06-22T18:40:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "deepakbiitk"
                          },
                          "bodyText": "Yes, I would like to input a function varying in space as stress_free_temperature instead of a constant value.\nDeepak",
                          "url": "https://github.com/idaholab/moose/discussions/24783#discussioncomment-6255142",
                          "updatedAt": "2023-06-22T18:43:55Z",
                          "publishedAt": "2023-06-22T18:43:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "The stress free temperature takes a variable.\n\nI would like to input a function varying in space as stress_free_temperature instead of a constant value.\n\nYou can define a spatially varying auxvariable using your function.",
                  "url": "https://github.com/idaholab/moose/discussions/24783#discussioncomment-6266170",
                  "updatedAt": "2023-06-23T21:20:41Z",
                  "publishedAt": "2023-06-23T21:20:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Use a FunctionAux for that\nhttps://mooseframework.inl.gov/source/auxkernels/FunctionAux.html",
                          "url": "https://github.com/idaholab/moose/discussions/24783#discussioncomment-6270593",
                          "updatedAt": "2023-06-24T19:39:47Z",
                          "publishedAt": "2023-06-24T19:39:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to define a 'Point' in MOOSE?",
          "author": {
            "login": "Minjiang-Zhu"
          },
          "bodyText": "Hi, I wonder how the \"Point\" class is defined in Moose. \"Point\" appears in \"\"FindValueOnLineMod.C\".",
          "url": "https://github.com/idaholab/moose/discussions/24815",
          "updatedAt": "2023-06-24T04:42:33Z",
          "publishedAt": "2023-06-24T04:12:23Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Minjiang-Zhu"
                  },
                  "bodyText": "One may define a point by:\nPoint p;\np(0) = 0; p(1) = 0; p(2) = 0;",
                  "url": "https://github.com/idaholab/moose/discussions/24815#discussioncomment-6267432",
                  "updatedAt": "2023-06-24T04:20:00Z",
                  "publishedAt": "2023-06-24T04:19:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease have a look at the doxygen for these questions:\nhttps://mooseframework.inl.gov/docs/doxygen/libmesh/classlibMesh_1_1Point.html\nthe constructors let you initialize the point as you create it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24815#discussioncomment-6267471",
                  "updatedAt": "2023-06-24T04:42:33Z",
                  "publishedAt": "2023-06-24T04:42:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Manipulating and Analyzing Output Values of  Vectors",
          "author": {
            "login": "sSajjad90"
          },
          "bodyText": "I am currently working on developing a code based on the material class to calculate the number density of clusters in three phases. In my code, I have three vectors of materials, and their sizes remain constant throughout the iterations. I have been exploring options to manipulate the values of these vectors using Vectorpostprocessor (VPP) or reporters, or any other alternative method available. However, it seems that the existing VPPs and reporters are designed for real values and not specifically for vector materials.\nI have attempted to adapt SamplerBase VPPs, such as LineMaterialRealSampler and LineValueSampler, and I have also tried creating a new code based on the existing base by utilizing references, objects, and pointers to access the vector values on the material-based code. Unfortunately, I have encountered errors throughout these attempts.\nNow, I am seeking suggestions or assistance on how to effectively manipulate the values of these vectors. It's important to note that only real vector values need to be manipulated, and the qp is not considered in this context.\nBelow, you can find a portion of the Unified.C code and an example input file for reference.\n[Material]\n...\n\n[./Unified_Calculation]\n    type = Unified\n    ...\n    ...\n    Rho_calc_T = 'Rho_calc_T'   //---> This is a vector of material, with a constant size (size=3000)\n    Rho_calc_TP = 'Rho_calc_TP'   //---> This is a vector of material, with a constant size (size=3000)\n    Rho_calc_TDP = 'Rho_calc_TDP'  //---> This is a vector of material, with a constant size (size=3000)\n  [../]\n[]\n\n....\na1_calc_TDP[_qp].resize(MaxMatSize);  //--> it has a constant size for all iteration, MaxMatSize = 3000\nrho_calc_TDP[_qp].assign(MaxMatSize, 0.0);\n....\nfor (size_t i = 0; i < Interpol_Size; i++) {\n    Alpha_Vals[phi3][i] = Alpha_Vector[phi3][i];\n    Beta_Vals[phi3][i] = Beta_Vector[phi3][i];\n    Rho_Old_Vals[phi3][i] = (*rho_calc_TDP_old)[_qp][i];\n  }\n\n  Thomas_Algorithm_Func(Alpha_Vals,Beta_Vals,Rho_Old_Vals,Del_Check,phi3);\n\n  for (size_t i = 2; i < Phase_Num; i++) {\n    for (size_t j = 0; j < (*Matrix_Size_prop_old)[_qp]; j++) {        //--> Max ( (*Matrix_Size_prop_old)[_qp]= 3000)\n      rho_calc_TDP[_qp][j] = Rho_out_Vector[phi3][j];\n....",
          "url": "https://github.com/idaholab/moose/discussions/24772",
          "updatedAt": "2023-06-23T20:52:12Z",
          "publishedAt": "2023-06-21T21:41:21Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nSo first, for context, are you using a single simulation to compute 3000 clusters?\nCould these simulations be separated numerically using multiapps?\nSecondly, are you working with vectors of material properties? Or a vector (really array, vector is size 3 only) material property?\nIt looks to me like the latter.\nFinally,\nthis doesnt look right\n    for (size_t j = 0; j < (*Matrix_Size_prop_old)[_qp]; j++) {        //--> Max ( (*Matrix_Size_prop_old)[_qp]= 3000)\n\ncould it be\n    for (size_t j = 0; j < (*Matrix_Size_prop_old)[_qp].size(); j++) {        //--> Max ( (*Matrix_Size_prop_old)[_qp]= 3000)\n\n?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6247591",
                  "updatedAt": "2023-06-22T02:54:12Z",
                  "publishedAt": "2023-06-22T02:54:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "Thank you for your consideration.\nRegarding the vectors, they represent the number densities of various sizes of different types of precipitates. (For example, j = 50 corresponds to the number density of the precipitate phi3 phase with a specific size of 5 nm, stored in Rho_out_Vector[phi3][j], \u00a0or j = 500 represents the number density of precipitates with other sizes, such as 93 nm.) These vectors are obtained for tracking the evolution of number densities for different sizes of precipitates over time in a transient simulation.\nRegarding the use of the multiapp, if there is a pre-existing transfer code designed for transferring these vectors within the simulation, it would be suitable for my needs (specifically for the next steps of my project).\nSince you mentioned that only vectors can be used, I employed other material properties calculated in the input file to compute these vectors, but these vectors of material properties are utilized to return results to the input file; there are no other computations involved in this simulation.\nThank you once again for your assistance.\nSajjad",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6252017",
                          "updatedAt": "2023-06-22T14:28:29Z",
                          "publishedAt": "2023-06-22T13:08:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "we do not have code to transfer array material properties, or maps right now.\nHowever it s not that difficult to write new transfers that are only changing the source of the data, as long as the target (a variable) is the same.\nso Rho_out_Vector[phi3][j] has two indexes, is the underlying data type a vector of vector?",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6255076",
                          "updatedAt": "2023-06-22T18:35:48Z",
                          "publishedAt": "2023-06-22T18:35:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "Yes. it is a vector of vector, but it would be possible to change it into three separate vectors instead,\nlike: Phi1_Rho_out_Vector[i], Phi2_Rho_out_Vector[i], and Phi3_Rho_out_Vector[i]",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6255171",
                          "updatedAt": "2023-06-22T18:47:26Z",
                          "publishedAt": "2023-06-22T18:47:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That might be easier, there's a tad more capability with array material properties than with arbitrary tensors/matrix.\nStill no transfer through.",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6255199",
                          "updatedAt": "2023-06-22T18:50:27Z",
                          "publishedAt": "2023-06-22T18:50:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "I'm still pondering how to tackle this issue. Any suggestions would be greatly appreciated.",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6265324",
                          "updatedAt": "2023-06-23T19:17:05Z",
                          "publishedAt": "2023-06-23T19:17:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "which issue in particular? the transfer/",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6265383",
                          "updatedAt": "2023-06-23T19:25:48Z",
                          "publishedAt": "2023-06-23T19:25:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "Sending a vector of real values to the vectorpostprocessor or transfer it through a multiapp.\nThanks in advance for your consideration,\nSajjad",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6265476",
                          "updatedAt": "2023-06-23T19:38:35Z",
                          "publishedAt": "2023-06-23T19:38:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you cant send to a vectorpostprocessor.\nYou can use a VectorPostprocessor to collect data from the simulation.\nHere's the full list of the ones you can use:\nhttps://mooseframework.inl.gov/syntax/VectorPostprocessors/index.html\nBut here the vectors are different at each location in space right? It s like a material property?",
                          "url": "https://github.com/idaholab/moose/discussions/24772#discussioncomment-6265966",
                          "updatedAt": "2023-06-23T20:52:13Z",
                          "publishedAt": "2023-06-23T20:52:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Multiple heat sources",
          "author": {
            "login": "FatimahDzr"
          },
          "bodyText": "I want to add two heat sources at a same time to my geometry. at top I have laser and from both right and left sides I wanna apply the electric field. So currently I'm able to separately apply the laser heat source and also the joule heating effect by electric field. but I don't know how can I combine both of them as a combined heat source in my problem. here is my kernels:\n# 1: thermal conduction\n# rou*cp*dT/dt=grad(K)*grad(T)+qdot\n[Kernels]\n  #grad(K)*grad(T)\n  [heat_conduction]\n    type = ADHeatConduction\n    variable = T\n  []\n  #rou*cp*dT/dt\n  [time_derivative]\n    type = ADHeatConductionTimeDerivative\n    variable = T\n  []\n  # 2: laser\n  #qdot\n  [heat_source1]\n    type = ADMatHeatSource\n    material_property = volumetric_heat\n    variable = T\n  []\n  # 3: electrical conduction\n  #qdot\n[heat_source2]\n  type = ADJouleHeatingSource\n  elec = phi\n  variable = T\n[]\n# grad(sigma*grad(phi))\n  [./electric]\n    type = ADHeatConduction\n    variable = phi\n    thermal_conductivity = electrical_conductivity\n  []\n[]\n\n\nand here is my error:\n Solve Did NOT Converge!\n  Finished Solving                                                                       [ 24.17 s] [    0 MB]\nAborting as solve did not converge\n\n\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!\n\n\nI would be grateful if someone help me with this issue that how can I combine two heat sources together.",
          "url": "https://github.com/idaholab/moose/discussions/24806",
          "updatedAt": "2023-06-23T20:50:51Z",
          "publishedAt": "2023-06-23T20:46:17Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nit s ok to have two kernels, once for each heat source.\nThe problem is likely that either:\n\nthe problem is ill posed for another reason\nthe numerical solver is failing to find the solution\n\nPlease see this page for more help\nhttps://mooseframework.inl.gov/application_usage/failed_solves.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24806#discussioncomment-6265956",
                  "updatedAt": "2023-06-23T20:50:51Z",
                  "publishedAt": "2023-06-23T20:50:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Convergence problem when pressure is applied to Power Law Creep Stress Update",
          "author": {
            "login": "rawbmlk"
          },
          "bodyText": "Hi, it seems that when I apply pressure to this model it never converges. I tried a BC with a pull function and it works fine ! The problem is no matter how small the pressure I apply (down to 10e-10) the code never converges. I tried using NEWTON solver and PJNFK but the problem is still persisting. I would appreciate some help on the matter. Here's the input file :\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  nx = 4\n  ny = 4\n  xmax = 0.002\n  ymax = 0.002\n[]\n\n[Modules/TensorMechanics/Master/All]\n  strain = FINITE\n  add_variables = true\n  generate_output = 'strain_xx strain_yy strain_xy hydrostatic_stress vonmises_stress'\n  use_automatic_differentiation = true\n[]\n\n\n\n[Materials]\n  [./elasticity_tensor]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 1.5e9\n    poissons_ratio = 0.3\n  [../]\n  [./stress]\n    type = ADComputeMultipleInelasticStress\n    inelastic_models = lps\n    outputs = all\n  [../]\n  [./porosity]\n    type = ADPorosityFromStrain\n    initial_porosity = 0.1\n    inelastic_strain = 'combined_inelastic_strain'\n    outputs = 'all'\n  [../]\n\n  [./lps]\n    type = ADViscoplasticityStressUpdate\n    coefficient = 'coef'\n    power = 1\n    outputs = all\n    relative_tolerance = 1e-11\n  [../]\n  [./coef]\n    type = ADParsedMaterial\n    property_name = coef\n    # Example of creep power law\n    expression = '1e-10 * exp(50/(831*230/273))'\n  [../]\n[]\n\n[BCs]\n\n  [./no_disp_y]\n    type = ADDirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0.0\n  [../]\n [Pressure/top]\n        function = -10*t\n        boundary = top\n        use_automatic_differentiation = true\n []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  nl_forced_its = 1\n  dt = 0.01\n  end_time = 0.02\n[]\n\n[Postprocessors]\n  [./disp_x]\n    type = SideAverageValue\n    variable = disp_x\n    boundary = right\n  [../]\n  [./disp_y]\n    type = SideAverageValue\n    variable = disp_y\n    boundary = top\n  [../]\n  [./avg_hydro]\n    type = ElementAverageValue\n    variable = hydrostatic_stress\n  [../]\n  [./avg_vonmises]\n    type = ElementAverageValue\n    variable = vonmises_stress\n  [../]\n  [./dt]\n    type = TimestepSize\n  [../]\n  [./num_lin]\n    type = NumLinearIterations\n    outputs = console\n  [../]\n  [./num_nonlin]\n    type = NumNonlinearIterations\n    outputs = console\n  [../]\n  [./eff_creep_strain]\n    type = ElementAverageValue\n    variable = effective_viscoplasticity\n  [../]\n  [./porosity]\n    type = ElementAverageValue\n    variable = porosity\n  [../]\n[]\n\n[Outputs]\n  csv = true\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24788",
          "updatedAt": "2023-06-23T19:54:57Z",
          "publishedAt": "2023-06-22T15:49:22Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "maxnezdyur"
                  },
                  "bodyText": "In your executioner block add the below. You may need to figure out if the tolerance is small enough but your initial residual is O(10E-6) so it can be hard for the problem to converge using the relative nonlinear tolerance.\n    line_search = none\n    nl_abs_tol = 1e-10",
                  "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6262733",
                  "updatedAt": "2023-06-23T14:12:16Z",
                  "publishedAt": "2023-06-23T14:12:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Isn't there a rigid body mode in the x direction or am I missing something?",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265059",
                          "updatedAt": "2023-06-23T18:33:22Z",
                          "publishedAt": "2023-06-23T18:33:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Surprisingly with NEWTON and LU, and the boundary condition below, I can still solve the problem with 4 NL iterations at most. I thought LU would error out with rigid body motion usually?\n  [Pressure/top]\n          function = -100000000*t\n          boundary = top\n          use_automatic_differentiation = true\n   []",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265149",
                          "updatedAt": "2023-06-23T18:48:46Z",
                          "publishedAt": "2023-06-23T18:48:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Here is the SVD.\nTime Step 3, time = 3, dt = 1\n 0 Nonlinear |R| = 1.125338e+05\n      SVD: condition number 9.765018807007e+16, 0 of 50 singular values are (nearly) zero\n      SVD: smallest singular values: 8.015809748862e-08 4.296085186771e-01 8.841792943216e-01 9.251711695231e-01 9.828649603605e-01\n      SVD: largest singular values : 4.737120284164e+09 4.971141105771e+09 5.753777049781e+09 6.405517032828e+09 7.827453295103e+09\n      0 Linear |R| = 1.125338e+05\n      1 Linear |R| = 3.822008e-09\n 1 Nonlinear |R| = 2.118477e+04\n      SVD: condition number 7.349182148520e+16, 0 of 50 singular values are (nearly) zero\n      SVD: smallest singular values: 1.217337964386e-07 4.297431547527e-01 9.113912447390e-01 9.453300175172e-01 9.878947071478e-01\n      SVD: largest singular values : 5.223881736778e+09 5.536066718381e+09 6.549010403885e+09 7.279625087391e+09 8.946438436582e+09\n      0 Linear |R| = 2.118477e+04\n      1 Linear |R| = 1.780353e-10\n 2 Nonlinear |R| = 1.249124e+02\n      SVD: condition number 5.515672788240e+16, 0 of 50 singular values are (nearly) zero\n      SVD: smallest singular values: 1.638671742714e-07 4.297631998497e-01 9.167011853691e-01 9.494280342796e-01 9.886369438150e-01\n      SVD: largest singular values : 5.270788384322e+09 5.585276011077e+09 6.614833781533e+09 7.351622519109e+09 9.038377140148e+09\n      0 Linear |R| = 1.249124e+02\n      1 Linear |R| = 1.678501e-12\n 3 Nonlinear |R| = 3.625652e-02\n      SVD: condition number 3.473845624473e+16, 0 of 50 singular values are (nearly) zero\n      SVD: smallest singular values: 2.602224034959e-07 4.297633452319e-01 9.167351095895e-01 9.494524523197e-01 9.886428861037e-01\n      SVD: largest singular values : 5.271470714551e+09 5.585977055070e+09 6.615793058602e+09 7.352673661924e+09 9.039724577741e+09\n      0 Linear |R| = 3.625652e-02\n      1 Linear |R| = 2.774180e-16\n 4 Nonlinear |R| = 8.928833e-10\nNonlinear solve converged due to CONVERGED_FNORM_RELATIVE iterations 4",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265214",
                          "updatedAt": "2023-06-23T18:57:55Z",
                          "publishedAt": "2023-06-23T18:57:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Max, that doesn't answer my question.",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265290",
                          "updatedAt": "2023-06-23T19:10:24Z",
                          "publishedAt": "2023-06-23T19:10:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "I think you're right and there is a rigid body mode in the x-direction.",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265578",
                          "updatedAt": "2023-06-23T19:53:40Z",
                          "publishedAt": "2023-06-23T19:53:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "Surprisingly with NEWTON and LU, and the boundary condition below, I can still solve the problem with 4 NL iterations at most. I thought LU would error out with rigid body motion usually?\n  [Pressure/top]\n          function = -100000000*t\n          boundary = top\n          use_automatic_differentiation = true\n   []\n\n\n\nLU can sometimes solve the problem with a rigid body motion, but it is always safe to eliminate the rigid body motion.\nThe condition number seems to be very high to me. Either due to a bad scaling or rigid body motion. I would be curious to see what the condition number would be if we fix a corner node's x displacement.",
                  "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265462",
                  "updatedAt": "2023-06-23T19:36:11Z",
                  "publishedAt": "2023-06-23T19:36:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Here is the SVD with a corner node pinned, its better.\nSVD: condition number 1.554839958706e+11, 0 of 50 singular values are (nearly) zero\n      SVD: smallest singular values: 5.024647228304e-02 3.661737136078e-01 4.302717290792e-01 8.874228434203e-01 9.396952353031e-01\n      SVD: largest singular values : 4.732704347840e+09 4.951337245824e+09 5.745195211805e+09 6.363980482796e+09 7.812522288970e+09",
                          "url": "https://github.com/idaholab/moose/discussions/24788#discussioncomment-6265587",
                          "updatedAt": "2023-06-23T19:54:57Z",
                          "publishedAt": "2023-06-23T19:54:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Installation tests failed",
          "author": {
            "login": "HemiaoZhang"
          },
          "bodyText": "Hi, I encountered error relating to pyhit package after installing MOOSE for Mac. After running the default tests on the installation page,\n(moose) DN0a225536:tests hemiaozhang$ cd ~/projects/moose/test\n(moose) DN0a225536:test hemiaozhang$ ./run_tests -j 6\nBuilding and linking hit...\nBuilding hit for python with python3-config\nmake[1]: `hit' is up to date.\nTraceback (most recent call last):\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 13, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 18, in <module>\n    import hit\nImportError: dlopen(/Users/hemiaozhang/projects/moose/python/pyhit/../../framework/contrib/hit/hit.so, 0x0002): symbol not found in flat namespace (_PyCMethod_New)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./run_tests\", line 6, in <module>\n    from TestHarness import TestHarness\n  File \"/Users/hemiaozhang/projects/moose/python/TestHarness/__init__.py\", line 15, in <module>\n    from .TestHarness import TestHarness\n  File \"/Users/hemiaozhang/projects/moose/python/TestHarness/TestHarness.py\", line 20, in <module>\n    from FactorySystem.Factory import Factory\n  File \"/Users/hemiaozhang/projects/moose/python/FactorySystem/__init__.py\", line 13, in <module>\n    from .Parser import Parser\n  File \"/Users/hemiaozhang/projects/moose/python/FactorySystem/Parser.py\", line 13, in <module>\n    import pyhit\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 22, in <module>\n    import hit\nImportError: dlopen(/Users/hemiaozhang/projects/moose/python/pyhit/../../framework/contrib/hit/hit.so, 0x0002): symbol not found in flat namespace (_PyCMethod_New)\n\nFollow a previous Q&A, I tried to add the python installed in mambaforge3/ folder to the pythonpath. But the same error persists.\n(moose) DN0a225536:test hemiaozhang$ which python\n/Users/hemiaozhang/mambaforge3/envs/moose/bin/python\n(moose) DN0a225536:test hemiaozhang$ python\nPython 3.10.8 | packaged by conda-forge | (main, Nov 22 2022, 08:25:13) [Clang 14.0.6 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys, os\n>>> exit()\n(moose) DN0a225536:test hemiaozhang$ which python\n/Users/hemiaozhang/mambaforge3/envs/moose/bin/python\n(moose) DN0a225536:test hemiaozhang$ python\nPython 3.10.8 | packaged by conda-forge | (main, Nov 22 2022, 08:25:13) [Clang 14.0.6 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys, pprint\n>>> pprint.pprint(sys.path)\n['',\n '/Users/hemiaozhang/projects/moose/test',\n '/Users/hemiaozhang/projects/moose/python',\n '/Users/hemiaozhang/mambaforge3/envs/moose/lib/python310.zip',\n '/Users/hemiaozhang/mambaforge3/envs/moose/lib/python3.10',\n '/Users/hemiaozhang/mambaforge3/envs/moose/lib/python3.10/lib-dynload',\n '/Users/hemiaozhang/mambaforge3/envs/moose/lib/python3.10/site-packages',\n '/Users/hemiaozhang/mambaforge3/envs/moose/lib/python3.10/site-packages/mpmath-1.2.1-py3.10.egg']\n>>> exit()\n(moose) DN0a225536:test hemiaozhang$ echo $PYTHONPATH\n:/Users/hemiaozhang/projects/moose/python\n\nI would appreciate any suggestion!",
          "url": "https://github.com/idaholab/moose/discussions/24312",
          "updatedAt": "2023-06-23T18:16:40Z",
          "publishedAt": "2023-05-09T21:29:22Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDid you build MOOSE?\nWhat does mamba list | grep moose return?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5855039",
                  "updatedAt": "2023-05-10T01:04:20Z",
                  "publishedAt": "2023-05-10T00:59:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "correction:\nmamba list | grep moose",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5855052",
                          "updatedAt": "2023-05-10T01:01:44Z",
                          "publishedAt": "2023-05-10T01:01:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "\ud83e\udd77",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5855068",
                          "updatedAt": "2023-05-10T01:04:31Z",
                          "publishedAt": "2023-05-10T01:04:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HemiaoZhang"
                          },
                          "bodyText": "Hi there! I remember building it after the download as instructed on the webpage.\n(moose) DN0a225536:test hemiaozhang$ mamba list | grep moose\n# packages in environment at /Users/hemiaozhang/mambaforge3/envs/moose:\nmoose-libmesh             2023.04.19              build_0    https://conda.software.inl.gov/public\nmoose-libmesh-vtk         9.2.6                h6b51079_0    https://conda.software.inl.gov/public\nmoose-mpich               4.0.2                   build_7    https://conda.software.inl.gov/public\nmoose-petsc               3.16.6                  build_6    https://conda.software.inl.gov/public\nmoose-test-tools          2023.04.04      py310h39238f2_0    https://conda.software.inl.gov/public\nmoose-tools               2023.04.04      py310h39238f2_0    https://conda.software.inl.gov/public\nmoose-wasp                2023.04.04              build_0    https://conda.software.inl.gov/public",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5855617",
                          "updatedAt": "2023-05-10T02:27:48Z",
                          "publishedAt": "2023-05-10T02:27:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Thank you for being thorough!\nMine, on Intel Ventura\n\u276f mamba list | grep moose\n# packages in environment at /Users/milljm/mambaforge3/envs/moose:\nmoose-libmesh             2023.04.19              build_0    https://conda.software.inl.gov/public\nmoose-libmesh-vtk         9.2.6                hfa13f3c_0    https://conda.software.inl.gov/public\nmoose-mpich               4.0.2                   build_7    https://conda.software.inl.gov/public\nmoose-petsc               3.16.6                  build_6    https://conda.software.inl.gov/public\nmoose-test-tools          2023.05.01      py310h51c69a1_0    https://conda.software.inl.gov/public\nmoose-tools               2023.05.01      py310h51c69a1_0    https://conda.software.inl.gov/public\nmoose-wasp                2023.05.01              build_0    https://conda.software.inl.gov/public\n\nJust slightly newer, but same Python version. It might be that your current build was somehow a little out of sync with what you currently have installed. If you don't have any development changes inside of the moose repo to worry about, I would try to clean it out, and build again:\nmamba activate moose  # if not already in moose environment\nunset PYTHONPATH  # setting this should not be necessary. but if already set, may cause issues\ncd ~/projects/moose\ngit clean -xfd\ngit submodule foreach --recursive git clean -xfd  # probably not necessary. but i like to recursive clean always\ncd test\nmake -j 6\n./run_tests -j 6   # profit?",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5860316",
                          "updatedAt": "2023-05-10T12:25:13Z",
                          "publishedAt": "2023-05-10T12:25:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HemiaoZhang"
                          },
                          "bodyText": "Thank you so much for the suggestion! I tried to rebuild moose and there is warning from the linking process. I also tried to remove my current installation and compile  from a new download but the same warning occurred.\ned by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Constraint>::addObject(std::__1::shared_ptr<Constraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalConstraint>::addObject(std::__1::shared_ptr<NodalConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalConstraint>::addObject(std::__1::shared_ptr<NodalConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalConstraint>::addObject(std::__1::shared_ptr<NodalConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalConstraint>::addObject(std::__1::shared_ptr<NodalConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeFaceConstraint>::addObject(std::__1::shared_ptr<NodeFaceConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeFaceConstraint>::addObject(std::__1::shared_ptr<NodeFaceConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeFaceConstraint>::addObject(std::__1::shared_ptr<NodeFaceConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeFaceConstraint>::addObject(std::__1::shared_ptr<NodeFaceConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MortarConstraintBase>::addObject(std::__1::shared_ptr<MortarConstraintBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MortarConstraintBase>::addObject(std::__1::shared_ptr<MortarConstraintBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MortarConstraintBase>::addObject(std::__1::shared_ptr<MortarConstraintBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MortarConstraintBase>::addObject(std::__1::shared_ptr<MortarConstraintBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElemElemConstraint>::addObject(std::__1::shared_ptr<ElemElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElemElemConstraint>::addObject(std::__1::shared_ptr<ElemElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElemElemConstraint>::addObject(std::__1::shared_ptr<ElemElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElemElemConstraint>::addObject(std::__1::shared_ptr<ElemElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeElemConstraint>::addObject(std::__1::shared_ptr<NodeElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeElemConstraint>::addObject(std::__1::shared_ptr<NodeElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeElemConstraint>::addObject(std::__1::shared_ptr<NodeElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodeElemConstraint>::addObject(std::__1::shared_ptr<NodeElemConstraint>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/constraints_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'PointSamplerBase::execute()' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/vectorpostprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'PointSamplerBase::execute()' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/vectorpostprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'SideValueSampler::execute()' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/vectorpostprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'SideValueSampler::execute()' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/vectorpostprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InterfaceIntegralVariableValuePostprocessor::InterfaceIntegralVariableValuePostprocessor(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/postprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InterfaceIntegralVariableValuePostprocessor::InterfaceIntegralVariableValuePostprocessor(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/postprocessors_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<KernelBase>::addObject(std::__1::shared_ptr<KernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<IntegratedBCBase>::addObject(std::__1::shared_ptr<IntegratedBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Function>::addObject(std::__1::shared_ptr<Function>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'FEProblemBase::addInitialCondition(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<double> > Factory::create<InitialConditionTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<double> > Factory::create<InitialConditionTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<double> > Factory::create<InitialConditionTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<double> > Factory::create<InitialConditionTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<libMesh::VectorValue<double> > > Factory::create<InitialConditionTempl<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<libMesh::VectorValue<double> > > Factory::create<InitialConditionTempl<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<libMesh::VectorValue<double> > > Factory::create<InitialConditionTempl<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<libMesh::VectorValue<double> > > Factory::create<InitialConditionTempl<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > Factory::create<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > Factory::create<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > Factory::create<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > Factory::create<InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InternalSideIndicator>::addObject(std::__1::shared_ptr<InternalSideIndicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InternalSideIndicator>::addObject(std::__1::shared_ptr<InternalSideIndicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InternalSideIndicator>::addObject(std::__1::shared_ptr<InternalSideIndicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InternalSideIndicator>::addObject(std::__1::shared_ptr<InternalSideIndicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Indicator>::addObject(std::__1::shared_ptr<Indicator>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Marker>::addObject(std::__1::shared_ptr<Marker>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Control>::addObject(std::__1::shared_ptr<Control>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<UserObject>::addObject(std::__1::shared_ptr<UserObject>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<MultiApp>::addObject(std::__1::shared_ptr<MultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<TransientMultiApp>::addObject(std::__1::shared_ptr<TransientMultiApp>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<Transfer>::addObject(std::__1::shared_ptr<Transfer>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/problems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeOffDiagElemNeighJacobian(Moose::DGJacobianType, MooseVariableFieldBase const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeOffDiagElemNeighJacobian(Moose::DGJacobianType, MooseVariableFieldBase const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeElemNeighResidual(Moose::DGResidualType)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeElemNeighResidual(Moose::DGResidualType)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeElemNeighJacobian(Moose::DGJacobianType)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'ArrayDGKernel::computeElemNeighJacobian(Moose::DGJacobianType)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/dgkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableFE<libMesh::VectorValue<double> >* Coupleable::getVarHelper<MooseVariableFE<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfacekernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableFE<libMesh::VectorValue<double> >* Coupleable::getVarHelper<MooseVariableFE<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfacekernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DiracKernelBase>::addObject(std::__1::shared_ptr<DiracKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'void ThreadedElementLoop<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::printExecutionOrdering<AuxKernelTempl<double> >(std::__1::vector<AuxKernelTempl<double>*, std::__1::allocator<AuxKernelTempl<double>*> > const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'void ThreadedElementLoop<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::printExecutionOrdering<AuxKernelTempl<double> >(std::__1::vector<AuxKernelTempl<double>*, std::__1::allocator<AuxKernelTempl<double>*> > const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DGKernelBase>::addObject(std::__1::shared_ptr<DGKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<InterfaceKernelBase>::addObject(std::__1::shared_ptr<InterfaceKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalKernelBase>::addObject(std::__1::shared_ptr<NodalKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalKernelBase>::addObject(std::__1::shared_ptr<NodalKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalKernelBase>::addObject(std::__1::shared_ptr<NodalKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalKernelBase>::addObject(std::__1::shared_ptr<NodalKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/loops_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AuxiliarySystem::addVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AuxiliarySystem::addVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AuxiliarySystem::addVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AuxiliarySystem::addVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxScalarKernel>::addObject(std::__1::shared_ptr<AuxScalarKernel>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<double> >::addObject(std::__1::shared_ptr<AuxKernelTempl<double> >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<libMesh::VectorValue<double> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<libMesh::VectorValue<double> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<libMesh::VectorValue<double> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<libMesh::VectorValue<double> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<libMesh::VectorValue<double> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<libMesh::VectorValue<double> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<libMesh::VectorValue<double> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<libMesh::VectorValue<double> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::addObject(std::__1::shared_ptr<AuxKernelTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<AuxKernelTempl<double> > Factory::create<AuxKernelTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<AuxKernelTempl<double> > Factory::create<AuxKernelTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo name for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<AuxKernelTempl<double> > Factory::create<AuxKernelTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'std::__1::shared_ptr<AuxKernelTempl<double> > Factory::create<AuxKernelTempl<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<GeneralDamper>::addObject(std::__1::shared_ptr<GeneralDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalDamper>::addObject(std::__1::shared_ptr<NodalDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ElementDamper>::addObject(std::__1::shared_ptr<ElementDamper>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ADDirichletBCBase>::addObject(std::__1::shared_ptr<ADDirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ADDirichletBCBase>::addObject(std::__1::shared_ptr<ADDirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ADDirichletBCBase>::addObject(std::__1::shared_ptr<ADDirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ADDirichletBCBase>::addObject(std::__1::shared_ptr<ADDirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DirichletBCBase>::addObject(std::__1::shared_ptr<DirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DirichletBCBase>::addObject(std::__1::shared_ptr<DirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DirichletBCBase>::addObject(std::__1::shared_ptr<DirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<DirichletBCBase>::addObject(std::__1::shared_ptr<DirichletBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<NodalBCBase>::addObject(std::__1::shared_ptr<NodalBCBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseObjectWarehouse<ScalarKernelBase>::addObject(std::__1::shared_ptr<ScalarKernelBase>, unsigned int, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/systems_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<double>::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<double>::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<double>::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<double>::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<libMesh::VectorValue<double> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<libMesh::VectorValue<double> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<libMesh::VectorValue<double> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'InitialConditionTempl<libMesh::VectorValue<double> >::InitialConditionTempl(InputParameters const&)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/ics_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::writableCoupledValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::writableCoupledValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFV<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::Coupleable(MooseObject const*, bool, bool)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Coupleable::getVarHelper<MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Coupleable::getVarHelper<MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<double>* Coupleable::getVarHelper<MooseVariableField<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<double>* Coupleable::getVarHelper<MooseVariableField<double> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Coupleable::getVarHelper<MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Coupleable::getVarHelper<MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<Eigen::Matrix<double, -1, 1, 0, -1, 1> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::writableVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'Coupleable::writableVariable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for AuxKernelTempl<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<libMesh::VectorValue<double> >* Coupleable::getVarHelper<MooseVariableField<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'MooseVariableField<libMesh::VectorValue<double> >* Coupleable::getVarHelper<MooseVariableField<libMesh::VectorValue<double> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int)' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/interfaces_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableField<libMesh::VectorValue<double> >' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AttribVar::initFrom(MooseObject const*)' from file '/Users/hemiaozhang/projects/moose/framework/src/base/.libs/Attributes.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nld: warning: direct access in function 'AttribVar::initFrom(MooseObject const*)' from file '/Users/hemiaozhang/projects/moose/framework/src/base/.libs/Attributes.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableInterface<double>' from file '/Users/hemiaozhang/projects/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\nLinking Executable /Users/hemiaozhang/projects/moose/test/moose_test-opt...\n\nAlso, same error with 'pyhit' occurs. I am wondering the linking problem is causing the error in the test as well.\nAnd here is some additional info that I hope might help with identifying the issue. I have the same linker error when trying out example01, but I was able to run the program regardless. And I was able to compile (with some warning) and run from folder darcy-thermo_mech step01. But I wasn't able to run the tutorial problem from step02.",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5865028",
                          "updatedAt": "2023-05-10T19:43:52Z",
                          "publishedAt": "2023-05-10T19:43:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the warnings are fine. They're tricky to fix but we ll figure it out one day.\nGood that the executable built",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5865055",
                          "updatedAt": "2023-05-10T19:46:14Z",
                          "publishedAt": "2023-05-10T19:46:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HemiaoZhang"
                          },
                          "bodyText": "Sure. Thanks! Still, there is error while running the tests. Other module not found errors also occur in step02 from the 'darcy_thermo_mech' tutorial. Is there a way to fix it?\n(moose) DN0a22582a:problems hemiaozhang$ cd ~/projects/moose/test\n(moose) DN0a22582a:test hemiaozhang$ ./run_tests -j 6\nBuilding and linking hit...\nBuilding hit for python with python3-config\nmake[1]: `hit' is up to date.\nTraceback (most recent call last):\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 13, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 18, in <module>\n    import hit\nImportError: dlopen(/Users/hemiaozhang/projects/moose/python/pyhit/../../framework/contrib/hit/hit.so, 0x0002): symbol not found in flat namespace (_PyCMethod_New)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./run_tests\", line 6, in <module>\n    from TestHarness import TestHarness\n  File \"/Users/hemiaozhang/projects/moose/python/TestHarness/__init__.py\", line 15, in <module>\n    from .TestHarness import TestHarness\n  File \"/Users/hemiaozhang/projects/moose/python/TestHarness/TestHarness.py\", line 20, in <module>\n    from FactorySystem.Factory import Factory\n  File \"/Users/hemiaozhang/projects/moose/python/FactorySystem/__init__.py\", line 13, in <module>\n    from .Parser import Parser\n  File \"/Users/hemiaozhang/projects/moose/python/FactorySystem/Parser.py\", line 13, in <module>\n    import pyhit\n  File \"/Users/hemiaozhang/projects/moose/python/pyhit/__init__.py\", line 22, in <module>\n    import hit\nImportError: dlopen(/Users/hemiaozhang/projects/moose/python/pyhit/../../framework/contrib/hit/hit.so, 0x0002): symbol not found in flat namespace (_PyCMethod_New)",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5865090",
                          "updatedAt": "2023-05-10T19:52:04Z",
                          "publishedAt": "2023-05-10T19:52:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ImportError: dlopen(/Users/hemiaozhang/projects/moose/python/pyhit/../../framework/contrib/hit/hit.so, 0x0002): symbol not found in flat namespace (_PyCMethod_New)\n\nThis makes me think there's an old compiled object.\nLet s git clean -xfd\nand git submodule foreach git clean -xfd the entire repo and rebuild\nBe careful though, you need to COMMIT any unsaved work",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5875226",
                          "updatedAt": "2023-05-11T16:08:41Z",
                          "publishedAt": "2023-05-11T16:08:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "HemiaoZhang"
                          },
                          "bodyText": "Thanks for the suggestion! I had tried it following a previous answer from milljm. And I also tried it one more time with this slightly different command to clean the submodule. Still, the same error remains. Is it possible that there is a problem with the python package? I am not sure what the missing modules are used for, but I am able to use make to compile and ./executable -i inputfile.i to run some simple examples.",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5876456",
                          "updatedAt": "2023-05-11T18:18:02Z",
                          "publishedAt": "2023-05-11T18:18:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you paste the output of the diagnostics script in moose/scripts",
                          "url": "https://github.com/idaholab/moose/discussions/24312#discussioncomment-5876557",
                          "updatedAt": "2023-05-11T18:29:46Z",
                          "publishedAt": "2023-05-11T18:29:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Accessing vector values from user defined types",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "I was looking at the following functionality and trying to understand how a vector defined with a userdefined type such as \"RealVectorValue\" can be accessed with an unconventional paranthesis just after the vector object.\nRealVectorValue\nParsedVectorAux::computeValue()\n{\n  RealVectorValue value;\n  for (const auto i : make_range(Moose::dim))\n  {\n    for (const auto j : make_range(_nargs))\n      _func_params[j] = (*_args[j])[_qp];\n\n    for (const auto j : make_range(_n_vector_args))\n      _func_params[_nargs + j] = (*_vector_args[j])[_qp](i);\n\n    if (_use_xyzt)\n    {\n      for (const auto j : make_range(Moose::dim))\n        _func_params[_nargs + _n_vector_args + j] =\n            isNodal() ? (*_current_node)(j) : _q_point[_qp](j);\n      _func_params[_nargs + _n_vector_args + 3] = _t;\n    }\n    value(i) = evaluate(_func_F[i]);\n  }\n  return value;\n}\n\nI see that RealVectorValue is defined in \"VectorValue\" class and that by saying vector(i) i think we are calling the constructor of this class. I am unclear how the elements of the vector themselves are stored, as \"vector_value.h\" does not seem to provide any clue. Could someone explain how this really works, especially the reason behind the usage of a parantheseis to access these vector elements?\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/24781",
          "updatedAt": "2023-06-23T16:37:12Z",
          "publishedAt": "2023-06-22T11:27:29Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is because we have defined the parenthesis operator on these classes ourselves. You can override the standard operators in C++, +, - etc\nsee the 6th or so public function definiton on this page:\nhttps://mooseframework.inl.gov/docs/doxygen/libmesh/classlibMesh_1_1VectorValue.html\nIt does the () operator\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24781#discussioncomment-6255148",
                  "updatedAt": "2023-06-22T18:44:24Z",
                  "publishedAt": "2023-06-22T18:44:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Thanks a lot Guillaume. You cleared me a long time, wanting to ask question.\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/24781#discussioncomment-6264174",
                          "updatedAt": "2023-06-23T16:37:13Z",
                          "publishedAt": "2023-06-23T16:37:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "cannot find -lvtksys-9.1",
          "author": {
            "login": "lizhen-dlut"
          },
          "bodyText": "Bug Description\n\nwhen i use command\ncd ~/projects/moose/test\nmake -j 6\nLinking Library /mnt/d/projects/moose/framework/libmoose-opt.la...\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkIOCore-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkCommonCore-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkCommonDataModel-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkFiltersCore-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkIOXML-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkImagingCore-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkIOImage-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkImagingMath-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkIOParallelXML-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkParallelMPI-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkParallelCore-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkCommonExecutionModel-9.1: No such file or directory\n/home/lizhen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtksys-9.1: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake: *** [/mnt/d/projects/moose/framework/moose.mk:390: /mnt/d/projects/moose/framework/libmoose-opt.la] Error 1\nmake: *** Waiting for unfinished jobs....\nSteps to Reproduce\n\nImpact",
          "url": "https://github.com/idaholab/moose/discussions/24782",
          "updatedAt": "2023-08-01T15:15:32Z",
          "publishedAt": "2023-06-22T09:02:01Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Converting to a Discussion. An \"issue\" which would indicate something that needs to change in the MOOSE repository in order to fix something that is plaguing everyone.\nThis happens due to your Conda environment being slightly out of date (we've updated the moose-libmesh-vtk to be 9.2.6).\nWhile I would love to solve what exactly is causing the issue, historically the solution has been to re-create the moose environment. You can of course try to perform an update, but I suspect you've already tried that!:\nmamba deactivate\nmamba activate base\nmamba env remove -n moose\nmamba create -n moose moose-dev\nOnce re-created, it is also wise to clean your MOOSE repo, perform an update, and attempt a build again:\ncd /mnt/d/projects/moose\ngit clean -xfd\ngit pull\ncd test\nmake -j 6",
                  "url": "https://github.com/idaholab/moose/discussions/24782#discussioncomment-6251951",
                  "updatedAt": "2023-06-22T13:00:05Z",
                  "publishedAt": "2023-06-22T13:00:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lizhen-dlut"
                          },
                          "bodyText": "Thanks, the compilation problem is solved. Yesterday I thought it was a system problem and I reinstalled Ubuntu.",
                          "url": "https://github.com/idaholab/moose/discussions/24782#discussioncomment-6257797",
                          "updatedAt": "2023-06-23T02:36:27Z",
                          "publishedAt": "2023-06-23T02:36:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Geochemistry Module] 2D GeoTes Simulation",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nI\u2019m trying to understand the dissolution of the QuartzLike mineral simulated in the Geochemistry module\u2014specifically, the example on 2D GeoTes simulation. I used the following aux variable to obtain the amount (in mole) of the QuartzLike mineral that dissolves with time from the aquifer_geochemistry.i input file:\n[AuxVariables]\n  [diss]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[AuxKernels]\n  [diss]\n    type = ParsedAux\n    args = moles_QuartzLike\n    function = 'moles_QuartzLike'\n    variable = diss\n  []\n[]\n\nThen I transfer it using MultiApps into the porous_flow.i file to observe how the QuartzLike mineral is dissolving with time as follows:\n[AuxVariables]\n  [rate] \n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[MultiApps]\n  [react]\n    type = TransientMultiApp\n    input_files = aquifer_geochemistry.i\n    clone_master_mesh = true\n    execute_on = 'timestep_end'\n  []\n[]\n\n[Transfers]\n  [rate_from_geochem]\n    type = MultiAppCopyTransfer\n    source_variable = 'diss'\n    variable = 'rate'\n    from_multi_app = react\n  []\n[]\n\n[Postprocessors]\n  [diss_rate]\n    type = PointValue\n    point = '30 0 0'\n    variable = rate\n  []\n[]\n\n\nI expected the amount (in moles) of the QuartzLike mineral to decrease with time. Instead, it remains constant (with a value of 3.96e2). I\u2019m probably missing something here. Could someone please clarify why the amount of the QuartzLike mineral isn\u2019t decreasing? Thanks.  @WilkAndy @cpgr @GiudGiud",
          "url": "https://github.com/idaholab/moose/discussions/24755",
          "updatedAt": "2023-06-23T02:05:54Z",
          "publishedAt": "2023-06-21T01:21:04Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "batodon"
                  },
                  "bodyText": "Ok. I\u2019m convinced now. The mineral is dissolving at a rather slow pace. The dissolution rate gave a much clearer picture. Thanks.",
                  "url": "https://github.com/idaholab/moose/discussions/24755#discussioncomment-6257665",
                  "updatedAt": "2023-06-23T02:05:51Z",
                  "publishedAt": "2023-06-23T02:05:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}