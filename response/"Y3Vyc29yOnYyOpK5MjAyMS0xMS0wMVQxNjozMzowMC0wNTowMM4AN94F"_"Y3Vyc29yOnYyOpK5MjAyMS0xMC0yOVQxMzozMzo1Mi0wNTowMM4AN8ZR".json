{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0xMC0yOVQxMzozMzo1Mi0wNTowMM4AN8ZR"
    },
    "edges": [
      {
        "node": {
          "title": "Make a sincere request for help about conda",
          "author": {
            "login": "ZJYZXH"
          },
          "bodyText": "x86_64-conda-linux-gnu-c++: fatal error: Killed signal terminated program cc1plus",
          "url": "https://github.com/idaholab/moose/discussions/19216",
          "updatedAt": "2022-06-13T20:36:59Z",
          "publishedAt": "2021-10-26T23:38:33Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you please post more context\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1541978",
                  "updatedAt": "2022-06-13T20:36:59Z",
                  "publishedAt": "2021-10-26T23:46:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Please  wait  a  moment  .  It  is  morning  now  and  I  have  a  class  .  I  will  reply  you  later,   ok?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542003",
                          "updatedAt": "2022-06-13T20:37:01Z",
                          "publishedAt": "2021-10-26T23:54:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Please help  me!!",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542014",
                          "updatedAt": "2022-06-13T20:37:01Z",
                          "publishedAt": "2021-10-26T23:57:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "Are you running this in a virtual machine? And if so, what resources do you have allocated to it?",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542039",
                  "updatedAt": "2022-06-13T20:37:01Z",
                  "publishedAt": "2021-10-27T00:02:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "I installed  the  Ubuntu  system  in  the  virtual  machine  , and  then  ran  it  in  the  terminal  according  to  the  official  website  instructions.  Finally,  this  error  occurred  in  the  test.",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542075",
                          "updatedAt": "2022-06-13T20:37:03Z",
                          "publishedAt": "2021-10-27T00:11:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "What resources did you give the virtual machine (memory/cpus/storage)?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542108",
                          "updatedAt": "2022-06-13T20:37:02Z",
                          "publishedAt": "2021-10-27T00:15:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "4Gb",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542115",
                          "updatedAt": "2022-06-13T20:37:03Z",
                          "publishedAt": "2021-10-27T00:18:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "4GB ram or storage",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542118",
                          "updatedAt": "2022-06-14T23:02:51Z",
                          "publishedAt": "2021-10-27T00:19:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "4GB  ram\n20GB   storage",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542124",
                          "updatedAt": "2022-06-14T23:02:52Z",
                          "publishedAt": "2021-10-27T00:22:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "I found  a good rule of thumb to be to have at most one concurrent compile process per GB of available RAM. Meaning you should run make -j 4 on your VM. The killed compiler is 99% certainly an out of memory issue.",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542207",
                  "updatedAt": "2022-06-13T20:37:05Z",
                  "publishedAt": "2021-10-27T00:58:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Run  the  conmand  again?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542214",
                          "updatedAt": "2022-06-13T20:37:05Z",
                          "publishedAt": "2021-10-27T01:02:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you run with a -j argument the first time?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542233",
                          "updatedAt": "2022-06-13T20:37:05Z",
                          "publishedAt": "2021-10-27T01:08:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "yes",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542236",
                          "updatedAt": "2022-06-13T20:37:08Z",
                          "publishedAt": "2021-10-27T01:10:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "try running just make then. It ll use less resources",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542243",
                          "updatedAt": "2022-06-14T16:52:30Z",
                          "publishedAt": "2021-10-27T01:11:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "first   time   run   with    make  -j   4",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542245",
                          "updatedAt": "2022-06-14T16:52:30Z",
                          "publishedAt": "2021-10-27T01:11:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Do you have swap set up? Either way try make -j 2",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542292",
                          "updatedAt": "2022-06-14T16:52:30Z",
                          "publishedAt": "2021-10-27T01:35:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZJYZXH"
                  },
                  "bodyText": "",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1542935",
                  "updatedAt": "2022-06-14T16:52:23Z",
                  "publishedAt": "2021-10-27T05:53:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "cant see the screenshot",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1545960",
                          "updatedAt": "2022-06-14T16:52:25Z",
                          "publishedAt": "2021-10-27T15:00:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZJYZXH"
                  },
                  "bodyText": "",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1549279",
                  "updatedAt": "2022-06-14T16:52:33Z",
                  "publishedAt": "2021-10-28T00:02:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "still cant see it\nCan you please post it from github rather than email it?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1549712",
                          "updatedAt": "2022-06-14T16:52:33Z",
                          "publishedAt": "2021-10-28T02:43:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1556090",
                          "updatedAt": "2022-06-14T16:52:38Z",
                          "publishedAt": "2021-10-29T00:36:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1556091",
                          "updatedAt": "2022-06-14T16:52:37Z",
                          "publishedAt": "2021-10-29T00:37:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Can you  see  it?   And   it   successful?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1556093",
                          "updatedAt": "2021-10-29T00:38:42Z",
                          "publishedAt": "2021-10-29T00:38:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks successful to me!\nIt compiled and it passed the test for your application.\nDoes it pass the tests in moose/test?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1556664",
                          "updatedAt": "2021-10-29T04:29:28Z",
                          "publishedAt": "2021-10-29T04:29:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Most  of  them  are  ok,  but  a  few  of  them  have  been  skipped,  no  mistakes.",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1558495",
                          "updatedAt": "2021-10-29T11:43:53Z",
                          "publishedAt": "2021-10-29T11:43:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You're all set then. Good luck with your modeling!",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1559752",
                          "updatedAt": "2021-10-29T15:34:09Z",
                          "publishedAt": "2021-10-29T15:34:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "thanks",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1563037",
                          "updatedAt": "2021-10-30T13:45:28Z",
                          "publishedAt": "2021-10-30T13:45:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "Hello, I have a new question to ask you, the first example I run is normal, but as shown in the picture below, the fourth and other examples all report the same error, why is this?",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1564633",
                          "updatedAt": "2021-10-31T03:30:48Z",
                          "publishedAt": "2021-10-31T03:30:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZJYZXH"
                          },
                          "bodyText": "",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1564634",
                          "updatedAt": "2021-10-31T03:30:58Z",
                          "publishedAt": "2021-10-31T03:30:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZJYZXH"
                  },
                  "bodyText": "",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1567831",
                  "updatedAt": "2022-06-14T16:52:43Z",
                  "publishedAt": "2021-11-01T05:08:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hey @ZJYZXH and @amosaha. Please refrain from posting in Chinese here. While I can read this simple exchange of contact details, most of the community cannot so it's a little uncomfortable for the next person who will consult this post looking for help on the same topic.",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1570749",
                          "updatedAt": "2022-06-14T16:52:40Z",
                          "publishedAt": "2021-11-01T15:03:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "amosaha"
                          },
                          "bodyText": "I\u2018m so sorry, and I have deleted the messages.I won\u2019t send such messages.Thank you for reminding me of this rule.",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1570798",
                          "updatedAt": "2022-06-14T16:52:40Z",
                          "publishedAt": "2021-11-01T15:11:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hey no worries we literally just added it to the guidelines this morning! The situation had not come up before. Good luck with using MOOSE!",
                          "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1570966",
                          "updatedAt": "2022-06-14T16:52:40Z",
                          "publishedAt": "2021-11-01T15:40:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZJYZXH"
                  },
                  "bodyText": "This is the first time to do this, and my English is poor, I feel very sorry.\n\u2026\n---Original---\nFrom: \"Guillaume ***@***.***&gt;\nDate: Mon, Nov 1, 2021 23:40 PM\nTo: ***@***.***&gt;;\nCc: ***@***.******@***.***&gt;;\nSubject: Re: [idaholab/moose] Make a sincere request for help about conda(Discussion #19216)\n\n\n\n\n\nHey no worries we literally just added it to the guidelines this morning! The situation had not come up before. Good luck with using MOOSE!\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or unsubscribe.\nTriage notifications on the go with GitHub Mobile for iOS or Android.",
                  "url": "https://github.com/idaholab/moose/discussions/19216#discussioncomment-1570993",
                  "updatedAt": "2022-06-14T16:52:42Z",
                  "publishedAt": "2021-11-01T15:45:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Automatic Different for Hydro-mechanical simulation",
          "author": {
            "login": "alexchen4ai"
          },
          "bodyText": "Hi Moose experts,\nI plan to use moose to implement the basic hydro-mechanical simulation.\nI haven't tried to use Automatic differentiation for porous flow before. The equations I want to implement is straightforward.\n\nHere, \\omega is darcy's velocity.\nAfter I finish the implementation using AD, I can't get the converged result.\n 0 Nonlinear |R| = 9.839972e-02 Linear solve did not converge due to DIVERGED_NANORINF iterations 0 Nonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0 Solve Did NOT Converge! Aborting as solve did not converge\nI want to ask if we can use AD in porous flow problem? I am currently using PJFNK solver. Is it appropriate for this simulation? Thank you!",
          "url": "https://github.com/idaholab/moose/discussions/19188",
          "updatedAt": "2022-06-06T07:27:08Z",
          "publishedAt": "2021-10-24T00:51:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf you are using AD you can use Newton instead of PJFNK since the Jacobian you're creating should be exact. This is also the recommended option for porous flow.\nBut that might not be the issue.\nThis very first nonlinear residual, is it the same as with a non-AD implementation? It should.\nIs it possible to only solve one of the two equations, keeping all other terms constant, for this application? To verify the correctness of the kernels\nDid you look at this porous flow documentation https://mooseframework.inl.gov/modules/porous_flow/tutorial_02.html\nhas information on numerical solves\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1526730",
                  "updatedAt": "2022-06-06T07:27:19Z",
                  "publishedAt": "2021-10-24T05:45:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "Thank you! Since I plan to include some new constituive laws which are pretty complicated, I want to use AD to compute the jacobian automatically. And this simple equation will be my starting point to include more complicated stuff.\nI can solve the two equations seperately. But when I add the residual term of (_strain[_qp].trace() - _strain_old[_qp].trace())/_dt*_test[_i][_qp]; for the second equations. The result doesn't converge. So, to deal with porous flow problem, we should implement the jacobian exactly, right? I tried the methods in tutorial but it doesn't work here. Now, the running issues become\n`Time Step 1, time = 0.1, dt = 0.1\nPerforming automatic scaling calculation\n0 Nonlinear |R| = 6.380534e+00\nLinear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\n1 Nonlinear |R| = 5.892391e+00\nLinear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\n2 Nonlinear |R| = 5.361072e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\n3 Nonlinear |R| = 4.711670e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\n4 Nonlinear |R| = 4.711670e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\n5 Nonlinear |R| = 4.711670e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\n6 Nonlinear |R| = 4.711670e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\n7 Nonlinear |R| = 4.711670e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 300\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 7\nSolve Did NOT Converge!\nAborting as solve did not converge`",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1526771",
                          "updatedAt": "2022-06-06T07:28:27Z",
                          "publishedAt": "2021-10-24T06:19:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There's something special about implementing time derivative kernels. If you do it like this you wont be able to leverage all the cool time steppers we have. You have to use the dot functions like the Time Kernels. Unfortunately I m not sure where good documentation for doing this is. @lindsayad do you know?\nWhat is _strain? To check if this type has a dot() function\nMaybe have a look at the AD Time Derivative kernel, https://github.com/idaholab/moose/blob/next/framework/src/kernels/ADTimeDerivative.C\nwhich inherits from the TimeKernel, which defines u_dot https://github.com/idaholab/moose/blob/next/framework/src/kernels/ADTimeKernel.C\nOther page of interest:\nhttps://mooseframework.inl.gov/source/executioners/Transient.html",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1529618",
                          "updatedAt": "2022-06-06T07:29:11Z",
                          "publishedAt": "2021-10-25T04:19:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The first thing I would do is compile in dbg mode, like METHOD=dbg make -j8 and then run with the dbg executable and see if you have any floating point exceptions or things like that. I suspect that you do given the errors out of your linear solver.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1533271",
                          "updatedAt": "2022-06-06T07:29:11Z",
                          "publishedAt": "2021-10-25T15:52:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "More documentation on debugging is here",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1533278",
                          "updatedAt": "2022-06-06T07:29:17Z",
                          "publishedAt": "2021-10-25T15:53:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "Thank you. I tried both methods you mentioned. I guess the main issue is that the permeability I choose is too low.  To solve this kind of problem, it is better to use explicit jacobian expression.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536081",
                          "updatedAt": "2022-06-06T07:29:17Z",
                          "publishedAt": "2021-10-26T04:19:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'm not an expert on porous flow so I cant comment on that. As a general rule though, AD will give you a better Jacobian than explicit.\n@WilkAndy may know what s going on",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536088",
                          "updatedAt": "2022-06-06T07:29:17Z",
                          "publishedAt": "2021-10-26T04:21:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "I'm not an expert on porous flow so I cant comment on that. As a general rule though, AD will give you a better Jacobian than explicit. @WilkAndy may know what s going on\n\nThank you. Yeah, I can get the code to run right now for a large permeability I choose. Note that permeability is used in darcy's law\n$$\\vec\\omega = \\frac{\\kappa}{\\mu}\\nabla p$$\nHowever, I can't get the converged result if kappa is small.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536130",
                          "updatedAt": "2022-06-06T07:29:30Z",
                          "publishedAt": "2021-10-26T04:39:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I solve these equations routinely with AD, it for sure works. I second @lindsayad 's suggestion -- it's likely you have a floating point exception somewhere, probably in your constitutive model.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1537802",
                          "updatedAt": "2022-06-06T07:29:48Z",
                          "publishedAt": "2021-10-26T11:02:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "From the above discussion, it is difficult to know whether you're using the PorousFlow module, or your own code.  If you're using the PorousFlow module (and i recommend you do, because this is a simple scenario for PorousFlow) then this physics should be easily modelled using PorousFlowFullySaturated.  Please also read the tutorial pages.  You probably should never use automatic differentiation in PorousFlow models, since all the Jacobian entries are already coded, and you should almost always use solve_type = Newton (i don't think any of the PorousFlow tests or examples use anything else, because in more complicated PorousFlow situations, other nonlinear solvers take too long to converge).",
                  "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536159",
                  "updatedAt": "2022-06-06T07:29:14Z",
                  "publishedAt": "2021-10-26T04:50:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "From the above discussion, it is difficult to know whether you're using the PorousFlow module, or your own code. If you're using the PorousFlow module (and i recommend you do, because this is a simple scenario for PorousFlow) then this physics should be easily modelled using PorousFlowFullySaturated. Please also read the tutorial pages. You probably should never use automatic differentiation in PorousFlow models, since all the Jacobian entries are already coded, and you should almost always use solve_type = Newton (i don't think any of the PorousFlow tests or examples use anything else, because in more complicated PorousFlow situations, other nonlinear solvers take too long to converge).\n\nHi Wilk, I am using my own code. ThePorousFlow module has explicit jacobian and I used it before. Now, I am considering to implement double porosity coupled with plasticity in Moose. But the jacobian is expected to be complex. So, I consider to use AD to compute the jacobian automatically and accurately. I try to use AD to solve the equations above since I want to use it as my starting point for some really complex equations and test if AD could be used for porous flow problem.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536182",
                          "updatedAt": "2022-06-06T07:29:51Z",
                          "publishedAt": "2021-10-26T04:56:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Aha, i get it.   Sounds fun!   Probably you need some sort of scaling on your Variables.  Even if you aren't using PorousFlow, this page might be useful to you.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536289",
                          "updatedAt": "2022-06-06T07:29:53Z",
                          "publishedAt": "2021-10-26T05:39:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexchen4ai"
                          },
                          "bodyText": "Aha, i get it. Sounds fun! Probably you need some sort of scaling on your Variables. Even if you aren't using PorousFlow, this page might be useful to you.\n\nThank you for the sharing!",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1536305",
                          "updatedAt": "2022-06-06T07:29:54Z",
                          "publishedAt": "2021-10-26T05:44:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zhang-rite"
                          },
                          "bodyText": "You probably should never use automatic differentiation in PorousFlow models\n\n@WilkAndy, it looks like AD can give a better Jacobian than explicit as @GiudGiud wrote. Why does PorousFlow module not?",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1567383",
                          "updatedAt": "2022-06-06T07:29:56Z",
                          "publishedAt": "2021-11-01T01:06:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If a developer can take the time and write out an exact hand Jacobian, the simulation will run roughly 1.5 times faster",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1567451",
                          "updatedAt": "2022-06-06T07:29:56Z",
                          "publishedAt": "2021-11-01T01:45:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "You probably should never use automatic differentiation in PorousFlow models\n\n@WilkAndy, it looks like AD can give a better Jacobian than explicit as @GiudGiud wrote. Why does PorousFlow module not?\n\n@zhang-rite - do you have evidence of this in PorousFlow (if you do, we need to urgently investigate why the hand-coded derivatives are incorrect since that could signal a major problem)?  If not, then: (1) the hand-coded Jacobian is faster as @lindsayad wrote, and (2) AD wasn't around when PorousFlow was written, so we didn't have that option, boohoo.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1567465",
                          "updatedAt": "2022-06-06T07:29:56Z",
                          "publishedAt": "2021-11-01T01:51:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zhang-rite"
                          },
                          "bodyText": "@WilkAndy @lindsayad Thank you for the reply. I get to understand the situation. Before seeing this discussion, I just read the recent paper \"Lindsay, Alexander, et al. \"Automatic Differentiation in MetaPhysicL and Its Applications in MOOSE.\" Nuclear Technology (2021): 1-18\" and think AD is so attractive for \"the guarantee of an exact Jacobian at a relatively small overhead cost\".\nAnther open-source code MRST (MATLAB based, desktop only) for reservoir modeling seems beneficial in speed from the usage AD.",
                          "url": "https://github.com/idaholab/moose/discussions/19188#discussioncomment-1567610",
                          "updatedAt": "2022-06-06T07:30:13Z",
                          "publishedAt": "2021-11-01T03:07:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE users at UK universities?",
          "author": {
            "login": "EdSheltonUKAEA"
          },
          "bodyText": "First, apologies if it isn't appropriate to ask this question in the discussion forum, and questions should be restricted only to technical matters about MOOSE.\nI and colleagues at UKAEA would be interested to know of any researchers or groups currently using MOOSE at UK universities.  If there are any, it would be good to make contact to discuss possible collaboration and maybe support for PhDs.\nIf you'd like to get in touch, please reply to this post in the forum or send me a direct message.",
          "url": "https://github.com/idaholab/moose/discussions/18827",
          "updatedAt": "2022-07-12T14:33:24Z",
          "publishedAt": "2021-09-15T07:19:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @EdSheltonUKAEA\nHere is one who just landed in the UK:\nhttps://research-information.bris.ac.uk/en/persons/nicol%C3%B2-grilli\nBest Regards,\nNicol\u00f2 Grilli",
                  "url": "https://github.com/idaholab/moose/discussions/18827#discussioncomment-1348153",
                  "updatedAt": "2022-07-12T14:33:27Z",
                  "publishedAt": "2021-09-17T15:32:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "Dear @EdSheltonUKAEA\nSorry I have not been in touch,\nI don't know how to message you directly here and could not find your email online.\nIf you have still interest in co-supervision of PhD students, especially for the next call of CDT studentships,\nyou can contact me to discuss at:\nnicolo.grilli@bristol.ac.uk\nBest Regards,\nNicol\u00f2",
                          "url": "https://github.com/idaholab/moose/discussions/18827#discussioncomment-1567424",
                          "updatedAt": "2022-07-12T14:33:31Z",
                          "publishedAt": "2021-11-01T01:33:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@EdSheltonUKAEA this question is appropriate in the forum\n@friedmud do you know anyone else in the UK using MOOSE?",
                  "url": "https://github.com/idaholab/moose/discussions/18827#discussioncomment-1366842",
                  "updatedAt": "2022-07-12T14:34:10Z",
                  "publishedAt": "2021-09-22T02:14:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "friedmud"
                          },
                          "bodyText": "I don't, unfortunately.",
                          "url": "https://github.com/idaholab/moose/discussions/18827#discussioncomment-1370026",
                          "updatedAt": "2022-07-12T14:34:10Z",
                          "publishedAt": "2021-09-22T15:19:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The First Question about GBAnisotropy",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear MOOSE experts,\nRecently, I recently read the input file and C++ file about the anisotropy of grain boundary energy and grain boundary mobility. For test1.i and op_num = 3, I found that only the three GB mobility prefactor in anisotropy_mobility.txt are used by reading GBAnisotropy.C and GBAnisotropyBase.C, as shown in the Fig.1.\n\nAnd the output of L (the mobility of the order parameter) after the simultion of test1.i is as follow in Fig.2,\n\nFinially, my questions for test1.i are,\n\nThe correspondence between $GBmob0_{01}, GBmob0_{02}$ , mobility prefactor of the two grain boundaries (gr0-gr1 and gr0-gr2), and the value in anisotropy_mobility.txt is shown in fig.1, but I don't know if my understanding is correct?\nFor grain gr1, the intra-grain mobility prefactor is different from the inter-grain boundary perfactor, but the intra-grain mobility prefactor is the same as the the inter-grain boundary perfactor for grain gr1. And I don't know what setting casuse this difference.\n\nAny suggestions or recommendations to fix the problem would be greatly appreciated.\nThank you\nWei",
          "url": "https://github.com/idaholab/moose/discussions/19145",
          "updatedAt": "2022-06-13T03:28:33Z",
          "publishedAt": "2021-10-19T02:22:22Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen @SudiptaBiswas @amjokisaari",
                  "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1534600",
                  "updatedAt": "2022-06-13T03:29:04Z",
                  "publishedAt": "2021-10-25T19:39:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Wei, I ran this example and output the parameter L to the exodus file by adding outputs = exodus in the CuGrGranisotropic block. The values of L are a bit different from what is in your schematic drawing.\n\nWhat you see is that there is a consistent value of L being used in the gr0-gr1 interface (L is consistent between through that interface). Similarly, there is a consistent (larger) value of L being used in the gr0-gr2 interface. These different values give different interface motion for the two types of interface. (There is a third value of L being used, far away from the interfaces and shown in green, but this values doesn't affect microstructural evolution because the order parameters are 1 there).",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1535348",
                          "updatedAt": "2022-06-13T03:29:07Z",
                          "publishedAt": "2021-10-25T23:17:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Thank you so much, @laagesen.\n\nThere is a third value of L being used, far away from the interfaces and shown in green, but this values doesn't affect microstructural evolution because the order parameters are 1 there\n\nYeah, I fully understand what you mean.\nThen, what I want to ask is whether the corresponding relationship in Figure 1 is correct, especially for the parameter (1,2),\n\nAnd, if I set (1, 2) to 5.0e-6, an opposite result will appear, as shown in the figure below, which is very interesting.",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1549539",
                          "updatedAt": "2022-06-13T03:29:18Z",
                          "publishedAt": "2021-10-28T01:46:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Yes I believe what you sketched in Fig. 1 is correct. However I believe if you want to change the gr1-g2 interface mobility, you also need to change the corresponding value of the gr2-gr1 parameter. Think of this as a symmetric matrix, with symmetry about the diagonal. For the values you gave in Fig. 1, it is a symmetric matrix. However when you change gr1-gr2 without changing gr2-gr1, the matrix is no longer symmetric.",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1553065",
                          "updatedAt": "2022-06-13T03:29:19Z",
                          "publishedAt": "2021-10-28T14:16:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "ok, thank you so much. I got it.\nNow, if I want to extend this Tricrystal simulation to polycrystal simulation without using graintracker object (e.g. op_num = 5, grain_num = 5), GB mobility is a 5*5 matrix in anisotropy_mobility.txt, right?\nmy results for this polycrystal simulation and GB mobility in anisotropy_mobility.txt are as follow,\n\n\nMoreover, if I use the graintracker object to reduce the number of the order parameters in this polycrystal simultion (e.g. op_num = 4, grain_num = 5), how do I set my anisotropy_mobility.txt file to get the same result as above?",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1557175",
                          "updatedAt": "2022-09-22T09:08:01Z",
                          "publishedAt": "2021-10-29T07:08:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "You're correct about it being a 5 x 5 matrix for 5 grains, and the matrix structure you show in the figure is correct. For the 5-grain simulation, I don't think you're going to be able to reduce the number of order parameters less than 5 because the grains are not far enough apart to avoid them contacting each other. Even if you could, the additional overhead of the graintracker would probably not be worth decreased cost obtained by dropping down one order parameter. GrainTracker is meant for much larger simulations, like if you wanted to simulate 100 grains with 8-9 order parameters.",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1560588",
                          "updatedAt": "2022-09-22T09:08:02Z",
                          "publishedAt": "2021-10-29T18:19:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Yeah\uff0c I know it.\nI just give an example, although it is not perfect. When I use the graintracker object (e.g. 100 grains and 8 op_num), is this GB mobility matrix is 8 x 8 or 100 x 100 in anisotropy_mobility.txt ? In other words, is the information assigned to the order parameters or to each grain unique_grains in *.txt?",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1561886",
                          "updatedAt": "2022-09-22T09:08:02Z",
                          "publishedAt": "2021-10-30T04:05:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "This GB mobility matrix would be 8 x 8, the information is assigned to the order parameters rather than the unique_grains.",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1564039",
                          "updatedAt": "2022-09-22T09:08:02Z",
                          "publishedAt": "2021-10-30T20:16:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Ok, I already understand. Thank you very much for your careful answers.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/19145#discussioncomment-1564485",
                          "updatedAt": "2022-09-22T09:08:02Z",
                          "publishedAt": "2021-10-31T00:57:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "New grain formation using Grain tracker",
          "author": {
            "login": "ritamcj"
          },
          "bodyText": "Dear Moose users,\nI am trying to simulate nucleation in a polycrystal using Grain tracker. I came across the option \"reserved order parameters\" in Grain tracker but I am unable to figure out how to invoke new grain formation using this. I tried various strategies as follows:\n\nI used discretenucleation to increase new grain order parameters (say gr3,gr4,gr5) to values greater than the threshold required to recognise a new feature. I kept op_num = 6, initial grains = 3 and used polycrystalvariables and polycrystalkernel to evolve grain op's with prefix \"gr\".\n\n[./nucleation_energy]\n  type = DiscreteNucleation\n  f_name = Fn\n  op_names  = 'gr0 gr1 gr2 gr3 gr4 gr5'\n  op_values = '0.1 0.1 0.1 1 1 1'\n  penalty = 20\n  penalty_mode = MATCH\n  map = map\n  block = 'face1_QUAD4  face2_QUAD4  face3_QUAD4'\n  outputs = exodus\n[../]\n\n\nIncrease the number of order parameters \"op_num\" in my input file by writing a simple function. Something like:\n\n[GlobalParams]\n  op_num = op_evolution_function\n  deformed_grain_num = 3\n  var_name_base = gr\n  grain_tracker = grain_tracker\n[../]\n\n[Functions]\n  [./op_evolution_function]\n    type = ParsedFunction\n    value = deformed_grain_num + 1\n  [../]\n[]\n\nThis did not work as the syntax to read a function value is likely incorrect. I have come across functions in Grain tracker such as newGrainCreated, getNewGrainIDs but am unable to figure out how to invoke nucleation through new grain order parameters. I would really appreciate guidance on possible strategies to tackle this problem.\nWarm Regards,\nRitam",
          "url": "https://github.com/idaholab/moose/discussions/19191",
          "updatedAt": "2022-07-05T08:34:11Z",
          "publishedAt": "2021-10-25T05:36:37Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hi Ritam,\nIf you haven't already, please have a look at the documentation page\nhttps://mooseframework.inl.gov/modules/phase_field/Nucleation/DiscreteNucleation.html\nand especially the section Direct Order Parameter Modification. You will need to add a DiscreteNucleationForce and Reaction kernel that act on the reserved order parameter. You shouldn't need to do either of the other things you tried, but you will need a map and inserter to inform the DiscreteNucleationForce kernel.",
                  "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1539139",
                  "updatedAt": "2022-07-05T08:34:21Z",
                  "publishedAt": "2021-10-26T14:38:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Also make sure you run nucleation only on the reserved order parameters. Those are not assigned any grains by the grain tracker and can be use to stage new nuclei.",
                          "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1542384",
                          "updatedAt": "2022-07-05T08:34:22Z",
                          "publishedAt": "2021-10-27T02:06:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ritamcj"
                  },
                  "bodyText": "Hi Larry and Daniel,\nThank you so much for your suggestions. I am able to see nucleating grains individually through their order parameters (say gr9). I am now trying to observe the evolving grain structure, but the new nuclei aren't observed in \"unique_grains\" in GrainTracker even though the new grain order parameters exceed the threshold. However, the halos do update. Any pointers regarding this? I have applied a grain growth model through \"polycrystalstoredenergy\" and am able to observe grain growth in pre-existing grains.\nRitam\n\n  \n    \n    \n\n    new_grains.mp4\n    \n  \n\n  \n\n  \n\n\n\n  \n    \n    \n\n    unique_grains.1.mp4\n    \n  \n\n  \n\n  \n\n\n\n  \n    \n    \n\n    halos.mp4",
                  "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1552583",
                  "updatedAt": "2022-07-05T08:34:23Z",
                  "publishedAt": "2021-10-28T12:51:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Ritam, you will need to use a significantly higher mesh resolution than shown here. The GrainTracker is probably having a hard time distinguishing new grains from existing grains. The nucleation rate also seems to be very high so it may be having a hard time distinguishing between individual nucleation events. Please make sure you have at least 3 mesh elements through the interfaces between order parameters prior to trying anything with nucleation. Once you observe grain growth under these conditions, you can then add in nucleation.",
                  "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1553129",
                  "updatedAt": "2022-07-05T08:34:22Z",
                  "publishedAt": "2021-10-28T14:25:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ritamcj"
                          },
                          "bodyText": "Hi Larry,\nI am happy to inform you that I am able to visualize the evolving microstructure with nucleating grains, which grow further with stored deformation energy based on dislocation density evolution. I used a very fine mesh and a slower nucleation rate and it worked. Many thanks for your suggestions.\nWarm regards,\nRitam\n\n  \n    \n    \n\n    new_grains.mp4\n    \n  \n\n  \n\n  \n\n\n\n  \n    \n    \n\n    unique_grains.mp4",
                          "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1562672",
                          "updatedAt": "2022-07-05T08:34:24Z",
                          "publishedAt": "2021-10-30T11:24:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Great! Glad that worked.",
                          "url": "https://github.com/idaholab/moose/discussions/19191#discussioncomment-1564011",
                          "updatedAt": "2022-07-05T08:34:24Z",
                          "publishedAt": "2021-10-30T20:05:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to save initial stress",
          "author": {
            "login": "rksin8"
          },
          "bodyText": "Hi,\nHow can I save initial stress? Here is my input file:\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 5\n  ny = 5\n  nz = 5\n  xmin = 0\n  xmax = 1\n  ymin = 0\n  ymax = 1\n  zmin = 0\n  zmax = 1\n[]\n\n[Variables]\n  [./disp_x]\n  [../]\n  [./disp_y]\n  [../]\n  [./disp_z]\n  [../]\n[]\n\n[Kernels]\n  [./TensorMechanics]\n    displacements = 'disp_x disp_y disp_z'\n    eigenstrain_names = 'initial_stress'\n  [../]\n[]\n\n\n[BCs]\n  # back = zmin\n  # front = zmax\n  # bottom = ymin\n  # top = ymax\n  # left = xmin\n  # right = xmax\n  [./xmin_xzero]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'left'\n    value = '0'\n  [../]\n  [./ymin_yzero]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'bottom'\n    value = '0'\n  [../]\n  [./zmin_zzero]\n    type = DirichletBC\n    variable = disp_z\n    boundary = 'back'\n    value = '0'\n  [../]\n  [x1]\n    type = Pressure\n    variable = disp_x\n    boundary = 'right'\n    component = 0\n    factor = 300000\n  []\n  [y1]\n    type = Pressure\n    variable = disp_y\n    boundary = 'top'\n    component = 1\n    factor = 200000\n  []\n\n  [./zmax_disp]\n    type = FunctionDirichletBC\n    variable = disp_z\n    boundary = 'front'\n    function = '-1E-3*t'  # 8mm\n  [../]\n[]\n\n[AuxVariables]\n  [./stress_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_xy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_xz]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_yy]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_yz]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./stress_zz]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./mc_int]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./yield_fcn]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./stress_xx]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xx\n    index_i = 0\n    index_j = 0\n  [../]\n  [./stress_xy]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xy\n    index_i = 0\n    index_j = 1\n  [../]\n  [./stress_xz]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xz\n    index_i = 0\n    index_j = 2\n  [../]\n  [./stress_yy]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_yy\n    index_i = 1\n    index_j = 1\n  [../]\n  [./stress_yz]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_yz\n    index_i = 1\n    index_j = 2\n  [../]\n  [./stress_zz]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_zz\n    index_i = 2\n    index_j = 2\n  [../]\n  [./mc_int_auxk]\n    type = MaterialStdVectorAux\n    index = 0\n    property = plastic_internal_parameter\n    variable = mc_int\n  [../]\n  [./yield_fcn_auxk]\n    type = MaterialStdVectorAux\n    index = 0\n    property = plastic_yield_function\n    variable = yield_fcn\n  [../]\n[]\n\n[Postprocessors]\n  [./s_xx]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_xx\n  [../]\n  [./s_xy]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_xy\n  [../]\n  [./s_xz]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_xz\n  [../]\n  [./s_yy]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_yy\n  [../]\n  [./s_yz]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_yz\n  [../]\n  [./s_zz]\n    type = PointValue\n    point = '0 0 1'\n    variable = stress_zz\n  [../]\n  [./mc_int]\n    type = PointValue\n    point = '0 0 1'\n    variable = mc_int\n  [../]\n  [./f]\n    type = PointValue\n    point = '0 0 1'\n    variable = yield_fcn\n  [../]\n  [./uzz]\n    type = PointValue\n    point = '0 0 1'\n    variable = disp_z\n  [../]\n[]\n\n[UserObjects]\n  [./mc_coh]\n    type = TensorMechanicsHardeningConstant\n    value = 70E3\n  [../]\n  [./mc_phi]\n    type = TensorMechanicsHardeningConstant\n    value_0 = 0.52  # 30 degree\n  [../]\n  [./mc_psi]\n    type = TensorMechanicsHardeningConstant\n    value = 0\n  [../]\n  [./mc]\n    type = TensorMechanicsPlasticMohrCoulomb\n    cohesion = mc_coh\n    friction_angle = mc_phi\n    dilation_angle = mc_psi\n    mc_tip_smoother = 0\n    mc_edge_smoother = 25\n    yield_function_tolerance = 1E-3\n    internal_constraint_tolerance = 1E-10\n  [../]\n[]\n\n[Materials]\n  [./elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    block = 0\n    poissons_ratio = 0.3\n    youngs_modulus = 207e6\n  [../]\n  [./strain]\n    type = ComputeFiniteStrain\n    block = 0\n    displacements = 'disp_x disp_y disp_z'\n    eigenstrain_names = 'initial_stress'\n  [../]\n\n [initial_strain]\n   type = ComputeEigenstrainFromInitialStress\n   initial_stress = '-3e5 0 0  0 -2e5 0  0 0 -1e5'\n   eigenstrain_name = initial_stress\n   use_displaced_mesh = false\n []\n\n\n  [./mc]\n    type = ComputeMultiPlasticityStress\n    block = 0\n    ep_plastic_tolerance = 1E-10\n    plastic_models = mc\n    max_NR_iterations = 1000\n    #debug_fspb = crash\n  [../]\n[]\n\n[Preconditioning]\n  [./andy]\n    type = SMP\n    full = true\n  [../]\n[]\n\n\n[Executioner]\n  end_time = 0.8\n  dt = 0.05\n  solve_type = PJFNK  # cannot use NEWTON because we are using ComputeFiniteStrain, and hence the Jacobian contributions will not be correct, even though ComputeMultiPlasticityStress will compute the correct consistent tangent operator for small strains\n  type = Transient\n\n  line_search = 'none'\n  nl_rel_tol = 1E-10\n  l_tol = 1E-3\n  l_max_its = 200\n  nl_max_its = 10\n\n  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  petsc_options_value = ' asm      2              lu            gmres     200'\n[]\n\n\n\n[Outputs]\n  file_base = uni_axial1\n  exodus = true\n  [./csv]\n    type = CSV\n    [../]\n[]\n\nThank you !",
          "url": "https://github.com/idaholab/moose/discussions/19265",
          "updatedAt": "2022-07-20T19:34:35Z",
          "publishedAt": "2021-10-30T03:37:02Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe initial stress should be saved to your exodus output at every time step.\nBut are you trying to re-use it inside your simulation, to compute a difference for example?\nIf you are trying to save and re-use the initial condition, you can use a SelfAux executed on INITIAL to make a copy of the stress_... variables.\nIf you are trying to save and re-use the first (or any other) time step, you can use a SelfAux AND the Control system to run it on a particular time step\nOR\nyou can use a solutionUserObject or an exodus restart to reload the solution at a given time step from a previous solve.\nThere might be other options too. Cant think of more right now\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19265#discussioncomment-1563815",
                  "updatedAt": "2022-07-20T19:35:16Z",
                  "publishedAt": "2021-10-30T18:42:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A question about PolycrystalColoringIC",
          "author": {
            "login": "KaijieNing"
          },
          "bodyText": "Hi, MOOSE team,\nI wanted to use the block parameter for the PolycrystalColoringIC in my work and found it was not working.\nThere was a warning sign saying block was not used.\nHow can I set the block id for PolycrystalColoringIC? Actually, when I used the PolycrystalVoronoiVoidIC, it worked, and there was no warning.\nIs it possible the code did not enable setting block id PolycrystalColoringIC?\nThanks very much,\nKaijie\n[ICs]\n[./PolycrystalICs]\n[./PolycrystalColoringIC] #PolycrystalColoringIC not working?\npolycrystal_ic_uo = voronoi\nblock = '1 2 3'\n[../]\n[../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/19125",
          "updatedAt": "2022-11-14T23:06:02Z",
          "publishedAt": "2021-10-16T02:21:28Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "SudiptaBiswas"
                  },
                  "bodyText": "The  PolycrystalColoringIC assigns grains based on the information provided by the polycrystal_ic_uo, that's why it's not using the block information you provided. You will have to specify the blocks in the UserObject for this.",
                  "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1503765",
                  "updatedAt": "2022-11-14T23:06:03Z",
                  "publishedAt": "2021-10-19T17:00:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "I just tried the following UserObjects, but still, there were warnings about the unused block. It was not working.\n[UserObjects]\n[./voronoi]\ntype = PolycrystalVoronoi\ngrain_num = 10\nrand_seed = 12444\nblock = '1 2 3'\n[../]\n[./grain_tracker]\ntype = GrainTracker\nthreshold = 0.2\nconnecting_threshold = 0.08\ncompute_halo_maps = true # Only necessary for displaying HALOS\nblock = '1 2 3'\n[../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1503985",
                          "updatedAt": "2022-11-14T23:06:05Z",
                          "publishedAt": "2021-10-19T17:43:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I had a look and it seems the parameter is not transmitted from the action to the ICs.\n@SudiptaBiswas could you please have a look at this branch I made and see if that should work?\nI can make a PR from there.\nhttps://github.com/GiudGiud/moose/blob/PR_action_crystal/modules/phase_field/src/action/PolycrystalVoronoiVoidICAction.C\n@KaijieNing do you need boundary restriction too or just block restriction?",
                  "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1524030",
                  "updatedAt": "2022-11-14T23:06:13Z",
                  "publishedAt": "2021-10-23T03:20:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Great! I likely need boundary restriction later. I appreciate it if you could solve both of them.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529133",
                          "updatedAt": "2022-11-14T23:06:13Z",
                          "publishedAt": "2021-10-25T00:22:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "@GiudGiud you edited the wrong class. See below.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529138",
                          "updatedAt": "2022-11-14T23:06:13Z",
                          "publishedAt": "2021-10-25T00:24:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how did I manage that... I edited like 6 of these IC actions.\nOk i ll fix that up",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529320",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-25T01:47:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh I edited that one as well already, i just posted the wrong link",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529810",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-25T05:50:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Added boundary restriction, made the PR #19194",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529825",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-25T05:59:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "We'll need to add the block parameter to the PolycrystalColoringICAction. Should be pretty straight forward!",
                  "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529137",
                  "updatedAt": "2022-11-14T23:06:14Z",
                  "publishedAt": "2021-10-25T00:24:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Thanks so much. PolycrystalColoringICAction was not working instead of PolycrystalVoronoiVoidICAction, as far I know.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1529168",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-25T00:35:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Ok with the merging of #19194 this should be fixed. Thanks for reporting this!",
                  "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1555166",
                  "updatedAt": "2022-11-14T23:06:14Z",
                  "publishedAt": "2021-10-28T19:48:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Thanks very much.\nI updated MOOSE and implemented the following commands. But after compiling my application, it was not working. Is there anything wrong when I did the update?\n(moose) [moose@localhost moose]$ **git rebase origin/master**\nerror: cannot rebase: You have unstaged changes.\nerror: Please commit or stash them.\n(moose) [moose@localhost moose]$ **git rebase origin/master**\nerror: cannot rebase: You have unstaged changes.\nerror: Please commit or stash them.\n(moose) [moose@localhost moose]$ **git stash**\nSaved working directory and index state WIP on master: 59fb6b81d3 Merge commit '579cc6274bfa1525b7962796270dfcdbb1bb27b0'\n(base) [moose@localhost moose]$ **git pull --rebase --autostash**\nSuccessfully rebased and updated refs/heads/master.\n(base) [moose@localhost moose]$ **git stash pop**\nOn branch master\nYour branch is up to date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   modules/phase_field/test/tests/rigidbodymotion/polycrystal_action.i\n\tmodified:   modules/tensor_mechanics/test/tests/global_strain/global_strain_disp.i\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tcoupled_pressure_test1.i\n\texamples/a_MyCourse_Final/\n\tmodules/combined/examples/publications/rapid_dev/fig7b-1.i\n\tmodules/combined/examples/publications/rapid_dev/fig8-1.i\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (a16e1507545f4303d6c58d3ed114911cfd84983c)\n(base) [moose@localhost moose]$ **git status**\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tcoupled_pressure_test1.i\n\texamples/a_MyCourse_Final/\n\tmodules/combined/examples/publications/rapid_dev/fig7b-1.i\n\tmodules/combined/examples/publications/rapid_dev/fig8-1.i\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1560521",
                          "updatedAt": "2021-10-29T19:45:52Z",
                          "publishedAt": "2021-10-29T18:06:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you re-compile?\nWhat you did with git updated the source code, but it did not update the executable",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1560928",
                          "updatedAt": "2021-10-29T19:46:12Z",
                          "publishedAt": "2021-10-29T19:46:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Yes, I recompiled it and passed all the tests. It showed the latest MOOSE version. But I checked the folder and found PolycrystalColoringIC was not updated.\nSee below the three snapshots.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1560992",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-29T19:59:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh it s because you pulled in the master branch. The changes I merged in arent in master yet. They are still in devel or next.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1561019",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-29T20:09:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh looks like the changes are in master now\nhttps://github.com/idaholab/moose/commits/master",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1561035",
                          "updatedAt": "2022-11-14T23:06:14Z",
                          "publishedAt": "2021-10-29T20:13:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "but the one you pulled was literally two commits before my PR got in master. If you repeat the maneuver now it should work",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1561045",
                          "updatedAt": "2022-11-14T23:06:15Z",
                          "publishedAt": "2021-10-29T20:14:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KaijieNing"
                          },
                          "bodyText": "Yes. You were right. I repeated it and it works now. Thanks very much.",
                          "url": "https://github.com/idaholab/moose/discussions/19125#discussioncomment-1561809",
                          "updatedAt": "2022-11-14T23:06:15Z",
                          "publishedAt": "2021-10-30T03:04:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Dummy kernel for simulation",
          "author": {
            "login": "hokonkim"
          },
          "bodyText": "Hello!\nA mesh for my simulation has several phases (A, B, C, and D).\nI want to run a simulation (physics) for only one phase (C).\nHowever, as far as I know, MOOSE requires every phase have a kernel.\nI tried to NullKernel for A,B, and D, but it did not converge.\nAre there any ways to run a simulation without affecting simulation convergence?\nThanks!\nBest regards,\nHokon Kim",
          "url": "https://github.com/idaholab/moose/discussions/19247",
          "updatedAt": "2022-06-28T11:43:53Z",
          "publishedAt": "2021-10-28T20:01:25Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nhow ironic I was documenting this kernel last week but did not make the PR yet. I ll make it now.\nBest option is to move the variables to aux variables since you are not solving for them. That will decrease the size of the matrix.\nThe NullKernel has a jacobian fill parameter that should have done the trick. Can you try increasing it?\nOtherwise I d try with a time derivative kernel, since these variables are effectively solving that equation (dA/dt = 0)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1555378",
                  "updatedAt": "2022-06-28T11:43:53Z",
                  "publishedAt": "2021-10-28T20:42:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Here s the future version of the docs for this\nhttps://mooseframework.inl.gov/docs/PRs/19248/site/source/kernels/NullKernel.html\nlet s improve it as we figure this one out",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1559833",
                          "updatedAt": "2022-06-28T11:43:55Z",
                          "publishedAt": "2021-10-29T15:47:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "As far as I know,\nVariables work with Kernels and AuxVariables work with AuxKernels.\nIf I move some variables to aux variables, then I might use AuxKernels.\nDoes Kernels (NullKernel) work with aux variables?\nI don't run an application with the input below, yet.\n[Variables]\n  [./phi_YSZ]\n    block = 'PT_YSZ_TET4 PT_TPB_TET4'\n    initial_condition = 0.00000 # (V)\n    scaling = 1e4\n  [../]\n[]\n\n[Kernels]\n  [./vacancyIonicDrift]\n    type  = DiffMatKernel\n    block = 'PT_YSZ_TET4 PT_TPB_TET4'\n    variable  = phi_YSZ\n    diff_coef = 'sigma_YSZ'\n  [../]\n\n  [./gasDiffusion]\n    type  = NullKernel\n    block = 'PT_PORE_TET4 PT_TPB_TET4'\n    variable  = p_O2\n  [../]\n\n  [./holeDrift]\n    type  = NullKernel\n    block = 'PT_LSM_TET4 PT_TPB_TET4' # when you use previously generated mesh, you need to use LSM block.\n    variable  = phi_LSM\n  [../]\n[]\n\n[AuxVariables]\n  [./p_O2]\n    block = 'PT_PORE_TET4 PT_TPB_TET4'\n    initial_condition = 0.21 # (atm)\n    # scaling = 1e4\n  [../]\n\n  [./phi_LSM]\n    block = 'PT_LSM_TET4 PT_TPB_TET4' # when you use previously generated mesh, you need to use LSM block.\n    initial_condition = 1.03665 # (V) Just for condition: Each subdomain must contain at least one Kernel.\n    # scaling = 1e7 # 1e2 for cylinder\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1560522",
                          "updatedAt": "2022-06-28T11:43:55Z",
                          "publishedAt": "2021-10-29T18:06:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you move the variable to be an aux-Variable then you dont need a NullKernel. The NullKernel is to avoid a singularity in the non-linear system. If you dont want to do anything to an auxvariable then dont have an auxkernel for it",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1560916",
                          "updatedAt": "2022-06-28T11:43:57Z",
                          "publishedAt": "2021-10-29T19:44:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "My question is \"even I move some variables to Aux-variable\", still some phases (A, B, and D) does not have Kernels.\nThis will give me an error like \"each subdomain has one Kernel..\"",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1560963",
                          "updatedAt": "2022-06-28T11:44:01Z",
                          "publishedAt": "2021-10-29T19:51:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh those are less of a concern.\nJust add \"kernel_coverage_check = false\" to your [Problem] block.",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1561023",
                          "updatedAt": "2022-06-28T11:44:00Z",
                          "publishedAt": "2021-10-29T20:10:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "I modified part of input file like below.\nAs far as I know, there are not any issues.\nI didn't run it with this input file yet. But, let's see if it works.\n[Variables]\n  [./phi_YSZ]\n    block = 'PT_YSZ_TET4 PT_TPB_TET4'\n    initial_condition = 0.00000 # (V)\n    scaling = 1e4\n  [../]\n[]\n\n[Kernels]\n  [./vacancyIonicDrift]\n    type  = DiffMatKernel\n    block = 'PT_YSZ_TET4 PT_TPB_TET4'\n    variable  = phi_YSZ\n    diff_coef = 'sigma_YSZ'\n  [../]\n[]\n\n[Problem] # To make it possible to run a simulation without assigning kernel or material property to each phase.\n  kernel_coverage_check = false\n  material_coverage_check = false\n[]\n\n[BCs]\n  [./potentialYSZ_bottom]\n    type = DirichletBC\n    variable = phi_YSZ\n    boundary = 'SF_YSZ_WITH_XMAX'\n    value = 0.00000 # (V)\n  [../]\n\n  [./potentialYSZ_top]\n    type = FunctionDirichletBC\n    variable = phi_YSZ\n    boundary = 'SF_YSZ_WITH_XMIN'\n    function = 'funcPotentialYSZ' # (V)\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/19247#discussioncomment-1561156",
                          "updatedAt": "2022-06-28T11:44:00Z",
                          "publishedAt": "2021-10-29T20:42:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "units system",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Hello,\nIf I generate mesh in the unit of mm rather than m, then how should the units system in the input file be changed?\nFor example, when I use m in the mesh and input density = 1kg/m^3, thermal conductivity = 1W/mK and specific heat = 1 J/kgK , then what's the unit of them in the input file when the mesh with unit of mm ?\nI checked the page https://mooseframework.inl.gov/source/utils/Units.html  but find no solutions. Thank you:)",
          "url": "https://github.com/idaholab/moose/discussions/19256",
          "updatedAt": "2022-06-14T05:44:55Z",
          "publishedAt": "2021-10-29T09:17:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf the mesh is in mm then all units need to be adapted to mm. I recommend you document them throughout your input file. If you use any pre-made model (like the fluid properties from the fluid_properties module), make sure to check those for units too.\nSo in the input file:\n1kg / m3 -> 1e-9 kg/mm3 now\n1W/mk -> 1e-3 W/mmK\netc\nThat page is one of the best resource wrt unit conversions. The other discussion about how to do units in input files is here\nhttps://mooseframework.inl.gov/application_usage/input_syntax.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19256#discussioncomment-1559791",
                  "updatedAt": "2022-06-14T05:45:09Z",
                  "publishedAt": "2021-10-29T15:40:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "@GiudGiud Thank you:)",
                          "url": "https://github.com/idaholab/moose/discussions/19256#discussioncomment-1560725",
                          "updatedAt": "2022-06-14T05:45:09Z",
                          "publishedAt": "2021-10-29T18:56:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Combining Grain Tracker with Discrete Nucleation",
          "author": {
            "login": "jbair34"
          },
          "bodyText": "Hi All,\nI was wondering if it is possible to use MOOSE's grain tracker algorithms in a solidification simulation with discrete nucleation? My understanding of the grain tracker is that the grain IDs are assigned at the start of the simulation so I am guessing it is not possible to have a grain ID assigned upon nucleation? We were trying to set up a simulation with random orientations of nuclei which would be tied to a grain ID.\nThanks,\nJake",
          "url": "https://github.com/idaholab/moose/discussions/19244",
          "updatedAt": "2022-06-29T05:45:41Z",
          "publishedAt": "2021-10-28T18:29:28Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hi Jake- there is a capability to use a \"reserved\" order parameter to introduce nuclei using the discrete nucleation algorithm. Basically new nuclei are brought into existence with the reserved order parameter, then the GrainTracker remaps them to different order parameters. There is some description on the documentation page:\nhttps://mooseframework.inl.gov/modules/phase_field/Nucleation/DiscreteNucleation.html\nSee the section under Direct Order Parameter Modification. However I am not sure if this is going to work if there is any anisotropy in the properties of the individual nuclei, like if you are simulating dendritic solidification. If there is anisotropy in the properties, I don't think you can re-use order parameters to allow arbitrary orientations. So each nucleus with the same order parameter is going to have the same orientation relationship relative to the liquid. But, if you are simulating isotropic particles this shouldn't be an issue.",
                  "url": "https://github.com/idaholab/moose/discussions/19244#discussioncomment-1560625",
                  "updatedAt": "2022-06-29T05:45:41Z",
                  "publishedAt": "2021-10-29T18:27:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jbair34"
                          },
                          "bodyText": "Thanks Larry! I was hoping the grain ID itself could provide the anisotropy information rather than the order parameter but I guess we might have to try to figure out a way to do that differently. We'll play with it a little just to test it though and see if we can get it to work as is.",
                          "url": "https://github.com/idaholab/moose/discussions/19244#discussioncomment-1560656",
                          "updatedAt": "2022-06-29T05:45:41Z",
                          "publishedAt": "2021-10-29T18:33:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}