{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMy0wOFQyMTowNDoxNS0wNjowMM4AS1bH"
    },
    "edges": [
      {
        "node": {
          "title": "Create an Application",
          "author": {
            "login": "selarem"
          },
          "bodyText": "Hello,\nI am creating a new app. In the Makefile I have put yes for all modules. It compiles fine.\nHowever, when I tried to run the crack2d_vol_dev.i of the  phase_field_fracture, I got:\nsection '[Modules/PhaseField]' does not have an associated \"Action\".\nCommon causes:\n\nyou misspelled the Action/section name\nthe app you are running does not support this Action/syntax\n\nsection '[Modules/PhaseField/Nonconserved]' does not have an associated \"Action\".\nCommon causes:\n\nyou misspelled the Action/section name\nthe app you are running does not support this Action/syntax\n\nNormally, with yes for all modules, shouldn't i be able to run all the tests ?\nthanks in advance for any help.",
          "url": "https://github.com/idaholab/moose/discussions/23656",
          "updatedAt": "2023-04-29T03:35:16Z",
          "publishedAt": "2023-03-08T13:33:19Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis should have worked\nCould you please paste your Makefile here?\nDo you have PHASE_FIELD                 := yes\nAnd did you recompile after?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5244127",
                  "updatedAt": "2023-03-08T16:53:24Z",
                  "publishedAt": "2023-03-08T16:53:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "selarem"
                  },
                  "bodyText": "Everything is yes.\nBut It des not work.\n\n\nLe mer. 8 mars 2023, 17:53, Guillaume Giudicelli ***@***.***>\na \u00e9crit :\n\u2026\n Hello\n\n This should have worked\n Could you please paste your Makefile here?\n Do you have PHASE_FIELD := yes\n And did you recompile after?\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#23656 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AFBUGDGS3AOU7ULTV4IPNQ3W3C2Q5ANCNFSM6AAAAAAVTYZZQU>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5245300",
                  "updatedAt": "2023-03-08T18:56:29Z",
                  "publishedAt": "2023-03-08T18:56:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "when it compiles do you see the phase field module build?\nIf you run <my_exec-opt>  --dump do you see the phase field syntax?\nThis should work, unless you are using an old executable from before you set it to yes",
                          "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5245693",
                          "updatedAt": "2023-03-08T19:42:39Z",
                          "publishedAt": "2023-03-08T19:42:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "Yes I see PhaseFieldFracture syntax.",
                          "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5251501",
                          "updatedAt": "2023-03-09T08:20:21Z",
                          "publishedAt": "2023-03-09T08:20:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I just installed a new app from scratch and got it to run that input.\nPlease try installing from scratch again (at least git clean -xfd in your app and the moose folder)\nTake care, git clean removes all NON-COMMITTED work",
                          "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5256418",
                          "updatedAt": "2023-03-09T16:11:44Z",
                          "publishedAt": "2023-03-09T16:11:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "It works after reinstall of moose. It should not be like this.\nthanks",
                          "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5264613",
                          "updatedAt": "2023-03-10T08:07:13Z",
                          "publishedAt": "2023-03-10T08:07:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you can make the issue reproducible we can attempt to fix it.\ni could not get the same problem",
                          "url": "https://github.com/idaholab/moose/discussions/23656#discussioncomment-5268961",
                          "updatedAt": "2023-03-10T15:35:54Z",
                          "publishedAt": "2023-03-10T15:35:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PBP preconditioners",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello all,\nMay I ask whether I can print out the PBP preprocessing matrix M\uff1fHow to output?",
          "url": "https://github.com/idaholab/moose/discussions/23688",
          "updatedAt": "2023-06-24T22:24:59Z",
          "publishedAt": "2023-03-10T11:56:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "-ksp_view_pmat\nOn the command line or in the petsc_options parameter",
                  "url": "https://github.com/idaholab/moose/discussions/23688#discussioncomment-5268788",
                  "updatedAt": "2023-03-10T15:21:12Z",
                  "publishedAt": "2023-03-10T15:21:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nanguaxiaofendui"
                          },
                          "bodyText": "I have tried, other preprocessing can be output with this command, but PBP can not, is there any other way? thank you",
                          "url": "https://github.com/idaholab/moose/discussions/23688#discussioncomment-5268830",
                          "updatedAt": "2023-03-10T15:24:29Z",
                          "publishedAt": "2023-03-10T15:24:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You ll have to check the petsc manual to get more output flags.\nthere s also -ksp_view_mat",
                          "url": "https://github.com/idaholab/moose/discussions/23688#discussioncomment-5268890",
                          "updatedAt": "2023-03-10T15:28:57Z",
                          "publishedAt": "2023-03-10T15:28:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Why does the default preconditoning(Block Diagonal Preconditioner) PMat not diagonal\uff1f",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello all,\nMay I ask why does the output preprocessor matrix (PMat) in my program not block diagonal? Attached below is my program and the PMat.\n[GlobalParams]\ndisplacements = 'disp_x disp_y'\ntemperature = temperature\nvolumetric_locking_correction = true\n[]\n[Mesh]\ntype = GeneratedMesh\ndim = 2\nnx = 4\nny = 4\nxmax = 0.06 # Length of test chamber\nymax = 0.06 # Test chamber radius\n[]\n[Variables]\n[./disp_x]\n[../]\n[./disp_y]\n[../]\n[temperature]\ninitial_condition = 300 # Start at room temperature\n[]\n[]\n[Kernels]\n[./TensorMechanics]\nuse_automatic_differentiation = true\n[../]\n[heat_conduction]\ntype = ADHeatConduction\nvariable = temperature\n[]\n[heat_conduction_time_derivative]\ntype = ADHeatConductionTimeDerivative\nvariable = temperature\n[]\n[]\n[BCs]\n[confinex]\ntype = DirichletBC\nvariable = disp_x\nvalue = 0\nboundary = 'left'\n[]\n[confiney]\ntype = DirichletBC\nvariable = disp_y\nvalue = 0\nboundary = left\n[]\n[inlet_temperature]\ntype = DirichletBC\nvariable = temperature\nboundary = left\nvalue = 500 # (K)\n[]\n[outlet_temperature]\ntype = DirichletBC\nvariable = temperature\nboundary = right\nvalue = 300 # (K)\n[]\n[]\n[Materials]\n[./elasticity_tensor]\ntype = ADComputeIsotropicElasticityTensor\nyoungs_modulus = 300e9\npoissons_ratio = 0.222\n[../]\n[./strain]\ntype = ADComputeSmallStrain\neigenstrain_names = eigenstrain\n# List of eigenstrains to be applied in this strain calculation\n[../]\n[./thermal_strain]\ntype = ADComputeThermalExpansionEigenstrain\nstress_free_temperature =300\nthermal_expansion_coeff = 8e-6\neigenstrain_name = eigenstrain\n[../]\n[./stress]\ntype = ADComputeLinearElasticStress\n[../]\n[./heat]\ntype = ADHeatConductionMaterial\nspecific_heat =900\nthermal_conductivity = 27\n[../]\n[density]\ntype = ADGenericConstantMaterial\nprop_names = 'density'\nprop_values = 3900\n[]\n[]\n[Postprocessors]\n[single_nodal_temperature]\ntype = PointValue\npoint = '0.01 0.01 0'\nvariable = temperature\n[]\n[]\n[Executioner]\ntype = Transient\nscheme = bdf2\nend_time= 30\nsolve_type =PJFNK\npetsc_options_iname = '-pc_type -pc_hypre_type -ksp_gmres_restart'\npetsc_options_value = 'hypre boomeramg 101'\n[]\n[Outputs]\nexodus = true\ncsv = true\n[./console]\ntype = Console\noutput_file=true\n[../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23689",
          "updatedAt": "2023-04-29T03:35:46Z",
          "publishedAt": "2023-03-10T13:04:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou have coupling between 3 variables so there are diagonal terms in the Jacobian\nthe default preconditioning will use the Jacobian for PJFNK\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23689#discussioncomment-5268877",
                  "updatedAt": "2023-03-10T15:27:52Z",
                  "publishedAt": "2023-03-10T15:27:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[PorousFlow]__Debugging",
          "author": {
            "login": "Joseph-0123"
          },
          "bodyText": "**Dear all,\nWhen I use the PorousFlow module running my input, I get the following errors.**\n\"YOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application. Please see the FAQ page for debugging suggestions\"\nSo I follow the Debugging document, and I get the following tips:\nThread 1 \"porous_flow-dbg\" received signal SIGSEGV, Segmentation fault.\n0x0000155554ac121c in PorousFlowMaterial::sizeNodalProperties (this=0x262fa40) at /home/projects/moose/modules/porous_flow/src/materials/PorousFlowMaterial.C:147\n147         props_old[prop_id]->resize(new_size);\nMissing separate debuginfos, use: yum debuginfo-install keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.18.2-9.el8_4.x86_64 libX11-1.6.8-4.el8.x86_64 libXau-1.0.9-3.el8.x86_64 libblkid-2.32.1-27.el8.x86_64 libcom_err-1.45.6-2.el8_4.x86_64 libmount-2.32.1-27.el8.x86_64 libpciaccess-0.14-1.el8.x86_64 libselinux-2.9-5.el8.x86_64 libtirpc-1.1.4-4.el8.x86_64 libunwind-1.3.1-3.el8.x86_64 libuuid-2.32.1-27.el8.x86_64 libxcb-1.13.1-1.el8.x86_64 libxml2-2.9.7-9.el8_4.2.x86_64 openssl-libs-1.1.1g-16.el8_4.x86_64 pcre2-10.32-2.el8.x86_64 systemd-libs-239-45.el8_4.15.x86_64 xz-libs-5.2.4-4.el8_4.x86_64 zlib-1.2.11-18.el8_4.x86_64\nHow can I solve this problem? Thanks for your help in advance.\nJ",
          "url": "https://github.com/idaholab/moose/discussions/23650",
          "updatedAt": "2023-03-09T22:17:04Z",
          "publishedAt": "2023-03-08T01:30:29Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "This is a pretty low-level material in porous flow. Can you post a minimal example that demonstrates this?\nHave you made your own material or are you using just the standard materials available in the module?",
                  "url": "https://github.com/idaholab/moose/discussions/23650#discussioncomment-5236407",
                  "updatedAt": "2023-03-08T03:35:43Z",
                  "publishedAt": "2023-03-08T03:35:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "For those reading along, this should be fixed by #23672",
                  "url": "https://github.com/idaholab/moose/discussions/23650#discussioncomment-5252802",
                  "updatedAt": "2023-03-09T10:33:51Z",
                  "publishedAt": "2023-03-09T10:33:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "For those reading along, this should be fixed by #23672\n\nThanks a lot, Chris! It works!",
                          "url": "https://github.com/idaholab/moose/discussions/23650#discussioncomment-5259978",
                          "updatedAt": "2023-03-09T22:17:18Z",
                          "publishedAt": "2023-03-09T22:17:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "DED and PBF AM simulation in MOOSE",
          "author": {
            "login": "dnajera27"
          },
          "bodyText": "I recently saw the announcement of MALAMUTE, an application focused on modeling and simulation of additive manufacturing processes. I was wondering whether this application is available and if not, when will it be released? And I was also wondering whether it will be able to simulate DED and PBF processes.\nhttps://inl.gov/article/simulation-code-probes-microscale-mysteries-of-advanced-manufacturing/\nThank you!",
          "url": "https://github.com/idaholab/moose/discussions/23089",
          "updatedAt": "2023-03-09T16:58:02Z",
          "publishedAt": "2023-01-05T20:46:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cticenhour",
                  "url": "https://github.com/idaholab/moose/discussions/23089#discussioncomment-4611092",
                  "updatedAt": "2023-01-06T11:41:41Z",
                  "publishedAt": "2023-01-06T11:41:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "Hello, and thank you for your interest! MALAMUTE is focused on advanced manufacturing processes, not just additive, and we have some additive manufacturing capability coming online soon. Currently we can simulate aspects of electrothermal processes for electric field assisted sintering alongside laser-induced surface deformation and pool dynamics. DED capabilities will be coming online from several members of the development team this year - the points of contact for those efforts would be @dewenyushu and @jiangwen84 if they want to chime in.\nMALAMUTE is currently a licensed INL code, which means you should first contact the INL Technology Deployment office (see https://inl.gov/inl-initiatives/technology-deployment/) in order to obtain a license.",
                  "url": "https://github.com/idaholab/moose/discussions/23089#discussioncomment-4614019",
                  "updatedAt": "2023-01-06T16:42:47Z",
                  "publishedAt": "2023-01-06T16:42:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "I wanted to announce an important change to the status of MALAMUTE - it is now open source! It can now be found at https://github.com/idaholab/malamute.",
                  "url": "https://github.com/idaholab/moose/discussions/23089#discussioncomment-5256959",
                  "updatedAt": "2023-03-09T16:57:58Z",
                  "publishedAt": "2023-03-09T16:57:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Rectangular domain with circular cutout",
          "author": {
            "login": "lindsayad"
          },
          "bodyText": "Hi all, I'm looking to generate a rectangular domain with a circular cutout for vortex shedding analysis. What's the best way to do this using (existing) mesh generators? (@AlbertJP7) Maybe @GiudGiud has an idea?",
          "url": "https://github.com/idaholab/moose/discussions/21411",
          "updatedAt": "2023-03-09T16:15:19Z",
          "publishedAt": "2022-06-24T18:56:00Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Use this\nhttps://mooseframework.inl.gov/source/meshgenerators/ConcentricCircleMeshGenerator.html\nthen delete the circle(s) block(s)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3019750",
                  "updatedAt": "2022-06-24T19:28:53Z",
                  "publishedAt": "2022-06-24T19:28:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "Or maybe this (#13696) if the concentric circle mesh is not ideal?",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3019866",
                          "updatedAt": "2022-06-24T19:53:36Z",
                          "publishedAt": "2022-06-24T19:53:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Maybe I need to add a blocks parameter? Otherwise I do not see how to directly control the block name/ID of the created circle and consequently know what block to delete",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3019919",
                          "updatedAt": "2022-06-24T20:06:07Z",
                          "publishedAt": "2022-06-24T20:06:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the blocks have different ids anyway\nbut yes a blocks parameter would be welcome!",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3020004",
                          "updatedAt": "2022-06-24T20:25:22Z",
                          "publishedAt": "2022-06-24T20:25:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Hmm, I'm not sure how I'm gonna make this work. I want to make a domain for simulating vortex shedding for which we want a long region after the circle such that outlet boundary condition does not affect the flow around the sphere. I'm not sure how I'm going to be able to stitch such an exit region (which I was thinking I would create just with a GeneratedMeshGenerator) with the (square - circle) region that the ConcentricCircleMeshGenerator gives me. Hard for me to see those nodes getting lined up",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3044256",
                          "updatedAt": "2022-06-29T00:22:15Z",
                          "publishedAt": "2022-06-29T00:22:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "(this taken from our concentric circle mesh generator test)",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3044267",
                          "updatedAt": "2022-06-29T00:26:37Z",
                          "publishedAt": "2022-06-29T00:26:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@grmnptr would you use gmsh for this mesh or would you suggest another open source tool?",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3044332",
                          "updatedAt": "2022-06-29T00:46:45Z",
                          "publishedAt": "2022-06-29T00:46:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Yea @AlbertJP7, I think we'll just go with gmsh on this one (probably don't need this long of an exit length though)",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3044419",
                          "updatedAt": "2022-06-29T01:11:05Z",
                          "publishedAt": "2022-06-29T01:11:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Might need to think about boundary layers around the circle (and maybe along the walls)",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3044420",
                          "updatedAt": "2022-06-29T01:11:33Z",
                          "publishedAt": "2022-06-29T01:11:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the mesh is regular on the sides on the square, you should be able to stitch it alright.\nYou can also create boundary layers naturally by having an extra ring",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3045031",
                          "updatedAt": "2022-06-29T04:09:03Z",
                          "publishedAt": "2022-06-29T04:09:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "grmnptr"
                          },
                          "bodyText": "I would use Salome, but gmsh is fine. You can definitely fit a structured mesh on this. Add a square around the circle and connect the corners to the circle that way you will end up with four quadrants which can be refined close to the circle.",
                          "url": "https://github.com/idaholab/moose/discussions/21411#discussioncomment-3045092",
                          "updatedAt": "2022-06-29T04:33:12Z",
                          "publishedAt": "2022-06-29T04:33:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Model solves with longer timesteps, but not shorter ones.",
          "author": {
            "login": "EdSheltonUKAEA"
          },
          "bodyText": "Hello\nI have a real conundrum which seems counter-intiutive to how I though MOOSE works.\nI have an input file which runs quickly and efficiently when default timestep dt = 1s.  It takes about a minute to do 1000 timesteps with all timesteps = 1s, i.e. not cutbacks are needed.\nIf I change the defualt timestep to dt = 0.1s, then after a few steps it starts cutting back the timestep to even shorter times, struggles to solve and ultimately reaches the minimum timestep value and fails to complete the solve.\nIf I make dt = 10s, it solves quickly with no cutbacks.  The solution is pretty much the same as for dt = 1s, but coarser as expected.\nI had always thought that if a solve was struggling, making timesteps shorter would help with this.  But here exactly the opposite is happening!\nHas anybody else seen this anomalous behaviour?  Any ideas on what is causing it and how to fix it?\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/23497",
          "updatedAt": "2023-03-09T14:41:14Z",
          "publishedAt": "2023-02-21T15:56:05Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCould you please attach the convergence log for the 0.1s case and the regular case too\nThank you\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5066376",
                  "updatedAt": "2023-02-21T15:57:16Z",
                  "publishedAt": "2023-02-21T15:57:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Thanks for the quick reply!  Can you tell where to find or how to generate the convergence log?  I'll try to get this done later today - but more likely tomorrow.",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5066438",
                          "updatedAt": "2023-02-21T15:59:49Z",
                          "publishedAt": "2023-02-21T15:59:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it's what appears on the console when you run the input basically. If you can attach them rather than paste them",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5066473",
                          "updatedAt": "2023-02-21T16:02:53Z",
                          "publishedAt": "2023-02-21T16:02:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Hi\nThese are the outputs for the start of each run.  I hope I have attached them OK.\nYou will see that with dt=1s, the solve gets to 60s with no problems or cutbacks.\nWith dt=0.1s, it starts having to cut back at 1.4s.\nConvergenceLog1_dt=1,0s_NoCutback_SolveSucceeds.txt\nConvergenceLog2_dt=0,1s_Cutback_SolveFails.txt",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5067875",
                          "updatedAt": "2023-02-21T18:10:53Z",
                          "publishedAt": "2023-02-21T18:10:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It seems the line search dies with the 0.1s timesteps.\nDo you mind turning it off? With line_search = none in Executioner\nWith regards to finding the culprit, can you please paste your executioner block here\nalso can you turn on variable residual output. one can use show_var_residual_norms in Debug block\nhttps://mooseframework.inl.gov//syntax/Debug/index.html",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5070732",
                          "updatedAt": "2023-02-21T22:54:04Z",
                          "publishedAt": "2023-02-21T22:54:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Thanks!  I will try this.\nHere's the Executioner block before making the changes you suggest:\n[Executioner]\n  scheme = bdf2\n  type = Transient\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type -ksp_type -snes_type -pc_factor_shift_type'\n  petsc_options_value = 'lu bcgs newtonls NONZERO'\n  automatic_scaling = true\n  compute_scaling_once = false\n  nl_abs_tol = 1e-15 # This should avoid solve failures when close to steady-state\n  nl_rel_tol = 1e-5\n  dt = 0.1 # s \n  timestep_tolerance = 1e-3 # s\n  end_time = 10 # s\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5074789",
                          "updatedAt": "2023-02-22T09:20:55Z",
                          "publishedAt": "2023-02-22T09:19:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Attached now is the convergence log with \"line_search = none\" included.\nThe lines stating \"Nonlinear solve did not converge due to DIVERGED_LINE_SEARCH ...\" are no longer there (as expected I suppose), but the solve still fails after 1.4 s.\nThere's also an extract of the log from 1.3 s with the Debug residuals command included.\nConvergenceLog3_dt=0,1s_LineSearchOff_SolveFails.txt\nConvergenceLog3a_dt=0,1s_LineSearchOff_DebugResidualsOnFrom_t=1,3s_SolveFails.txt",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5075145",
                          "updatedAt": "2023-02-22T09:51:42Z",
                          "publishedAt": "2023-02-22T09:51:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you turn off re-scaling on every iteration\ncompute_scaling_once = false\nby making it true.\nThis is changing the goal for reducing residual in each variable on every time step .\nIf we look around the failure, you have a lot of variables and some of them are very well converged already.\nI think the key here will be to come up with a good scaling strategy.\nYou can either try manual scaling (in Variables block) or try to group variables in scaling_groups, in the executioner parameters\nhttps://mooseframework.inl.gov/source/executioners/Steady.html#613ee2f4-a2b2-400a-953d-62f040f096dc\nTime Step 14, time = 1.30625, dt = 0.00625\n\nPerforming automatic scaling calculation\n\n 0 Nonlinear |R| = 6.900904e-06\n    |residual|_2 of individual variables:\n                   C_Hm:     3.72346e-20\n                   C_Htr1_1: 2.43051e-06\n                   C_Htr1_2: 8.49783e-08\n                   C_Htr1_3: 6.43852e-06\n                   C_Htr1_4: 5.03338e-07\n                   C_Htr1_5: 2.78968e-09\n                   C_Htr1_6: 2.17528e-12\n                   C_Dm:     8.74736e-24\n                   C_Dtr1_1: 4.90283e-10\n                   C_Dtr1_2: 1.70592e-11\n                   C_Dtr1_3: 1.2877e-09\n                   C_Dtr1_4: 1.00667e-10\n                   C_Dtr1_5: 5.57936e-13\n                   C_Dtr1_6: 4.35055e-16",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5078656",
                          "updatedAt": "2023-02-22T15:47:05Z",
                          "publishedAt": "2023-02-22T15:47:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Changing compute_scaling_once = true doesn't seem to make any difference.  It still breaks down after 1.3 s.\nThe comment about scaling agrees with what colleagues here have suggested.\nI'll need to understand more about how this works, so will take a look at the links.\nAre they any other resources on the MOOSE website or elsewhere which explain scaling calculations and how to apply manual scaling?  It would be really helpful to see a simple example which shows what calculations are being made by the solver, and how scaling helps to make these easier (or even possible) to calculate.",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5079242",
                          "updatedAt": "2023-02-22T16:42:55Z",
                          "publishedAt": "2023-02-22T16:39:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There is not good documentation on scaling\nThis is the best we have\nhttps://mooseframework.inl.gov/moose/source/systems/NonlinearSystemBase.html#scaling\nThe list of parameters of the executioner shows all the options you have.\nSometimes scaling based on the residual instead of the Jacobian helps\nSometimes including off-diagonal terms also help, we've added that for scaling the Navier Stokes equations",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5081718",
                          "updatedAt": "2023-02-22T20:49:04Z",
                          "publishedAt": "2023-02-22T20:49:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "EdSheltonUKAEA"
                          },
                          "bodyText": "Many thanks for all your help with this.  It looks like I need to go and do some reading to understand what might be causing my problem - and if possible fix it.\nI need to take my understanding of the relevant mathematical processes applied in scaling or normalisation from the equivalent of A-level or simple undergraduate statistics in the UK (high school and college in the US?) to what MOOSE is doing when scaling solves to try and achieve an efficient and accurate solution.  I come from a materials science and engineering background, so not familiar with a lot of the applied math(s) and computer science terminology which is used.\nAre there any books or other resources you can recommend?  How have others developed this knowledge, or does it usually just get learnt \"on-the-job\" while using the tools?",
                          "url": "https://github.com/idaholab/moose/discussions/23497#discussioncomment-5085647",
                          "updatedAt": "2023-02-23T08:28:08Z",
                          "publishedAt": "2023-02-23T08:27:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Zero pivot with invertible matrix",
          "author": {
            "login": "Vincent-IUTRS-EOST"
          },
          "bodyText": "Dear moose users and developers,\nI am facing a quite strange behaviour using Moose: it outputs a ZERO_PIVOT error message but my jacobian matrix, read in python and inverted with numpy, is clearly invertible (below is an example with a very small mesh) :\n0 Nonlinear |R| = 1.062497e+03\n      0 Linear |R| = 1.062497e+03\n  Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                 PC failed due to FACTOR_NUMERIC_ZEROPIVOT \nMat Object: () 1 MPI processes\n  type: seqaij\nrow 0: (0, 0.)  (1, 1.66667)  (2, 0.)  (3, 0.)  (4, 0.833333)  (5, 0.) \nrow 1: (0, 1.66667)  (1, 0.)  (2, 0.)  (3, 0.833333)  (4, 0.)  (5, 0.) \nrow 2: (0, 0.)  (1, 0.)  (2, 1.66667)  (3, 0.)  (4, 0.)  (5, 0.833333) \nrow 3: (0, 0.)  (1, 0.833333)  (2, 0.)  (3, 0.)  (4, 1.66667)  (5, 0.) \nrow 4: (0, 0.833333)  (1, 0.)  (2, 0.)  (3, 1.66667)  (4, 0.)  (5, 0.) \nrow 5: (0, 0.)  (1, 0.)  (2, 0.833333)  (3, 0.)  (4, 0.)  (5, 1.66667) \nrow 6: (6, 1.9) \nrow 7: (7, 1.9) \nrow 8: (8, 1.)  (9, 0.)  (10, 0.)  (11, 0.)  (12, 0.)  (13, 0.)  (14, 0.)  (15, 0.)  (22, 0.)  (23, 0.)  (24, 0.)  (25, 0.)  (26, 0.)  (27, 0.) \nrow 9: (8, 0.)  (9, 1.)  (10, 0.)  (11, 0.)  (12, 0.)  (13, 0.)  (14, 0.)  (15, 0.) \nrow 10: (8, 0.)  (9, 0.)  (10, 1.)  (11, 0.)  (12, 0.)  (13, 0.)  (22, 0.)  (23, 0.) \nrow 11: (8, 0.)  (9, 0.)  (10, 0.)  (11, 1.)  (12, 0.)  (13, 0.)  (14, 0.)  (15, 0.)  (22, 0.)  (23, 0.)  (24, 0.)  (25, 0.)  (26, 0.)  (27, 0.) \nrow 12: (8, 0.)  (9, 0.)  (10, 0.)  (11, 0.)  (12, 1.)  (13, 0.)  (14, 0.)  (15, 0.) \nrow 13: (8, 0.)  (9, 0.)  (10, 0.)  (11, 0.)  (12, 0.)  (13, 1.)  (22, 0.)  (23, 0.) \nrow 14: (8, 0.)  (9, 0.)  (11, 0.)  (12, 0.)  (14, 1.)  (15, 0.)  (17, 0.)  (18, 0.)  (20, 0.)  (21, 0.)  (24, 0.)  (25, 0.) \nrow 15: (8, 0.)  (9, 0.)  (11, 0.)  (12, 0.)  (14, 0.)  (15, 1.)  (17, 0.)  (18, 0.)  (20, 0.)  (21, 0.)  (24, 0.)  (25, 0.) \nrow 16: (16, 1.)  (17, 0.)  (18, 0.)  (19, 0.)  (20, 0.)  (21, 0.)  (22, 0.)  (23, 0.) \nrow 17: (14, 0.)  (15, 0.)  (16, 0.)  (17, 1.)  (18, 0.)  (19, 0.)  (20, 0.)  (21, 0.) \nrow 18: (14, 0.)  (15, 0.)  (16, 0.)  (17, 0.)  (18, 1.)  (19, 0.)  (20, 0.)  (21, 0.)  (22, 0.)  (23, 0.)  (24, 0.)  (25, 0.)  (26, 0.)  (27, 0.) \nrow 19: (16, 0.)  (17, 0.)  (18, 0.)  (19, 1.)  (20, 0.)  (21, 0.)  (22, 0.)  (23, 0.) \nrow 20: (14, 0.)  (15, 0.)  (16, 0.)  (17, 0.)  (18, 0.)  (19, 0.)  (20, 1.)  (21, 0.) \nrow 21: (14, 0.)  (15, 0.)  (16, 0.)  (17, 0.)  (18, 0.)  (19, 0.)  (20, 0.)  (21, 1.)  (22, 0.)  (23, 0.)  (24, 0.)  (25, 0.)  (26, 0.)  (27, 0.) \nrow 22: (8, 0.)  (10, 0.)  (11, 0.)  (13, 0.)  (16, 0.)  (18, 0.)  (19, 0.)  (21, 0.)  (22, 1.)  (23, 0.)  (26, 0.)  (27, 0.) \nrow 23: (8, 0.)  (10, 0.)  (11, 0.)  (13, 0.)  (16, 0.)  (18, 0.)  (19, 0.)  (21, 0.)  (22, 0.)  (23, 1.)  (26, 0.)  (27, 0.) \nrow 24: (8, 0.)  (11, 0.)  (14, 0.)  (15, 0.)  (18, 0.)  (21, 0.)  (24, 1.)  (25, 0.) \nrow 25: (8, 0.)  (11, 0.)  (14, 0.)  (15, 0.)  (18, 0.)  (21, 0.)  (24, 0.)  (25, 1.) \nrow 26: (8, 0.)  (11, 0.)  (18, 0.)  (21, 0.)  (22, 0.)  (23, 0.)  (26, 1.)  (27, 0.) \nrow 27: (8, 0.)  (11, 0.)  (18, 0.)  (21, 0.)  (22, 0.)  (23, 0.)  (26, 0.)  (27, 1.) \n\nThere is an old post on this subject (#18893), but my variables run kernels only on blocks where they are defined.\nHere is my input file:\n[Mesh]\n\n  # We read the gmsh 3D mesh\n  [gmsh3D]\n    type = FileMeshGenerator\n    file = \"../mesh/mesh_dev_1.msh\"\n    #allow_renumbering = false\n  []\n\n  # We read the gmsh 1D mesh\n  [gmsh1D]\n    type = FileMeshGenerator\n    file = \"../mesh/mesh_dev_2.msh\"\n    #allow_renumbering = false\n  []\n\n  # We merge the 3D and 1D mesh\n  [merge]\n    type = MeshCollectionGenerator\n    inputs = 'gmsh1D gmsh3D'\n  []\n\n  # We rename the boundaries\n  [merge_boundaries_renamed]\n    type = RenameBoundaryGenerator\n    input = merge\n    old_boundary = '1   2   3   4   5   6   7          9           10         '\n    new_boundary = 'XM  XP  YM  YP  ZM  ZP  PIPE_WALL  PIPE_INPUT  PIPE_OUTPUT'\n  []\n\n  # We rename the subdomains (also called \"blocks\")\n  [final_mesh]\n    type = RenameBlockGenerator\n    input = merge_boundaries_renamed\n    old_block = '8     11  '\n    new_block = 'SOIL  PIPE'\n    show_info = true\n  []\n\n[]\n\n# We put here parameters which are used by several kernels (to avoid repetitions)\n# -------------------------------------------------------------------------------\n\n[GlobalParams]\n  air_pressure     = p\n  air_velocity     = v\n  air_temperature  = ta\n  soil_temperature = ts\n[]\n\n##################################################################################\n# VARIABLES\n##################################################################################\n\n[Variables]\n\n  # Variable describing the behaviour of air\n\n  # Air pressure\n\n  [p]\n    family = LAGRANGE\n    order  = FIRST\n    block  = \"PIPE\"\n  []\n\n  #\u00a0Air velocity\n\n  [v]\n    family = LAGRANGE\n    order  = FIRST\n    block  = \"PIPE\"\n  []\n\n  # Air temperature (must exist in the block SOIL to calculate the interface convective kernel)\n\n  [ta]\n    family = LAGRANGE\n    order  = FIRST\n    block  = \"PIPE\"\n  []\n\n  # Variable describing the behaviour of soil (must exist in the block PIPE to calculate the interface convective kernel)\n\n  # Soil temperature\n\n  [ts]\n    family = LAGRANGE\n    order  = FIRST\n    block  = \"PIPE SOIL\"\n  []\n\n[]\n\n##################################################################################\n# USER OBJECTS\n##################################################################################\n\n[UserObjects]\n\n  [well_wall_nodal_pairing]\n    type = EAHE_Well_To_Wall_Nodal_Pairing\n    execute_on = 'INITIAL'\n    block = 'PIPE'\n    wall_boundary_name = 'PIPE_WALL'\n    pipe_radius = 0.10\n    pipe_radius_tolerance = 0.001\n    verbose = true\n  []\n\n[]\n\n##################################################################################\n# MATERIALS\n##################################################################################\n\n[Materials]\n\n  #\u00a0Soil\n\n  [soil]   #\u00a0soil properties must exist in PIPE because of the interface convective term\n    type  = EAHE_Soil\n    block = 'PIPE SOIL'\n    soil_conductivity = 20.0\n  []\n\n  # Pipe\n\n  [pipe]\n    type  = EAHE_Pipe\n    block = 'PIPE'\n    air_specific_mass               = 1.371\n    air_dynamic_viscosity           = 1.651E-5\n    air_conductivity                = 0.0242\n    air_specific_heat_at_constant_p = 1005.0\n    nusselt_a                       = 0.023\n    nusselt_n                       = 0.80\n    nusselt_m                       = 0.33\n    reynolds_velocity               = 2.0\n    reynolds_length                 = 0.17\n    interface_width                 = 0.002\n  []\n\n[]\n\n##################################################################################\n# KERNELS CALLS\n##################################################################################\n\n[NodalKernels]\n\n  # Kernel to compute the mean value of the soil temperature on the wall and affect it to the current node\n\n  [soil_temperature_in_well_projection]\n    type  = EAHE_Get_Wall_Nodal_Mean_Value\n    variable = ts\n    block = \"PIPE\"\n    pairing_nodes_uo = well_wall_nodal_pairing\n    penalty = 1.9\n  []\n\n[]\n\n\n[Kernels]\n\n  #\u00a0Kernels for the soil energy balance\n\n  [soil_energy_balance]\n    type      = EAHE_Soil_Energy_Balance\n    variable  = ts\n    block     = \"SOIL\"\n  []\n\n  #\u00a0Kernels for the pipe mass balance\n\n  [pipe_mass_balance]\n    type      = EAHE_Pipe_Mass_Balance\n    variable  = p\n    block     = \"PIPE\"\n  []\n\n  #\u00a0Kernels for the pipe momentum balance\n\n  [pipe_momentum_balance]\n    type      = EAHE_Pipe_Momentum_Balance\n    variable  = v\n    block     = \"PIPE\"\n  []\n\n  #\u00a0Kernels for the pipe energy balance\n\n  [pipe_energy_balance]\n    type      = EAHE_Pipe_Energy_Balance\n    variable  = ta\n    block     = \"PIPE\"\n  []\n\n[]\n\n##################################################################################\n# BOUNDARY CONDITIONS\n##################################################################################\n\n[BCs]\n\n  # Soil up and down BCs\n\n  [soil_temperature_top]\n    type = DirichletBC\n    variable = ts\n    boundary = \"ZP\"\n    value = 288.0\n  []\n\n  [soil_temperature_bottom]\n    type = DirichletBC\n    variable = ts\n    boundary = \"ZM\"\n    value = 295.0\n  []\n\n[]\n\n##################################################################################\n# SOLVER AND PRECONDITIONER CONFIGURATION\n##################################################################################\n\n[Executioner]\n  type       = Steady\n  solve_type = NEWTON\n  line_search = basic\n  [./TimeStepper]\n    type = ConstantDT\n    dt = 1.0\n  [../]\n[]\n\n[Preconditioning]\n [./hypre]\n   type = SMP\n   full = true\n   petsc_options_iname = '-pc_type -pc_hypre_type\n                          -ksp_type -ksp_rtol -ksp_max_it\n                          -snes_type -snes_atol -snes_rtol -snes_max_it\n                          -ksp_gmres_restart'\n   petsc_options_value = 'lu boomeramg\n                          fgmres    1e-8  2000\n                          newtonls 1.0E-8   1e-9  60\n                          101'\n   petsc_options = '-ksp_view_mat'\n\n [../]\n[]\n\n##################################################################################\n# OUTPUT CONFIGURATION\n##################################################################################\n\n[Outputs]\n  # print_linear_residuals = false\n  perf_graph = true\n  [exodus]\n    type = Exodus\n    file_base = eahe\n    # execute_on = 'TIMESTEP_END'\n    # execute_on = 'INITIAL LINEAR TIMESTEP_END'\n  []\n  csv = true\n  [dofmap]\n    type = DOFMap\n    execute_on = 'initial'\n  []\n[]\n\n\nI really don't understand what is happening, does anyone can provide any idea ?",
          "url": "https://github.com/idaholab/moose/discussions/23594",
          "updatedAt": "2023-03-09T11:02:24Z",
          "publishedAt": "2023-03-03T12:35:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the application open source? (to see if I can run this)\nHow did you converge to these petsc options? Did you try simpler ones like LU with a mumps mat_solver_package\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23594#discussioncomment-5199168",
                  "updatedAt": "2023-03-04T02:43:53Z",
                  "publishedAt": "2023-03-04T02:43:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Invertible matrix isn't necessarily LU factorizable. Your rows 0, 1, 3, 4 have zero diagonals. You could try adding a small nonzero to the diagonals (there is a petsc option for that) or adding a small nonzero to your equations corresponding to those rows.",
                  "url": "https://github.com/idaholab/moose/discussions/23594#discussioncomment-5201328",
                  "updatedAt": "2023-03-04T14:33:04Z",
                  "publishedAt": "2023-03-04T11:17:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "-pc_factor_shift NONZERO for the former",
                          "url": "https://github.com/idaholab/moose/discussions/23594#discussioncomment-5202187",
                          "updatedAt": "2023-03-04T14:25:13Z",
                          "publishedAt": "2023-03-04T14:25:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Vincent-IUTRS-EOST"
                  },
                  "bodyText": "Hello,\nI feel a little bit guilty of missing this basic mathematical result... Anyway, adding a little diagonal jacobian entry (~1.0-9) solved the problem .\nThank you very much for your answers.",
                  "url": "https://github.com/idaholab/moose/discussions/23594#discussioncomment-5253063",
                  "updatedAt": "2023-03-09T11:00:03Z",
                  "publishedAt": "2023-03-09T11:00:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PBP preconditioner",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello all,\nWhat parameters can be set for preprocessor when using PBP? Where else do I need to find all the available parameters? thank you.",
          "url": "https://github.com/idaholab/moose/discussions/23668",
          "updatedAt": "2023-04-29T03:36:03Z",
          "publishedAt": "2023-03-09T03:23:24Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nlist of parameters at the bottom of this page\nhttps://mooseframework.inl.gov/source/preconditioners/PhysicsBasedPreconditioner.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23668#discussioncomment-5248978",
                  "updatedAt": "2023-03-09T03:28:31Z",
                  "publishedAt": "2023-03-09T03:28:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nanguaxiaofendui"
                          },
                          "bodyText": "thank you",
                          "url": "https://github.com/idaholab/moose/discussions/23668#discussioncomment-5249024",
                          "updatedAt": "2023-03-09T03:35:01Z",
                          "publishedAt": "2023-03-09T03:35:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it s not super-finished in terms of documentation but examples (at bottom of page) will help too",
                          "url": "https://github.com/idaholab/moose/discussions/23668#discussioncomment-5249032",
                          "updatedAt": "2023-03-09T03:36:01Z",
                          "publishedAt": "2023-03-09T03:36:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nanguaxiaofendui"
                          },
                          "bodyText": "thanks",
                          "url": "https://github.com/idaholab/moose/discussions/23668#discussioncomment-5250389",
                          "updatedAt": "2023-03-09T06:13:08Z",
                          "publishedAt": "2023-03-09T06:13:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Preconditioners in Moose",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello all,\nI'd like to ask you about the difference between SMP,FSP and PBP. Can you explain how to choose these preprocessors? Are there any references or specific examples? Thank you very much.",
          "url": "https://github.com/idaholab/moose/discussions/23635",
          "updatedAt": "2023-04-29T03:36:07Z",
          "publishedAt": "2023-03-07T13:43:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease refer to their respective documentation\nhttps://mooseframework.inl.gov/syntax/Preconditioning/index.html\nYou need to search the litterature for the postprocessing that works for your problem then reproduce it with one of the MOOSE ones.\nFor example, for the Navier Stokes equations, a field split between pressure and velocity is a published solution we have tried in MOOSE NS\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23635#discussioncomment-5229995",
                  "updatedAt": "2023-03-07T15:19:39Z",
                  "publishedAt": "2023-03-07T15:19:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nanguaxiaofendui"
                          },
                          "bodyText": "thank you very much",
                          "url": "https://github.com/idaholab/moose/discussions/23635#discussioncomment-5248863",
                          "updatedAt": "2023-03-09T03:04:15Z",
                          "publishedAt": "2023-03-09T03:04:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}