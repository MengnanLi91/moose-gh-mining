{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wOS0xMVQxNTo1OToyMy0wNTowMM4AQtZg"
    },
    "edges": [
      {
        "node": {
          "title": "general question",
          "author": {
            "login": "ahmad681"
          },
          "bodyText": "Hi, I have a question on how to utilize the MOOSE software.\nI am running kinetic monte carlo simulation of precipitate in alloys. I want to include the elastic lattice mismatch of coherent interfaces between phases. So I want to run kMC, get output and analyze if needed to have elastic strain energy solution at lattice points. if yes, then pass on the output in a continuum media fashion to MOOSE and solve the mechanical equilibrium problem, evaluate the stresses and strains, and the elastic strain energy, then feed back to the KMC input to be used for the probability calculations. Is there any helpful source on how to connect external code for specific calculations to MOOSE? Many thanks in advance.",
          "url": "https://github.com/idaholab/moose/discussions/22084",
          "updatedAt": "2022-09-29T16:51:16Z",
          "publishedAt": "2022-09-13T18:09:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nQ&A general is likely the wrong category for this. Is this a phase field simulation issue? Which domain does this belong in?\n@dschwen do we have kinetic monte carlo\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3639045",
                  "updatedAt": "2022-09-13T21:06:01Z",
                  "publishedAt": "2022-09-13T21:06:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ahmad681"
                          },
                          "bodyText": "oops sorry about that, no, it's actually just kinetic monte carlo. so every atom in the space has a direction it can diffuse to. I select an atom and direction to move to based on kMC algorithm. So I have the code working for that. Now if I want to include elastic stresses, it would affect the hopping rate calculations. So I was wondering if I can couple MOOSE with my kMC code. thanks a lot",
                          "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3639073",
                          "updatedAt": "2022-09-13T21:10:53Z",
                          "publishedAt": "2022-09-13T21:10:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is it an external code? or is it built in MOOSE?\nAre you going to transfer a field of value over a mesh?",
                          "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3639498",
                          "updatedAt": "2022-09-13T22:35:31Z",
                          "publishedAt": "2022-09-13T22:35:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ahmad681"
                          },
                          "bodyText": "It is an external code I wrote. I guess the hypothetical idea is to transfer field output from kMC to the mesh in MOOSE in every kMC step.",
                          "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3639513",
                          "updatedAt": "2022-09-13T22:38:43Z",
                          "publishedAt": "2022-09-13T22:38:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok you will want to look at coupling in external application. The external problem is the official way to do this but there are other ways\nhttps://mooseframework.inl.gov/application_development/moose_wrapped_apps.html\nPlease have a look at these posts:\n#16438 (external petsc problem example)\n#19413 (working with an external library)\n#16497 (examples of external apps at the bottom)",
                          "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3639540",
                          "updatedAt": "2022-09-13T22:47:30Z",
                          "publishedAt": "2022-09-13T22:47:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ahmad681"
                          },
                          "bodyText": "Awesome, I will check those out. Many thanks",
                          "url": "https://github.com/idaholab/moose/discussions/22084#discussioncomment-3640491",
                          "updatedAt": "2022-09-14T02:39:37Z",
                          "publishedAt": "2022-09-14T02:39:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to obtain creep curve (strain vs time graph) from the combined_creep_plasticity problem",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nSo I\u2019ve been studying the combined _creep_plasticity example for a while now. Here is the link to the input file: (https://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/test/tests/combined_creep_plasticity/combined_creep_plasticity.i)\nMy biggest challenge thus far is how to plot the total strain obtained from this example against the time so that I can obtain the following graph from the corresponding literature:\n\nI have tried post-processing the outputs following a similar problem reported earlier (ticket #17531) without success due to my limited knowledge of the post-processing system in MOOSE. Your help will be deeply appreciated. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/22073",
          "updatedAt": "2022-09-14T00:25:06Z",
          "publishedAt": "2022-09-12T18:25:07Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "batodon"
                  },
                  "bodyText": "Hello @GiudGiud  any help with this, pls?",
                  "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3637238",
                  "updatedAt": "2022-09-13T16:50:53Z",
                  "publishedAt": "2022-09-13T16:50:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you use the tensor mechanics action parameters to output it?",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3637566",
                          "updatedAt": "2022-09-13T17:33:10Z",
                          "publishedAt": "2022-09-13T17:33:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks @GiudGiud. Yes (see below). Actually, I can see the strains in paraview, but I don't know how to output a graph that have the strains plotted against the times.\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 1\n  ny = 1\n  nz = 1\n[]\n\n[Modules/TensorMechanics/Master]\n  [./all]\n    strain = FINITE\n    incremental = true\n    add_variables = true\n    generate_output = 'stress_yy elastic_strain_yy creep_strain_yy plastic_strain_yy'\n  [../]\n[]\n\n[Functions]\n  [./top_pull]\n    type = PiecewiseLinear\n    x = '  0   1   1.5'\n    y = '-20 -40   -20'\n  [../]\n\n  [./dts]\n    type = PiecewiseLinear\n    x = '0        0.5    1.0    1.5'\n    y = '0.015  0.015  0.005  0.005'\n  [../]\n[]\n\n[BCs]\n  [./u_top_pull]\n    type = Pressure\n    variable = disp_y\n    boundary = top\n    factor = 1\n    function = top_pull\n  [../]\n  [./u_bottom_fix]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0.0\n  [../]\n  [./u_yz_fix]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0.0\n  [../]\n  [./u_xy_fix]\n    type = DirichletBC\n    variable = disp_z\n    boundary = back\n    value = 0.0\n  [../]\n[]\n\n[Materials]\n  [./elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    block = 0\n    youngs_modulus = 1e3\n    poissons_ratio = 0.3\n  [../]\n  [./creep_plas]\n    type = ComputeMultipleInelasticStress\n    block = 0\n    tangent_operator = elastic\n    inelastic_models = 'creep plas'\n    max_iterations = 50\n    absolute_tolerance = 1e-05\n    combined_inelastic_strain_weights = '0.0 1.0'\n  [../]\n  [./creep]\n    type = PowerLawCreepStressUpdate\n    block = 0\n    coefficient = 0.5e-7\n    n_exponent = 5\n    m_exponent = -0.5\n    activation_energy = 0\n  [../]\n  [./plas]\n    type = IsotropicPlasticityStressUpdate\n    block = 0\n    hardening_constant = 100\n    yield_stress = 20\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n\n  #Preconditioned JFNK (default)\n  solve_type = 'PJFNK'\n\n  petsc_options = '-snes_ksp'\n  petsc_options_iname = '-ksp_gmres_restart'\n  petsc_options_value = '101'\n\n  line_search = 'none'\n\n  l_max_its = 20\n  nl_max_its = 6\n  nl_rel_tol = 1e-6\n  nl_abs_tol = 1e-10\n  l_tol = 1e-5\n  start_time = 0.0\n  end_time = 1.5\n\n  [./TimeStepper]\n    type = FunctionDT\n    function = dts\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3638517",
                          "updatedAt": "2022-09-13T21:04:04Z",
                          "publishedAt": "2022-09-13T19:44:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "where do you want them plotted?\nin one location or just the max or an average?",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3639039",
                          "updatedAt": "2022-09-13T21:04:36Z",
                          "publishedAt": "2022-09-13T21:04:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi, one location will do.",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3639124",
                          "updatedAt": "2022-09-13T21:20:12Z",
                          "publishedAt": "2022-09-13T21:20:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok then use a postprocessor to sample that value.\nYou can try with pointvalue on the auxvariables that get added by the output =  parameter of the TM action\nhttps://mooseframework.inl.gov/source/postprocessors/PointValue.html",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3639459",
                          "updatedAt": "2022-09-13T22:24:07Z",
                          "publishedAt": "2022-09-13T22:24:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "@GiudGiud Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/22073#discussioncomment-3639956",
                          "updatedAt": "2022-09-14T00:25:07Z",
                          "publishedAt": "2022-09-14T00:25:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compile problem",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Howdy,\nwhat is wrong with my compilation below? Thanks in advance.\n(moose) yangyang@yangyang-VirtualBox:~/projects/moskito-develop$ make -j4\nRebuilding symlinks in /home/yangyang/projects/moskito-develop/build/header_symlinks\nCreating Unity Directory /home/yangyang/projects/moskito-develop/build/unity_src\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/src/base/MoskitoApp.C...\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/src/main.C...\nLinking Library /home/yangyang/projects/moskito-develop/test/lib/libmoskito_test-opt.la...\nCreating Unity /home/yangyang/projects/moskito-develop/build/unity_src/userobjects_Unity.C\nCreating Unity /home/yangyang/projects/moskito-develop/build/unity_src/kernels_Unity.C\nCreating Unity /home/yangyang/projects/moskito-develop/build/unity_src/material_Unity.C\nCreating Unity /home/yangyang/projects/moskito-develop/build/unity_src/utils_Unity.C\nCreating Unity /home/yangyang/projects/moskito-develop/build/unity_src/bcs_Unity.C\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/build/unity_src/userobjects_Unity.C...\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/build/unity_src/kernels_Unity.C...\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/build/unity_src/material_Unity.C...\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/build/unity_src/utils_Unity.C...\nCompiling C++ (in opt mode) /home/yangyang/projects/moskito-develop/build/unity_src/bcs_Unity.C...\nLinking Library /home/yangyang/projects/moskito-develop/lib/libmoskito-opt.la...\nLinking Executable /home/yangyang/projects/moskito-develop/moskito-opt...\n/home/yangyang/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/yangyang/projects/moskito-develop/lib/libmoskito-opt.so: undefined reference to `InputParameters validParams<Material>()'\ncollect2: error: ld returned 1 exit status\nmake: *** [/home/yangyang/projects/moose/framework/app.mk:416: /home/yangyang/projects/moskito-develop/moskito-opt] Error 1\n(moose) yangyang@yangyang-VirtualBox:~/projects/moskito-develop$",
          "url": "https://github.com/idaholab/moose/discussions/22080",
          "updatedAt": "2022-09-13T21:25:26Z",
          "publishedAt": "2022-09-13T09:32:05Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Oops-Qiao"
                  },
                  "bodyText": "Below is when I test moose I got an error as well.\nmeshgenerators/distributed_rectilinear/dmg_displaced_mesh.pbc/adaptivity_nemesis ............. [min_cpus=4] OK\nmeshgenerators/distributed_rectilinear/dmg_displaced_mesh.pbc/adaptivity_autoscaling ...................... OK\nmeshgenerators/generated_mesh_generator.both/name ........................................... FAILED (EXODIFF)\n--------------------------------------------------------------------------------------------------------------\nRan 3283 tests in 1582.2 seconds. Average test time 1.5 seconds, maximum test time 48.8 seconds.\n3282 passed, 81 skipped, 0 pending, 1 FAILED",
                  "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636541",
                  "updatedAt": "2022-09-13T15:42:14Z",
                  "publishedAt": "2022-09-13T15:27:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease use triple quotes to format the text you paste. It's in the posting guidelines\nis moskito open-source? We've been seeing a lot of these validParams errors, I d like to take a look\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636676",
                  "updatedAt": "2022-09-13T15:43:09Z",
                  "publishedAt": "2022-09-13T15:43:08Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Hi Guillaume\nYepp, it is open, pls see the link below\nhttps://github.com/MGK-Lab/moskito/tree/master\nQiao",
                          "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636701",
                          "updatedAt": "2022-09-13T15:45:31Z",
                          "publishedAt": "2022-09-13T15:45:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok it's out of date. You need to do what is outlined in this post\nhttps://mooseframework.inl.gov/newsletter/2020_04.html#!\nto make it work again",
                          "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636810",
                          "updatedAt": "2022-09-13T15:56:39Z",
                          "publishedAt": "2022-09-13T15:56:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "please contribute the fix to their repository if you can",
                          "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636815",
                          "updatedAt": "2022-09-13T15:57:14Z",
                          "publishedAt": "2022-09-13T15:57:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Yepp, Thanks a lot Guillaume! Great guy!",
                          "url": "https://github.com/idaholab/moose/discussions/22080#discussioncomment-3636830",
                          "updatedAt": "2022-09-13T15:59:13Z",
                          "publishedAt": "2022-09-13T15:59:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "what should be written in the <> of getUserObject",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Howdy,\nI am reading a code as follows. My question is In the Material, why  eos_uo(getUserObject<EOS1P>(\"eos_uo\")) but not  eos_uo(getUserObject<EOS1P_IdealFluid>(\"eos_uo\"))? Is there any documentation related to this I can find in moose website?\nI heard from others that the reason is that EOS1P_IdealFluid inherits from EOS1P, so if the parent object name is used, all the children objects can be used. We can also use the the child object name but only that child object can be used. Is this how it works in moose? Thank you.\n--------------------------------------------------------------------------\nInput File:\n[UserObjects]\n  [./eos]\n    type = **EOS1P_IdealFluid**\n    bulk_modulus = 2e+012\n  [../]\n[]\n[Materials]\n  [./area0]\n    type = FluidWell_1p1c\n    eos_uo = eos\n  [../]\n[]\n----------------------------------------------------------------------------\nMaterial:\nFluidWell_1p1c::FluidWell_1p1c(const InputParameters & parameters)\n  : FluidWellGeneral(parameters),\n    eos_uo(getUserObject<**EOS1P**>(\"eos_uo\")),\n{\n}\n---------------------------------------------------------------------------\nUserObject:\n**EOS1P_IdealFluid**::EOS1P_IdealFluid(const InputParameters & parameters)\n  : EOS1P(parameters),\n{\n}\n---------------------------------------------------------------------------",
          "url": "https://github.com/idaholab/moose/discussions/22079",
          "updatedAt": "2022-09-13T15:52:35Z",
          "publishedAt": "2022-09-13T08:55:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYes we use object oriented programming in MOOSE, it's the OO in MOOSE!\nBasically if your class can work with a base/parent class, then it can work with all the derived/child classes.\nPlease read up on this programming concept, it ll help you understand MOOSE better\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22079#discussioncomment-3636727",
                  "updatedAt": "2022-09-13T15:49:03Z",
                  "publishedAt": "2022-09-13T15:49:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Unbelievable smart! Thank you Guilaume.",
                          "url": "https://github.com/idaholab/moose/discussions/22079#discussioncomment-3636762",
                          "updatedAt": "2022-09-13T15:52:36Z",
                          "publishedAt": "2022-09-13T15:52:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Questions about paper 'grand-potential-based phase-field approach'",
          "author": {
            "login": "GuoChi-Li"
          },
          "bodyText": "Hi MOOSE developers,\nI have questions about the paper 'Solidification and grain formation in alloys: a 2D application of the grand-potential-based phase-field approach' and I have sent an email to the author of this paper. However, I didn't get a reply, so I try to ask questions here. Any help is appreciated. The following texts are the email context.\nI am a Ph.D. student majoring in materials science and engineering and I am new to this field. Recently, I read your work published in Modelling and Simulation in Materials Science and Engineering journal. The title of this paper is \u2018Solidification and grain formation in alloys: a 2D application of the grand-potential-based phase-field approach.\u2019\nI think this is an excellent starting point for my research. I want to simulate the dendrite growth under different laser heating paths. Therefore, I use the demo file in the MOOSE directory (moose/modules/phase_field/examples/anisotropic_interfaces/GrandPotentialPlanarGrowth.i) as my start and try to reproduce your work, especially figure 12, figure 13, and figure 14 in the paper.\nAfter I modify the input file, try to implement the antitrapping current and Langevin noise in the kernel. I find it hard to converge, so I change the input parameters. I am using the parameters in \u2018GrandPotentialPlanarGrowth.i\u2019 and only add antitrapping current and Langevin noise. The attachments are my input file and the final output log. Also, I have several questions related to this work.\n\nThe mu in the code (in GenericConstantMaterial) is the bulk energy coefficient, right?\nHow do you determine the \u2018-aW\u2019 in the antitrapping current term? I see this value is 0.8 in \u2018GrandPotentialAnisotropyAntitrap.i\u2019 but I do see you use different values (aW = 0.113, 0.095, 0.071) when you discuss the effect of antitrapping current in figure 10. I am not sure which value I should use.\nHow do you implement the wavy surface in figure 12? Is it possible to use 'FunctionIC' to implement this in MOOSE?\nIs there any possible ways to speed up the convergence?\n\nThank you for your time. Any help is appreciated.\nSincerely,\nGuo-Chi Li\nInput_file.log\noutput_log.log",
          "url": "https://github.com/idaholab/moose/discussions/22014",
          "updatedAt": "2022-09-13T11:36:33Z",
          "publishedAt": "2022-09-06T13:09:14Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "SudiptaBiswas"
                  },
                  "bodyText": "The mu in the code (in GenericConstantMaterial) is the bulk energy coefficient, right?\n\nThat is correct.\n\nHow do you determine the \u2018-aW\u2019 in the antitrapping current term? I see this value is 0.8 in \u2018GrandPotentialAnisotropyAntitrap.i\u2019 but I do see you use different values (aW = 0.113, 0.095, 0.071) when you discuss the effect of antitrapping current in figure 10. I am not sure which value I should use.\n\nW is the interface thickness, a is the antitrapping coefficients. The paper presents a parametric study on how this affects solidification behavior. The actual values could vary with the problem setup. The paper discusses this briefly (check out Appendix C).\n\nHow do you implement the wavy surface in figure 12? Is it possible to use 'FunctionIC' to implement this in MOOSE?\n\nYou probably meant figure 14. I used a Sine function to set it up.\n\nIs there any possible ways to speed up the convergence?\n\nIn general, complex alloy solidification problems can be hard to solve. You can non-dimensionalize your model parameters to improve that.",
                  "url": "https://github.com/idaholab/moose/discussions/22014#discussioncomment-3610818",
                  "updatedAt": "2022-09-09T17:55:13Z",
                  "publishedAt": "2022-09-09T17:55:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GuoChi-Li"
                          },
                          "bodyText": "Hi SudiptaBiswas,\nThanks for your detailed explanations. I tried to reply to you in an organized way.\n\n'W' is the interface thickness, 'a' is the antitrapping coefficients. The paper presents a parametric study on how this affects solidification behavior. The actual values could vary with the problem setup. The paper discusses this briefly (check out Appendix C).\n\nYes. I have read that part. I need to find those references since I am unfamiliar with this part. I will check them out.\n\nYou probably meant figure 14. I used a Sine function to set it up.\n\nYes. I am discussing figure 14. I mean, I think you probably implement Sine function using something like parsed_function or FunctionIC in MOOSE. Is that right?\n\nIn general, complex alloy solidification problems can be hard to solve. You can non-dimensionalize your model parameters to improve that.\n\nThanks. I will look into this.\nIs it possible to provide the input files you used in this work? It is ok if you still need them for your future publications and can't release them now.\nSincerely,\nGuo-Chi Li",
                          "url": "https://github.com/idaholab/moose/discussions/22014#discussioncomment-3623898",
                          "updatedAt": "2022-09-12T08:47:23Z",
                          "publishedAt": "2022-09-12T08:47:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "Yeah, you can use ParsedFunction and FunctionIC to set up the initial condition. The input files checked in as examples are a good place to start. Try to modify one thing at a time as you progress towards a different solidification scenario.",
                          "url": "https://github.com/idaholab/moose/discussions/22014#discussioncomment-3628123",
                          "updatedAt": "2022-09-12T22:25:16Z",
                          "publishedAt": "2022-09-12T17:28:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GuoChi-Li"
                          },
                          "bodyText": "Thank you for your help. I will try to do it.",
                          "url": "https://github.com/idaholab/moose/discussions/22014#discussioncomment-3634556",
                          "updatedAt": "2022-09-13T11:36:29Z",
                          "publishedAt": "2022-09-13T11:36:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE Team job opening",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "Hello!\nWe have a job opening for a computational scientist on the MOOSE team!\nAll the details about the posting: inl.taleo.net\nIf you enjoy open-source software that benefits thousands of researchers worldwide, please apply!\nGuillaume for the MOOSE team",
          "url": "https://github.com/idaholab/moose/discussions/22077",
          "updatedAt": "2022-09-13T02:46:11Z",
          "publishedAt": "2022-09-13T02:44:55Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Working with ADVectorVariableValue",
          "author": {
            "login": "aarograh"
          },
          "bodyText": "I'm working on updating submodules and MOOSE environment for my app.  The update is a small step forward (moose-libmesh version updated from 2022.03.18 to 2022.03.28) but breaks several of my tests with this error:\nFloating point exception signaled (floating point divide by zero)!\n\nTo track this down, compile in debug mode, then in gdb do:\n  break libmesh_handleFPE\n  run ...\n  bt\n\nAttaching the debugger and following the instructions given by the error indicates that the error occurs at this line:\nif (_velocity[_qp].norm() < 1.e-8)\n\n_velocity is a ADVectorVariableValue object.  It seems that in the update, the result of the .norm() function call has changed in some way.  So I have 2 questions:\n\nI cannot for the life of me determine how to print out the components of _velocity[_qp].  It looks like it's ultimately a templated libMesh object.  I figure if I could just inspect the object a bit, I might be able to determine what changed and fix it.\nAny ideas what may have changed with the norm function during that update?",
          "url": "https://github.com/idaholab/moose/discussions/22072",
          "updatedAt": "2022-09-29T16:51:56Z",
          "publishedAt": "2022-09-12T16:36:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nno idea and I doubt it. @lindsayad ?\nI'm guessing the type here, but likely you can use _console << _velocity[_qp](0) << \" \" << _velocity[_qp](1);\n\nYou probably do not need to compute the norm of an ADReal(Vector) which could be going to 0. At 0, this operation is not differntiable.\nLikely you only need to take the norm of the Real(Vector), so do:\n_velocity[_qp].value().norm() < 1.e-8\n\nor use the normsq() function, avoiding the square root\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22072#discussioncomment-3627910",
                  "updatedAt": "2022-09-12T16:50:33Z",
                  "publishedAt": "2022-09-12T16:50:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aarograh"
                          },
                          "bodyText": "Ok, the norm_sq function looks like it does the trick.  I'm guessing the .value() suggestion would also work.  Good to know about both of those!  Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22072#discussioncomment-3628047",
                          "updatedAt": "2022-09-12T17:14:17Z",
                          "publishedAt": "2022-09-12T17:14:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "More likely is that we added a new FloatingPointExceptionGuard in MOOSE that caught floating point exceptions that weren't being caught before",
                          "url": "https://github.com/idaholab/moose/discussions/22072#discussioncomment-3628248",
                          "updatedAt": "2022-09-12T17:46:53Z",
                          "publishedAt": "2022-09-12T17:46:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "want to create the issue or should I do it?",
                          "url": "https://github.com/idaholab/moose/discussions/22072#discussioncomment-3628317",
                          "updatedAt": "2022-09-12T17:58:01Z",
                          "publishedAt": "2022-09-12T17:58:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok I created #22076",
                          "url": "https://github.com/idaholab/moose/discussions/22072#discussioncomment-3631056",
                          "updatedAt": "2022-09-14T20:41:27Z",
                          "publishedAt": "2022-09-13T02:21:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Plotting material output against time step",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello, how do I plot my material output (example, stress_zz) against my time steps? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/22067",
          "updatedAt": "2022-09-13T02:18:11Z",
          "publishedAt": "2022-09-11T14:56:47Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou can use the output parameter to output material properties to exodus for example. Then you can postprocess the exodus to plot it with time\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22067#discussioncomment-3621054",
                  "updatedAt": "2022-09-11T20:50:53Z",
                  "publishedAt": "2022-09-11T20:50:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thank you. I'm actually outputting my material properties to csv. Does the vectorpostprocessor currently support vectors or tensors now? it seems I cannot postprocess my strains or stresses because they are tensor values (see attached).",
                          "url": "https://github.com/idaholab/moose/discussions/22067#discussioncomment-3621224",
                          "updatedAt": "2022-09-11T21:48:45Z",
                          "publishedAt": "2022-09-11T21:48:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no it doesnt.\nThis would not be very hard to add and would be a welcome contribution, as I wrote on this page 9 months ago :)",
                          "url": "https://github.com/idaholab/moose/discussions/22067#discussioncomment-3621670",
                          "updatedAt": "2022-09-12T00:36:08Z",
                          "publishedAt": "2022-09-12T00:36:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "need some support for understanding the code",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Hello smart guys,\nI just look at some codes and want to get some help from you to understand it better (see attached figure).\nCould you breifly describe what is going on with p0, p1 and different cases? Thank you.\nKind regards,\nQia",
          "url": "https://github.com/idaholab/moose/discussions/22050",
          "updatedAt": "2022-09-11T23:36:06Z",
          "publishedAt": "2022-09-08T14:22:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Howdy\nPlease stop posting screenshots, this is text, it can be posted in a code snippet\ndirection can be X, -X, Y etc\ndepending on this choice, the definition of the vector from p0 to p1 is chosen different based on how p0 and p1 are ordered along the axis\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3595571",
                  "updatedAt": "2022-09-08T14:47:32Z",
                  "publishedAt": "2022-09-08T14:47:31Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Howdy\uff0c\nOk\uff0cI will use code snippet in the future. Thank you. :)\nBut just to confirm again,   what does it mean with p0 = _current_elem->point(0);  p1 = _current_elem->point(1).",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3595738",
                          "updatedAt": "2022-09-08T15:03:36Z",
                          "publishedAt": "2022-09-08T15:03:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "(0) or (1) retrieves the coordinate along the X and Y axis respectively",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3597909",
                          "updatedAt": "2022-09-08T17:34:34Z",
                          "publishedAt": "2022-09-08T17:34:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "umm, well, if (0) or (1) retrieves the coordinate along the X and Y axis respectively, in case 1, he wrote p=p0-p1 which means a X coordinate-Y coordinate? how to understand this?\nBy the way, from case 1 to case 6, how to understand p0(0), p0(1) and p0(2)?\nI really appreciate your help Guillaume. Sorry, I am a beginner.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3601706",
                          "updatedAt": "2022-09-08T22:42:22Z",
                          "publishedAt": "2022-09-08T22:42:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "well they're initializing p0, a vector with a point(0) so it assigns the value to all coordinates of that vector.\nthen the operations on p0 and p1 (p0-p1 for example) are vector operations as well.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3601876",
                          "updatedAt": "2022-09-08T22:47:03Z",
                          "publishedAt": "2022-09-08T22:46:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont know how to interpret that particular code. You can try different inputs and look at the outputs. What is this for?",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3601878",
                          "updatedAt": "2022-09-08T22:47:28Z",
                          "publishedAt": "2022-09-08T22:47:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Thank you very much and I really appreciate the patience from you and your team. Thank you Guillaume.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3605445",
                          "updatedAt": "2022-09-09T08:32:06Z",
                          "publishedAt": "2022-09-09T08:32:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The point class is defined in libmesh not moose. So you ll have to take a look at the libmesh doxygen",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3621129",
                          "updatedAt": "2022-09-11T21:15:16Z",
                          "publishedAt": "2022-09-11T21:15:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Ok, I see. Thank you very much Guillaume.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3621284",
                          "updatedAt": "2022-09-11T22:06:56Z",
                          "publishedAt": "2022-09-11T22:06:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "who wrote this code? the assignment inside the ternary is rather unusual. I suggest pulling out the p =  to get\nconst int i = (direction / 2) + 1;\nconst int d = direction % 2;\np = (p0(i) < p1(i)) == (d == 0) ? p0 - p1 : p1 - p0;",
                  "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3595806",
                  "updatedAt": "2022-09-08T15:09:46Z",
                  "publishedAt": "2022-09-08T15:09:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I agree with @dschwen . @Oops-Qiao you've mentioned several times that you are just beginning to learn MOOSE. I think learning MOOSE from code in an external app that hasn't been peer-reviewed isn't your best option. Based on your questions, I feel like your best starting point is probably to go through the C++ fundamentals https://mooseframework.inl.gov/help/c++/index.html. You can also dig into the doxygen documentations on this page https://mooseframework.inl.gov/framework_development/index.html which will answer most of the questions you answered.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3602959",
                          "updatedAt": "2022-09-09T02:23:03Z",
                          "publishedAt": "2022-09-09T02:23:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Yeah, thanks a lot for the links Tianchen, that is really helpful to me.",
                          "url": "https://github.com/idaholab/moose/discussions/22050#discussioncomment-3605457",
                          "updatedAt": "2022-09-09T08:33:22Z",
                          "publishedAt": "2022-09-09T08:33:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to calculate the heat flux of a surface",
          "author": {
            "login": "suqingji"
          },
          "bodyText": "Hi,\nI have finished the simulation of a conjugate heat transfer problem on complex geometry by the FEM NS module. Now I want to calculate the heat flux on the solid and fluid coupled surface. What should I use to calculate it? In Postprocessors I have not found a suitable class to finish it.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/22065",
          "updatedAt": "2022-09-29T16:51:24Z",
          "publishedAt": "2022-09-10T09:41:36Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat object are you using for the heat transfer between the fluid and the solid?\nThe postprocessor will have to use the same discretization / formulation as that kernel/interface kernel\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22065#discussioncomment-3621082",
                  "updatedAt": "2022-09-11T20:59:23Z",
                  "publishedAt": "2022-09-11T20:59:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}