{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0xMC0xNVQxMDoxMTo1NS0wNTowMM4AbzNA"
    },
    "edges": [
      {
        "node": {
          "title": "Initialize old Material Property",
          "author": {
            "login": "delpierrena"
          },
          "bodyText": "Hello everyone,\nI am currently trying to implement the particle finite element method using the Moose FEM solver.\nThe application could be landslide, earthen dam failures, footing etc.. The basic idea of the method is to remesh when necessary to allow for modelling large deformations problems. The remeshing algorithm is working fine but I am struggling harder with reinitializing the moose simulation from a past solution.\nSince our problem involves large deformations,  we need to remap a lot of quantities from one mesh to another. So we run a simulation, retrieve the plastic strain, internal parameter, stresses, velocities and accelerations and we want to remap these into the new displaced mesh.\nThe issue we face is that we are unable to initialize the old material properties before starting the simulation. We modified the initQpStatefulProperties function from the ComputeMultiPlasticityStress class in order to initialize the plastic_strain, the stress and the intnl parameter but this is obviously not the way to go.\nExample : We performed a slope failure simulation. We output some quantities at a given point in the slope after 0.1s of simulation. Here the elastic strain xx (es_xx) the plastic strain xx (ps_xx) the strain xx (s_xx) and the stress yy.\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+\n| time           | es_xx          | ps_xx          | s_xx           | stress_yy      |\n+----------------+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e-02 |  -1.467515e-05 |   1.252200e-05 |  -2.153149e-06 |  -3.078785e+04 |\n|   2.000000e-02 |  -1.678404e-05 |   1.252200e-05 |  -4.262041e-06 |  -3.115457e+04 |\n|   3.000000e-02 |  -4.448685e-06 |   1.252200e-05 |   8.073315e-06 |  -3.157687e+04 |\n|   4.000000e-02 |   2.029382e-05 |   1.252200e-05 |   3.281582e-05 |  -3.271324e+04 |\n|   5.000000e-02 |   4.244592e-05 |   1.252200e-05 |   5.496792e-05 |  -3.546752e+04 |\n|   6.000000e-02 |   7.036422e-05 |   1.252200e-05 |   8.288622e-05 |  -3.904428e+04 |\n|   7.000000e-02 |   1.045518e-04 |   1.252200e-05 |   1.170738e-04 |  -4.171049e+04 |\n|   8.000000e-02 |   1.193600e-04 |   1.252200e-05 |   1.318820e-04 |  -4.339706e+04 |\n|   9.000000e-02 |   1.225850e-04 |   2.543216e-05 |   1.480172e-04 |  -4.536374e+04 |\n|   1.000000e-01 |   1.144755e-04 |   8.649673e-05 |   2.009722e-04 |  -4.688521e+04 |\n+----------------+----------------+----------------+----------------+----------------+\n\nThen, we want to restart the simulation based on our modified version of InitQpStatefulProperties but the results are clearly wrong since the strain is not the sum of the elastic and of the plastic contribution and this, since the first step :\nPostprocessor Values: +----------------+----------------+----------------+----------------+----------------+ | time           | es_xx          | ps_xx          | s_xx           | stress_yy      | +----------------+----------------+----------------+----------------+----------------+ |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 | |   1.000000e-02 |   3.105196e-05 |   1.682521e-04 |   2.885585e-05 |  -3.673527e+04 | +----------------+----------------+----------------+----------------+----------------+\nWe believe that the issue is coming from the reinitialization of some fields (most probably the plastic strain ). In particular, when reinitializing the finite element problem, we cannot initialize the old properties needed for the return map algorithm. Do you have any idea of how we could initialize these old material properties ?",
          "url": "https://github.com/idaholab/moose/discussions/28654",
          "updatedAt": "2024-10-17T22:21:03Z",
          "publishedAt": "2024-09-18T14:49:45Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThings have improved recently on this front, with the new stateful material properties objects merged this year\nsee https://mooseframework.inl.gov/source/actions/ProjectedStatefulMaterialStorageAction.html\nDid you try to rely on those for your work?\nHow are you reinitializing the problem? Is this using restart/recover and checkpoints? Or exodus? Or some special problem?",
                  "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10682934",
                  "updatedAt": "2024-09-18T14:55:21Z",
                  "publishedAt": "2024-09-18T14:55:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Hello,\nThank you for you quick answer. For now, I was outputing using the vtk format, then reading and providing the remapped field to Moose through a csv file. I modified the InitQpStatefulProperties (from ComputeMultiPlasticityStress) in order to reinitialize the properties, but unsuccessfully, as I showed before.\nI did not see this ProjectedStatefulMaterialStorageAction before. So, I should now be able to remap the plastic strain, the stresses and intnl parameter ?\nHere is how I did understand the documentation, but I did not find any example :\nLet's say I want to reinitialize the plastic_strain_xx :\nI create an AuxVariable\n[AuxVariables]\n    [./ps_xx]\n       [./InitialCondition]\n             type = FunctionIC\n             function = plastic_strain_xx_fcn # a function I create that reads the field in a csv file \n        [../]\n    [../]\n[]\n\nThen in the Materials, I should declare a InterpolatedStatefulMaterialReal :\n[Materials]\n  [interpolate_ps_xx]\n    type = InterpolatedStatefulMaterialReal\n    old_state = ps_xx\n    prop_name = plastic_strain_xx\n  []\n\nAm I correct ? Thank you again for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10683505",
                          "updatedAt": "2024-09-18T15:43:15Z",
                          "publishedAt": "2024-09-18T15:42:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The intent is to use ProjectedStatefulMaterialStorageAction to store the material properties then\nProjectedStatefulMaterial... to reload them from auxiliary variables\n\nI should now be able to remap the plastic strain, the stresses and intnl parameter ?\n\nthis has all been added in the context of solid mechanics calculations, so yes it should work for these",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10683597",
                          "updatedAt": "2024-09-18T15:52:32Z",
                          "publishedAt": "2024-09-18T15:52:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "I am not sure if I understood well.\nDoes it support the fact that we perform a simulation, then that we stop it, make some modifications to the mesh and finally restart the simulation ? Because I did not understand what you meant by 'store the material properties'.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10683994",
                          "updatedAt": "2024-09-18T16:29:53Z",
                          "publishedAt": "2024-09-18T16:29:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think so. You might have to change this:\n\nThe action will set up aux variables for each scalar component of the projected properties listed in \"projected_props\". The variables will be marked as hidden and will not appear in any outputs.\n\nsince you modify the variable locations in the vtk outputs.\n@hugary1995 do you have some advice on using this?",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10684280",
                          "updatedAt": "2024-09-18T17:42:04Z",
                          "publishedAt": "2024-09-18T16:54:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Just to clarify a bit : we have a csv file containing x,y,z and previous stateful properties. So for now, I read this file using the PropertyReadFile user object and I created functions, using the PiecewiseConstantFromCSV function, that would be used to define the initial state.\nFrom what I understood in this is the way I should do it :\nSet use_interpolated_state=true in the ComputeMultiPlasticityStress Material, which activate the ProjectedStatefulMaterialStorageAction\nThen, still in materials provide the :\n  [plastic_strain_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'plastic_strain_xx_fcn plastic_strain_xy_fcn 0 plastic_strain_xy_fcn plastic_strain_yy_fcn 0  0 0 0'\n    tensor_name = plastic_strain_interpolated_old\n  []\n  [elastic_strain_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'elastic_strain_xx_fcn elastic_strain_xy_fcn  0 elastic_strain_xy_fcn elastic_strain_yy_fcn 0  0 0 0'\n    tensor_name = elastic_strain_interpolated_old\n  []\n  [total_strain_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'strain_xx_fcn strain_xy_fcn  0 strain_xy_fcn strain_yy_fcn 0  0 0 0'\n    tensor_name = total_strain_interpolated_old\n  []\n  [stress_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'stress_xx_fcn stress_xy_fcn 0  stress_xy_fcn stress_yy_fcn 0  0 0 0'\n    tensor_name = stress_interpolated_old\n  []\n\n\nStill, I need to provide the plastic_transverse_direction_interpolated_old and the plastic_internal_parameter_interpolated_old. But until now I was not able to do so.  I just tried to initialize them with 0 values.\n  [plastic_transverse_direction_interpolated_old]\n    type = GenericConstantVectorMaterial\n    prop_names = plastic_transverse_direction_interpolated_old\n    prop_values = '0 0 0'\n  []\n  [plastic_internal_parameter_interpolated_old]\n    type = GenericConstantMaterial\n    prop_names = plastic_internal_parameter_interpolated_old\n    prop_values = 0\n  []\n\nWhich throws an error :\nThe requested non-AD material property 'plastic_internal_parameter_interpolated_old' of type 'std::vector'\nis already retrieved or declared as a non-AD property of type 'double'.\nIf you have any idea of how I could tackle this, or if you have any example of such a restart using the ProjectedStatefulMaterialStorageAction, It could be really helpful.\nThank you again ! Nathan",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10693386",
                          "updatedAt": "2024-09-19T12:59:41Z",
                          "publishedAt": "2024-09-19T12:59:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this is being created as a Real instead of a vector. which one is it supposed to be?\n  [plastic_internal_parameter_interpolated_old]\n    type = GenericConstantMaterial\n    prop_names = plastic_internal_parameter_interpolated_old\n    prop_values = 0\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10693582",
                          "updatedAt": "2024-09-19T13:14:35Z",
                          "publishedAt": "2024-09-19T13:14:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen where can we find more examples on this?\nonly found this in the repo\nhttps://github.com/idaholab/moose/pull/26054/files#diff-34f082f72d6049a84c5c1a4aeb1f34ee91784626e461e788c598b8bd78f3c7b3",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10693599",
                          "updatedAt": "2024-09-19T13:16:56Z",
                          "publishedAt": "2024-09-19T13:16:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Of course, I would like it to be a function as the internal parameter should be a vector, as for the other materials properties. But it is not working:\n  [plastic_internal_parameter_interpolated_old]\n    type = GenericFunctionMaterial\n    prop_names = plastic_internal_parameter_interpolated_old\n    prop_values = mc_int_fcn\n  []\n\nThis also throws this error :\nThe requested non-AD material property 'plastic_internal_parameter_interpolated_old' of type 'std::vector'\nis already retrieved or declared as a non-AD property of type 'double'. I believe that this is linked to the fact that the intnl_parameter is declared as a 'std::vector' in the ComputeMultiPlasticityStress class.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10693661",
                          "updatedAt": "2024-09-19T13:52:46Z",
                          "publishedAt": "2024-09-19T13:22:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you cant declare the same property twice.\nIf it s a function material, then do you really need the projectedMaterialPropertyStorage? Functions dont need storage, they are evaluated on the fly.\nI suspect you should not be using a function if you want to leverage ProjectedStatefulMaterialPropertyStorage",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10694378",
                          "updatedAt": "2024-09-19T14:32:14Z",
                          "publishedAt": "2024-09-19T14:32:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Ok but then I really do not understand how I should be using the action.\nFrom the moment I set the use_interpolated_state = true (which seems to be designed to activate the Action) in the ComputeMultiPlasticityStress , it requires a set of Material Properties :\n*** ERROR ***\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.\nMaterial property 'plastic_strain_interpolated_old', requested by 'mc' is not defined on block pfem_volume\nMaterial property 'plastic_internal_parameter_interpolated_old', requested by 'mc' is not defined on block pfem_volume\nMaterial property 'plastic_transverse_direction_interpolated_old', requested by 'mc' is not defined on block pfem_volume\nMaterial property 'total_strain_interpolated_old', requested by 'mc' is not defined on block pfem_volume\nMaterial property 'stress_interpolated_old', requested by 'mc' is not defined on block pfem_volume\nMaterial property 'elastic_strain_interpolated_old', requested by 'mc' is not defined on block pfem_volume\n\nThe previous material blocks I showed you made the majority of the error disappear. Example: if I put all the Material Properties blocks as shown before, excepted the one linked to the plastic_internal_parameter_interpolated_old, I got this :\n*** ERROR ***\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.\n\nMaterial property 'plastic_internal_parameter_interpolated_old', requested by 'mc' is not defined on block pfem_volume\n\nTherefore, if my previous solution indeed does not seem to suit, I do not know how to declare this specific Material Property (and if it is correct for the other ones).",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10694532",
                          "updatedAt": "2024-09-19T14:47:02Z",
                          "publishedAt": "2024-09-19T14:47:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "delpierrena"
                  },
                  "bodyText": "Just to clarify the full process, I show you different important blocks of my input file:\nI declared all the different projected properties in the following block :\n[ProjectedStatefulMaterialStorage]\n   [all]\n     projected_props = 'plastic_strain_interpolated_old stress_interpolated_old total_strain_interpolated_old elastic_strain_interpolated_old plastic_internal_parameter_interpolated_old plastic_transverse_direction_interpolated_old'\n     family = MONOMIAL\n     order = FIRST\n   []\n []\n\nI have a block of function where I retrieve the old state of a previous simulation, or let's say the initial state of the current one:\n[Functions]\n  [stress_xx_fcn]\n    type = PiecewiseConstantFromCSV\n    read_type = 'voronoi'\n    read_prop_user_object = 'reader_node'\n    column_number = '3'\n  []\n  [stress_xy_fcn]\n    type = PiecewiseConstantFromCSV\n    read_type = 'voronoi'\n    read_prop_user_object = 'reader_node'\n    column_number = '4'\n  []\n......\n\nThen the Materials block :\n[Materials]\n  [plastic_strain_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'plastic_strain_xx_fcn plastic_strain_xy_fcn 0 plastic_strain_xy_fcn plastic_strain_yy_fcn 0  0 0 0'\n    tensor_name = plastic_strain_interpolated_old\n  []\n  [elastic_strain_interpolated_old]\n    type = GenericFunctionRankTwoTensor\n    tensor_functions = 'elastic_strain_xx_fcn elastic_strain_xy_fcn  0 elastic_strain_xy_fcn elastic_strain_yy_fcn 0  0 0 0'\n    tensor_name = elastic_strain_interpolated_old\n  []\n  .......\n   [./mc]\n    type = ComputeMultiPlasticityStress\n    ep_plastic_tolerance = 1E-9\n    plastic_models = mc\n    perform_finite_strain_rotations = false\n    min_stepsize = 0.01\n    ignore_failures = true\n    use_interpolated_state = true\n  [../]\n   ...",
                  "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10765450",
                  "updatedAt": "2024-09-26T15:50:55Z",
                  "publishedAt": "2024-09-26T15:50:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in the Materials block, is     use_interpolated_state = true in every relevant block?\nIf you use Debug/show_actions=true,\ndo you see auxkernels updating every variable that needs to be updated?\nthe Functions, are they used in AuxKernels? or in FunctionIC (preferrable)",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10777052",
                          "updatedAt": "2024-09-27T15:05:45Z",
                          "publishedAt": "2024-09-27T15:05:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Guys, if you know the number of elements to store in that vector then just change it into a statically sized std::array<Real, N>. Adding dynamically sized types to the projected material storage will be an ugly mess! There is no enforced guarantee that vector sizes stay the same during a simulation, so all the extra checks and the added parameters for users to specify vector sizes will make the code harder to read and maintain.",
                  "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10917656",
                  "updatedAt": "2024-10-11T16:50:10Z",
                  "publishedAt": "2024-10-11T16:50:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I've created #28836 to keep track of this",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10919281",
                          "updatedAt": "2024-10-11T21:00:39Z",
                          "publishedAt": "2024-10-11T21:00:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@delpierrena\nis there any reason you use ComputeMultiPlasticityStress ? Its use of std::vector properties is because of the potentially arbitrary number of plasticity models in use.\nCould you use another material?\nI m going to guess but this one maybe?\nhttps://mooseframework.inl.gov/source/materials/IsotropicPlasticityStressUpdate.html\n@dschwen",
                  "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10919059",
                  "updatedAt": "2024-10-11T20:19:20Z",
                  "publishedAt": "2024-10-11T20:19:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "The reason I use this material is that I find this approach of combining UserObjects describing the yield function with the ComputeMultiPlasticityStress to be quite convenient to use.  Also there exist many examples in the documentation and the possibility of combining multiple plasticity models is a fairly stong capability.\nIf you think that it will be more simple to rather use StressUpdate Materials, I can switch to this.  I understand that the presence of the std::vector intnl parameter makes it really difficult to work.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10936216",
                          "updatedAt": "2024-10-14T12:45:00Z",
                          "publishedAt": "2024-10-14T12:44:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think it'd be good to do that for now.\nOnce you have a model with 2 plasticity sources, there might be another option still.\nFurther than that, we can start work on enabling the std::vector restart",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10939594",
                          "updatedAt": "2024-10-14T17:31:29Z",
                          "publishedAt": "2024-10-14T17:31:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Hi @GiudGiud ,\nI modified my input file and now I am using the IsotropicPlasticityStressUpdate, as we mentioned earlier.\nThe code runs using the ProjectedStateful action, combined with the use_interpolated_state set to true in the ComputeMultipleInelasticStress material. In this case, I have just tried to set the initial vertical stress to (say) -10000, by unhiding the aux_variable created by the action and setting an initial condition on it.\nThe code runs, but the initial stress is not applied. So ... I must admit that I am a bit lost. I wonder what I am doing wrong.\nAgain, here is the input file (remap_stateful-new.i) on the github repository: https://github.com/delpierrena/example-ProjectedStateful",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10972942",
                          "updatedAt": "2024-10-17T15:03:07Z",
                          "publishedAt": "2024-10-17T15:03:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nThanks for doing that. So in the new input we have\n  [isotropic_plasticity]\n    type = IsotropicPlasticityStressUpdate\n    yield_stress = 10e3\n    hardening_function = 0\n    # use_interpolated_state = true\n  []\n  [./radial_return_stress]\n    type = ComputeMultipleInelasticStress\n    tangent_operator = elastic\n    inelastic_models = 'isotropic_plasticity'\n    use_interpolated_state = true\n  [../]\n\nshould the first use_interpolated_stat be uncommented?\nAnd the second object seems to be using the previous method?\nI think I am looking at the wrong input file?",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973109",
                          "updatedAt": "2024-10-17T15:15:10Z",
                          "publishedAt": "2024-10-17T15:15:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "In fact, if you use the IsotropicPlasticityStressUpdate, you must combine it with the ComputeMultipleInelasticStress (note that this material is different from ComputeMultiPlasticityStress).\nPreviously (with ComputeMultiPlasticityStress) we had to define the plasticity with UserObjects, which is not mandatory for ComputeMultipleInelasticStress.\nThe stresses as variables are part of the ComputeMultipleInelasticStress material. Therefore, I only enabled use_interpolated_state in this material as I just wanted to see if I could initialise stress_yy.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973232",
                          "updatedAt": "2024-10-17T15:25:17Z",
                          "publishedAt": "2024-10-17T15:25:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok and we are no longer hitting the same problem since all the properties there are tensors",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973424",
                          "updatedAt": "2024-10-17T15:42:39Z",
                          "publishedAt": "2024-10-17T15:42:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@maxnezdyur do you have time to take a look ? This has worked around the previous difficulty",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973764",
                          "updatedAt": "2024-10-17T16:09:32Z",
                          "publishedAt": "2024-10-17T16:09:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "So a few questions @delpierrena :\nHow do you know the initial stress is not applied.\n\nThe code runs, but the initial stress is not applied. So ... I\n\nI am not well versed on these classes but I don't see that  it would even use the _stess_old for your input file. It looks like for _is_elasticity_tensor_guaranteed_isotropic it won't even use the _stress_old.\nComputeMultipleInelasticStress.C\n      if (_is_elasticity_tensor_guaranteed_isotropic || !_perform_finite_strain_rotations)\n        _stress[_qp] =\n            _elasticity_tensor[_qp] * (_elastic_strain_old[_qp] + elastic_strain_increment);\n      else\n      {\n        if (_damage_model)\n          _stress[_qp] = _undamaged_stress_old + _elasticity_tensor[_qp] * elastic_strain_increment;\n        else\n          _stress[_qp] = _stress_old[_qp] + _elasticity_tensor[_qp] * elastic_strain_increment;\n      }\n\nI would try to maybe change elastic strain or so material that the old material is guaranteed to be used.\n@GiudGiud\nDo we have an auxkernel that can output the \"old\" material state. This would allow use to have a way to see if we are grabbing old correctly.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973832",
                          "updatedAt": "2024-10-17T16:16:54Z",
                          "publishedAt": "2024-10-17T16:15:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think such an auxkernelight be added by the ProjectedStatefulMaterial property action?",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10973905",
                          "updatedAt": "2024-10-17T16:22:18Z",
                          "publishedAt": "2024-10-17T16:22:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "delpierrena"
                          },
                          "bodyText": "Because applying or not the initial stress does not change the solution and the output variables at each time step.\nI tried to do the same for the elastic_strain_old and initialize them, but it does not apply either:\n [./_var_elastic_strain_4]\n    family = MONOMIAL\n    order = FIRST\n    [./InitialCondition]\n      type = FunctionIC\n      function = -0.001\n    [../]\n  [../]\n\nTomorrow I will add some cout in the code to be sure, but I believe that the solution should at least be different at time 1, influenced by the initial condition.",
                          "url": "https://github.com/idaholab/moose/discussions/28654#discussioncomment-10974123",
                          "updatedAt": "2024-10-17T16:44:01Z",
                          "publishedAt": "2024-10-17T16:44:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Failed tests for step10_multiapps tutorial: auxkernels/corrosion EXODIFF",
          "author": {
            "login": "smpeyres"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI am working through the darcy_thermo_mech tutorials and I am currently on step10_multiapps. Compilation with make -j8 works just fine on Apple Silicon M1. However, when I perform ./run_tests -j8, it reports that two tests, both for tests/auxkernels/corrosion fail with EXODIFF while the other eight tests pass.\nI also tried the -j4 equivalents with the same results and diagnostics.sh passed all checks.\nAny thoughts?\n(Optional) code in question / simulation log / errors\nauxkernels/velocity_aux.test .............................................................................. OK\nkernels/simple_diffusion.test ............................................................................. OK\nkernels/darcy_pressure.test ............................................................................... OK\nbcs/outflow.test .......................................................................................... OK\nmaterials/packed_column.test .............................................................................. OK\nkernels/darcy_advection.test .............................................................................. OK\nauxkernels/corrosion.default: Working Directory: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion\nauxkernels/corrosion.default: Running command: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/darcy_thermo_mech-opt -i corrosion.i --error --error-override --libtorch-device cpu\nauxkernels/corrosion.default: The following total 1 aux variables:\nauxkernels/corrosion.default:   porosity\nauxkernels/corrosion.default: are added for automatic output by MaterialOutputAction.\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: \nauxkernels/corrosion.default: *** Info ***\nauxkernels/corrosion.default: 'execute_on' parameter specified in [Outputs] block is ignored for object 'checkpoint'.\nauxkernels/corrosion.default: Define this object in its own sub-block of [Outputs] to modify its execution schedule.\nauxkernels/corrosion.default: Framework Information:\nauxkernels/corrosion.default: MOOSE Version:           git commit 2ec280afc3 on 2024-10-15\nauxkernels/corrosion.default: LibMesh Version:         \nauxkernels/corrosion.default: PETSc Version:           3.21.5\nauxkernels/corrosion.default: SLEPc Version:           3.21.1\nauxkernels/corrosion.default: Current Time:            Thu Oct 17 09:50:44 2024\nauxkernels/corrosion.default: Executable Timestamp:    Thu Oct 17 09:50:35 2024\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Checkpoint:\nauxkernels/corrosion.default:   Wall Time Interval:      Every 3600 s\nauxkernels/corrosion.default:   User Checkpoint:         Disabled\nauxkernels/corrosion.default:   # Checkpoints Kept:      2\nauxkernels/corrosion.default:   Execute On:              TIMESTEP_END \nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Parallelism:\nauxkernels/corrosion.default:   Num Processors:          1\nauxkernels/corrosion.default:   Num Threads:             1\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh: \nauxkernels/corrosion.default:   Parallel Type:           replicated\nauxkernels/corrosion.default:   Mesh Dimension:          2\nauxkernels/corrosion.default:   Spatial Dimension:       2\nauxkernels/corrosion.default:   Nodes:                   121\nauxkernels/corrosion.default:   Elems:                   100\nauxkernels/corrosion.default:   Num Subdomains:          1\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Nonlinear System:\nauxkernels/corrosion.default:   Num DOFs:                121\nauxkernels/corrosion.default:   Num Local DOFs:          121\nauxkernels/corrosion.default:   Variables:               \"temperature\" \nauxkernels/corrosion.default:   Finite Element Types:    \"LAGRANGE\" \nauxkernels/corrosion.default:   Approximation Orders:    \"FIRST\" \nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Auxiliary System:\nauxkernels/corrosion.default:   Num DOFs:                421\nauxkernels/corrosion.default:   Num Local DOFs:          421\nauxkernels/corrosion.default:   Variables:               \"phi\" { \"phi_jump\" \"error_marker\" \"porosity\" } \nauxkernels/corrosion.default:   Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \nauxkernels/corrosion.default:   Approximation Orders:    \"FIRST\" \"CONSTANT\" \nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Execution Information:\nauxkernels/corrosion.default:   Executioner:             Transient\nauxkernels/corrosion.default:   TimeStepper:             ConstantDT\nauxkernels/corrosion.default:   TimeIntegrator:          ImplicitEuler\nauxkernels/corrosion.default:   Solver Mode:             Preconditioned JFNK\nauxkernels/corrosion.default:   PETSc Preconditioner:    hypre boomeramg \nauxkernels/corrosion.default: \nauxkernels/corrosion.default: LEGACY MODES ENABLED:\nauxkernels/corrosion.default:  This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 0, time = 0\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 1, time = 0.5, dt = 0.5\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   0.000000e+00 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Pre-SMO residual: 8.34369\nauxkernels/corrosion.default:  0 Nonlinear |R| = 8.343691e+00\nauxkernels/corrosion.default:       0 Linear |R| = 8.343691e+00\nauxkernels/corrosion.default:       1 Linear |R| = 1.549240e+00\nauxkernels/corrosion.default:       2 Linear |R| = 8.001529e-02\nauxkernels/corrosion.default:       3 Linear |R| = 7.350995e-03\nauxkernels/corrosion.default:       4 Linear |R| = 4.792750e-04\nauxkernels/corrosion.default:       5 Linear |R| = 2.999320e-05\nauxkernels/corrosion.default:  1 Nonlinear |R| = 1.870387e-03\nauxkernels/corrosion.default:       0 Linear |R| = 1.870387e-03\nauxkernels/corrosion.default:       1 Linear |R| = 1.043748e-05\nauxkernels/corrosion.default:       2 Linear |R| = 8.783022e-07\nauxkernels/corrosion.default:       3 Linear |R| = 5.432982e-08\nauxkernels/corrosion.default:       4 Linear |R| = 3.631349e-09\nauxkernels/corrosion.default:  2 Nonlinear |R| = 6.193530e-09\nauxkernels/corrosion.default:  Solve Converged!\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 2, time = 1, dt = 0.5\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.254934e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Pre-SMO residual: 0.261142\nauxkernels/corrosion.default:  0 Nonlinear |R| = 2.611419e-01\nauxkernels/corrosion.default:       0 Linear |R| = 2.611419e-01\nauxkernels/corrosion.default:       1 Linear |R| = 6.505193e-03\nauxkernels/corrosion.default:       2 Linear |R| = 2.408524e-04\nauxkernels/corrosion.default:       3 Linear |R| = 1.879679e-05\nauxkernels/corrosion.default:       4 Linear |R| = 1.500252e-06\nauxkernels/corrosion.default:  1 Nonlinear |R| = 2.530532e-06\nauxkernels/corrosion.default:       0 Linear |R| = 2.530532e-06\nauxkernels/corrosion.default:       1 Linear |R| = 1.901748e-07\nauxkernels/corrosion.default:       2 Linear |R| = 1.081525e-08\nauxkernels/corrosion.default:       3 Linear |R| = 6.283127e-10\nauxkernels/corrosion.default:       4 Linear |R| = 3.100480e-11\nauxkernels/corrosion.default:       5 Linear |R| = 1.666475e-12\nauxkernels/corrosion.default:  2 Nonlinear |R| = 4.192184e-10\nauxkernels/corrosion.default:  Solve Converged!\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 3, time = 1.5, dt = 0.5\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Pre-SMO residual: 0.258737\nauxkernels/corrosion.default:  0 Nonlinear |R| = 2.587373e-01\nauxkernels/corrosion.default:       0 Linear |R| = 2.587373e-01\nauxkernels/corrosion.default:       1 Linear |R| = 6.307993e-03\nauxkernels/corrosion.default:       2 Linear |R| = 2.068094e-04\nauxkernels/corrosion.default:       3 Linear |R| = 2.099996e-05\nauxkernels/corrosion.default:       4 Linear |R| = 1.496631e-06\nauxkernels/corrosion.default:  1 Nonlinear |R| = 2.826520e-06\nauxkernels/corrosion.default:       0 Linear |R| = 2.826520e-06\nauxkernels/corrosion.default:       1 Linear |R| = 2.031846e-07\nauxkernels/corrosion.default:       2 Linear |R| = 1.365544e-08\nauxkernels/corrosion.default:       3 Linear |R| = 7.915748e-10\nauxkernels/corrosion.default:       4 Linear |R| = 3.783316e-11\nauxkernels/corrosion.default:       5 Linear |R| = 2.478907e-12\nauxkernels/corrosion.default:  2 Nonlinear |R| = 4.763928e-10\nauxkernels/corrosion.default:  Solve Converged!\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 4, time = 2, dt = 0.5\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: |   2.000000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Pre-SMO residual: 0.272895\nauxkernels/corrosion.default:  0 Nonlinear |R| = 2.728950e-01\nauxkernels/corrosion.default:       0 Linear |R| = 2.728950e-01\nauxkernels/corrosion.default:       1 Linear |R| = 6.991910e-03\nauxkernels/corrosion.default:       2 Linear |R| = 2.175259e-04\nauxkernels/corrosion.default:       3 Linear |R| = 1.805618e-05\nauxkernels/corrosion.default:       4 Linear |R| = 1.138326e-06\nauxkernels/corrosion.default:  1 Nonlinear |R| = 2.674962e-06\nauxkernels/corrosion.default:       0 Linear |R| = 2.674962e-06\nauxkernels/corrosion.default:       1 Linear |R| = 1.508168e-07\nauxkernels/corrosion.default:       2 Linear |R| = 8.990648e-09\nauxkernels/corrosion.default:       3 Linear |R| = 5.311757e-10\nauxkernels/corrosion.default:       4 Linear |R| = 3.985200e-11\nauxkernels/corrosion.default:       5 Linear |R| = 3.149307e-12\nauxkernels/corrosion.default:  2 Nonlinear |R| = 2.454356e-10\nauxkernels/corrosion.default:  Solve Converged!\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: |   2.000000e+00 |   1.243065e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Time Step 5, time = 2.5, dt = 0.5\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: |   2.000000e+00 |   1.243065e+01 |\nauxkernels/corrosion.default: |   2.500000e+00 |   1.243065e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Pre-SMO residual: 0.242195\nauxkernels/corrosion.default:  0 Nonlinear |R| = 2.421952e-01\nauxkernels/corrosion.default:       0 Linear |R| = 2.421952e-01\nauxkernels/corrosion.default:       1 Linear |R| = 5.958176e-03\nauxkernels/corrosion.default:       2 Linear |R| = 1.948871e-04\nauxkernels/corrosion.default:       3 Linear |R| = 1.259206e-05\nauxkernels/corrosion.default:       4 Linear |R| = 1.210143e-06\nauxkernels/corrosion.default:  1 Nonlinear |R| = 2.099531e-06\nauxkernels/corrosion.default:       0 Linear |R| = 2.099531e-06\nauxkernels/corrosion.default:       1 Linear |R| = 1.960142e-07\nauxkernels/corrosion.default:       2 Linear |R| = 8.996727e-09\nauxkernels/corrosion.default:       3 Linear |R| = 4.706163e-10\nauxkernels/corrosion.default:       4 Linear |R| = 2.283691e-11\nauxkernels/corrosion.default:       5 Linear |R| = 1.299604e-12\nauxkernels/corrosion.default:  2 Nonlinear |R| = 4.683512e-10\nauxkernels/corrosion.default:  Solve Converged!\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Postprocessor Values:\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: | time           | k_eff          |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.default: |   1.000000e+00 |   1.250955e+01 |\nauxkernels/corrosion.default: |   1.500000e+00 |   1.247105e+01 |\nauxkernels/corrosion.default: |   2.000000e+00 |   1.243065e+01 |\nauxkernels/corrosion.default: |   2.500000e+00 |   1.239742e+01 |\nauxkernels/corrosion.default: +----------------+----------------+\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Running exodiff: /Users/seanpeyres/moose-projects/moose/framework/contrib/exodiff/exodiff -m  -F 1e-10 -t 5.5e-06  /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/gold/corrosion_out.e-s005 /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/corrosion_out.e-s005\nauxkernels/corrosion.default: ERROR: \nauxkernels/corrosion.default:    *****************************************************************\nauxkernels/corrosion.default:               EXODIFF\t(Version: 2.90) Modified: 2018-02-15\nauxkernels/corrosion.default:               Authors:  Richard Drake, rrdrake@sandia.gov           \nauxkernels/corrosion.default:                         Greg Sjaardema, gdsjaar@sandia.gov          \nauxkernels/corrosion.default:               Run on    2024/10/17   09:50:48 CDT\nauxkernels/corrosion.default:    *****************************************************************\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Reading first file ... \nauxkernels/corrosion.default: Reading second file ... \nauxkernels/corrosion.default:   FILE 1: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/gold/corrosion_out.e-s005\nauxkernels/corrosion.default:    Title: corrosion_out.e-s005\nauxkernels/corrosion.default:           Dim = 2, Blocks = 1, Nodes = 5538, Elements = 5161, Nodesets = 4, Sidesets = 4\nauxkernels/corrosion.default:           Vars: Global = 1, Nodal = 2, Element = 3, Nodeset = 0, Sideset = 0, Times = 1\nauxkernels/corrosion.default: \nauxkernels/corrosion.default:   FILE 2: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/corrosion_out.e-s005\nauxkernels/corrosion.default:    Title: corrosion_out.e-s005\nauxkernels/corrosion.default:           Dim = 2, Blocks = 1, Nodes = 5538, Elements = 5161, Nodesets = 4, Sidesets = 4\nauxkernels/corrosion.default:           Vars: Global = 1, Nodal = 2, Element = 3, Nodeset = 0, Sideset = 0, Times = 1\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: exodiff: INFO .. Map option is not needed.\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Nodal coordinates will be compared .. tol:    1e-06 (absolute), floor:        0\nauxkernels/corrosion.default: Time step values will be compared .. tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.default: Global variables to be compared:\nauxkernels/corrosion.default: \tk_eff                            tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.default: Nodal variables to be compared:\nauxkernels/corrosion.default: \tphi                              tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.default: \ttemperature                            5.5e-06 (relative),           1e-10\nauxkernels/corrosion.default: Element variables to be compared:\nauxkernels/corrosion.default: \tphi_jump                         tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.default: \terror_marker                           5.5e-06 (relative),           1e-10\nauxkernels/corrosion.default: \tporosity                               5.5e-06 (relative),           1e-10\nauxkernels/corrosion.default: No Element Attribute variables on either file.\nauxkernels/corrosion.default: No Nodeset variables on either file.\nauxkernels/corrosion.default: No Sideset variables on either file.\nauxkernels/corrosion.default: Sideset Distribution Factors will be compared .. tol:    1e-06 (relative), floor:        0\nauxkernels/corrosion.default: \nauxkernels/corrosion.default:   ==============================================================\nauxkernels/corrosion.default:   NOTE: All node and element ids are reported as global ids.\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: Sideset Distribution Factors:\nauxkernels/corrosion.default:   --------- Time step 1, 2.5000000e+00 ~ 2.5000000e+00, rel diff:  0.00000e+00 ---------\nauxkernels/corrosion.default: Global variables:\nauxkernels/corrosion.default:    k_eff  rel diff:  1.2393210e+01 ~  1.2397415e+01 = 3.39164e-04 (FAILED)\nauxkernels/corrosion.default: Nodal variables:\nauxkernels/corrosion.default:    phi          rel diff:  0.0000000e+00 ~  1.0000000e+00 = 1.00000e+00 (node 2)\nauxkernels/corrosion.default:    temperature  rel diff:  3.0173049e+02 ~  3.0172747e+02 = 1.00295e-05 (node 2054)\nauxkernels/corrosion.default: Element variables:\nauxkernels/corrosion.default:    phi_jump      rel diff:  1.1892071e+00 ~  6.8658905e-01 = 4.22650e-01 (block 0, elmt 2124)\nauxkernels/corrosion.default:    porosity      rel diff:  5.0000000e-01 ~  2.5000000e-01 = 5.00000e-01 (block 0, elmt 2341)\nauxkernels/corrosion.default: \nauxkernels/corrosion.default: exodiff: Files are different\nauxkernels/corrosion.default: \nauxkernels/corrosion.default:  \nauxkernels/corrosion.default: ################################################################################\nauxkernels/corrosion.default: Tester failed, reason: EXODIFF\nauxkernels/corrosion.default: \nauxkernels/corrosion.default ................................................................ FAILED (EXODIFF)\nproblems.step_a .............................................................................. [min_cpus=3] OK\nauxkernels/corrosion.temp_dep: Working Directory: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion\nauxkernels/corrosion.temp_dep: Running command: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/darcy_thermo_mech-opt -i corrosion.i AuxKernels/corrosion/temperature=350 Outputs/file_base=corrosion_temp_dep --error --error-override --libtorch-device cpu\nauxkernels/corrosion.temp_dep: The following total 1 aux variables:\nauxkernels/corrosion.temp_dep:   porosity\nauxkernels/corrosion.temp_dep: are added for automatic output by MaterialOutputAction.\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: *** Info ***\nauxkernels/corrosion.temp_dep: 'execute_on' parameter specified in [Outputs] block is ignored for object 'checkpoint'.\nauxkernels/corrosion.temp_dep: Define this object in its own sub-block of [Outputs] to modify its execution schedule.\nauxkernels/corrosion.temp_dep: Framework Information:\nauxkernels/corrosion.temp_dep: MOOSE Version:           git commit 2ec280afc3 on 2024-10-15\nauxkernels/corrosion.temp_dep: LibMesh Version:         \nauxkernels/corrosion.temp_dep: PETSc Version:           3.21.5\nauxkernels/corrosion.temp_dep: SLEPc Version:           3.21.1\nauxkernels/corrosion.temp_dep: Current Time:            Thu Oct 17 09:50:48 2024\nauxkernels/corrosion.temp_dep: Executable Timestamp:    Thu Oct 17 09:50:35 2024\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Checkpoint:\nauxkernels/corrosion.temp_dep:   Wall Time Interval:      Every 3600 s\nauxkernels/corrosion.temp_dep:   User Checkpoint:         Disabled\nauxkernels/corrosion.temp_dep:   # Checkpoints Kept:      2\nauxkernels/corrosion.temp_dep:   Execute On:              TIMESTEP_END \nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Parallelism:\nauxkernels/corrosion.temp_dep:   Num Processors:          1\nauxkernels/corrosion.temp_dep:   Num Threads:             1\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh: \nauxkernels/corrosion.temp_dep:   Parallel Type:           replicated\nauxkernels/corrosion.temp_dep:   Mesh Dimension:          2\nauxkernels/corrosion.temp_dep:   Spatial Dimension:       2\nauxkernels/corrosion.temp_dep:   Nodes:                   121\nauxkernels/corrosion.temp_dep:   Elems:                   100\nauxkernels/corrosion.temp_dep:   Num Subdomains:          1\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Nonlinear System:\nauxkernels/corrosion.temp_dep:   Num DOFs:                121\nauxkernels/corrosion.temp_dep:   Num Local DOFs:          121\nauxkernels/corrosion.temp_dep:   Variables:               \"temperature\" \nauxkernels/corrosion.temp_dep:   Finite Element Types:    \"LAGRANGE\" \nauxkernels/corrosion.temp_dep:   Approximation Orders:    \"FIRST\" \nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Auxiliary System:\nauxkernels/corrosion.temp_dep:   Num DOFs:                421\nauxkernels/corrosion.temp_dep:   Num Local DOFs:          421\nauxkernels/corrosion.temp_dep:   Variables:               \"phi\" { \"phi_jump\" \"error_marker\" \"porosity\" } \nauxkernels/corrosion.temp_dep:   Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \nauxkernels/corrosion.temp_dep:   Approximation Orders:    \"FIRST\" \"CONSTANT\" \nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Execution Information:\nauxkernels/corrosion.temp_dep:   Executioner:             Transient\nauxkernels/corrosion.temp_dep:   TimeStepper:             ConstantDT\nauxkernels/corrosion.temp_dep:   TimeIntegrator:          ImplicitEuler\nauxkernels/corrosion.temp_dep:   Solver Mode:             Preconditioned JFNK\nauxkernels/corrosion.temp_dep:   PETSc Preconditioner:    hypre boomeramg \nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: LEGACY MODES ENABLED:\nauxkernels/corrosion.temp_dep:  This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 0, time = 0\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 1, time = 0.5, dt = 0.5\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   0.000000e+00 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Pre-SMO residual: 8.34369\nauxkernels/corrosion.temp_dep:  0 Nonlinear |R| = 8.343691e+00\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 8.343691e+00\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.549240e+00\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 8.001529e-02\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 7.350995e-03\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 4.792750e-04\nauxkernels/corrosion.temp_dep:       5 Linear |R| = 2.999320e-05\nauxkernels/corrosion.temp_dep:  1 Nonlinear |R| = 1.870387e-03\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 1.870387e-03\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.043748e-05\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 8.783022e-07\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 5.432982e-08\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 3.631349e-09\nauxkernels/corrosion.temp_dep:  2 Nonlinear |R| = 6.193530e-09\nauxkernels/corrosion.temp_dep:  Solve Converged!\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 2, time = 1, dt = 0.5\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Pre-SMO residual: 0.615038\nauxkernels/corrosion.temp_dep:  0 Nonlinear |R| = 6.150376e-01\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 6.150376e-01\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.454644e-02\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 6.488325e-04\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 5.991634e-05\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 2.954481e-06\nauxkernels/corrosion.temp_dep:  1 Nonlinear |R| = 1.170857e-05\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 1.170857e-05\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 3.895838e-07\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 2.231283e-08\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 1.670949e-09\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 1.110127e-10\nauxkernels/corrosion.temp_dep:  2 Nonlinear |R| = 3.747580e-10\nauxkernels/corrosion.temp_dep:  Solve Converged!\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 3, time = 1.5, dt = 0.5\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Pre-SMO residual: 0.569329\nauxkernels/corrosion.temp_dep:  0 Nonlinear |R| = 5.693288e-01\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 5.693288e-01\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.489655e-02\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 6.584955e-04\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 5.981734e-05\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 2.678592e-06\nauxkernels/corrosion.temp_dep:  1 Nonlinear |R| = 1.222642e-05\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 1.222642e-05\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 3.096470e-07\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 1.771201e-08\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 1.427478e-09\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 9.186501e-11\nauxkernels/corrosion.temp_dep:  2 Nonlinear |R| = 3.994145e-10\nauxkernels/corrosion.temp_dep:  Solve Converged!\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 4, time = 2, dt = 0.5\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: |   2.000000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Pre-SMO residual: 0.622794\nauxkernels/corrosion.temp_dep:  0 Nonlinear |R| = 6.227942e-01\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 6.227942e-01\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.445402e-02\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 9.314179e-04\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 7.202006e-05\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 5.076344e-06\nauxkernels/corrosion.temp_dep:  1 Nonlinear |R| = 1.327533e-05\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 1.327533e-05\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 8.379616e-07\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 4.705513e-08\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 3.571541e-09\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 2.077568e-10\nauxkernels/corrosion.temp_dep:       5 Linear |R| = 1.278367e-11\nauxkernels/corrosion.temp_dep:  2 Nonlinear |R| = 9.365078e-10\nauxkernels/corrosion.temp_dep:  Solve Converged!\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: |   2.000000e+00 |   1.194816e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Mesh unchanged, skipping remaining steps...\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Time Step 5, time = 2.5, dt = 0.5\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: |   2.000000e+00 |   1.194816e+01 |\nauxkernels/corrosion.temp_dep: |   2.500000e+00 |   1.194816e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Pre-SMO residual: 0.596107\nauxkernels/corrosion.temp_dep:  0 Nonlinear |R| = 5.961067e-01\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 5.961067e-01\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 1.299431e-02\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 7.469740e-04\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 6.612589e-05\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 4.805180e-06\nauxkernels/corrosion.temp_dep:  1 Nonlinear |R| = 1.047249e-05\nauxkernels/corrosion.temp_dep:       0 Linear |R| = 1.047249e-05\nauxkernels/corrosion.temp_dep:       1 Linear |R| = 6.500098e-07\nauxkernels/corrosion.temp_dep:       2 Linear |R| = 3.799690e-08\nauxkernels/corrosion.temp_dep:       3 Linear |R| = 3.327898e-09\nauxkernels/corrosion.temp_dep:       4 Linear |R| = 1.875324e-10\nauxkernels/corrosion.temp_dep:       5 Linear |R| = 1.579450e-11\nauxkernels/corrosion.temp_dep:  2 Nonlinear |R| = 6.707149e-10\nauxkernels/corrosion.temp_dep:  Solve Converged!\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Postprocessor Values:\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: | time           | k_eff          |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: |   5.000000e-01 |   1.254934e+01 |\nauxkernels/corrosion.temp_dep: |   1.000000e+00 |   1.234202e+01 |\nauxkernels/corrosion.temp_dep: |   1.500000e+00 |   1.215335e+01 |\nauxkernels/corrosion.temp_dep: |   2.000000e+00 |   1.194816e+01 |\nauxkernels/corrosion.temp_dep: |   2.500000e+00 |   1.177877e+01 |\nauxkernels/corrosion.temp_dep: +----------------+----------------+\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Running exodiff: /Users/seanpeyres/moose-projects/moose/framework/contrib/exodiff/exodiff -m  -F 1e-10 -t 5.5e-06  /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/gold/corrosion_temp_dep.e-s005 /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/corrosion_temp_dep.e-s005\nauxkernels/corrosion.temp_dep: ERROR: \nauxkernels/corrosion.temp_dep:    *****************************************************************\nauxkernels/corrosion.temp_dep:               EXODIFF\t(Version: 2.90) Modified: 2018-02-15\nauxkernels/corrosion.temp_dep:               Authors:  Richard Drake, rrdrake@sandia.gov           \nauxkernels/corrosion.temp_dep:                         Greg Sjaardema, gdsjaar@sandia.gov          \nauxkernels/corrosion.temp_dep:               Run on    2024/10/17   09:50:52 CDT\nauxkernels/corrosion.temp_dep:    *****************************************************************\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Reading first file ... \nauxkernels/corrosion.temp_dep: Reading second file ... \nauxkernels/corrosion.temp_dep:   FILE 1: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/gold/corrosion_temp_dep.e-s005\nauxkernels/corrosion.temp_dep:    Title: corrosion_temp_dep.e-s005\nauxkernels/corrosion.temp_dep:           Dim = 2, Blocks = 1, Nodes = 6029, Elements = 5695, Nodesets = 4, Sidesets = 4\nauxkernels/corrosion.temp_dep:           Vars: Global = 1, Nodal = 2, Element = 3, Nodeset = 0, Sideset = 0, Times = 1\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep:   FILE 2: /Users/seanpeyres/moose-projects/moose/tutorials/darcy_thermo_mech/step10_multiapps/tests/auxkernels/corrosion/corrosion_temp_dep.e-s005\nauxkernels/corrosion.temp_dep:    Title: corrosion_temp_dep.e-s005\nauxkernels/corrosion.temp_dep:           Dim = 2, Blocks = 1, Nodes = 6029, Elements = 5695, Nodesets = 4, Sidesets = 4\nauxkernels/corrosion.temp_dep:           Vars: Global = 1, Nodal = 2, Element = 3, Nodeset = 0, Sideset = 0, Times = 1\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: exodiff: INFO .. Map option is not needed.\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Nodal coordinates will be compared .. tol:    1e-06 (absolute), floor:        0\nauxkernels/corrosion.temp_dep: Time step values will be compared .. tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.temp_dep: Global variables to be compared:\nauxkernels/corrosion.temp_dep: \tk_eff                            tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.temp_dep: Nodal variables to be compared:\nauxkernels/corrosion.temp_dep: \tphi                              tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.temp_dep: \ttemperature                            5.5e-06 (relative),           1e-10\nauxkernels/corrosion.temp_dep: Element variables to be compared:\nauxkernels/corrosion.temp_dep: \tphi_jump                         tol:  5.5e-06 (relative), floor:    1e-10\nauxkernels/corrosion.temp_dep: \terror_marker                           5.5e-06 (relative),           1e-10\nauxkernels/corrosion.temp_dep: \tporosity                               5.5e-06 (relative),           1e-10\nauxkernels/corrosion.temp_dep: No Element Attribute variables on either file.\nauxkernels/corrosion.temp_dep: No Nodeset variables on either file.\nauxkernels/corrosion.temp_dep: No Sideset variables on either file.\nauxkernels/corrosion.temp_dep: Sideset Distribution Factors will be compared .. tol:    1e-06 (relative), floor:        0\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep:   ==============================================================\nauxkernels/corrosion.temp_dep:   NOTE: All node and element ids are reported as global ids.\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: Sideset Distribution Factors:\nauxkernels/corrosion.temp_dep:   --------- Time step 1, 2.5000000e+00 ~ 2.5000000e+00, rel diff:  0.00000e+00 ---------\nauxkernels/corrosion.temp_dep: Global variables:\nauxkernels/corrosion.temp_dep:    k_eff  rel diff:  1.1774050e+01 ~  1.1778771e+01 = 4.00847e-04 (FAILED)\nauxkernels/corrosion.temp_dep: Nodal variables:\nauxkernels/corrosion.temp_dep:    phi          rel diff:  0.0000000e+00 ~  1.0000000e+00 = 1.00000e+00 (node 2)\nauxkernels/corrosion.temp_dep:    temperature  rel diff:  3.0161014e+02 ~  3.0160516e+02 = 1.65209e-05 (node 1972)\nauxkernels/corrosion.temp_dep: Element variables:\nauxkernels/corrosion.temp_dep:    phi_jump      rel diff:  1.1892071e+00 ~  6.8658905e-01 = 4.22650e-01 (block 0, elmt 2124)\nauxkernels/corrosion.temp_dep:    porosity      rel diff:  5.0000000e-01 ~  2.5000000e-01 = 5.00000e-01 (block 0, elmt 2341)\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep: exodiff: Files are different\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep:  \nauxkernels/corrosion.temp_dep: ################################################################################\nauxkernels/corrosion.temp_dep: Tester failed, reason: EXODIFF\nauxkernels/corrosion.temp_dep: \nauxkernels/corrosion.temp_dep ............................................................... FAILED (EXODIFF)\nproblems.step_b ........................................................................................... OK\n\n\nFinal Test Results:\n--------------------------------------------------------------------------------------------------------------\nauxkernels/velocity_aux.test .............................................................................. OK\nkernels/simple_diffusion.test ............................................................................. OK\nkernels/darcy_pressure.test ............................................................................... OK\nbcs/outflow.test .......................................................................................... OK\nmaterials/packed_column.test .............................................................................. OK\nkernels/darcy_advection.test .............................................................................. OK\nproblems.step_a .............................................................................. [min_cpus=3] OK\nproblems.step_b ........................................................................................... OK\nauxkernels/corrosion.default ................................................................ FAILED (EXODIFF)\nauxkernels/corrosion.temp_dep ............................................................... FAILED (EXODIFF)\n--------------------------------------------------------------------------------------------------------------\nRan 10 tests in 10.0 seconds. Average test time 2.5 seconds, maximum test time 6.4 seconds.\n8 passed, 0 skipped, 0 pending, 2 FAILED\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28874",
          "updatedAt": "2024-10-17T16:10:35Z",
          "publishedAt": "2024-10-17T15:01:36Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThat's interesting. Even though you passed -j8, you actually still ran this in serial.\nSo this is not a parallel consistency issue, it's a problem with the test suite running out of order when running 8 tests at the same time.\nI ll double check it then we'll address this, thanks for reporting.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28874#discussioncomment-10972982",
                  "updatedAt": "2024-10-17T15:07:17Z",
                  "publishedAt": "2024-10-17T15:07:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "nevermind this diffs with -j 1 for my machine. We'll address this",
                          "url": "https://github.com/idaholab/moose/discussions/28874#discussioncomment-10973498",
                          "updatedAt": "2024-10-17T15:48:16Z",
                          "publishedAt": "2024-10-17T15:48:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smpeyres"
                          },
                          "bodyText": "A little update: I also tried to compile and run the tests for step11_action, which uses the same tests/auxkernels/corrosion.i test, and it also had EXODIFF.",
                          "url": "https://github.com/idaholab/moose/discussions/28874#discussioncomment-10973737",
                          "updatedAt": "2024-10-17T16:08:09Z",
                          "publishedAt": "2024-10-17T16:08:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes any step after step 10 will incur this.\nThis is likely a problem due to differences in random number generation in the RandomCorrosion model between macos and linux. There should be ways to make it consistent, they just are not in there yet",
                          "url": "https://github.com/idaholab/moose/discussions/28874#discussioncomment-10973779",
                          "updatedAt": "2024-10-17T16:10:36Z",
                          "publishedAt": "2024-10-17T16:10:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Crystal Plasticity with Periodic Boundary Conditions",
          "author": {
            "login": "lkuna24"
          },
          "bodyText": "I am attempting to run crystal plasticity simulations quasi-periodic boundary conditions.  I am applying a displacement to the top/bottom (z) of my RVE while setting the in-plane (x + y) boundaries to be periodic.  For some reason, the PBC simulation shows a very slight yield but otherwise almost linear curve.  To test this, I ran the same simulation utilizing symmetric boundary conditions (u_i = 0 on one of the boundaries normal to displacement), and now I see an expected result.  Here is a plot of the two simulations:\n\nI have included the input file, mesh, and txt to seed the orientations on the blocks.\nAdditionally, I know that the GlobalStrain system has been implemented for SolidMechanics PBC simulations and have also constructed an input for that.  This has an extremely hard time converging, and even looking at the result is quite strange.  It seems to have completed flattened the RVE.  Maybe using GS is the solution to this issue, and maybe I have just not utilized it properly?\n\nAny advice is greatly appreciated.\nThanks for your time and attention.\nDRAGen_RVE_16G.zip\nPeriodic_CP_Test.txt\nEulerAngles.txt\nPeriodic_CP_GS_Test.txt",
          "url": "https://github.com/idaholab/moose/discussions/28778",
          "updatedAt": "2024-10-17T14:58:21Z",
          "publishedAt": "2024-10-04T20:07:29Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "I'm not aware of the periodic boundary conditions having been successfully used with the crystal plasticity models in MOOSE: I am not certain that the assumptions in the CP models are consistent with the PBC assumptions. @SudiptaBiswas, @hugary1995, or @dschwen, do you know?\nNote: if you would like to ask for one of the moose developers to review your input files and/or code, a github branch is the best option. Many of us are unable to download zip files from the internet",
                  "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10885659",
                  "updatedAt": "2024-10-08T22:05:59Z",
                  "publishedAt": "2024-10-08T22:05:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lkuna24"
                          },
                          "bodyText": "Apologies, I should have known.\nI have pushed all the files to a lone branch located here:\nhttps://github.com/lkuna24/moose_CP_files.git",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10886040",
                          "updatedAt": "2024-10-08T23:29:12Z",
                          "publishedAt": "2024-10-08T23:29:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I suggest you set\nux=0 on left (-x)\nuy=0 on bottom (-y)\nuz=0 on back (-z)\nuz=g on front (+z)\nAlso apply an equal value boundary constraint on front (+z).",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10886093",
                          "updatedAt": "2024-10-08T23:44:27Z",
                          "publishedAt": "2024-10-08T23:44:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lkuna24"
                          },
                          "bodyText": "Thanks Gary, but I noted in my original post that this is how I first checked as to whether or not the PBC with CP is working:\n\nboundary conditions (u_i = 0 on one of the boundaries normal to displacement)\n\nI should have been a little bit clearer about this.",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10886233",
                          "updatedAt": "2024-10-09T00:23:05Z",
                          "publishedAt": "2024-10-09T00:23:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Okay, good.\nThen for the periodic case, do you want to apply displacement periodicity or strain periodicity?\nIf you do displacement periodicity, I believe the plastic spin is almost zero, hence little hardening.",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10886268",
                          "updatedAt": "2024-10-09T00:32:08Z",
                          "publishedAt": "2024-10-09T00:32:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lkuna24"
                          },
                          "bodyText": "I would hope to conserve the strain periodicity.  As it is an AuxVariable (I believe), I think the PBC has to be specified on displacements (the Variables in this simulation).",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10906916",
                          "updatedAt": "2024-10-10T17:16:39Z",
                          "publishedAt": "2024-10-10T17:16:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "The two are not compatible in general.",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10907083",
                          "updatedAt": "2024-10-10T17:34:26Z",
                          "publishedAt": "2024-10-10T17:34:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lkuna24"
                          },
                          "bodyText": "Right, so is there a solution to resolve this?  I was under the impression that Global Strain was implemented to conserve strain periodicity.  Maybe the way I have utilized the GlobalStrain Action is just incorrect here?",
                          "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10915150",
                          "updatedAt": "2024-10-11T12:47:59Z",
                          "publishedAt": "2024-10-11T12:47:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lkuna24"
                  },
                  "bodyText": "Just checking in on this post again.  Is it currently not possible to do a CP RVE simulation with PBC in MOOSE?",
                  "url": "https://github.com/idaholab/moose/discussions/28778#discussioncomment-10972894",
                  "updatedAt": "2024-10-17T14:58:22Z",
                  "publishedAt": "2024-10-17T14:58:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Lumped Mass Time Derivative Kernel with AD",
          "author": {
            "login": "msbookwala"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI am trying to create a Lumped Mass Time Derivative Kernel with AD. For that I need $\\dot{u}$ values on nodes.\nIn MassLumpedTimeDerivative kernel, it has been defined using _u_dot_nodal(_var.dofValuesDot()) in the constructor.\nHowever,  with AD, only the methods adDofValues() and adUDot() are available, and not both. How can I define a Lumped mass Time derivative with AD? Is there any workaround?",
          "url": "https://github.com/idaholab/moose/discussions/28855",
          "updatedAt": "2024-10-17T16:14:42Z",
          "publishedAt": "2024-10-15T21:57:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou're right this is not implemented\nI just added this here if you want to try it out\n#28857\nI dont have a test for it yet though\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10953169",
                  "updatedAt": "2024-10-15T23:02:40Z",
                  "publishedAt": "2024-10-15T23:02:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "msbookwala"
                          },
                          "bodyText": "Thanks a lot Guillaume. I'll try it and let you know.\nMurtaza",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10953213",
                          "updatedAt": "2024-10-15T23:11:55Z",
                          "publishedAt": "2024-10-15T23:11:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It should be good now. There was an issue if you pulled my branch yesterday",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10961788",
                          "updatedAt": "2024-10-16T15:53:46Z",
                          "publishedAt": "2024-10-16T15:53:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "msbookwala"
                          },
                          "bodyText": "Hi, follow up on this issue. I implement a moose object ADMassLumpedTimeDerivative in the following way\nHeader file:\n#pragma once\n\n#include \"ADTimeKernel.h\"\n\nclass ADMassLumpedTimeDerivative : public ADTimeKernel\n{\npublic:\n  static InputParameters validParams();\n\n  ADMassLumpedTimeDerivative(const InputParameters & parameters);\n\nprotected:\n  virtual ADReal computeQpResidual() override;\n  const ADVariableValue & _ad_u_dot_nodal;\n  using ADKernel::_var;\n};\nSrc file:\n#include \"ADMassLumpedTimeDerivative.h\"\n\n// MOOSE includes\n#include \"Assembly.h\"\n#include \"MooseVariableFE.h\"\n\n#include \"libmesh/quadrature.h\"\n\nregisterMooseObject(\"discopanterApp\", ADMassLumpedTimeDerivative);\n\nInputParameters\nADMassLumpedTimeDerivative::validParams()\n{\n  InputParameters params = ADTimeKernel::validParams();\n  params.addClassDescription(\n      \"Lumped AD formulation of the time derivative $\\\\frac{\\\\partial u}{\\\\partial t}$. Its \"\n      \"corresponding weak form is $\\\\dot{u_i}(\\\\psi_i, 1)$ where $\\\\dot{u_i}$ denotes the time \"\n      \"derivative of the solution coefficient associated with node $i$.\");\n  return params;\n}\n\nADMassLumpedTimeDerivative::ADMassLumpedTimeDerivative(const InputParameters & parameters)\n  : ADTimeKernel(parameters), _ad_u_dot_nodal(_var.adDofValuesDot())\n{\n}\n\nADReal\nADMassLumpedTimeDerivative::computeQpResidual()\n{\n  return _test[_i][_qp] * _ad_u_dot_nodal[_i];\n}\n\nHowever, I am getting the wrong Jacobian. What am I doing wrong here?\nI also get the following error when I am in debugger:\n\nAssertion `compare_dofs_set == current_dofs_set' failed\nWe're going to see whether the dof sets are the same. IIRC the degree of freedom dependence (as indicated by the dof index set held by the ADReal) has to be the same for every residual passed to this method otherwise constrain_element_matrix will not work.\n\nI can send the whole trace if needed.",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10963947",
                          "updatedAt": "2024-10-16T20:03:24Z",
                          "publishedAt": "2024-10-16T20:03:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I ll take a look tomorrow. I verified we had the right dof dot values, I assumed the derivatives would be correct since they are pretty simple",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10966419",
                          "updatedAt": "2024-10-17T03:19:38Z",
                          "publishedAt": "2024-10-17T03:19:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Actually looking at the object I just don't think you need AD for this.\nYou can easily implement the Jacobian and use the non AD attribute",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10970627",
                          "updatedAt": "2024-10-17T11:49:06Z",
                          "publishedAt": "2024-10-17T11:49:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "msbookwala"
                          },
                          "bodyText": "Hi.\nWe compared using TimeDerivative and ADTimeDerivative in our app and found a big difference in speed of codes, hence the motivation to use AD. However, we also need conservation of mass on the dofs. Hence the necessity of lumped mass formulation.",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10971769",
                          "updatedAt": "2024-10-17T13:28:14Z",
                          "publishedAt": "2024-10-17T13:26:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can implement lumpedMass without AD though.",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10971928",
                          "updatedAt": "2024-10-17T13:38:31Z",
                          "publishedAt": "2024-10-17T13:38:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "msbookwala"
                          },
                          "bodyText": "Hi,\nThere's already an implementation of a lumped mass time derivative. I just wanted to try lumped mass with AD to see if we get any speed gains for our app",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10971972",
                          "updatedAt": "2024-10-17T13:43:24Z",
                          "publishedAt": "2024-10-17T13:43:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No AD is not going to be faster for this. AD helps with getting the Jacobian right, but hardcoding the Jacobian is actually better for speed.",
                          "url": "https://github.com/idaholab/moose/discussions/28855#discussioncomment-10972097",
                          "updatedAt": "2024-10-17T13:54:09Z",
                          "publishedAt": "2024-10-17T13:54:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "3D temperature profile to 2D PF simulation",
          "author": {
            "login": "fervaldies"
          },
          "bodyText": "Hello, I was wondering if it is possible to run a thermal simulation in 3D and then extract the data of a 2D cut (or just a thin 3D slice of that model) and use those temperature values into a phase field simulation that has that exact shape and volume. I want to do a solidification model with grain growth and need the temperature evolution for that section of the model to simulate a 2D simulation (just 1 element in depth).",
          "url": "https://github.com/idaholab/moose/discussions/28761",
          "updatedAt": "2024-10-17T10:18:02Z",
          "publishedAt": "2024-10-03T04:53:14Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere are a number of ways you could do that.\nYou could load the 3D results file (checkpoint or exodus) in a SolutionUO and set fields using SolutionAUx. The location of the 2D plane in the 3D system will be used as the location to sample.\nYou could save the variable results in the 3D simulation using ElementValueSampler vectorpostprocessor, then read this data back into the 2D simulation using a PropertyFileReader and a PiecewiseConstrantFromCSV function",
                  "url": "https://github.com/idaholab/moose/discussions/28761#discussioncomment-10827888",
                  "updatedAt": "2024-10-03T05:46:06Z",
                  "publishedAt": "2024-10-03T05:46:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "fervaldies"
                          },
                          "bodyText": "Hello, first, thank you for your answer. So, I am usually using Paraview and I have seen the Slice feature and can have the region (or regions) where my blocks will be located. But how do I extract that temperature field and use it for my other simulation?",
                          "url": "https://github.com/idaholab/moose/discussions/28761#discussioncomment-10865154",
                          "updatedAt": "2024-10-07T09:06:36Z",
                          "publishedAt": "2024-10-07T09:06:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "in Paraview I would not know.\nIf you wanted to slice in MOOSE you could modify this vectorprocessor\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementsAlongPlane.html\nto also sample element values like this one\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementValueSampler.html",
                          "url": "https://github.com/idaholab/moose/discussions/28761#discussioncomment-10866963",
                          "updatedAt": "2024-10-07T12:24:07Z",
                          "publishedAt": "2024-10-07T12:24:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fervaldies"
                          },
                          "bodyText": "I have tried using ElementValueSampler vectorpostprocessor, but it is creating a new CSV file for every time step, so I am not really sure how to then read each of these CSV files for each time step with the PiecewiseConstrantFromCSV function",
                          "url": "https://github.com/idaholab/moose/discussions/28761#discussioncomment-10966541",
                          "updatedAt": "2024-10-17T03:45:52Z",
                          "publishedAt": "2024-10-17T03:45:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you are trying to use a variable field through a function, this is not an intended use of functions.\nYou should use a material property instead. These can couple in variables. Or a Functor if you code is using that",
                          "url": "https://github.com/idaholab/moose/discussions/28761#discussioncomment-10969749",
                          "updatedAt": "2024-10-17T10:18:02Z",
                          "publishedAt": "2024-10-17T10:18:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Paraview Installed but Conda Cannot Find It",
          "author": {
            "login": "ParadoxPrism117"
          },
          "bodyText": "I have been trying to visualize the results from a simulation I ran using Paraview but I cannot get the software to run. I followed the steps on conda-forge. https://github.com/conda-forge/paraview-feedstock\nHowever, when I went to install it, it replied \"# All requested packages already installed\". I checked \"conda list\" and it was listed in the environment but when I tried to activate it using \"conda activate paraview\" it could not find the conda environment.\nIt sounds like it IS installed, but it cannot find it?",
          "url": "https://github.com/idaholab/moose/discussions/28628",
          "updatedAt": "2024-10-17T01:27:12Z",
          "publishedAt": "2024-09-16T13:21:13Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nwhat does which paraview return in the command line?\nDid you create a separate environment for paraview? Or did you simply install it in your current one?",
                  "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10659787",
                  "updatedAt": "2024-09-16T13:26:46Z",
                  "publishedAt": "2024-09-16T13:26:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ParadoxPrism117"
                          },
                          "bodyText": "it returns\n/home/user/miniforge/bin/paraview\nIt shouldn't be in a special environment, or at least I didn't intend it to be in one.",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660113",
                          "updatedAt": "2024-09-16T13:53:48Z",
                          "publishedAt": "2024-09-16T13:53:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you just type paraview in the console to run it then?",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660223",
                          "updatedAt": "2024-09-16T14:03:16Z",
                          "publishedAt": "2024-09-16T14:03:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ParadoxPrism117"
                          },
                          "bodyText": "Response: \"Segmentation fault (core dumped)\"",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660239",
                          "updatedAt": "2024-09-16T14:04:30Z",
                          "publishedAt": "2024-09-16T14:04:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So it is installed it just does not run.\nThe conda install of paraview is likely going to be difficult to debug.\nI recommand you re install from the online binaries\nhttps://www.paraview.org/download/",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660291",
                          "updatedAt": "2024-09-16T14:09:32Z",
                          "publishedAt": "2024-09-16T14:09:32Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "This usually indicates you're missing core OS dependencies (like mesa, nvidia, etc).\nWhat happens if you instruct your system to install paraview using it's package manager (like apt-get install paraview)? If thats a possibility, this will usually bring in those necessary dependencies that Conda can't satisfy. You don't have to install paraview in this way if you don't want to (answer \"no\"). Just by virtue of the install attempt, it'll list whats missing and give an idea whats required.",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660358",
                          "updatedAt": "2024-09-16T14:13:32Z",
                          "publishedAt": "2024-09-16T14:13:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ParadoxPrism117"
                          },
                          "bodyText": "This usually indicates you're missing core OS dependencies (like mesa, nvidia, etc).\nWhat happens if you instruct your system to install paraview using it's package manager (like apt-get install paraview)? If thats a possibility, this will usually bring in those necessary dependencies that Conda can't satisfy. You don't have to install paraview in this way if you don't want to (answer \"no\"). Just by virtue of the install attempt, it'll list whats missing and give an idea whats required.\n\nResponse to \"apt-get install paraview\":\nE: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied)\nE: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root?",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660465",
                          "updatedAt": "2024-09-16T14:23:09Z",
                          "publishedAt": "2024-09-16T14:23:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ParadoxPrism117"
                          },
                          "bodyText": "So it is installed it just does not run. The conda install of paraview is likely going to be difficult to debug. I recommand you re install from the online binaries https://www.paraview.org/download/\n\nI downloaded the tar.gz folder but I don't see any kind of configure or make file to actually install paraview",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660510",
                          "updatedAt": "2024-09-16T14:26:49Z",
                          "publishedAt": "2024-09-16T14:26:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "should just be some clicking with those files. no make or configure",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660529",
                          "updatedAt": "2024-09-16T14:28:31Z",
                          "publishedAt": "2024-09-16T14:28:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "So did the download package work from www.paraview.org? That is odd in my opinion, as Conda installs the very same \"binary only, no need to configure or compile\".\nI would assume the same errors would occur due to missing system dependencies with the downloaded tarball from www.paraview.org (the tarball would not install mesa, nvidia, etc).\nBut I see you selected that as the appropriate solution.\nEdit:\nAlso, the error you received with apt-get was because you need to use sudo in order to run it. But if everything is working, no need to run this command anymore!",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10660965",
                          "updatedAt": "2024-09-16T15:10:54Z",
                          "publishedAt": "2024-09-16T15:09:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jackeggemeyer"
                          },
                          "bodyText": "I am running into the same issue, if you go into the paraview folder you can launch it with no issues. Just hit the thing with the same logo as the -opt files. How can I force conda to be aware of the install so I can use the terminal?",
                          "url": "https://github.com/idaholab/moose/discussions/28628#discussioncomment-10964788",
                          "updatedAt": "2024-10-16T22:03:10Z",
                          "publishedAt": "2024-10-16T22:02:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Is there a PostProcessor/Output object that can show a variable value along a boundary?",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi,\nI have a problem with a periodic solution.\n\nWhen I get the simulation output, my current workflow is to take the exodus file to paraview and draw a line over the mesh to get a plot of the result, which is harmonic, and then fit it to a decaying sine function to get the properties I need. I would like to automate this process as I want to run this simulation several times for various material properties.\nIs there a postprocessor object that can output the results along a boundary in excel? I browsed through the postprocessor list and I'm not sure I could find one. The only option I could think of is to use PointValue, but that would require selecting hundreds of points to keep the resolution of the sine wave good. Is there any other option for doing this?",
          "url": "https://github.com/idaholab/moose/discussions/27232",
          "updatedAt": "2024-10-16T23:54:45Z",
          "publishedAt": "2024-03-29T05:44:29Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou could specify a line along the boundary if it is straight\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/LineValueSampler.html\nthis can also work\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/PositionsFunctorValueSampler.html\nbut you ll need to create a Positions object for the boundary. I d like that in MOOSE btw\nIf not you could make a new one, a BoundaryValueSampler",
                  "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-8951743",
                  "updatedAt": "2024-03-29T13:26:07Z",
                  "publishedAt": "2024-03-29T13:26:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "This should work, thanks!!",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-8962246",
                          "updatedAt": "2024-03-31T00:35:07Z",
                          "publishedAt": "2024-03-31T00:35:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I liked LineValueSampler, but when I switched to a quasistatic simulation and added the 'execute_on' command (set it to final), it didn't listen and instead returned empty csv files for every timestep. I then manually set it to the default, i.e 'timestep_end' and it still returned empty csv files. I tried supplying 'timestep_end' and 'final' with and without quotes.\nOnly after I took out 'execute_on' and let it do the default by itself (timestep_end), did it start printing out values again. How can I fix this?",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10675714",
                          "updatedAt": "2024-09-17T23:21:12Z",
                          "publishedAt": "2024-09-17T23:21:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This does not seem right. Could you make a minimal example of this?",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10675793",
                          "updatedAt": "2024-09-17T23:42:09Z",
                          "publishedAt": "2024-09-17T23:42:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Yes, sure:\nhttps://github.com/richmondodufisan/purple/blob/main/Cornea_Hyperelastic_NeoHookean/linevaluenotworking.i\nThat's a minimal example where I used 'final' and it returned an empty csv file. If I took that option out completely and let it use the default, it returned the line value sample at every timestep (timestep_end)\nThe minimal example only uses MOOSE kernels and I used GeneratedMeshGenerator so you can download and run easily",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10686754",
                          "updatedAt": "2024-09-18T22:48:27Z",
                          "publishedAt": "2024-09-18T22:48:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok this is semi-expected. you need to add the FINAL execute_on to the CSV output to get a result\n  [csv]\n    type = CSV\n    execute_on = FINAL\n  []\n\nI ll add a little check / warning. seems like a gotcha right now",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687117",
                          "updatedAt": "2024-09-19T00:15:43Z",
                          "publishedAt": "2024-09-19T00:15:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "And this should be in the output block? does that set it globally then? like for example if I have a VectorPostProcessor that I want only at the final timestep but I have a PostProcessor that I want at every timestep, how do I do that then?",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687151",
                          "updatedAt": "2024-09-19T00:24:21Z",
                          "publishedAt": "2024-09-19T00:24:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You would have to have multiple CSV outputs objects. Or have multiple flags on one\nCSV output does not happen unless the flag is present in the outputs block",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687200",
                          "updatedAt": "2024-09-19T00:40:20Z",
                          "publishedAt": "2024-09-19T00:40:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It does have a global effect, in that it affects all the VPPs.",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687201",
                          "updatedAt": "2024-09-19T00:40:54Z",
                          "publishedAt": "2024-09-19T00:40:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I'm sorry I am a bit confused by what you mean. As an example, say I have:\n[Postprocessors]\n  [displace_y_real]\n    type = PointValue\n    variable = disp_y_real\n    point = '0.002 0.001 0'\n  []\n  \n  [displace_y_imag]\n    type = PointValue\n    variable = disp_y_imag\n    point = '0.002 0.001 0'\n  []\n[]\n\n[VectorPostprocessors]\n  [wave_profile]\n    type = LineValueSampler\n    variable = disp_y\n    start_point = '0.002 ${mid_height} 0'\n    end_point = '${fparse l_plate - 0.002} ${mid_height} 0'\n    num_points = ${number_of_points}\n    sort_by = x\n    execute_on = final\n  []\n[]\n\nIf I understand correctly, I need to do:\n[Outputs]\n  print_linear_residuals = false\n  [csv]\n    type = CSV\n    execute_on = FINAL\n  []\n  exodus = true\n  [pgraph]\n    type = PerfGraphOutput\n    execute_on = 'final'  # Default is \"final\"\n    level = 1             # Default is 1\n  []\n[]\n\nfor the VectorPostProcessor to work, right? What about the PostProcessor?",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687236",
                          "updatedAt": "2024-09-19T00:50:26Z",
                          "publishedAt": "2024-09-19T00:49:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "postprocessor will only output on final if you do this\nyou could do this\n[Outputs]\n  print_linear_residuals = false\n  [csv]\n    type = CSV\n    execute_on = 'TIMESTEP_END FINAL'\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/27232#discussioncomment-10687487",
                          "updatedAt": "2024-09-19T01:45:21Z",
                          "publishedAt": "2024-09-19T01:45:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Multiapp and changing subdomain ID",
          "author": {
            "login": "Wendy-Ji"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello,\nI am getting a segmentation fault for a particular case of changing the subdomain ID of elements in a multiapp.\nThe example I put below has two subdomains (1 and 2), and an empty subdomain (3). The elements in subdomain 2 change to subdomain 3, and the variable $\\phi$ is defined over subdomains 1 and 2.\nWhen I run just this scenario, i.e. the subapp code, the simulation runs fine.\nWhen I run the same scenario in a multiapp, i.e. the master and subapp code below, with the variable $\\phi$ transferring from the subapp to the master, then a segmentation fault occurs in the master app when the elements change subdomain ID.\nThis multi-app setup works fine for other cases of changing subdomain ID, so I'm not sure what's wrong here.\nSubapp:\n[Problem]\n  solve = false\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 2\n    ny = 2\n  []\n  [left]\n    type = SubdomainBoundingBoxGenerator\n    input = 'gen'\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '0.5 1 1'\n  []\n  [right]\n    type = SubdomainBoundingBoxGenerator\n    input = 'left'\n    block_id = 2\n    bottom_left = '0.5 0 0'\n    top_right = '1 1 1'\n  []\n  add_subdomain_ids = 3\n[]\n\n[Variables]\n  [phi]\n    block = '1 2'\n  []\n[]\n\n[MeshModifiers]\n  [deact]\n    type = TimedSubdomainModifier\n    times = '1'\n    blocks_from = '2'\n    blocks_to = '3'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  dt = 0.5\n  num_steps = 3\n[]\n\nMaster app:\n[Problem]\n  solve = false\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 2\n    ny = 2\n  []\n  [left]\n    type = SubdomainBoundingBoxGenerator\n    input = 'gen'\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '0.5 1 1'\n  []\n  [right]\n    type = SubdomainBoundingBoxGenerator\n    input = 'left'\n    block_id = 2\n    bottom_left = '0.5 0 0'\n    top_right = '1 1 1'\n  []\n  add_subdomain_ids = 3\n[]\n\n[AuxVariables]\n  [phi_aux]\n    block = '1 2'\n  []\n[]\n\n[MeshModifiers]\n  [deact]\n    type = TimedSubdomainModifier\n    times = '1'\n    blocks_from = '2'\n    blocks_to = '3'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  dt = 0.5\n  num_steps = 3\n[]\n\n[MultiApps]\n  [multiapp]\n    type = TransientMultiApp\n    positions = '0.0 0.0 0.0'\n    input_files = 'subapp.i'\n  []\n[]\n\n[Transfers]\n  [phi_from_subapp]\n    type = MultiAppCopyTransfer\n    from_multi_app = 'multiapp'\n    source_variable = 'phi'\n    variable = 'phi_aux'\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28861",
          "updatedAt": "2024-10-17T03:29:43Z",
          "publishedAt": "2024-10-16T05:00:59Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe MultiAppCopyTransfer is meant for meshes that are exactly the same. Since you are changing the mesh, they are no longer the same. Please use this one instead:\nhttps://mooseframework.inl.gov/source/transfers/MultiAppGeneralFieldShapeEvaluationTransfer.html",
                  "url": "https://github.com/idaholab/moose/discussions/28861#discussioncomment-10959669",
                  "updatedAt": "2024-10-16T12:55:48Z",
                  "publishedAt": "2024-10-16T12:55:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Searching for source code in MooseApp",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello, I have been looking for this source code in my MooseApp(MatDiffusion.C) but cannot find it. I have seen it online on the MOOSE page and source documentation. However, I am unable to locate it in my MOOSE directory. Any help?",
          "url": "https://github.com/idaholab/moose/discussions/28856",
          "updatedAt": "2024-10-18T21:15:15Z",
          "publishedAt": "2024-10-15T22:12:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt wont be in your app folder, it will be in the moose folder, in moose/src/kernels\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28856#discussioncomment-10952987",
                  "updatedAt": "2024-10-15T22:25:02Z",
                  "publishedAt": "2024-10-15T22:25:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Yes, that was what I thought yet there is no moose/src/kernels folder. What I see is moose/and_other_folders_except_for src or include. And I cannot find which module it is associated with.",
                          "url": "https://github.com/idaholab/moose/discussions/28856#discussioncomment-10953277",
                          "updatedAt": "2024-10-15T23:26:08Z",
                          "publishedAt": "2024-10-15T23:26:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh it s in framework/src/kernels",
                          "url": "https://github.com/idaholab/moose/discussions/28856#discussioncomment-10953300",
                          "updatedAt": "2024-10-15T23:31:59Z",
                          "publishedAt": "2024-10-15T23:31:59Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Thanks! Found it!",
                          "url": "https://github.com/idaholab/moose/discussions/28856#discussioncomment-10953331",
                          "updatedAt": "2024-10-15T23:38:39Z",
                          "publishedAt": "2024-10-15T23:38:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compile and tests fail after Docker install",
          "author": {
            "login": "mshtx-mdacc"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI followed the installation instructions for Docker from here. There is a yaml error when I try make -j 4, but it continues the compile.\nWhen I run ./run_tests -j 4 there are errors.\nErrors and daignostics.sh output shown below.\n(Optional) code in question / simulation log / errors\n# make -j 4\nWARNING: Failed to initialize PreMake for version checking; this may be ignored but may suggest an environment issue.\n\nTraceback (most recent call last):\n  File \"/projects/moose/framework/../scripts/premake.py\", line 20, in __init__\n    from versioner import Versioner\n  File \"/projects/moose/scripts/versioner.py\", line 25, in <module>\n    import yaml\nModuleNotFoundError: No module named 'yaml'\n\nTraceback (most recent call last):\n  File \"/projects/moose/framework/../scripts/premake.py\", line 261, in <module>\n    PreMake().check()\n  File \"/projects/moose/framework/../scripts/premake.py\", line 27, in __init__\n    self.versioner_meta = Versioner().version_meta()\nUnboundLocalError: local variable 'Versioner' referenced before assignment\nmake: [/projects/moose/framework/moose.mk:399: prebuild] Error 1 (ignored)\nRebuilding symlinks in /projects/moose/framework/build/header_symlinks\nCreating Unity Directory /projects/moose/framework/build/unity_src\nCopying default MOOSE configuration to: /projects/moose/framework/include/base/MooseConfig.h...\nCompiling C++ (in opt mode) /projects/moose/framework/contrib/pcre/src/pcrecpp.cc...\n\n\n./run_tests error:\n\n# ./run_tests -j 4\nWARNING: Failed to initialize PreMake for version checking; this may be ignored but may suggest an environment issue.\n\nTraceback (most recent call last):\n  File \"/projects/moose/framework/../scripts/premake.py\", line 20, in __init__\n    from versioner import Versioner\n  File \"/projects/moose/scripts/versioner.py\", line 25, in <module>\n    import yaml\nModuleNotFoundError: No module named 'yaml'\n\nTraceback (most recent call last):\n  File \"/projects/moose/framework/../scripts/premake.py\", line 261, in <module>\n    PreMake().check()\n  File \"/projects/moose/framework/../scripts/premake.py\", line 27, in __init__\n    self.versioner_meta = Versioner().version_meta()\nUnboundLocalError: local variable 'Versioner' referenced before assignment\nmake: [/projects/moose/framework/moose.mk:399: prebuild] Error 1 (ignored)\nBuilding and linking hit...\nmake[1]: Entering directory '/projects/moose/framework/contrib/hit'\nBuilding hit for python with python3-config\nmake[1]: 'hit' is up to date.\nmake[1]: Leaving directory '/projects/moose/framework/contrib/hit'\nTraceback (most recent call last):\n  File \"/projects/moose/python/pyhit/__init__.py\", line 13, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/projects/moose/python/pyhit/__init__.py\", line 18, in <module>\n    import hit\nImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found (required by /projects/moose/python/pyhit/../../framework/contrib/hit/hit.so)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/projects/moose/test/./run_tests\", line 6, in <module>\n    from TestHarness import TestHarness\n  File \"/projects/moose/python/TestHarness/__init__.py\", line 15, in <module>\n    from .TestHarness import TestHarness\n  File \"/projects/moose/python/TestHarness/TestHarness.py\", line 20, in <module>\n    from FactorySystem.Factory import Factory\n  File \"/projects/moose/python/FactorySystem/__init__.py\", line 13, in <module>\n    from .Parser import Parser\n  File \"/projects/moose/python/FactorySystem/Parser.py\", line 13, in <module>\n    import pyhit\n  File \"/projects/moose/python/pyhit/__init__.py\", line 22, in <module>\n    import hit\nImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found (required by /projects/moose/python/pyhit/../../framework/contrib/hit/hit.so)\nEncountering Errors? Please include diagnostic output\n# scripts/diagnostics.sh\n####################################################################################################\nInfluential Environment Variables\n\nCC=mpicc\nCONDA_CHANNEL=https://conda.software.inl.gov/public\nCONDA_DEFAULT_ENV=moose\nCONDA_EXE=/opt/miniforge3/bin/conda\nCONDA_PREFIX=/opt/miniforge3/envs/moose\nCONDA_PROMPT_MODIFIER=(moose)\nCONDA_PYTHON_EXE=/opt/miniforge3/bin/python\nCONDA_SHLVL=1\nCURL_CA_BUNDLE=\nCXX=mpicxx\nF77=mpif77\nF90=mpif90\nFC=mpif90\nLD_LIBRARY_PATH=/opt/mpich/lib:/opt/rh/gcc-toolset-12/root/usr/lib64:/opt/rh/gcc-toolset-12/root/usr/lib:/opt/mpich/lib:/opt/rh/gcc-toolset-12/root/usr/lib64:/opt/rh/gcc-toolset-12/root/usr/lib:/.singularity.d/libs\nLIBMESH_DIR=/opt/libmesh\nMODULESHOME=/usr/share/Modules\nMODULES_CMD=/usr/share/Modules/libexec/modulecmd.tcl\nMODULES_RUN_QUARANTINE=LD_LIBRARY_PATH LD_PRELOAD\nMOOSE_APPTAINER_GENERATOR_LIBRARY=moose-dev\nMOOSE_APPTAINER_GENERATOR_NAME=moose-dev-mpich-x86_64\nMOOSE_APPTAINER_GENERATOR_NAME_SUMMARY=moose-dev-mpich-x86_64:28a1964\nMOOSE_APPTAINER_GENERATOR_TAG=28a1964\nMOOSE_APPTAINER_GENERATOR_VERSION=28a1964\nMOOSE_JOBS=6\nMOOSE_MPI_DIR=/opt/mpich\nPATH=/opt/wasp/bin:/opt/miniforge3/bin:/opt/code-server/bin:/opt/mpich/bin:/opt/rh/gcc-toolset-12/root/usr/bin:/opt/wasp/bin:/opt/miniforge3/envs/moose/bin:/opt/miniforge3/condabin:/opt/miniforge3/bin:/opt/code-server/bin:/opt/mpich/bin:/opt/rh/gcc-toolset-12/root/usr/bin:/usr/share/Modules/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin\nPETSC_DIR=/opt/petsc\nREQUESTS_CA_BUNDLE=\nSSL_CERT_FILE=\nWASP_DIR=/opt/wasp\n####################################################################################################\nCompiler(s) (CC CXX FC F77 F90):\n\nwhich $CC; /opt/mpich/bin/mpicc\n$CC --version; gcc (GCC) 12.2.1 20221121 (Red Hat 12.2.1-7)\n$CC -show; gcc -I/opt/mpich/include -L/opt/mpich/lib -Wl,-rpath -Wl,/opt/mpich/lib -Wl,--enable-new-dtags -lmpi\n\nwhich $CXX; /opt/mpich/bin/mpicxx\n$CXX --version; g++ (GCC) 12.2.1 20221121 (Red Hat 12.2.1-7)\n$CXX -show; g++ -I/opt/mpich/include -L/opt/mpich/lib -lmpicxx -Wl,-rpath -Wl,/opt/mpich/lib -Wl,--enable-new-dtags -lmpi\n\nwhich $FC; /opt/mpich/bin/mpif90\n$FC --version; GNU Fortran (GCC) 12.2.1 20221121 (Red Hat 12.2.1-7)\n$FC -show; gfortran -I/opt/mpich/include -I/opt/mpich/include -L/opt/mpich/lib -lmpifort -Wl,-rpath -Wl,/opt/mpich/lib -Wl,--enable-new-dtags -lmpi\n\nwhich $F77; /opt/mpich/bin/mpif77\n$F77 --version; GNU Fortran (GCC) 12.2.1 20221121 (Red Hat 12.2.1-7)\n$F77 -show; gfortran -I/opt/mpich/include -I/opt/mpich/include -L/opt/mpich/lib -lmpifort -Wl,-rpath -Wl,/opt/mpich/lib -Wl,--enable-new-dtags -lmpi\n\nwhich $F90; /opt/mpich/bin/mpif90\n$F90 --version; GNU Fortran (GCC) 12.2.1 20221121 (Red Hat 12.2.1-7)\n$F90 -show; gfortran -I/opt/mpich/include -I/opt/mpich/include -L/opt/mpich/lib -lmpifort -Wl,-rpath -Wl,/opt/mpich/lib -Wl,--enable-new-dtags -lmpi\n\nOK\n####################################################################################################\nPython Sanity Checks\n\n/usr/bin/env python3 --version; (reporting as: Python 3.10.15) matches\nwhich python3 python;\n\n/opt/miniforge3/bin/python3 --version; == Python 3.10.15\n/opt/miniforge3/bin/python --version; == Python 3.10.15\n\nOK\n####################################################################################################\nPython Modules (TestHarness, run-ability)\n\n\nWARNING: missing module(s): pyaml jinja2\n\nEither install the above packages, or perhaps you have yet\nto activate the moose environment: conda activate moose\n\nMissing 'warning' Python modules may cause miscellaneous runtime issues.\n\nWARNING: One or more Python issues present.\n####################################################################################################\nMOOSE Repository/Conda Version Checks\n\nWARNING: Unable to run Conda tests due to missing Python modules\n\n\nchecks FAILED",
          "url": "https://github.com/idaholab/moose/discussions/28798",
          "updatedAt": "2024-10-15T15:11:55Z",
          "publishedAt": "2024-10-07T19:42:03Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nyou ll want to install pyaml to beat this error\nModuleNotFoundError: No module named 'yaml'\n\nyou can conda install pyaml if that's available. If not maybe pip install instead?",
                  "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10872504",
                  "updatedAt": "2024-10-07T19:45:55Z",
                  "publishedAt": "2024-10-07T19:45:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mshtx-mdacc"
                          },
                          "bodyText": "I did a conda list and yaml is installed:\nyaml                      0.2.5                h7f98852_2    conda-forge\nWhen go ahead and try conda install yaml it takes a very long time, but it does update it. It also says I should update conda.\nI still get the compile error after conda install yaml. Should I deactivate and activate the moose env?",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10872756",
                          "updatedAt": "2024-10-07T20:13:57Z",
                          "publishedAt": "2024-10-07T20:13:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yaml is not the same as pyaml to be sure\nyou should update conda. new conda is much faster at dependency resolution than old conda\nconda update conda to get at least 23.2",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10873154",
                          "updatedAt": "2024-10-07T21:09:37Z",
                          "publishedAt": "2024-10-07T21:09:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am concerned how the Docker image isn't fully featured with everything needed to run.\nWhat host OS are you using? Windows, Mac, etc?",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10879801",
                          "updatedAt": "2024-10-08T12:50:18Z",
                          "publishedAt": "2024-10-08T12:50:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mshtx-mdacc"
                          },
                          "bodyText": "NVIDIA DGX Server Version 5.4.0 (GNU/Linux 5.4.0-125-generic x86_64)",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10879906",
                          "updatedAt": "2024-10-08T12:58:05Z",
                          "publishedAt": "2024-10-08T12:58:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I don't believe our Docker image is going to make use of the GPU hardware on the host machine, if that was your goal. I am quickly browsing through this: https://docs.nvidia.com/deeplearning/deeplearning/frameworks/pdf/Preparing-To-Use-Containers.pdf\nAre you using nvidia-docker? I always thought our Docker images were self contained with the entire OS, but according to NVIDIA's literature:\n\"Containers are different than a virtual machine (VM) such as VMware. A VM has a complete operating system and possibly applications and data files. Containers do not contain a complete operating system.\"\n... mmm not sure I agree with this. Or, they can contain the entire OS (such is the case with our Docker image, based on Ubuntu). Regardless, because they make such a statement, it does have me wondering if nvidia-docker is doing something very different than say the official docker. Like, not loading up the OS environment contained in our Docker image, and perhaps, supplanting it with their own? That would actually make sense where that:\nImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found\n\nerror comes from...\nEdit: correction, we convert our Apptainer Rocky container to Docker. So not Ubuntu.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10880157",
                          "updatedAt": "2024-10-08T13:35:50Z",
                          "publishedAt": "2024-10-08T13:19:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mshtx-mdacc"
                          },
                          "bodyText": "I was told nvidia-docker is the same as docker but with GPUs. I don't plan on using the GPUs right now. This is just an old machine I can test on. I did have this working a month or two ago with this image:  idaholab/moose-dev:2faac4b\nI don't know what changed, but it stopped working with the latest git clone. I figured I'd try to get the latest working and here we are.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10880442",
                          "updatedAt": "2024-10-08T13:40:09Z",
                          "publishedAt": "2024-10-08T13:40:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I was trying to install Docker on my work machine to do the same, but the new license clause is a little concerning. I'll need to work with my manager...\nFurther reading, and I am also under the impression that nvidia-docker just enables hardware access to the GPUs. And that it still uses plain ol' Docker. So I imagine this should all work. Especially since it was with idaholab/moose-dev:2faac4b as you say.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10880584",
                          "updatedAt": "2024-10-08T13:50:10Z",
                          "publishedAt": "2024-10-08T13:50:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Okay, docker installed. I too run into an error. Not like yours, but an error regardless. I imagine mine may be related to being on an Apple ARM machine. Still, being able to go through the process I have an idea to try.\nI also receive the missing yaml module. But you can ignore these.\nPerhaps all you need to perform is a deep clean of your repository, and re-build? The compilers may have changes from your previous docker image to our current one, and the instructions make no mention of that.\ncd /projects/moose\ngit clean -xfd; git submodule foreach --recursive git clean -xfd\ncd test\nmake -j 4",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10881030",
                          "updatedAt": "2024-10-08T14:27:33Z",
                          "publishedAt": "2024-10-08T14:24:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Hah, okay. Got my MOOSE compiled, but I run into the same error as you when attempting to run tests:\nTraceback (most recent call last):\n  File \"/projects/moose/test/./run_tests\", line 6, in <module>\n    from TestHarness import TestHarness\n  File \"/projects/moose/python/TestHarness/__init__.py\", line 15, in <module>\n    from .TestHarness import TestHarness\n  File \"/projects/moose/python/TestHarness/TestHarness.py\", line 20, in <module>\n    from FactorySystem.Factory import Factory\n  File \"/projects/moose/python/FactorySystem/__init__.py\", line 13, in <module>\n    from .Parser import Parser\n  File \"/projects/moose/python/FactorySystem/Parser.py\", line 13, in <module>\n    import pyhit\n  File \"/projects/moose/python/pyhit/__init__.py\", line 22, in <module>\n    import hit\nImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found (required by /projects/moose/python/pyhit/../../framework/contrib/hit/hit.so)\n\nLooks like hit links incorrectly. Yet moose_test-opt executes fine. We just can't use the TestHarness... Pinging @loganharbour, as I know we recently changed how we link. However, I would expect things to be failing all over the place.\n# ldd hit.so \n./hit.so: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found (required by ./hit.so)\n./hit.so: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.26' not found (required by ./hit.so)\n\tlibstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007fffff064000)\n\tlibwasphit.so.04 => /opt/wasp/lib/libwasphit.so.04 (0x00007fffff016000)\n\tlibwaspson.so.04 => /opt/wasp/lib/libwaspson.so.04 (0x00007ffffefc9000)\n\tlibwaspcore.so.04 => /opt/wasp/lib/libwaspcore.so.04 (0x00007ffffefa5000)\n\tlibwaspsiren.so.04 => /opt/wasp/lib/libwaspsiren.so.04 (0x00007ffffef88000)\n\tlibwasphalite.so.04 => /opt/wasp/lib/libwasphalite.so.04 (0x00007ffffef2f000)\n\tlibwasplsp.so.04 => /opt/wasp/lib/libwasplsp.so.04 (0x00007ffffeeed000)\n\tlibwaspjson.so.04 => /opt/wasp/lib/libwaspjson.so.04 (0x00007ffffeeab000)\n\tlibwasphive.so.04 => /opt/wasp/lib/libwasphive.so.04 (0x00007ffffeea1000)\n\tlibwaspddi.so.04 => /opt/wasp/lib/libwaspddi.so.04 (0x00007ffffee82000)\n\tlibwaspexpr.so.04 => /opt/wasp/lib/libwaspexpr.so.04 (0x00007ffffee4d000)\n\tlibmpicxx.so.12 => /opt/mpich/lib/libmpicxx.so.12 (0x00007ffffee2a000)\n\tlibmpi.so.12 => /opt/mpich/lib/libmpi.so.12 (0x00007ffffe201000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x00007ffffde7f000)\n\tlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ffffdc67000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x00007ffffd891000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007fffffdce000)\n\tlibpthread.so.0 => /lib64/libpthread.so.0 (0x00007ffffd671000)\n\tlibrt.so.1 => /lib64/librt.so.1 (0x00007ffffd467000)",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10881442",
                          "updatedAt": "2024-10-08T15:03:19Z",
                          "publishedAt": "2024-10-08T14:58:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mshtx-mdacc"
                          },
                          "bodyText": "I've been removing the entire moose directory and doing a new git clone every time. The Docker container is recreated from the image every time, so it should be \"fresh\", but I will test with the git clean. I'm not sure how there would be any residual data from before.\nI was able to get the compile and test to work using the  'idaholab/moose-dev:2faac4b' image and git checkout 74e0db0. I chose that one because the last time it worked was on August 18th.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10881542",
                          "updatedAt": "2024-10-08T15:05:41Z",
                          "publishedAt": "2024-10-08T15:05:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "mshtx-mdacc"
                  },
                  "bodyText": "Rebuilding WASP failed for me too",
                  "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10883566",
                  "updatedAt": "2024-10-08T18:02:16Z",
                  "publishedAt": "2024-10-08T18:02:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Looks like another is running into possible something similar: #28815",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10897101",
                          "updatedAt": "2024-10-09T20:53:01Z",
                          "publishedAt": "2024-10-09T20:53:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am being told this may be related to WASP. However, I don't see a version difference between the two hashes. I am still investigating...",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10904565",
                          "updatedAt": "2024-10-10T13:42:26Z",
                          "publishedAt": "2024-10-10T13:42:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am not that savvy with Docker, and I am finding some oddities using it. For example, upon entering the container, Conda is not properly initialized. The whole yaml issue for example can be fixed by deactivating/reactivating the environment:\ndocker run -it -v projects:/projects idaholab/moose-dev:latest\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# python\nPython 3.10.15 | packaged by conda-forge | (main, Sep 30 2024, 17:51:04) [GCC 13.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import yaml\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'yaml'\n>>> exit()\n\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# conda deactivate\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# conda activate moose\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# python\nPython 3.11.10 | packaged by conda-forge | (main, Sep 30 2024, 18:08:57) [GCC 13.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import yaml\n>>> exit()",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10906463",
                          "updatedAt": "2024-10-10T16:25:06Z",
                          "publishedAt": "2024-10-10T16:25:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Well now... latest actually works when I deactive/reactivate the environment:\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# conda deactivate\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# conda activate moose\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: / ]\n# python\nPython 3.11.10 | packaged by conda-forge | (main, Sep 30 2024, 18:08:57) [GCC 13.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import yaml\n>>> exit()\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: (master) / ]\n# cd /projects/moose/test\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: (master) /projects/moose/test ]\n# make -j 3\n...\n<trimmed>\n...\nLinking Executable /projects/moose/test/moose_test-opt...\nmoose-dev-mpich-x86_64:28a1964 [root@86ae33b6579f: (master) /projects/moose/test ]\n# ./run_tests -i always_ok\ntests/test_harness.always_ok .............................................................................. OK\n---------------------------------------------------------------------------------\nRan 1 tests in 0.8 seconds. Average test time 0.6 seconds, maximum test time 0.6 seconds.\n1 passed, 0 skipped, 0 pending, 0 failed\nCan you try to do the following:\nconda deactivate\nconda activate moose\ncd /projects/moose/test\nmake\nand perhaps after a git clean -xfd to be sure... and then run tests?",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10906649",
                          "updatedAt": "2024-10-10T16:45:03Z",
                          "publishedAt": "2024-10-10T16:45:03Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mshtx-mdacc"
                          },
                          "bodyText": "Deactivating and activating conda worked. There was no need for git clean -xfd since I did a fresh clone.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10947929",
                          "updatedAt": "2024-10-15T13:14:23Z",
                          "publishedAt": "2024-10-15T13:14:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am working on a PR which I hope will help with not requiring deactivate/reactivate procedures. We obviously don't want this to be a requirement!",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10949270",
                          "updatedAt": "2024-10-15T15:11:55Z",
                          "publishedAt": "2024-10-15T15:11:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "brandonlangley"
                  },
                  "bodyText": "@milljm -\nIt may be unrelated, but is this the same issue encountered back in April with #27377 hitting this exact same GLIBCXX error:\nTraceback (most recent call last):\n  File \"/path/to/moose/python/pyhit/__init__.py\", line 18, in <module>\n    import hit\nImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.29' not found (required by /path/to/hit.so)",
                  "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10909013",
                  "updatedAt": "2024-10-10T21:45:56Z",
                  "publishedAt": "2024-10-10T21:45:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I have a feeling this is going to be something solved when I get around to this: #28813\nBasically, I am finding 'sourcing' the environment is not enough when dealing with our container's initialization routines.",
                          "url": "https://github.com/idaholab/moose/discussions/28798#discussioncomment-10915435",
                          "updatedAt": "2024-10-11T13:14:22Z",
                          "publishedAt": "2024-10-11T13:14:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}