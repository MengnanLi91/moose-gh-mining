{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMy0xMFQwOTozNTo1OS0wNjowMM4AS3P0"
    },
    "edges": [
      {
        "node": {
          "title": "Plasticity Hardening Model",
          "author": {
            "login": "sSajjad90"
          },
          "bodyText": "Hello,\nI'm working on precipitation hardening of aluminum alloys and have already written source code to assess microstructure development and yield stress. I'm now attempting to adapt the IsotropicPlasticityStressUpdate.C and IsotropicPowerLawHardeningStressUpdate.C source codes to utilize a new hardening model in plastic deformation based on the equations below.\n\nDo you know how I may update the IsotropicPlasticityStressUpdate.C and IsotropicPowerLawHardeningStressUpdate.C source codes or build a new one to adopt this hardening model?\nSincerely,\nSajjad",
          "url": "https://github.com/idaholab/moose/discussions/23621",
          "updatedAt": "2023-04-29T03:13:26Z",
          "publishedAt": "2023-03-06T20:11:34Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You should write a new material for this. IsotropicPowerLawHardeningStressUpdate is a decent example.",
                  "url": "https://github.com/idaholab/moose/discussions/23621#discussioncomment-5291409",
                  "updatedAt": "2023-03-13T13:09:48Z",
                  "publishedAt": "2023-03-13T13:09:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Convergence problem solving Current continuity Eq. by MatDiffusion kernel",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Hello, guys.\nI tried to solve Poisson's equation (Current continuity) by MatDiffusion kernel and found a convergence problem.\nPhysical system (that I want to implement) Description:\nI want to investigate the evolution of defects which is electrically conductive and electric current from x=0 to x= 10 (nm).\nThe way of generating defect is changing the eta value from 0 to 1 and this contributes to electrical_conductivity.\nEach mesh defines both Pc and P, and Pc increases when the electric field evaluated in the mesh increases.\nThe defect is generated when the nucleus-generating probability (Pc) is higher than 0.1 (P).\nThe execution type is time-transient.\nNo time-derivative term is in Poisson's equation but I increase x=0 BC from 4.0V to 4.8V (voltage) in 200-time steps, that's why.\nI want to know how I am able to successfully do this calculation.\nMy input file:\n####### time step #######\nTIME_STEP = 0.05\nsteps = 200\n####### time step #######\n\n######## Mesh ########\nxmax = 10\nymax = 20\nxdelta = 0.2\nydelta = 0.2\nnx = ${fparse ${xmax} / ${xdelta} }\nny = ${fparse ${ymax} / ${ydelta} }\nVe = ${fparse ${xdelta} * ${ydelta}}\n######## Mesh ########\n\n##### Voltage ######\nVoltage = 4.0\n##### Voltage ######\n\n\n[Mesh]\n  [./gen]\n  type = GeneratedMeshGenerator\n  dim = 2\n  elem_type = quad9\n  nx = ${nx}\n  ny = ${ny}\n  xmin = 0\n  xmax = ${xmax}\n  ymin = 0\n  ymax = ${ymax}\n  [../]\n[]\n\n[Functions]\n  [./bc_func]\n    type = PiecewiseLinear\n    data_file = './vsweep.csv'\n    format = columns\n    scale_factor = 1.0\n  [../]\n[]\n\n[Variables]\n  [./V] # potential [V]\n    order = SECOND\n    family = LAGRANGE\n  [../]\n[]\n\n[Kernels]\n  ######## Electric #######\n  [./CoupledLaplace_V]\n    type = MatDiffusion\n    variable = V\n    diffusivity = electrical_conductivity\n    #  block = '0 2'\n  [../]\n  ######## Electric END #######\n[]\n\n[ICs]\n  ######## Electric #######\n  [./V_IC]\n    type = ConstantIC\n    variable = V\n    value = 0\n  [../]\n  ######## Electric END #######\n[]\n \n[AuxVariables]\n  ######## PFM ########\n  [./T]\n    order = CONSTANT\n    family = MONOMIAL\n    [./InitialCondition] #Temperature\n        type = ConstantIC\n        value = 463.0\n    [../]\n  []\n  ######## PFM END ########\n\n  ######## Electric #######\n  [Ex]\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  [Ey]\n    order = FIRST\n    family = MONOMIAL\n  []\n\n  [J]\n    family = NEDELEC_ONE\n    order = FIRST\n  []\n\n  [Jx]\n    order = FIRST\n    family = MONOMIAL\n  []\n  ######## Electric END #######\n\n  ######## Additional #########\n  [Emag]\n    order = FIRST\n    family = MONOMIAL\n  []\n  [G]\n    order = FIRST\n    family = MONOMIAL\n  []\n  [Pc]\n    order = FIRST\n    family = MONOMIAL\n  []\n  [eta]\n    order = FIRST\n    family = MONOMIAL\n  []\n  ######## Additional END #####\n[]\n\n[AuxKernels]\n  ######## Electric #######\n  [Ex_aux]\n    type = PotentialToFieldAux\n    variable = Ex\n    gradient_variable = V\n    sign = negative\n    component = x\n  []\n  [Ey_aux]\n    type = PotentialToFieldAux\n    variable = Ey\n    gradient_variable = V\n    sign = negative\n    component = y\n  []\n  [current_density]\n    type = CurrentDensity\n    variable = J\n    potential = V\n  []\n  [Jx]\n    type = VectorVariableComponentAux\n    variable = Jx\n    vector_variable = J\n    component = x\n  []\n  ######## Electric END #######\n\n  ######## Additional #########\n  [Emag_aux]\n    type = ParsedAux\n    variable = Emag\n    args = 'Ex   Ey'\n    function = 'sqrt(Ex * Ex + Ey * Ey) '  # [V/nm]\n  []\n  [G_aux]\n    type = ParsedAux\n    variable = G\n    args = 'T  Emag'\n    constant_names =        'G0   Ea   b      kB'\n    constant_expressions =  '1.0e3  5.9  9.18   8.617e-5'  # [1/(nm^3*s)] [eV] [enm] [eV/K]\n    function = 'G0 * exp(-1.0 * (Ea - b * Emag) / (kB * T))'\n  []\n  [Pc_aux]\n    type = ParsedAux\n    variable = Pc\n    args = 'G'\n    function = '1 - exp(-1.0 * G * ${Ve} * ${TIME_STEP})'\n  []\n  [eta_aux]\n    type = ParsedAux\n    variable = eta\n    use_xyzt = true\n    args = 'Pc  P'\n    function = 'if( (x-2)^2+(y-10)^2 < 1.0 ,1.0, if(Pc > P, 1.0, 0.0))'\n  []\n  [P_aux]\n    type = ParsedAux\n    variable = P\n    use_xyzt = true\n    expression = '0.1'\n  []\n  ######## Additional END #####\n[]\n\n[Materials]\n  ######## Electric #######\n  [electrical_conductivity]\n    type = ParsedMaterial\n    args = 'eta'\n    f_name = 'electrical_conductivity'\n    constant_names =        'sig_L  sig_H'\n    #constant_expressions =  '3.5e-5  3e-12'\n    constant_expressions =  '3.5e-5  3.5e-5'\n    function = '(sig_L * eta + sig_H)'  # [1/(ohm*nm)]\n    outputs = exodus\n  ######## Electric END #######\n  []\n[]\n\n[BCs]\n  ######## Electric #######\n  [V_left]\n    type = FunctionDirichletBC\n    variable = V\n    function = bc_func\n    boundary = 'left'\n  []\n  [V_right]\n    type = DirichletBC\n    variable = V\n    value = 0.0 # GND\n    boundary = 'right'\n  []\n  ######## Electric END #######   \n[]\n\n[Preconditioning]\n    [./SMP]\n        type = SMP\n        full = true\n    [../]\n[]\n\n[Executioner]\n  type = Transient\n  scheme = 'bdf2'\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre      boomeramg'\n  #  petsc_options_iname = '-pc_type   -ksp_grmres_restart -sub_ksp_type   -sub_pc_type    -pc_asm_overlap'\n  #  petsc_options_value = 'asm        101                 preonly         ilu             1'\n  l_tol = 1e-8 # linear tolerance\n  nl_rel_tol = 1e-8 # nonlinear relative tolerance\n  nl_abs_tol = 1.0e-9 # nonlinear absolute tolerance\n  automatic_scaling = true # for line search convergence\n  l_max_its = 100 # linear max iterations\n  nl_max_its = 40 # nonlinear max iterations\n  [./TimeStepper]\n    type = SolutionTimeAdaptiveDT\n    dt = ${TIME_STEP}\n  [../]\n  dtmin = ${fparse ${TIME_STEP}/5000000}\n  num_steps = ${steps}\n[]\n\n[Postprocessors]\n  ######## Electric #######\n  [./Resistance]\n    type = ParsedPostprocessor\n    function = 'if(Current<1e1,${Voltage}/Current,0.0)'\n    pp_names = Current\n  [../]\n  [average_Jx]\n    type = SideAverageValue\n    variable = Jx\n    boundary = right\n  []\n  [Current]\n    type = ParsedPostprocessor\n    function = \"if(average_Jx>0,average_Jx*${ymax}, -average_Jx*${ymax})\"\n    pp_names = average_Jx\n  []\n  ######## Electric END #######\n\n  ######## PFM ########\n  [./total_nodes]\n    type=NumNodes\n  [../]\n  ######## PFM END ########\n[]\n\n[Debug]\n  show_var_residual_norms = true\n[]\n\n[Outputs]\n  file_base = output\n  csv = true\n  exodus = true\n  [./console]\n    type = Console\n    max_rows = 10\n  [../]\n[]\n\nError messages in the log file:\n...........\n    26 Linear |R| = ^[[33m1.253986e-10^[[39m\n     27 Linear |R| = ^[[33m1.223554e-10^[[39m\n     28 Linear |R| = ^[[33m1.194597e-10^[[39m\n     29 Linear |R| = ^[[33m1.168171e-10^[[39m\n  Linear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\nAborting as solve did not converge\nSolve failed... cutting timestep\n\nTime Step 85, time = 7.81436, dt = 1e-08\n 0 Nonlinear |R| = ^[[32m1.407724e-09^[[39m\n    |residual|_2 of individual variables:\n                          V: 1.40772e-09\n      0 Linear |R| = ^[[32m1.407724e-09^[[39m\n      1 Linear |R| = ^[[33m1.407719e-09^[[39m\n      2 Linear |R| = ^[[33m1.407715e-09^[[39m\n      3 Linear |R| = ^[[33m1.407698e-09^[[39m\n      4 Linear |R| = ^[[33m1.406281e-09^[[39m\n      5 Linear |R| = ^[[32m9.212685e-10^[[39m\n      6 Linear |R| = ^[[32m5.938672e-10^[[39m\n      7 Linear |R| = ^[[32m4.046493e-10^[[39m\n      8 Linear |R| = ^[[32m3.230237e-10^[[39m\n      9 Linear |R| = ^[[32m2.830838e-10^[[39m\n     10 Linear |R| = ^[[32m2.569500e-10^[[39m\n     11 Linear |R| = ^[[32m2.358908e-10^[[39m\n     12 Linear |R| = ^[[32m2.199656e-10^[[39m\n     13 Linear |R| = ^[[32m2.063929e-10^[[39m\n     14 Linear |R| = ^[[32m1.954202e-10^[[39m\n     15 Linear |R| = ^[[33m1.857513e-10^[[39m\n     16 Linear |R| = ^[[33m1.776071e-10^[[39m\n     17 Linear |R| = ^[[33m1.702724e-10^[[39m                                                                                                                                                    18 Linear |R| = ^[[33m1.639205e-10^[[39m\n     19 Linear |R| = ^[[33m1.581113e-10^[[39m\n     20 Linear |R| = ^[[33m1.529787e-10^[[39m\n     21 Linear |R| = ^[[33m1.482307e-10^[[39m\n     22 Linear |R| = ^[[33m1.439718e-10^[[39m\n     23 Linear |R| = ^[[33m1.399970e-10^[[39m\n     24 Linear |R| = ^[[33m1.363892e-10^[[39m\n     25 Linear |R| = ^[[33m1.329983e-10^[[39m\n     26 Linear |R| = ^[[33m1.298911e-10^[[39m\n     27 Linear |R| = ^[[33m1.269540e-10^[[39m\n     28 Linear |R| = ^[[33m1.242415e-10^[[39m\n     29 Linear |R| = ^[[33m1.216652e-10^[[39m\n  Linear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n^[[31m Solve Did NOT Converge!^[[39m\n\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"SolutionTimeAdaptiveDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!^[[39m\n\nAbort(1) on node 28 (rank 28 in comm 0): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 28\n\nIn my opinion, the problem is that G value and P value which increase with evaluated electric field have too sharp feature in a single step. But I am not sure. Please, give me some help. Thank you\nSincerely, bosxered\nP.S.\nMy system:\n\nFig.1\ne_X : x-direction electric field\nv : voltage (electric potential)\nwhat I tried:\n\nFig.2 set P=0.1 and last successfully calculated situation\n\nFig.2 set P=0.01 and last successfully calculated situation\nso, what I want to tell you is that at first, in the last step, calculated Pc value is ~0.03 and failed to converge\nSo I decreased P value to 0.01 and the last successfully calculated step is changed when Pc value is ~ 0.003.\nI believe it is totally weird and that is why I think the problem is in the moment of eta is changed from 0 to 1.",
          "url": "https://github.com/idaholab/moose/discussions/23578",
          "updatedAt": "2023-03-13T06:42:28Z",
          "publishedAt": "2023-03-02T08:16:52Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere's a few red flags in the convergence history\n     29 Linear |R| = ^[[33m1.216652e-10^[[39m\n  Linear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\n\nwhile we are solving seemingly fairly tightly, the result is being rejected.\nThis probably means the convergence criteria need to be adapted.\nYou can also scale the convergence criteria using automatic scaling to make it more normalized.\nYou ll want to look at the parameters to set this in the Executioner.\nOnce you get convergence on all steps, you can consider whether the results are correct\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23578#discussioncomment-5183253",
                  "updatedAt": "2023-03-02T21:01:32Z",
                  "publishedAt": "2023-03-02T21:01:31Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Thank you for answering!",
                          "url": "https://github.com/idaholab/moose/discussions/23578#discussioncomment-5287583",
                          "updatedAt": "2023-03-13T06:42:28Z",
                          "publishedAt": "2023-03-13T06:42:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Default computer core?",
          "author": {
            "login": "hhy2022"
          },
          "bodyText": "Hi, I am trying to figure out the computational expense of the calculation. When I am runing a case, I use the command 'myapp-opt -i input.i' without any other specification. Does it mean I am using the default core? How many computer core I am using? Can I use more cores to shorter the calculation time?\nThank you very much for any help.",
          "url": "https://github.com/idaholab/moose/discussions/23675",
          "updatedAt": "2023-03-13T12:39:44Z",
          "publishedAt": "2023-03-09T13:18:00Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "Hi,\nYou can use following command to set core numbers, the nomber after \"n\" shows core numbers, here for example it is 6 :\nmpirun -n 6 ./AppName-opt -i input.i\nRahim",
                  "url": "https://github.com/idaholab/moose/discussions/23675#discussioncomment-5254846",
                  "updatedAt": "2023-03-09T14:03:47Z",
                  "publishedAt": "2023-03-09T14:03:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much for the information.\nBesides, do you have any idea on how to check the core number I am using now? I didn't specify any core numbers, just want to know the defult value (if there was one).",
                          "url": "https://github.com/idaholab/moose/discussions/23675#discussioncomment-5255780",
                          "updatedAt": "2023-03-09T15:23:44Z",
                          "publishedAt": "2023-03-09T15:23:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "In the calculation header you can look at the number of processes used.\nBy default you are using 1",
                          "url": "https://github.com/idaholab/moose/discussions/23675#discussioncomment-5255968",
                          "updatedAt": "2023-03-09T15:38:31Z",
                          "publishedAt": "2023-03-09T15:38:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Got it.\nThank you very much!",
                          "url": "https://github.com/idaholab/moose/discussions/23675#discussioncomment-5256606",
                          "updatedAt": "2023-03-09T16:27:26Z",
                          "publishedAt": "2023-03-09T16:27:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Define domain with multiple material functions",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I am currently using, type = ADGenericConstantMaterial,   prop_names = 'rho mu cp k'. I would like to define each of the materials with an analytical function. is there something similar to ADGenericConstantMaterial that allows me to define rho mu cp k, with an analytical function for each?",
          "url": "https://github.com/idaholab/moose/discussions/23694",
          "updatedAt": "2023-03-13T03:17:12Z",
          "publishedAt": "2023-03-12T01:00:42Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou can use GenericFunctionMaterial for functions of time and space.\nFor analytical functions of things like variables you may use the ParsedMaterial\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5279205",
                  "updatedAt": "2023-03-12T03:54:56Z",
                  "publishedAt": "2023-03-12T03:54:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Thank you very much. I thought that GenericFunctionMaterial might be the used for that, but I was not sure of the syntax and the ability to define a function for multiple entities. Thanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5279215",
                          "updatedAt": "2023-03-12T03:58:49Z",
                          "publishedAt": "2023-03-12T03:58:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yeah it can. The big limitation to functions is that, without additional code, are only functions of space and time",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5279333",
                          "updatedAt": "2023-03-12T04:56:19Z",
                          "publishedAt": "2023-03-12T04:56:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "What do most users use when they want to vary material properties as functions of defined variables?",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5279339",
                          "updatedAt": "2023-03-12T04:59:37Z",
                          "publishedAt": "2023-03-12T04:59:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you have a simple expression you can write in an input files, the ParsedMaterial\nif not then you ll have to make your own material, using C++ code. The tutorial explains how",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5281424",
                          "updatedAt": "2023-03-12T13:53:36Z",
                          "publishedAt": "2023-03-12T13:53:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "It appears that these (Material property 'rho', requested by 'ins_mat' is not defined on block Coolant\nMaterial property 'rho', requested by 'ins_mat_face' is not defined on block Coolant\nMaterial property 'rho', requested by 'ins_mat_neighbor' is not defined on block Coolant\nMaterial property 'rho', requested by 'mass_pspg' is not defined on block Coolant\n) expect that material properties be defined in from ADGenericConstantMaterial is preventing my use of ParsedMaterial to specify rho as a function of temperature.",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5282961",
                          "updatedAt": "2023-03-12T18:37:45Z",
                          "publishedAt": "2023-03-12T18:37:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can only specify a property once.\nYou also need to be consistent with using AD. So you ll want to use an ADParsedMaterial most likely",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5284973",
                          "updatedAt": "2023-03-12T21:26:42Z",
                          "publishedAt": "2023-03-12T21:26:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Yep. I figured that would probably be the cause for the issue. I tried the command using AD, and it is what resulted in the previous issue I shared. I removed rho as a definition in the ADConst defined it in the ADParsed. The other portions of AD did not recognize rho as being defined.",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5285646",
                          "updatedAt": "2023-03-12T23:40:42Z",
                          "publishedAt": "2023-03-12T23:40:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you please paste your former and current Materials block?",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5285671",
                          "updatedAt": "2023-03-12T23:43:35Z",
                          "publishedAt": "2023-03-12T23:43:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "[Materials] # Old\n  [./const]\n    type = ADGenericConstantMaterial\n    prop_names = 'rho mu cp k'\n    prop_values = '1000  0.001 4179.0  0.598' #[kg/m^3*1e-9] [Pa*sec*1e-6] [J/kg/K*1e6] [W/m/K*1e3] non exponential forms\n  [../]\n  [ins_mat]\n    type = INSADStabilized3Eqn\n    velocity = velocity\n    pressure = p\n    temperature = T_fluid\n  []\n[]\n\n[Materials] # New\n  [./const]\n    type = ADGenericConstantMaterial\n    prop_names = 'mu cp k'\n#    prop_values = '0.001 4179.0  0.598' #[kg/m^3*1e-9] [Pa*sec*1e-6] [J/kg/K*1e6] [W/m/K*1e3] non exponential forms \n  [../]\n  [./rho_density]\n    type = ADParsedMaterial\n    property_name = 'rho'\n    coupled_variables = 'T_fluid'\n    function = '99.98*((1.000088*(T_fluid-283.2))/(1-(p-1.0e5)/2.15e9))'\n#    outputs = exodus\n  [../]\n  [ins_mat]\n    type = INSADStabilized3Eqn\n    velocity = velocity\n    pressure = p\n    temperature = T_fluid\n  []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286387",
                  "updatedAt": "2023-03-13T02:34:03Z",
                  "publishedAt": "2023-03-13T02:32:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what error are you getting?\nThis looks right, except it should be: expression = '99.98*((1.000088*(T_fluid-283.2))/(1-(p-1.0e5)/2.15e9))'",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286397",
                          "updatedAt": "2023-03-13T02:35:06Z",
                          "publishedAt": "2023-03-13T02:35:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh is your MOOSE old?\nif so property_name is not the name of the parameter, it s still called f_name in an old version of MOOSE\nproperty_name would return an unused parameter warning",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286400",
                          "updatedAt": "2023-03-13T02:35:44Z",
                          "publishedAt": "2023-03-13T02:35:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Yes, the version on this system is old, and I have to switch between expression and function when moving from one computer to the other.",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286411",
                          "updatedAt": "2023-03-13T02:37:37Z",
                          "publishedAt": "2023-03-13T02:37:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You ll have to use the old parameters. property-name is not recognized, so the default for f_name is being used.\nso instead of declaring rho you are declaring a property as F and naturally getting an error",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286432",
                          "updatedAt": "2023-03-13T02:40:05Z",
                          "publishedAt": "2023-03-13T02:40:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "This is the error that I get when I use T_fluid in the definition of rho:\n*** ERROR ***\nInvalid function\n99.98*((1.000088*(T_fluid-283.2))/(1-(p-1.0e5)/2.15e9))\nin ParsedMaterialHelper.\nSyntax error: Unknown identifier",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286437",
                          "updatedAt": "2023-03-13T02:40:48Z",
                          "publishedAt": "2023-03-13T02:40:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you need to adapt all the parameters\nAll your neew syntax parameters are not recognized\nyou should have args = 'p T_fluid'",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286542",
                          "updatedAt": "2023-03-13T03:02:18Z",
                          "publishedAt": "2023-03-13T03:02:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "My apologies upfront for not having mastered how to prevent the super large fonts.",
                  "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286392",
                  "updatedAt": "2023-03-13T02:34:03Z",
                  "publishedAt": "2023-03-13T02:34:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no worries. I use the triple backquotes to do that",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286403",
                          "updatedAt": "2023-03-13T02:36:17Z",
                          "publishedAt": "2023-03-13T02:36:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "Had to remove the reference to T_fluid, and it got me further in the processing chain. I now get this error instead:\n*** ERROR ***\n/home/twise/projects/moose/modules/combined/7x7PWR_Assembly/Models/CoolantVelocityPWR.i:217: unused parameter 'Materials/rho_density/coupled_variables'",
                  "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286502",
                  "updatedAt": "2023-03-13T02:54:45Z",
                  "publishedAt": "2023-03-13T02:54:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "should be args, not coupled_variables.\nYou can add T and p back once you have that fixed",
                          "url": "https://github.com/idaholab/moose/discussions/23694#discussioncomment-5286603",
                          "updatedAt": "2023-03-13T03:17:12Z",
                          "publishedAt": "2023-03-13T03:17:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Why does FSP report an error you must have exactly 2 fields\uff1f",
          "author": {
            "login": "nanguaxiaofendui"
          },
          "bodyText": "Hello, everyone!\nWhen I used FSP preprocessing, the following error occurred. How can I correct it? Thank you very much\uff01",
          "url": "https://github.com/idaholab/moose/discussions/23695",
          "updatedAt": "2023-04-29T03:34:07Z",
          "publishedAt": "2023-03-12T13:09:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe Schur decomposition is well defined for two groups of variable, but has not been extended to more than that\nif you want more splits than two groups then you need to use a multipliciative or additive field split instead of Schur.\nThey may not converge as well from our experience\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23695#discussioncomment-5281871",
                  "updatedAt": "2023-03-12T15:23:33Z",
                  "publishedAt": "2023-03-12T15:23:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Laser welding with Baldr/MALAMUTE",
          "author": {
            "login": "am-tc01"
          },
          "bodyText": "Hi,\nI need to simulate laser welding and melt pool formation with fluid flow and surface deformation like the example given on Moose homepage. Is it possible to employ ALE using the current moose version to do this?\nFollowing a discussion here, I understood that this example was simulated in Baldr or Malamute. Is is possible to get access to that?\nRegards.",
          "url": "https://github.com/idaholab/moose/discussions/23032",
          "updatedAt": "2023-03-12T13:21:15Z",
          "publishedAt": "2022-12-27T16:35:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@jiangwen84 will know more but I think the situation has not changed since this other post.",
                  "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4504938",
                  "updatedAt": "2022-12-27T22:08:51Z",
                  "publishedAt": "2022-12-27T22:08:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "Thanks @GiudGiud. I actually applied for an INL HPC account stating the reason that I need access to MALAMUTE, but my application was denied. I was told that NCRC doesn't manage MALAMUTE but it is the Technology Department (also cc'd in that email) that manages this and can advise on how to obtain the code. I then contacted the Technology Department but haven't heard anything from them since.\nDo you have any more info @jiangwen84 or @cticenhour ?\nThanks!",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4507814",
                          "updatedAt": "2022-12-28T11:05:57Z",
                          "publishedAt": "2022-12-28T11:05:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Getting the INL HPC account through the NCRC is still the way to get started, as MALAMUTE access is not possible without an account. INL is closed for the holiday season, which may be why you haven't gotten a reply from Technology Deployment. I can check in on this in January, once INL is back to work.",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4509314",
                          "updatedAt": "2022-12-28T16:13:08Z",
                          "publishedAt": "2022-12-28T16:13:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "Thanks @cticenhour. My application for an account on INL HPC was denied because of the reason I stated above. But I can wait for an answer from Technology Deployment, and if then needed I'll re-apply for the HPC account.\nHappy holidays!",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4544906",
                          "updatedAt": "2022-12-29T09:14:24Z",
                          "publishedAt": "2022-12-29T09:14:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Any update on this @am-tc01 ?",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4868123",
                          "updatedAt": "2023-02-04T07:21:30Z",
                          "publishedAt": "2023-02-04T07:21:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "@GiudGiud No, I haven't heard anything from Technology Deployment.\n@cticenhour I wonder if you had time to check in on this?\nThanks!",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4881008",
                          "updatedAt": "2023-02-06T10:36:59Z",
                          "publishedAt": "2023-02-06T10:36:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Did you send another email to them after the holidays? Your old email may have gotten left behind in their inbox, so it's worth giving them a reminder that you're waiting. Also, if I need to follow up with them directly, I would need more information from you - like, your current university/institution and name.",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4885234",
                          "updatedAt": "2023-02-06T17:43:37Z",
                          "publishedAt": "2023-02-06T17:43:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "Hi @cticenhour\nI have now sent an email to Technology Deployment and cc'ed you as well.\nHope to hear back from them soon.\nThanks!",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-4906096",
                          "updatedAt": "2023-02-08T14:59:01Z",
                          "publishedAt": "2023-02-08T14:59:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "Hi, Just wondering if there is any update on this @cticenhour?",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5085865",
                          "updatedAt": "2023-02-23T08:51:52Z",
                          "publishedAt": "2023-02-23T08:51:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Spoke to the manager over the NCRC, and am working on resurrecting your case on my end. Will let you know when I know more.",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5090515",
                          "updatedAt": "2023-02-23T16:31:33Z",
                          "publishedAt": "2023-02-23T16:31:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Hi again - you should have received an email a bit ago regarding MALAMUTE access from the NCRC. I am CC-ed on that email message, so please feel free to reach out directly if you have other issues. Thanks again for your interest in MALAMUTE!",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5094130",
                          "updatedAt": "2023-02-23T21:42:40Z",
                          "publishedAt": "2023-02-23T21:42:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "@am-tc01 Good news - MALAMUTE is now open source and can be found at https://github.com/idaholab/malamute.\nGiven this new status for MALAMUTE, do you still require INL HPC access? Please advise. Thanks!",
                  "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5256918",
                  "updatedAt": "2023-03-09T16:54:35Z",
                  "publishedAt": "2023-03-09T16:54:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "am-tc01"
                          },
                          "bodyText": "Hi @cticenhour Thanks for the info. Yes that is indeed a good news!\nNo, I wouldn't require INL HPC access anymore. I'll reply to their email as well.\nOn a separate note, I have already started looking into the MALAMUTE code and tried to run some of the examples. Some of them worked, but some didn't converge and few gave errors. But perhaps I can create separate tickets for those in the Malamute discussion forum.",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5281254",
                          "updatedAt": "2023-03-12T13:14:52Z",
                          "publishedAt": "2023-03-12T13:14:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Yes, please open a discussion on the MALAMUTE repository for any examples that aren't running as expected.",
                          "url": "https://github.com/idaholab/moose/discussions/23032#discussioncomment-5281290",
                          "updatedAt": "2023-03-12T13:21:16Z",
                          "publishedAt": "2023-03-12T13:21:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Magnitude of the gradient of the unknown variable",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello everyone,\nI need to get the magnitude of the gradient of the unknown variable (abs(_grad_u)) to compute the residual term in the weak form of the equation. Is there any available object so I can get the abs(_grad_u) or I should do it myself?\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/23693",
          "updatedAt": "2023-04-29T03:34:16Z",
          "publishedAt": "2023-03-11T17:41:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\ndon\u2019t think we have that one but you could save the gradient in an intermediate aux variable, then use another auxkernel to get the magnitude of the vector.\nIt will only cost a little bit of extra memory to do that\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23693#discussioncomment-5277891",
                  "updatedAt": "2023-03-11T20:43:11Z",
                  "publishedAt": "2023-03-11T20:43:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "About the MaterialProperty is not defined on block",
          "author": {
            "login": "Nuwanted"
          },
          "bodyText": "Hi moose experts\uff0c\nI want to add an anisotropic effect to mobility, different anisotropic parameters are assigned to different regions by judging the values of order parameters. When I compiled the anisotropic module, I ran the file with an error in the title.\nI am puzzled, and I 'd like to accept your advice and guidance. May someone help me? Thank you very much.\nThis is my file:\nInput file:\n[Variables]\n  [./c]\n    order = FIRST\n    family = LAGRANGE    \n  [../]\n  [./w]\n    order = FIRST \n    family = LAGRANGE\n\tscaling = 1.0e-2\n  [../]\n  [./V]\n    order = FIRST \n    family = LAGRANGE\n\tscaling = 1.0e+2   \n  [../]\n  [./eta1]\n    order = FIRST\n    family = LAGRANGE     \n  [../]\n  [./eta2]\n    order = FIRST\n    family = LAGRANGE     \n  [../]\n[]\n[ICs]\n\t[./eta1]\n\t\ttype = SmoothSuperellipsoidIC\n\t\tblock = 1\n\t\ta = 2\n\t\tb = 2\n\t\tn = 2\n\t\tx1 = -10\n\t\ty1 = 0\n\t\tvariable = eta1\n\t\tinvalue = 0\n\t\toutvalue = 1.0\n\t\tint_width = 0.07\n\t[../] \n    [./eta2] \n\t  type = BoundingBoxIC\n\t  block = 2  \n\t  x1 = 0\n\t  y1 = -10\n\t  x2 = 50\n\t  y2 = 10\n\t  variable = eta2\n\t  inside = 1.0\n\t  outside = 0.0\n\t  int_width = 0.05\n   [../]     \n   [./c]\n    type = SmoothSuperellipsoidIC\n    a = 2\n\tb = 2\n\tn = 2 \n\tx1 = -10\n\ty1 = 0\n\tvariable = c\n\tinvalue = -1.0\n\toutvalue = 1.0\n\tint_width = 0.07\n  [../]\n[]\n\n[./mobility_2]\n    type = ANisotropicForth\n    op = c\n    mode_number = mnum\n    reference_angle = reangle\n    anisotropy_strength = anstre\n  [../]\n[./modenum]\n    type = ParsedMaterial\n    f_name = mnum\n    args = 'eta1 eta2'\n    function = 'if(eta1>=0.5 & eta2 <0.5, 1,1)'\n  [../]\n  [./referneceangle]\n    type = ParsedMaterial\n    f_name = reangle\n    args = 'eta1 eta2'\n    function = 'if(eta1>=0.5 & eta2 <0.5, 0,0)'\n  [../]\n [./anisotropicstre]\n    type = ParsedMaterial\n    f_name = abstre\n    args = 'eta1 eta2'\n    function = 'if(eta1>=0.5 & eta2 <0.5, 1,1)'\n  [../]\n\nANisotropic file:\nInputParameters\nANisotropicForth::validParams()\n{\n  InputParameters Params = Material::validParams();\n  Params.addClassDescription(\"anistropy_function\");\n  Params.addRequiredParam<MaterialPropertyName>(\n\t\t\"anisotropy_strength\", \"strengthen value\");\n  Params.addRequiredParam<MaterialPropertyName>(\n\t\t\"mode_number\", \"mode number for anisotropic\");\n  Params.addRequiredParam<MaterialPropertyName>(\n\t\t\"reference_angle\", \"Reference angle for defining anisotropy in degrees\");\n  Params.addRequiredCoupledVar(\"op\", \"Order parameter \");\n  return Params;\n}\n\nANisotropicForth::ANisotropicForth(const InputParameters & Parameters)\n\t: Material(Parameters),\n\t// Get the parameters from the input file\n\t_delta(getMaterialProperty<Real>(\"anisotropy_strength\")),\n\t_j(getMaterialProperty<Real>(\"mode_number\")),\n\t_theta0(getMaterialProperty<Real>(\"reference_angle\")),\n\t_fun(declareProperty<Real>(\"fun\")),\n\t_dfun(declareProperty<Real>(\"dfun\")),\n\t_d2fun(declareProperty<Real>(\"d2fun\")),\n\t_dfundgrad_op(declareProperty<RealGradient>(\"dfundgrad_op\")),\n\t_ddfundgrad_op(declareProperty<RealGradient>(\"ddfundgrad_op\")),\n\t_op(coupledValue(\"op\")),\n\t_grad_op(coupledGradient(\"op\"))\n{\n\tif (_mesh.dimension() != 2)\n\t\tmooseError(\"ANisotropicForth requires a two-dimensional mesh.\");\n}\n\nvoid\nANisotropicForth::computeQpProperties()\n{\n\tconst Real tol = 1e-9;\n\tconst Real cutoff = 1.0 - tol;\n\t// tagent of the gradient orientation angle\n\tReal n = 0.0;\n\tconst Real nsq = _grad_op[_qp].norm_sq();\n\tif (nsq>tol)\n\t\tn = std::max(-cutoff, std::min((_grad_op[_qp](1) / _grad_op[_qp](0)) / std::sqrt(nsq), cutoff));\n\n\t// calculate angle\n\tconst Real angle = std::atan2(_grad_op[_qp](1), _grad_op[_qp](0));\n\n\t// Compute derivative of angle wrt n\n\tconst Real dangledn = MathUtils::sign((_grad_op[_qp](1)) / _grad_op[_qp](0)) / (1.0 + n * n);\n\n\tRealGradient dndgrad_op;\n\tif (nsq > tol)\n\t{\n\t\tdndgrad_op(0) = -2 * _grad_op[_qp](1) - _grad_op[_qp](1) * _grad_op[_qp](1) * _grad_op[_qp](1) / (_grad_op[_qp](0) * _grad_op[_qp](0));\n\t\tdndgrad_op(1) = _grad_op[_qp](0);\n\t\tdndgrad_op /= (_grad_op[_qp].norm_sq() * _grad_op[_qp].norm());\n\t}\n\n\n\n\t// Calculate  function of mobility\n\n\t_fun[_qp] = ((_delta[_qp] * std::pow(cos(_j[_qp] * (angle + _theta0[_qp] * libMesh::pi / 180)), 2.0) + 1.0) / (1.0 + _delta[_qp]));\n\n\n\t// Calculate interfacial parameter function  's derivatives  \n\t_dfun[_qp] = -_delta[_qp] * _j[_qp] * std::sin(2.0 * _j[_qp] * (angle + _theta0[_qp] * libMesh::pi / 180)) / (1.0 + _delta[_qp]);\n\t_d2fun[_qp] = -_delta[_qp] * _j[_qp] * _j[_qp] * 2.0 * std::cos(2.0 * _j[_qp] * (angle + _theta0[_qp] * libMesh::pi / 180)) / (1.0 + _delta[_qp]);\n\n\n\n\t// Compute derivatives of mobility and its derivative wrt grad_op\n\t_dfundgrad_op[_qp] = _dfun[_qp] * dangledn * dndgrad_op;\n\t_ddfundgrad_op[_qp] = _d2fun[_qp] * dangledn * dndgrad_op;",
          "url": "https://github.com/idaholab/moose/discussions/23654",
          "updatedAt": "2023-03-11T06:36:23Z",
          "publishedAt": "2023-03-08T07:57:04Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI think you need to have a look at the block/subdomain restriction of your materials, variables and IC.\nThe ics for eta1 and 2 are limited to one block one, and the two variables are defined everywhere? Same for the materials using these two variables.\nAlso the ParsedMaterial syntax is all deprecated. If you're using a recent MOOSE you should be getting warnings from that\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5244094",
                  "updatedAt": "2023-03-08T16:50:04Z",
                  "publishedAt": "2023-03-08T16:50:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Nuwanted"
                          },
                          "bodyText": "Thank you for your reply. I used the MOOSE platform based on Ubuntu22.04, and there was no warning. If the ParsedMaterial syntax has been deprecated, is there a tutorial on the alternative syntax on the website?",
                          "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5250901",
                          "updatedAt": "2023-03-09T07:20:08Z",
                          "publishedAt": "2023-03-09T07:20:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The updated parameters can be seen here\nhttps://mooseframework.inl.gov/source/materials/ParsedMaterial.html\nYour MOOSE must be more than like 2 months old then.\nIt's ok, you dont need to update to fix this.\nWhat is the error message exactly?\nWhich property is missing?",
                          "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5256039",
                          "updatedAt": "2023-03-09T15:44:29Z",
                          "publishedAt": "2023-03-09T15:44:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Nuwanted"
                          },
                          "bodyText": "The specific information is:\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEproblem\".\nMaterial property 'anstre', requested by 'mobility2' is not defined on block 1.\nMaterial property 'anstre', requested by 'mobility_2_face' is not defined on block 1.\nMaterial property 'anstre', requested by 'mobility_2_neighbor' is not defined on block 1.\nMaterial property 'anstre', requested by 'mobility2' is not defined on block 2.\nMaterial property 'anstre', requested by 'mobility_2_face' is not defined on block 2.\nMaterial property 'anstre', requested by 'mobility_2_neighbor' is not defined on block 2.\nBut I managed to compile the ANisotropicforth.C file, and I didn't find that I had to define BLOCK areas when I was referring to other C files.",
                          "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5264349",
                          "updatedAt": "2023-03-10T07:33:24Z",
                          "publishedAt": "2023-03-10T07:33:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You spelled it abstre instead of anstre in the parsed material called anisotropicstre",
                          "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5268939",
                          "updatedAt": "2023-03-10T15:34:57Z",
                          "publishedAt": "2023-03-10T15:34:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Nuwanted"
                          },
                          "bodyText": "Ah, I just saw that it can run after I modified it. Thank you for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/23654#discussioncomment-5274193",
                          "updatedAt": "2023-03-11T06:36:19Z",
                          "publishedAt": "2023-03-11T06:36:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Convergence issues when the model has various blocks/domains.",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nI\u2019m running a single-phase HM simulation using a model with various blocks, which I created using gmsh. I\u2019m, however, getting the following convergence error when I run it. The simulation, however, converged when I commented out the various blocks (i.e., turning all the blocks into a unity). I\u2019m not sure why this is. It might probably do with my nl_tolerance. Could you please help? I attached my model and the input file. Thanks.\nerror:\n0 Nonlinear |R| = 4.132948e-03\n      0 Linear |R| = 4.132948e-03\n      1 Linear |R| = 3.032113e-05\n      2 Linear |R| = 1.145133e-08\n 1 Nonlinear |R| = 4.132667e-03\n      0 Linear |R| = 4.132667e-03\n      1 Linear |R| = 4.132117e-03\n      2 Linear |R| = 4.132083e-03\n      3 Linear |R| = 4.131851e-03\n      4 Linear |R| = 4.130788e-03\n      5 Linear |R| = 4.130771e-03\n      6 Linear |R| = 4.127982e-03\n      7 Linear |R| = 4.119354e-03\n      8 Linear |R| = 4.032319e-03\n      9 Linear |R| = 4.023829e-03\n     10 Linear |R| = 3.975794e-03\n     11 Linear |R| = 3.464383e-03\n     12 Linear |R| = 3.338932e-03\n     13 Linear |R| = 3.328950e-03\n     14 Linear |R| = 2.931537e-03\n     15 Linear |R| = 2.780238e-03\n     16 Linear |R| = 2.400305e-03\n     17 Linear |R| = 2.352188e-03\n     18 Linear |R| = 2.260671e-03\n     19 Linear |R| = 1.390348e-03\n     20 Linear |R| = 1.114870e-03\n     21 Linear |R| = 1.070648e-03\n     22 Linear |R| = 9.632547e-04\n     23 Linear |R| = 9.066530e-04\n     24 Linear |R| = 5.418596e-04\n     25 Linear |R| = 1.751682e-04\n     26 Linear |R| = 8.408441e-05\n     27 Linear |R| = 9.149386e-06\n     28 Linear |R| = 8.510010e-06\n     29 Linear |R| = 2.831109e-06\n  Linear solve did not converge due to DIVERGED_BREAKDOWN iterations 30\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 1\n Solve Did NOT Converge!\n  Finished Solving                                                                       [ 34.43 s] [   14 MB]\n\nmodel (L) & converged model w/o blocks (R)\n\ninput file:\n[Mesh]\n  [efm]\n   type = FileMeshGenerator\n   file = kamlot3new.msh  #kamlot5.msh\n  []\n[]\n\n\n[UserObjects]\n [dictator]\n  type = PorousFlowDictator\n  porous_flow_vars = 'pwater disp_x disp_y disp_z'\n  number_fluid_phases = 1\n  number_fluid_components = 1\n []\n [pc]\n  type = PorousFlowCapillaryPressureVG\n  alpha = 1E-6\n  m = 0.6\n  []\n[]\n\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  gravity = '0 0 0'\n#  biot_coefficient = 1.0\n  PorousFlowDictator = dictator\n[]\n\n  [FluidProperties]\n    [water]\n      type = SimpleFluidProperties\n      bulk_modulus = 2e9\n      density0 = 0.900\n      viscosity = 7e-3\n      thermal_expansion = 0\n    []\n  []\n\n\n[Variables]\n  [pwater]\n    initial_condition = 1e5 #1e5       \n  []\n  [disp_x]\n    scaling = 1E-7\n  []\n  [disp_y]\n    scaling = 1E-7\n  []\n  [disp_z]\n    scaling = 1E-7\n  []\n[]\n\n[AuxVariables]\n  [effective_fluid_pressure]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [darcy_vel_x]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_y]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_z]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [swater]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_xx]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_yy]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_zz]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [porosity]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [permeability]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [randm_rad_XY]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [rotxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n    [rotyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [fixedxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n   [fixedyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[AuxKernels]\n  [effective_fluid_pressure]\n    type = ParsedAux\n    args = 'pwater '\n    function = 'pwater'\n    variable = effective_fluid_pressure\n  []\n    [darcy_vel_x]\n    type = PorousFlowDarcyVelocityComponent\n    component = x\n    variable = darcy_vel_x\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [darcy_vel_y]\n    type = PorousFlowDarcyVelocityComponent\n    component = y\n    variable = darcy_vel_y\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n    [darcy_vel_z]\n    type = PorousFlowDarcyVelocityComponent\n    component = z\n    variable = darcy_vel_z\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [swater]\n    type = PorousFlowPropertyAux\n    variable = swater\n    property = saturation\n    phase = 0\n    execute_on = timestep_end\n  []\n  [stress_xx]\n    type = RankTwoScalarAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    scalar_type = MinPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [stress_yy]\n    type = RankTwoScalarAux\n    variable = stress_yy\n    rank_two_tensor = stress\n    scalar_type = MidPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [porosity]\n    type = PorousFlowPropertyAux\n    variable = porosity\n    property = porosity\n    execute_on = timestep_end\n  []\n    [permeability]\n    type = PorousFlowPropertyAux\n    variable = permeability\n    property = permeability\n    execute_on = timestep_end\n  []\n   [randm_rad_XY]\n    type = MaterialRealAux\n    variable = randm_rad_XY\n    property = random_xy_rotation_angle_for_each_element_qp\n    execute_on = timestep_end\n  []\n[]\n\n\n[ICs]\n   [rotxy_aux]\n    type = RandomIC\n    min = 0    #0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotxy_aux\n   []\n    [rotyz_aux]\n    type = RandomIC\n    min = 0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotyz_aux\n   []\n []\n\n\n[Kernels]\n  [time_derivative]\n    type = PorousFlowMassTimeDerivative\n    variable = pwater\n  []\n  [flux_water]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 0\n    use_displaced_mesh = false\n    variable = pwater\n  []\n  [grad_stress_x] \n    type = StressDivergenceTensors \n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n  []\n  [poro_x_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_x_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient =  '0'\n    block = 'casing'\n  []\n  [poro_x_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_y]\n   type = StressDivergenceTensors\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    block = 'casing rocksalt fluid injection_region'\n  []\n  [poro_y_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_y_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '0'\n    block = 'casing '\n  []\n  [poro_y_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_z]\n    type = StressDivergenceTensors\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    block = 'casing rocksalt fluid injection_region'\n  []\n  [poro_z_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_z_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '0'\n    block = 'casing'\n  []\n  [poro_z_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n[]\n\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = 293.15\n    use_displaced_mesh = false\n  []\n  [saturation]\n    type = PorousFlow1PhaseP\n    porepressure = pwater\n    capillary_pressure = pc\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n  []\n  [water_viscosity_density]\n    type = PorousFlowSingleComponentFluid\n    fp = water\n    phase = 0\n  []\n  [relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 0.0\n    s_res = 0.1\n    sum_s_res = 0.2\n    phase = 0\n  []\n    [porosity_rocksalt]\n    type = PorousFlowPorosityConst\n    porosity = 0.01\n    block = rocksalt\n  []\n    [porosity_casing]\n    type = PorousFlowPorosityConst\n    porosity =  0.0\n    block = 'casing'\n  []\n    [porosity_fluid]\n    type = PorousFlowPorosityConst\n    porosity = 1.0\n    block = 'fluid injection_region'\n  []\n    [permeability_rocksalt]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-21 \n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n    block = rocksalt\n  []\n    [permeability_casing]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-23 \n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708\n    block = 'casing'\n  []\n    [permeability_fluid]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-7\n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708\n    block = 'fluid injection_region'\n  []\n\n  [elasticity_tensor_rocksalt]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.5e10\n    poissons_ratio = 0.25\n    block = rocksalt\n []\n  [elasticity_tensor_casing]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.1e11\n    poissons_ratio =  0.30\n    block = 'casing'\n  []\n  [elasticity_tensor_fluid]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e-9\n    poissons_ratio = 0.00\n    block = 'fluid injection_region'\n  []\n  [strain]\n    type = ComputeSmallStrain\n    eigenstrain_names = 'initial_stress'\n    block = 'rocksalt casing fluid injection_region'\n  []\n  [initial_strain]\n    type = ComputeEigenstrainFromInitialStress\n    initial_stress = '0 0 0   0 0 0   0 0 0'\n    eigenstrain_name = initial_stress\n    block = 'rocksalt casing fluid injection_region'\n  []\n  [stress_rocksalt]\n    type = ComputeLinearElasticStress\n    block = 'rocksalt casing fluid injection_region'\n  []\n   [effective_fluid_pressure]\n    type = PorousFlowEffectiveFluidPressure\n    block = 'rocksalt casing fluid injection_region'\n  []\n  [volumetric_strain]\n    type = PorousFlowVolumetricStrain\n    block = 'rocksalt casing fluid injection_region'\n  []\n[]\n\n\n[BCs]\n  [symmetric_face_left_fix_u]\n   type = DirichletBC\n   variable = disp_x\n    value = 0\n    boundary = 'left'        \n  []\n  [symmetric_face_front_fix_u]\n   type = DirichletBC\n   variable = disp_y\n    value = 0\n    boundary = 'front'        \n  []\n    [bottom_face_fix_u]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = 'bottom'         \n  []\n    [externalBoundary_compressive_stress_x]    #NOTE: Compressive is +\n    type = Pressure\n    function = 12e6 # 4e6    #\n    variable = disp_x\n    use_displaced_mesh = false\n    boundary = right\n  []\n    [externalBoundary_compressive_stress_y] \n    type = Pressure\n    function = 21e6 # 15e6    #\n    variable = disp_y\n    use_displaced_mesh = false\n    boundary = back\n  []\n    [externalBoundary_compressive_stress_z] \n    type = Pressure\n    function = 8e6  #19e6  # \n    variable = disp_z\n    use_displaced_mesh = false\n    boundary = top\n  []\n\n#  [symmetric_faces_no_flow_pressure] \n#    type = DirichletBC\n#   variable = pwater\n#    value = 0\n#    use_displaced_mesh = false\n#    boundary = 'left front'\n#  []\n  [external_boundaries_atm_pressure] \n    type = DirichletBC\n    variable = pwater\n    value = 101325\n    use_displaced_mesh = false\n    boundary = 'right back top bottom'\n  []\n\n  [water_injection]\n    type = PorousFlowSink\n    boundary = 'injection_area injection_area_top injection_area_bottom'\n    variable = pwater\n    flux_function = my_flux  # -1.39e-7  #-1E-10\n    use_displaced_mesh = false\n  []\n  [injection_compressive_stress_x]\n    type = Pressure\n    boundary = injection_area\n    variable = disp_x\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_y]\n    type = Pressure\n    boundary = injection_area\n    variable = disp_y\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_z]\n    type = Pressure\n    boundary = 'injection_area_top injection_area_bottom'\n    variable = disp_z\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n[]\n\n\n[Functions]\n  [my_flux]\n  type = ParsedFunction \n  value = 'if(t <= 300,-1.39e-7,-2.78e-6)' \n  []\n  [constrain_effective_fluid_pressure]\n    type = ParsedFunction\n    vars = effective_fluid_pressure_at_wellbore\n    vals = effective_fluid_pressure_at_wellbore\n    value = 'max(effective_fluid_pressure_at_wellbore, 20E6)'\n  []\n[]\n\n\n[Postprocessors]\n   [pwater]\n    type = PointValue\n    variable = pwater\n    point = '0 0 0.05'\n    execute_on = timestep_end\n  []\n  [effective_fluid_pressure_at_wellbore]\n    type = PointValue\n    variable = effective_fluid_pressure\n    point = '0.05 0 0'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n  [constrained_effective_fluid_pressure_at_wellbore]\n    type = FunctionValuePostprocessor\n    function = constrain_effective_fluid_pressure\n    execute_on = timestep_begin\n  []\n[]\n\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed                \n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n# dt = 1e2  \n  end_time = 2400 \n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1e3                                                 \n #   growth_factor = 1.2\n    optimal_iterations = 10\n  []\n  nl_abs_tol = 1e-10\n  automatic_scaling = true\n[]\n\n[Outputs]\n  exodus = true\n  [csv]\n  type = CSV\n  execute_on = 'initial timestep_end'\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23489",
          "updatedAt": "2023-03-10T20:43:30Z",
          "publishedAt": "2023-02-20T18:55:10Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nTry to allow more linear iterations\nl_max_its = 100 for example\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5056732",
                  "updatedAt": "2023-02-20T19:22:48Z",
                  "publishedAt": "2023-02-20T19:22:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud. Thanks for the suggestion. I increased my l_max_its to 100 and it still gives me error. I even tried 200 w/o success.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5056972",
                          "updatedAt": "2023-02-20T19:56:35Z",
                          "publishedAt": "2023-02-20T19:56:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok. Next I would double check that all variables are well initialized and that block restrictions are all correct. If you forgot physics on one block that will impede convergence",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5056985",
                          "updatedAt": "2023-02-20T19:59:01Z",
                          "publishedAt": "2023-02-20T19:59:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I haven't explored your input file in lots of detail, but a couple of things stood out to me:\n\nthe porosity is zero in one of the blocks.  Is this a mistake?  It will mean that the porous-flow physics immediately goes to steadystate in that block, which is always numerically harder than a time-varying situation.  I wonder whether your model would truly exhibit unphysical results if you made that block a little bit porous, and helped the numerics a bit?\nyour Young's modulus in one block is O(1E11), but is O(1E-9) in another block.  That will probably mean the linear system is difficult to solve numerically, which is the problem you are encountering.  Computers just don't like to solve Ax=b when parts of A are O(1E11) and other parts are O(1E-9).  Again, i suspect your model won't exhibit unphysical results if you change your 1E-9 to 1E6, but might give nicer convergence.\n\nThese might not be the solution - just a couple of things i noticed",
                  "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5057597",
                  "updatedAt": "2023-02-20T21:46:04Z",
                  "publishedAt": "2023-02-20T21:46:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @GiudGiud  and @WilkAndy,  Sorry for the late reply. I was crossing all my ts and dotting all my I\u2019s regarding your suggestion. Unfortunately, my simulation still did not converge.\nAndy,\n\nthe porosity is zero in one of the blocks. Is this a mistake?\n\nPerhaps. I\u2019m unsure. The zero porosity is for the wellbore casing, which is the deep blue block, surrounding the light blue block (fluid) in the model shown above. Physically,  it ensures that the casing is impermeable to fluid flow. I played with it slightly by changing the value as suggested, but my simulation did not converge. This simulation is a benchmark with the parameters taken from https://doi.org/10.1016/j.ijrmms.2021.104879. Their simulation seems to converge.\n\nyour Young's modulus in one block is O(1E11), but is O(1E-9) in another block\n\nAgain, I played with Young\u2019s modulus as suggested and still no convergence. I don\u2019t know if the problem is with my BCs. I attached a snippet of the BC description from the literature; perhaps you could spot some minor errors in my BCs. Could you please let me know?\nAlso, please note that, in the input file above, I did not apply displacement BCs to the casing, the fluid block and the injection area (red block in my model). However, even when I assigned these BCs, I got no convergence. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5058141",
                          "updatedAt": "2023-02-20T23:36:36Z",
                          "publishedAt": "2023-02-20T23:36:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @WilkAndy, My simulation finally converges, and you\u2019re right! The results don\u2019t make any physical sense. It converges even at a zero porosity value but not without setting a large value for Young\u2019s modulus (E=1e11). I guess the problem is with my Young\u2019s Modulus. In the publication, both E and v are practically zero in the fluid block, making the fluid have practically no mechanical constitutive behaviour. I wonder whether that is the problem besides the steady-state solution for the casing. I\u2019m sending an email to the corresponding author of the publication. Hopefully, I\u2019ll get answers. In the meantime,  I\u2019d be glad if you could comment on my BCs in reference to the description in the publication. Thanks a lot!",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5067453",
                          "updatedAt": "2023-02-21T17:26:44Z",
                          "publishedAt": "2023-02-21T17:26:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hey @batodon ...   if the wellbore casing is impermeable to fluid, there should be no PorousFlow physics defined on it.  For instance, the pressure Variable should not be defined on that block, and you should have no PorousFlow Kernels there either.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5069502",
                          "updatedAt": "2023-02-21T20:45:32Z",
                          "publishedAt": "2023-02-21T20:45:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @WilkAndy, I\u2019m getting the following error when I don\u2019t define pwater on the casing block (i.e., when I remove the PF physics/Kernels relating to the casing block):\n0 Nonlinear |R| = 1.437966e-01\n      0 Linear |R| = 1.437966e-01\n  Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                 PC failed due to FACTOR_OUTMEMORY\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n Solve Did NOT Converge!",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5070139",
                          "updatedAt": "2023-02-21T22:04:18Z",
                          "publishedAt": "2023-02-21T22:04:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "removing the variable is the important part. Removing the kernel should be automatic if the variable is removed from the block",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5070713",
                          "updatedAt": "2023-02-21T22:50:27Z",
                          "publishedAt": "2023-02-21T22:50:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @WilkAndy and @GiudGiud, assuming I\u2019m defining only the mechanics on the casing, this is what I have, and it gave me the same error I described above. Is this what you mean?\n[Mesh]\n  [efm]\n   type = FileMeshGenerator\n   file = kamlot3newnew.msh  #kamlot5.msh\n  []\n[]\n\n[UserObjects]\n [dictator]\n  type = PorousFlowDictator\n  porous_flow_vars = 'pwater disp_x disp_y disp_z'\n  number_fluid_phases = 1\n  number_fluid_components = 1\n []\n [pc]\n  type = PorousFlowCapillaryPressureVG\n  alpha = 1E-6\n  m = 0.6\n  []\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  gravity = '0 0 0'\n#  biot_coefficient = 1.0\n  PorousFlowDictator = dictator\n[]\n\n  [FluidProperties]\n    [water]\n      type = SimpleFluidProperties\n      bulk_modulus = 2e9\n      density0 = 900\n      viscosity = 7e-3\n      thermal_expansion = 0\n    []\n  []\n\n[Variables]\n  [pwater]\n    initial_condition = 101325         #1e5       \n  []\n  [disp_x]\n    scaling = 1E-5\n  []\n  [disp_y]\n    scaling = 1E-5\n  []\n  [disp_z]\n    scaling = 1E-5\n  []\n[]\n\n[AuxVariables]\n  [effective_fluid_pressure]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [darcy_vel_x]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_y]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_z]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [swater]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_xx]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_yy]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_zz]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [porosity]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [permeability]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [randm_rad_XY]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [rotxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n    [rotyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [fixedxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n   [fixedyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[AuxKernels]\n  [effective_fluid_pressure]\n    type = ParsedAux\n    args = 'pwater '\n    function = 'pwater'\n    variable = effective_fluid_pressure\n  []\n    [darcy_vel_x]\n    type = PorousFlowDarcyVelocityComponent\n    component = x\n    variable = darcy_vel_x\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [darcy_vel_y]\n    type = PorousFlowDarcyVelocityComponent\n    component = y\n    variable = darcy_vel_y\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n    [darcy_vel_z]\n    type = PorousFlowDarcyVelocityComponent\n    component = z\n    variable = darcy_vel_z\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [swater]\n    type = PorousFlowPropertyAux\n    variable = swater\n    property = saturation\n    phase = 0\n    execute_on = timestep_end\n  []\n  [stress_xx]\n    type = RankTwoScalarAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    scalar_type = MinPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [stress_yy]\n    type = RankTwoScalarAux\n    variable = stress_yy\n    rank_two_tensor = stress\n    scalar_type = MidPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [porosity]\n    type = PorousFlowPropertyAux\n    variable = porosity\n    property = porosity\n    execute_on = timestep_end\n  []\n    [permeability]\n    type = PorousFlowPropertyAux\n    variable = permeability\n    property = permeability\n    execute_on = timestep_end\n  []\n   [randm_rad_XY]\n    type = MaterialRealAux\n    variable = randm_rad_XY\n    property = random_xy_rotation_angle_for_each_element_qp\n    execute_on = timestep_end\n  []\n[]\n\n[ICs]\n   [rotxy_aux]\n    type = RandomIC\n    min = 0    #0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotxy_aux\n   []\n    [rotyz_aux]\n    type = RandomIC\n    min = 0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotyz_aux\n   []\n []\n\n[Kernels]\n  [time_derivative]\n    type = PorousFlowMassTimeDerivative\n    variable = pwater\n    block = ' rocksalt  fluid injection_region ' # casing\n  []\n  [flux_water]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 0\n    use_displaced_mesh = false\n    variable = pwater\n    block = ' rocksalt  fluid injection_region ' # casing\n  []\n  [grad_stress_x] \n    type = StressDivergenceTensors \n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' # \n  []\n  [poro_x_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_x_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient =  '0'                      \n    block = 'casing'\n  []\n  [poro_x_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_y]\n   type = StressDivergenceTensors\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' # \n  []\n  [poro_y_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_y_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '0'              \n    block = 'casing '\n  []\n  [poro_y_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_z]\n    type = StressDivergenceTensors\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' # \n  []\n  [poro_z_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_z_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '0'                      #\n    block = 'casing'\n  []\n  [poro_z_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = 293.15\n    use_displaced_mesh = false\n  []\n  [saturation]\n    type = PorousFlow1PhaseP\n    porepressure = pwater\n    capillary_pressure = pc\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n  []\n  [water_viscosity_density]\n    type = PorousFlowSingleComponentFluid\n    fp = water\n    phase = 0\n  []\n  [relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 0.0\n    s_res = 0.1\n    sum_s_res = 0.2\n    phase = 0\n  []\n    [porosity_rocksalt]\n    type = PorousFlowPorosityConst\n    porosity = 0.01\n    block = rocksalt\n  []\n    [porosity_casing]\n    type = PorousFlowPorosityConst\n    porosity =  0.0                     #\n    block = 'casing'\n  []\n    [porosity_fluid]\n    type = PorousFlowPorosityConst\n    porosity = 1.0\n    block = 'fluid injection_region'\n  []\n    [permeability_rocksalt]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-21 \n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n    block = rocksalt\n  []\n    [permeability_casing]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-23 \n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708   \n     block = 'casing'\n    []\n    [permeability_fluid]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"    \n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\" \n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-7\n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708\n    block = 'fluid injection_region'\n  []\n\n  [elasticity_tensor_rocksalt]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.5e10                   #2.5e10\n    poissons_ratio = 0.25\n    block = rocksalt\n []\n  [elasticity_tensor_casing]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.1e11                     #2.1e11\n    poissons_ratio =  0.30 \n    block = 'casing'\n  []\n  [elasticity_tensor_fluid]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e6                         #2e10   #1e-4 #1e-4                    #1e-9\n    poissons_ratio = 0.0                         #0.00\n    block = 'fluid injection_region'\n  []\n  [strain]\n    type = ComputeSmallStrain\n    eigenstrain_names = 'initial_stress'\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [initial_strain]\n    type = ComputeEigenstrainFromInitialStress\n    initial_stress = '0 0 0   0 0 0   0 0 0'\n    eigenstrain_name = initial_stress\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [stress_rocksalt]\n    type = ComputeLinearElasticStress\n    block = 'rocksalt casing  fluid injection_region' #casing\n  []\n   [effective_fluid_pressure]\n    type = PorousFlowEffectiveFluidPressure\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [volumetric_strain]\n    type = PorousFlowVolumetricStrain\n    block = 'rocksalt casing fluid injection_region' #\n  []\n[]\n\n\n[BCs]\n  [symmetric_face_left_fix_u]\n   type = DirichletBC\n   variable = disp_x\n    value = 0\n    boundary = 'left'        \n  []\n  [symmetric_face_front_fix_u]\n   type = DirichletBC\n   variable = disp_y\n    value = 0\n    boundary = 'front'        \n  []\n    [bottom_face_fix_u]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = 'bottom'         \n  []\n    [externalBoundary_compressive_stress_x]    #NOTE: Compressive is +\n    type = Pressure\n    function = 12e6 # 4e6    #\n    variable = disp_x\n    use_displaced_mesh = false\n    boundary = right\n  []\n    [externalBoundary_compressive_stress_y] \n    type = Pressure\n    function = 21e6 # 15e6    #\n    variable = disp_y\n    use_displaced_mesh = false\n    boundary = back\n  []\n    [externalBoundary_compressive_stress_z] \n    type = Pressure\n    function = 8e6  #19e6  # \n    variable = disp_z\n    use_displaced_mesh = false\n    boundary = top\n  []\n\n#  [symmetric_faces_no_flow_pressure] \n#    type = DirichletBC\n#   variable = pwater\n#    value = 0\n#    use_displaced_mesh = false\n#    boundary = 'left front'\n#  []\n  [external_boundaries_atm_pressure] \n    type = DirichletBC\n    variable = pwater\n    value = 101325\n    use_displaced_mesh = false\n    boundary = 'right back top bottom'\n  []\n\n  [water_injection]\n    type = PorousFlowSink\n    boundary = 'injection_area injection_area_top injection_area_bottom' \n    variable = pwater\n    flux_function = -1.39e-7  #-2.78e-6 #my_flux  # -2.78e-6 #\n    use_displaced_mesh = false\n  []\n  [injection_compressive_stress_x]\n    type = Pressure\n    boundary = 'injection_area '\n    variable = disp_x\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_y]\n    type = Pressure\n    boundary = 'injection_area'\n    variable = disp_y\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_z]\n    type = Pressure\n    boundary = 'injection_area_top injection_area_bottom'\n    variable = disp_z\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n[]\n\n\n[Functions]\n  [my_flux]\n  type = ParsedFunction \n  value = 'if(t <= 300,-1.39e-7,-2.78e-6)' \n  []\n  [constrain_effective_fluid_pressure]\n    type = ParsedFunction\n    vars = effective_fluid_pressure_at_wellbore\n    vals = effective_fluid_pressure_at_wellbore\n    value = 'max(effective_fluid_pressure_at_wellbore, 20E6)'\n  []\n[]\n\n\n[Postprocessors]\n   [pwater]\n    type = PointValue\n    variable = pwater\n    point = '0 0 0.05'\n    execute_on = timestep_end\n  []\n  [effective_fluid_pressure_at_wellbore]\n    type = PointValue\n    variable = effective_fluid_pressure\n    point = '0.05 0 0'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n  [constrained_effective_fluid_pressure_at_wellbore]\n    type = FunctionValuePostprocessor\n    function = constrain_effective_fluid_pressure\n    execute_on = timestep_begin\n  []\n[]\n\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed                \n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n# dt = 1e2  \n  end_time = 2400 \n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 6e1                                                 \n #   growth_factor = 1.2\n    optimal_iterations = 10\n  []\n  nl_abs_tol = 1e-12\n#  automatic_scaling = true\n[]\n\n[Outputs]\n  exodus = true\n  [csv]\n  type = CSV\n  execute_on = 'initial timestep_end'\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5071001",
                          "updatedAt": "2023-02-21T23:48:32Z",
                          "publishedAt": "2023-02-21T23:38:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Yes I mean this is thebproblem.\u00a0You need to block restrict the variables\u00a0Le 21 f\u00e9vr. 2023 \u00e0 16:38, batodon ***@***.***> a \u00e9crit\u00a0:\ufeff\nHi @GiudGiud, assuming I\u2019m defining only the mechanics on the casing, this is what I have, and it gave me the same error I described above. Is this what you mean?\n[Mesh]\n  [efm]\n   type = FileMeshGenerator\n   file = kamlot3newnew.msh  #kamlot5.msh\n  []\n[]\n\n[UserObjects]\n [dictator]\n  type = PorousFlowDictator\n  porous_flow_vars = 'pwater disp_x disp_y disp_z'\n  number_fluid_phases = 1\n  number_fluid_components = 1\n []\n [pc]\n  type = PorousFlowCapillaryPressureVG\n  alpha = 1E-6\n  m = 0.6\n  []\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  gravity = '0 0 0'\n#  biot_coefficient = 1.0\n  PorousFlowDictator = dictator\n[]\n\n  [FluidProperties]\n    [water]\n      type = SimpleFluidProperties\n      bulk_modulus = 2e9\n      density0 = 900\n      viscosity = 7e-3\n      thermal_expansion = 0\n    []\n  []\n\n[Variables]\n  [pwater]\n    initial_condition = 101325         #1e5\n  []\n  [disp_x]\n    scaling = 1E-5\n  []\n  [disp_y]\n    scaling = 1E-5\n  []\n  [disp_z]\n    scaling = 1E-5\n  []\n[]\n\n[AuxVariables]\n  [effective_fluid_pressure]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [darcy_vel_x]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_y]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [darcy_vel_z]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [swater]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_xx]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_yy]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_zz]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [porosity]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n    [permeability]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [randm_rad_XY]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [rotxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n    [rotyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n  [fixedxy_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n   [fixedyz_aux]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[AuxKernels]\n  [effective_fluid_pressure]\n    type = ParsedAux\n    args = 'pwater '\n    function = 'pwater'\n    variable = effective_fluid_pressure\n  []\n    [darcy_vel_x]\n    type = PorousFlowDarcyVelocityComponent\n    component = x\n    variable = darcy_vel_x\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [darcy_vel_y]\n    type = PorousFlowDarcyVelocityComponent\n    component = y\n    variable = darcy_vel_y\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n    [darcy_vel_z]\n    type = PorousFlowDarcyVelocityComponent\n    component = z\n    variable = darcy_vel_z\n    fluid_phase = 0                             # OPTIONAL for single-phase\n    execute_on = TIMESTEP_END\n  []\n  [swater]\n    type = PorousFlowPropertyAux\n    variable = swater\n    property = saturation\n    phase = 0\n    execute_on = timestep_end\n  []\n  [stress_xx]\n    type = RankTwoScalarAux\n    variable = stress_xx\n    rank_two_tensor = stress\n    scalar_type = MinPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [stress_yy]\n    type = RankTwoScalarAux\n    variable = stress_yy\n    rank_two_tensor = stress\n    scalar_type = MidPrincipal\n    point1 = '0 0 0'\n    point2 = '0 0 1'\n    execute_on = timestep_end\n  []\n  [porosity]\n    type = PorousFlowPropertyAux\n    variable = porosity\n    property = porosity\n    execute_on = timestep_end\n  []\n    [permeability]\n    type = PorousFlowPropertyAux\n    variable = permeability\n    property = permeability\n    execute_on = timestep_end\n  []\n   [randm_rad_XY]\n    type = MaterialRealAux\n    variable = randm_rad_XY\n    property = random_xy_rotation_angle_for_each_element_qp\n    execute_on = timestep_end\n  []\n[]\n\n[ICs]\n   [rotxy_aux]\n    type = RandomIC\n    min = 0    #0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotxy_aux\n   []\n    [rotyz_aux]\n    type = RandomIC\n    min = 0\n    max = 1.57 #3.1415926535\n    legacy_generator = false\n    variable = rotyz_aux\n   []\n []\n\n[Kernels]\n  [time_derivative]\n    type = PorousFlowMassTimeDerivative\n    variable = pwater\n    block = ' rocksalt  fluid injection_region ' # casing\n  []\n  [flux_water]\n    type = PorousFlowAdvectiveFlux\n    fluid_component = 0\n    use_displaced_mesh = false\n    variable = pwater\n    block = ' rocksalt  fluid injection_region ' # casing\n  []\n  [grad_stress_x]\n    type = StressDivergenceTensors\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' #\n  []\n  [poro_x_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_x_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient =  '0'\n    block = 'casing'\n  []\n  [poro_x_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_x\n    component = 0\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_y]\n   type = StressDivergenceTensors\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' #\n  []\n  [poro_y_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_y_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '0'\n    block = 'casing '\n  []\n  [poro_y_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_y\n    component = 1\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n  [grad_stress_z]\n    type = StressDivergenceTensors\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    block = ' rocksalt casing fluid injection_region' #\n  []\n  [poro_z_rocksalt]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'rocksalt'\n  []\n  [poro_z_casing]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '0'                      #\n    block = 'casing'\n  []\n  [poro_z_fluid]\n    type = PorousFlowEffectiveStressCoupling\n    variable = disp_z\n    component = 2\n    use_displaced_mesh = false\n    biot_coefficient = '1'\n    block = 'fluid injection_region'\n  []\n[]\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = 293.15\n    use_displaced_mesh = false\n  []\n  [saturation]\n    type = PorousFlow1PhaseP\n    porepressure = pwater\n    capillary_pressure = pc\n  []\n  [massfrac]\n    type = PorousFlowMassFraction\n  []\n  [water_viscosity_density]\n    type = PorousFlowSingleComponentFluid\n    fp = water\n    phase = 0\n  []\n  [relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 0.0\n    s_res = 0.1\n    sum_s_res = 0.2\n    phase = 0\n  []\n    [porosity_rocksalt]\n    type = PorousFlowPorosityConst\n    porosity = 0.01\n    block = rocksalt\n  []\n    [porosity_casing]\n    type = PorousFlowPorosityConst\n    porosity =  0.0                     #\n    block = 'casing'\n  []\n    [porosity_fluid]\n    type = PorousFlowPorosityConst\n    porosity = 1.0\n    block = 'fluid injection_region'\n  []\n    [permeability_rocksalt]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-21\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"\n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\"\n    block = rocksalt\n  []\n    [permeability_casing]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"\n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\"\n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-23\n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708\n     block = 'casing'\n    []\n    [permeability_fluid]\n     type = PFOrthoEM\n     Random_field = true\n     rotation_angleXY = rotxy_aux\n     rotation_angleYZ = rotyz_aux\n     alpha =  \"2e-2 2e-2 2e-2\"      # \"1e-2 1e-2 1e-2\"\n     eps0 = \"0 0 0\"                 # \"1e-5 1e-5 1e-5\"\n     N = \"1 0 0  0 1 0  0 0 1\"\n     km = 1e-7\n     fix_rad_xy = 0 # 0.785398 #1.5708\n     fix_rad_yz = 0 # 0.785398 #1.5708\n    block = 'fluid injection_region'\n  []\n\n  [elasticity_tensor_rocksalt]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.5e10                   #2.5e10\n    poissons_ratio = 0.25\n    block = rocksalt\n []\n  [elasticity_tensor_casing]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.1e11                     #2.1e11\n    poissons_ratio =  0.30\n    block = 'casing'\n  []\n  [elasticity_tensor_fluid]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e6                         #2e10   #1e-4 #1e-4                    #1e-9\n    poissons_ratio = 0.0                         #0.00\n    block = 'fluid injection_region'\n  []\n  [strain]\n    type = ComputeSmallStrain\n    eigenstrain_names = 'initial_stress'\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [initial_strain]\n    type = ComputeEigenstrainFromInitialStress\n    initial_stress = '0 0 0   0 0 0   0 0 0'\n    eigenstrain_name = initial_stress\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [stress_rocksalt]\n    type = ComputeLinearElasticStress\n    block = 'rocksalt casing  fluid injection_region' #casing\n  []\n   [effective_fluid_pressure]\n    type = PorousFlowEffectiveFluidPressure\n    block = 'rocksalt casing fluid injection_region' #casing\n  []\n  [volumetric_strain]\n    type = PorousFlowVolumetricStrain\n    block = 'rocksalt casing fluid injection_region' #\n  []\n[]\n\n\n[BCs]\n  [symmetric_face_left_fix_u]\n   type = DirichletBC\n   variable = disp_x\n    value = 0\n    boundary = 'left'\n  []\n  [symmetric_face_front_fix_u]\n   type = DirichletBC\n   variable = disp_y\n    value = 0\n    boundary = 'front'\n  []\n    [bottom_face_fix_u]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = 'bottom'\n  []\n    [externalBoundary_compressive_stress_x]    #NOTE: Compressive is +\n    type = Pressure\n    function = 12e6 # 4e6    #\n    variable = disp_x\n    use_displaced_mesh = false\n    boundary = right\n  []\n    [externalBoundary_compressive_stress_y]\n    type = Pressure\n    function = 21e6 # 15e6    #\n    variable = disp_y\n    use_displaced_mesh = false\n    boundary = back\n  []\n    [externalBoundary_compressive_stress_z]\n    type = Pressure\n    function = 8e6  #19e6  #\n    variable = disp_z\n    use_displaced_mesh = false\n    boundary = top\n  []\n\n#  [symmetric_faces_no_flow_pressure]\n#    type = DirichletBC\n#   variable = pwater\n#    value = 0\n#    use_displaced_mesh = false\n#    boundary = 'left front'\n#  []\n  [external_boundaries_atm_pressure]\n    type = DirichletBC\n    variable = pwater\n    value = 101325\n    use_displaced_mesh = false\n    boundary = 'right back top bottom'\n  []\n\n  [water_injection]\n    type = PorousFlowSink\n    boundary = 'injection_area injection_area_top injection_area_bottom'\n    variable = pwater\n    flux_function = -1.39e-7  #-2.78e-6 #my_flux  # -2.78e-6 #\n    use_displaced_mesh = false\n  []\n  [injection_compressive_stress_x]\n    type = Pressure\n    boundary = 'injection_area '\n    variable = disp_x\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_y]\n    type = Pressure\n    boundary = 'injection_area'\n    variable = disp_y\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n  [injection_compressive_stress_z]\n    type = Pressure\n    boundary = 'injection_area_top injection_area_bottom'\n    variable = disp_z\n    use_displaced_mesh = false\n    postprocessor = constrained_effective_fluid_pressure_at_wellbore\n  []\n[]\n\n\n[Functions]\n  [my_flux]\n  type = ParsedFunction\n  value = 'if(t <= 300,-1.39e-7,-2.78e-6)'\n  []\n  [constrain_effective_fluid_pressure]\n    type = ParsedFunction\n    vars = effective_fluid_pressure_at_wellbore\n    vals = effective_fluid_pressure_at_wellbore\n    value = 'max(effective_fluid_pressure_at_wellbore, 20E6)'\n  []\n[]\n\n\n[Postprocessors]\n   [pwater]\n    type = PointValue\n    variable = pwater\n    point = '0 0 0.05'\n    execute_on = timestep_end\n  []\n  [effective_fluid_pressure_at_wellbore]\n    type = PointValue\n    variable = effective_fluid_pressure\n    point = '0.05 0 0'\n    execute_on = timestep_begin\n    use_displaced_mesh = false\n  []\n  [constrained_effective_fluid_pressure_at_wellbore]\n    type = FunctionValuePostprocessor\n    function = constrain_effective_fluid_pressure\n    execute_on = timestep_begin\n  []\n[]\n\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed\n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n# dt = 1e2\n  end_time = 2400\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 6e1\n #   growth_factor = 1.2\n    optimal_iterations = 10\n  []\n  nl_abs_tol = 1e-12\n#  automatic_scaling = true\n[]\n\n[Outputs]\n  exodus = true\n  [csv]\n  type = CSV\n  execute_on = 'initial timestep_end'\n  []\n[]\n\n\n\n\n\u2014Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5071763",
                  "updatedAt": "2023-02-22T01:03:39Z",
                  "publishedAt": "2023-02-22T01:03:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "That is, put\n[Variables]\n  [pwater]\n    initial_condition = 101325         #1e5\n    block = 'rocksalt fluid injection_region'\n  []\n\nYou may then get a bunch of errors, which will lead you to include   block = 'rocksalt fluid injection_region' in other places too (AuxVariables, Materials, etc).\nBy the way, since your initial stress is isotropic, you could use RZ coordinates to make this heaps more computationally efficient.\nAlso, if the impermeable casing completely encloses the fluid_injection_region then you'll get no hydraulic connection to the rocksalt region: the only reason the porepressure in the rocksalt region will increase is because the casing pushes mechanically on it.   Seems like a strange problem - usually casings are perforated in some way which allows fluid to move in and out of the wellbore.\nA",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5081637",
                          "updatedAt": "2023-02-22T20:38:31Z",
                          "publishedAt": "2023-02-22T20:38:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello, @WilkAndy, I keep getting an error message to \u2018block restrict\u2019 the object effective_fluid_pressure. I block restricted the PorousFlowEffectiveFluidPressure  but the error keeps showing up. Any suggestion, please?\n*** ERROR ***\nThe 'block' parameter of the object 'effective_fluid_pressure' must be a subset of the 'block' parameter of the variable 'pwater':\n    Object 'effective_fluid_pressure': 36, 37, 38, 39\n    Variable 'pwater': 37, 38, 39",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5082748",
                          "updatedAt": "2023-02-22T23:12:11Z",
                          "publishedAt": "2023-02-22T23:11:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yes, it's:\n[AuxVariables]\n  [effective_fluid_pressure]\n    family = MONOMIAL\n    order = CONSTANT\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5083867",
                          "updatedAt": "2023-02-23T02:37:26Z",
                          "publishedAt": "2023-02-23T02:37:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks, @WilkAndy. Finally, some good news. The simulation is running without the hydraulic effects from the casing. But it is taking a while to converge. I attached some preliminary results. By RZ coordinates, I guess you mean I need to build an entirely new mesh using the built-in MOOSE mesh generator (e.g., AnnularMeshGenerator). Correct? If so, I\u2019ll get right into it.\n\nAlso, if the impermeable casing completely encloses the fluid_injection_region then you\u2019ll get no hydraulic connection to the rocksalt region\n\n\nusually casings are perforated in some way which allows fluid to move in and out of the wellbore.\n\nYou are absolutely right! At least from my understanding, the wellbore in the model from the publication is \u2018cased\u2019 up to a certain length, and the remaining length is open for fluid injection. See the red block in the model above. This red block is open without a casing, and the casing only covers the light blue block. I guess it is what makes this problem a bit peculiar. I\u2019m anticipating it will get even more weird if I begin adding a multiphase flow scenario. That is a topic for another day :)\nBtw, I\u2019m still waiting for feedback from the authors; I guess the model will become clearer once I get their response. Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5084364",
                          "updatedAt": "2023-02-23T05:18:48Z",
                          "publishedAt": "2023-02-23T04:26:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi Andy, some extra updates after the simulation converge.\nThe left image is case 1 of the Kamlot percolation experiment from the publication. The right image is case 2. These are still preliminary results.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5084598",
                          "updatedAt": "2023-02-23T05:18:16Z",
                          "publishedAt": "2023-02-23T05:18:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I'm glad you're getting somewhere.\nRZ coordinates allow you to use a 2D model, with the horizontal axis representing the radial coordinate (r), and the vertical axis representing the vertical coordinate (z).  Being 2D it is so much faster than a 3D simulation.   Do\ncd modules/porous_flow\nfind . -name \"*.i\" | xargs grep RZ\n\nand you'll find quite a few examples.  Near the bottom of https://mooseframework.inl.gov/modules/porous_flow/tutorial_11.html you'll see instructions on how to convert a 3D to a 2D-RZ problem in a very similar situation to what you're studying.\nEven if you end up doing something that doesn't have RZ symmetry (eg, if your insitu horizontal principal stresses are different) then before that the RZ will allow you to experiment with things much more easily because the simulation will converge much faster than the 3D case.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5093969",
                          "updatedAt": "2023-02-23T21:16:48Z",
                          "publishedAt": "2023-02-23T21:16:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks, Andy. I will use a 2D model in the RZ coordinate system then. Please, note that I was right about the fluid having practically no mechanics due to the values of E and v. The paper made this clear:\n\nThe fluid injection domain, i.e. the inner domain of the pipe, is treated as a porous medium with porosity and a Biot\u2019s coefficient of 1 and a low Young\u2019s modulus, practically leaving only the hydraulic interaction with the rock salt and the casing.\n\nSince I can\u2019t get the value of E to be practically zero, I\u2019m now trying to \u2018block-restrict\u2019 the displacement variables so that the fluid block does not have any mechanics. My challenge, however, is that I can\u2019t define displacement on a block without defining the advective flux or the mass time derivative on that block because I keep getting the following error:\n*** ERROR ***\nThe 'block' parameter of the object 'time_derivative' must be a subset of the 'block' parameter of the variable 'disp_x':\n    Object 'time_derivative': 37, 38, 39\n    Variable 'disp_x': 36, 38\n\nMy question is: why is the block parameter of the advective Kernel linked to the block parameter of the displacement variable in PorousFlow? I\u2019m finding it difficult to grasp because (in reality) the displacement variable is not part of the flux or mass time derivative physics/kernel. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5094645",
                          "updatedAt": "2023-02-23T23:06:31Z",
                          "publishedAt": "2023-02-23T23:06:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can block restrict kernels as well.\nDo you have a time_derivative kernel in your input file or is this being added by an action?",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5124125",
                          "updatedAt": "2023-02-27T15:25:49Z",
                          "publishedAt": "2023-02-27T15:25:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud., Yeah. I have a time_derivative Kernel in my input file (i.e., PorousFlowMassTimeDerivative), which is not an action. Sure, I can block restrict kernels as well. I did that to the PorousFlowMassTimeDerivative Kernel and still got the same error messages.",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5127740",
                          "updatedAt": "2023-02-27T20:18:56Z",
                          "publishedAt": "2023-02-27T20:18:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How did you block restrict that kernel?\nand what about the variable?\nPlease paste those parts of the input\nThe error message says it doesnt match",
                          "url": "https://github.com/idaholab/moose/discussions/23489#discussioncomment-5127879",
                          "updatedAt": "2023-02-27T20:35:11Z",
                          "publishedAt": "2023-02-27T20:35:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to apply symmetry boundary conditions?",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "I need to run a simulation with 1/8 3D mesh. So I need to apply symmetry boundary conditions. I know the symmetry boundary condition in x-direction is (disp_x = rot_y = rot_z = 0), but when I add rotations in GlobalParams by rotations = \"rot_x rot_y rot_z\", it says the variables \"rot_x, rot_y and rot_z\" can't be found. And if I only set disp_x to 0, the simulation results are totally wrong. The attached file is  my input file.\nproblems.zip",
          "url": "https://github.com/idaholab/moose/discussions/23673",
          "updatedAt": "2023-04-29T03:34:49Z",
          "publishedAt": "2023-03-09T11:34:14Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou should either create the rotation variables or find the Action that does that for you\n@recuero @jiangwen84  do you know\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5255990",
                  "updatedAt": "2023-03-09T15:39:57Z",
                  "publishedAt": "2023-03-09T15:39:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "recuero"
                  },
                  "bodyText": "I'd just add the rotation variables to the pertinent blocks --not to GlobalParams. That's the way most input files are set up as far as I can see.",
                  "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5256087",
                  "updatedAt": "2023-03-09T15:48:12Z",
                  "publishedAt": "2023-03-09T15:48:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "Would you please explain this in more detail? I just looked at the examples of tensor mechanic module and couldn't find a relevant tutorial.",
                          "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5256207",
                          "updatedAt": "2023-03-09T15:57:09Z",
                          "publishedAt": "2023-03-09T15:57:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "I cannot see any rotations in your attached problem and am not sure what you are trying to simulate or which elements you want to use. As @GiudGiud pointed out, the rotation variables can be created by actions. For rotation variables necessary for beams/trusses, the LineElementMaster action will do this for you. If you are wanting to use some other element you will need to create those variables and pass them appropriately to compute internal forces and apply BCs. For general tutorials, refer to https://mooseframework.inl.gov/getting_started/examples_and_tutorials/index.html. For particular examples on how to use variables in the tensor mechanics modules, you can consult https://mooseframework.inl.gov/modules/tensor_mechanics/index.html and browse relevant input files.",
                          "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5256863",
                          "updatedAt": "2023-03-09T16:51:22Z",
                          "publishedAt": "2023-03-09T16:51:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RWTHLHK"
                          },
                          "bodyText": "Hello, thanks a lot for your reply! I need to apply boundary conditions to a model as shown in the following figure, which is 1/8 of a complete model. The symmetry boundary conditions should be applied to x-face(the face normal to x-direction) and z-face(the face normal to z-direction), which are named as inside1 and inside2 in my input file, respectively. Because it is an uni-axial tensile loading, I only set displacements of these faces to 0, but the results look weird.\n`[GlobalParams]\ndisplacements = 'disp_x disp_y disp_z'\n[]\n[Mesh]\n[base]\ntype = FileMeshGenerator\nfile = NRB_R2.inp\n[]\n[]\n[Modules/TensorMechanics/Master]\n[./all]\nstrain = FINITE\nadd_variables = true\ngenerate_output = 'max_principal_stress triaxiality_stress vonmises_stress plastic_strain_xx plastic_strain_yy plastic_strain_zz'\n[../]\n[]\n[Functions]\n[./hf]\ntype = PiecewiseLinear\ndata_file = stress_data.csv\nformat = columns\n[../]\n[]\n[BCs]\n[./y_pull_function]\ntype = FunctionDirichletBC\nvariable = disp_y\nboundary = top\nfunction = 0.3*t\n[../]\n[./xbot]\ntype = DirichletBC\nvariable = disp_x\nboundary = inside1\nvalue = 0.0\n[]\n[./y_bot]\ntype = DirichletBC\nvariable = disp_y\nboundary = bottom\nvalue = 0.0\n[../]\n[./zbot]\ntype = DirichletBC\nvariable = disp_z\nboundary = inside2\nvalue = 0.0\n[]\n[]\n[Materials]\n[./elasticity_tensor]\ntype = ComputeIsotropicElasticityTensor\nyoungs_modulus = 2e11#Pa\npoissons_ratio = 0.29\n[../]\n[./isotropic_plasticity]\ntype = IsotropicPlasticityStressUpdate\nyield_stress = 431.46e6#Pa\nhardening_function = hf\n[../]\n[./radial_return_stress]\ntype = ComputeMultipleInelasticStress\ntangent_operator = elastic\ninelastic_models = 'isotropic_plasticity'\n[../]\n[density]\ntype = GenericConstantMaterial\nprop_names = density\nprop_values = 7850\n[]\n[lode_angle]\ntype = ComputeLodeAngle\noutputs = exodus\n[]\n[critical_crack_strain]\ntype = ComputeCriticalCrackStrain\noutputs = exodus\n[]\n[peeq]\ntype = ComputePEEQ\noutputs = exodus\n[]\n[d]\ntype = ComputeDamage\nalpha = 1.0\nbeta = 1.0\ncritical_fracture_stress = 1204\noutputs = exodus\n[]\n[]\n[Executioner]\ntype = Transient\nsolve_type = 'NEWTON'\npetsc_options = '-snes_ksp_ew'\npetsc_options_iname = '-ksp_gmres_restart'\npetsc_options_value = '101'\nline_search = 'none'\nl_max_its = 50\nnl_max_its = 50\nnl_rel_tol = 1e-10\nnl_abs_tol = 1e-12\nl_tol = 1e-9\nstart_time = 0.0\nend_time = 0.5\ndt = 0.005\n[]\n[Outputs]\nexodus = true\nconsole = true\nprint_perf_log = true\n[]\n`",
                          "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5266060",
                          "updatedAt": "2023-03-10T10:41:35Z",
                          "publishedAt": "2023-03-10T10:41:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "Solid elements, with rare exceptions, do not have rotational variables. I don't think that the cause of the weirdness in your results is caused by rotational degrees of freedom. The BCs, as you describe them, look correct to me.\nYou have other objects in your input file, such as ComputeLodeAngle that I am not familiar with, nor can I find them in MOOSE. Could you maybe simplify your constitutive model and rerun the problem? You may see if your results make more sense with mere elastic behavior.",
                          "url": "https://github.com/idaholab/moose/discussions/23673#discussioncomment-5268957",
                          "updatedAt": "2023-03-10T15:35:42Z",
                          "publishedAt": "2023-03-10T15:35:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}