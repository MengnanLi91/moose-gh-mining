{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0xMC0wM1QxMTo1Mjo0NC0wNTowMM4Abvly"
    },
    "edges": [
      {
        "node": {
          "title": "How to run axisymmetric heat conduction simulation",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I am trying to run a simple heat conduction problem where I reduce the full 3D model to an axisymmetric 2D one. I am sure I'm missing something but I'm not sure what. I thought I'd ask here first before I get into the weeds of radial coordinates/working it out manually.\nThe problem setup is simple: a semi-infinite box with homogeneous material properties (thermal conductivity) has a gaussian heat flux applied at the top surface. It is steady state too, so no worry about the time terms for now.\n\nBelow is the temperature profile from the top of the box to the bottom at r = 0 (i.e x=0, y=0).\n\nI implemented the exact same simulation in 2D with a mesh that should be a slice of the 3D version. But my result differs. Not just in magnitude but the temperature profile itself is different. edit, it's based on the way derivatives are calculated in the rz coordinate system.\n\n\nIs there an existing model/kernel that can help solve a problem like this/is there something simple I'm missing?",
          "url": "https://github.com/idaholab/moose/discussions/28803",
          "updatedAt": "2024-10-08T03:01:09Z",
          "publishedAt": "2024-10-07T23:14:28Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "richmondodufisan"
                  },
                  "bodyText": "Solved, MOOSE has built in functionality, no need to reinvent the wheel\n[Problem]\ncoord_type = RZ\n[]\nAlthough I got a warning that this is deprecated and should be under the mesh block, but I got an error when I did that",
                  "url": "https://github.com/idaholab/moose/discussions/28803#discussioncomment-10874776",
                  "updatedAt": "2024-10-08T02:42:03Z",
                  "publishedAt": "2024-10-08T02:42:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this should work\n[Mesh]\n  coord_type = RZ\n  [other_mg]\n      ...\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/28803#discussioncomment-10874884",
                          "updatedAt": "2024-10-08T02:58:18Z",
                          "publishedAt": "2024-10-08T02:58:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "That worked thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/28803#discussioncomment-10874900",
                          "updatedAt": "2024-10-08T03:01:10Z",
                          "publishedAt": "2024-10-08T03:01:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about output analysis of PF simulations",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nDo you know if MOOSE has any tools for analyzing the outputs of PF simulations? In particular, does it have a way of determining the characteristic dimensions of phase domains, e.g., using spectral analysis?\nThank you very much.\nBest,",
          "url": "https://github.com/idaholab/moose/discussions/24720",
          "updatedAt": "2024-10-08T02:23:53Z",
          "publishedAt": "2023-06-16T15:49:46Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen @amjokisaari",
                  "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6207420",
                  "updatedAt": "2023-06-18T04:44:29Z",
                  "publishedAt": "2023-06-18T04:44:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "For example, I want to measure the characteristic length of these microstructures.",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6209978",
                          "updatedAt": "2023-06-18T14:12:22Z",
                          "publishedAt": "2023-06-18T14:12:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Is there any software can measure the characteristic length of the figure of two phase system?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6221186",
                          "updatedAt": "2023-06-19T15:57:31Z",
                          "publishedAt": "2023-06-19T15:57:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6221193",
                          "updatedAt": "2023-06-19T15:58:31Z",
                          "publishedAt": "2023-06-19T15:58:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "I think you can get it from an analysis of the 2-point correlation function. I talked about using 2-point correlation function for image analysis in this paper and gave a citation for the software we used. I'm not sure off hand exactly how to go from the correlation function to a characteristic length but it might just be the peak of the distribution function (we related it to bubble spacing in our paper and I'm guessing it is the same idea but you will probably need to do a little further reading on this).\nhttps://www.sciencedirect.com/science/article/pii/S0927025622004839?via%3Dihub",
                  "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6255232",
                  "updatedAt": "2023-06-22T18:54:29Z",
                  "publishedAt": "2023-06-22T18:54:28Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Thank you for your reply. I read that paper and found that 2 point correlation matlab code. Is this code only suitable for calculating the distance of two circles?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6263671",
                          "updatedAt": "2023-06-23T15:45:11Z",
                          "publishedAt": "2023-06-23T15:45:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "The code calculates the two-point correlation function. To go from the correlation function to characteristic length, you will need to research on your own, I don't know off hand exactly how to do that. However the surface area per unit length I mentioned below is probably easier.",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6264486",
                          "updatedAt": "2023-06-23T17:15:31Z",
                          "publishedAt": "2023-06-23T17:15:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "You could also use the inverse of the surface area per unit volume as a length scale. We did this and gave references to where this idea came from in this paper:\nhttps://materialstheory.springeropen.com/articles/10.1186/s41313-021-00041-5\nFor a 2D simulation, you would use the GB length per unit area. You could get GB length with the GrainBoundaryArea postprocessor (set grains_per_side = 1) or with Paraview - in fact I would try both and compare them to make sure you are getting the right answer.",
                  "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6255363",
                  "updatedAt": "2023-06-22T19:12:56Z",
                  "publishedAt": "2023-06-22T19:12:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Thank you for your suggestions. In our work, we did not investigate GB. We only have one order parameter, which is concentration, so this may be not suitable..",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6263685",
                          "updatedAt": "2023-06-23T15:46:28Z",
                          "publishedAt": "2023-06-23T15:46:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "The GrainBoundaryArea postprocessor should still work for a single order parameter as long as you set grains_per_side = 1. Sorry the name is a bit confusing but it should do what you want. You can also use Paraview as I mentioned.",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6264494",
                          "updatedAt": "2023-06-23T17:16:27Z",
                          "publishedAt": "2023-06-23T17:16:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "I am using paraview to output the video of evolution. Could you please tell me how to do this using paraview? Since I don't have grain boundary, which length should I measure?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266141",
                          "updatedAt": "2023-06-23T21:15:45Z",
                          "publishedAt": "2023-06-23T21:15:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The GrainBoundaryArea is a postprocessor in MOOSE, not in paraview.\nIt wil be a number output to CSV which you can plot in paraview",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266165",
                          "updatedAt": "2023-06-23T21:19:55Z",
                          "publishedAt": "2023-06-23T21:19:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "I added this in postprocessor block, however, I got error message...\n\nWhy is this? Is there other command I need to add?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266477",
                          "updatedAt": "2023-06-23T22:22:58Z",
                          "publishedAt": "2023-06-23T22:22:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "need to add the pf variables",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266486",
                          "updatedAt": "2023-06-23T22:24:11Z",
                          "publishedAt": "2023-06-23T22:24:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TJT-post95"
                          },
                          "bodyText": "According to the source code of GrainBoundaryArea, I find that it's the integration of the amplitude about gradient of order parameter within element. Why it's sum could be applied to calculate the length (2D) and area (3D) of grain boundary? Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6315453",
                          "updatedAt": "2023-06-29T13:27:42Z",
                          "publishedAt": "2023-06-29T13:27:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ChaunceyDevonport"
                          },
                          "bodyText": "I am new to MOOSE and am not well versed enough to look into the source code. I am using two post-processors; the AverageGrainVolume and GrainBoundaryArea post-processors. There are syntax pages in the documentation for the post-processors, but these syntax pages don't explain the calculation that is made for these two post-processors?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-10855636",
                          "updatedAt": "2024-10-06T00:48:58Z",
                          "publishedAt": "2024-10-06T00:48:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "AverageGrainVolume uses the FeatureFloodCount (FFC) postprocessor\nhttps://mooseframework.inl.gov/moose/source/postprocessors/FeatureFloodCount.html\nFFC identifies the number of individual features and the volume associated with each. Then AverageGrainVolume totals up those volumes and divides by number of features. (it does not simply divide the total domain volume by number of features to allow it to handle the case where there is a second phase present and you don't want the volume associated with the second phase included in the AverageGrainVolume",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-10872237",
                          "updatedAt": "2024-10-07T19:16:50Z",
                          "publishedAt": "2024-10-07T19:16:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "GrainBoundaryArea calculates the gradient of each order parameter, then integrates the magnitude of each gradient. You can show analytically that integrating the gradient in 1D will give you the difference between the value of the order parameter on either side of the interface. If you do that over a unit volume and divide by the difference between OPs, you will get the area of the grain boundary (and usually need to divide by a factor of 2 for models where there are 2 order parameters varying through the interface, as is the case the with standard MOOSE grain growth model for polycrystals)",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-10872299",
                          "updatedAt": "2024-10-07T19:22:46Z",
                          "publishedAt": "2024-10-07T19:22:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "abc-hy"
                  },
                  "bodyText": "What is pf variables?\n\u2026\nOn Fri, Jun 23, 2023 at 5:24 PM Guillaume Giudicelli < ***@***.***> wrote:\n need to add the pf variables\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#24720 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/APF2ZCSDWMIZSLPDTEWWKYLXMYJRNANCNFSM6AAAAAAZJN3N7A>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266627",
                  "updatedAt": "2023-06-23T23:04:21Z",
                  "publishedAt": "2023-06-23T23:04:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "you need to tell it what phase-field variable you want to use. So if your phase-field order parameter is c you need to add v = c. I think this should work, I have not actually tried it with the single variable before....if it doesn't work you can also use Paraview.",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266663",
                          "updatedAt": "2023-06-23T23:13:38Z",
                          "publishedAt": "2023-06-23T23:13:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Do you mean that I can directly use Paraview to calculate the length? Could you please show me how to realize that?",
                          "url": "https://github.com/idaholab/moose/discussions/24720#discussioncomment-6266992",
                          "updatedAt": "2023-06-24T00:54:31Z",
                          "publishedAt": "2023-06-24T00:54:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Choice of Framework for Precipitate Growth",
          "author": {
            "login": "nwinner"
          },
          "bodyText": "Hello all, I am new to the MOOSE community, having found it as a platform for solving phase field problems. I have some known multicomponent, multiphase alloys with CALPHAD database files. When the alloy is cast, there is a distribution of intermetallic precipitates that are of interest to me. I want to study the impact of processing temperature on the growth/coallescence of these phases. Ideally, starting with annealing, and then including different temperature profiles as well as gradients in the alloy from a cold/hot side. The precipitates are highly anisotropic, so treating the interfaces properly is important to me.\nI'd like to know which phase field formalism is the best starting point for this. From the website, it seems like there are a couple of different frameworks that could potentially solve this. The sublattice KKS model, the multiphase model, and the grand potential model.\nThe paper on SLKKS specifically discusses importing calphad models, so this seems most ideal, but I cannot see much discussion on it. There is a single example on CrFe, which currently has CrFe_sigma_out_var_0001.csv file missing, so the file cannot be tested. The grand potential formalism is described as offering some improved computational performance as compared to the SL-KKS model. Since I'm working with .tdb files, SL-KKS would be more straightforward it seems, but perhaps approximating the phases with a series parabolic free energies could be worth improved performance.\nGiven my description above, which would be the best framework to start with in terms of performance and ease-of-use. I will stork my own MOOSE app once I get a feel for things, but obviously I'd like a gentle introduction if possible.\nIn either case, are their examples out there which seem analogous to this problem?",
          "url": "https://github.com/idaholab/moose/discussions/28792",
          "updatedAt": "2024-10-07T23:40:33Z",
          "publishedAt": "2024-10-06T20:50:07Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen\n@dschwen for this missing file :S (see previous post)",
                  "url": "https://github.com/idaholab/moose/discussions/28792#discussioncomment-10861239",
                  "updatedAt": "2024-10-06T21:48:43Z",
                  "publishedAt": "2024-10-06T21:48:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "I would start with Sublattice KKS and use that if you can get the performance you need. But I would use the simplest chemistry you can to start out with, try starting with a binary alloy Calphad description to work out as many kinks as possible before moving to ternary+ alloys.",
                          "url": "https://github.com/idaholab/moose/discussions/28792#discussioncomment-10872326",
                          "updatedAt": "2024-10-07T19:26:17Z",
                          "publishedAt": "2024-10-07T19:26:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nwinner"
                          },
                          "bodyText": "Got it. I'll plan to start with SLKKS and Ni-Cu or something. Are there other working examples for SLKKS while we wait for this missing file?",
                          "url": "https://github.com/idaholab/moose/discussions/28792#discussioncomment-10873164",
                          "updatedAt": "2024-10-07T21:10:54Z",
                          "publishedAt": "2024-10-07T21:10:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nwinner"
                          },
                          "bodyText": "@GiudGiud and @dschwen it actually looks like the missing file is provided by first running CrFe_sigma.i, which produces the csv files as output. See this short PR.",
                          "url": "https://github.com/idaholab/moose/discussions/28792#discussioncomment-10873719",
                          "updatedAt": "2024-10-07T23:13:32Z",
                          "publishedAt": "2024-10-07T23:13:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "awesome I ll take a look at the end of the week",
                          "url": "https://github.com/idaholab/moose/discussions/28792#discussioncomment-10873802",
                          "updatedAt": "2024-10-07T23:40:34Z",
                          "publishedAt": "2024-10-07T23:40:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Extending kks_mechanics example to 2D",
          "author": {
            "login": "ppandit95"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nHi Developers\nI am tryig to extend the kks_mechanics_KHS.i input file to simulate on a 2D grid (infile attached) but even though the solution is converging it only runs for single time step(outfile attached) although vtk output is generated for all time steps in vtk but when vizualized the mesh keeps on moving every time step.\nAny help in this regard would be appreciated.\nMany Thanks\nPushkar\noutput.txt\n(Optional) code in question / simulation log / errors\nInFile>>>>\n\n# KKS phase-field model coupled with elasticity using Khachaturyan's scheme as\n# described in L.K. Aagesen et al., Computational Materials Science, 140, 10-21 (2017)\n# Original run #170403a\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  nx = 640\n  ny = 640\n  nz = 1\n  xmin = -10\n  xmax = 10\n  ymin = -10\n  ymax = 10\n  zmin = 0\n  zmax = 0.03125\n  elem_type = HEX8\n[]\n\n\n[Variables]\n  # order parameter\n  [./eta]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n  # solute concentration\n  [./c]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n  # chemical potential\n  [./w]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n  # solute phase concentration (matrix)\n  [./cm]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  # solute phase concentration (precipitate)\n  [./cp]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./disp_x]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./disp_y]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n  [./disp_z]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n[ICs]\n  [./eta_ic]\n    variable = eta\n    type = FunctionIC\n    function = ic_func_eta\n    block = 0\n  [../]\n  [./c_ic]\n    variable = c\n    type = FunctionIC\n    function = ic_func_c\n    block = 0\n  [../]\n  [./w_ic]\n    variable = w\n    type = ConstantIC\n    value = 0.00991\n    block = 0\n  [../]\n  [./cm_ic]\n    variable = cm\n    type = ConstantIC\n    value = 0.131\n    block = 0\n  [../]\n  [./cp_ic]\n    variable = cp\n    type = ConstantIC\n    value = 0.236\n    block = 0\n  [../]\n[]\n\n[Functions]\n  [./ic_func_eta]\n    type = ParsedFunction\n    expression = '0.5*(1.0+tanh((sqrt(x*x+y*y))/delta_eta/sqrt(2.0)))'\n    symbol_names = 'delta_eta'\n    symbol_values = '0.5'\n  [../]\n  [./ic_func_c]\n    type = ParsedFunction\n    expression = '0.2389*(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))^3*(6*(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))^2-15*(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))+10)+0.1339*(1-(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))^3*(6*(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))^2-15*(0.5*(1.0+tanh(sqrt(x*x+y*y)/delta/sqrt(2.0))))+10))'\n    symbol_names = 'delta'\n    symbol_values = '0.8034'\n  [../]\n  [./psi_eq_int]\n    type = ParsedFunction\n    expression = 'volume*psi_alpha'\n    symbol_names = 'volume psi_alpha'\n    symbol_values = 'volume psi_alpha'\n  [../]\n  [./gamma]\n    type = ParsedFunction\n    expression = '(psi_int - psi_eq_int) / dy / dz'\n    symbol_names = 'psi_int psi_eq_int dy       dz'\n    symbol_values = 'psi_int psi_eq_int 0.03125  0.03125'\n  [../]\n[]\n\n[AuxVariables]\n  [./sigma11]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./sigma22]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./sigma33]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e11]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e12]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e22]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e33]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e_el11]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e_el12]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./e_el22]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./f_el]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./eigen_strain00]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./Fglobal]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./psi]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./matl_sigma11]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    index_i = 0\n    index_j = 0\n    variable = sigma11\n  [../]\n  [./matl_sigma22]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    index_i = 1\n    index_j = 1\n    variable = sigma22\n  [../]\n  [./matl_sigma33]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    index_i = 2\n    index_j = 2\n    variable = sigma33\n  [../]\n  [./matl_e11]\n    type = RankTwoAux\n    rank_two_tensor = total_strain\n    index_i = 0\n    index_j = 0\n    variable = e11\n  [../]\n  [./f_el]\n    type = MaterialRealAux\n    variable = f_el\n    property = f_el_mat\n    execute_on = timestep_end\n  [../]\n  [./GlobalFreeEnergy]\n    variable = Fglobal\n    type = KKSGlobalFreeEnergy\n    fa_name = fm\n    fb_name = fp\n    w = 0.0264\n    kappa_names = kappa\n    interfacial_vars = eta\n  [../]\n  [./psi_potential]\n    variable = psi\n    type = ParsedAux\n    coupled_variables = 'Fglobal w c f_el sigma11 e11'\n    expression = 'Fglobal - w*c + f_el - sigma11*e11'\n  [../]\n[]\n\n\n[BCs]\n  [./left_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  [../]\n  [./right_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = right\n    value = 0\n  [../]\n  [./front_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = front\n    value = 0\n  [../]\n  [./back_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = back\n    value = 0\n  [../]\n  [./top_z]\n    type = DirichletBC\n    variable = disp_z\n    boundary = top\n    value = 0\n  [../]\n  [./bottom_z]\n    type = DirichletBC\n    variable = disp_z\n    boundary = bottom\n    value = 0\n  [../]\n[]\n\n[Materials]\n  # Chemical free energy of the matrix\n  [./fm]\n    type = DerivativeParsedMaterial\n    property_name = fm\n    coupled_variables = 'cm'\n    expression = '6.55*(cm-0.13)^2'\n  [../]\n\n  # Chemical Free energy of the precipitate phase\n  [./fp]\n    type = DerivativeParsedMaterial\n    property_name = fp\n    coupled_variables = 'cp'\n    expression = '6.55*(cp-0.235)^2'\n  [../]\n\n# Elastic energy of the precipitate\n  [./elastic_free_energy_p]\n    type = ElasticEnergyMaterial\n    f_name = f_el_mat\n    args = 'eta'\n    outputs = vtk\n  [../]\n\n\n  # h(eta)\n  [./h_eta]\n    type = SwitchingFunctionMaterial\n    h_order = HIGH\n    eta = eta\n  [../]\n\n  # 1- h(eta), putting in function explicitly\n  [./one_minus_h_eta_explicit]\n    type = DerivativeParsedMaterial\n    property_name = one_minus_h_explicit\n    coupled_variables = eta\n    expression = 1-eta^3*(6*eta^2-15*eta+10)\n    outputs = vtk\n  [../]\n\n  # g(eta)\n  [./g_eta]\n    type = BarrierFunctionMaterial\n    g_order = SIMPLE\n    eta = eta\n  [../]\n\n  # constant properties\n  [./constants]\n    type = GenericConstantMaterial\n    prop_names  = 'M   L   kappa      misfit'\n    prop_values = '0.7 0.7 0.01704    0.00377'\n  [../]\n\n  #Mechanical properties\n  [./Stiffness_matrix]\n    type = ComputeElasticityTensor\n    base_name = C_matrix\n    C_ijkl = '103.3 74.25 74.25 103.3 74.25 103.3 46.75 46.75 46.75'\n    fill_method = symmetric9\n  [../]\n  [./Stiffness_ppt]\n    type = ComputeElasticityTensor\n    C_ijkl = '100.7 71.45 71.45 100.7 71.45 100.7 50.10 50.10 50.10'\n    base_name = C_ppt\n    fill_method = symmetric9\n  [../]\n  [./C]\n    type = CompositeElasticityTensor\n    args = eta\n    tensors = 'C_matrix               C_ppt'\n    weights = 'one_minus_h_explicit   h'\n  [../]\n  [./stress]\n    type = ComputeLinearElasticStress\n  [../]\n  [./strain]\n    type = ComputeSmallStrain\n    displacements = 'disp_x disp_y disp_z'\n    eigenstrain_names = 'eigenstrain_ppt'\n  [../]\n  [./eigen_strain]\n    type = ComputeVariableEigenstrain\n    eigen_base = '0.00377 0.00377 0.00377 0 0 0'\n    prefactor = h\n    args = eta\n    eigenstrain_name = 'eigenstrain_ppt'\n  [../]\n[]\n\n[Kernels]\n  [./TensorMechanics]\n    displacements = 'disp_x disp_y disp_z'\n  [../]\n\n  # enforce c = (1-h(eta))*cm + h(eta)*cp\n  [./PhaseConc]\n    type = KKSPhaseConcentration\n    ca       = cm\n    variable = cp\n    c        = c\n    eta      = eta\n  [../]\n\n  # enforce pointwise equality of chemical potentials\n  [./ChemPotVacancies]\n    type = KKSPhaseChemicalPotential\n    variable = cm\n    cb       = cp\n    fa_name  = fm\n    fb_name  = fp\n  [../]\n\n  #\n  # Cahn-Hilliard Equation\n  #\n  [./CHBulk]\n    type = KKSSplitCHCRes\n    variable = c\n    ca       = cm\n    fa_name  = fm\n    w        = w\n  [../]\n\n  [./dcdt]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n  [../]\n  [./ckernel]\n    type = SplitCHWRes\n    mob_name = M\n    variable = w\n  [../]\n\n  #\n  # Allen-Cahn Equation\n  #\n  [./ACBulkF]\n    type = KKSACBulkF\n    variable = eta\n    fa_name  = fm\n    fb_name  = fp\n    w        = 0.0264\n    args = 'cp cm'\n  [../]\n  [./ACBulkC]\n    type = KKSACBulkC\n    variable = eta\n    ca       = cm\n    cb       = cp\n    fa_name  = fm\n  [../]\n  [./ACBulk_el] #This adds df_el/deta for strain interpolation\n    type = AllenCahn\n    variable = eta\n    f_name = f_el_mat\n  [../]\n  [./ACInterface]\n    type = ACInterface\n    variable = eta\n    kappa_name = kappa\n  [../]\n  [./detadt]\n    type = TimeDerivative\n    variable = eta\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type -sub_pc_type   -sub_pc_factor_shift_type'\n  petsc_options_value = 'asm       ilu            nonzero'\n\n  l_max_its = 30\n  nl_max_its = 30\n  l_tol = 1.0e-4\n  nl_rel_tol = 1.0e-6\n  nl_abs_tol = 1.0e-8\n  num_steps = 200\n\n  [./TimeStepper]\n    type = SolutionTimeAdaptiveDT\n    dt = 0.01\n  [../]\n[]\n\n[Postprocessors]\n  [./f_el_int]\n    type = ElementIntegralMaterialProperty\n    mat_prop = f_el_mat\n  [../]\n  [./c_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = c\n  [../]\n  [./c_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = c\n  [../]\n  [./e11_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = e11\n  [../]\n  [./e11_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = e11\n  [../]\n  [./s11_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = sigma11\n  [../]\n  [./s22_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = sigma22\n  [../]\n  [./s33_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = sigma33\n  [../]\n  [./s11_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = sigma11\n  [../]\n  [./s22_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = sigma22\n  [../]\n  [./s33_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = sigma33\n  [../]\n  [./f_el_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = f_el\n  [../]\n  [./f_el_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = f_el\n  [../]\n  [./f_c_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = Fglobal\n  [../]\n  [./f_c_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = Fglobal\n  [../]\n  [./chem_pot_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = w\n  [../]\n  [./chem_pot_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = w\n  [../]\n  [./psi_alpha]\n    type =  SideAverageValue\n    boundary = left\n    variable = psi\n  [../]\n  [./psi_beta]\n    type =  SideAverageValue\n    boundary = right\n    variable = psi\n  [../]\n  [./total_energy]\n    type = ElementIntegralVariablePostprocessor\n    variable = Fglobal\n  [../]\n  # Get simulation cell size from postprocessor\n  [./volume]\n    type = ElementIntegralMaterialProperty\n    mat_prop = 1\n  [../]\n  [./psi_eq_int]\n    type = FunctionValuePostprocessor\n    function = psi_eq_int\n  [../]\n  [./psi_int]\n    type = ElementIntegralVariablePostprocessor\n    variable = psi\n  [../]\n  [./gamma]\n    type = FunctionValuePostprocessor\n    function = gamma\n  [../]\n  [./int_position]\n    type = FindValueOnLine\n    start_point = '-10 -10 0'\n    end_point = '10 10 0'\n    v = eta\n    target = 0.5\n  [../]\n[]\n\n#\n# Precondition using handcoded off-diagonal terms\n#\n[Preconditioning]\n  [./full]\n    type = SMP\n    full = true\n  [../]\n[]\n\n\n[Outputs]\n  [./vtk]\n    type = VTK\n    time_step_interval = 20\n  [../]\n  checkpoint = true\n  [./csv]\n    type = CSV\n    execute_on = 'final'\n  [../]\n[]\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28796",
          "updatedAt": "2024-10-07T02:31:13Z",
          "publishedAt": "2024-10-07T02:31:12Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "2020 darcy_thermo_mech example: Windows line endings issue",
          "author": {
            "login": "ColinMG2"
          },
          "bodyText": "Hello. I am trying to create a mesh for the darcy_thermo_mech example in the moose repository and when I run  ../darcy_therm\no_mech-opt -i step1_colin.i --mesh-only after defining my parameters in VSCode, I get this error: *** ERROR ***\n/home/colinmoose/projects/moose/tutorials/darcy_thermo_mech/step01_diffusion/problems/step1_colin.i contains Windows(DOS) line endings which are not supported.\nStack frames: 10\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, std::__cxx11::basic_string<char, std::char_traits, std::allocator >)\n2: void mooseError<std::__cxx11::basic_string<char, std::char_traits, std::allocator > >(std::__cxx11::basic_string<char, std::char_traits, std::allocator >&&)\n3: MooseUtils::checkFileReadable(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, bool, bool, bool)\n4: Parser::parse()\n5: Moose::createMooseApp(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, int, char**)\n6: ../darcy_thermo_mech-opt(+0x30cf) [0x562f0b1c00cf]\n7: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f24dfd75d90]\n8: __libc_start_main\n9: ../darcy_thermo_mech-opt(+0x337a) [0x562f0b1c037a]\nAbort(1) on node 0 (rank 0 in comm 0): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\nHow can I fix this issue?",
          "url": "https://github.com/idaholab/moose/discussions/28783",
          "updatedAt": "2024-10-05T22:00:21Z",
          "publishedAt": "2024-10-05T18:38:38Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "if you are using VSCode you can press control shift P and select \"change end of line sequence\"\nIf you are on linux you can use dos2unix in the command line to clear the file of DOS line endings",
                  "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854426",
                  "updatedAt": "2024-10-05T19:17:19Z",
                  "publishedAt": "2024-10-05T19:17:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ColinMG2"
                          },
                          "bodyText": "Okay. I tried changing the line endings from CRLF to LF and it still failed to work. It could be because the MOOSE Language server is failing to connect to the server. Here is the error message I received in VSCode: [Error - 4:28:32 PM] MOOSE Language Server client: couldn't create connection to server.\nLaunching server using command \\wsl.localhost\\Ubuntu\\home\\colinmoose\\projects\\moose\\tutorials\\darcy_thermo_mech\\step01_diffusion\\darcy_thermo_mech-opt failed. Error: spawn \\wsl.localhost\\Ubuntu\\home\\colinmoose\\projects\\moose\\tutorials\\darcy_thermo_mech\\step01_diffusion\\darcy_thermo_mech-opt ENOENT",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854712",
                          "updatedAt": "2024-10-05T20:31:21Z",
                          "publishedAt": "2024-10-05T20:31:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the languge server failures are not related I think\ndid the error change after the fix?\nare you using WSL? if so, is your text editor installed on the windows side?",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854770",
                          "updatedAt": "2024-10-05T20:47:25Z",
                          "publishedAt": "2024-10-05T20:47:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ColinMG2"
                          },
                          "bodyText": "I am using wsl in the command terminal on a Windows 11 OS. The error did not change even after changing the line endings in VSCode. I could try doing it in the ubuntu terminal using dos2unix but I would have to do sudo apt install dos2unix",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854800",
                          "updatedAt": "2024-10-05T20:55:03Z",
                          "publishedAt": "2024-10-05T20:55:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ColinMG2"
                          },
                          "bodyText": "My text editor is for the Windows version of VSCode.",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854802",
                          "updatedAt": "2024-10-05T20:55:46Z",
                          "publishedAt": "2024-10-05T20:55:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "My text editor is for the Windows version of VSCode.\n\nIt probably saved again using CRLF right after you switched it. You ll have to change the settings to change the default line endings\n\nI could try doing it in the ubuntu terminal using dos2unix but I would have to do sudo apt install dos2unix\n\nthis would work. installing dos2unix is safe",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854815",
                          "updatedAt": "2024-10-05T20:59:21Z",
                          "publishedAt": "2024-10-05T20:59:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ColinMG2"
                          },
                          "bodyText": "Okay I did dos2unix and that worked perfectly. This is my output now:  Mesh Information:\n  elem_dimensions()={2}\n  spatial_dimension()=2\n  n_nodes()=1111\n    n_local_nodes()=1111\n  n_elem()=1000\n    n_local_elem()=1000\n    n_active_elem()=1000\n  n_subdomains()=1\n  n_elemsets()=0\n  n_partitions()=1\n  n_processors()=1\n  n_threads()=1\n  processor_id()=0\n  is_prepared()=true\n  is_replicated()=true\n\n Mesh Bounding Box:\n  Minimum: (x,y,z)=(       0,        0,        0)\n  Maximum: (x,y,z)=(      10,       20,        0)\n  Delta:   (x,y,z)=(      10,       20,        0)\n\n Mesh Element Type(s):\n  QUAD4\n\n Mesh Nodesets:\n  Nodeset 0 (bottom), 101 nodes\n   Bounding box minimum: (x,y,z)=(       0,        0,        0)\n   Bounding box maximum: (x,y,z)=(      10,        0,        0)\n   Bounding box delta: (x,y,z)=(      10,        0,        0)\n  Nodeset 1 (right), 11 nodes\n   Bounding box minimum: (x,y,z)=(      10,        0,        0)\n   Bounding box maximum: (x,y,z)=(      10,       20,        0)\n   Bounding box delta: (x,y,z)=(       0,       20,        0)\n  Nodeset 2 (top), 101 nodes\n   Bounding box minimum: (x,y,z)=(       0,       20,        0)\n   Bounding box maximum: (x,y,z)=(      10,       20,        0)\n   Bounding box delta: (x,y,z)=(      10,        0,        0)\n  Nodeset 3 (left), 11 nodes\n   Bounding box minimum: (x,y,z)=(       0,        0,        0)\n   Bounding box maximum: (x,y,z)=(       0,       20,        0)\n   Bounding box delta: (x,y,z)=(       0,       20,        0)\n\n Mesh Sidesets:\n  Sideset 0 (bottom), 100 sides (EDGE2), 100 elems (QUAD4), 101 nodes\n   Side volume: 10\n   Bounding box minimum: (x,y,z)=(       0,        0,        0)\n   Bounding box maximum: (x,y,z)=(      10,        0,        0)\n   Bounding box delta: (x,y,z)=(      10,        0,        0)\n  Sideset 1 (right), 10 sides (EDGE2), 10 elems (QUAD4), 11 nodes\n   Side volume: 20\n   Bounding box minimum: (x,y,z)=(      10,        0,        0)\n   Bounding box maximum: (x,y,z)=(      10,       20,        0)\n   Bounding box delta: (x,y,z)=(       0,       20,        0)\n  Sideset 2 (top), 100 sides (EDGE2), 100 elems (QUAD4), 101 nodes\n   Side volume: 10\n   Bounding box minimum: (x,y,z)=(       0,       20,        0)\n   Bounding box maximum: (x,y,z)=(      10,       20,        0)\n   Bounding box delta: (x,y,z)=(      10,        0,        0)\n  Sideset 3 (left), 10 sides (EDGE2), 10 elems (QUAD4), 11 nodes\n   Side volume: 20\n   Bounding box minimum: (x,y,z)=(       0,        0,        0)\n   Bounding box maximum: (x,y,z)=(       0,       20,        0)\n   Bounding box delta: (x,y,z)=(       0,       20,        0)\n\n Mesh Edgesets:\n  None\n\n Mesh Subdomains:\n  Subdomain 0: 1000 elems (QUAD4, 1000 active), 1111 active nodes\n   Volume: 200\n   Bounding box minimum: (x,y,z)=(       0,        0,        0)\n   Bounding box maximum: (x,y,z)=(      10,       20,        0)\n   Bounding box delta: (x,y,z)=(      10,       20,        0)\n  Global mesh volume = 200\n\nHow can I fix the language server issues so I can have autofill in VSCode?",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854826",
                          "updatedAt": "2024-10-05T21:23:03Z",
                          "publishedAt": "2024-10-05T21:04:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you cannot fix it easily from Windows I suspect.\nThe easiest would be to install VSCode on the linux side, then once it finds a working executable for your application, it can generate the acceptable syntax list.\nIf you want to try to fix the windows VSCode plugin, then you need to generate the syntax dump in linux using <your executable> --json, then make VSCode on windows find that file. I m not sure how to do that last part",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10854921",
                          "updatedAt": "2024-10-05T21:24:51Z",
                          "publishedAt": "2024-10-05T21:24:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ColinMG2"
                          },
                          "bodyText": "I was able to fix the windows VSCode plugin by properly running in WSL: Ubuntu on VSCode. I now have the autofill capabilities from the MOOSE Language extension.",
                          "url": "https://github.com/idaholab/moose/discussions/28783#discussioncomment-10855064",
                          "updatedAt": "2024-10-05T22:00:22Z",
                          "publishedAt": "2024-10-05T22:00:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Difficulty Converging Nonlinear Residuals with Relative Permeability (Corey/FLAC) in Draining Pit Simulation",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi Porous Flow experts\nI'm facing a convergence issue when using relative permeability models (Corey or FLAC) in my porous flow simulation for draining pits or excavated drives, where low saturation is expected.\n\nbelow is my PC block (very simple)\n  [uobj_saturation_optionVG]\n    type = PorousFlowCapillaryPressureVG\n    log_extension = True\n    sat_lr = 0.05\n    alpha = 1e-5\n    m = 0.6\n  []\n\nPorous flow page suggested alpha = 1e-6 but S is still way to high for 'drained' area (not realistic), so i use 1e-5\nbelow is my Kr block (again, very simple)\n    type = PorousFlowRelativePermeabilityFLAC\n    phase = 0\n    m = 2\n\nand below is kr = 1 (for comparision)\n    type = PorousFlowRelativePermeabilityConst\n    phase = 0\n    kr = 1.0\n\nbelow is my Executioner block\n  type = Transient   # always use 'Transient' (not 'Steady'), see [Kernels]\n  solve_type = NEWTON\n  # line_search = 'default'\n  # line_search = 'none'\n  line_search = 'bt'\n  # line_search = 'basic'\n  ###\n  ### PETSc-options:\n  petsc_options = '-snes_converged_reason ' # -snes_linesearch_monitor\n  petsc_options_iname = '-pc_type -pc_hypre_type -pc_hypre_boomeramg_strong_threshold'\n  petsc_options_value = ' hypre    boomeramg      0.80  '\n  ###\n  ### tolerances:\n  nl_rel_tol = 1e-10\n  nl_abs_tol = 1e3\n  nl_max_its = 200\n  l_tol = 1e-6\n  l_max_its = 30\n\n****** PROBLEM IS HERE: ******\nWith constant relative permeability (kr = 1), my nonlinear residual |R| can reduce from 1e13 to around 1e2 to 1e3. However, with relative permeability activated, the residuals struggle to drop below 1e6 before line search breaks down. If I turn off the line search (line_search = 'none'), the residual doesn't improve, it just oscillates.\ndoes this also has anything to do with my drain surface? i'm not so sure, but i dont think so\n    [bc_drain_tet]\n      type = PorousFlowPiecewiseLinearSinkBEH\n      variable = porepressure_L1\n      boundary = 'moving_boundary_tet'\n      pt_vals = '0 1e9'\n      multipliers = '0 1e9'\n      flux_function = 100\n      charElLength = charElLength_M0\n      PT_shift = 0.\n      fluid_phase = 0\n      use_mobility = true    # default is false\n      use_relperm = false     # default is false\n    []\n\n@cpgr do you have any suggestion or do i just have to live with it? NL from 1e13 to 1e6 isnt so bad, but it would be nice to see it gets to 1e3 range\nThank you!\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/28711",
          "updatedAt": "2024-10-04T11:00:34Z",
          "publishedAt": "2024-09-26T12:21:13Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I've been thinking about this and still haven't worked out what it might be...",
                  "url": "https://github.com/idaholab/moose/discussions/28711#discussioncomment-10807642",
                  "updatedAt": "2024-10-01T10:50:17Z",
                  "publishedAt": "2024-10-01T10:50:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I tried to just let line_search = 'none' run, it managed to converged at 96th NL (and this is one of the simpler mesh of all we got)\nI guess, I will have to live with nl_abs_tol = 1e6 + Line search, i wish it could deal with drained/dry area better",
                          "url": "https://github.com/idaholab/moose/discussions/28711#discussioncomment-10827599",
                          "updatedAt": "2024-10-03T04:58:59Z",
                          "publishedAt": "2024-10-03T04:58:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "96th NL is excessive. What does the Jacobian debugger say?\nand what does the SVD monitor say about the condition number? (see troubleshooting instructions)",
                          "url": "https://github.com/idaholab/moose/discussions/28711#discussioncomment-10827740",
                          "updatedAt": "2024-10-03T05:21:38Z",
                          "publishedAt": "2024-10-03T05:21:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Could it be not enough fluid can flow through the drain BC when saturation is low, which sends rel perm towards zero and makes it harder to flow? Should you set 'use_relperm = true' which I assume will scale the flux appropriately?",
                          "url": "https://github.com/idaholab/moose/discussions/28711#discussioncomment-10843062",
                          "updatedAt": "2024-10-04T11:00:34Z",
                          "publishedAt": "2024-10-04T11:00:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How can I add external C++ libraries to use in MOOSE?",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nFirst I want to know generally how I would add an external library and add it to the Makefile so I can compile. Whether autodiff (what I'm asking about) or any other library in general. Also curious if there is a way to write a python script which is called, does the calculations I want, and returns the results to the C++ source file.\nSecond, I want to know how to add autodiff (https://github.com/autodiff/autodiff) and wondering if it necessary since MOOSE already has some kind of AD system that is supposed to do the same thing? I'm not sure. In my custom Material file I am currently calculating derivatives manually with finite differencing, for example:\n// Compute the numerical derivative of a scalar function w.r.t a tensor_ij\n\nRankTwoTensor ComputeStrainEnergyNeoHookeanNearlyIncompressible::compute_dWdC(const Real &mu_0, const RankTwoTensor &C) \n{\n\t// Initialize perturbation\n\tReal epsilon = 1e-6;\n\t\n\t// Initialize derivative\n\tRankTwoTensor dWdC;\n\t\n    // Compute the scalar function for the original tensor\n    Real W = computeStrainEnergy(mu_0, C);\n\n    // Loop over all components of the tensor to compute the derivative\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            // Create a copy of the tensor to perturb\n            RankTwoTensor C_perturbed = C;\n\n            // Perturb the (i, j) component by epsilon\n            C_perturbed(i, j) += epsilon;\n\n            // Evaluate the scalar function at the perturbed tensor\n            Real W_perturbed = computeStrainEnergy(mu_0, C_perturbed);\n\n            // Compute the finite difference derivative and store it in the dfdT tensor\n            dWdC(i, j) = (W_perturbed - W) / epsilon;\n        }\n    }\n\n    // Return the tensor of derivatives\n    return dWdC;\n}\n\n\nAnd I am getting good results, but I am wondering if the convergence and accuracy is affected by this because it solves a bit slowly and my choice of epsilon is problem-dependent. I want to instead add autodiff (https://github.com/autodiff/autodiff) do something like (I used chatGPT for this sample but I want to do something similar):\nRankTwoTensor ComputeStrainEnergyNeoHookeanNearlyIncompressible::compute_dWdC(const Real &mu_0, const RankTwoTensor &C)\n{\n    using namespace autodiff;\n    using dual = dual2nd;\n\n    Eigen::Matrix<dual, 3, 3> C_dual;\n    for (int i = 0; i < 3; ++i)\n        for (int j = 0; j < 3; ++j)\n            C_dual(i, j) = C(i, j);\n\n    auto W = [&](const Eigen::Matrix<dual, 3, 3> & C_dual) {\n        dual J = std::pow(C_dual.determinant(), 1.0 / 2.0);\n        Eigen::Matrix<dual, 3, 3> C_iso = std::pow(J, -2.0 / 3.0) * C_dual;\n        dual I_1 = C_iso.trace();\n        return (mu_0 / 2.0) * (I_1 - 3);\n    };\n\n    Eigen::Matrix<dual, 3, 3> dWdC_dual = gradient(W, wrt(C_dual), at(C_dual));\n    RankTwoTensor dWdC;\n    for (int i = 0; i < 3; ++i)\n        for (int j = 0; j < 3; ++j)\n            dWdC(i, j) = val(dWdC_dual(i, j));  // Extract the value from dual\n\n    return dWdC;\n}\n\nHow can I do this? I have already tried https://mooseframework.inl.gov/source/materials/DerivativeMaterialInterface.html and it didn't work to calculate derivatives of scalars wrt tensors",
          "url": "https://github.com/idaholab/moose/discussions/28769",
          "updatedAt": "2024-10-04T03:10:59Z",
          "publishedAt": "2024-10-03T18:40:30Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nFirst I want to know generally how I would add an external library and add it to the Makefile so I can compile.\n\nIf the library is already compiled on your machine, you'll want to add to several environment variables in the Makefile.\nHowever, I dont think you need to do that here.\nWe have automatic differentiation in moose using MetaPhyscL through libmesh. Every single object in MOOSE prefaced with AD already uses this. And all you need to do to use it is:\n\ninherit from the ADMaterial class for your custom material\neverywhere you have Real, use ADReal, same for RealVectorValue, RealTensorValue etc",
                  "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10835774",
                  "updatedAt": "2024-10-03T19:54:28Z",
                  "publishedAt": "2024-10-03T19:54:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "okay thanks. could you please clarify how to use these derivatives? for example, I say I updated my function to calculate W to be:\nADReal ComputeStrainEnergyNeoHookeanNearlyIncompressible::computeStrainEnergy(const ADReal &mu_0, const ADRankTwoTensor &C)\n{\n\tADReal J = std::pow(C.det(), 1.0 / 2.0);\n\t\n\t// Isochoric Right Cauchy-Green deformation tensor\n\tADRankTwoTensor C_iso = std::pow(J, -2.0 / 3.0) * C;\n\t\n\t// First invariant, equivalent to lambda_1^2 + lambda_2^2 + lambda_3^2\n\tADReal I_1 = C_iso.trace();\n\t\n\tADReal strain_energy = (mu_0/2.0) * (I_1 - 3);\n\t\n\treturn strain_energy;\n}\n\nNow I want to calculate dW/dC, and use it within the same material to calculate the PK2 stress (=dW/dC + some other term).\nThrough trial and error I found that there is some \"MetaPhyscL::gradient\" but I cannot find the documentation anywhere online. Would it be something like\nADReal W = computeStrainEnergy(mu_0, C);\n\nADRankTwoTensor dWdC = MetaPhyscL::gradient(W, C);\n\nOr how would I do this?",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10835818",
                          "updatedAt": "2024-10-03T20:02:59Z",
                          "publishedAt": "2024-10-03T20:02:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Now I want to calculate dW/dC, and use it within the same material to calculate the PK2 stress (=dW/dC + some other term).\n\nyou usually do not need to anymore. in the residual of your equation, if you needed dW/dC to compute the Jacobian, it would be retrieved automatically from the W term in the equation.\nBut if you do still need to compute it, then this can be done:\n    const auto dof_number = _current_elem->dof_number(_sys.number(), _C.number(), 0);\n    const auto d_W_d_C = W.derivatives()[dof_number];\n\n\nC must be the variable (a mooseVariableFE type, which can be obtained with getVar(\"name\")\nW is the ADReal property\n\ngradient is only for spatial derivatives",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10835868",
                          "updatedAt": "2024-10-03T20:08:23Z",
                          "publishedAt": "2024-10-03T20:08:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Okay so let me give a bit of background on what I'm trying to do because I'm still a little confused. C in this case is not a mooseVariableFE, it is not even declared as a material property. It's just a C++ RankTwoTensor within this Material file.\nWithin this Material file ComputeStrainEnergyNeoHookeanNearlyIncompressible I want to calculate and declare:\n-the PK2 stress, S\n-the Jacobian, dS/dE\nThen I have another Material file, ComputeStressNeoHookean that inherits from ComputeLagrangianStressPK2. It is in this file that I \"get\" the previous declared quantities and pass them for use in the stress divergence kernels. As I understand it, we are REQUIRED to provide MOOSE with both of these in the new solid mechanics module.\nMy since I am solving a nearly incompressible problem, I need to define my stress my way/a bit differently.\nIn the first Material file,  ComputeStrainEnergyNeoHookeanNearlyIncompressible I:\n-compute W\n-use finite difference to compute dWdC\n-compute the PK2 stress as 2 * dWdC - pJC_inverse\n-use finite difference calculate the Jacobian, dSdE\n-declare the 2nd order PK2 stress and the 4th order Jacobian dS/dE\nAgain E & C are just C++ RankTwoTensors within this Material,  ComputeStrainEnergyNeoHookeanNearlyIncompressible.\nThe issue I was having is that while the finite difference derivatives worked, the choice of epsilon is problem-dependent. Hence why I wanted to use autodiff (or some other library) where you can define some function, and then calculate the derivative wrt a variable the function depends on.\nI am not trying to define the residual or anything like that here right now, I just want to calculate S and dSdE for the new Solid Mechanics module (which is not AD if I understand correctly)",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10836001",
                          "updatedAt": "2024-10-03T20:30:13Z",
                          "publishedAt": "2024-10-03T20:23:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Instead of using autodiff to compute W, use our AD numbers.\nWhen you compute W, use AD-numbers. Any term that comes into play in W and depends on C, should be an AD number\nYou can seed derivatives, even if C is not one of the variables. Like this:\nADReal C;\nC.derivatives().resize(1);  // this one might take some refinement to get right\nC.derivatives()[0] = 1;\nauto W = 3 * C;\n\nthen you should see W.derivatives()[0] to be equal to 3, or dW/dC",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837263",
                          "updatedAt": "2024-10-03T20:33:07Z",
                          "publishedAt": "2024-10-03T20:33:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Though this is pretty uncommon. Usually we only care about the derivatives with regards to the nonlinear variables, not with regards to a tensor C.\nNote that my example was with a real C. For a tensor, you will want to see the derivatives of each component of the tensor",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837275",
                          "updatedAt": "2024-10-03T20:34:36Z",
                          "publishedAt": "2024-10-03T20:34:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I'm still not fully clear on what seeding means, and the structure of the AD variables. Is there a documentation or something I can read through? For example, when you do\nC.derivatives().resize(1);  // this one might take some refinement to get right\nC.derivatives()[0] = 1;\n\nWhat are you resizing? And what is the format of the attribute .derivatives()? When you call\nW.derivatives()\nis it a vector of derivatives of as many seeded variables there are in the function that defines W?\nAnd for a tensor now, would that mean I would need to do something like\nC.derivatives().resize(3,3)\n\n\nfor (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            C.derivatives()[i, j] = 1.0;  // Seed each component's derivative\n        }\n}\n\nAnd yeah, the reason why I need to be able to calculate derivatives like these is because I will be trying several expressions for W, some of them hard to manually calculate the derivatives of.",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837475",
                          "updatedAt": "2024-10-03T21:13:46Z",
                          "publishedAt": "2024-10-03T20:58:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can look at the code there for our AD library.\nI m afraid we have a lot of examples but not a lot of documentation to teach you how to use it\nhttps://github.com/roystgnr/MetaPhysicL\n\nWhat are you resizing? And what is the format of the attribute .derivatives()? When you call\n\nThe array of derivatives. It keeps track of the derivatives of the AD number with regards to other values (usually nonlinear variables at a certain dof)\n\nis it a vector of derivatives of as many seeded variables there are in the function that defines W?\n\nBasically. There is the value of the derivatives, as well as the dof index. Here I am using 0 for the index. You might use more indices for each component of the tensor.\n\nAnd for a tensor now, would that mean I would need to do something like\n\nProbably closer to:\nC.derivatives().resize(3,3)\n\n\nfor (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            C(i,j).derivatives() = (1, i*3 + j);  // Seed each component's derivative\n            // 1 because the derivative of Cij wrt to Cij is 1\n            // and the index for the index of the component in the derivative vector\n        }\n}",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837651",
                          "updatedAt": "2024-10-03T21:26:29Z",
                          "publishedAt": "2024-10-03T21:26:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Or would it be something like this?\nRankTwoTensor ComputeStrainEnergyNeoHookeanNearlyIncompressible::compute_dWdC(const ADReal &mu_0, const ADRankTwoTensor &C)\n{\n    // Create a seeded tensor\n    unsigned int size = 9; // This would be 9 for a 3x3 tensor (???)\n    ADRankTwoTensor C_seeded;\n\n    // Loop over each component to seed derivatives\n    for (unsigned int i = 0; i < 3; ++i) {\n        for (unsigned int j = 0; j < 3; ++j) {\n            C_seeded(i, j) = C(i, j);\n            C_seeded(i, j).derivatives().resize(size);\n            C_seeded(i, j).derivatives()[i * 3 + j] = 1;  // Seed each component's derivative\n        }\n    }\n\n    // Compute strain energy W using the seeded tensor\n    ADReal W = computeStrainEnergy(mu_0, C_seeded);\n\n    // Initialize a new tensor to store derivatives (dW/dC)\n    RankTwoTensor dWdC;\n\n    // Extract derivatives with respect to each component of C\n    for (unsigned int i = 0; i < 3; ++i) {\n        for (unsigned int j = 0; j < 3; ++j) {\n            dWdC(i, j) = W.derivatives()[i * 3 + j];  // Get the derivative of W with respect to C(i, j)\n        }\n    }\n\n    return dWdC;\n}",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837674",
                          "updatedAt": "2024-10-03T21:30:19Z",
                          "publishedAt": "2024-10-03T21:30:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes this looks pretty good.\nI think you might need to specify the index as well.If it compiles like this you're good\nAD indexing is supposed to be global, which is why the derivatives contain both a value and an index",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10837687",
                          "updatedAt": "2024-10-03T21:32:56Z",
                          "publishedAt": "2024-10-03T21:32:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "it compiled but didn't converge unfortunately. I added a cout to see the size of W.derivatives() and it was extremely large, 12816. I don't think the way I set it up is correct.",
                          "url": "https://github.com/idaholab/moose/discussions/28769#discussioncomment-10839204",
                          "updatedAt": "2024-10-04T02:41:27Z",
                          "publishedAt": "2024-10-04T02:41:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PeriodicBCAction Issue Detecting Paired Boundary",
          "author": {
            "login": "lkuna24"
          },
          "bodyText": "Hello,\nI am attempting to utilize a RVE mesh generated by DRAGen (https://github.com/ibf-RWTH/DRAGen), and it seems by all accounts to be a simple rectilinear cube mesh.  The surfaces are flat and the voxel spacing is uniform in all three principal directions.  I've included both the sample input and exodus file below.  The full output is also included (Sample_Mesh_Test_Out.txt).\nBased on the info provided by AllSideSetsByNormalGenerator, the sidesets are certainly there.  Why could the PeriodicBC be failing to detect them?\nAllSideSetsByNormalsGenerator 'Normal_SS':  Mesh Bounding Box:\nAllSideSetsByNormalsGenerator 'Normal_SS':   Minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Delta:   (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS': \nAllSideSetsByNormalsGenerator 'Normal_SS':  Mesh Element Type(s):\nAllSideSetsByNormalsGenerator 'Normal_SS':   HEX8\nAllSideSetsByNormalsGenerator 'Normal_SS': \nAllSideSetsByNormalsGenerator 'Normal_SS':  Mesh Nodesets:\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 0 (bottom), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,        0,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,        0,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 1 (top), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,    0.004,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,        0,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 2 (left), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(       0,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(       0,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 3 (right), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(   0.004,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(       0,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 4 (front), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Nodeset 5 (back), 484 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS': \nAllSideSetsByNormalsGenerator 'Normal_SS':  Mesh Sidesets:\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 6, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 7, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 8, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 9, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 10, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':   Sideset 11, 2646 sides (QUAD4), 2402 elems (HEX8), 2648 nodes\nAllSideSetsByNormalsGenerator 'Normal_SS':    Side volume: 9.6e-05\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box minimum: (x,y,z)=(       0,        0,        0)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box maximum: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS':    Bounding box delta: (x,y,z)=(   0.004,    0.004,    0.004)\nAllSideSetsByNormalsGenerator 'Normal_SS': \n\n\n...\n\n\n*** ERROR ***\n/Users/kuna138/projects/pfcp_for_drx/DRAGen_Mesh_Test.i:58.5:\nThe following error occurred in the Action 'all' of type AddPeriodicBCAction.\n\nCouldn't auto-detect a paired boundary for use with periodic boundary conditions\n\nDRAGen_Mesh_Test.txt\nDRAGen_RVE_16G.zip\nSample_Mesh_Test_Out.txt",
          "url": "https://github.com/idaholab/moose/discussions/28766",
          "updatedAt": "2024-10-03T17:04:31Z",
          "publishedAt": "2024-10-03T15:29:30Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI checked the mesh and it looks fine. I wonder if it is because there are no sidesets on all ends.\nCould you please try to use this mesh generator to add these sidesets\nhttps://mooseframework.inl.gov/source/meshgenerators/SideSetsFromNodeSetsGenerator.html\nyou ll need to use your file mesh generator as the input to this other mesh generator",
                  "url": "https://github.com/idaholab/moose/discussions/28766#discussioncomment-10834393",
                  "updatedAt": "2024-10-03T16:56:49Z",
                  "publishedAt": "2024-10-03T16:56:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lkuna24"
                          },
                          "bodyText": "That solved it!  Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/28766#discussioncomment-10834452",
                          "updatedAt": "2024-10-03T17:04:32Z",
                          "publishedAt": "2024-10-03T17:04:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Sublattice KKS Phase Field Model Example : Unable to find CrFe_sigma_out_var_0001.csv",
          "author": {
            "login": "ppandit95"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nHi Developers\nI was trying to run sublattice KKS model which requires  CrFe_sigma_out_var_0001.csv file to generate the function requiredin the simulation but it seems that file is missing from the source code so could anyone direct me to desired location to get the file so that I can further work on utilizing this model for multi phase scenario.\nMany Thanks\nPushkar\n(Optional) code in question / simulation log / errors\nNo response\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28768",
          "updatedAt": "2024-10-03T16:54:33Z",
          "publishedAt": "2024-10-03T16:49:59Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@dschwen seems you contributed this example here\n\n  \n    \n      moose/modules/phase_field/examples/slkks/CrFe.i\n    \n    \n         Line 36\n      in\n      9fb4f87\n    \n  \n  \n    \n\n        \n          \n               data_file = CrFe_sigma_out_var_0001.csv \n        \n    \n  \n\n\ncan you please provide the missing csv file?",
                  "url": "https://github.com/idaholab/moose/discussions/28768#discussioncomment-10834381",
                  "updatedAt": "2024-10-03T16:54:34Z",
                  "publishedAt": "2024-10-03T16:54:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "\"std::bad_cast\" error",
          "author": {
            "login": "EdSheltonUKAEA"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nUsually MOOSE gives fairily helpful or better information when a model won't run because of a bug, typo in the code or similar error, specifying the file and line of code where the problem is.\nBut trying to run what is admittedly a fairly complicated model split across 6 input files I've now got just this:\n\n*** ERROR ***\nstd::bad_cast\nAbort(1) on node 7 (rank 7 in comm 0): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 7\n\nAny advice on how to locate and debug this?\nSearching for \"bad_cast\" on the website I can find several references to Framework requirements, etc.  How do I translate that into finding the bug that's stopping my code from running?",
          "url": "https://github.com/idaholab/moose/discussions/28764",
          "updatedAt": "2024-10-03T16:52:44Z",
          "publishedAt": "2024-10-03T14:53:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to use a debugger to find out what \"cast\" is failing.\nA bad_cast error is (most likely here) a C++ error for casting a reference to an object to the wrong kind of object.\nIdeally, you would try to reproduce this in serial rather than debug in parallel\nhttps://mooseframework.inl.gov/application_development/debugging.html",
                  "url": "https://github.com/idaholab/moose/discussions/28764#discussioncomment-10834348",
                  "updatedAt": "2024-10-03T16:52:12Z",
                  "publishedAt": "2024-10-03T16:51:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Usually we catch those errors and give more context. This must be in a loop that is not encapsulated",
                          "url": "https://github.com/idaholab/moose/discussions/28764#discussioncomment-10834362",
                          "updatedAt": "2024-10-03T16:52:45Z",
                          "publishedAt": "2024-10-03T16:52:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}