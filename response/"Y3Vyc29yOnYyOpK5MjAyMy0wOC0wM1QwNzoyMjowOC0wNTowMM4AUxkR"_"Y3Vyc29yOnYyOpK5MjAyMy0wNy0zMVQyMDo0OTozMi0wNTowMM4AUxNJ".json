{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNy0zMVQyMDo0OTozMi0wNTowMM4AUxNJ"
    },
    "edges": [
      {
        "node": {
          "title": "Transient problem custom stop condition",
          "author": {
            "login": "ermore"
          },
          "bodyText": "Let me describe my problem first, my calculation is a transient problem, and the calculation time is generally 0 to t1. I will use postprocessors to monitor some variables during the calculation process, such as var. I want the calculation to stop when var reaches a certain value. What should I do?",
          "url": "https://github.com/idaholab/moose/discussions/25094",
          "updatedAt": "2023-08-03T02:14:35Z",
          "publishedAt": "2023-08-03T02:01:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nUse the Terminator user object to have a termination criterion based on postprocessors\nhttps://mooseframework.inl.gov/source/userobjects/Terminator.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25094#discussioncomment-6622705",
                  "updatedAt": "2023-08-03T02:14:35Z",
                  "publishedAt": "2023-08-03T02:14:34Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about the getNeighborADMaterialProperty method",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "Hi all, I want to know I can get the material property of which element if I use the getNeighborADMaterialProperty method?\n1D mesh for example?\nEthan",
          "url": "https://github.com/idaholab/moose/discussions/25081",
          "updatedAt": "2023-08-03T01:41:05Z",
          "publishedAt": "2023-08-02T09:26:04Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\ngetNeighborMaterialProperty is to be used in the context of side integrations on interfaces / within-domain boundaries.\nthe neighbor element is on the other (exterior) side of the sideset, sidesets are oriented.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25081#discussioncomment-6616222",
                  "updatedAt": "2023-08-02T12:32:01Z",
                  "publishedAt": "2023-08-02T12:32:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Thanks Giud. In THM, getNeighborMaterialProperty is used in ADNumericalFlux3EqnDGKernel to calculate the flux between elements. But I'm confused.\nAs my understanding, for example, a 1D mesh which has 10 elements. Its id is from 0 to 9. If I use getNeighborMaterialProperty in elem0, I will get the material property of elem1, in elem1 and get mat prop of elem2, right? If so, what will I get if I use it in the last element?",
                          "url": "https://github.com/idaholab/moose/discussions/25081#discussioncomment-6617857",
                          "updatedAt": "2023-08-02T15:04:26Z",
                          "publishedAt": "2023-08-02T15:04:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "DGKernels also consider sides of elements.\nSo it s not on elem0, it s on elem0 and side \"1\" (for example)",
                          "url": "https://github.com/idaholab/moose/discussions/25081#discussioncomment-6618614",
                          "updatedAt": "2023-08-02T16:11:45Z",
                          "publishedAt": "2023-08-02T16:11:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@Ethan-xj DGKernels never operate on external boundaries",
                          "url": "https://github.com/idaholab/moose/discussions/25081#discussioncomment-6618938",
                          "updatedAt": "2023-08-02T16:44:55Z",
                          "publishedAt": "2023-08-02T16:44:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "I got it. Thank you all :)",
                          "url": "https://github.com/idaholab/moose/discussions/25081#discussioncomment-6622499",
                          "updatedAt": "2023-08-03T01:40:49Z",
                          "publishedAt": "2023-08-03T01:40:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compute Polynomial Chaos Expansion Coefficients with Regression",
          "author": {
            "login": "carayannopoulos"
          },
          "bodyText": "I am trying to train a PCE surrogate that has too many dimensions to find the coefficients with quadrature. The documentation for the PCE trainer says that regression can be used to find the coefficients, but when I specify regression_type for the PCE trainer it is not recognized as a valid parameter.",
          "url": "https://github.com/idaholab/moose/discussions/25083",
          "updatedAt": "2023-08-02T17:20:32Z",
          "publishedAt": "2023-08-02T17:20:31Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Moose way of representing units for various quantities",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Hi all,\nJust thought of clarifying my ambiguities associated with addressing units in moose for various quantities used in the computation. I am aware these are revolving mainly around the SI units as can be seen here.).\nGoing by that, is it a valid statement that i address stresses by Pa, assuming that the length scale moose uses is 'meter' and force in kgm/s^2.\nThe main intention behind my question being that i am struggling to find the units for some of the constants mentioned in https://mooseframework.inl.gov/source/materials/crystal_plasticity/CrystalPlasticityKalidindiUpdate.html#!, but unable to find descriptions in the parameters section. The t_sat in that case would be literally called as 109.8 Pa if i am right.\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/25075",
          "updatedAt": "2023-08-02T16:26:27Z",
          "publishedAt": "2023-08-01T16:28:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "Hi @abarun22,\nThe crystal plasticity classes deviate from the unit-agnostic approach taken by default in MOOSE. As described under the section Units Assumed in Crystal Plasticity Materials on the Compute Multiple Crystal Plasticity Stress documentation page, the crystal plasticity models use the mm-MPa-s unit system. In addition to the documentation page, we have tried to explicitly list the assumed units in the parameter description.\nIt does look like the Kalidindi model you are referencing does not list those unit assumptions in the parameter descriptions. While we work on updating that documentation, please know that that units for that class is also in the mm-MPa-s system.\nHope this helps,\nStephanie",
                  "url": "https://github.com/idaholab/moose/discussions/25075#discussioncomment-6607895",
                  "updatedAt": "2023-08-01T16:36:03Z",
                  "publishedAt": "2023-08-01T16:36:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Thanks Stephanie. That's really what i am after.\nBest regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/25075#discussioncomment-6618748",
                          "updatedAt": "2023-08-02T16:26:28Z",
                          "publishedAt": "2023-08-02T16:26:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[PorousFlow] can I use PorousFlowUnsaturated (action) and PorousFlowCapillaryPressureVG at the same time?",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI'd like to use PorousFlowUnsaturated due to simplicity but I want to specify 'van Genuchten' properties (alpha and m) at different domains\nPorousFlowUnsaturated  only allows me to assign alpha and m once homogenously which is not ideal\nso if I have this block [PorousFlowCapillaryPressureVG] in the input file, will this overwrite the default values of alpha and m defined in [PorousFlowUnsaturated] ?\n\nor of there is another way please let me know\nThank you!\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/25024",
          "updatedAt": "2023-08-02T04:15:53Z",
          "publishedAt": "2023-07-24T12:01:59Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Adding an extra userobject won't work as the PorousFlowUnsaturated action hard codes the capillary pressure user object name.\nI think that you will need to add all of the objects that the action creates by hand to do what you want unfortunately.",
                  "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6534216",
                  "updatedAt": "2023-07-24T22:21:05Z",
                  "publishedAt": "2023-07-24T22:21:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I see, thank you @cpgr\njust wondering if alpha and m in PorousFlowCapillaryPressureVG can be assigned based on _qp (element based property)?\nIt looks like it can, but everything i can fine related to alpha and m so far are Real single value\n  _m(getParam<Real>(\"m\")),\n   _alpha(getParam<Real>(\"alpha\")),",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536010",
                          "updatedAt": "2023-07-25T04:21:29Z",
                          "publishedAt": "2023-07-25T04:21:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "No. They can be block-specific, though, which is how we tend to use them. Say you have two blocks in your mesh (A and B in your example above). Then you have two capillary pressure user objects, one for each block. You then block restrict the material where they are used, so that block A calls Pc_A, block B calls Pc_B.",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536042",
                          "updatedAt": "2023-07-25T04:30:21Z",
                          "publishedAt": "2023-07-25T04:30:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Ah okay, because our model is very complex and heterogenous\nwe have made K and poro class that can take data from .csv (element based), thought we could do the same with van Genuchten parameters\n    _mat_prop[_qp](0) = _read_prop_user_object->getData(_current_elem, 0);\n    _mat_prop[_qp](1) = _read_prop_user_object->getData(_current_elem, 1);\n    _mat_prop[_qp](2) = _read_prop_user_object->getData(_current_elem, 2);\n\n    _perm[_qp](0) = std::min(exp(_damage[_qp]*_aw[_qp](0))*_mat_prop[_qp](0)*1e-7,_kmax[_qp](0)*1e-7); \n    _perm[_qp](1) = std::min(exp(_damage[_qp]*_aw[_qp](0))*_mat_prop[_qp](1)*1e-7,_kmax[_qp](0)*1e-7);\n    _perm[_qp](2) = std::min(exp(_damage[_qp]*_aw[_qp](0))*_mat_prop[_qp](2)*1e-7,_kmax[_qp](0)*1e-7);\n\n@WilkAndy @GiudGiud do you guys have any suggestions, otherwise I will start implementing it based on the block ID\nalso thank you @cpgr for your help! :)",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536109",
                          "updatedAt": "2023-07-25T04:49:46Z",
                          "publishedAt": "2023-07-25T04:46:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "You're going to have to add this yourself then - I don't think it can be done with the current code. It shouldn't be hard though - I have done similar for the BC capillary pressure where the entry pressure varies element by element and it works fine.",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536141",
                          "updatedAt": "2023-07-25T04:55:22Z",
                          "publishedAt": "2023-07-25T04:55:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I see, could you able to share the class you mentioned? otherwise, it's ok\nthank you!",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536158",
                          "updatedAt": "2023-07-25T04:58:55Z",
                          "publishedAt": "2023-07-25T04:58:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "The changes are simple if you make _m and _alpha AuxVariables, like what we do for materials like the constant porosity one. Then you can have element-by-element capillary pressures.",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536209",
                          "updatedAt": "2023-07-25T05:06:45Z",
                          "publishedAt": "2023-07-25T05:06:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Btw if you leverage the functor system for these quantities you will be able to pass/use for them:\n\nfunctions\nVariables, both aux and nonlinear\nFunctor material properties\nAnd soon\nscalar variables\nPostprocessors",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536246",
                          "updatedAt": "2023-07-25T05:14:38Z",
                          "publishedAt": "2023-07-25T05:14:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "@GiudGiud, here is the plan, please let me know if it's ok\nread m and alpha from .csv\n [VG_parameter]\n    type = PropertyReadFile\n    prop_file_name = 'VG_parameter.csv'\n    nprop = 2\n    read_type = element\n  []\n\nmake it a Material property\n  [VG_parameter]\n    type = GenericConstantArrayBEH\n    prop_name = alpha m    (something alone this line)\n    read_prop_user_object = VG_parameter\n  []\n\nQ would be, can I then directly input alpha and m into PorousFlowCapillaryPressureVG, or I have to make my own PorousFlowCapillaryPressureVG class that can take alpha and m\n  [pc]\n    type = PorousFlowCapillaryPressureVG\n    m = m\n    alpha = alpha \n  []\n\nor _alpha(getMaterialProperty<Real>(\"alpha\")), _m(getMaterialProperty<Real>(\"m\")),  (PorousFlowCapillaryPressureVG.C)",
                  "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536376",
                  "updatedAt": "2023-07-25T05:43:11Z",
                  "publishedAt": "2023-07-25T05:43:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Works for me! So you have a class retrieving with the voronoi algorithm from a prop reader user object?",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6536547",
                          "updatedAt": "2023-07-25T06:10:09Z",
                          "publishedAt": "2023-07-25T06:10:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "update so far:\n  params.addParam<MaterialPropertyName>(\"mm\",0,\"mm\");\n  return params;\n}\n\nPorousFlowCapillaryPressureVGBE::PorousFlowCapillaryPressureVGBE(const InputParameters & parameters)\n  : PorousFlowCapillaryPressure(parameters), \n    _m(getMaterialProperty<Real>(\"mm\")),   *take m in as MaterialProperty\n    // _m(getParam<Real>(\"m\")),\n    _alpha(getParam<Real>(\"alpha\")),\n    _s_scale(getParam<Real>(\"s_scale\")),\n    _pc_sscale(PorousFlowVanGenuchten::capillaryPressure(_s_scale, _alpha, _m, _pc_max))\n{\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::capillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::capillaryPressure(seff, _alpha, _m, _pc_max) - _pc_sscale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::dCapillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::dCapillaryPressure(seff, _alpha, _m, _pc_max) * _dseff_ds *\n         _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2CapillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::d2CapillaryPressure(seff, _alpha, _m, _pc_max) * _dseff_ds *\n         _dseff_ds * _s_scale * _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::effectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::effectiveSaturation(pc - _pc_sscale, _alpha, _m);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::dEffectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::dEffectiveSaturation(pc - _pc_sscale, _alpha, _m);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2EffectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::d2EffectiveSaturation(pc - _pc_sscale, _alpha, _m);\n}\n\nBUT i got errors when complied, for example the one below\n   44 |     _pc_sscale(PorousFlowVanGenuchten::capillaryPressure(_s_scale, _alpha, _m, _pc_max))\n      |                                                                            ^~\n      |                                                                            |\n      |                                                                            const MaterialProperty<double>\nIn file included from /home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:11,\n                 from /home/moose/moose_beh/build/unity_src/kernels_Unity.C:9:\n\nbasically for all the functions under this class\nI checked one of the function under PorousFlowVanGenuchten.C, does not seem like it can take variable m based on element (or i am missing something?)\nReal\ncapillaryPressure(Real seff, Real alpha, Real m, Real pc_max)\n{\n  if (seff >= 1.0)\n    return 0.0;\n  else if (seff <= 0.0)\n    return pc_max;\n  else\n  {\n    Real a = std::pow(seff, -1.0 / m) - 1.0;\n    return std::min(std::pow(a, 1.0 - m) / alpha, pc_max);\n  }\n}\n\nRegards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6558261",
                          "updatedAt": "2023-07-27T04:11:43Z",
                          "publishedAt": "2023-07-27T04:11:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Yeah, _m is a material property, so you need to use _m[_qp] everywhere in your PorousFlowCapillaryPressureVGBE class. You will have to replace the _pc_scale bit in all the functions with PorousFlowVanGenuchten::capillaryPressure(_s_scale, _alpha, _m[_qp], _pc_max) as you can't compute it in advance anymore as it will change element to element (or just not use this correction if you don't need it).",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6558744",
                          "updatedAt": "2023-07-27T04:19:26Z",
                          "publishedAt": "2023-07-27T04:19:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @cpgr thank you for you suggestion, but I still keep getting new errors after another\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In constructor 'PorousFlowCapillaryPressureVGBE::PorousFlowCapillaryPressureVGBE(const InputParameters&)':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:45:79: error: '_qp' was not declared in this scope\n   45 |     _pc_sscale(PorousFlowVanGenuchten::capillaryPressure(_s_scale, _alpha, _m[_qp], _pc_max))\n      |                                                                               ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::capillaryPressureCurve(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:53:69: error: '_qp' was not declared in this scope\n   53 |   return PorousFlowVanGenuchten::capillaryPressure(seff, _alpha, _m[_qp], _pc_max) - _pc_sscale;\n      |                                                                     ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::dCapillaryPressureCurve(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:60:70: error: '_qp' was not declared in this scope\n   60 |   return PorousFlowVanGenuchten::dCapillaryPressure(seff, _alpha, _m[_qp], _pc_max) * _dseff_ds *\n      |                                                                      ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::d2CapillaryPressureCurve(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:68:71: error: '_qp' was not declared in this scope\n   68 |   return PorousFlowVanGenuchten::d2CapillaryPressure(seff, _alpha, _m[_qp], _pc_max) * _dseff_ds *\n      |                                                                       ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::effectiveSaturation(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:76:82: error: '_qp' was not declared in this scope\n   76 |          PorousFlowVanGenuchten::effectiveSaturation(pc - _pc_sscale, _alpha, _m[_qp]);\n      |                                                                                  ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::dEffectiveSaturation(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:83:83: error: '_qp' was not declared in this scope\n   83 |          PorousFlowVanGenuchten::dEffectiveSaturation(pc - _pc_sscale, _alpha, _m[_qp]);\n      |                                                                                   ^~~\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C: In member function 'virtual libMesh::Real PorousFlowCapillaryPressureVGBE::d2EffectiveSaturation(libMesh::Real, unsigned int) const':\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:90:84: error: '_qp' was not declared in this scope\n   90 |          PorousFlowVanGenuchten::d2EffectiveSaturation(pc - _pc_sscale, _alpha, _m[_qp]);\n      |                                                                                    ^~~\n\nshould I need to add something like initQpStatefulProperties to my class?",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6561149",
                          "updatedAt": "2023-07-27T05:44:07Z",
                          "publishedAt": "2023-07-27T05:44:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "I think im close now, updated code is here\nReal\nPorousFlowCapillaryPressureVGBE::capillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::capillaryPressure(seff, _alpha, _m[qp], _pc_max) - _pc_sscale;\n}\n\n\nReal\nPorousFlowCapillaryPressureVGBE::dCapillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::dCapillaryPressure(seff, _alpha, _m[qp], _pc_max) * _dseff_ds *\n         _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2CapillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::d2CapillaryPressure(seff, _alpha, _m[qp], _pc_max) * _dseff_ds *\n         _dseff_ds * _s_scale * _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::effectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::effectiveSaturation(pc - _pc_sscale, _alpha, _m[qp]);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::dEffectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::dEffectiveSaturation(pc - _pc_sscale, _alpha, _m[qp]);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2EffectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::d2EffectiveSaturation(pc - _pc_sscale, _alpha, _m[qp]);\n}\n\nas @cpgr mentioned, now i'm having problem with _pc_sscale\n/home/moose/moose_beh/src/kernels/PorousFlowCapillaryPressureVGBE.C:45:79: error: 'qp' was not declared in this scope\n   45 |     _pc_sscale(PorousFlowVanGenuchten::capillaryPressure(_s_scale, _alpha, _m[qp], _pc_max))\n      |     \n```                                                                          ^~\n\nnot even sure if I need it",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6561369",
                          "updatedAt": "2023-07-27T06:08:17Z",
                          "publishedAt": "2023-07-27T06:07:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "This was the bit that you can't do this, as qp doesn't exist during construction. I would just remove this bit and all cases of _pc_scale unless you really need it?\nSorry about the typo - I meant qp not _qp!",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6561476",
                          "updatedAt": "2023-07-27T06:17:59Z",
                          "publishedAt": "2023-07-27T06:17:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi guys @cpgr @GiudGiud ,\nso it complies now, but i got Segmentation fault (signal 11) error\nI suspect that it come from feeding _m[qp] into functions below, when i replaced _m[qp] by a constant number (in this case 0.6) it works fine.\nReal\nPorousFlowCapillaryPressureVGBE::capillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::capillaryPressure(seff, _alpha, _m[qp], _pc_max);\n}\n\n\nReal\nPorousFlowCapillaryPressureVGBE::dCapillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::dCapillaryPressure(seff, _alpha, 0.6, _pc_max) * _dseff_ds *\n         _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2CapillaryPressureCurve(Real saturation, unsigned qp) const\n{\n  const Real seff = effectiveSaturationFromSaturation(saturation) * _s_scale;\n  return PorousFlowVanGenuchten::d2CapillaryPressure(seff, _alpha, 0.6, _pc_max) * _dseff_ds *\n         _dseff_ds * _s_scale * _s_scale;\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::effectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::effectiveSaturation(pc, _alpha, 0.6);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::dEffectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::dEffectiveSaturation(pc, _alpha, 0.6);\n}\n\nReal\nPorousFlowCapillaryPressureVGBE::d2EffectiveSaturation(Real pc, unsigned qp) const\n{\n  return (1.0 / _s_scale) *\n         PorousFlowVanGenuchten::d2EffectiveSaturation(pc, _alpha, 0.6);\n}\n\nBelow is one of the functions from PorousFlowVanGenuchten.C, I think the error might come from here, how do I change in this function so it takes _m[qp] instead of a single value m?\nReal\ncapillaryPressure(Real seff, Real alpha,  Real m, Real pc_max)\n{\n  if (seff >= 1.0)\n    return 0.0;\n  else if (seff <= 0.0)\n    return pc_max;\n  else\n  {\n    Real a = std::pow(seff, -1.0 / m) - 1.0;\n    return std::min(std::pow(a, 1.0 - m) / alpha, pc_max);\n  }\n}",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6571226",
                          "updatedAt": "2023-07-28T02:13:53Z",
                          "publishedAt": "2023-07-28T02:13:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "You don't need to change the function, as _m[qp] should just be a number that you are passing to the function. If you past the actual seg fault message it should help narrow it down.",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6571535",
                          "updatedAt": "2023-07-28T03:06:53Z",
                          "publishedAt": "2023-07-28T03:06:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "a very dumb question, how do I do that?\nbelow is all I got\n===================================================================================\n=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES\n=   PID 403267 RUNNING AT moose-System-Product-Name\n=   EXIT CODE: 139\n=   CLEANING UP REMAINING PROCESSES\n=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\n===================================================================================\nYOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application.\nPlease see the FAQ page for debugging suggestions",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6571611",
                          "updatedAt": "2023-07-28T03:22:29Z",
                          "publishedAt": "2023-07-28T03:22:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "There are some details on the moose website here https://mooseframework.inl.gov/application_development/debugging.html, but if you paste the complete PorousFlowCapillaryPressureVGBE file here I could hopefully guess what the problem is without you needing to compile a dbg version.",
                          "url": "https://github.com/idaholab/moose/discussions/25024#discussioncomment-6571649",
                          "updatedAt": "2023-07-28T03:29:39Z",
                          "publishedAt": "2023-07-28T03:29:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Increase of a variable residual and convergence issue",
          "author": {
            "login": "sinaomrani96"
          },
          "bodyText": "Hi,\nHope you are well.\nI am using PorousFlow module of MOOSE but my question is a bit more general and related to solving the equations. I have turned on the show_var_residual_norms to see the residual for each variable. The thing that I do not understand is that somewhere in the solve, a variable residual increases and causes convergence problem (please see below the residual for tracer variable). I was wondering what is the reason and how I can solve it. Thanks.\nTime Step 3, time = 3, dt = 1\n0 Nonlinear |R| = 2.211444e-06\n|residual|_2 of individual variables:\npwater: 9.11345e-09\nsatg:   9.16047e-22\ntracer: 2.21143e-06\n1 Nonlinear |R| = 8.379444e-06\n|residual|_2 of individual variables:\npwater: 5.11939e-07\nsatg:   7.53075e-22\ntracer: 8.36379e-06\n2 Nonlinear |R| = 6.201440e-05\n|residual|_2 of individual variables:\npwater: 3.9068e-06\nsatg:   5.89635e-22\ntracer: 6.18912e-05\n3 Nonlinear |R| = 6.116279e-05\n|residual|_2 of individual variables:\npwater: 3.41119e-06\nsatg:   4.76689e-22\ntracer: 6.10676e-05\nBest regards,\nSina",
          "url": "https://github.com/idaholab/moose/discussions/25072",
          "updatedAt": "2023-08-01T21:15:29Z",
          "publishedAt": "2023-08-01T10:35:40Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "I would start by reading https://mooseframework.inl.gov/moose/application_usage/failed_solves.html if you haven't already. Seeing a variable residual increase during an iteration of a Newton solve is not unusual, but if you're unable to run your simulation satisfactorily then there may be issues. Are you using Newton or PJFNK as your solve_type? How are your linear solves?",
                  "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6607986",
                  "updatedAt": "2023-08-01T16:44:46Z",
                  "publishedAt": "2023-08-01T16:44:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sinaomrani96"
                          },
                          "bodyText": "Hi Alex,\nThanks for sharing the link. I am using Newton as my solver. The linear solve is also slow. I have tested various preconditioning for my problem and only the following setting gave me better results. I have been testing different nl_abs_tol and l_abs_tol to find the one suitable for my problem.\n[precond]\ntype = SMP\nfull = true\npetsc_options = '-snes_linesearch_monitor'\npetsc_options_iname = '-snes_type -pc_factor_shift_type -snes_linesearch_type'\npetsc_options_value = 'vinewtonssls nonzero l2'\n[]\nTo be honest, I do not know so much about various preconditioning settings, and how I can choose one based on my problem. I also appreciate if you have any suggestion in this regard. Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6608244",
                          "updatedAt": "2023-08-01T17:12:22Z",
                          "publishedAt": "2023-08-01T17:12:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "What physics are you solving? You have to be solving very special problems in order to use vinewtonssls",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6608394",
                          "updatedAt": "2023-08-01T17:30:04Z",
                          "publishedAt": "2023-08-01T17:30:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sinaomrani96"
                          },
                          "bodyText": "I am using PorousFlow and my problem is a multi-component fluid flow in porous media. However, the viscosity is not constant (it is a non-newtonian fluid). As I said, I do not know about the preconditioning and found this one in a tensor mechanics example I think.",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6609112",
                          "updatedAt": "2023-08-01T18:55:37Z",
                          "publishedAt": "2023-08-01T18:55:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@cpgr and @WilkAndy can advise you on good preconditioning settings. For debugging your convergence and ensuring the linear solves aren't the problem, I would suggest changing to\n[precond]\n  solve_type = NEWTON\n  type = SMP\n  full = true\n  petsc_options = '-snes_linesearch_monitor'\n  petsc_options_iname = '-pc_type -pc_factor_shift_type -snes_linesearch_type'\n  petsc_options_value = 'lu NONZERO basic'\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6609177",
                          "updatedAt": "2023-08-01T19:05:54Z",
                          "publishedAt": "2023-08-01T19:05:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "iirc there is a porous flow preconditioning page in the porous flow documentation you should consult",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6609418",
                          "updatedAt": "2023-08-01T19:42:26Z",
                          "publishedAt": "2023-08-01T19:42:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "@WilkAndy has provided some good suggestions here:\nhttps://mooseframework.inl.gov/modules/porous_flow/solvers.html\nhttps://mooseframework.inl.gov/modules/porous_flow/nonlinear_convergence_problems.html\nand also\nhttps://mooseframework.inl.gov/modules/porous_flow/convergence.html",
                          "url": "https://github.com/idaholab/moose/discussions/25072#discussioncomment-6610052",
                          "updatedAt": "2023-08-01T21:15:29Z",
                          "publishedAt": "2023-08-01T21:15:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Designing field-split preconditioners for NS",
          "author": {
            "login": "lindsayad"
          },
          "bodyText": "This is meant to be a repository of information for designing field split conditioners for NS. When (or even before) we have options that work robustly for a range of Reynolds numbers, this should go into the MOOSE documentation\nMy general experience:\n\nJacobi for the Schur takes more iterations than something like ASM+(I)LU but it is less expensive so it often wins\nApparently boomeramg works better on high Re problems when L is large compared to ASM+(I)LU but ASM+(I)LU works better on high Re problems for small mu. This in reference to solving the momentum part of the matrix\nIf there is no diagonal, then for Jacobi for Schur, specify -pc_jacobi_type rowmax; -pc_jacobi_type rowsum appears to be terrible. Note that when using the default -pc_jacobi_type diagonal if a 0 is encountered, then 1 is used\nJacobi doesn't work for the momentum part of the matrix; not strong enough\nFor advection dominated, full factorization does not compare as poorly to lower/upper as for non-advection dominated, in fact it may be faster\nI believe for Aij matrices in PETSc that the block size is always 1. So when doing Schur problems, doing Ainv types of diag and blockdiag are equivalent and in these cases when using selfp Ainv just corresponds to the reciprocal of A's diagonal which for advection dominated leads to Sp poorly approximating S, e.g. even when doing first order upwind with a Reynolds number of 2.2 in our 2d-rc-no-slip.i channel flow problem, it takes 50-60 linear iterations to solve the Schur complement with -pc_type lu for both the outer Schur PC type and the A00 PC type\nselfp degrades with increasing Reynolds number as the diagonal of A00 is a poor representation of A00\nself with LSC preconditioning appears to be promising for stable discretizations (e.g. Q2-Q1 finite elements). It requires some PETSC development (see this MR) in order to have mesh independent scaling. The current PETSc implementation does not add corrections for stabilized discretizations such as PSPG for finite elements or Rhie-Chow for finite volumes. I'll have to see whether that is required\n\nself with LSC is indeed a great preconditioner, especially for stable C0 finite elements. See timing in #24548 (comment). When doing LSC preconditioning with a KSP solve, it is best to limit the number of outer linear solve iterations, e.g. full should be used as the factorization as opposed to upper,lower,diag, since the ksp(S,Sp) will be expensive",
          "url": "https://github.com/idaholab/moose/discussions/24809",
          "updatedAt": "2023-08-01T19:11:11Z",
          "publishedAt": "2023-06-23T21:26:49Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "Would you be able to share a copy of the code that you used to evaluate and determine you findings a presented above? I would like to run my own test with different geometry and variable values with what you have developed.",
                  "url": "https://github.com/idaholab/moose/discussions/24809#discussioncomment-6307933",
                  "updatedAt": "2023-06-28T18:43:44Z",
                  "publishedAt": "2023-06-28T18:43:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can use this example: https://github.com/idaholab/moose/blob/next/modules/navier_stokes/test/tests/finite_volume/ins/channel-flow/2d-rc-no-slip.i\nwe base most of our studies on this one and on a large scale reactor model we can't share.",
                          "url": "https://github.com/idaholab/moose/discussions/24809#discussioncomment-6311020",
                          "updatedAt": "2023-06-29T03:50:53Z",
                          "publishedAt": "2023-06-29T03:50:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I've opened #24883 if you want to follow along with my field split research. That PR includes a finite element example, which I believe you asked about elsewhere",
                          "url": "https://github.com/idaholab/moose/discussions/24809#discussioncomment-6333881",
                          "updatedAt": "2023-07-01T19:56:26Z",
                          "publishedAt": "2023-07-01T19:56:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Kernel Compile problems",
          "author": {
            "login": "Wolke926"
          },
          "bodyText": "I am studying the \"Babbler\" example and trying to add some new kernels in this application, I followed the steps here:\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/step05_kernel_object.html\nI put the .c and .h files in the src and include folder respectively, then run make -j 4. The .C and .h files I want to add are just copied from modules files. I also changed the App name for .C file.\n\nBut when I want to run \" cd ~/projects/babbler/problems\n../babbler-opt -i my_own-project.i  \" the kernel I want to add are still not been registered.\n\nAre there any steps missing?",
          "url": "https://github.com/idaholab/moose/discussions/25066",
          "updatedAt": "2023-08-01T17:30:47Z",
          "publishedAt": "2023-07-31T19:34:45Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "If you want to use classes from a module, you should modify the Makefile in your application, toggling PHASE_FIELD := yes\nBut with respect to your error, you showed that you registered ADSplitCHWRes, but the error is about the non-AD object SplitCHWRes. Did you register the non-AD version to your app?",
                  "url": "https://github.com/idaholab/moose/discussions/25066#discussioncomment-6598761",
                  "updatedAt": "2023-07-31T19:50:22Z",
                  "publishedAt": "2023-07-31T19:50:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Wolke926"
                  },
                  "bodyText": "I changed the makefile then compile again, but I got this:",
                  "url": "https://github.com/idaholab/moose/discussions/25066#discussioncomment-6606303",
                  "updatedAt": "2023-08-01T14:22:55Z",
                  "publishedAt": "2023-08-01T14:22:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Do you still have the copies in your application? I would make sure you've remove the copies and you're only using the phase field module version of that kernel",
                          "url": "https://github.com/idaholab/moose/discussions/25066#discussioncomment-6608005",
                          "updatedAt": "2023-08-01T16:46:15Z",
                          "publishedAt": "2023-08-01T16:46:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wolke926"
                          },
                          "bodyText": "I remove all the moose files and download them again, I guess there are some problems in the source file. Now It works.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/25066#discussioncomment-6608399",
                          "updatedAt": "2023-08-01T17:30:43Z",
                          "publishedAt": "2023-08-01T17:30:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "My SmoothCircleIC has problem",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Hello, Moose experts.\nI applied MultiSmoothCircleIC on the block=2 but something is wrong.\n\nIt doesn't have the same value in the circle.\nSmoothCircleIC has the same problem as below.\n\nAs you can see on the line plot view, the n has from 4 to 10 values.\nBut my coworker's MultiSmoothCircleIC doesn't have any problem as below.\n\nThis is my input file.\n\n########## Global Parameters ########## \nxmax = 30\nymax = 35\n\nNmax = 10.0\n\n#######################################\n\n\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 6\n    ny = 7\n    nz = 0\n    xmin = 0\n    xmax = ${xmax}\n    ymin = 0\n    ymax = ${ymax}\n    zmin = 0\n    zmax = 0\n    elem_type = QUAD4\n  []\n  [./blk1]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 1                                                                                                                                                                                bottom_left = '0.0  0.000  0.0'\n    top_right = '${xmax} 30.00000  0.0'\n    block_name = 'reservoir'\n    input = gen\n  [../]\n\n  [./refine_0]\n    type = RefineBlockGenerator\n    input = blk1\n    block = 0\n    refinement = '5'\n  [../]\n\n  [./blk2]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 2\n    bottom_left = '10.00  30.00  0.0'\n    top_right = '20.00 35.00  0.0'\n    block_name = 'filament'\n    input = refine_0\n  [../]\n\n  [./bd1]\n    type = SideSetsAroundSubdomainGenerator\n    block = 1\n    new_boundary = 'interface'\n    normal = '0 1 0'\n    input = blk2\n  [../]\n\n\n\n[]\n\n\n\n[Functions]\n  [./bc_func]\n    type = PiecewiseLinear\n    data_file = './vsweep.csv'\n    format = columns\n    scale_factor = 1.0\n  [../]\n[]\n\n[Variables]\n  [./N]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n\n  [./V]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n\n  [./T]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 300.0\n  [../]\n[]\n\n[ICs]\n  [./N_IC_1]\n    type = MultiBoundingBoxIC\n    corners = '0.0 0.0 0   '\n    opposite_corners = '30.0 30.0 0'\n    inside = '${Nmax}'\n    outside = '${Nmax}'\n    variable = N\n    block = 1\n  [../]\n\n\n\n  [./N_IC_2]\n    type = SmoothCircleIC\n    invalue = ${Nmax}\n    outvalue = 0.0\n    radius = 1.5\n    variable = N\n    x1 = 15\n    y1 = 32\n    block = 2\n  [../]\n[]\n\n[BCs]\n  [V_top]\n    type = FunctionDirichletBC\n    variable = V\n    function = bc_func # GND\n    boundary = 'top'\n  []\n\n\n  [V_bot]\n    type = DirichletBC\n    variable = V\n    value = 0.0\n    boundary = 'bottom'\n  []\n\n  [./T_top1]\n    type = DirichletBC\n    boundary = 'top'\n    variable = T\n    value = 300 #in K\n  [../]\n\n  [./T_bot]\n    type = DirichletBC\n    boundary = 'bottom'\n    variable = T\n    value = 300 #in K\n  [../]\n[]\n\n[Kernels]\n\n  ########### Phase-field ############\n\n  [./Matdiff_D_del2_N]\n    type = MatDiffusion\n    variable = N\n    diffusivity = Diff_coeff\n  [../]\n\n\n  [./Nernst]\n    type = NernstElec\n    variable = N\n    elec = V\n    eDkT = eDkT\n  [../]\n\n\n  [./PFM_time]\n    type = TimeDerivative\n    variable = N\n  [../]\n\n  ########## Phase-field END ##########\n\n  ########## Electrical ###############\n\n  [./Matdiff_sig_del2_V]\n    type = MatDiffusion\n    variable = V\n    diffusivity = 'electrical_conductivity'\n  [../]\n\n  ########## Electrical END ###########\n\n  ###### Heat ######\n\n  [./HeatDiff]\n    type = HeatConduction\n    variable = T\n  [../]\n\n  [./HeatSrc]\n    type = JouleHeatingSource\n    variable = T\n    elec = V\n  [../]\n\n  ##################\n[]\n\n\n\n\n\n[Materials]\n  [./Diff_coeff]\n    type = ParsedMaterial\n    property_name  = Diff_coeff\n    coupled_variables = 'T'\n    constant_names       = 'D0     E_A_D    kB        ' #[nm^2/s]  [eV/K]  [K]\n    constant_expressions = '2e+11  1.0      8.617e-5'\n    expression = 'D0*exp(-E_A_D/(kB*T))' #[nm^2/s]\n    outputs = exodus\n  [../]\n\n  [./eDkT]\n    type = ParsedMaterial\n    property_name = eDkT\n    coupled_variables = 'T'\n    constant_names       = 'kB       ' #[V/K]\n    constant_expressions = '8.617e-5'\n    material_property_names = 'Diff_coeff'\n    expression = 'Diff_coeff/(kB*T)' #[nm^2/(s*V)]\n    outputs = exodus\n  [../]\n\n  [./electrical_conductivity_INS]\n    type = ParsedMaterial\n    coupled_variables = 'N E_AC_elec T'\n    property_name = 'electrical_conductivity'\n    material_property_names = 'sigma_original  sigma_PF'\n    expression = 'sigma_original+sigma_PF'\n    outputs = exodus\n  [../]\n\n  [./sigma_original]\n    type = ParsedMaterial\n    coupled_variables = 'N E_AC_elec T'\n    property_name = 'sigma_original'\n    constant_names =        'sig_H    sig_L     kB'       \n    constant_expressions =  '1.0e-6   9.4e-5 8.617e-5' #[1/(ohm*nm)] [1/(ohm*nm)] [eV/K]\n    expression = 'if(N<0, sig_H*exp(-E_AC_elec/(kB*T)), if(N>${Nmax}, sig_L*exp(-E_AC_elec/(kB*T)),((sig_L-sig_H)/${Nmax}*N+sig_H)*exp(-E_AC_elec/(kB*T))))'\n    outputs = exodus\n  [../]\n\n  [./sigma_PF]\n    type = ParsedMaterial\n    coupled_variables = 'N E_mag T'\n    property_name = 'sigma_PF'\n    constant_names =        ' sig_H    sig_L    a              b'       \n    constant_expressions =  ' 1.0e-6   9.4e-5   5.48*sqrt(10)  -5.7'\n    expression = 'if(N<0, sig_H*exp(293/T*(a*sqrt(E_mag)+b)), if(N>${Nmax}, sig_L*exp(293/T*(a*sqrt(E_mag)+b)),((sig_L-sig_H)/${Nmax}*N+sig_H)*exp(293/T*(a*sqrt(E_mag)+b))))'\n    outputs = exodus\n  [../]\n\n  [./current_density_y]\n    type = ParsedMaterial\n    property_name = 'current_density'\n    coupled_variables = 'Ey'\n    material_property_names = 'electrical_conductivity'\n    expression = 'electrical_conductivity*Ey'\n    outputs = exodus\n  [../]\n\n  [./current_density_y_times_x]\n    type = ParsedMaterial\n    property_name = 'current_density_y_times_x'\n    coupled_variables = 'dum_x'\n    material_property_names = 'current_density'\n    expression = 'current_density*dum_x'\n    outputs = exodus\n  [../]\n\n\n  ############ Heat ############\n  [./k_INS]\n    type = ParsedMaterial\n    property_name = 'thermal_conductivity'\n    coupled_variables = 'N'\n    constant_names =        'k_H      k_L'\n    constant_expressions =  '0.12e-9  57.5e-9'\n    expression = 'if(N<0, k_H, if(N>${Nmax}, k_L, (k_L-k_H)/${Nmax}*N+k_H))'    # W/(nm K)\n#    expression = 'if(N<0, k_H, (k_L-k_H)/1.2*N+k_H)'    # W/(nm K)\n    outputs = exodus\n#    block = 2\n  [../]\n\n  ####################\n\n[]\n\n[AuxVariables]\n\n  [dum_x]\n    order = FIRST\n    family = LAGRANGE\n  []\n\n  ########## Electric ##########\n  [Ex]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n\n  [Ey]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n\n  [E_mag]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n\n  [E_AC_elec]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n\n  ######## Electric END ########\n\n[]\n\n\n[AuxKernels]\n\n  [dummy]\n    type = ParsedAux\n    variable = dum_x\n    use_xyzt = true\n    expression = 'x'\n  []\n\n  ########## Electric ##########\n  [Ex_aux]\n    type = PotentialToFieldAux\n    variable = Ex\n    gradient_variable = V\n    sign = negative\n    component = x\n  []\n\n  [Ey_aux]\n    type = PotentialToFieldAux\n    variable = Ey\n    gradient_variable = V\n    sign = negative\n    component = y\n  []\n\n  [E_mag_aux]\n    type = ParsedAux\n    variable = E_mag\n    coupled_variables = 'Ex Ey'\n    expression = 'sqrt(Ex^2+Ey^2)'\n  []\n\n\n  [E_AC_elec_aux]\n    type = ParsedAux\n    variable = E_AC_elec\n    coupled_variables = 'N'\n    constant_names = 'Nth  E_AC'\n    constant_expressions = '5.0  0.05' #[nm^-3] [eV]\n    expression = 'if(N>Nth, -0.006, if(N<0, E_AC, -E_AC/Nth*N + E_AC))'\n    execute_on = 'initial linear timestep_end'\n#    block = 2\n  []\n\n  ######## Electric END ########\n[]\n\n[Postprocessors]\n\n  ######## Electric #######\n\n  #  [./Resistance]\n  #    type = FunctionValuePostprocessor\n  #    function = resistance_func\n  #  [../]\n\n  [average_V]\n    type = SideAverageValue\n    variable = V\n#    boundary = 'trape2_top'\n    boundary = 'top'\n  []\n\n\n  [Current_density_integral]\n    type = SideIntegralMaterialProperty\n#    boundary = 'BE_top'\n    boundary = bottom\n\n#    boundary = 'blk_bot'\n    property = current_density_y_times_x\n  []\n\n  [Current]\n    type = ParsedPostprocessor\n    constant_names = 'pi'\n    constant_expressions = '3.14'\n    function = \"if(Current_density_integral>0,Current_density_integral*2*pi,-Current_density_integral*2*pi)\" \n    pp_names = Current_density_integral\n  []\n\n  ######## Electric END #######\n\n  [Timestepsize]\n    type = TimestepSize\n  []\n\n  [Max_T]\n    type = NodalExtremeValue\n    variable = T\n  []\n\n[]\n\n[Debug]\n  show_var_residual_norms = true\n[]\n\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre      boomeramg'\n\n  l_max_its = 50\n  nl_max_its = 50\n\n  l_tol = 1.0e-4\n  nl_rel_tol = 1.0e-8\n  nl_abs_tol = 1e-8\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    growth_factor = 1.5\n    cutback_factor = 0.5\n    optimal_iterations = 5\n    dt = 1e-4\n  [../]\n  \n#  [./Adaptivity]\n#    interval = 2\n#    refine_fraction = 0.2\n#    coarsen_fraction = 0.3\n#    max_h_level = 3\n#  [../]\n\n\n  dtmin = 1e-13\n  dtmax = 2.5e-2\n\n  start_time = 0.0\n  end_time = 1.5\n\n########## For TEST ##########\n#  num_steps = 2\n##############################\n\n\n  automatic_scaling = true\n#  compute_scaling_once = false\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  file_base = output\n\n  [myexo]\n    type = Exodus\n    file_base = half\n    interval = 2\n#    start_step = 4340 \n  []\n\n  [mymycp]\n    type = Checkpoint\n    num_files = 10\n    interval = 50\n    file_base = mycp\n  []\n[]\n\nI don't know why. Maybe subdomainblock or Meshrefinement has some issues on this problems?\nThank you\nBest Wishes,\nJeonghwan Jang",
          "url": "https://github.com/idaholab/moose/discussions/25028",
          "updatedAt": "2023-08-01T07:46:51Z",
          "publishedAt": "2023-07-24T16:49:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nwhy do you say mesh refinement may have an issue? The Adaptivity block seems to be commented out\nis this a recent version of moose? These initial conditions were not block restricted last year\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6536668",
                  "updatedAt": "2023-07-25T06:31:43Z",
                  "publishedAt": "2023-07-25T06:31:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Hello.\n\nwhy do you say mesh refinement may have an issue? The Adaptivity block seems to be commented out\n\nIt is just my naive guess. I tried to find some differences with my coworker's file and the differences were only existence of the subdomainblock and refinement of it like below.\n  [./refine_0]\n    type = RefineBlockGenerator\n    input = blk1\n    block = 0\n    refinement = '5'\n  [../]\n\nI am not using the latest version. I downloaded it this year on Feb.\nBut I am curious about the reason why SmoothCircleIC of my coworker's input file works well, while SmoothCircleIC of mine doesn't, even though I simulated both files using the same version of MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6537674",
                          "updatedAt": "2023-07-25T08:31:38Z",
                          "publishedAt": "2023-07-25T08:31:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if you remove refinement do you get the right values?",
                          "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6542525",
                          "updatedAt": "2023-07-25T16:52:44Z",
                          "publishedAt": "2023-07-25T16:52:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Yes. It works.\nI think I must not use the refinement.\nI made several blocks and set different nx and ny.\nAnyway, Thanks for your help. I hope you guys fix this problem soon, if you guys think it is a crucial matter.",
                          "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6551570",
                          "updatedAt": "2023-07-26T13:13:59Z",
                          "publishedAt": "2023-07-26T13:13:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI investigated this and the issue is that the SubdomainBoundingBox generator does not convert refined elements to the right block.\nSo you end up with holes in that little region that is created from a refined area.\nOne solution for now (until we fix it) is to re-organize the blocks:\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 60\n    ny = 70\n    xmin = 0\n    xmax = ${xmax}\n    ymin = 0\n    ymax = ${ymax}\n    zmin = 0\n    zmax = 0\n    elem_type = QUAD4\n  []\n  [blk1]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 1                                                                                                                                                                                bottom_left = '0.0  0.000  0.0'\n    top_right = '${xmax} 30.00000  0.0'\n    block_name = 'reservoir'\n    input = gen\n  []\n\n  [blk2]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 2\n    bottom_left = '10.00  30.00  0.0'\n    top_right = '20.00 35.00  0.0'\n    block_name = 'filament'\n    input = blk1\n  []\n\n  [refine_0]\n    type = RefineBlockGenerator\n    input = blk2\n    block = '0 2'\n    refinement = '2 2'\n  []\n\n  [bd1]\n    type = SideSetsAroundSubdomainGenerator\n    block = 1\n    new_boundary = 'interface'\n    normal = '0 1 0'\n    input = refine_0\n  []\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6593153",
                  "updatedAt": "2023-07-31T09:38:43Z",
                  "publishedAt": "2023-07-31T09:38:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "I see!\nThanks for your passion and kindness!",
                          "url": "https://github.com/idaholab/moose/discussions/25028#discussioncomment-6602577",
                          "updatedAt": "2023-08-01T07:46:50Z",
                          "publishedAt": "2023-08-01T07:46:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "J-integral calculation for a 2D edge crack with collapse nodes at the crack tip",
          "author": {
            "login": "tranm-ansto"
          },
          "bodyText": "Hello,\nI am using the tensor mechanics module to calculate J-integral for a 2D edge crack with collapse nodes at the crack tip.\nI'm following the example in\n~\\moose\\modules\\tensor_mechanics\\test\\tests\\j_integral\\j_integral_2d.i\nThe J-integral result at 50% through the width is shown below.\n\nI'm trying to follow this example to calculate J-integral for a 2D edge crack with collapse nodes at the crack tip. Figures of the 2D edge crack with web mesh are shown below.\n\n\nHowever, when I tried running the model, I got an error message about the \"CrackFrontDefinition\", shown below.\n\nI tried selecting 1 of the collapse nodes at the crack tip. I also tried selecting all the collapse nodes. And, I still get the same error.\nMy input file is below.\n[GlobalParams]\n  order = FIRST\n  family = LAGRANGE\n  displacements = 'disp_x disp_y'\n  volumetric_locking_correction = true\n[]\n\n[Mesh]\n  file = edge_crack_2d.e\n  # use_displaced_mesh = false\n[]\n\n[AuxVariables]\n  [./SED]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[Modules/TensorMechanics/Master]\n  [./master]\n    strain = SMALL\n    add_variables = true\n    incremental = false\n    generate_output = 'stress_xx stress_yy stress_zz vonmises_stress'\n    planar_formulation = PLANE_STRAIN\n  [../]\n[]\n\n[AuxKernels]\n  [./SED]\n    type = MaterialRealAux\n    variable = SED\n    property = strain_energy_density\n    execute_on = timestep_end\n  [../]\n[]\n\n[Functions]\n  [./rampConstant]\n    type = PiecewiseLinear\n    x = '0. 1.'\n    y = '0. 1.'\n    scale_factor = -1\n  [../]\n[]\n\n[BCs]\n  [./Pressure]\n    [./top_edge]\n      boundary = 'topEdge'\n      function = rampConstant\n    [../]\n  [../]\n\n  [./crack_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'botEdge'\n    value = 0.0\n  [../]\n\n  [./pin_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'pinNode'\n    value = 0.0\n  [../]\n[]\n\n[Materials]\n  [./elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 207000\n    poissons_ratio = 0.3\n  [../]\n  [./elastic_stress]\n    type = ComputeLinearElasticStress\n  [../]\n[]\n\n[DomainIntegral]\n  integrals = JIntegral\n  boundary = 'crackNode'\n  crack_direction_method = CrackDirectionVector\n  crack_direction_vector = '1 0 0'\n  2d = true\n  axis_2d = 2\n  radius_inner = '0.501 0.505 0.510 0.515'\n  radius_outer = '0.505 0.510 0.515 0.520'\n  output_q = false\n  incremental = false\n[]\n\n\n\n[Executioner]\n  type = Transient\n\n  petsc_options = '-snes_ksp_ew'\n  petsc_options_iname = '-ksp_gmres_restart'\n  petsc_options_value = '101'\n\n  line_search = 'none'\n\n  l_max_its = 50\n  nl_max_its = 20\n  nl_rel_tol = 1e-12\n  nl_abs_tol = 1e-5\n  l_tol = 1e-2\n\n  start_time = 0.0\n  dt = 1\n\n  end_time = 1\n  num_steps = 1\n[]\n\n[Outputs]\n  file_base = j_integral_edge_crack_2d\n  exodus = true\n  csv = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/25044",
          "updatedAt": "2023-08-01T01:54:46Z",
          "publishedAt": "2023-07-27T00:14:15Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\ncan you plot only the \u2018crackNode\u2019 boundary in paraview to check that it meets the conditions?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25044#discussioncomment-6562569",
                  "updatedAt": "2023-07-27T08:13:39Z",
                  "publishedAt": "2023-07-27T08:13:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "tranm-ansto"
                          },
                          "bodyText": "Hi Guillaume,\nBelow is the 'crackNode' boundary plot.\n\nI'm not quite sure what the conditions that need to be met are. Could you please provide a bit more detail on those conditions?\nMinh",
                          "url": "https://github.com/idaholab/moose/discussions/25044#discussioncomment-6570210",
                          "updatedAt": "2023-07-27T22:51:48Z",
                          "publishedAt": "2023-07-27T22:51:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The error message says the nodes should be aligned. How many nodes does \u00ab\u00a0crackNode\u00a0\u00bb have? And are they aligned? If it s all the nodes in the picture then they are not obviously",
                          "url": "https://github.com/idaholab/moose/discussions/25044#discussioncomment-6573071",
                          "updatedAt": "2023-07-28T07:37:10Z",
                          "publishedAt": "2023-07-28T07:37:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Actually, if run you input with --mesh-only on the command line, the output to console should describe crackNode enough (the bounding box will be flat if all the nodes are aligned here)",
                          "url": "https://github.com/idaholab/moose/discussions/25044#discussioncomment-6584957",
                          "updatedAt": "2023-07-29T22:47:12Z",
                          "publishedAt": "2023-07-29T22:46:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "tranm-ansto"
                  },
                  "bodyText": "It turns out that in the 'boundary' option accepts node set ID, not node set name. Please see below. The mesh seems fine. The code runs now. Thank you for the pointer, Guillaume.\n[DomainIntegral]\n  integrals = JIntegral\n  boundary = 5000\n  crack_direction_method = CrackDirectionVector\n  crack_direction_vector = '1 0 0'\n  2d = true\n  axis_2d = 2\n  radius_inner = '0.501 0.505 0.510 0.515 0.520 0.525'\n  radius_outer = '0.505 0.510 0.515 0.520 0.525 0.530'\n  output_q = false\n  incremental = false\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/25044#discussioncomment-6600634",
                  "updatedAt": "2023-08-01T01:49:32Z",
                  "publishedAt": "2023-08-01T01:49:31Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}