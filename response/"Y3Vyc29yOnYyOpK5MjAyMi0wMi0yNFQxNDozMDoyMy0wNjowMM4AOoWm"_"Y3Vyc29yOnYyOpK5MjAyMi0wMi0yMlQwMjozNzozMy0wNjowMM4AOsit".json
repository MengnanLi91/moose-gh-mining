{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wMi0yMlQwMjozNzozMy0wNjowMM4AOsit"
    },
    "edges": [
      {
        "node": {
          "title": "Segmentation fault occurs in program running",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Hi, Moose experts or users,\nRecently, I take one creep model for reference ('A physics-based crystallographic modeling framework for describing the thermal creep behavior of Fe-Cr alloys') and try to write an individual class including .h and .c files. After debugging, there are no errors in compiling. When attempting to run the program with .i extension, I got the 'Segmentation fault' message below.\nerror.txt\nSo two questions here:\n\nWhat possible reasons cause this? And have any suggestions to deal with it?\nAre there good ways to check, debug or verify the codes?\n\nAppreciate your help.",
          "url": "https://github.com/idaholab/moose/discussions/20318",
          "updatedAt": "2022-07-04T08:28:32Z",
          "publishedAt": "2022-02-16T17:24:18Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSince you are using a custom class, there are a plethora of reasons you could hit a seg fault. Some simple (reading out of bounds for example), some more complex (using data that has not been initialized for example)\nThe good way to work on this is to follow our debugging instructions, located here:\nhttps://mooseframework.inl.gov/application_development/debugging.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2191613",
                  "updatedAt": "2022-07-04T08:28:30Z",
                  "publishedAt": "2022-02-16T20:46:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Hi @GiudGiud. Thank you for your useful information. I followed debugging instructions to debug my codes and got the following errors. Could you have a look and what errors do those messages indicate? Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2224611",
                          "updatedAt": "2022-07-04T08:28:30Z",
                          "publishedAt": "2022-02-21T23:11:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont see anything obvious sadly.\nIt is seg-faulting while trying to access an array, but I dont know why.\nIn the debugger, can you print local variables see if anything is odd?",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2224872",
                          "updatedAt": "2022-07-04T08:28:29Z",
                          "publishedAt": "2022-02-22T00:33:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Looks like you're indexing into an array out of bounds in CrystalPlasticityOrowanDislocationSlip.C on line 519. We need to see this class to help more.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2225023",
                          "updatedAt": "2022-07-04T08:28:30Z",
                          "publishedAt": "2022-02-22T01:19:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Hi @GiudGiud and @loganharbour,\nThank you for your help. Now I fixed all issues and the .i file can be successfully run. I still have two questions.\n\nThe base class I used in the program is 'CrystalPlasticityStressUpdateBase'. I can get data on strain and stress. I am not sure if the obtained strain is the creep strain. Studying the curve of creep strain vs. time is my purpose.\nUsually, in order to study the curve of creep strain vs. time well, should I keep running the program for at least several hours?\nAppreciate your help again.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2231829",
                          "updatedAt": "2022-07-04T08:28:48Z",
                          "publishedAt": "2022-02-22T20:48:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@jiangwen84 will know about these tensor mechanics things",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2231859",
                          "updatedAt": "2022-07-04T08:28:49Z",
                          "publishedAt": "2022-02-22T20:55:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "The crystal plasticity 'stress calculator' and base class are described in detail on the documentation page: https://mooseframework.inl.gov/source/materials/crystal_plasticity/ComputeMultipleCrystalPlasticityStress.html .\n\nThe total Lagrangian strain is calculated in the stress calculator class (ComputeMultipleCrystalPlasticityStress), and you can use the plastic deformation gradient to determine when plastic deformation begins.\nGenerally crystal plasticity simulations require a small timestep size and have many stateful properties. Both of these factor will contribute to a longer simulation run time.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2231882",
                          "updatedAt": "2022-07-04T08:28:49Z",
                          "publishedAt": "2022-02-22T20:59:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Hi @sapitts.\nThank you for your helpful information.\n\nAre there developed examples about the determination of plastic deformation beginning for reference?\nI saw there is a class called 'RadialReturnCreepStressUpdateBase' inherited from 'RadialReturnStressUpdate' in which creep strain is determined. Class named 'PowerLawCreepStressUpdate' inherits this class well. Do you have any thoughts or suggestions about how to apply these classes to my case (the base class is CrystalPlasticityStressUpdateBase) making me easier and simpler to determine creep strain?\n\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2237474",
                          "updatedAt": "2022-07-04T08:28:51Z",
                          "publishedAt": "2022-02-23T15:51:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "I usually watch the plastic deformation gradient tensor diagonal components to determine the onset of plasticity: when any of the diagonal components change from unity (e.g. 0.9999999 or 1.000011), then I consider the strain from then on to be the inelastic strain.\nI'd strongly recommend staying with the CrystalPlasticityStressUpdateBase as your base class. The other classes you've listed assume a J2 yield surface which is not appropriate for a crystal plasticity model.  In the crystal plasticity classes we don't really distinguish between plastic strain and creep strain but rather consider all of them inelastic strain and inelastic deformation",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2238319",
                          "updatedAt": "2022-07-04T08:28:53Z",
                          "publishedAt": "2022-02-23T17:49:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xchengood"
                          },
                          "bodyText": "Hi @sapitts. Thank you for your suggestions very much.",
                          "url": "https://github.com/idaholab/moose/discussions/20318#discussioncomment-2246665",
                          "updatedAt": "2022-07-04T08:28:55Z",
                          "publishedAt": "2022-02-24T20:17:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compile and Test Moose Issue",
          "author": {
            "login": "npaloskey"
          },
          "bodyText": "I keep getting: \"TestHarness\" requires python version 3.6 or greater, version 2.7 is being used.\" When attempting to do:\n./ run_tests -j4\nWhen checking my version of of python in the shell using: python --version, it outputs Python 3.6.8.\nNot sure what the issue here is. Any suggestions?\nNote: I'm attempting to install moose on a job-scheduling environment and have been following the HPC Cluster installation guide as instructed by my research supervisor. I've had no issues up until this point.\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/20391",
          "updatedAt": "2022-08-25T00:01:21Z",
          "publishedAt": "2022-02-24T04:37:42Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDid you alias python?\nIs the python2 folder earlier than the python3 one in your PATH environment variable?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20391#discussioncomment-2241338",
                  "updatedAt": "2022-08-25T00:01:25Z",
                  "publishedAt": "2022-02-24T05:11:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "npaloskey"
                          },
                          "bodyText": "Hi, I didn't use an alias. Instead, my supervisor had told me to use \"module load\" in my .bash_profile. Below is what is currently in the\n.bash_profile:\nUser specific environment and startup programs\nPATH=$PATH:$HOME/bin\nexport PATH\nmodule load gcc/8.3.1 mpich/3.2 cmake/3.18.4 python/3.6.8\nsource $HOME/.moose_profile\nWhen returning to my home directory, I can run: \"module list\" and it outputs the following:\nCurrently Loaded Modules:\n\ngcc/8.3.1   2) mpich/3.2   3) cmake/3.18.4   4) python/3.6.8\n\nI believe that the default python version for my system is 2.7 but I believe activating the above python module does change the version of python being used every time I open the shell.\nThanks for the quick reply!",
                          "url": "https://github.com/idaholab/moose/discussions/20391#discussioncomment-2241373",
                          "updatedAt": "2022-08-25T00:01:31Z",
                          "publishedAt": "2022-02-24T05:20:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "npaloskey"
                          },
                          "bodyText": "Hey Giud,\nI saw an earlier discussion in this thread addressing what sounds like the same problem I'm having currently. I changed the shebang in moose/test/run_tests to #!/usr/bin/env python3 and the it seems like most of the tests passed. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/20391#discussioncomment-2241691",
                          "updatedAt": "2022-08-25T00:01:41Z",
                          "publishedAt": "2022-02-24T06:38:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "nice glad you got it going",
                          "url": "https://github.com/idaholab/moose/discussions/20391#discussioncomment-2241858",
                          "updatedAt": "2022-08-25T00:01:41Z",
                          "publishedAt": "2022-02-24T07:13:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "npaloskey"
                  },
                  "bodyText": "Change the shebang in moose/test/run_tests to #!/usr/bin/env python3 and the tests should pass",
                  "url": "https://github.com/idaholab/moose/discussions/20391#discussioncomment-2244816",
                  "updatedAt": "2022-08-25T00:01:53Z",
                  "publishedAt": "2022-02-24T15:26:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Missing rendering in ParaView? Exodus output corrupted?",
          "author": {
            "login": "mangerij"
          },
          "bodyText": "Hi,\nI am looking at the exodus outputs of a time-dependent simulation in ParaView v5.9.0. At some point yesterday, I got a strange error that printed to the terminal during a MOOSE simulation, killed the simulation, and now every simulation does not visualize properly. I did not save the exact error but I noticed something similar about a month ago. That error is attached in this screenshot:\n\nI am unsure that this is related to the visualization issues, but after this error I was unable to recompile without first using git clean -xfd\nAs for the visualization, I see the variables at time step 0, but they get cut off somehow after. See the two images below.\n\n\nI verified this on two different machines that both have ParaView v5.9.0. Another wrinkle to this puzzle is that the exodus outputs from the cluster from the same version of MOOSE/Ferret can be visualized correctly in both installed ParaView applications.\nI am worried something got corrupted somehow but I have done a complete recompile and still have the same problem.\nthanks",
          "url": "https://github.com/idaholab/moose/discussions/20381",
          "updatedAt": "2022-07-12T04:34:41Z",
          "publishedAt": "2022-02-23T14:37:38Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "Can you run this in dbg and get us a backtrace on that MPI assertion?",
                  "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237094",
                  "updatedAt": "2022-07-12T04:35:29Z",
                  "publishedAt": "2022-02-23T14:55:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "Well the error doesn't show up anymore! I do not know how to trigger it.\nI have only seen it twice, once yesterday and once a month ago (where the screenshot is).",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237127",
                          "updatedAt": "2022-07-12T04:35:29Z",
                          "publishedAt": "2022-02-23T14:59:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Can you paste the contents of conda list?",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237154",
                          "updatedAt": "2022-07-12T04:35:29Z",
                          "publishedAt": "2022-02-23T15:04:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       1_gnu    conda-forge\n_sysroot_linux-64_curr_repodata_hack 3                   h5bd9786_13    conda-forge\nalsa-lib                  1.2.3                h516909a_0    conda-forge\nappdirs                   1.4.4              pyh9f0ad1d_0    conda-forge\nbeautifulsoup4            4.9.3              pyhb0f4dca_0    conda-forge\nbinutils_impl_linux-64    2.35.1               h193b22a_2    conda-forge\nbinutils_linux-64         2.35                hc3fd857_29    conda-forge\nblosc                     1.21.0               h9c3ff4c_0    conda-forge\nbrotli                    1.0.9                h7f98852_5    conda-forge\nbrotli-bin                1.0.9                h7f98852_5    conda-forge\nbrotlipy                  0.7.0           py39h3811e60_1001    conda-forge\nbrunsli                   0.1                  h9c3ff4c_0    conda-forge\nbzip2                     1.0.8                h7f98852_4    conda-forge\nc-ares                    1.18.1               h7f8727e_0\nca-certificates           2021.10.8            ha878542_0    conda-forge\ncertifi                   2021.10.8        py39hf3d152e_1    conda-forge\ncffi                      1.14.6           py39he32792d_0    conda-forge\ncfitsio                   3.470                hb418390_7    conda-forge\ncharls                    2.2.0                h9c3ff4c_0    conda-forge\ncharset-normalizer        2.0.12             pyhd8ed1ab_0    conda-forge\nclang                     12.0.1               ha770c72_0    conda-forge\nclang-12                  12.0.1          default_ha53f305_0    conda-forge\nclang-tools               12.0.1          default_ha53f305_0    conda-forge\nclangxx                   12.0.1          default_ha53f305_0    conda-forge\ncloudpickle               2.0.0              pyhd8ed1ab_0    conda-forge\ncmake                     3.22.1               h1fce559_0\ncryptography              35.0.0           py39hbca0aa6_0    conda-forge\ncurl                      7.80.0               h7f8727e_0\ncycler                    0.11.0             pyhd8ed1ab_0    conda-forge\ncytoolz                   0.11.0           py39h3811e60_3    conda-forge\ndask-core                 2022.2.0           pyhd8ed1ab_0    conda-forge\ndbus                      1.13.6               h48d8840_2    conda-forge\ndeepdiff                  5.5.0              pyhd8ed1ab_0    conda-forge\ndouble-conversion         3.1.5                he1b5a44_2    conda-forge\neigen                     3.3.9                h4bd325d_1    conda-forge\nexpat                     2.4.1                h9c3ff4c_0    conda-forge\nffmpeg                    4.3.2                hca11adc_0    conda-forge\nfontconfig                2.13.1            hba837de_1005    conda-forge\nfreetype                  2.10.4               h0708190_1    conda-forge\nfsspec                    2022.1.0           pyhd8ed1ab_0    conda-forge\ngcc_impl_linux-64         9.3.0               h70c0ae5_19    conda-forge\ngcc_linux-64              9.3.0               h7247604_29    conda-forge\ngettext                   0.19.8.1          h0b5b191_1005    conda-forge\ngfortran_impl_linux-64    9.3.0               hc4a2995_19    conda-forge\ngfortran_linux-64         9.3.0               ha1c937c_29    conda-forge\ngiflib                    5.2.1                h36c2ea0_2    conda-forge\ngl2ps                     1.4.2                h0708190_0    conda-forge\nglew                      2.1.0                h9c3ff4c_2    conda-forge\nglib                      2.68.3               h9c3ff4c_0    conda-forge\nglib-tools                2.68.3               h9c3ff4c_0    conda-forge\ngmp                       6.2.1                h58526e2_0    conda-forge\ngmpy2                     2.1.0b5          py39h78fa15d_0    conda-forge\ngnutls                    3.6.13               h85f3911_1    conda-forge\ngst-plugins-base          1.18.4               hf529b03_2    conda-forge\ngstreamer                 1.18.4               h76c114f_2    conda-forge\ngxx_impl_linux-64         9.3.0               hd87eabc_19    conda-forge\ngxx_linux-64              9.3.0               h0d07fa4_29    conda-forge\nhdf4                      4.2.15               h10796ff_3    conda-forge\nhdf5                      1.10.6          nompi_h6a2412b_1114    conda-forge\nicu                       68.1                 h58526e2_0    conda-forge\nidna                      3.3                pyhd8ed1ab_0    conda-forge\nimagecodecs               2021.6.8         py39h44211f0_0    conda-forge\nimageio                   2.3.0                      py_1    conda-forge\nimportlib-metadata        4.11.1           py39hf3d152e_0    conda-forge\nimportlib_metadata        4.11.1               hd8ed1ab_0    conda-forge\njbig                      2.1               h7f98852_2003    conda-forge\njinja2                    3.0.1              pyhd8ed1ab_0    conda-forge\njpeg                      9d                   h516909a_0    conda-forge\njsoncpp                   1.9.4                h4bd325d_3    conda-forge\njsonpickle                2.1.0              pyhd8ed1ab_0    conda-forge\njxrlib                    1.1                  h7f98852_2    conda-forge\nkernel-headers_linux-64   3.10.0              h4a8ded7_13    conda-forge\nkiwisolver                1.3.1            py39h1a9c180_1    conda-forge\nkrb5                      1.19.2               hcc1bbae_0    conda-forge\nlame                      3.100             h7f98852_1001    conda-forge\nlatexcodec                2.0.1              pyh9f0ad1d_0    conda-forge\nlcms2                     2.12                 hddcbb42_0    conda-forge\nld_impl_linux-64          2.35.1               hea4e1c9_2    conda-forge\nlerc                      2.2.1                h9c3ff4c_0    conda-forge\nlibaec                    1.0.5                h9c3ff4c_0    conda-forge\nlibblas                   3.9.0           11_linux64_openblas    conda-forge\nlibbrotlicommon           1.0.9                h7f98852_5    conda-forge\nlibbrotlidec              1.0.9                h7f98852_5    conda-forge\nlibbrotlienc              1.0.9                h7f98852_5    conda-forge\nlibcblas                  3.9.0           11_linux64_openblas    conda-forge\nlibclang                  11.1.0          default_ha53f305_1    conda-forge\nlibclang-cpp12            12.0.1          default_ha53f305_0    conda-forge\nlibcurl                   7.80.0               h0b77cf5_0\nlibdeflate                1.7                  h7f98852_5    conda-forge\nlibdrm-cos7-x86_64        2.4.97            h9b0a68f_1105    conda-forge\nlibedit                   3.1.20191231         he28a2e2_2    conda-forge\nlibev                     4.33                 h516909a_1    conda-forge\nlibevent                  2.1.10               hcdb4288_3    conda-forge\nlibffi                    3.3                  h58526e2_2    conda-forge\nlibgcc-devel_linux-64     9.3.0               h7864c58_19    conda-forge\nlibgcc-ng                 9.3.0               h2828fa1_19    conda-forge\nlibgfortran-ng            9.4.0               h69a702a_11    conda-forge\nlibgfortran5              9.4.0               h62347ff_11    conda-forge\nlibglib                   2.68.3               h3e27bee_0    conda-forge\nlibglu                    9.0.0             hf484d3e_1000    conda-forge\nlibglvnd-cos7-x86_64      1.0.1             h9b0a68f_1105    conda-forge\nlibglvnd-glx-cos7-x86_64  1.0.1             h9b0a68f_1105    conda-forge\nlibgomp                   9.3.0               h2828fa1_19    conda-forge\nlibice-cos7-x86_64        1.0.9             h9b0a68f_1105    conda-forge\nlibice-devel-cos7-x86_64  1.0.9             h9b0a68f_1105    conda-forge\nlibiconv                  1.16                 h516909a_0    conda-forge\nliblapack                 3.9.0           11_linux64_openblas    conda-forge\nlibllvm11                 11.1.0               hf817b99_2    conda-forge\nlibllvm12                 12.0.1               hf817b99_0    conda-forge\nlibnetcdf                 4.8.0           nompi_hcd642e3_103    conda-forge\nlibnghttp2                1.46.0               hce63b2e_0\nlibogg                    1.3.4                h7f98852_1    conda-forge\nlibopenblas               0.3.17          pthreads_h8fe5266_1    conda-forge\nlibopus                   1.3.1                h7f98852_1    conda-forge\nlibpng                    1.6.37               hed695b0_2    conda-forge\nlibpq                     13.3                 hd57d9b9_0    conda-forge\nlibsm-cos7-x86_64         1.2.2             h9b0a68f_1105    conda-forge\nlibsm-devel-cos7-x86_64   1.2.2             h9b0a68f_1105    conda-forge\nlibssh2                   1.9.0                ha56f1ee_6    conda-forge\nlibstdcxx-devel_linux-64  9.3.0               hb016644_19    conda-forge\nlibstdcxx-ng              11.2.0              he4da1e4_12    conda-forge\nlibtheora                 1.1.1             h7f98852_1005    conda-forge\nlibtiff                   4.3.0                hf544144_1    conda-forge\nlibuuid                   2.32.1            h7f98852_1000    conda-forge\nlibuv                     1.42.0               h7f98852_0    conda-forge\nlibvorbis                 1.3.7                h9c3ff4c_0    conda-forge\nlibwebp-base              1.2.0                h7f98852_2    conda-forge\nlibx11-common-cos7-x86_64 1.6.7             h9b0a68f_1105    conda-forge\nlibx11-cos7-x86_64        1.6.7             h9b0a68f_1105    conda-forge\nlibx11-devel-cos7-x86_64  1.6.7             h9b0a68f_1105    conda-forge\nlibxcb                    1.13              h7f98852_1003    conda-forge\nlibxext-cos7-x86_64       1.3.3             h9b0a68f_1105    conda-forge\nlibxext-devel-cos7-x86_64 1.3.3             h9b0a68f_1105    conda-forge\nlibxkbcommon              1.0.3                he3ba5ed_0    conda-forge\nlibxml2                   2.9.12               h72842e0_0    conda-forge\nlibxslt                   1.1.33               h15afd5d_2    conda-forge\nlibxt-cos7-x86_64         1.1.5             h9b0a68f_1105    conda-forge\nlibxt-devel-cos7-x86_64   1.1.5             h9b0a68f_1105    conda-forge\nlibzip                    1.8.0                h4de3113_0    conda-forge\nlibzlib                   1.2.11            h36c2ea0_1013    conda-forge\nlibzopfli                 1.0.3                h9c3ff4c_0    conda-forge\nlivereload                2.6.3              pyh9f0ad1d_0    conda-forge\nlocket                    0.2.0                      py_2    conda-forge\nloguru                    0.5.3            py39hf3d152e_3    conda-forge\nlxml                      4.6.3            py39h107f48f_0    conda-forge\nlz4-c                     1.9.3                h9c3ff4c_1    conda-forge\nmako                      1.1.4              pyh44b312d_0    conda-forge\nmarkupsafe                2.0.1            py39h3811e60_0    conda-forge\nmatplotlib                3.4.2            py39hf3d152e_0    conda-forge\nmatplotlib-base           3.4.2            py39h2fa2bec_0    conda-forge\nmesa-khr-devel-cos7-x86_64 18.3.4            h9b0a68f_1105    conda-forge\nmesa-libgl-cos7-x86_64    18.3.4            h9b0a68f_1105    conda-forge\nmesa-libgl-devel-cos7-x86_64 18.3.4            h9b0a68f_1105    conda-forge\nmesa-libglapi-cos7-x86_64 18.3.4            h9b0a68f_1105    conda-forge\nmesalib                   18.3.1               h590aaf7_0    conda-forge\nmock                      4.0.3            py39hf3d152e_1    conda-forge\nmoose-libmesh             2022.01.19              build_2    idaholab\nmoose-libmesh-vtk         9.1.0                   build_3    idaholab\nmoose-mpich               3.4.2                   build_2    idaholab\nmoose-petsc               3.15.1                  build_6    idaholab\nmoose-tools               2022.01.25       py39hc64a412_0    idaholab\nmpc                       1.2.1                h9f54685_0    conda-forge\nmpfr                      4.1.0                h9202a9a_1    conda-forge\nmpi                       1.0                       mpich    conda-forge\nmpmath                    1.2.1              pyhd8ed1ab_0    conda-forge\nmysql-common              8.0.25               ha770c72_2    conda-forge\nmysql-libs                8.0.25               hfa10184_2    conda-forge\nncurses                   6.3                  h7f8727e_2\nnettle                    3.6                  he412f7d_0    conda-forge\nnetworkx                  2.6.3              pyhd8ed1ab_1    conda-forge\nnspr                      4.30                 h9c3ff4c_0    conda-forge\nnss                       3.67                 hb5efdd6_0    conda-forge\nnumpy                     1.21.1           py39hdbf815f_0    conda-forge\nolefile                   0.46               pyh9f0ad1d_1    conda-forge\nopenh264                  2.1.1                h780b84a_0    conda-forge\nopenjpeg                  2.4.0                hb52868f_1    conda-forge\nopenssl                   1.1.1m               h7f8727e_0\nordered-set               4.1.0              pyhd8ed1ab_0    conda-forge\npackaging                 21.3               pyhd8ed1ab_0    conda-forge\npandas                    1.3.1            py39hde0f152_0    conda-forge\npartd                     1.2.0              pyhd8ed1ab_0    conda-forge\npcre                      8.45                 h9c3ff4c_0    conda-forge\npillow                    7.2.0            py39h6f3857e_2    conda-forge\npip                       22.0.3             pyhd8ed1ab_0    conda-forge\npkg-config                0.29.2            h36c2ea0_1008    conda-forge\npooch                     1.6.0              pyhd8ed1ab_0    conda-forge\nproj                      7.2.0                h277dcde_2    conda-forge\npthread-stubs             0.4               h36c2ea0_1001    conda-forge\npugixml                   1.11.4               h9c3ff4c_0    conda-forge\npybtex                    0.24.0           py39hf3d152e_0    conda-forge\npycparser                 2.21               pyhd8ed1ab_0    conda-forge\npylatexenc                2.10               pyhd8ed1ab_0    conda-forge\npyopenssl                 22.0.0             pyhd8ed1ab_0    conda-forge\npyparsing                 3.0.7              pyhd8ed1ab_0    conda-forge\npyqt                      5.12.3           py39hf3d152e_7    conda-forge\npyqt-impl                 5.12.3           py39h0fcd23e_7    conda-forge\npyqt5-sip                 4.19.18          py39he80948d_7    conda-forge\npyqtchart                 5.12             py39h0fcd23e_7    conda-forge\npyqtwebengine             5.12.1           py39h0fcd23e_7    conda-forge\npysocks                   1.7.1            py39hf3d152e_4    conda-forge\npython                    3.9.7                h12debd9_1\npython-dateutil           2.8.2              pyhd8ed1ab_0    conda-forge\npython_abi                3.9                      2_cp39    conda-forge\npytz                      2021.3             pyhd8ed1ab_0    conda-forge\npywavelets                1.1.1            py39hce5d2b2_3    conda-forge\npyyaml                    5.4.1            py39h3811e60_0    conda-forge\nqt                        5.12.9               hda022c4_4    conda-forge\nreadline                  8.1                  h46c0cb4_0    conda-forge\nrequests                  2.27.1             pyhd8ed1ab_0    conda-forge\nrhash                     1.4.1                h7f98852_0    conda-forge\nscikit-image              0.18.2           py39hde0f152_0    conda-forge\nscipy                     1.7.0            py39hee8e79c_1    conda-forge\nsetuptools                59.8.0           py39hf3d152e_0    conda-forge\nsix                       1.16.0             pyh6c4a22f_0    conda-forge\nsnappy                    1.1.8                he1b5a44_3    conda-forge\nsoupsieve                 2.3.1              pyhd8ed1ab_0    conda-forge\nsqlite                    3.37.2               hc218d9a_0\nsympy                     1.9              py39hf3d152e_0    conda-forge\nsysroot_linux-64          2.17                h4a8ded7_13    conda-forge\ntbb                       2020.3               hfd86e86_0\ntbb-devel                 2020.3               hfd86e86_0\ntifffile                  2021.7.2           pyhd8ed1ab_0    conda-forge\ntk                        8.6.11               h21135ba_0    conda-forge\ntoolz                     0.11.2             pyhd8ed1ab_0    conda-forge\ntornado                   6.1              py39h3811e60_1    conda-forge\ntzdata                    2021e                he74cb21_0    conda-forge\nurllib3                   1.26.8             pyhd8ed1ab_1    conda-forge\nutfcpp                    3.2.1                ha770c72_0    conda-forge\nvtk                       9.0.3           no_osmesa_py39h801044d_100    conda-forge\nwheel                     0.37.1             pyhd8ed1ab_0    conda-forge\nx264                      1!161.3030           h7f98852_1    conda-forge\nxorg-kbproto              1.0.7             h7f98852_1002    conda-forge\nxorg-libice               1.0.10               h7f98852_0    conda-forge\nxorg-libsm                1.2.3             hd9c2040_1000    conda-forge\nxorg-libx11               1.7.2                h7f98852_0    conda-forge\nxorg-libxau               1.0.9                h7f98852_0    conda-forge\nxorg-libxdmcp             1.1.3                h7f98852_0    conda-forge\nxorg-libxext              1.3.4                h7f98852_1    conda-forge\nxorg-libxt                1.2.1                h7f98852_2    conda-forge\nxorg-x11-proto-devel-cos7-x86_64 2018.4            h9b0a68f_1105    conda-forge\nxorg-xextproto            7.3.0             h7f98852_1002    conda-forge\nxorg-xproto               7.0.31            h7f98852_1007    conda-forge\nxz                        5.2.5                h516909a_1    conda-forge\nyaml                      0.2.5                h516909a_0    conda-forge\nzfp                       0.5.5                h9c3ff4c_5    conda-forge\nzipp                      3.7.0              pyhd8ed1ab_1    conda-forge\nzlib                      1.2.11            h36c2ea0_1013    conda-forge\nzstd                      1.5.0                ha95c52a_0    conda-forge",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237214",
                          "updatedAt": "2022-07-12T04:35:29Z",
                          "publishedAt": "2022-02-23T15:14:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "Yep... as I expected: mpich 3.4.2 (upgraded recently from 3.3.2). I've seen similar errors on rare occasion on our build boxes. We'll see what we can do, but this is a hard one to nail down. If it happens to you again please keep the error trace and post here!\nPing @idaholab/moose-dev-ops and @roystgnr  for notifications",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237239",
                          "updatedAt": "2022-07-12T04:35:46Z",
                          "publishedAt": "2022-02-23T15:18:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is this exodus or nemesis output?",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237269",
                          "updatedAt": "2022-07-12T04:35:46Z",
                          "publishedAt": "2022-02-23T15:24:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "I am looking at the exodus outputs",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237385",
                          "updatedAt": "2022-07-12T04:35:46Z",
                          "publishedAt": "2022-02-23T15:39:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "Do you think the mpi issue and the Exodus output one is related? Would a complete rewipe of the MOOSE folder and recompile fix it?",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237422",
                          "updatedAt": "2022-07-12T04:35:46Z",
                          "publishedAt": "2022-02-23T15:45:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "I'm not sure, that was the more interesting issue here. Looks like the MPI assertion was hit during Jacobian evaluation, yet you have cruddy output (executed at a very different stage)... nonetheless I don't think a build cleaning is going to do you any good here. I think this is either an mpich issue or an issue with TIMPI (our MPI wrapper), with my suspicion leading me to the former.",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237442",
                          "updatedAt": "2022-07-12T04:35:47Z",
                          "publishedAt": "2022-02-23T15:48:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "well what bothers me is that this (the visualization issue) seem to just come from nowhere. This has been running more or less OK for the past two months and I reguarly have to look at the exodus outputs.\nI have Ferret/MOOSE one two different clusters and they give the ok outputs that can be visualized but my local workstation is a no. I am wondering if our IT admin maybe updated something that could cause this too. These things sometimes run silently in the background even when I am running simulations",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237519",
                          "updatedAt": "2022-07-12T04:36:00Z",
                          "publishedAt": "2022-02-23T15:56:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is it a temporary solution to downgrade mpich?",
                          "url": "https://github.com/idaholab/moose/discussions/20381#discussioncomment-2237525",
                          "updatedAt": "2022-07-12T04:36:03Z",
                          "publishedAt": "2022-02-23T15:58:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to get the direction-dependent material properties?",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Hi MOOSEers,\nWhen I try to use direction-dependent material properties like the form below, how can I calculate the angle of the normal vector w.r.t the x/y-axis and get direction (\\phi) here ? Is there anything related on it? I appreciate any suggestions and help.Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/20312",
          "updatedAt": "2022-06-11T13:16:26Z",
          "publishedAt": "2022-02-15T22:02:29Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhen you solve the equation do you always evaluate the property on the X/Y/Z axis or can it be any direction?\nWe usually represent anisotropy with a tensor material property\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2234008",
                  "updatedAt": "2022-06-11T13:16:28Z",
                  "publishedAt": "2022-02-23T06:51:08Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Hi~\nIf I want to get \\phi here, I need to compute the projection on X/Y/Z, am I right?\nCould you refer me to the tensor material property you mentioned? I'm interested in it and want to see how it works. Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2235352",
                          "updatedAt": "2022-06-11T13:16:27Z",
                          "publishedAt": "2022-02-23T11:03:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Here's an example of a rank two (matrix) tensor property\nhttps://mooseframework.inl.gov/source/materials/ADGenericFunctionRankTwoTensor.html\nIf there is no cross terms you can also just use a vector.\nSo to compute phi in your case, it seems D (is it a variable?) 's gradient should be passed to the material property (using coupledGradient).\nThen e2 and e1 are fixed I imagine, so computing phi should be ok.\nG is going to be a material property? Or is the equation you pasted the equation for the non linear system you're trying to solve?",
                          "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2237349",
                          "updatedAt": "2022-06-11T13:16:28Z",
                          "publishedAt": "2022-02-23T15:34:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thank you. I'll look into that page. @GiudGiud\nYes, e1 and e2 is the unit vector of X/Y axis, D is the variable and Gc is the material property which I want it to be \\phi-dependent.\nI tried to calculate the D's gradient and use Gc directly in the kernel (with AD) as follows:\n\nADRealVectorValue x_unit = RealVectorValue(1,0,0);\nADRealVectorValue y_unit = RealVectorValue(0,1,0);\nADReal x_Projection =   _grad_u[_qp] * x_unit;\nADReal y_Projection =   _grad_u[_qp] * y_unit;\nADReal theta = std::atan2(y_Projection, x_Projection) - pi/2 ;\nreturn _Gc[_qp] * std::sin(theta) * ...\n\n\nIt compiles but I'm not sure of it. Could you help me check that? Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2237575",
                          "updatedAt": "2022-06-11T13:16:30Z",
                          "publishedAt": "2022-02-23T16:04:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Looks fine to me.\nYou can initialize x_unit and y_unit like this:\nRealVectorValue x_unit(1.0, 0.0, 0.0);",
                          "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2237631",
                          "updatedAt": "2022-06-11T18:00:34Z",
                          "publishedAt": "2022-02-23T16:09:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thank you. I'll give it a try.\nBests.",
                          "url": "https://github.com/idaholab/moose/discussions/20312#discussioncomment-2237667",
                          "updatedAt": "2022-06-11T18:00:34Z",
                          "publishedAt": "2022-02-23T16:13:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compile issue",
          "author": {
            "login": "mangerij"
          },
          "bodyText": "I routinely updated conda and pulled new MOOSE and now I am getting the following error:\n/home/LIST/mangeri/anaconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: warning: libtimpi_opt.so.6, needed by /home/LIST/mangeri/projects/moose/framework/contrib/pcre/libpcre-opt.so, not found (try using -rpath or -rpath-link)\nWhat could this be from?\nthanks",
          "url": "https://github.com/idaholab/moose/discussions/20366",
          "updatedAt": "2022-08-23T22:04:53Z",
          "publishedAt": "2022-02-22T18:29:18Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nJust a leftover compiled object.\ntry make clobberall and if it doesnt work, commit all your work then run git clean -xfd in the root directory of MOOSE\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20366#discussioncomment-2231073",
                  "updatedAt": "2022-08-23T22:05:07Z",
                  "publishedAt": "2022-02-22T18:56:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "Thanks, the second command worked to solve this issue.",
                          "url": "https://github.com/idaholab/moose/discussions/20366#discussioncomment-2236820",
                          "updatedAt": "2022-08-23T22:05:07Z",
                          "publishedAt": "2022-02-23T14:38:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Modeling the viscoelastic-wave equation in frequency domain",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nLet's assume we have a complex vector field (displacements) u = u_r+i*u_i where u_r is a vector containing the real parts of u and u_i is a vector containing imaginary parts of u, and i=sqrt(-1) .\nThe elastic wave equation in the frequency domain can be described as:\n\u03c1\u03c9^2 u_r=\u2207.\u03c3_r (1)\n\u03c1\u03c9^2 u_i=\u2207.\u03c3_i  (2)\n\nIn that case, the real and imaginary parts of u were uncoupled everywhere except on the boundaries (only if we have absorbing boundary conditions). I could model those equations within moose, where the kernel is as follows:\n[Kernels]\n    [urealx]\n        type = StressDivergenceTensors\n        variable = uxr\n        displacements='uxr uyr'\n        component = 0\n        base_name = real\n        volumetric_locking_correction=True\n    []\n    [urealy]\n        type = StressDivergenceTensors\n        variable = uyr\n        displacements='uxr uyr'\n        component = 1\n        base_name = real\n        volumetric_locking_correction=True\n    []\n    [uimagx]\n        type = StressDivergenceTensors\n        variable = uxi\n        displacements='uxi uyi'\n        component = 0\n        base_name = imaginary\n        volumetric_locking_correction=True\n    []\n    [uimagy]\n        type = StressDivergenceTensors\n        variable = uyi\n        displacements='uxi uyi'\n        component = 1\n        base_name = imaginary\n        volumetric_locking_correction=True\n    []\n    [reaction_realx]\n        type = Reaction\n        variable = uxr\n        rate = ${fparse -omega*omega} \n    []\n    [reaction_realy]\n        type = Reaction\n        variable = uyr\n        rate = ${fparse -omega*omega} \n    []\n    [reaction_imagx]\n        type = Reaction\n        variable = uxi\n        rate = ${fparse -omega*omega} \n    []\n    [reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = ${fparse -omega*omega} \n    []\n[]\n\nNow, I need to add the viscoelasticity to the model, where the elasticity tensor is no longer real-valued, eg. E = E_r + i\u03c9E_i. Thus, equations (1) and (2) turn to be:\n\u03c1\u03c9^2 u_r=\u2207.\u03c3_rr - \u2207.\u03c3_ii   (3)\n\u03c1\u03c9^2 u_i=\u2207.\u03c3_ir + \u2207.\u03c3_ri  (4)\n\nwith \u03c3_rr is the stress associated with the real part of the elasticity tensor E_r and the real part of the displacement u_r, and \u03c3_ir is the stresses associated with the imaginary part of the elasticity tensor E_i and the real part of the displacement u_r, and vice-versa.\nSo, the question now is, Can I model equations (3) and (4) in moose?\nAny thoughts will be appreciated.",
          "url": "https://github.com/idaholab/moose/discussions/20266",
          "updatedAt": "2022-06-18T06:10:08Z",
          "publishedAt": "2022-02-09T21:27:05Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou need to have a kernel that does the same work as a stressDivergenceTensor (except for the sign), but with a variable that is not the same as the equation name.\nWhat prevents you from using that one directly is the variable argument is both:\n\nwhat gets put through the divergence to compute the contribution to the residual/jacobian\nthe name of the equation that this term gets added to\n\nSo unless this already exists (@jiangwen84 do you know?), you ll just need to add an argument to this kernel to allow an arbitrary variable v to be used in the computation (and if v is not provided, then default to using variable).\nEDIT: I m actually not sure this isnt already supported. Would just specifying:\n        variable = uxr\n        displacements='uxi uyi'\n\nnot work?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2151696",
                  "updatedAt": "2022-06-18T06:10:21Z",
                  "publishedAt": "2022-02-10T17:42:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also are there two displaced meshes? Or are all the equations written for the undisplaced mesh?",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2151746",
                          "updatedAt": "2022-06-18T06:10:22Z",
                          "publishedAt": "2022-02-10T17:50:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "also are there two displaced meshes? Or are all the equations written for the undisplaced mesh?\n\nThe equations are for undisplaced mesh.\n\nEDIT: I m actually not sure this isnt already supported. Would just specifying:\n\nThanks for the suggestion, I will try this and get back to you.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2152216",
                          "updatedAt": "2022-06-18T06:10:22Z",
                          "publishedAt": "2022-02-10T19:06:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "EDIT: I m actually not sure this isnt already supported. Would just specifying:\n        variable = uxr\n        displacements='uxi uyi'\n\nnot work?\n\nHi,\nI have tried that option, please see the definition of the kernel and the materials. So, it is a 2D mesh that represents a cantilever, fixed on the left and imposed unit Dirichlet B.C on the right.\n[Kernels]\n    [urealx_r] # the (real_r) means that stress inteded to be computed is sigma_rr\n    type = StressDivergenceTensors\n    variable = uxr\n    displacements='uxr uyr'\n    component = 0\n    base_name = real\n    []\n    [urealx_i] #the (real_i) means that stress inteded to be computed is sigma_ri\n    type = StressDivergenceTensors\n    variable = uxr\n    displacements='uxi uyi'\n    component = 0\n    base_name = real #do I need to change the material??\n    []    \n    [urealy_r]\n    type = StressDivergenceTensors\n    variable = uyr\n    displacements='uxr uyr'\n    component = 1\n    base_name = real\n    []\n    [urealy_i]\n    type = StressDivergenceTensors\n    variable = uyr\n    displacements='uxi uyi'\n    component = 1\n    base_name = real\n    []    \n    [uimagx_i]\n    type = StressDivergenceTensors\n    variable = uxi\n    displacements='uxi uyi'\n    component = 0\n    base_name = imaginary\n    []\n    [uimagx_r]\n    type = StressDivergenceTensors\n    variable = uxi\n    displacements='uxr uyr'\n    component = 0\n    base_name = imaginary\n    []    \n    [uimagy_i]\n    type = StressDivergenceTensors\n    variable = uyi\n    displacements='uxi uyi'\n    component = 1\n    base_name = imaginary\n    []\n    [uimagy_r]\n    type = StressDivergenceTensors\n    variable = uyi\n    displacements='uxr uyr'\n    component = 1\n    base_name = imaginary\n    []    \n    [reaction_realx]\n        type = Reaction\n        variable = uxr\n        rate = -10000\n    []\n    [reaction_realy]\n        type = Reaction\n        variable = uyr\n        rate = -10000\n    []\n    [reaction_imagx]\n        type = Reaction\n        variable = uxi\n        rate = -10000\n    []\n    [reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = -10000\n    []\n\n[]\n\nMaterials]\n\n  [elasticity_tensor_A]\n    type = ComputeIsotropicElasticityTensor\n    base_name = real\n    youngs_modulus = 1\n    poissons_ratio = 0.0\n  []\n  [strain_A]\n    type = ComputePlaneSmallStrain\n    base_name = real\n    displacements='uxr uyr'\n  []\n  [stress_A]\n    type = ComputeLinearElasticStress\n    base_name = real\n  []\n\n   [elasticity_tensor_B]\n    type = ComputeIsotropicElasticityTensor\n    base_name = imaginary\n    youngs_modulus = 0.1\n    poissons_ratio = 0.0\n  []\n  [strain_B]\n    type = ComputePlaneSmallStrain\n    base_name = imaginary\n    displacements='uxi uyi'\n  []\n  [stress_B]\n    type = ComputeLinearElasticStress\n    base_name = imaginary\n  []\n\n[]\n\nGiven this input, I am not getting the expected solution, which I am not sure about the reason for getting this, is it because of the -ve sign in equation (3), or incorrect modeling, or both.\nOne thing that I am wondering, Do I have modify the base name in the kernel definition in one way or another? And, is there a way that I can try to include the -ve sign in the kernel definition?, just to try your idea.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2161085",
                          "updatedAt": "2022-06-18T06:10:22Z",
                          "publishedAt": "2022-02-11T23:55:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You could add a boolean parameter to this kernel just to allow the switching of signs.\nI dont think you need to modify the base name.\nI have not checked the kernel definition in detail btw, this is really just a try.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2169644",
                          "updatedAt": "2022-09-01T17:14:52Z",
                          "publishedAt": "2022-02-13T23:46:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "You could add a boolean parameter to this kernel just to allow the switching of signs.\nI dont think you need to modify the base name.\nI have not checked the kernel definition in detail btw, this is really just a try.\n\nThanks for the suggestion, I will do that.\nOne question, is it possible to define the youngs_modulus with the -ve sign? I wanted to push the sign in the elasticity tensor. I have tried  it but it returned an error (which makes sense).  I know it is not the optimum way of doing it, but I was just thinking of the easiest way to do it.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2170268",
                          "updatedAt": "2022-09-01T17:14:53Z",
                          "publishedAt": "2022-02-14T03:15:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Hi, @GiudGiud\nI have done several trials to use the StressDivergenceTensors kernels to model the former equations, (3) and (4) with no success. As you have suggested, I have added a boolean parameter to switch the sign of the stress divergence kernel. Also, based on what I have understood from the code, \"displacements\" is an array of coupled variables. Thus, I have considered this when writing my inputs. The input Kernel, Material  and Executioner definitions that I believe \"may\" make sense are as follow:\n[Kernels]\n    [urealx_r] #sigma_rr\n    type = StressDivergenceTensors\n    variable = uxr\n    displacements='uxr uyr'\n    component = 0\n    base_name = real\n    []\n    [urealy_r]\n    type = StressDivergenceTensors\n    variable = uyr\n    displacements='uxr uyr'\n    component = 1\n    base_name = real\n    []  \n#2\n    [uimagx_i] # (-ve)sigma_ii\n    type = StressDivergenceTensors\n    variable = uxr\n    displacements='uxi uyi'\n    component = 0\n    base_name = imaginary\n    negative_stress_divergence='true' #a parameter to negate the stressdivergence term\n    []\n    [uimagy_i]\n    type = StressDivergenceTensors\n    variable = uyr\n    displacements='uxi uyi'\n    component = 1\n    base_name = imaginary\n    negative_stress_divergence='true'\n    [] \n#3\n    [urealx_i] #sigma_ri\n    type = StressDivergenceTensors\n    variable = uxi\n    displacements='uxr uyr'\n    component = 0\n    base_name = real_i \n    []   \n    [urealy_i]\n    type = StressDivergenceTensors\n    variable = uyi\n    displacements='uxr uyr'\n    component = 1\n    base_name = real_i\n    []  \n#4\n    [uimagx_r]#sigma_ir\n    type = StressDivergenceTensors\n    variable = uxi\n    displacements='uxi uyi'\n    component = 0\n    base_name = imaginary_r\n    []        \n    [uimagy_r]\n    type = StressDivergenceTensors\n    variable = uyi\n    displacements='uxi uyi'\n    component = 1\n    base_name = imaginary_r\n    []\n #reaction terms              \n    [reaction_realx]\n        type = Reaction\n        variable = uxr\n        rate = -10000\n    []\n    [reaction_realy]\n        type = Reaction\n        variable = uyr\n        rate = -10000\n    []\n    [reaction_imagx]\n        type = Reaction\n        variable = uxi\n        rate = -10000\n    []\n    [reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = -10000\n    []\n[]\n\n[Materials]\n\n  [elasticity_tensor_real]\n    type = ComputeIsotropicElasticityTensor\n    base_name = real\n    youngs_modulus = 1\n    poissons_ratio = 0.0\n  []\n  [strain_real]\n    type = ComputePlaneSmallStrain\n    base_name = real\n    displacements='uxr uyr'\n  []\n  [stress_real]\n    type = ComputeLinearElasticStress\n    base_name = real\n  []\n  [elasticity_tensor_real_i]\n    type = ComputeIsotropicElasticityTensor\n    base_name = real_i\n    youngs_modulus = 0.1\n    poissons_ratio = 0.0\n  []\n  [strain_real_i]\n    type = ComputePlaneSmallStrain\n    base_name = real_i\n    displacements='uxr uyr'\n  []\n  [stress_real_i]\n    type = ComputeLinearElasticStress\n    base_name = real_i\n  []\n    [elasticity_tensor_imaginary]\n    type = ComputeIsotropicElasticityTensor\n    base_name = imaginary\n    youngs_modulus = 0.1\n    poissons_ratio = 0.0\n  []\n  [strain_imaginary]\n    type = ComputePlaneSmallStrain\n    base_name = imaginary\n    displacements='uxi uyi'\n  []\n  [stress_imaginary]\n    type = ComputeLinearElasticStress\n    base_name = imaginary\n  []\n   [elasticity_tensor_imaginary_r]\n    type = ComputeIsotropicElasticityTensor\n    base_name = imaginary_r\n    youngs_modulus = 1\n    poissons_ratio = 0.0\n  []\n  [strain_imaginary_r]\n    type = ComputePlaneSmallStrain\n    base_name = imaginary_r\n    displacements='uxi uyi'\n  []\n  [stress_imaginary_r]\n    type = ComputeLinearElasticStress\n    base_name = imaginary_r\n  []\n\n[]\n\n[Executioner]\n  type = Steady\n  solve_type=LINEAR   \n petsc_options_iname = ' -pc_type'\n petsc_options_value = 'lu'\n[]\n\nThe real and imaginary parts of x-displacements using that input are as follow:\n\nWhere the expected solution should be something like this:\n\nSo, I have a couple of questions regarding this,\n1- Am I understanding the code correctly with respect to the \"displacements\" array? are these the test functions? if yes, is the input above correct?\n2- Do you think this way of coupling may not be achieved correctly through the StressDiverenceTensors and some other kernels e.g. Diffusion, may be better?",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2208377",
                          "updatedAt": "2022-09-01T17:14:53Z",
                          "publishedAt": "2022-02-19T01:26:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The displacements parameter is usually just that, a measure of how the mesh deformed.\nSo changing the base_name already made sure you used the right stress tensor.\nI'm actually wondering if changing the displacements was necessary/a good idea. I dont quite understand what this kernel is doing with regards to displacements, so if you do you should look at StressDivergenceTensors::computeQpOffDiagJacobian(unsigned int jvar)  to see how the displacements should be set.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2222600",
                          "updatedAt": "2022-09-01T17:14:53Z",
                          "publishedAt": "2022-02-21T16:48:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I tried to write an input file, and the solution looks correct:\n\nI am pasting my input file below, please compare it with yours to see what you were missing. I think you were very close. I modified the StressDivergenceTensors to take a coefficient so that I could control its sign, which is similar to your boolean parameter.\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  xmin = 0\n  xmax = 1\n  nx = 1000\n[]\n\n[Variables]\n  [ui]\n  []\n  [ur]\n  []\n[]\n\n[BCs]\n  [left_real]\n    type = DirichletBC\n    variable = ur\n    value = 0\n    boundary = left\n  []\n  [left_imaginery]\n    type = DirichletBC\n    variable = ui\n    value = 0\n    boundary = left\n  []\n  [right_real]\n    type = DirichletBC\n    variable = ur\n    value = 1\n    boundary = right\n  []\n  [right_imaginery]\n    type = DirichletBC\n    variable = ui\n    value = 0\n    boundary = right\n  []\n[]\n\n[Kernels]\n  [real_rr]\n    type = StressDivergenceTensors\n    variable = ur\n    displacements = 'ur'\n    component = 0\n    base_name = rr\n    coefficient = 1\n  []\n  [real_ii]\n    type = StressDivergenceTensors\n    variable = ur\n    displacements = 'ui'\n    component = 0\n    base_name = ii\n    coefficient = -1\n  []\n  [real_reaction]\n    type = MatReaction\n    variable = ur\n    mob_name = w\n  []\n  [imaginery_ir]\n    type = StressDivergenceTensors\n    variable = ui\n    displacements = 'ur'\n    component = 0\n    base_name = ir\n    coefficient = 1\n  []\n  [imaginery_ri]\n    type = StressDivergenceTensors\n    variable = ui\n    displacements = 'ui'\n    component = 0\n    base_name = ri\n    coefficient = 1\n  []\n  [imaginery_reaction]\n    type = MatReaction\n    variable = ui\n    mob_name = w\n  []\n[]\n\n[Materials]\n  [bulk]\n    type = GenericFunctionMaterial\n    prop_names = 'w'\n    prop_values = '10000'\n  []\n  [E_rr]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1\n    poissons_ratio = 0.0\n    base_name = rr\n  []\n  [E_ri]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1\n    poissons_ratio = 0.0\n    base_name = ri\n  []\n  [E_ir]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 0.1\n    poissons_ratio = 0.0\n    base_name = ir\n  []\n  [E_ii]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 0.1\n    poissons_ratio = 0.0\n    base_name = ii\n  []\n  [strain_rr]\n    type = ComputeSmallStrain\n    displacements = 'ur'\n    base_name = rr\n  []\n  [strain_ri]\n    type = ComputeSmallStrain\n    displacements = 'ui'\n    base_name = ri\n  []\n  [strain_ir]\n    type = ComputeSmallStrain\n    displacements = 'ur'\n    base_name = ir\n  []\n  [strain_ii]\n    type = ComputeSmallStrain\n    displacements = 'ui'\n    base_name = ii\n  []\n  [stress_rr]\n    type = ComputeLinearElasticStress\n    base_name = rr\n  []\n  [stress_ri]\n    type = ComputeLinearElasticStress\n    base_name = ri\n  []\n  [stress_ir]\n    type = ComputeLinearElasticStress\n    base_name = ir\n  []\n  [stress_ii]\n    type = ComputeLinearElasticStress\n    base_name = ii\n  []\n[]\n\n[Executioner]\n  type = Steady\n  solve_type = FD\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n[]\n\n[Outputs]\n  exodus = true\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2225423",
                  "updatedAt": "2022-07-07T08:56:14Z",
                  "publishedAt": "2022-02-22T03:08:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "This is apparently not optimal: I had to use four base names to define four different sets of parameters and constitutive models. This is sort of hacking the tensor mechanics to solve your specific problem, and the jacobian of the StressDivergenceTensors is also \"wrong\" with this hack. As a result, it'll have a hard time converging once the viscoelasticity becomes nonlinear. Using automatic differentiation might help you, e.g. ADStressDivergenceTensors ad AD materials. Going forward, I suggest you to create your own app.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2225449",
                          "updatedAt": "2022-07-07T08:56:21Z",
                          "publishedAt": "2022-02-22T03:15:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Thank you, @hugary1995, the issue was in the \"jacobian\", thus, specifying solver type as LINEAR resulted in wrong results. AD helps a lot. Thanks again.",
                          "url": "https://github.com/idaholab/moose/discussions/20266#discussioncomment-2230646",
                          "updatedAt": "2022-07-07T08:56:21Z",
                          "publishedAt": "2022-02-22T17:56:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Performance of iterative solvers with mesh refinement / hanging nodes",
          "author": {
            "login": "matthiasneuner"
          },
          "bodyText": "Hi, we recently tried to use an initial local mesh refinement (h refinement) for our solid mechanics based applications, using MOOSE's refinement capabilities. However, what we observe is a considerably degrading performance of the GMRES/BoomerAMG combo, i.e., the linear solver takes many iterations or does not converge at all within the defined limit of linear iterations.\nI assume that this is related to some constraints (of which nature are they?) introduced by the hanging nodes of the non-compatible finite element meshes.\nIs this the usual behavior, and are there any approaches to tackle those performance issues?\nThank you and best regards!",
          "url": "https://github.com/idaholab/moose/discussions/20344",
          "updatedAt": "2022-06-28T09:22:32Z",
          "publishedAt": "2022-02-18T18:04:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI ll let @roystgnr comment about the hanging nodes, I m not aware of that.\nA few things:\n\nyou can let the the linear solver converge by increasing the l_max_its parameter.\nwhat are your executioner parameters? Maybe we can improve the preconditioning / solver combo\ndo you really need to refine the whole domain? If not then use adaptivity in certain subdomains only or use the RefineBlockGenerator.\ndo you need to refine from the beginning of the simulation? If not then start with a coarser mesh, converge that solution, then refine.\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20344#discussioncomment-2206584",
                  "updatedAt": "2022-06-28T09:22:31Z",
                  "publishedAt": "2022-02-18T18:16:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Do you know what the magnitude of your physics Jacobians is? Is it of order Young's modulus which is often of order 1e9-1e12? Hanging node constraints do indeed introduce Jacobian rows of order unity, e.g.:\nvoid DofMap::enforce_constraints_on_jacobian (const NonlinearImplicitSystem & system,\n                                              SparseMatrix<Number> * jac) const\n{\n  parallel_object_only();\n\n  if (!this->n_constrained_dofs())\n    return;\n\n  if (!jac)\n    jac = system.matrix;\n\n  libmesh_assert_equal_to (this, &(system.get_dof_map()));\n\n  for (const auto & pr : _dof_constraints)\n    {\n      dof_id_type constrained_dof = pr.first;\n      if (!this->local_index(constrained_dof))\n        continue;\n\n      const DofConstraintRow constraint_row = pr.second;\n\n      for (const auto & j : constraint_row)\n        jac->set(constrained_dof, j.first, -j.second);\n      jac->set(constrained_dof, constrained_dof, 1);\n    }\n}\nSo this does have the potential to introduce scaling issues if your physics are dramatically different from order unity",
                  "url": "https://github.com/idaholab/moose/discussions/20344#discussioncomment-2223472",
                  "updatedAt": "2022-06-28T09:22:37Z",
                  "publishedAt": "2022-02-21T19:11:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "This is a good hypothesis.  I've never noticed solver issues from hanging nodes, but most of my own work has been with nondimensionalized physics.  I'm kind of surprised that that's enough to throw BoomerAMG for a loop, though; generally it doesn't take too much of a preconditioner to notice that some rows/columns tend to be much bigger than others and to try to compensate accordingly.",
                          "url": "https://github.com/idaholab/moose/discussions/20344#discussioncomment-2224853",
                          "updatedAt": "2022-06-28T09:22:52Z",
                          "publishedAt": "2022-02-22T00:23:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "matthiasneuner"
                  },
                  "bodyText": "Thank you to all your responses!\nI think it might be related to the magnitude of the Jacobian; I am using a coupled Cosserat approach; hence I am also solving for the balance of angular momentum which might have a completely different magnitude. Furthermore, I am dealing with strongly localized solutions due to large deformations, which BoomerAMG doesn't really like anyways:\nhttps://matthiasneuner.github.io/chamois/index.html\nIt is good to know that in principle hanging nodes should not cause such problems, this helps definitely a lot.",
                  "url": "https://github.com/idaholab/moose/discussions/20344#discussioncomment-2230395",
                  "updatedAt": "2022-06-28T09:22:59Z",
                  "publishedAt": "2022-02-22T17:20:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "INS - Can a mesh be too fine?",
          "author": null,
          "bodyText": "I'm having trouble converging a steady-state INS problem when I attempt to increase the mesh refinement. I plan to use the output of the simulation as a \"background flow\" for another simulation, which requires a finer mesh due to the physics than the INS needs. In the txt file attached, I included both the .geo file (using gmsh to make the mesh) and the input file. The mesh refinement shown on the .geo file of 2e-4 at each point works great, but decreasing this value to even 1e-4 for some points ruins the convergence.\nIf anybody has any clues/suggestions on how to fix this, I would greatly appreciate it.\nins_mesh_issue.txt",
          "url": "https://github.com/idaholab/moose/discussions/20350",
          "updatedAt": "2022-02-23T06:59:30Z",
          "publishedAt": "2022-02-19T15:26:46Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou could be running into the CFL conditions limit.\nWhat time integration scheme are you using?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2213320",
                  "updatedAt": "2022-02-20T07:14:28Z",
                  "publishedAt": "2022-02-20T07:14:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "I am running with a steady executioner, not a transient. Does this question still apply?",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2214746",
                          "updatedAt": "2022-02-20T14:42:19Z",
                          "publishedAt": "2022-02-20T14:42:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no it does not (time integrator is effectively implicit euler, with an infinite time step)\nIt's usually easier to get convergence for a flow problem with a relaxation-to-steady-state transient than with a steady solve. You could try that.\n@lindsayad",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2215112",
                          "updatedAt": "2022-02-20T16:24:15Z",
                          "publishedAt": "2022-02-20T16:11:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Good to know, I will try that! Thank you",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2215118",
                          "updatedAt": "2022-02-20T16:13:27Z",
                          "publishedAt": "2022-02-20T16:13:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Have you estimated what your cell Reynolds number should be for this problem? The answer to this question will determine whether SUPG is needed or not",
                  "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2222582",
                  "updatedAt": "2022-02-21T16:46:15Z",
                  "publishedAt": "2022-02-21T16:46:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "In the thinnest part of the domain, I'm getting a Reynold's number of about 50 with a Q= 1000 sccm, rho = 0.2135 kg/m^3, mu = 2.3e-5 Pa-s, and D = 0.004 m. I'm not sure if this what you mean by \"cell\", though.",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2222967",
                          "updatedAt": "2022-02-21T17:39:29Z",
                          "publishedAt": "2022-02-21T17:39:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I'm going to add a reynolds number aux kernel to the NS module to help users compute this. Should have a PR up sometime today.\nFor determining whether to stabilize or not we are typically interested in the highest element/cell Reynolds number, so that will occur for the largest _current_elem->hmax(). Anyway any Re greater than ~1 strictly speaking raises a need for stabilization technique like upwinding. You can get this for finite element INS by putting supg = true in your GlobalParams block. This may or may not make your convergence issues go away. I'm going to run your problem at some point today.",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2223249",
                          "updatedAt": "2022-02-21T18:27:07Z",
                          "publishedAt": "2022-02-21T18:27:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "You may also consider using PSPG which negates the need to have different orders for your velocity and pressure variables. To get PSPG, put pspg = true in your GlobalParams block",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2223258",
                          "updatedAt": "2022-02-21T18:28:22Z",
                          "publishedAt": "2022-02-21T18:28:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "See #20361 for a reynolds number aux kernel. I found that if I set pspg = true and used first order for all variables, I could get your simulation to converge with 1e-4 for your characteristic mesh size. However, if I took it lower to 5e-5, then even with pspg = true the nonlinear solve stagnated. So I would posit that the answer to your question is yes, although I'm hesitant to give a sure answer as to why. My gut feeling is that you run out of precision and the problem loses conditioning but I don't have definitive proof of this. Using quad precision could test my hypothesis",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2224568",
                          "updatedAt": "2022-02-21T23:00:07Z",
                          "publishedAt": "2022-02-21T23:00:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "good to know! Did you also use the \"supg = true\"?",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2224585",
                          "updatedAt": "2022-02-21T23:04:35Z",
                          "publishedAt": "2022-02-21T23:04:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I believe I ran with both supg = true and supg = false and the nonlinear solve behavior (and results) were pretty similar in this case",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2224590",
                          "updatedAt": "2022-02-21T23:06:02Z",
                          "publishedAt": "2022-02-21T23:06:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So having talked with another colleague, I think a better explanation is more along the lines of @GiudGiud 's initial suggestion. In order for Newton-Raphson to be effective you must start with an initial guess that is reasonably close to the converged solution, e.g. you need to be in the \"ball of attraction\" or \"sphere of convergence\" for Newton. When you are doing a Steady solve with arbitrary initial conditions you are very far from the final solution. This is likely enhanced the finer and finer you make the mesh. So I suspect that if you follow a Transient pseudo-stepping strategy like @GiudGiud suggested, then you should be able to reach a steady-state for a finer mesh than you are able to with Steady with an arbitrary initial guess/conditions.",
                          "url": "https://github.com/idaholab/moose/discussions/20350#discussioncomment-2230255",
                          "updatedAt": "2022-02-22T16:59:17Z",
                          "publishedAt": "2022-02-22T16:59:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "\"mamba install moose-tools moose-libmesh\" error, cannot install",
          "author": null,
          "bodyText": "I'm attempting to re-install, so I followed the install directions from the getting started page, and I got stuck at \"mamba install moose-tools moose-libmesh.\" It gets stuck during installation of \"public/linux-64\" and \"public/noarch\", saying \"Timeout was reached\" before finally failing and terminating. The conda-forge equivalents install just fine. I assumed it was the fact that I'm running a Linux WSL on Windows, so I tried to install on my MacBook and I got the same error. I've attached the error message I got from the Mac install attempt below.\nTraceback (most recent call last):\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/conda/exceptions.py\", line 1080, in __call__\n        return func(*args, **kwargs)\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 917, in exception_converter\n        raise e\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 911, in exception_converter\n        exit_code = _wrapped_main(*args, **kwargs)\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 869, in _wrapped_main\n        result = do_call(args, p)\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 734, in do_call\n        exit_code = install(args, parser, \"install\")\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 486, in install\n        index = load_channels(pool, channels, repos)\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/utils.py\", line 122, in load_channels\n        index = get_index(\n      File \"/Users/seanpeyres/mambaforge3/lib/python3.9/site-packages/mamba/utils.py\", line 103, in get_index\n        is_downloaded = dlist.download(True)\n    RuntimeError: Download error (28) Timeout was reached [https://conda.software.inl.gov/public/noarch/repodata.json]\n    Connection timeout after 9106 ms\n\n`$ /Users/seanpeyres/mambaforge3/bin/mamba install moose-tools moose-libmesh`\n\n  environment variables:\n                 CIO_TEST=<not set>\n        CONDA_DEFAULT_ENV=moose\n                CONDA_EXE=/Users/seanpeyres/mambaforge3/bin/conda\n             CONDA_PREFIX=/Users/seanpeyres/mambaforge3/envs/moose\n           CONDA_PREFIX_1=/Users/seanpeyres/opt/anaconda3\n           CONDA_PREFIX_2=/Users/seanpeyres/mambaforge3\n    CONDA_PROMPT_MODIFIER=(moose)\n         CONDA_PYTHON_EXE=/Users/seanpeyres/mambaforge3/bin/python\n               CONDA_ROOT=/Users/seanpeyres/opt/anaconda3\n              CONDA_SHLVL=3\n           CURL_CA_BUNDLE=<not set>\n                     PATH=/Users/seanpeyres/mambaforge3/bin:/Users/seanpeyres/mambaforge3/envs/m\n                          oose/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/u\n                          sr/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands\n       REQUESTS_CA_BUNDLE=<not set>\n            SSL_CERT_FILE=<not set>\n\n     active environment : moose\n    active env location : /Users/seanpeyres/mambaforge3/envs/moose\n            shell level : 3\n       user config file : /Users/seanpeyres/.condarc\n populated config files : /Users/seanpeyres/.condarc\n          conda version : 4.11.0\n    conda-build version : not installed\n         python version : 3.9.7.final.0\n       virtual packages : __osx=11.6=0\n                          __unix=0=0\n                          __archspec=1=x86_64\n       base environment : /Users/seanpeyres/mambaforge3  (writable)\n      conda av data dir : /Users/seanpeyres/mambaforge3/etc/conda\n  conda av metadata url : None\n           channel URLs : https://conda.software.inl.gov/public/osx-64\n                          https://conda.software.inl.gov/public/noarch\n                          https://conda.anaconda.org/conda-forge/osx-64\n                          https://conda.anaconda.org/conda-forge/noarch\n                          https://conda.anaconda.org/idaholab/osx-64\n                          https://conda.anaconda.org/idaholab/noarch\n                          https://repo.anaconda.com/pkgs/main/osx-64\n                          https://repo.anaconda.com/pkgs/main/noarch\n                          https://repo.anaconda.com/pkgs/r/osx-64\n                          https://repo.anaconda.com/pkgs/r/noarch\n          package cache : /Users/seanpeyres/mambaforge3/pkgs\n                          /Users/seanpeyres/.conda/pkgs\n       envs directories : /Users/seanpeyres/mambaforge3/envs\n                          /Users/seanpeyres/.conda/envs\n               platform : osx-64\n             user-agent : conda/4.11.0 requests/2.26.0 CPython/3.9.7 Darwin/20.6.0 OSX/11.6\n                UID:GID : 501:20\n             netrc file : None\n           offline mode : False",
          "url": "https://github.com/idaholab/moose/discussions/20351",
          "updatedAt": "2022-07-10T08:08:47Z",
          "publishedAt": "2022-02-20T20:56:08Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nOur conda server is down right now.\nYou can follow more advanced installation instructions here: https://mooseframework.inl.gov/getting_started/installation/install_moose.html\nor wait till this gets fixed, likely Monday\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2216762",
                  "updatedAt": "2022-07-10T08:09:03Z",
                  "publishedAt": "2022-02-20T22:07:27Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Could you please kindly tell me, if it is fixed?",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2219832",
                          "updatedAt": "2022-07-10T08:09:10Z",
                          "publishedAt": "2022-02-21T10:45:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "we will update this post when it's fixed",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2222327",
                          "updatedAt": "2022-07-10T08:09:10Z",
                          "publishedAt": "2022-02-21T16:15:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "we will update this post when it's fixed\n\nYes, I am currently working with our department to get this back online.",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2222345",
                          "updatedAt": "2022-07-10T08:09:10Z",
                          "publishedAt": "2022-02-21T16:19:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "It looks to be back up now....",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2223233",
                          "updatedAt": "2023-09-19T06:27:05Z",
                          "publishedAt": "2022-02-21T18:25:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "I'm still getting timeout errors:\nLooking for: ['moose-tools', 'moose-libmesh']\n\npuDownload interrupted\npublic/linux-64          [>                   ] (00m:12s) Timeout was reached\npublic/noarch            [>                   ] (00m:12s) Timeout was reached\nconda-forge/linux-64     [>                   ] (00m:12s) Timeout was reached\nconda-forge/noarch       [>                   ] (00m:12s) Timeout was reached\n\n# >>>>>>>>>>>>>>>>>>>>>> ERROR REPORT <<<<<<<<<<<<<<<<<<<<<<\n\n    Traceback (most recent call last):\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/conda/exceptions.py\", line 1080, in __call__\n        return func(*args, **kwargs)\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 917, in exception_converter\n        raise e\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 911, in exception_converter\n        exit_code = _wrapped_main(*args, **kwargs)\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 869, in _wrapped_main\n        result = do_call(args, p)\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 734, in do_call\n        exit_code = install(args, parser, \"install\")\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/mamba.py\", line 486, in install\n        index = load_channels(pool, channels, repos)\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/utils.py\", line 122, in load_channels\n        index = get_index(\n      File \"/home/sean_wsl/mambaforge3/lib/python3.9/site-packages/mamba/utils.py\", line 106, in get_index\n        raise RuntimeError(\"Error downloading repodata.\")\n    RuntimeError: Error downloading repodata.\n\n`$ /home/sean_wsl/mambaforge3/bin/mamba install moose-tools moose-libmesh`\n\n  environment variables:\n                 CIO_TEST=<not set>\n        CONDA_DEFAULT_ENV=moose\n                CONDA_EXE=/home/sean_wsl/mambaforge3/bin/conda\n             CONDA_PREFIX=/home/sean_wsl/mambaforge3/envs/moose\n           CONDA_PREFIX_1=/home/sean_wsl/mambaforge3\n    CONDA_PROMPT_MODIFIER=(moose)\n         CONDA_PYTHON_EXE=/home/sean_wsl/mambaforge3/bin/python\n               CONDA_ROOT=/home/sean_wsl/mambaforge3\n              CONDA_SHLVL=2\n           CURL_CA_BUNDLE=<not set>\n                     PATH=/home/sean_wsl/mambaforge3/bin:/home/sean_wsl/mambaforge3/envs/moose/b\n                          in:/home/sean_wsl/mambaforge3/condabin:/usr/local/sbin:/usr/local/bin:\n                          /usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl\n                          /lib:/mnt/c/Program Files/WindowsApps/CanonicalGroupLimited.Ubuntu20.0\n                          4onWindows_2004.2021.825.0_x64__79rhkp1fndgsc:/mnt/c/Windows/system32:\n                          /mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/Wi\n                          ndowsPowerShell/v1.0:/mnt/c/Windows/System32/OpenSSH:/mnt/c/Program Fi\n                          les/Git/cmd:/mnt/c/Users/sean/AppData/Local/Microsoft/WindowsApps:/mnt\n                          /c/Users/sean/AppData/Local/atom/bin:/snap/bin\n       REQUESTS_CA_BUNDLE=<not set>\n            SSL_CERT_FILE=<not set>\n\n     active environment : moose\n    active env location : /home/sean_wsl/mambaforge3/envs/moose\n            shell level : 2\n       user config file : /home/sean_wsl/.condarc\n populated config files : /home/sean_wsl/mambaforge3/.condarc\n                          /home/sean_wsl/.condarc\n          conda version : 4.11.0\n    conda-build version : not installed\n         python version : 3.9.7.final.0\n       virtual packages : __linux=5.10.60.1=0\n                          __glibc=2.31=0\n                          __unix=0=0\n                          __archspec=1=x86_64\n       base environment : /home/sean_wsl/mambaforge3  (writable)\n      conda av data dir : /home/sean_wsl/mambaforge3/etc/conda\n  conda av metadata url : None\n           channel URLs : https://conda.software.inl.gov/public/linux-64\n                          https://conda.software.inl.gov/public/noarch\n                          https://conda.anaconda.org/conda-forge/linux-64\n                          https://conda.anaconda.org/conda-forge/noarch\n          package cache : /home/sean_wsl/mambaforge3/pkgs\n                          /home/sean_wsl/.conda/pkgs\n       envs directories : /home/sean_wsl/mambaforge3/envs\n                          /home/sean_wsl/.conda/envs\n               platform : linux-64\n             user-agent : conda/4.11.0 requests/2.26.0 CPython/3.9.7 Linux/5.10.60.1-microsoft-standard-WSL2 ubuntu/20.04.3 glibc/2.31\n                UID:GID : 1000:1000\n             netrc file : None\n           offline mode : False\n\nedited for easier reading (pre)",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2223263",
                          "updatedAt": "2022-02-21T18:36:10Z",
                          "publishedAt": "2022-02-21T18:29:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "conda-forge is not our channel yet it's timing out as well, so this isnt our server issues anymore",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2223294",
                          "updatedAt": "2022-02-21T18:35:26Z",
                          "publishedAt": "2022-02-21T18:35:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "It has now worked for me!",
                  "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2226414",
                  "updatedAt": "2022-07-10T08:08:52Z",
                  "publishedAt": "2022-02-22T07:13:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "It works for me as well now",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2228167",
                          "updatedAt": "2022-07-10T08:09:02Z",
                          "publishedAt": "2022-02-22T12:19:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Oh... we didn't update this post when it was fixed yesterday... sorry!",
                          "url": "https://github.com/idaholab/moose/discussions/20351#discussioncomment-2229160",
                          "updatedAt": "2022-07-10T08:09:03Z",
                          "publishedAt": "2022-02-22T14:51:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Extracting single component from array variable.",
          "author": {
            "login": "adityaghantasala"
          },
          "bodyText": "Hello Moose community !\nHow can I extract a single component of an array variable as a scalar variable ?\nUse case : I would then make an object of a scalar kernel acting on this single component.\nAny pointers on how to achieve this will be helpful.\nThank you in advance for the pointers.",
          "url": "https://github.com/idaholab/moose/discussions/20220",
          "updatedAt": "2022-06-16T12:01:37Z",
          "publishedAt": "2022-02-03T15:22:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nJust to make sure, you want a single number, not a single component (a field then) of the array variable (composed of multiple fields, it s a vector field essentially)?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2104689",
                  "updatedAt": "2022-06-26T03:23:14Z",
                  "publishedAt": "2022-02-03T15:35:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "adityaghantasala"
                          },
                          "bodyText": "Hi Thank you for your reply.\nYou mean a \"number\" like the variable number as here ?\n\n  \n    \n      moose/framework/src/systems/SystemBase.C\n    \n    \n         Line 825\n      in\n      c98ae8b\n    \n  \n  \n    \n\n        \n          \n           var_num = system().add_variables(var_names, fe_type, &blocks) - (components - 1); \n        \n    \n  \n\n\nCan this help creating a class(ideally a kernel) which can work on a single component(yes a field) ?",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2104831",
                          "updatedAt": "2022-06-26T03:23:16Z",
                          "publishedAt": "2022-02-03T15:56:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok so you need a field.\nI meant a number as in: the value of the component 4 of variable array_with_5_components on element 12, which would have been 11.6 or something\nThis is the way to extract a component. However, this places it in a auxiliary variable. You cant create a 'kernel' in the sense of defining a non-linear equation (that will be solved by the nonlinear solver, not just substituting values in) for that component.\nhttps://mooseframework.inl.gov/source/auxkernels/ArrayVariableComponent.html\nYou will be able to use this auxiliary variable to help define an equation for another variable, or compute other auxvariables and matprops",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2104885",
                          "updatedAt": "2022-06-26T03:23:31Z",
                          "publishedAt": "2022-02-03T16:04:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "adityaghantasala"
                          },
                          "bodyText": "Hi @GiudGiud Thank you. That helps.\nAnother question. Is there a video or document explaining the software architecture or workflow of Moose framework ?",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2112438",
                          "updatedAt": "2022-06-26T03:23:44Z",
                          "publishedAt": "2022-02-04T16:24:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Software architecture surely in the docs.\nIf you want the workflow, add this to your simulation, it ll give you a lot of info\n[Debug]\n  show_actions = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2122745",
                          "updatedAt": "2023-02-28T09:25:40Z",
                          "publishedAt": "2022-02-07T05:13:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Maybe this page will have some info you want?\nhttps://mooseframework.inl.gov/framework_development/",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2122752",
                          "updatedAt": "2022-11-02T13:47:58Z",
                          "publishedAt": "2022-02-07T05:15:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "adityaghantasala"
                          },
                          "bodyText": "If you want the workflow, add this to your simulation, it ll give you a lot of info\n[Debug]\n  show_actions = true\n[]\n\n\n@GiudGiud  Thank you for this pointer. This helps. But I did not get what you ment by Software architecture surely in the docs . You mean the doxygen pages with inheritance diagrams ?\nI am looking more in the direction of which software design patterns are used, which classes fall under which pattern, which is the steering class for a given simulation and similar things which can give me a roadmap on how to see the dependency of particular class. Also this information is particularly helpful to debug some segfaults and errors which I get when experimenting with Moose.\nThank you again for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2220606",
                          "updatedAt": "2022-11-02T13:47:58Z",
                          "publishedAt": "2022-02-21T12:19:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The doc website is this one\nhttps://mooseframework.inl.gov/index.html\nThere is also a lot of information about how classes are organized in the doxygen, and that will give you the dependencies of each class.\nThe steering class for a given simulation is usually the Executioner, though in fixed point iterations (multiapp-based setups) then it's the FixedPointSolve.\nWe are actually reworking that system right now so this answer will change and be more clear in a few months.",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2222323",
                          "updatedAt": "2022-11-02T13:47:58Z",
                          "publishedAt": "2022-02-21T16:15:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "MOOSE papers are probably the best places to find data about the workflow actually. Unless there is an INL EXT report about it?\n@permcody",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2222392",
                          "updatedAt": "2022-11-02T13:48:47Z",
                          "publishedAt": "2022-02-21T16:26:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "adityaghantasala"
                          },
                          "bodyText": "We are actually reworking that system right now so this answer will change and be more clear in a few months.\n\nInteresting, can I follow this development ? is there a branch or a fork where this work is pushed to ?\n\nThe steering class for a given simulation is usually the Executioner, though in fixed point iterations (multiapp-based setups) then it's the FixedPointSolve.\n\nThank you. I learnt this a couple of days ago, your previous pointers helped.",
                          "url": "https://github.com/idaholab/moose/discussions/20220#discussioncomment-2226927",
                          "updatedAt": "2022-11-02T13:49:02Z",
                          "publishedAt": "2022-02-22T08:37:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}