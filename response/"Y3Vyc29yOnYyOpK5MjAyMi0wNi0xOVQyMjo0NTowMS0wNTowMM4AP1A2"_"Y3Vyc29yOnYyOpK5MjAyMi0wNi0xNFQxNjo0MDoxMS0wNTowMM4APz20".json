{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNi0xNFQxNjo0MDoxMS0wNTowMM4APz20"
    },
    "edges": [
      {
        "node": {
          "title": "For Automatic Periodic Boundary Detection, can it use AuxVariables? It is only Variables System.",
          "author": {
            "login": "snugook1108"
          },
          "bodyText": "Reason\nFor Automatic Periodic Boundary Detection, can it use the AuxVariables? It is only for the Variables System.\nDesign\n[BCs]\n  [./Periodic]\n    [./all]\n      variable = u\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]\n\nThe variable is u so if it is possible, the variable can use  AuxVariables?\nImpact",
          "url": "https://github.com/idaholab/moose/discussions/21354",
          "updatedAt": "2022-06-25T05:44:08Z",
          "publishedAt": "2022-05-31T19:47:30Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "We dont set boundary conditions to auxvariables. AuxVariables are computed by AuxKernels, they are not solved for. If you want to make a periodic one, you can code this into the AuxKernel definition\nbtw we use the Discussions forum for such questions, not issues",
                  "url": "https://github.com/idaholab/moose/discussions/21354#discussioncomment-2981829",
                  "updatedAt": "2022-06-19T22:49:08Z",
                  "publishedAt": "2022-06-19T22:49:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ld: library not found for -lemutls_w",
          "author": {
            "login": "jianqixi"
          },
          "bodyText": "As a beginner of MOOSE, I have one error when installing the MOOSE in my Macbook. it showed that the library of -lemutls_w is missed, and then showed the following errors: clang-12: error: linker command failed with exit code 1 (use -v to see invocation). Thank you for your help,",
          "url": "https://github.com/idaholab/moose/discussions/21351",
          "updatedAt": "2022-07-21T23:30:46Z",
          "publishedAt": "2022-06-19T20:55:53Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nPlease attach the full compilation log that shows the error.\nAlso if you could run the diagonistics script in moose/scripts and attach the output\nbtw, we use Github Discussions for such issues, please use this instead of issues.\nThanks\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21351#discussioncomment-2981794",
                  "updatedAt": "2022-06-19T22:38:01Z",
                  "publishedAt": "2022-06-19T22:37:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Build issues in libmesh: Undefined reference to HDF components",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Hello all,\nStrangely the build of libmesh throws the following undefined references even after the inclusion of HDF modules in my environment.\n/home/abalasub/Working/Projects/moose/libmesh/build/contrib/netcdf/v4/liblib/.libs/libnetcdf.so: undefined reference to `H5Pset_all_coll_metadata_ops'\n/home/abalasub/Working/Projects/moose/libmesh/build/contrib/netcdf/v4/liblib/.libs/libnetcdf.so: undefined reference to `H5Pset_dxpl_mpio'\n/home/abalasub/Working/Projects/moose/libmesh/build/contrib/netcdf/v4/liblib/.libs/libnetcdf.so: undefined reference to `H5Pset_coll_metadata_write'\n/home/abalasub/Working/Projects/moose/libmesh/build/contrib/netcdf/v4/liblib/.libs/libnetcdf.so: undefined reference to `H5Pset_fapl_mpio'\n/home/abalasub/Working/Projects/moose/petsc/arch-moose/lib/libpetsc.so: undefined reference to `H5Pget_dxpl_mpio'\n\nWe have hdf5 versions 1.8.13 and 1.12 - inclusion of both of them did not help solve this problem. This is noticed only in the recent sources of MOOSE and not in the older versions. Any references here will be much appreciated.\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/21336",
          "updatedAt": "2022-06-25T05:44:29Z",
          "publishedAt": "2022-06-17T11:37:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nHow are you including these HDF5 libraries? Are you setting an environment variable?\nIs there ANY other HDF5 libraries that are loaded at the same time?\nI'd wipe the libmesh directory once to make sure there is not some linking to an old HDF5 library around\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21336#discussioncomment-2972702",
                  "updatedAt": "2022-06-17T15:37:03Z",
                  "publishedAt": "2022-06-17T15:37:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "abarun22"
                  },
                  "bodyText": "Hi Guillaume,\nI was including the HDF5 libraries in my environment through the modules. I\nhad to initially remove the inclusion of HDF5 during petsc build due to the\nfact that it was not passing the build checks. When I tried to build\nlibmesh further it throwed undefined references to HDF5 components. I\nthought I could reinstate the HDF5 libraries this time and see if I can\nbuild both petsc and libmesh. It eventually builds OK and also passes the\ntests. I've no idea why it did not pass petsc build initially.\nIn any case it works fine.\nKind regards,\nArun\n\u2026\nOn Fri, Jun 17, 2022 at 4:37 PM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n How are you including these HDF5 libraries? Are you setting an environment\n variable?\n Is there ANY other HDF5 libraries that are loaded at the same time?\n\n I'd wipe the libmesh directory once to make sure there is not some linking\n to an old HDF5 library around\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21336 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AJSA256INO474ZK7CEQZKOLVPSLSVANCNFSM5ZCAHCOQ>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21336#discussioncomment-2973186",
                  "updatedAt": "2022-06-17T16:52:56Z",
                  "publishedAt": "2022-06-17T16:52:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ah that's great news. HDF5 can be a little finicky, one definitely has to be extremely consistent throughout the build, same as for compilers.",
                          "url": "https://github.com/idaholab/moose/discussions/21336#discussioncomment-2978372",
                          "updatedAt": "2022-06-18T22:58:41Z",
                          "publishedAt": "2022-06-18T22:58:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Installation Problem",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "MOOSE Team,\nI have not used MOOSE for a long time.\nI am trying to install MOOSE on my old MacBook Pro running with macOS Catalina.\nAttached are the error messages.\nPlease help!\nS. Thomas\ninstallation_message.docx",
          "url": "https://github.com/idaholab/moose/discussions/21327",
          "updatedAt": "2022-06-25T05:44:34Z",
          "publishedAt": "2022-06-16T22:03:41Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNo need to try to run the test suite the mamba installation failed.\nSeems to be some SSL certificate error. Can you temporarily disable SSL verification, install moose packages then re-enable it?\nuse conda config --set ssl_verify false\nthen true\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21327#discussioncomment-2967530",
                  "updatedAt": "2022-06-16T23:14:01Z",
                  "publishedAt": "2022-06-16T23:14:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I would also love to know why Conda thinks we're using a self-signed certificate for https://conda.software.inl.gov. If you have a moment, can you try and report what the following results with?:\ncurl -v https://conda.software.inl.gov/public",
                          "url": "https://github.com/idaholab/moose/discussions/21327#discussioncomment-2967735",
                          "updatedAt": "2022-06-17T00:10:45Z",
                          "publishedAt": "2022-06-17T00:10:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume and Milljm,\nPlease see the attached file and let me know what I can do.\nS.Thomas\nInstallaion_messages2.docx",
                          "url": "https://github.com/idaholab/moose/discussions/21327#discussioncomment-2968039",
                          "updatedAt": "2022-06-17T01:46:32Z",
                          "publishedAt": "2022-06-17T01:46:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Guillaume and Milljm,\nDespite more than 50 tests failed, the example problem of \"ex01\" runs correctly.\nPlease let me know if my installation has been done acceptably.\nS. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/21327#discussioncomment-2973699",
                          "updatedAt": "2022-06-17T18:24:03Z",
                          "publishedAt": "2022-06-17T18:24:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nNo 50 test failures is excessive.\nCould you please attach the log with all the failures? It's usually easy to see what is going wrong from which tests failed\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21327#discussioncomment-2978328",
                          "updatedAt": "2022-06-18T22:30:13Z",
                          "publishedAt": "2022-06-18T22:30:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Specify Euler angles for the three-grain model",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear MOOSE experts,\nRecently, I modified the initial model of Tricrystal2CircleGrains based on poly_grain_growth_2D_eldrforce.i. And the input file is\ntri_grain_growth_2D_eldrforce.txt\nI want to specify a fixed Euler angle for each grain, but the input file I write now uses a tex file to give the Euler angle different match. Is there any way to specify the Euler angle for each grain?\nThis is the specific content of the tex file\uff0c\nTexture File\nFile generated from MATLAB\nB 3\n   30.00   0.00   0.00   1.00\n   45.00   0.00   0.00   1.00\n   90.00   0.00   0.00   1.00\n\nThe three-grain model and Euler angle are as follows\n\nAny suggestions or recommendations to fix these problems would be greatly appreciated.\nThank you\nWei Peng",
          "url": "https://github.com/idaholab/moose/discussions/17196",
          "updatedAt": "2022-06-18T22:22:21Z",
          "publishedAt": "2021-03-03T02:37:41Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @PengWei97\nSome of the examples in moose use the GrainPropertyReadFile object\nto read the Euler angles element by element,\nso each line of the Euler angle file corresponds to the angles in one element.\nI have developed some simple modifications to assign the Euler angles\nto different grains instead. This is done by considering different grains as different blocks.\nYou can see an example here with four grains:\nhttps://github.com/ngrilli/c_pfor_am/tree/main/test/tests/polycrystal\nYou can use this strategy to generate polycrystals with neper\nand assign corresponding Euler angles grain by grain, as done here:\nhttps://github.com/ngrilli/c_pfor_am/tree/main/test/tests/neper\nTrust this helps\nBest Regards,\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/17196#discussioncomment-434230",
                  "updatedAt": "2022-06-17T20:13:09Z",
                  "publishedAt": "2021-03-05T19:00:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Dear @ngrilli\nThank you very much for your enthusiastic answers and the learning materials you provided. I have found the answer to this question. The problem lies in the *.tex file. Because the first Euler angle of the *.tex file I wrote is on the fourth line, this is a line that moose ignores, resulting in actually only two Euler angles specified, and the third Euler angle is assigned randomly. That's the problem.\nBest Regards,\nWei Peng",
                          "url": "https://github.com/idaholab/moose/discussions/17196#discussioncomment-435056",
                          "updatedAt": "2022-06-17T20:13:09Z",
                          "publishedAt": "2021-03-06T02:12:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "latmarat"
                          },
                          "bodyText": "Hi Nicol\u00f2:\nCould you please comment how MOOSE orders the elements? That is, when you write the text file with the euler angles, how do you make sure it corresponds to the right element in the mesh? Does MOOSE sort elements such that element label increases first along x, then along y, then along z?\nThanks,\nMarat",
                          "url": "https://github.com/idaholab/moose/discussions/17196#discussioncomment-2974153",
                          "updatedAt": "2022-06-17T20:17:23Z",
                          "publishedAt": "2022-06-17T20:17:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\n\nif you are generating your mesh in MOOSE using the mesh generators, then there is some sort of ordering based on the direction, depending on the mesh generators you are using\nif you are generating your mesh outside of MOOSE, MOOSE does not re-order the elements (unless it is running in parallel. This should be disabled by passing allow_mesh_renumbering = false if you plan to set Euler angles by element). You should generate your Euler angles at the same time as you are generating your mesh to make sure the numbering match.\n\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/17196#discussioncomment-2978316",
                          "updatedAt": "2022-06-18T22:22:22Z",
                          "publishedAt": "2022-06-18T22:22:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Variable scaling",
          "author": {
            "login": "Edward-Eth"
          },
          "bodyText": "I am running a coupled physics simulation, and having some convergence issues. These are my per-variable residuals at the start and end of a converged timestep:\nStart:\ndisp_x: 0.0207124\ndisp_y: 0.0538449\ndisp_z: 0.0559112\nT:      1213.58\nEnd:\ndisp_x: 1.03655e-07\ndisp_y: 6.19961e-08\ndisp_z: 2.02929e-07\nT:      2.23613e-12\nAccording to the \"Troubleshooting failed solves\" page, my residuals should be within 1 order of magnitude of each other. These obviously aren't, but at the start of the step (initial guess) T is much larger, and at the end it is much smaller. Which do I scale for? Should I multiply T by ~10^4 so that when converged it is a similar magnitude to the other variables, or should I times disp_x,y,z, by ~10^5 to bring initial guess in line with each other?\nAdditionally, here are the residuals for a failed time step:\nInitial:\ndisp_x: 1.92706e-08\ndisp_y: 8.08506e-09\ndisp_z: 1.65146e-08\nT:      54.5449\nEnd:\ndisp_x: 4.41008e-05\ndisp_y: 2.61794e-05\ndisp_z: 4.3757e-05\nT:      5.39617e-12\nAgain. at the start the T contribution is much larger, but by the end (after 20 NL iterations and failing to converge), T is much smaller.",
          "url": "https://github.com/idaholab/moose/discussions/21297",
          "updatedAt": "2022-06-25T05:46:03Z",
          "publishedAt": "2022-06-14T11:09:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You could try automatic scaling which scales the variables such that the Jacobian is close to unity in sup-norm. If you were using Newton and non-AD kernels, the results suggest that the displacements and temperature converge at different rates, and the Jacobian for the displacement subproblem (or its coupling with temperature) might be off. You could try the new mechanics system which should provide you with a perfect Jacobian.\nAnyways, automatic scaling (or maybe reference residual problem) + Newton + perfect Jacobian should resolve this issue.",
                  "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2946881",
                  "updatedAt": "2022-06-14T12:47:12Z",
                  "publishedAt": "2022-06-14T12:47:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Hi, I'm already using AD and automatic scaling here.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2947017",
                          "updatedAt": "2022-06-14T13:07:10Z",
                          "publishedAt": "2022-06-14T13:07:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "More specifically, I am using newton solve, AD for TensorMechanics and all relevant material properties, AD for Heat Conduction and Heat Conduction time derivative (and all relevant materials properties), and am coupling using AD compute thermal expansion eigenstrain.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2947246",
                          "updatedAt": "2022-06-14T13:32:13Z",
                          "publishedAt": "2022-06-14T13:32:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Okay, I would then check if everything in your input file is AD, do you mind pasting the input file here? If the jacobian is perfect and you are taking more than 20 nl iterations as you mentioned, the time step you are taking might be too large that the initial guess is outside the basin of a traction.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2947785",
                          "updatedAt": "2022-06-14T14:29:40Z",
                          "publishedAt": "2022-06-14T14:29:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Not sure I will be able to post the input file, but all of my BCs, materials and kernels are AD. The only things not AD are an element activator user object,  a property read file user object, and functions, none of which can be AD to the best of my knowledge.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2948003",
                          "updatedAt": "2022-06-14T14:50:27Z",
                          "publishedAt": "2022-06-14T14:50:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "As for the time step, that is after it is cut down to less than 1 second, which should definitely be stable :/",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2948012",
                          "updatedAt": "2022-06-14T14:50:58Z",
                          "publishedAt": "2022-06-14T14:50:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "This isn't a scaling issue, it's a wrong jacobian issue.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2951788",
                          "updatedAt": "2022-06-15T01:31:37Z",
                          "publishedAt": "2022-06-15T01:31:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Is there any way to track down where the incorrect jacobian contributions are coming from? The only \"loading\" in the structural/tensor mechanics part of the model is from thermal expansion, so is that the most likely source of the issue?",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2953954",
                          "updatedAt": "2022-06-15T08:29:54Z",
                          "publishedAt": "2022-06-15T08:29:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "Am I correct in thinking that if the issue is with the Jacobian, then a Jacobian free solve (PJFNK) will in theory not be affected? Running one now to see anyway but I would be interested in your thoughts on that approach.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2954076",
                          "updatedAt": "2022-06-15T08:47:25Z",
                          "publishedAt": "2022-06-15T08:47:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "First, if you can manage to reduce the size of the problem to a few elements, you'll be able to check the accuracy of the jacobian by passing the command line argument -snes_test_jacobian, which can give us some idea about the quality of the jacobian.\nNext, you'll need to tell us whether the non AD objects introduce material properties that depend on nonlinear variables. If so, that's likely gonna be the source of inaccurate jacobian.",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2955167",
                          "updatedAt": "2022-06-15T11:24:50Z",
                          "publishedAt": "2022-06-15T11:24:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "A JFNK solve does not depend on the Jacobian. A PJFNK solve will use the Jacobian to precondition the system, so if the Jacobian is wrong it will still impact the solve.\nGary is right that you should check your implementation at this point. Use the jacobian tester, and verify that you are consistently using AD or have implemented Diagonal and off-diagonal contributions to the Jacobian correctly",
                          "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2957568",
                          "updatedAt": "2022-06-15T16:36:25Z",
                          "publishedAt": "2022-06-15T16:36:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nso you could try manually scaling the equations, but you ll have to use the scaling factors appropriate for the final state not the initial state. It seems the compared scale of the residuals is inverted between the two.\nautomatic_scaling is a good idea too. I think this is one of the cases where you will want to update the scaling factors.\nso add compute_scaling_once = false to the Executioner block.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2948885",
                  "updatedAt": "2022-06-14T16:22:06Z",
                  "publishedAt": "2022-06-14T16:22:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "mangerij"
                  },
                  "bodyText": "Another suggestion: sometimes going to a different unit system can help convergence. It usually doesn't make sense to have materials coefficients of one part of the coupled problem that are like 1e-15 and then materials coefficients of another part of the coupled problem that are, for example 1e15.",
                  "url": "https://github.com/idaholab/moose/discussions/21297#discussioncomment-2949039",
                  "updatedAt": "2022-06-14T16:43:39Z",
                  "publishedAt": "2022-06-14T16:43:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Impose steady-state solution as BC for transient evolution",
          "author": {
            "login": "AdrienWehrle"
          },
          "bodyText": "Hi everyone,\nApplication\nsimulating the elastic deformation of a material in different situations, I am first applying gravity to my domain at the first step to obtain a steady-state using a control as e.g. here.\nMy domain is infinitely long so I am using a periodic BC. However, because periodic, as soon as I apply a transient forcing resulting in the propagation of a deformation, this wave gets propagated through the boundary and back. This is expected, but problematic in my transient state because creating some fake deformation!\nWhat I would like to do\nI am currently loading my domain with periodic boundary conditions, and would like to use the solution of that steady state at the boundaries as boundary conditions for the rest of the simulation which is transient. And therefore turn off the periodicity after loading to prevent the periodic propagation of waves as described above. With the aim of having boundary conditions that actually makes sense, and that correspond to the loaded steady state.\nWhat I have done so far\nI am currently trying to achieve this with what sounds like a bad solution:\n\nWrite out the solution after gravity loading\nTurn periodicity off\nRead the steady state solution and preset the displacement at the boundary\n\nIn practice, a sort of similar idea as in this Mastodon example where a csv file is used in a PresetAcceleration.... Except here the solution is nodal and not just a scalar...\nBut still, this solution sounds wrong and bad, writing out of MOOSE to read in again. I feel like there should be a way to extract the solution at a given timestep and given boundary, and preset it as a BC. All of that without I/O external to MOOSE.\nMaybe there is something to do with a ADFunctionDirichletBC-like object but where the extracted time step at the boundary would be passed? Like a PostprocessorDirichletBC? But I can't find a way to extract my time step at boundary...\nAny help/advice would be much appreciated! Thank you a lot in advance!",
          "url": "https://github.com/idaholab/moose/discussions/21072",
          "updatedAt": "2022-06-15T06:14:58Z",
          "publishedAt": "2022-05-23T16:19:35Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere are a few options.\nIf you are ok with running both systems every time you may want to do a MultiApp setup.\nThe steady state will be a MultiApp and the transient solve will be the parent app. The steady state simulation will be executed at the beginning of the transient solve.\nThen you integrate the steady state solution on both sides, using this for example\nhttps://mooseframework.inl.gov/source/postprocessors/SideIntegralVariablePostprocessor.html\nThen you transfer the output of this integration to a Receiver using these\nhttps://mooseframework.inl.gov/source/transfers/MultiAppPostprocessorTransfer.html\nhttps://mooseframework.inl.gov/source/postprocessors/Receiver.html\nThen you use a PostprocessorDirichletBC if that is how this information is used in the transient solve boundaries.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2807905",
                  "updatedAt": "2022-05-23T23:30:44Z",
                  "publishedAt": "2022-05-23T23:30:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @GiudGiud ! Thank you a lot, I'll try that! And I think I understand there is apparently no way to prescribe nodal BCs at the boundary, it must be a scalar (here the integral of the solution at the boundary)?",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2809165",
                          "updatedAt": "2022-05-24T05:45:05Z",
                          "publishedAt": "2022-05-24T05:44:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "After some work on your suggestions (thanks again!) I realize the steady state + integral and all the resulting operations (in the parent app) are applied at each timestep of the transient evolution. However, it only takes one step for the steady state to be solved. It is inefficient to compute n times the same solution, but there is probably a part that I'm missing/misunderstood? Thank you for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2810418",
                          "updatedAt": "2022-05-24T08:57:00Z",
                          "publishedAt": "2022-05-24T08:57:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yes you can set execute_on = initial on the multi app block for the steady state",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2811162",
                          "updatedAt": "2022-05-24T11:01:31Z",
                          "publishedAt": "2022-05-24T11:01:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Oh yes I forgot about that one, thank you a lot! I'll to get this pipeline to work!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2811473",
                          "updatedAt": "2022-05-24T12:00:02Z",
                          "publishedAt": "2022-05-24T11:59:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @GiudGiud,  I have some time to work on this now again, and I think I'm making good progress into a multiApp to feed the steady state solution into the BC of the transient. However:\n\nIn practice, a sort of similar idea as in this Mastodon example where a csv file is used in a PresetAcceleration.... Except here the solution is nodal and not just a scalar...\n\nAny ideas on this? You proposed using a https://mooseframework.inl.gov/source/postprocessors/SideIntegralVariablePostprocessor.html but I would ultimately like to pass the nodal values more than a scalar if possible?\nThank you a lot for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2906394",
                          "updatedAt": "2022-06-08T14:23:07Z",
                          "publishedAt": "2022-06-08T14:23:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It's possible.\nYou just need to restrict a field transfer to a boundary, which will soon be straightforward but currently is not.\nI see a few options:\n\n\nuse a nearest node transfer with the boundary parameters\nhttps://mooseframework.inl.gov/source/transfers/MultiAppNearestNodeTransfer.html\n\n\nuse a NodalValueSampler https://mooseframework.inl.gov/source/vectorpostprocessors/NodalValueSampler.html and save all the boundary values that you care about. Then transfer this vpp using this https://mooseframework.inl.gov/source/transfers/MultiAppVectorPostprocessorTransfer.html then write a custom auxkernel to move data from this VPP to your auxvariable. If it's a nonlinear variable instead it wont work",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2906779",
                          "updatedAt": "2022-06-08T15:15:51Z",
                          "publishedAt": "2022-06-08T15:15:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Great thank you a lot for those/this option.s!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2906890",
                          "updatedAt": "2022-06-08T15:29:39Z",
                          "publishedAt": "2022-06-08T15:29:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "AdrienWehrle"
                  },
                  "bodyText": "Hi @GiudGiud,\nI could implement the different points you shared to make a multiApp feeding the steady state solution into the BC of the transient. With a side integral for the moment.\nI'm running transient_parent.i that uses steady_subapp.i and mesh.e. With cAr.sh which is a -dummy- wrapper for compilation and run, used here with ./cAr.sh -i transient_parent.i -c false -b 11.\nHowever I get the following error:\n*** ERROR ***\nUnable to locate object: .\nI found this issue but somehow can't understand because I don't see any multi_app parameter here... I struggle understanding this issue that I don't find extremely obvious, could you help on that? Is it because the default matching app_type is not found?\nThank you a lot for your help!",
                  "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2906998",
                  "updatedAt": "2022-06-08T15:42:26Z",
                  "publishedAt": "2022-06-08T15:40:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Some parameter check must be failing in an obscure way. If you run this in a debugger it should point you to the object involved",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2907059",
                          "updatedAt": "2022-06-08T15:45:37Z",
                          "publishedAt": "2022-06-08T15:45:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "I am unfortunately a bit stuck in the debugging... I use gdb and set a breakpoint on abort, but then don't really know which variables to check.\nHere is the gdb log:\n*** ERROR ***\nUnable to locate object: .\n\nStack frames: 15\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: void mooseError<char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [2]>(char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [2])\n3: MooseObjectWarehouseBase<MultiApp>::getObject(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const\n4: FEProblemBase::getMultiApp(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n5: FEProblemBase::addTransfer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters&)\n6: AddTransferAction::act()\n7: Action::timedAct()\n8: ActionWarehouse::executeActionsWithAction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n9: ActionWarehouse::executeAllActions()\n10: MooseApp::runInputFile()\n11: MooseApp::run()\n12: /home/guschti/COEBELI/COEBELI_modelling/moose_projects/kiliffak/mastodon-dbg(+0xa7fb) [0x55555555e7fb]\n13: __libc_start_main\n14: /home/guschti/COEBELI/COEBELI_modelling/moose_projects/kiliffak/mastodon-dbg(+0xa089) [0x55555555e089]\n\nThread 1 \"mastodon-dbg\" hit Breakpoint 1, 0x00007fffe65af880 in PMPI_Abort ()\n   from /home/guschti/mambaforge3/envs/moose/lib/libmpi.so.12\nWhat I understand from the log is the problem is definitely coming from my transfer object trying to link to the subapp but fails, as expected initially.",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2912335",
                          "updatedAt": "2022-06-09T10:04:55Z",
                          "publishedAt": "2022-06-09T10:04:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Can you paste the transfer and multi app blocks here?\n\nLooks like that s where the problem is.\nIt might be due to the migration to the to_/from_multiapp parameter let\u2019s check\n\u2026\n Le 9 juin 2022 \u00e0 04:05, Adrien Wehrl\u00e9 ***@***.***> a \u00e9crit :\n\n \ufeff\n I am unfortunately a bit stuck in the debugging... I use gdb and set a breakpoint on abort, but then don't really know which variables to check.\n\n Here is the gdb log:\n\n *** ERROR ***\n Unable to locate object: .\n\n Stack frames: 15\n 0: libMesh::print_trace(std::ostream&)\n 1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n 2: void mooseError<char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [2]>(char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [2])\n 3: MooseObjectWarehouseBase<MultiApp>::getObject(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const\n 4: FEProblemBase::getMultiApp(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n 5: FEProblemBase::addTransfer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters&)\n 6: AddTransferAction::act()\n 7: Action::timedAct()\n 8: ActionWarehouse::executeActionsWithAction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n 9: ActionWarehouse::executeAllActions()\n 10: MooseApp::runInputFile()\n 11: MooseApp::run()\n 12: /home/guschti/COEBELI/COEBELI_modelling/moose_projects/kiliffak/mastodon-dbg(+0xa7fb) [0x55555555e7fb]\n 13: __libc_start_main\n 14: /home/guschti/COEBELI/COEBELI_modelling/moose_projects/kiliffak/mastodon-dbg(+0xa089) [0x55555555e089]\n\n Thread 1 \"mastodon-dbg\" hit Breakpoint 1, 0x00007fffe65af880 in PMPI_Abort ()\n    from /home/guschti/mambaforge3/envs/moose/lib/libmpi.so.12\n What I understand from the log is the problem is definitely coming from my transfer object trying to link to the subapp but fails, as expected initially.\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n You are receiving this because you were mentioned.",
                  "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2913654",
                  "updatedAt": "2022-06-09T13:27:37Z",
                  "publishedAt": "2022-06-09T13:27:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @GiudGiud,\nI could implement the different points you shared to make a multiApp feeding the steady state solution into the BC of the transient. With a side integral for the moment.\nI'm running transient_parent.i that uses steady_subapp.i and mesh.e. With cAr.sh which is a -dummy- wrapper for compilation and run, used here with ./cAr.sh -i transient_parent.i -c false -b 11.\nHowever I get the following error:\n*** ERROR ***\nUnable to locate object: .\nI found this issue but somehow can't understand because I don't see any multi_app parameter here... I struggle understanding this issue that I don't find extremely obvious, could you help on that? Is it because the default matching app_type is not found?\nThank you a lot for your help!\n\nAs specified above through hyperlinks, everything that can be used to reproduce the error is here:\nhttps://github.com/AdrienWehrle/moose/tree/next/examples/ex25_multiapp\n\nCan you paste the transfer and multi app blocks here?\n\nYou can find them here: https://github.com/AdrienWehrle/moose/blob/next/examples/ex25_multiapp/transient_parent.i#L443-L464",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2913690",
                          "updatedAt": "2022-06-09T13:31:29Z",
                          "publishedAt": "2022-06-09T13:31:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hi Adrien\nYou are using an old MOOSE base. I would rebase on the new upstream/master and update libmesh as well.\nMy guess is that you are hitting errors possibly because an incorrect transition from getMultiApp() routines to getFrom/ToMultiApp()\nI cant build your example to look at it because of this.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2917864",
                          "updatedAt": "2022-06-09T23:13:39Z",
                          "publishedAt": "2022-06-09T23:13:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it rebased fine actually and building now",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2917869",
                          "updatedAt": "2022-06-09T23:15:38Z",
                          "publishedAt": "2022-06-09T23:15:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Your input file (in ex25) runs fine with the new moose and the new mastodon\nYou just need to add    reduction_type = 'average'\nto your two transfers in the example",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2918137",
                          "updatedAt": "2022-06-10T00:21:13Z",
                          "publishedAt": "2022-06-10T00:21:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @GiudGiud ! Thank you a lot. Indeed, it also works for me now. I struggled for a couple of hours because my MASTODON was out of sync but it all works now.\nFinal task where I'm struggling is to set the Dirichlet BC at the node level.\nYou suggested to\n\nuse a nearest node transfer with the boundary parameters\nhttps://mooseframework.inl.gov/source/transfers/MultiAppNearestNodeTransfer.html\n\nwhich I implemented here, and further stored the resulting variable as AuxVariables here. However, then I can't find how to feed those AuxVariables into a BC. Based on what I've found so far, I am not even sure it's possible to set a dirichlet BC at the node level... Any thoughts on this?\nI found https://mooseframework.inl.gov/source/transfers/MultiAppVariableValueSamplePostprocessorTransfer.html , better, but this is still at the element level only, and not nodal.\nThank you a lot for your very precious help!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2923748",
                          "updatedAt": "2022-06-10T14:53:34Z",
                          "publishedAt": "2022-06-10T14:53:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So since the data is in an auxiliary variable right now, we need some sort of CoupledDirichletBC that uses the coupleable interface to get the value of the auxxiliary variable at each local qp.\nI dont see one in the framework, but I do see a coupledVarNeumannBC and regular dirichletBCs.\nCould you try to make the coupledDirichletBC from there?",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2925128",
                          "updatedAt": "2022-06-10T17:59:58Z",
                          "publishedAt": "2022-06-10T17:59:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Could you try to make the coupledDirichletBC from there?\n\nI would be happy to try, yes, I will let you know how it goes! Thanks a lot.",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2927359",
                          "updatedAt": "2022-06-11T06:00:01Z",
                          "publishedAt": "2022-06-11T06:00:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @GiudGiud ! I ended up with an implementation that compiles successfully but being a new user of MOOSE I'm not sure of what I did at all. E.g. not sure CoupledVarDirichletBC should inherit from DirichletBCBase although it sounds like a good idea since the latter itself inherits from NodalBC, and I want to specify values at the node level. I brought the source and header file here: https://github.com/AdrienWehrle/moose/tree/next/examples/CoupledVarDirichletBC_dev (some variables in the header are not used in the source but for the moment I'm working mainly on the content rather than the form, which I will improve later).\nI get somehow expected results but not completely (e.g. a weird small artifact of higher displacement in the next face parallel to the boundary in the domain as visible in the screenshot on the lower boundary).\n\nOnce I get to something I trust I will make a proper PR but just wanted to have your take on it before proposing something officially, if possible!\nThank you a lot for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2948290",
                          "updatedAt": "2022-06-14T15:20:45Z",
                          "publishedAt": "2022-06-14T15:19:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "CoupledVarDirichletBC inheriting from DirichletBCBase looks good to me.\nDoes the artefact go away with refinement?",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2948839",
                          "updatedAt": "2022-06-14T16:15:46Z",
                          "publishedAt": "2022-06-14T16:15:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Does the artefact go away with refinement?\n\nIt looks like it did, yes! Or I mean, the interpolation on a coarse grid clearly amplified it. Thank you a lot for your precious help on this, I will propose a PR very soon for CoupledVarDirichletBC!",
                          "url": "https://github.com/idaholab/moose/discussions/21072#discussioncomment-2952987",
                          "updatedAt": "2022-06-15T06:13:53Z",
                          "publishedAt": "2022-06-15T06:13:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Unit and grammatical problems of elastic tensor",
          "author": {
            "login": "biaogxb"
          },
          "bodyText": "Hello, I am coupling phase field and elastic energy, and I have encountered two problems:\n1.I use the following formula to calculate cijkl in ComputeElasticityTensor\uff0c\n\nand E\uff084.9Gpa\uff09 is the Young's modulus; v\uff080.36\uff09 is the Poisson's ratio\uff0cWhat should be the input unit for Young's modulus\uff08Gpa or pa\uff1f\uff09 calculation in MOOSE\uff1f\nI use Pa as the unit, and the code is as follows\uff1a\n[./Stiffness_matrix] type = ComputeElasticityTensor C_ijkl = '8.232e9 4.632e9 4.632e9 8.232e9 4.632e9 8.232e9 1.8e9 1.8e9 1.8e9' fill_method = symmetric9 [../]\n2.I use ComputeVariableEigenstrain to calculate the strain, but I don't know how to fill in \u201ceigen_base\u201d \uff0cThe references I refer to for this part of the calculation are as follows\uff1a\nthe elastic stain tensor is\n\n\nWhether this \u201ceigen_base\u201d is filled with the value of \u03bb\uff081.2.3\uff09, and whether the unit of the value of  \u03bb\uff081.2.3\uff09is pa or Gpa\uff1f\nI use Gpa as the unit to fill in the following code. I don't know whether it is correct\uff1f\n  [./eigen_strain] type = ComputeVariableEigenstrain eigen_base = '-0.866e-3 0 0 0 -0.773e-3 0 0 0 -0.529e-3' prefactor = h args = eta eigenstrain_name = 'eigenstrain' [../]\nHere is the original text of this article\n1-s2.0-S0013468618302809-main.pdf\nCan someone help me? Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/21282",
          "updatedAt": "2022-06-15T02:09:22Z",
          "publishedAt": "2022-06-13T09:37:24Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "biaogxb"
                  },
                  "bodyText": "Because my length unit is micrometer, but Pa includes meter, so I need to multiply E-6 to convert the unit, right\uff1f",
                  "url": "https://github.com/idaholab/moose/discussions/21282#discussioncomment-2944176",
                  "updatedAt": "2022-06-14T06:18:40Z",
                  "publishedAt": "2022-06-14T06:18:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "This is not necessarily true, and is probably false.  The fundamental point is to make all the units in your input file consistent (eg, do not use Pa somewhere and GPa somewhere else).  You may find the section \"An essay on Pascals, kilograms and densities\" in https://mooseframework.inl.gov/source/materials/PorousFlowSingleComponentFluid.html useful.  Although that essay is written in the context of PorousFlow, it may help clarify your thoughts, specifically around using Pascals rather than kg as your fundamental unit.",
                          "url": "https://github.com/idaholab/moose/discussions/21282#discussioncomment-2944383",
                          "updatedAt": "2022-06-14T07:00:33Z",
                          "publishedAt": "2022-06-14T07:00:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "biaogxb"
                          },
                          "bodyText": "Thank you, I will study this\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/21282#discussioncomment-2944412",
                          "updatedAt": "2022-06-14T07:05:17Z",
                          "publishedAt": "2022-06-14T07:05:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'll add that the units in the input file have to be consistent with the mesh as well. The easiest way is to just use SI units for everything",
                          "url": "https://github.com/idaholab/moose/discussions/21282#discussioncomment-2948975",
                          "updatedAt": "2022-06-14T16:34:09Z",
                          "publishedAt": "2022-06-14T16:34:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "biaogxb"
                          },
                          "bodyText": "thank you\uff01I decided to use the SI for my input file.",
                          "url": "https://github.com/idaholab/moose/discussions/21282#discussioncomment-2951950",
                          "updatedAt": "2022-06-15T02:09:23Z",
                          "publishedAt": "2022-06-15T02:09:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Non-affine displacement implementation",
          "author": {
            "login": "Leni-Yeo"
          },
          "bodyText": "Good morning,\nI have a question regarding the type of displacements/deformations that MOOSE applies in the running. I am using either \"PresetVelocity' or 'Pressure' boundary condition on top to induce uniaxial-compression with no flux or displacements at the remaining boundaries (disp_y exist at left and right); and both of them are resulting in affine deformation. For example, in case of the attached images from initial to deformed configurations, the two balls should displace downward first to the bottom before deforming. Instead they are simply deforming with the mesh after the first step. How do I apply a cylinder-piston type compression boundary condition to compress the balls with non-affine deformation?\nI am already using the Crow app for kernels and such\nAffine_Files.zip\n.",
          "url": "https://github.com/idaholab/moose/discussions/21286",
          "updatedAt": "2022-06-15T01:04:57Z",
          "publishedAt": "2022-06-13T17:29:27Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@jiangwen84 @laagesen",
                  "url": "https://github.com/idaholab/moose/discussions/21286#discussioncomment-2941793",
                  "updatedAt": "2022-06-13T20:44:36Z",
                  "publishedAt": "2022-06-13T20:44:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Afraid I am not much help here, sorry...",
                          "url": "https://github.com/idaholab/moose/discussions/21286#discussioncomment-2942543",
                          "updatedAt": "2022-06-13T23:26:15Z",
                          "publishedAt": "2022-06-13T23:26:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "@SudiptaBiswas should know this better.",
                          "url": "https://github.com/idaholab/moose/discussions/21286#discussioncomment-2942557",
                          "updatedAt": "2022-06-13T23:29:44Z",
                          "publishedAt": "2022-06-13T23:29:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "Are you expecting that the particles would drop to the bottom boundary? I don't think you can do that with the coupled phase-field- mechanics approach. You will have to generate the initial condition you want before hand for that.",
                          "url": "https://github.com/idaholab/moose/discussions/21286#discussioncomment-2951434",
                          "updatedAt": "2022-06-14T23:46:39Z",
                          "publishedAt": "2022-06-14T23:46:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Leni-Yeo"
                          },
                          "bodyText": "@SudiptaBiswas Hi, yes that's what I initially thought would happen when I set that up, so I thought maybe I was missing something in general. But, I understand what you mean. I will start at an appropriate initial condition as you suggested.",
                          "url": "https://github.com/idaholab/moose/discussions/21286#discussioncomment-2951692",
                          "updatedAt": "2022-06-15T01:02:32Z",
                          "publishedAt": "2022-06-15T01:02:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "xdr support",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "I am (attempting) to install moose without the benefit of being able to pull moose-tools (cannot access inl.gov domain to pull). I get an error trying to install libmesh using the ubpdate_and_install_libmesh.sh script: \"XDR was not found but --enable-xdr-required was specified\". I have not been able to find out what \"xdr\" refers to. Where can I find this package or source code and install it?",
          "url": "https://github.com/idaholab/moose/discussions/21302",
          "updatedAt": "2022-06-25T05:46:42Z",
          "publishedAt": "2022-06-14T20:33:48Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is the checkpoint system. Please check these posts for solutions:\n#20711\n#16529\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21302#discussioncomment-2950847",
                  "updatedAt": "2022-06-14T21:22:11Z",
                  "publishedAt": "2022-06-14T21:22:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Thanks. Yeah I had traced this to libtirpc. We are fring up a new cluster\nso all the bits and pieces are not there yet.\n\n\nCheers,\nOlle\n\u2026\nOn Tue, Jun 14, 2022 at 4:22 PM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n This is the checkpoint system. Please check these posts for solutions:\n #20711 <#20711>\n #16529 <#16529>\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21302 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEF3RBE4G6GFIIL7QJALVPDZYZANCNFSM5YY7NZ5A>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/21302#discussioncomment-2950950",
                  "updatedAt": "2022-06-14T21:40:12Z",
                  "publishedAt": "2022-06-14T21:40:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}