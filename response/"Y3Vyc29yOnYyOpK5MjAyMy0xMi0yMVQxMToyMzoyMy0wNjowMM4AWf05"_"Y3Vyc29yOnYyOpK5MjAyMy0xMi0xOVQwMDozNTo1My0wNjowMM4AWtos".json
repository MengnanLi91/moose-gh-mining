{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMi0xOVQwMDozNTo1My0wNjowMM4AWtos"
    },
    "edges": [
      {
        "node": {
          "title": "How to change the peridynamic weight function?",
          "author": {
            "login": "andrisfreimanis"
          },
          "bodyText": "Dear All,\nI want to use the small strain H1NOSPD with a different weight function. Currently, the weight function is hard coded as weight_nb = _horizon_radius[_qp] / origin_vec_nb.norm();, and it appears in the loop calculating the shape and deformation tensor and in _multi[_qp].\nI changed it to std::pow(_horizon_radius[_qp] / origin_vec_nb.norm(), 2.0); and the Jacobian tests failed. I expected that failure and strain tests would fail as their results are compared against gold files, which have a different weight function. But why would Jacobian tests fail? As I understand, in jacobian tests, the hand-coded Jacobian is compared against a finite difference Jacobian from PETSC. The change in the weight function should not affect Jacobian tests. Am I misunderstanding something here?\nWhat would be the best way to change the weight function?\nBest regards\nAndris",
          "url": "https://github.com/idaholab/moose/discussions/26386",
          "updatedAt": "2023-12-21T12:30:05Z",
          "publishedAt": "2023-12-21T10:51:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nMy guess would first be that it s hardcoded some place. I see it in both the materials and the kernels involved\n@hchen139 will have more insights\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26386#discussioncomment-7917547",
                  "updatedAt": "2023-12-21T11:54:14Z",
                  "publishedAt": "2023-12-21T11:54:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "andrisfreimanis"
                  },
                  "bodyText": "Thanks, Guillaume.\nTook a closer look at the kernel and it is also hard coded there in nonlocal and nonlocal off-diagonal contributions. Changed those and the jacobian tests pass.\nAndris",
                  "url": "https://github.com/idaholab/moose/discussions/26386#discussioncomment-7917882",
                  "updatedAt": "2023-12-21T12:29:58Z",
                  "publishedAt": "2023-12-21T12:29:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Running and debugging MOOSE from vs code or visual studio",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nCan I run and debug MOOSE using vs code and/or visual studio? I knew that people use vs code for running and debugging on Linux through windows whether the project is stored on the local machine or on online. I was hoping the same for MOOSE but I am having some trouble. Is there a specific step-by-step procedure to do that? did anyone try to use vs code or visual studio to run ad debug moose application?\nAnother issue, I tried to use the GDB on one example, I followed the instruction in this page, whenever I tried to put a breakpoint at MPI_Abort, it gives this message,\n(gdb) b MPI_Abort\nFunction \"MPI_Abort\" not defined.\nMake breakpoint pending on future shared library load? (y or [n])\nThanks in advance.",
          "url": "https://github.com/idaholab/moose/discussions/18600",
          "updatedAt": "2023-12-21T02:04:32Z",
          "publishedAt": "2021-08-13T05:54:54Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "Reply only the second part of your questions: did you try run the example with something like mpirun -np 2 ...? I am asking to make sure you indeed have MPI library linked in.",
                  "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1188304",
                  "updatedAt": "2022-06-13T21:52:19Z",
                  "publishedAt": "2021-08-16T05:54:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Yes, it can run on multiple cores when I used mpirun -np ....., however, when I use ./run_mytest -j nprocs -i -mtinput_file.i, it just runs over one core. I think this is the problem, but I do not know how to fix it. So, if you please can give a pointer, it will be great.\nAbdo.",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1189256",
                          "updatedAt": "2022-06-13T21:52:20Z",
                          "publishedAt": "2021-08-16T10:32:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@permcody @friedmud know of any users on VS?",
                  "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1190391",
                  "updatedAt": "2022-06-13T21:52:21Z",
                  "publishedAt": "2021-08-16T14:35:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "@dylanjm and @dschwen were working on using MOOSE / MOOSE apps with visual studio at one point in FY20 I think.",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1198345",
                          "updatedAt": "2022-06-13T21:52:21Z",
                          "publishedAt": "2021-08-18T04:18:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "doquang"
                          },
                          "bodyText": "@dylanjm and @dschwen were working on using MOOSE / MOOSE apps with visual studio at one point in FY20 I think.\n\nCan we compile Moose with visual studio as a native code, or we use visual studio for Moose on WSL?",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1198660",
                          "updatedAt": "2022-06-13T21:52:21Z",
                          "publishedAt": "2021-08-18T05:58:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Can we compile Moose with visual studio as a native code, or we use visual studio for Moose on WSL?\n\nUse WSL. We rely heavily on Posix compatibility. Native Windows has a very different API.",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1203398",
                          "updatedAt": "2022-06-13T21:52:21Z",
                          "publishedAt": "2021-08-18T22:07:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@fdkong any of your ORNL colleagues working with VS?\n@dschwen ping again for the OP's question specifically",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1213155",
                          "updatedAt": "2022-06-17T15:39:30Z",
                          "publishedAt": "2021-08-20T16:16:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "No, he does not do any development at all. He is kind of an end-user.",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1213901",
                          "updatedAt": "2022-06-17T15:39:30Z",
                          "publishedAt": "2021-08-20T18:53:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "permcody"
                  },
                  "bodyText": "Another good solution for Windows users is deploying MOOSE applications in a Docker container. This is something we may look at in the near future.",
                  "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1213926",
                  "updatedAt": "2022-06-13T21:52:29Z",
                  "publishedAt": "2021-08-20T18:59:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "friedmud"
                  },
                  "bodyText": "I think the only viable path, for now, is using WSL... and that means not using VS.  We have had several people report that WSL works.",
                  "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-1213937",
                  "updatedAt": "2022-06-13T21:52:30Z",
                  "publishedAt": "2021-08-20T19:03:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Hejie-Guo"
                  },
                  "bodyText": "\"(gdb) b MPI_Abort\nFunction \"MPI_Abort\" not defined.\nMake breakpoint pending on future shared library load? (y or [n])\"\nCan anyone answer the question?",
                  "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-7913537",
                  "updatedAt": "2023-12-21T01:29:52Z",
                  "publishedAt": "2023-12-21T01:29:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "press y for yes and it will break as expected",
                          "url": "https://github.com/idaholab/moose/discussions/18600#discussioncomment-7913701",
                          "updatedAt": "2023-12-21T02:04:33Z",
                          "publishedAt": "2023-12-21T02:04:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "accessing material property from interface kernel",
          "author": {
            "login": "schakrabortygithub"
          },
          "bodyText": "Hi,\nI am trying to write an interface kernel for which I need the material property values inside the element not at the element faces. Similarly for the neighbor side.\nBased on my understanding, when we try to access any material property using '_MyProperty(getMaterialProperty(\"property_name\"))' it provides the corresponding material property based on the consuming object. If the consuming object is a 'Kernel' then it is evaluated at the present working integration points i.e, inside the element. If it is a boundary kernel then at the face of the element.\nHow can I access the material property(volume averaged) at the inside of element while operating on a boundary or interface kernel?\nBest\nSubhendu",
          "url": "https://github.com/idaholab/moose/discussions/26372",
          "updatedAt": "2023-12-20T22:13:12Z",
          "publishedAt": "2023-12-19T15:45:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nSo when you say inside the element, where inside the element? At the center?\nWhen we do element integration loops (kernels) we compute material properties at the quadrature points in the element. Similarly here, the interface kernel loop is looking at quadrature points on the face of the element on the boundary of interest.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7899765",
                  "updatedAt": "2023-12-19T16:34:54Z",
                  "publishedAt": "2023-12-19T16:34:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It sounds like he wants volume averaged. We don't support this in a \"standard\" way, but you could loosely achieve what you want by writing your own object, using the Functor system, and evaluating the functors with ElemArg. The ElemArg result would likely not represent a volume-average though; more like a centroid evaluation",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7899844",
                          "updatedAt": "2023-12-19T16:43:38Z",
                          "publishedAt": "2023-12-19T16:42:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "with a little templating logic, one could write the ElemArg to be a volume averaging of the material property. I've done this sort of the 'special' behavior for certain functor arguments in the FunctorSmoother.\nI agree using the Functor system to write a functor material property instead of a regular material property will let you do this sort of non/less-local evaluations much easier",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7899883",
                          "updatedAt": "2023-12-19T16:45:18Z",
                          "publishedAt": "2023-12-19T16:45:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "Hi @GiudGiud and @lindsayad ,\nJust to clarify the problem, I am working on a kernel and interface_kernel where material properties (second_piola_kirchhoff_stress) are obtained from the class 'ComputeMultipleCrystalPlasticityStress'. That class seems not to support the computation of material property for element-faces(_bnd=1) or face-neighbor(_neighbor=1).\nhttps://github.com/idaholab/moose/blob/c3a71595d3d6151111d0a65bdc32d8cfe11b57c1/modules/tensor_mechanics/src/materials/crystal_plasticity/ComputeMultipleCrystalPlasticityStress.C#L201C1-L204C1\nI was wondering if while operating on the interface kernel, I can access those properties at the element gauss points (not on element-face GPs) so that I can compute the volume average value of that property on that element and use it as approximation for the element faces.",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7900235",
                          "updatedAt": "2023-12-19T17:21:38Z",
                          "publishedAt": "2023-12-19T17:21:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Hmm that's a pretty complex material class. I'm not sure we'd want to write a FunctorMaterial equivalent for it without first considering other options. Perhaps a first question would be why only volumetric material calculations are supported for that class. @dewenyushu @sapitts ?",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7900427",
                          "updatedAt": "2023-12-19T17:44:43Z",
                          "publishedAt": "2023-12-19T17:44:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "We (at least myself) have not met cases where other types of material property (in addition to volumetric) is required in the crystal plasticity material classes. I do not see obvious reasons why we should not support it, though.",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7911064",
                          "updatedAt": "2023-12-20T18:09:00Z",
                          "publishedAt": "2023-12-20T18:09:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "I agree with @dewenyushu about no obvious reason not to support the interface options in the crystal plasticity class. I suspect that the error is a hold over from the older user object implementation. There might be some hidden reason (e.g. grain boundary mechanics) lurking in the background, but I don't think that's a showstopper--just a corner case that would need to be properly supported.",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7911436",
                          "updatedAt": "2023-12-20T18:58:15Z",
                          "publishedAt": "2023-12-20T18:58:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So @schakrabortygithub I would try removing that early return in the material class and see if you can use the face-qp material property evaluations in your interface kernel",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7911877",
                          "updatedAt": "2023-12-20T20:02:48Z",
                          "publishedAt": "2023-12-20T20:02:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "@dewenyushu  Here is one example where we need those material properties from the boundary and interface kernel:\nWe are developing a dislocation transport based crystal plasticity material model. In this model, dislocations evolve via transport (advection kind of model) within the grain and also there is transfer across the Grain Boundary(GB). Among others, there's a material class inherited from 'CrystalPlasticityStressUpdateBase' that compute the dislocation velocity vector which needs resolved shear stress as input. The flux across the GB depends on the local resolved shear stress via dislocation velocity. This transfer across GB is implemented as an interface kernel. That's where we need those material properties for the element-face and face-neighbor. We can always approximate those values with volumetric value in the current element and the neighbor element of the current element-face as long as those material properties are accessible within the interface kind of kernel.",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7912558",
                          "updatedAt": "2023-12-20T21:51:40Z",
                          "publishedAt": "2023-12-20T21:51:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "@lindsayad that will be good.\nI also tried to remove that early return and let those properties get computed for _bnd and _neighbor as well. At the onset of plasticity, volumetric stress converges but stress update loop for face throws an error \"ComputeMultipleCrystalPlasticityStress: Constitutive failure\".",
                          "url": "https://github.com/idaholab/moose/discussions/26372#discussioncomment-7912680",
                          "updatedAt": "2023-12-20T22:13:12Z",
                          "publishedAt": "2023-12-20T22:13:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Add a new element type",
          "author": {
            "login": "tctheodosiou"
          },
          "bodyText": "Hi all,\nWhen generating a mesh with GeneretedMeshGenerator, I can choose one of the element type available (EDGE, QUAD etc.), as defined by libmesh. Is it possible to define my own element types? I mean something like UEL in Abaqus.\nThe use of GeneretedMeshGenerator is not mandatory; I could use a different Mesh Generator, an external mesh, whatever is needed.",
          "url": "https://github.com/idaholab/moose/discussions/26378",
          "updatedAt": "2023-12-20T11:20:36Z",
          "publishedAt": "2023-12-20T07:13:50Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNo you cannot unless you implemented it in the GeneratedMeshGenerator.\nBut if you do implement it I would recommend you create a new mesh generator for that\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26378#discussioncomment-7907109",
                  "updatedAt": "2023-12-20T11:11:25Z",
                  "publishedAt": "2023-12-20T11:11:23Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "tctheodosiou"
                  },
                  "bodyText": "Thank you.",
                  "url": "https://github.com/idaholab/moose/discussions/26378#discussioncomment-7907196",
                  "updatedAt": "2023-12-20T11:20:31Z",
                  "publishedAt": "2023-12-20T11:20:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Material Properties through CSV",
          "author": {
            "login": "manikumd22"
          },
          "bodyText": "I am new to MOOSE and C++, I am struggling with the problem like reading the CSV file and then using the values in the material. I am reading strain CSV file and I am using it to calculate _S[_qp] every gauss point. Is it correct way to write it. Please let me know\n#### Reading the CSV file to get _S[_qp]\n\nA = Strain.xlsx['Sheet1']\nA1 = Strain.xlsx['Sheet2']\n\n\n## Mathemtics to calculate _S[_qp]\nB = A*_F[_qp]\n_S[_qp] = A1*B\n\nThis is what I want to, and thus i define the the params\n\n  params.addParam<MaterialPropertyName>(\"strain_excel\",\"This strain will be used to calculate the stress tensor\");\n\nand then \n_strain_excel(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"strain_excel\")))\n\n\nBut I don't know how to incorporate this in the calculation in the code. If someone please help me with this, it would be great\n\n\nInputParameters\nComputeNeoHookeanStress::validParams()\n{\n  InputParameters params = ComputeLagrangianStressPK2::validParams();\n\n  params.addParam<MaterialPropertyName>(\"lambda\",\n                                        \"lambda\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n  params.addParam<MaterialPropertyName>(\"mu\",\n                                        \"mu\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n\n  params.addParam<MaterialPropertyName>(\"strain_csv\",\"This strain will be used to calculate the stress tensor\");\n\n  return params;\n}\n\nComputeNeoHookeanStress::ComputeNeoHookeanStress(const InputParameters & parameters)\n  : ComputeLagrangianStressPK2(parameters),\n    _lambda(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"lambda\"))),\n    _mu(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"mu\")))\n    _strain_csv(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"strain_csv\")))\n\n{\n}\n\nvoid\nComputeNeoHookeanStress::computeQpPK2Stress()\n{\n  // Hyperelasticity is weird, we need to branch on the type of update if we\n  // want a truly linear model\n  //\n  // This is because we need to drop quadratic terms for the linear update\n  usingTensorIndices(i_, j_, k_, l_);\n\n  // Large deformation = nonlinear strain\n  if (_large_kinematics)\n  {\n    RankTwoTensor Cinv = (2 * _E[_qp] + RankTwoTensor::Identity()).inverse();\n    _S[_qp] = (_lambda[_qp] * log(_F[_qp].det()) - _mu[_qp]) * Cinv +\n              _mu[_qp] * RankTwoTensor::Identity();\n    _C[_qp] =\n        -2 * (_lambda[_qp] * log(_F[_qp].det()) - _mu[_qp]) * Cinv.times<i_, k_, l_, j_>(Cinv) +\n        _lambda[_qp] * Cinv.times<i_, j_, k_, l_>(Cinv);\n  }\n  // Small deformations = linear strain\n  else\n  {\n    const auto I = RankTwoTensor::Identity();\n    RankTwoTensor strain = 0.5 * (_F[_qp] + _F[_qp].transpose()) - I;\n    _C[_qp] = _lambda[_qp] * I.times<i_, j_, k_, l_>(I) +\n              2.0 * _mu[_qp] * RankFourTensor(RankFourTensor::initIdentitySymmetricFour);\n    \n### Mathemtics defined above\n\n    strain_PBC = _strain_csv\n    _S[_qp] = strain_PBC;\n  }\n}",
          "url": "https://github.com/idaholab/moose/discussions/26355",
          "updatedAt": "2023-12-22T00:20:04Z",
          "publishedAt": "2023-12-16T05:15:12Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf you just want to load quantities from CSV, you have to decide first what granularity you want for the data in the CSV.\nPer element? Per block? Per quadrature point?\nThen you can either load the CSV with a function (PropertyFileReader then PiecewiseConstantFromCSV) or using our DelimitedFileReader utility directly in your material\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7870028",
                  "updatedAt": "2023-12-16T09:10:50Z",
                  "publishedAt": "2023-12-16T09:10:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "manikumd22"
                  },
                  "bodyText": "Hi @GiudGiud\nAt every gauss point, it will do some calculation but the data in Excel file is constant for the whole iteration, at every gauss point _F[_qp] is varying and based on that it will carry out calculation\nA = Strain.xlsx['Sheet1']\nA1 = Strain.xlsx['Sheet2']\nMathemtics to calculate _S[_qp]\nB = A*_F[_qp]\n_S[_qp] = A1*B",
                  "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7872804",
                  "updatedAt": "2023-12-16T19:44:19Z",
                  "publishedAt": "2023-12-16T19:44:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok that works.\nwhat is this\nA = Strain.xlsx['Sheet1']\n\n? Is this how you do it in Python?\nDo you have the data tabulated by quadrature point right now?",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7873726",
                          "updatedAt": "2023-12-16T22:45:50Z",
                          "publishedAt": "2023-12-16T22:45:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "manikumd22"
                          },
                          "bodyText": "I want to calculate_S[_qp] using the mathematics described below, instead of this _S[_qp] = _C[_qp] * strain\nI have write this in python as I work on python,\nimport pandas as pd\nimport numpy as np\n\n# Apply activation functions to each intermediate result\ndef relu_activation(x):\n    return np.maximum(0, x)  # ReLU activation function\n\n\n\nX_normalized = _F[_qp]\n\n\nbias_weights_dict = pd.read_excel('biases_weights_data.xlsx', sheet_name=None)\n\n\nweights_layer1 = bias_weights_dict['weight1'].values\nweights_layer2 = bias_weights_dict['weight2'].values\nweights_layer3 = bias_weights_dict['weight3'].values\nweights_layer6 = bias_weights_dict['weight6'].values\n\n\n# Access specific columns from the selected sheet\nbias_fc1 = bias_weights_dict['bias1'].values\nbias_fc2 = bias_weights_dict['bias2'].values\nbias_fc3 = bias_weights_dict['bias3'].values\nbias_fc6 = bias_weights_dict['bias6'].values\n\n\n\n# Perform matrix multiplications\n\nS = np.dot(weights_layer1, X_normalized.T) + bias_fc1.reshape(-1, 1)  # Add bias for fc1\nS1 = np.dot(weights_layer2, S) + bias_fc2.reshape(-1, 1)  # Add bias for fc2\nS2 = np.dot(weights_layer3, S1) + bias_fc3.reshape(-1, 1)  # Add bias for fc3\n\n\n\nS = relu_activation(S)\nS1 = relu_activation(S1)\nS2 = relu_activation(S2)\n\n_S[_qp] = np.dot(weights_layer6, S2) + bias_fc6.reshape(-1, 1)\n\nThis is what want to do?\nHow can I do this\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7874063",
                          "updatedAt": "2023-12-17T01:06:20Z",
                          "publishedAt": "2023-12-17T00:50:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you ll have to re-code this in C++ if you want to do this calculation dynamically in your moose simulation (and not just pre-compute a quantity in python, save it to csv then read it in C++)\nI see relu in there, we also have an integration with libtorch",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7874105",
                          "updatedAt": "2023-12-17T01:07:50Z",
                          "publishedAt": "2023-12-17T01:07:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "manikumd22"
                          },
                          "bodyText": "Hi @GiudGiud\nI started with modifying the ComputerNeoHookean.C by inserting the CSV file, but I am getting an error. Can you please help with this. I want that _lambda_csv will read value from CSV file although it is constant for whole mesh but it will read through CSV file\nError:\n*** ERROR ***\n\n\ufffd[31m\n*** ERROR ***\nbasic_string::substr: __pos (which is 18446744073709551615) > this->size() (which is 4)\ufffd[39m\n\n\nI am attaching the CSV file, input file, .C file and .h file\nE_values.csv:\nE\n1.10E+06\n.i file:\n[Functions]\n  [element]\n    type = PiecewiseConstantFromCSV\n    read_prop_user_object = 'reader_element'\n    read_type = 'element'  # Adjust based on your data setup\n    column_number = '1'    # Assuming column 1 contains the lambda values\n  []\n[]\n\n[UserObjects]\n  [reader_element]\n    type = PropertyReadFile\n    prop_file_name = 'E_values.csv'  # Adjust this to your CSV file path\n    read_type = 'element'  # Adjust based on your data setup\n    nprop = 1  # Update this according to the number of columns in your CSV\n  []\n[]\n\n  [Materials]\n    [compute_stress]\n      type = ComputeNeoHookeanStress\n      _lambda_csv = element\n\n      mu = 8300.33333888888926\n    []\n    [compute_strain]\n      type = ComputeLagrangianStrain\n    []\n  []\n\n\n  \n\n  .C file:\n\n#include \"ComputeNeoHookeanStress.h\"\n\nregisterMooseObject(\"TensorMechanicsApp\", ComputeNeoHookeanStress);\n\nInputParameters\nComputeNeoHookeanStress::validParams()\n{\n  InputParameters params = ComputeLagrangianStressPK2::validParams();\n\n  params.addParam<MaterialPropertyName>(\"_lambda_csv\",\n                                        \"_lambda_csv\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n  params.addParam<MaterialPropertyName>(\"mu\",\n                                        \"mu\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n  return params;\n}\n\nComputeNeoHookeanStress::ComputeNeoHookeanStress(const InputParameters & parameters)\n  : ComputeLagrangianStressPK2(parameters),\n    _lambda_csv(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"_lambda_csv\"))),\n    _mu(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"mu\")))\n\n{\n}\n\nvoid\nComputeNeoHookeanStress::computeQpPK2Stress()\n{\n  // Hyperelasticity is weird, we need to branch on the type of update if we\n  // want a truly linear model\n  //\n  // This is because we need to drop quadratic terms for the linear update\n  usingTensorIndices(i_, j_, k_, l_);\n\n  // Large deformation = nonlinear strain\n  if (_large_kinematics)\n  {\n    RankTwoTensor Cinv = (2 * _E[_qp] + RankTwoTensor::Identity()).inverse();\n    _S[_qp] = 2.0*(_lambda_csv[_qp] * log(_F[_qp].det()) - _mu[_qp]) * Cinv +\n              _mu[_qp] * RankTwoTensor::Identity();\n    _C[_qp] =\n        2.0 * (_lambda_csv[_qp] * log(_F[_qp].det()) - _mu[_qp]) * Cinv.times<i_, k_, l_, j_>(Cinv) +\n        _lambda_csv[_qp] * Cinv.times<i_, j_, k_, l_>(Cinv);\n  }\n  // Small deformations = linear strain\n  else\n  {\n    const auto I = RankTwoTensor::Identity();\n    RankTwoTensor strain = 0.5 * (_F[_qp] + _F[_qp].transpose()) - I;\n    _C[_qp] = 2.0*_lambda_csv[_qp] * I.times<i_, j_, k_, l_>(I) +\n              2.0 * _mu[_qp] * RankFourTensor(RankFourTensor::initIdentitySymmetricFour);\n    _S[_qp] = _C[_qp] * strain;\n  }\n}\n  \n\n\n\n\n.h file:\n\n#pragma once\n\n#include \"ComputeLagrangianStressPK2.h\"\n\n/// Compressible Neo-Hookean hyperelasticity\n///\n///  Model follows from W = lambda / 2 * (ln J)^2 - mu * ln J + 1/2 * mu *\n///  (tr(C)- I)\n///\n///  with C = 1/2*(F.T*F-I) and J = det(F)\n///\nclass ComputeNeoHookeanStress : public ComputeLagrangianStressPK2\n{\npublic:\n  static InputParameters validParams();\n  ComputeNeoHookeanStress(const InputParameters & parameters);\n\nprotected:\n  /// Actual stress/Jacobian update\n  virtual void computeQpPK2Stress();\n\nprotected:\n  const MaterialProperty<Real> & _lambda_csv;\n  const MaterialProperty<Real> & _mu;\n};",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7874747",
                          "updatedAt": "2023-12-17T10:24:16Z",
                          "publishedAt": "2023-12-17T05:01:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "basic_string::substr: __pos (which is 18446744073709551615) > this->size() (which is 4)\ufffd[39m\n\nthis is an out of bounds access. If you compile in debug mode (METHOD=debug make -j6) you will get a line for this problem. Then you can fix that line",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7875896",
                          "updatedAt": "2023-12-17T10:25:18Z",
                          "publishedAt": "2023-12-17T10:24:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "manikumd22"
                          },
                          "bodyText": "Hi @GiudGiud\nI compiled METHOD=debug make -j6 and then I tried to run my code. But I'm getting same error\nI think I am facing an error because of this\n[Functions]\n[element]\ntype = PiecewiseConstantFromCSV\nread_prop_user_object = 'reader_element'\nread_type = 'element'  # Adjust based on your data setup\ncolumn_number = '1'    # Assuming column 1 contains the lambda values\n[]\n[]\n[UserObjects]\n[reader_element]\ntype = PropertyReadFile\nprop_file_name = 'E_values.csv'  # Adjust this to your CSV file path\nread_type = 'element'  # Adjust based on your data setup\nnprop = 1  # Update this according to the number of columns in your CSV\n[]\n[]\nIs it the correct way to import CSV file and in my CSV file there is just one column that corresponds to the E value with just 1 value.\nE\n1.10E+06",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7878209",
                          "updatedAt": "2023-12-17T17:25:46Z",
                          "publishedAt": "2023-12-17T17:20:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No your data is not tabulated by element so the PropertyFileReader is not well set up.\nThe data_type is probably block/subdomain not element",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7878518",
                          "updatedAt": "2023-12-17T18:25:57Z",
                          "publishedAt": "2023-12-17T18:25:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "manikumd22"
                          },
                          "bodyText": "Hi @GiudGiud\nCan you please tell me how to do it?\nI tried with block but still same error.\nCan you tell me what should be the format of csv file?\n [Functions]\n    [block]\n      type = PiecewiseConstantFromCSV\n      read_prop_user_object = 'reader_block'\n      read_type = 'block'\n      column_number = '1'\n    []\n  []\n\n  [UserObjects]\n    [reader_block]\n      type = PropertyReadFile\n      prop_file_name = 'E_values.csv'\n      read_type = 'block'\n      nprop = 1\n      nblock = 1\n    []\n  []\n\n  [Materials]\n    [compute_stress]\n      type = ComputeNeoHookeanStress\n      _lambda_csv = 'block'\n      mu = 8300.33333888888926\n    []\n    [compute_strain]\n      type = ComputeLagrangianStrain\n    []\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7878625",
                          "updatedAt": "2023-12-17T20:45:42Z",
                          "publishedAt": "2023-12-17T18:48:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How many blocks do you have in the simulation?\nHow many entries do you have in your file?",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7878991",
                          "updatedAt": "2023-12-17T19:58:26Z",
                          "publishedAt": "2023-12-17T19:58:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "manikumd22"
                          },
                          "bodyText": "Hi @GiudGiud\n\nI am not sure what does block means, if it means domain then for my whole domain, there is one block\nRight now there would be only one column (E values) to start with, but as I progresses I will modify",
                          "url": "https://github.com/idaholab/moose/discussions/26355#discussioncomment-7879332",
                          "updatedAt": "2023-12-17T20:46:33Z",
                          "publishedAt": "2023-12-17T20:46:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "CP outputs",
          "author": null,
          "bodyText": "Hello,\nWorking with Compute MultipleCrystalPlasticityStress and CrystalPlasticityStressUpdateBase, I see how I can get the slip increments (\\Delta \\gamma) as an output, but is there a way to get the cumulated slip rate or the plastic velocity gradient (Lp) directly or should I assign a new attribute with these values? thank you.",
          "url": "https://github.com/idaholab/moose/discussions/26349",
          "updatedAt": "2023-12-19T21:25:54Z",
          "publishedAt": "2023-12-15T16:08:42Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nYou can use an auxkernel with a dedicated variable for accumulating quandtities. Every time step you sum to the accumulation variableParsedAux will do it. I think there is also a SumAux but it might be only in the thermal hydraulics module. There might an accumulateAux not sure\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7865929",
                  "updatedAt": "2023-12-15T23:33:27Z",
                  "publishedAt": "2023-12-15T16:29:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "Turns out SumAux is only available in the thermal hydraulics module. Any chance we could pull that out to framework? The capability would be nice to have in these tensor mechanics simulations too; hopefully that's enough of a generalized-usage argument to support moving the code to framework",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7866108",
                          "updatedAt": "2023-12-15T16:49:55Z",
                          "publishedAt": "2023-12-15T16:49:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Tensor mechanics actually created an AccumulateAux so you can use that there.\nIt would be nice to avoid recoding +, -, % in each module separately haha",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7868629",
                          "updatedAt": "2023-12-15T23:33:10Z",
                          "publishedAt": "2023-12-15T23:33:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "Hi @amassaf,\nI quite like @GiudGiud's recommendations for the accumulating quantities for the slip increment (note: these are calculated in the code as a rate-dependent quantity, so if you want the increment, you'll have to multiply by the timestep size for each time step).\nThe plastic velocity gradient is available as a RankTwoTensor with the material property name plastic_deformation_gradient (or base_name_plastic_deformation_gradient if you are supplying a base_name argument in the input file). You can either output specific components of the tensor with RankTwoAux as the auxkernel, or as a scalar quantity that makes sense for your problem with RankTwoScalarAux.\nHope this helps!",
                  "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7866175",
                  "updatedAt": "2023-12-15T16:56:01Z",
                  "publishedAt": "2023-12-15T16:56:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Hi,\nThank you for this info I will so as suggested for the slip increments. But just to be sure, are you saying that the plastic_deformation_gradient actually returns the plastic velocity gradient (Lp) and not the usual (Fp) with Lp = \\dot{Fp}Fp^{-1}?",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7866752",
                          "updatedAt": "2023-12-18T08:06:32Z",
                          "publishedAt": "2023-12-15T18:02:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "Good catch, and please accept my apologies for having given you the incorrect information for the tensor you are interested in.\nWe sum up the contributions from the slip increments, to calculate the (actual) plasticity velocity gradient in this method in the crystal plasticity constitutive model base class:\n\n  \n    \n      moose/modules/tensor_mechanics/src/materials/crystal_plasticity/CrystalPlasticityStressUpdateBase.C\n    \n    \n        Lines 461 to 468\n      in\n      3b9776e\n    \n  \n  \n    \n\n        \n          \n           void \n        \n\n        \n          \n           CrystalPlasticityStressUpdateBase::calculateEquivalentSlipIncrement( \n        \n\n        \n          \n               RankTwoTensor & equivalent_slip_increment) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             // Sum up the slip increments to find the equivalent plastic strain due to slip \n        \n\n        \n          \n             for (const auto i : make_range(_number_slip_systems)) \n        \n\n        \n          \n               equivalent_slip_increment += _flow_direction[_qp][i] * _slip_increment[_qp][i] * _substep_dt; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nAs you can see, the method does not assign the calculated tensor to any material property that can be accessed with an auxkernel.\nWe are happy to take pull requests, either in the base class above or in the calling class, \n  \n    \n      moose/modules/tensor_mechanics/src/materials/crystal_plasticity/ComputeMultipleCrystalPlasticityStress.C\n    \n    \n         Line 507\n      in\n      3b9776e\n    \n  \n  \n    \n\n        \n          \n           _models[i]->calculateEquivalentSlipIncrement(equivalent_slip_increment_per_model); \n        \n    \n  \n\n if you are planning to implement a code change to access this tensor",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7866918",
                          "updatedAt": "2023-12-15T18:20:01Z",
                          "publishedAt": "2023-12-15T18:20:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Thank you so much this is very helpful. I will look into it.",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7866940",
                          "updatedAt": "2023-12-15T18:22:48Z",
                          "publishedAt": "2023-12-15T18:22:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "@amassaf  an example of exporting and visualizing slip_increment here:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/test/tests/SlipGradients/polycrystal_initial_GND.i",
                  "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7901832",
                  "updatedAt": "2023-12-19T20:47:23Z",
                  "publishedAt": "2023-12-19T20:47:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Hi, thank you but I'm actually interested in the slip rate total and not increment",
                          "url": "https://github.com/idaholab/moose/discussions/26349#discussioncomment-7902099",
                          "updatedAt": "2023-12-19T21:25:55Z",
                          "publishedAt": "2023-12-19T21:25:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ComputeQpResidual in porous flow module",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Dear all,\nWhen I looked at your code in porousflow I found that there are two ways to write the ComputeQpResidual in Moose.\n\nthe general one is based on [_qp] which can be easily understood that we integrate this term in the quadrature points.\n\n------------------------------------------------------------------------------------------------------------------\nComputeQpResidual\nreturn (*_relative_permeability)[_qp][_ph] * (*_fluid_density_node)[_qp][_ph] /(*_fluid_viscosity)[_qp][_ph] \n------------------------------------------------------------------------------------------------------------------\n\n\nbased on _i which is stated in your tutorial: index for test function. I understand it in the following as node number. Are the index of test function and node number same? So in this residual, we integrate the term only in the node points? then why we have Qp in the name of ComputeQpResidual?\n\n------------------------------------------------------------------------------------------------------------------\nComputeQpResidual\nreturn (*_relative_permeability)[_i][_ph] * (*_fluid_density_node)[_i][_ph] /(*_fluid_viscosity)[_i][_ph]\n------------------------------------------------------------------------------------------------------------------\n\nThanks a lot.\nQia",
          "url": "https://github.com/idaholab/moose/discussions/26371",
          "updatedAt": "2023-12-19T19:28:57Z",
          "publishedAt": "2023-12-19T12:25:48Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cpgr\nI m not aware of this _i indexing in kernel-loops",
                  "url": "https://github.com/idaholab/moose/discussions/26371#discussioncomment-7899928",
                  "updatedAt": "2023-12-19T16:49:24Z",
                  "publishedAt": "2023-12-19T16:49:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "For a Lagrange finite element family with order equal to the geometric element order, then _i will correspond to the local node numbers",
                          "url": "https://github.com/idaholab/moose/discussions/26371#discussioncomment-7900486",
                          "updatedAt": "2023-12-19T17:51:06Z",
                          "publishedAt": "2023-12-19T17:51:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Thanks a lot.\nMy main question is\nif we integrate the node values in the residual, will it give the same or similar physical results as the integration of quadrature point values? How does it work in the ComputeQpResidual? I guess there should be some qp in the original code to define the ComputeQpResidual.",
                          "url": "https://github.com/idaholab/moose/discussions/26371#discussioncomment-7901192",
                          "updatedAt": "2023-12-19T19:21:54Z",
                          "publishedAt": "2023-12-19T19:21:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "This could be related to lumping but we'll let @cpgr give the authoritative answer",
                          "url": "https://github.com/idaholab/moose/discussions/26371#discussioncomment-7901271",
                          "updatedAt": "2023-12-19T19:28:58Z",
                          "publishedAt": "2023-12-19T19:28:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about using PorousFlowOutflowBC in a fractured domain",
          "author": {
            "login": "MengnanLi91"
          },
          "bodyText": "Dear Dr Chris Green,\nI met a problem while working on a reactive transport problem with porous flow module. In my case, there is a fracture through the domain and 2 species plus water flow through. There is constant pressure drop through the domain and constant injection rate, so I use two DirichletBC for pressure, DirichletBC for injection and PorousFlowOutflowBC for the species outlet. However, I observed weird species accumulation at the outlet where the fracture is(as shown in the picture).\nIn the simulation I use lower dimensional fracture capability. I wonder if PorousFlowOutflowBC doesn't work for lower dimensional fracture. Could you give me some suggestions on the boundary condition choices? I've attached my input file. Please let me know if you need more information.\nThanks so much for your help!\nBest,\nMengnan\ninput file:\nporous_flow_fractured_example.i.zip\n\n@cpgr",
          "url": "https://github.com/idaholab/moose/discussions/26367",
          "updatedAt": "2023-12-19T18:33:02Z",
          "publishedAt": "2023-12-19T00:31:03Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "It looks like no fluid is escaping there for some reason? When you make the lower dimension fracture does it stay part of that boundary? I don't know?",
                  "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7893072",
                  "updatedAt": "2023-12-19T03:13:47Z",
                  "publishedAt": "2023-12-19T03:13:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "MengnanLi91"
                          },
                          "bodyText": "In the lower dimension fracture page, it said the fracture shares the same element with the domain acting on the edge, but I don't know how it is treated on the boundary.",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7893120",
                          "updatedAt": "2023-12-19T03:26:36Z",
                          "publishedAt": "2023-12-19T03:26:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I quickly hacked the input so only the fracture is implemented as a 1D line and it seems to work properly so the BC looks like it works on 1D elements.\n# geometry\n# core sample\n# 8in(0.2032) x 1.5in(0.0381) Cylinder\n# radius = 0.01905 #m\nlength = 0.2032 #m\n# fracture\n# 0.24 mm along the axis of the core\nfrac_len = 2.4e-4 # m\n# initial condition\ninlet_pressure = 1.78e6\noutlet_pressure = 1.63e6\ndomain_porosity = 0.127\ndomain_permeability = 2.10E-19 # 3D 7.96E-20\nfrac_porosity = '${fparse  domain_porosity*frac_len}'\nfrac_permeability = '${fparse frac_len*frac_len*frac_len/12}'\nAl_mass = 6.147940e-07\nHCO3_mass = 2.068976e-02\n# H2O_mass = 9.788853E-01\nporepressure = ${inlet_pressure}\n# end_time = 259200\n# density = 1010 # kg/m^3\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n  gravity = '0 0 0'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 1\n    nx = 80\n    xmin = 0\n    xmax = '${fparse length}' #m\n  []\n  [rename]\n    type = RenameBoundaryGenerator\n    input = gen\n    old_boundary = 'left right'\n    new_boundary = 'inlet outlet'\n  []\n[]\n\n[Variables]\n  [f_Al]\n    #    initial_condition = ${Al_mass}\n  []\n  [f_HCO3]\n    #    initial_condition = ${HCO3_mass}\n  []\n  [porepressure]\n    initial_condition = ${porepressure}\n  []\n[]\n\n[AuxVariables]\n  [rate_Al]\n  []\n  [rate_HCO3]\n  []\n  [rate_H2O]\n  []\n  [chem_porosity]\n    initial_condition = ${domain_porosity}\n  []\n  [velocity_x]\n    family = MONOMIAL\n    order = CONSTANT\n    # block = fracture\n  []\n[]\n\n# [AuxKernels]\n#   [velocity_x]\n#     type = PorousFlowDarcyVelocityComponentLowerDimensional\n#     variable = velocity_x\n#     component = x\n#     aperture = ${frac_len}\n#   []\n# []\n\n[BCs]\n  [constant_injection_porepressure]\n    type = DirichletBC\n    variable = porepressure\n    value = ${inlet_pressure}\n    boundary = inlet\n  []\n  [constant_outer_porepressure]\n    type = DirichletBC\n    variable = porepressure\n    value = ${outlet_pressure}\n    boundary = outlet\n  []\n  [f_Al_in]\n    type = DirichletBC\n    variable = f_Al\n    boundary = inlet\n    value = ${Al_mass}\n  []\n  [f_HCO3_in]\n    type = DirichletBC\n    variable = f_HCO3\n    boundary = inlet\n    value = ${HCO3_mass}\n  []\n  [f_Al]\n    type = PorousFlowOutflowBC\n    variable = f_Al\n    boundary = outlet\n    include_relperm = false\n    mass_fraction_component = 0\n  []\n  [f_HCO3]\n    type = PorousFlowOutflowBC\n    variable = f_HCO3\n    boundary = outlet\n    mass_fraction_component = 1\n    include_relperm = false\n  []\n[]\n\n[Postprocessors]\n  [mass_extracted_Al_in]\n    type = NodalExtremeValue\n    variable = f_Al\n    boundary = inlet\n    execute_on = 'initial timestep_end'\n  []\n  [mass_extracted_HCO3_in]\n    type = NodalExtremeValue\n    variable = f_HCO3\n    boundary = inlet\n    execute_on = 'initial timestep_end'\n  []\n  [mass_extracted_Al_out]\n    type = NodalExtremeValue\n    variable = f_Al\n    boundary = outlet\n    execute_on = 'initial timestep_end'\n  []\n  [mass_extracted_HCO3_out]\n    type = NodalExtremeValue\n    variable = f_HCO3\n    boundary = outlet\n    execute_on = 'initial timestep_end'\n  []\n  [darcy_velocity]\n    type = SideAverageValue\n    variable = darcy_vel_y\n    boundary = inlet\n    execute_on = 'initial timestep_end'\n  []\n  [mass_extracted]\n    type = LinearCombinationPostprocessor\n    pp_names = 'mass_extracted_Al_out mass_extracted_HCO3_out'\n    pp_coefs = '1 1'\n    execute_on = 'initial timestep_end'\n  []\n  [avg_porosity]\n    type = ElementAverageValue\n    variable = chem_porosity\n  []\n[]\n\n[FluidProperties]\n  [the_simple_fluid]\n    type = SimpleFluidProperties\n    bulk_modulus = 2E9\n    viscosity = 1.03E-03\n    density0 = 1010\n  []\n[]\n\n[PorousFlowFullySaturated]\n  coupling_type = Hydro\n  porepressure = porepressure\n  mass_fraction_vars = 'f_Al f_HCO3'\n  save_component_rate_in = 'rate_Al rate_HCO3 rate_H2O' # change in kg at every node / dt\n  fp = the_simple_fluid\n  temperature_unit = Celsius\n  pressure_unit = Pa\n  #multiply_by_density = true\n  add_darcy_aux = true\n  stabilization = Full\n[]\n\n[Materials]\n  [poro_fracture]\n    type = PorousFlowPorosityConst\n    porosity = ${frac_porosity}\n    # block = 'fracture'\n  []\n  [permeability_fracture]\n    type = PorousFlowPermeabilityConst\n    permeability = '${frac_permeability} 0 0  0 ${frac_permeability} 0  0 0 ${domain_permeability}'\n    # block = ' fracture'\n  []\n[]\n\n[Preconditioning]\n  [typically_efficient]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_hypre_type'\n    petsc_options_value = ' hypre    boomeramg'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  end_time = 2\n  nl_rel_tol = 1E-8\n  nl_abs_tol = 1e-12\n  [TimeSteppers]\n    [funcDT]\n      type = FunctionDT\n      function = 'if(t>500, 100, 0.1)'\n    []\n  []\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7893171",
                          "updatedAt": "2023-12-19T03:39:12Z",
                          "publishedAt": "2023-12-19T03:39:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MengnanLi91"
                          },
                          "bodyText": "But there is no lower dimension in this case. I think it is the 1D_2D mixed domain has trouble with porousflowoutflowBC. In my input, I tried commenting out the porousflowoutflowBC at outlet. The results are the same. It seems the porousflowoutflowBC doesn't apply at all in such domain",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7893426",
                          "updatedAt": "2023-12-19T04:47:51Z",
                          "publishedAt": "2023-12-19T04:47:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Yeah, that's what I was getting at. For some reason the BC isn't being applied to the lower dim block. It does seem that the Dirichlet BC (a nodal BC) works for pressure though, but the integrated BC doesn't.",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7893534",
                          "updatedAt": "2023-12-19T05:21:21Z",
                          "publishedAt": "2023-12-19T05:21:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MengnanLi91"
                          },
                          "bodyText": "Any suggestions on how to fix it?",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7899152",
                          "updatedAt": "2023-12-19T15:42:10Z",
                          "publishedAt": "2023-12-19T15:42:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MengnanLi91"
                          },
                          "bodyText": "In lower dimension fracture, the value still defines in quadratic point. For integrated BC, the value is integrated over surface/edges. At the fracture point/edge, the integrated BC is not well defined as shown below. I think this explains why it doesn't work, but I still haven't figured out a solution for this issue",
                          "url": "https://github.com/idaholab/moose/discussions/26367#discussioncomment-7900809",
                          "updatedAt": "2023-12-19T18:33:02Z",
                          "publishedAt": "2023-12-19T18:33:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Interpolation function",
          "author": {
            "login": "jin0123456"
          },
          "bodyText": "Hello,\nPiecewiseMultilinear function provides the capability of multi-dimensional piecewise linear interpolation depending only on spatial position and time. But I want to interpolate other things like variables, so does MOOSE provide an interface or function to do this?",
          "url": "https://github.com/idaholab/moose/discussions/26370",
          "updatedAt": "2023-12-19T16:26:54Z",
          "publishedAt": "2023-12-19T08:08:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Not in the same gridded data way. But you can use a ParsedMaterial to define material properties that are arbitrary expressions of space, time, coupled variables, postprocessors, and other material properties",
                  "url": "https://github.com/idaholab/moose/discussions/26370#discussioncomment-7899436",
                  "updatedAt": "2023-12-19T16:04:40Z",
                  "publishedAt": "2023-12-19T16:04:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "The underlying utilities that are leveraged by PiecewiseLinear interpolation functions can also be used in a new object with variables, etc as the operands (or even the grid) of the interpolation.\nyou will have to code a new object though",
                  "url": "https://github.com/idaholab/moose/discussions/26370#discussioncomment-7899673",
                  "updatedAt": "2023-12-19T16:27:07Z",
                  "publishedAt": "2023-12-19T16:26:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Implication of negative mass fraction of water in PorousFlow",
          "author": {
            "login": "steam-simulator"
          },
          "bodyText": "Hello,\nIs having a negative mass fraction of water in PorousFlow single-phase simulation okay? What\u2019s the implication? I was expecting positive values. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/26307",
          "updatedAt": "2023-12-19T06:35:53Z",
          "publishedAt": "2023-12-12T19:32:47Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the result converged? Do you have the full simulation console log with the iteration residuals?\nHow negative are they?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7834965",
                  "updatedAt": "2023-12-12T20:11:28Z",
                  "publishedAt": "2023-12-12T20:11:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "steam-simulator"
                          },
                          "bodyText": "Hi, this is what I have:\nFramework Information:\nMOOSE Version:           git commit f408c2cc94 on 2023-09-08\nLibMesh Version:\nPETSc Version:           3.16.6\nSLEPc Version:           3.16.2\nCurrent Time:            Tue Dec 12 14:31:45 2023\nExecutable Timestamp:    Tue Dec 12 02:08:40 2023\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          1\n  Spatial Dimension:       1\n  Nodes:                   2\n  Elems:                   1\n  Num Subdomains:          1\n\nNonlinear System:\n  Num DOFs:                4\n  Num Local DOFs:          4\n  Variables:               { \"a\" \"b\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                15\n  Num Local DOFs:          15\n  Variables:               { \"eqm_k\" \"pressure\" \"ini_mineral_conc\" } { \"mineral\" \"diss_rate_per_sec\"\n                             \"diss_rate_mol_per_sq_m_sec\" } \"porosity\" { \"Chemical_affinity\" \"massfrac_a\"\n                             \"massfrac_b\" \"massfrac_H2O\" }\n  Finite Element Types:    \"LAGRANGE\" \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\"\n  Approximation Orders:    \"FIRST\" \"CONSTANT\" \"FIRST\" \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator:          ImplicitEuler\n  Solver Mode:             NEWTON\n  MOOSE Preconditioner:    SMP\n\n\nTime Step 0, time = 0\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 1, time = 1, dt = 1\n Solve Converged!\n\nTime Step 2, time = 2, dt = 1\n Solve Converged!\n\nTime Step 3, time = 3, dt = 1\n Solve Converged!\n\nTime Step 4, time = 4, dt = 1\n Solve Converged!\n\nTime Step 5, time = 5, dt = 1\n Solve Converged!\n\nTime Step 6, time = 6, dt = 1\n Solve Converged!\n\nTime Step 7, time = 7, dt = 1\n Solve Converged!\n\nTime Step 8, time = 8, dt = 1\n Solve Converged!\n\nTime Step 9, time = 9, dt = 1\n Solve Converged!\n\nTime Step 10, time = 10, dt = 1\n    |residual|_2 of individual variables:\n                          a: 19.1584\n                          b: 19.1584\n 0 Nonlinear |R| = 2.709400e+01\n      0 Linear |R| = 2.709400e+01\n      1 Linear |R| = 2.127004e-15\n    |residual|_2 of individual variables:\n                          a: 0.688159\n                          b: 0.688159\n 1 Nonlinear |R| = 9.732034e-01\n      0 Linear |R| = 9.732034e-01\n      1 Linear |R| = 7.640097e-17\n    |residual|_2 of individual variables:\n                          a: 0.0300803\n                          b: 0.0300803\n 2 Nonlinear |R| = 4.254000e-02\n      0 Linear |R| = 4.254000e-02\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.00132313\n                          b: 0.00132313\n 3 Nonlinear |R| = 1.871191e-03\n      0 Linear |R| = 1.871191e-03\n      1 Linear |R| = 2.937942e-19\n    |residual|_2 of individual variables:\n                          a: 5.8216e-05\n                          b: 5.8216e-05\n 4 Nonlinear |R| = 8.232985e-05\n      0 Linear |R| = 8.232985e-05\n      1 Linear |R| = 1.445232e-20\n    |residual|_2 of individual variables:\n                          a: 2.56146e-06\n                          b: 2.56146e-06\n 5 Nonlinear |R| = 3.622446e-06\n      0 Linear |R| = 3.622446e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.12702e-07\n                          b: 1.12702e-07\n 6 Nonlinear |R| = 1.593847e-07\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 11, time = 11, dt = 1\n Solve Converged!\n\nTime Step 12, time = 12, dt = 1\n Solve Converged!\n\nTime Step 13, time = 13, dt = 1\n Solve Converged!\n\nTime Step 14, time = 14, dt = 1\n Solve Converged!\n\nTime Step 15, time = 15, dt = 1\n Solve Converged!\n\nTime Step 16, time = 16, dt = 1\n Solve Converged!\n\nTime Step 17, time = 17, dt = 1\n Solve Converged!\n\nTime Step 18, time = 18, dt = 1\n Solve Converged!\n\nTime Step 19, time = 19, dt = 1\n Solve Converged!\n\nTime Step 20, time = 20, dt = 1\n    |residual|_2 of individual variables:\n                          a: 5.69575\n                          b: 5.69575\n 0 Nonlinear |R| = 8.055007e+00\n      0 Linear |R| = 8.055007e+00\n      1 Linear |R| = 8.942854e-16\n    |residual|_2 of individual variables:\n                          a: 0.475976\n                          b: 0.475976\n 1 Nonlinear |R| = 6.731312e-01\n      0 Linear |R| = 6.731312e-01\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.0407287\n                          b: 0.0407287\n 2 Nonlinear |R| = 5.759914e-02\n      0 Linear |R| = 5.759914e-02\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.0034919\n                          b: 0.0034919\n 3 Nonlinear |R| = 4.938292e-03\n      0 Linear |R| = 4.938292e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.00029943\n                          b: 0.00029943\n 4 Nonlinear |R| = 4.234575e-04\n      0 Linear |R| = 4.234575e-04\n      1 Linear |R| = 6.648674e-20\n    |residual|_2 of individual variables:\n                          a: 2.56764e-05\n                          b: 2.56764e-05\n 5 Nonlinear |R| = 3.631190e-05\n      0 Linear |R| = 3.631190e-05\n      1 Linear |R| = 2.850652e-21\n    |residual|_2 of individual variables:\n                          a: 2.20178e-06\n                          b: 2.20178e-06\n 6 Nonlinear |R| = 3.113785e-06\n      0 Linear |R| = 3.113785e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.88805e-07\n                          b: 1.88805e-07\n 7 Nonlinear |R| = 2.670105e-07\n      0 Linear |R| = 2.670105e-07\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.61903e-08\n                          b: 1.61903e-08\n 8 Nonlinear |R| = 2.289648e-08\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 21, time = 21, dt = 1\n Solve Converged!\n\nTime Step 22, time = 22, dt = 1\n Solve Converged!\n\nTime Step 23, time = 23, dt = 1\n Solve Converged!\n\nTime Step 24, time = 24, dt = 1\n Solve Converged!\n\nTime Step 25, time = 25, dt = 1\n Solve Converged!\n\nTime Step 26, time = 26, dt = 1\n Solve Converged!\n\nTime Step 27, time = 27, dt = 1\n Solve Converged!\n\nTime Step 28, time = 28, dt = 1\n Solve Converged!\n\nTime Step 29, time = 29, dt = 1\n Solve Converged!\n\nTime Step 30, time = 30, dt = 1\n    |residual|_2 of individual variables:\n                          a: 1.69323\n                          b: 1.69323\n 0 Nonlinear |R| = 2.394590e+00\n      0 Linear |R| = 2.394590e+00\n      1 Linear |R| = 3.759727e-16\n    |residual|_2 of individual variables:\n                          a: 0.163972\n                          b: 0.163972\n 1 Nonlinear |R| = 2.318912e-01\n      0 Linear |R| = 2.318912e-01\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.0159725\n                          b: 0.0159725\n 2 Nonlinear |R| = 2.258859e-02\n      0 Linear |R| = 2.258859e-02\n      1 Linear |R| = 3.546618e-18\n    |residual|_2 of individual variables:\n                          a: 0.00155677\n                          b: 0.00155677\n 3 Nonlinear |R| = 2.201608e-03\n      0 Linear |R| = 2.201608e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.00015174\n                          b: 0.00015174\n 4 Nonlinear |R| = 2.145926e-04\n      0 Linear |R| = 2.145926e-04\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.47903e-05\n                          b: 1.47903e-05\n 5 Nonlinear |R| = 2.091664e-05\n      0 Linear |R| = 2.091664e-05\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.44163e-06\n                          b: 1.44163e-06\n 6 Nonlinear |R| = 2.038775e-06\n      0 Linear |R| = 2.038775e-06\n      1 Linear |R| = 3.578900e-22\n    |residual|_2 of individual variables:\n                          a: 1.40518e-07\n                          b: 1.40518e-07\n 7 Nonlinear |R| = 1.987223e-07\n      0 Linear |R| = 1.987223e-07\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.36965e-08\n                          b: 1.36965e-08\n 8 Nonlinear |R| = 1.936971e-08\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 31, time = 31, dt = 1\n Solve Converged!\n\nTime Step 32, time = 32, dt = 1\n Solve Converged!\n\nTime Step 33, time = 33, dt = 1\n Solve Converged!\n\nTime Step 34, time = 34, dt = 1\n Solve Converged!\n\nTime Step 35, time = 35, dt = 1\n Solve Converged!\n\nTime Step 36, time = 36, dt = 1\n Solve Converged!\n\nTime Step 37, time = 37, dt = 1\n Solve Converged!\n\nTime Step 38, time = 38, dt = 1\n Solve Converged!\n\nTime Step 39, time = 39, dt = 1\n Solve Converged!\n\nTime Step 40, time = 40, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.503356\n                          b: 0.503356\n 0 Nonlinear |R| = 7.118536e-01\n      0 Linear |R| = 7.118536e-01\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.0506939\n                          b: 0.0506939\n 1 Nonlinear |R| = 7.169201e-02\n      0 Linear |R| = 7.169201e-02\n      1 Linear |R| = 1.258494e-17\n    |residual|_2 of individual variables:\n                          a: 0.00511396\n                          b: 0.00511396\n 2 Nonlinear |R| = 7.232238e-03\n      0 Linear |R| = 7.232238e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.000515979\n                          b: 0.000515979\n 3 Nonlinear |R| = 7.297050e-04\n      0 Linear |R| = 7.297050e-04\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 5.20612e-05\n                          b: 5.20612e-05\n 4 Nonlinear |R| = 7.362566e-05\n      0 Linear |R| = 7.362566e-05\n      1 Linear |R| = 1.155991e-20\n    |residual|_2 of individual variables:\n                          a: 5.25287e-06\n                          b: 5.25287e-06\n 5 Nonlinear |R| = 7.428684e-06\n      0 Linear |R| = 7.428684e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 5.30005e-07\n                          b: 5.30005e-07\n 6 Nonlinear |R| = 7.495396e-07\n      0 Linear |R| = 7.495396e-07\n      1 Linear |R| = 2.121590e-22\n    |residual|_2 of individual variables:\n                          a: 5.34764e-08\n                          b: 5.34764e-08\n 7 Nonlinear |R| = 7.562711e-08\n      0 Linear |R| = 7.562711e-08\n      1 Linear |R| = 1.679259e-23\n    |residual|_2 of individual variables:\n                          a: 5.39566e-09\n                          b: 5.39566e-09\n 8 Nonlinear |R| = 7.630609e-09\n      0 Linear |R| = 7.630609e-09\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 5.44423e-10\n                          b: 5.44423e-10\n 9 Nonlinear |R| = 7.699301e-10\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 41, time = 41, dt = 1\n Solve Converged!\n\nTime Step 42, time = 42, dt = 1\n Solve Converged!\n\nTime Step 43, time = 43, dt = 1\n Solve Converged!\n\nTime Step 44, time = 44, dt = 1\n Solve Converged!\n\nTime Step 45, time = 45, dt = 1\n Solve Converged!\n\nTime Step 46, time = 46, dt = 1\n Solve Converged!\n\nTime Step 47, time = 47, dt = 1\n Solve Converged!\n\nTime Step 48, time = 48, dt = 1\n Solve Converged!\n\nTime Step 49, time = 49, dt = 1\n Solve Converged!\n\nTime Step 50, time = 50, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.149635\n                          b: 0.149635\n 0 Nonlinear |R| = 2.116161e-01\n      0 Linear |R| = 2.116161e-01\n      1 Linear |R| = 4.698822e-17\n    |residual|_2 of individual variables:\n                          a: 0.0152413\n                          b: 0.0152413\n 1 Nonlinear |R| = 2.155446e-02\n      0 Linear |R| = 2.155446e-02\n      1 Linear |R| = 4.786052e-18\n    |residual|_2 of individual variables:\n                          a: 0.00155318\n                          b: 0.00155318\n 2 Nonlinear |R| = 2.196530e-03\n      0 Linear |R| = 2.196530e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.000158286\n                          b: 0.000158286\n 3 Nonlinear |R| = 2.238508e-04\n      0 Linear |R| = 2.238508e-04\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.61312e-05\n                          b: 1.61312e-05\n 4 Nonlinear |R| = 2.281300e-05\n      0 Linear |R| = 2.281300e-05\n      1 Linear |R| = 3.581852e-21\n    |residual|_2 of individual variables:\n                          a: 1.64396e-06\n                          b: 1.64396e-06\n 5 Nonlinear |R| = 2.324911e-06\n      0 Linear |R| = 2.324911e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.67539e-07\n                          b: 1.67539e-07\n 6 Nonlinear |R| = 2.369357e-07\n      0 Linear |R| = 2.369357e-07\n      1 Linear |R| = 3.720110e-23\n    |residual|_2 of individual variables:\n                          a: 1.70741e-08\n                          b: 1.70741e-08\n 7 Nonlinear |R| = 2.414639e-08\n      0 Linear |R| = 2.414639e-08\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.74008e-09\n                          b: 1.74008e-09\n 8 Nonlinear |R| = 2.460841e-09\n      0 Linear |R| = 2.460841e-09\n      1 Linear |R| = 3.863747e-25\n    |residual|_2 of individual variables:\n                          a: 1.77412e-10\n                          b: 1.77412e-10\n 9 Nonlinear |R| = 2.508982e-10\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 51, time = 51, dt = 1\n Solve Converged!\n\nTime Step 52, time = 52, dt = 1\n Solve Converged!\n\nTime Step 53, time = 53, dt = 1\n Solve Converged!\n\nTime Step 54, time = 54, dt = 1\n Solve Converged!\n\nTime Step 55, time = 55, dt = 1\n Solve Converged!\n\nTime Step 56, time = 56, dt = 1\n Solve Converged!\n\nTime Step 57, time = 57, dt = 1\n Solve Converged!\n\nTime Step 58, time = 58, dt = 1\n Solve Converged!\n\nTime Step 59, time = 59, dt = 1\n Solve Converged!\n\nTime Step 60, time = 60, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.0444827\n                          b: 0.0444827\n 0 Nonlinear |R| = 6.290807e-02\n      0 Linear |R| = 6.290807e-02\n      1 Linear |R| = 9.877149e-18\n    |residual|_2 of individual variables:\n                          a: 0.00454596\n                          b: 0.00454596\n 1 Nonlinear |R| = 6.428963e-03\n      0 Linear |R| = 6.428963e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.000464647\n                          b: 0.000464647\n 2 Nonlinear |R| = 6.571101e-04\n      0 Linear |R| = 6.571101e-04\n      1 Linear |R| = 1.031724e-19\n    |residual|_2 of individual variables:\n                          a: 4.74927e-05\n                          b: 4.74927e-05\n 3 Nonlinear |R| = 6.716480e-05\n      0 Linear |R| = 6.716480e-05\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.85435e-06\n                          b: 4.85435e-06\n 4 Nonlinear |R| = 6.865086e-06\n      0 Linear |R| = 6.865086e-06\n      1 Linear |R| = 1.077882e-21\n    |residual|_2 of individual variables:\n                          a: 4.96175e-07\n                          b: 4.96175e-07\n 5 Nonlinear |R| = 7.016980e-07\n      0 Linear |R| = 7.016980e-07\n      1 Linear |R| = 5.508654e-23\n    |residual|_2 of individual variables:\n                          a: 5.07154e-08\n                          b: 5.07154e-08\n 6 Nonlinear |R| = 7.172236e-08\n      0 Linear |R| = 7.172236e-08\n      1 Linear |R| = 1.592556e-23\n    |residual|_2 of individual variables:\n                          a: 5.18374e-09\n                          b: 5.18374e-09\n 7 Nonlinear |R| = 7.330914e-09\n      0 Linear |R| = 7.330914e-09\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 5.2982e-10\n                          b: 5.2982e-10\n 8 Nonlinear |R| = 7.492781e-10\n      0 Linear |R| = 7.492781e-10\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 5.4083e-11\n                          b: 5.4083e-11\n 9 Nonlinear |R| = 7.648491e-11\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n|   6.000000e+01 |     -2.717430e+00 |   6.254099e+00 |   6.254099e+00 |   6.254099e+00 |           3.745901e-01 |               5.572141e-04 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n|   6.000000e+01 |     -5.572141e-04 |   6.254099e+00 |   6.254099e+00 |  -1.150820e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 61, time = 61, dt = 1\n Solve Converged!\n\nTime Step 62, time = 62, dt = 1\n Solve Converged!\n\nTime Step 63, time = 63, dt = 1\n Solve Converged!\n\nTime Step 64, time = 64, dt = 1\n Solve Converged!\n\nTime Step 65, time = 65, dt = 1\n Solve Converged!\n\nTime Step 66, time = 66, dt = 1\n Solve Converged!\n\nTime Step 67, time = 67, dt = 1\n Solve Converged!\n\nTime Step 68, time = 68, dt = 1\n Solve Converged!\n\nTime Step 69, time = 69, dt = 1\n Solve Converged!\n\nTime Step 70, time = 70, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.0132236\n                          b: 0.0132236\n 0 Nonlinear |R| = 1.870096e-02\n      0 Linear |R| = 1.870096e-02\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.00135273\n                          b: 0.00135273\n 1 Nonlinear |R| = 1.913054e-03\n      0 Linear |R| = 1.913054e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.000138387\n                          b: 0.000138387\n 2 Nonlinear |R| = 1.957083e-04\n      0 Linear |R| = 1.957083e-04\n      1 Linear |R| = 3.435495e-20\n    |residual|_2 of individual variables:\n                          a: 1.41572e-05\n                          b: 1.41572e-05\n 3 Nonlinear |R| = 2.002133e-05\n      0 Linear |R| = 2.002133e-05\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.44831e-06\n                          b: 1.44831e-06\n 4 Nonlinear |R| = 2.048222e-06\n      0 Linear |R| = 2.048222e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.48165e-07\n                          b: 1.48165e-07\n 5 Nonlinear |R| = 2.095372e-07\n      0 Linear |R| = 2.095372e-07\n      1 Linear |R| = 4.652661e-23\n    |residual|_2 of individual variables:\n                          a: 1.51576e-08\n                          b: 1.51576e-08\n 6 Nonlinear |R| = 2.143615e-08\n      0 Linear |R| = 2.143615e-08\n      1 Linear |R| = 3.762937e-24\n    |residual|_2 of individual variables:\n                          a: 1.55057e-09\n                          b: 1.55057e-09\n 7 Nonlinear |R| = 2.192840e-09\n      0 Linear |R| = 2.192840e-09\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.58634e-10\n                          b: 1.58634e-10\n 8 Nonlinear |R| = 2.243427e-10\n      0 Linear |R| = 2.243427e-10\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.63223e-11\n                          b: 1.63223e-11\n 9 Nonlinear |R| = 2.308317e-11\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n|   6.000000e+01 |     -2.717430e+00 |   6.254099e+00 |   6.254099e+00 |   6.254099e+00 |           3.745901e-01 |               5.572141e-04 |\n|   7.000000e+01 |     -8.076262e-01 |   6.257135e+00 |   6.257135e+00 |   6.257135e+00 |           3.742865e-01 |               1.656455e-04 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n|   6.000000e+01 |     -5.572141e-04 |   6.254099e+00 |   6.254099e+00 |  -1.150820e+01 |\n|   7.000000e+01 |     -1.656455e-04 |   6.257135e+00 |   6.257135e+00 |  -1.151427e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 71, time = 71, dt = 1\n Solve Converged!\n\nTime Step 72, time = 72, dt = 1\n Solve Converged!\n\nTime Step 73, time = 73, dt = 1\n Solve Converged!\n\nTime Step 74, time = 74, dt = 1\n Solve Converged!\n\nTime Step 75, time = 75, dt = 1\n Solve Converged!\n\nTime Step 76, time = 76, dt = 1\n Solve Converged!\n\nTime Step 77, time = 77, dt = 1\n Solve Converged!\n\nTime Step 78, time = 78, dt = 1\n Solve Converged!\n\nTime Step 79, time = 79, dt = 1\n Solve Converged!\n\nTime Step 80, time = 80, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.00393103\n                          b: 0.00393103\n 0 Nonlinear |R| = 5.559316e-03\n      0 Linear |R| = 5.559316e-03\n      1 Linear |R| = 9.758916e-19\n    |residual|_2 of individual variables:\n                          a: 0.000402251\n                          b: 0.000402251\n 1 Nonlinear |R| = 5.688687e-04\n      0 Linear |R| = 5.688687e-04\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.11617e-05\n                          b: 4.11617e-05\n 2 Nonlinear |R| = 5.821143e-05\n      0 Linear |R| = 5.821143e-05\n      1 Linear |R| = 1.292553e-20\n    |residual|_2 of individual variables:\n                          a: 4.21202e-06\n                          b: 4.21202e-06\n 3 Nonlinear |R| = 5.956691e-06\n      0 Linear |R| = 5.956691e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.3101e-07\n                          b: 4.3101e-07\n 4 Nonlinear |R| = 6.095395e-07\n      0 Linear |R| = 6.095395e-07\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.41046e-08\n                          b: 4.41046e-08\n 5 Nonlinear |R| = 6.237335e-08\n      0 Linear |R| = 6.237335e-08\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.51312e-09\n                          b: 4.51312e-09\n 6 Nonlinear |R| = 6.382517e-09\n      0 Linear |R| = 6.382517e-09\n      1 Linear |R| = 1.584482e-24\n    |residual|_2 of individual variables:\n                          a: 4.61905e-10\n                          b: 4.61905e-10\n 7 Nonlinear |R| = 6.532325e-10\n      0 Linear |R| = 6.532325e-10\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.7246e-11\n                          b: 4.7246e-11\n 8 Nonlinear |R| = 6.681599e-11\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n|   6.000000e+01 |     -2.717430e+00 |   6.254099e+00 |   6.254099e+00 |   6.254099e+00 |           3.745901e-01 |               5.572141e-04 |\n|   7.000000e+01 |     -8.076262e-01 |   6.257135e+00 |   6.257135e+00 |   6.257135e+00 |           3.742865e-01 |               1.656455e-04 |\n|   8.000000e+01 |     -2.400692e-01 |   6.258037e+00 |   6.258037e+00 |   6.258037e+00 |           3.741963e-01 |               4.924216e-05 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n|   6.000000e+01 |     -5.572141e-04 |   6.254099e+00 |   6.254099e+00 |  -1.150820e+01 |\n|   7.000000e+01 |     -1.656455e-04 |   6.257135e+00 |   6.257135e+00 |  -1.151427e+01 |\n|   8.000000e+01 |     -4.924216e-05 |   6.258037e+00 |   6.258037e+00 |  -1.151607e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 81, time = 81, dt = 1\n Solve Converged!\n\nTime Step 82, time = 82, dt = 1\n Solve Converged!\n\nTime Step 83, time = 83, dt = 1\n Solve Converged!\n\nTime Step 84, time = 84, dt = 1\n Solve Converged!\n\nTime Step 85, time = 85, dt = 1\n Solve Converged!\n\nTime Step 86, time = 86, dt = 1\n Solve Converged!\n\nTime Step 87, time = 87, dt = 1\n Solve Converged!\n\nTime Step 88, time = 88, dt = 1\n Solve Converged!\n\nTime Step 89, time = 89, dt = 1\n Solve Converged!\n\nTime Step 90, time = 90, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.00116859\n                          b: 0.00116859\n 0 Nonlinear |R| = 1.652642e-03\n      0 Linear |R| = 1.652642e-03\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 0.000119589\n                          b: 0.000119589\n 1 Nonlinear |R| = 1.691248e-04\n      0 Linear |R| = 1.691248e-04\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.22383e-05\n                          b: 1.22383e-05\n 2 Nonlinear |R| = 1.730763e-05\n      0 Linear |R| = 1.730763e-05\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.25243e-06\n                          b: 1.25243e-06\n 3 Nonlinear |R| = 1.771201e-06\n      0 Linear |R| = 1.771201e-06\n      1 Linear |R| = 1.390475e-22\n    |residual|_2 of individual variables:\n                          a: 1.28169e-07\n                          b: 1.28169e-07\n 4 Nonlinear |R| = 1.812585e-07\n      0 Linear |R| = 1.812585e-07\n      1 Linear |R| = 1.422963e-23\n    |residual|_2 of individual variables:\n                          a: 1.31164e-08\n                          b: 1.31164e-08\n 5 Nonlinear |R| = 1.854936e-08\n      0 Linear |R| = 1.854936e-08\n      1 Linear |R| = 1.456211e-24\n    |residual|_2 of individual variables:\n                          a: 1.3423e-09\n                          b: 1.3423e-09\n 6 Nonlinear |R| = 1.898304e-09\n      0 Linear |R| = 1.898304e-09\n      1 Linear |R| = 2.980513e-25\n    |residual|_2 of individual variables:\n                          a: 1.37331e-10\n                          b: 1.37331e-10\n 7 Nonlinear |R| = 1.942154e-10\n      0 Linear |R| = 1.942154e-10\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 1.40783e-11\n                          b: 1.40783e-11\n 8 Nonlinear |R| = 1.990974e-11\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n|   6.000000e+01 |     -2.717430e+00 |   6.254099e+00 |   6.254099e+00 |   6.254099e+00 |           3.745901e-01 |               5.572141e-04 |\n|   7.000000e+01 |     -8.076262e-01 |   6.257135e+00 |   6.257135e+00 |   6.257135e+00 |           3.742865e-01 |               1.656455e-04 |\n|   8.000000e+01 |     -2.400692e-01 |   6.258037e+00 |   6.258037e+00 |   6.258037e+00 |           3.741963e-01 |               4.924216e-05 |\n|   9.000000e+01 |     -7.136490e-02 |   6.258306e+00 |   6.258306e+00 |   6.258306e+00 |           3.741694e-01 |               1.463843e-05 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n|   6.000000e+01 |     -5.572141e-04 |   6.254099e+00 |   6.254099e+00 |  -1.150820e+01 |\n|   7.000000e+01 |     -1.656455e-04 |   6.257135e+00 |   6.257135e+00 |  -1.151427e+01 |\n|   8.000000e+01 |     -4.924216e-05 |   6.258037e+00 |   6.258037e+00 |  -1.151607e+01 |\n|   9.000000e+01 |     -1.463843e-05 |   6.258306e+00 |   6.258306e+00 |  -1.151661e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\nTime Step 91, time = 91, dt = 1\n Solve Converged!\n\nTime Step 92, time = 92, dt = 1\n Solve Converged!\n\nTime Step 93, time = 93, dt = 1\n Solve Converged!\n\nTime Step 94, time = 94, dt = 1\n Solve Converged!\n\nTime Step 95, time = 95, dt = 1\n Solve Converged!\n\nTime Step 96, time = 96, dt = 1\n Solve Converged!\n\nTime Step 97, time = 97, dt = 1\n Solve Converged!\n\nTime Step 98, time = 98, dt = 1\n Solve Converged!\n\nTime Step 99, time = 99, dt = 1\n Solve Converged!\n\nTime Step 100, time = 100, dt = 1\n    |residual|_2 of individual variables:\n                          a: 0.000347393\n                          b: 0.000347393\n 0 Nonlinear |R| = 4.912882e-04\n      0 Linear |R| = 4.912882e-04\n      1 Linear |R| = 7.713679e-20\n    |residual|_2 of individual variables:\n                          a: 3.55518e-05\n                          b: 3.55518e-05\n 1 Nonlinear |R| = 5.027778e-05\n      0 Linear |R| = 5.027778e-05\n      1 Linear |R| = 1.116391e-20\n    |residual|_2 of individual variables:\n                          a: 3.63832e-06\n                          b: 3.63832e-06\n 2 Nonlinear |R| = 5.145367e-06\n      0 Linear |R| = 5.145367e-06\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 3.72342e-07\n                          b: 3.72342e-07\n 3 Nonlinear |R| = 5.265709e-07\n      0 Linear |R| = 5.265709e-07\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 3.8105e-08\n                          b: 3.8105e-08\n 4 Nonlinear |R| = 5.388863e-08\n      0 Linear |R| = 5.388863e-08\n      1 Linear |R| = 8.461013e-24\n    |residual|_2 of individual variables:\n                          a: 3.89957e-09\n                          b: 3.89957e-09\n 5 Nonlinear |R| = 5.514830e-09\n      0 Linear |R| = 5.514830e-09\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 3.99079e-10\n                          b: 3.99079e-10\n 6 Nonlinear |R| = 5.643830e-10\n      0 Linear |R| = 5.643830e-10\n      1 Linear |R| = 0.000000e+00\n    |residual|_2 of individual variables:\n                          a: 4.08597e-11\n                          b: 4.08597e-11\n 7 Nonlinear |R| = 5.778430e-11\n Solve Converged!\n\nPostprocessor Values:\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n| time           | Chemical_affinity | a              | a_ini          | b_ini          | diss_mineral_m3_per_m3 | diss_rate_mol_per_sq_m_sec |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |           0.000000e+00 |               0.000000e+00 |\n|   1.000000e+01 |     -1.388805e+03 |   4.397559e+00 |   4.397559e+00 |   4.397559e+00 |           5.602441e-01 |               2.399915e-01 |\n|   2.000000e+01 |     -3.641927e+02 |   5.705218e+00 |   5.705218e+00 |   5.705218e+00 |           4.294782e-01 |               7.134819e-02 |\n|   3.000000e+01 |     -1.047873e+02 |   6.093965e+00 |   6.093965e+00 |   6.093965e+00 |           3.906035e-01 |               2.121032e-02 |\n|   4.000000e+01 |     -3.086002e+01 |   6.209531e+00 |   6.209531e+00 |   6.209531e+00 |           3.790469e-01 |               6.305311e-03 |\n|   5.000000e+01 |     -9.148627e+00 |   6.243886e+00 |   6.243886e+00 |   6.243886e+00 |           3.756114e-01 |               1.874410e-03 |\n|   6.000000e+01 |     -2.717430e+00 |   6.254099e+00 |   6.254099e+00 |   6.254099e+00 |           3.745901e-01 |               5.572141e-04 |\n|   7.000000e+01 |     -8.076262e-01 |   6.257135e+00 |   6.257135e+00 |   6.257135e+00 |           3.742865e-01 |               1.656455e-04 |\n|   8.000000e+01 |     -2.400692e-01 |   6.258037e+00 |   6.258037e+00 |   6.258037e+00 |           3.741963e-01 |               4.924216e-05 |\n|   9.000000e+01 |     -7.136490e-02 |   6.258306e+00 |   6.258306e+00 |   6.258306e+00 |           3.741694e-01 |               1.463843e-05 |\n|   1.000000e+02 |     -2.121482e-02 |   6.258385e+00 |   6.258385e+00 |   6.258385e+00 |           3.741615e-01 |               4.351631e-06 |\n+----------------+-------------------+----------------+----------------+----------------+------------------------+----------------------------+\n+----------------+-------------------+----------------+----------------+----------------+\n| time           | diss_rate_per_sec | mass_frac_a    | mass_frac_b    | massfrac_H2O   |\n+----------------+-------------------+----------------+----------------+----------------+\n|   0.000000e+00 |      0.000000e+00 |   0.000000e+00 |   0.000000e+00 |   0.000000e+00 |\n|   1.000000e+01 |     -2.399915e-01 |   4.397559e+00 |   4.397559e+00 |  -7.795119e+00 |\n|   2.000000e+01 |     -7.134819e-02 |   5.705218e+00 |   5.705218e+00 |  -1.041044e+01 |\n|   3.000000e+01 |     -2.121032e-02 |   6.093965e+00 |   6.093965e+00 |  -1.118793e+01 |\n|   4.000000e+01 |     -6.305311e-03 |   6.209531e+00 |   6.209531e+00 |  -1.141906e+01 |\n|   5.000000e+01 |     -1.874410e-03 |   6.243886e+00 |   6.243886e+00 |  -1.148777e+01 |\n|   6.000000e+01 |     -5.572141e-04 |   6.254099e+00 |   6.254099e+00 |  -1.150820e+01 |\n|   7.000000e+01 |     -1.656455e-04 |   6.257135e+00 |   6.257135e+00 |  -1.151427e+01 |\n|   8.000000e+01 |     -4.924216e-05 |   6.258037e+00 |   6.258037e+00 |  -1.151607e+01 |\n|   9.000000e+01 |     -1.463843e-05 |   6.258306e+00 |   6.258306e+00 |  -1.151661e+01 |\n|   1.000000e+02 |     -4.351631e-06 |   6.258385e+00 |   6.258385e+00 |  -1.151677e+01 |\n+----------------+-------------------+----------------+----------------+----------------+\n\n\n\nPerformance Graph:\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                                Section                               | Calls |   Self(s)  |   Avg(s)   |    %   | Mem(MB) |  Total(s)  |   Avg(s)   |    %   | Mem(MB) |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| hueTestApp (main)                                                   |     1 |      0.022 |      0.022 |   1.09 |       3 |      1.994 |      1.994 | 100.00 |      31 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::setup_mesh    |     1 |      0.000 |      0.000 |   0.02 |       0 |      0.000 |      0.000 |   0.02 |       0 |\n|   Action::SetupMeshAction::Mesh::SetupMeshAction::act::set_mesh_base |     2 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.02 |       0 |\n|   FEProblem::computeUserObjects                                      |     2 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|   FEProblem::computeUserObjects                                      |     3 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|   FEProblem::outputStep                                              |   101 |      0.002 |      0.000 |   0.09 |       0 |      0.006 |      0.000 |   0.32 |       0 |\n|   Transient::PicardSolve                                             |   100 |      0.119 |      0.001 |   5.98 |       0 |      1.808 |      0.018 |  90.66 |       4 |\n|     FEProblem::computeUserObjects                                    |   800 |      0.025 |      0.000 |   1.27 |       0 |      0.025 |      0.000 |   1.27 |       0 |\n|     FEProblem::outputStep                                            |   300 |      0.003 |      0.000 |   0.17 |       0 |      0.004 |      0.000 |   0.18 |       0 |\n|     FEProblem::solve                                                 |   100 |      0.283 |      0.003 |  14.21 |       4 |      1.633 |      0.016 |  81.89 |       4 |\n|       FEProblem::computeResidualInternal                             |   100 |      0.004 |      0.000 |   0.20 |       0 |      0.093 |      0.001 |   4.66 |       0 |\n|         FEProblem::computeUserObjects                                |   200 |      0.001 |      0.000 |   0.05 |       0 |      0.001 |      0.000 |   0.05 |       0 |\n|       FEProblem::computeResidualInternal                             |   910 |      0.037 |      0.000 |   1.84 |       0 |      0.748 |      0.001 |  37.52 |       0 |\n|         FEProblem::computeUserObjects                                |  1820 |      0.009 |      0.000 |   0.43 |       0 |      0.009 |      0.000 |   0.43 |       0 |\n|       FEProblem::computeJacobianInternal                             |   810 |      0.034 |      0.000 |   1.68 |       0 |      0.457 |      0.001 |  22.91 |       0 |\n|         FEProblem::computeUserObjects                                |  1620 |      0.006 |      0.000 |   0.32 |       0 |      0.006 |      0.000 |   0.32 |       0 |\n|   Transient::final                                                   |     1 |      0.000 |      0.000 |   0.01 |       0 |      0.000 |      0.000 |   0.01 |       0 |\n|     FEProblem::computeUserObjects                                    |     2 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n|     FEProblem::outputStep                                            |     1 |      0.000 |      0.000 |   0.00 |       0 |      0.000 |      0.000 |   0.00 |       0 |\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7835161",
                          "updatedAt": "2023-12-12T20:38:02Z",
                          "publishedAt": "2023-12-12T20:38:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "do you have console parameters to only output every 10 steps here? Looks like it",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7835196",
                          "updatedAt": "2023-12-12T20:42:44Z",
                          "publishedAt": "2023-12-12T20:42:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "By definition it should be 0<=x<=1, so I think something isn't correct",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7835306",
                          "updatedAt": "2023-12-12T20:57:30Z",
                          "publishedAt": "2023-12-12T20:57:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "steam-simulator"
                          },
                          "bodyText": "Hello @cpgr,\nIf the mass fraction ranges from 0 to 1 by definition, how come component 5 (H2O) in Porousflow tutorial 13 has a negative mass fraction?\nPostprocessor Values:\n+----------------+----------------+------------------+----------------+\n| time           | component_0_h+ | component_4_fe2+ | component_5_H2O|\n+----------------+----------------+------------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |     0.000000e+00 |   0.000000e+00 |\n|   1.000000e-01 |   3.318178e-05 |     1.007476e-06 |   9.999304e-01 |\n|   3.000000e-01 |   2.920395e-01 |     5.014184e-06 |   4.159052e-01 |\n|   7.000000e-01 |   3.859357e+01 |     5.296487e-04 |  -7.618874e+01 |\n|   1.000000e+00 |   1.147111e+02 |     1.572326e-03 |  -2.284269e+02 |\n+----------------+----------------+------------------+----------------+",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7874610",
                          "updatedAt": "2023-12-17T04:10:02Z",
                          "publishedAt": "2023-12-17T04:10:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Yeah, good point! I'll take a look tomorrow - it's late and I've been at my favourite brewery all night!",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7876219",
                          "updatedAt": "2023-12-17T11:18:54Z",
                          "publishedAt": "2023-12-17T11:18:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I'm still trying to figure this one out!",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7893182",
                          "updatedAt": "2023-12-19T03:42:11Z",
                          "publishedAt": "2023-12-19T03:42:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "steam-simulator"
                          },
                          "bodyText": "Sure. For some reason, I don\u2019t get negative values if I use PorousFlowMassFraction material. It seems there is a bug in PorousFlowMassFractionAqueousEquilibriumChemistry.",
                          "url": "https://github.com/idaholab/moose/discussions/26307#discussioncomment-7893886",
                          "updatedAt": "2023-12-19T06:35:55Z",
                          "publishedAt": "2023-12-19T06:35:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}