{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wMS0xOFQwOToxMDowNy0wNjowMM4AOhKN"
    },
    "edges": [
      {
        "node": {
          "title": "CriticalStrech Damage with NOSPD model",
          "author": {
            "login": "ppandit95"
          },
          "bodyText": "Dear MOOSE Community\nI wish to replicate a simulation done in Bond Based formulation using a NOSPD formulation that involves damage so I was wondering if it is possible to use critical stretch damage criteria with the NOSPD model although I understand that generally energy or stress-based criteria is used but since I am carrying out brittle fracture I just wanted to know if it is possible or I should go with the development of energy-based damage rule.\nMany Thanks\nPushkar",
          "url": "https://github.com/idaholab/moose/discussions/19991",
          "updatedAt": "2023-04-26T14:46:26Z",
          "publishedAt": "2022-01-10T05:33:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen @jiangwen84 any ideas",
                  "url": "https://github.com/idaholab/moose/discussions/19991#discussioncomment-1987203",
                  "updatedAt": "2023-04-26T14:46:26Z",
                  "publishedAt": "2022-01-18T01:36:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Afraid I can't help here, sorry...",
                          "url": "https://github.com/idaholab/moose/discussions/19991#discussioncomment-1993887",
                          "updatedAt": "2023-04-26T14:46:26Z",
                          "publishedAt": "2022-01-18T22:44:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "@hchen139",
                          "url": "https://github.com/idaholab/moose/discussions/19991#discussioncomment-1993903",
                          "updatedAt": "2023-04-26T14:46:25Z",
                          "publishedAt": "2022-01-18T22:49:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hchen139"
                  },
                  "bodyText": "It is not a good option to use bond breakage criterion in NOSPD models. A damage model will work better.",
                  "url": "https://github.com/idaholab/moose/discussions/19991#discussioncomment-1999788",
                  "updatedAt": "2023-04-26T14:46:24Z",
                  "publishedAt": "2022-01-19T17:46:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ppandit95"
                          },
                          "bodyText": "Thanks @hchen139 for elaborating on that as in one of your published paper on BA NOSPD , a critical stretch damage model was used but it seems to give inaccurate results with NOSPD model as you suggested.",
                          "url": "https://github.com/idaholab/moose/discussions/19991#discussioncomment-2002755",
                          "updatedAt": "2023-04-26T14:46:24Z",
                          "publishedAt": "2022-01-20T04:16:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to change the dimension of sidesets\uff1f",
          "author": {
            "login": "amosaha"
          },
          "bodyText": "hello\uff0c\nBy the way I tried to get sidesets, I got a 3D network of sidesets index. I noticed that it is possible to use lowerLowerDBlockFromSidesetGenerator to convert 3D sidesets to 2D blocks, but can I turn this 2D block into 2D sidesets?Because I need to calculate the surface heat flux density, I need a 2D boundary. Looking forward to your answer.",
          "url": "https://github.com/idaholab/moose/discussions/20080",
          "updatedAt": "2022-07-05T17:56:45Z",
          "publishedAt": "2022-01-19T12:40:44Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI have not done or tested this before, but you should be able to create a 2D sideset from 2D block, at least for the sideset generators where this makes sense. If not, then it's a feature we should make sure to support.\nJust use whichever sideset generator you are wanting to use with the 2D block as the argument.\nPlease let us know how this goes,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-1998181",
                  "updatedAt": "2022-07-05T17:56:49Z",
                  "publishedAt": "2022-01-19T14:20:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "amosaha"
                          },
                          "bodyText": "Yes, only 2D blocks can be used to create 2D sidesets. At present, I have obtained such a 2D block through LowerDBlockFromSidesetGenerator. I would like to know if I can use this 2D plane block to turn it into a sideset. Searched almost all meshgenerator resources, I didn't find a suitable way.",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-1998419",
                          "updatedAt": "2022-07-05T17:57:05Z",
                          "publishedAt": "2022-01-19T14:49:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok just to be absolutely sure, it is '2D sideset' as in a 'sideset of a 2D block', so really a sideset made of 1D elements.\nCan you use this one for example?\nhttps://mooseframework.inl.gov/source/meshgenerators/SideSetsAroundSubdomainGenerator.html\nWith the block argument set to the 2D block you extracted ?",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-1998517",
                          "updatedAt": "2022-07-05T17:57:05Z",
                          "publishedAt": "2022-01-19T15:03:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "amosaha"
                  },
                  "bodyText": "I have tried using this type on my 2D block, and it resulted in the bounding of the 2d face. So if you use a rectangle block, the resulting sidesets are the four sides of the rectangle.\n\n\n\n\n\n\n\n\n\n\u53d1\u81ea\u6211\u7684iPhone\n\u2026\n------------------ Original ------------------\nFrom: Guillaume Giudicelli ***@***.***&gt;\nDate: Wed,Jan 19,2022 11:03 PM\nTo: idaholab/moose ***@***.***&gt;\nCc: amosaha ***@***.***&gt;, Author ***@***.***&gt;\nSubject: Re: [idaholab/moose] how to change the dimension of sidesets\uff1f (Discussion #20080)\n\n\n\n\n\n\nOk just to be absolutely sure, it is '2D sideset' as in a 'sideset of a 2D block', so really a sideset made of 1D elements.\n\nCan you use this one for example?\n https://mooseframework.inl.gov/source/meshgenerators/SideSetsAroundSubdomainGenerator.html\n With the block argument set to the 2D block you extracted ?\n\n\u2014\nReply to this email directly, view it on GitHub, or unsubscribe.\nTriage notifications on the go with GitHub Mobile for iOS or Android.\nYou are receiving this because you authored the thread.Message ID: ***@***.***&gt;",
                  "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-1998659",
                  "updatedAt": "2022-07-05T17:57:22Z",
                  "publishedAt": "2022-01-19T15:18:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Isnt that what you want?",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-1998817",
                          "updatedAt": "2022-07-05T17:57:28Z",
                          "publishedAt": "2022-01-19T15:36:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "amosaha"
                  },
                  "bodyText": "No, I want the sidesets of the whole plane.\n\n\n\n\n\u53d1\u81ea\u6211\u7684iPhone\n\u2026\n------------------ Original ------------------\nFrom: Guillaume Giudicelli ***@***.***&gt;\nDate: Wed,Jan 19,2022 11:36 PM\nTo: idaholab/moose ***@***.***&gt;\nCc: amosaha ***@***.***&gt;, Author ***@***.***&gt;\nSubject: Re: [idaholab/moose] how to change the dimension of sidesets\uff1f (Discussion #20080)\n\n\n\n\n\n\nIsnt that what you want?\n\n\u2014\nReply to this email directly, view it on GitHub, or unsubscribe.\nTriage notifications on the go with GitHub Mobile for iOS or Android.\nYou are receiving this because you authored the thread.Message ID: ***@***.***&gt;",
                  "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2001893",
                  "updatedAt": "2022-07-05T17:57:29Z",
                  "publishedAt": "2022-01-20T00:23:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so you want a 2D surface?\nOr you want all the 1D elements in the 2D block?",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2001920",
                          "updatedAt": "2022-07-05T17:57:32Z",
                          "publishedAt": "2022-01-20T00:34:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "amosaha"
                  },
                  "bodyText": "I want a 2d surface as the sidesets.\n\n\n\n\u53d1\u81ea\u6211\u7684iPhone\n\u2026\n------------------ Original ------------------\nFrom: Guillaume Giudicelli ***@***.***&gt;\nDate: Thu,Jan 20,2022 8:34 AM\nTo: idaholab/moose ***@***.***&gt;\nCc: amosaha ***@***.***&gt;, Author ***@***.***&gt;\nSubject: Re: [idaholab/moose] how to change the dimension of sidesets\uff1f (Discussion #20080)\n\n\n\n\n\n\nso you want a 2D surface?\n Or you want all the 1D elements in the 2D block?\n\n\u2014\nReply to this email directly, view it on GitHub, or unsubscribe.\nTriage notifications on the go with GitHub Mobile for iOS or Android.\nYou are receiving this because you authored the thread.Message ID: ***@***.***&gt;",
                  "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2001922",
                  "updatedAt": "2022-07-05T17:57:33Z",
                  "publishedAt": "2022-01-20T00:36:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the use the sideset generators on the 3D mesh directly, not the lowerDblock...generator",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2001991",
                          "updatedAt": "2022-07-05T17:57:34Z",
                          "publishedAt": "2022-01-20T01:00:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "amosaha"
                  },
                  "bodyText": "But the sidesets I get directly using 3D block are not really 2D faces, just an index of a 3D block.\n\n\u53d1\u81ea\u6211\u7684iPhone\n\u2026\n------------------ Original ------------------\nFrom: Guillaume Giudicelli ***@***.***&gt;\nDate: Thu,Jan 20,2022 9:00 AM\nTo: idaholab/moose ***@***.***&gt;\nCc: amosaha ***@***.***&gt;, Author ***@***.***&gt;\nSubject: Re: [idaholab/moose] how to change the dimension of sidesets\uff1f (Discussion #20080)\n\n\n\n\n\n\nthe use the sideset generators on the 3D mesh directly, not the lowerDblock...generator\n\n\u2014\nReply to this email directly, view it on GitHub, or unsubscribe.\nTriage notifications on the go with GitHub Mobile for iOS or Android.\nYou are receiving this because you authored the thread.Message ID: ***@***.***&gt;",
                  "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2001997",
                  "updatedAt": "2022-07-05T17:57:36Z",
                  "publishedAt": "2022-01-20T01:02:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not sure what you mean by an index of a 3D block.\nThey are a collection of a 2D elements, which are faces of 3D elements.",
                          "url": "https://github.com/idaholab/moose/discussions/20080#discussioncomment-2002117",
                          "updatedAt": "2022-07-05T17:57:35Z",
                          "publishedAt": "2022-01-20T01:39:22Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Measuring FEP time",
          "author": {
            "login": "jinca"
          },
          "bodyText": "Hello dear MOOSE group,\nI found documentation of PETSc with regards to the performance in the output file.\nSee here.\nHowever, it seems quite outdated to me. Could you please enlighten me on this?\nHaving the following Performance Graph:\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                  Section                  | Calls |   Self(s)  |   Avg(s)   |    %   | Children(s) |   Avg(s)   |    %   |  Total(s)  |   Avg(s)   |    %   |\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n| pookaTestApp (main)                       |     1 |      0.015 |      0.015 |   0.00 |    1145.325 |   1145.325 | 100.00 |   1145.340 |   1145.340 | 100.00 |\n|   FEProblem::outputStep                   |     2 |      0.448 |      0.224 |   0.04 |       0.505 |      0.252 |   0.04 |      0.953 |      0.476 |   0.08 |\n|   Steady::PicardSolve                     |     1 |      0.000 |      0.000 |   0.00 |    1061.416 |   1061.416 |  92.67 |   1061.416 |   1061.416 |  92.67 |\n|     FEProblem::solve                      |     1 |   1000.687 |   1000.687 |  87.37 |      59.227 |     59.227 |   5.17 |   1059.914 |   1059.914 |  92.54 |\n|       FEProblem::computeResidualInternal  |     4 |      0.000 |      0.000 |   0.00 |       9.506 |      2.376 |   0.83 |      9.506 |      2.376 |   0.83 |\n|       FEProblem::computeJacobianInternal  |     2 |      0.000 |      0.000 |   0.00 |      49.711 |     24.856 |   4.34 |     49.711 |     24.856 |   4.34 |\n|     FEProblem::outputStep                 |     1 |      0.205 |      0.205 |   0.02 |       0.004 |      0.004 |   0.00 |      0.209 |      0.209 |   0.02 |\n|     AuxiliarySystem::computeElementalVars |     1 |      1.002 |      1.002 |   0.09 |       0.291 |      0.291 |   0.03 |      1.293 |      1.293 |   0.11 |\n|   Steady::final                           |     1 |      0.001 |      0.001 |   0.00 |       0.049 |      0.049 |   0.00 |      0.051 |      0.051 |   0.00 |\n|     FEProblem::outputStep                 |     1 |      0.043 |      0.043 |   0.00 |       0.006 |      0.006 |   0.00 |      0.049 |      0.049 |   0.00 |\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n1- Is it OK to consider the  'Avg(s)' column (penultimate column) of the raw 'FEProblem::solve' to plot my benchmarking?\n2- There is another block that determine performance and timing:\nSummary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --\n                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total\n 0:      Main Stage: 1.1462e+03 100.0%  2.8356e+12 100.0%  5.721e+05 100.0%  9.959e+04      100.0%  8.080e+02  99.1%\n\n------------------------------------------------------------------------------------------------------------------------\n\nIs the column after 'Main Stage:' the total time of my simulation?\nThanks in advance for the help!\nJulita",
          "url": "https://github.com/idaholab/moose/discussions/20083",
          "updatedAt": "2022-01-31T19:07:16Z",
          "publishedAt": "2022-01-19T21:25:53Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is the MOOSE perf graph, not the PETSc one. Documentation is here:\nhttps://mooseframework.inl.gov/source/outputs/PerfGraphOutput.html\n1- yes, since it's only called once for your case. Otherwise Total (s) is usually the better one.\n2- this does like a different perf graph. Is this the PETSc one? I've never seen that one.\nI reckon since you want to look at moose performance, you should stick to the moose one.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20083#discussioncomment-2001522",
                  "updatedAt": "2022-01-19T23:14:11Z",
                  "publishedAt": "2022-01-19T23:14:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Changing input file parameter from command line",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nIn an optimization problem, I am using Matlab script to run moose on wsl. I am using Matlab only to perform optimization while the actual simulation is done through moose. This is fine as long as the input file/s is not changing during the optimization process. Now, I need to loop over a parameter that requires changing kernel parameters as well as the boundary condition parameters within the input file.  For example, here is an example of what parameter do I need to modify in kernel and boundary conditions. Here, rate and coef are the parameters. As a note, let assume that the parameter that is changing is freq, then, coef= some factor * freq and rate = freq^2\n[reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = -10000 this is the **(parameter)^2.**\n    []\n\n  [uxr_left]\n        type = CoupledVarNeumannBC\n        variable = uxr\n        boundary = '3'\n        v = uxi\n        coef=-100 this is the parameter or a some scaling of the parameter\n  []\n\nSo, how can I achieve this? Can I change an input parameter from the command line? Do I have other options? Also, How can I relate a parameter in the kernels section to a parameter in the boundary condition section?\nAny suggestions?",
          "url": "https://github.com/idaholab/moose/discussions/20085",
          "updatedAt": "2022-06-04T14:42:17Z",
          "publishedAt": "2022-01-19T22:23:15Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can change input parameters from the command line.\nfor example here: ./app-opt -i input_file.i reaction_imagy/rate=-10002 uxr_left/coef=-101\nYou can do the second thing by defining it at the top of the input file:\nvalue_to_use = 45\nand then in the kernel and in the BC:\n[reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = ${value_to_use}\n    []\n\n  [uxr_left]\n        type = CoupledVarNeumannBC\n        variable = uxr\n        boundary = '3'\n        v = uxi\n        coef=${value_to_use}\n  []",
                  "url": "https://github.com/idaholab/moose/discussions/20085#discussioncomment-2001348",
                  "updatedAt": "2022-06-17T13:54:59Z",
                  "publishedAt": "2022-01-19T22:33:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Hello\nYou can change input parameters from the command line. for example here: ./app-opt -i input_file.i reaction_imagy/rate=-10002 uxr_left/coef=-101\nYou can do the second thing by defining it at the top of the input file:\nvalue_to_use = 45 and then in the kernel and in the BC:\n[reaction_imagy]\n        type = Reaction\n        variable = uyi\n        rate = ${value_to_use}\n    []\n\n  [uxr_left]\n        type = CoupledVarNeumannBC\n        variable = uxr\n        boundary = '3'\n        v = uxi\n        coef=${value_to_use}\n  []\n\n\nThank you, @GiudGiud .\nAnd I assume that I can multiply the value_to_use by some number to scale it or raise it to a power, Am I correct?\nsomething like:\n rate=(${value_to_use})^2\nand\ncoef=0.76 * ${value_to_use}",
                          "url": "https://github.com/idaholab/moose/discussions/20085#discussioncomment-2001370",
                          "updatedAt": "2022-06-17T13:55:41Z",
                          "publishedAt": "2022-01-19T22:39:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can but it takes a different syntax.\n${fparse value_to_use*value_to_use}",
                          "url": "https://github.com/idaholab/moose/discussions/20085#discussioncomment-2001401",
                          "updatedAt": "2022-08-26T23:08:37Z",
                          "publishedAt": "2022-01-19T22:46:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "here's the doc page for all this:\nhttps://mooseframework.inl.gov/application_usage/input_syntax.html",
                          "url": "https://github.com/idaholab/moose/discussions/20085#discussioncomment-2001409",
                          "updatedAt": "2022-08-26T23:08:37Z",
                          "publishedAt": "2022-01-19T22:48:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Mixing AD kernels",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "Hey,\nI was wondering if someone could tell me what happens if I mix AD and non-AD kernels? My guess is that the jacobian would not be correct and cause convergence problems. Would this also cause MOOSE to converge to a different solution? Is there anything else that would happen? Obviously this is not recommended, but im trying to understand what happens under the hood of MOOSE.\nThanks,\nZack",
          "url": "https://github.com/idaholab/moose/discussions/20075",
          "updatedAt": "2022-06-14T14:52:32Z",
          "publishedAt": "2022-01-18T23:04:59Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFirst, if you are not using Newton's method, then nothing will change . (P) JFNK does not make use of AD because we don't have to form a Jacobian.\nEDIT: see discussion below for PJFNK\nThen if you are using Newton's method,\nIf your non-AD kernels have the Jacobian (diagonal and off-diagonal) contributions coded exactly, then it will not change anything. The Jacobian will still be exact, and will still be used the same way.\nIf the Jacobian is only coded partially or approximately, then it may or may not cause convergence problems that would not have been there when using AD. There's really no certainty though.\ndocs on AD:\nhttps://mooseframework.inl.gov/automatic_differentiation/#!\nIt'll not converge to a different solution though. The residual has not changed, and we're still converging to the (usually unique) solution that zeroes it out.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1994081",
                  "updatedAt": "2022-06-14T14:52:32Z",
                  "publishedAt": "2022-01-18T23:51:32Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "@GiudGiud Is it accurate to say PJFNK doesn't use AD? I thought it still uses jacobian for preconditioning (well, it apparently depends on the specific preconditioner). I'm just curious.",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1994703",
                          "updatedAt": "2022-06-14T14:52:38Z",
                          "publishedAt": "2022-01-19T02:56:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Umm that could be.\nLet's tag @lindsayad to be sure",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1994804",
                          "updatedAt": "2022-06-14T14:52:38Z",
                          "publishedAt": "2022-01-19T03:24:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We use the diagonal of the Jacobian for preconditioning",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1995095",
                          "updatedAt": "2022-06-14T14:52:38Z",
                          "publishedAt": "2022-01-19T05:15:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Yeah, that's the default I believe. If you use smp and specify full = true it'll use the entire Jacobian, in which case the incorrect Jacobian might affect convergence.",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1997596",
                          "updatedAt": "2022-07-09T09:54:23Z",
                          "publishedAt": "2022-01-19T12:58:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "@hugary1995 So if we change the default preconditioner for PJFNK to one what doesn't use the jacobian then we should be fine right?",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1998415",
                          "updatedAt": "2022-07-09T09:54:24Z",
                          "publishedAt": "2022-01-19T14:48:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "That's JFNK then. It depends on what you mean by \"should be fine\". It would be fine in the sense that mixing AD and nonAD kernels makes no difference. But I've had limited success with JFNK in practice.",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-1999523",
                          "updatedAt": "2022-07-09T09:54:28Z",
                          "publishedAt": "2022-01-19T17:03:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Jacobian-free methods typically require preconditioning in order to be efficient. In theory you could converge to a solution in n-dof GMRES iterations without any preconditioning but there are some caveats there in practice I believe.\n@hugary1995 whether a kernel is AD or not doesn't make a difference with respect to whether a computeJacobian function will get called. If you have any solve method that constructs a matrix (NEWTON or PJFNK for example) then computeJacobian methods will get called for both non-AD and AD kernels. You really should not think of ADKernels and Kernels as being any different with the exception that you can be quite confident that the former will produce a 100% accurate Jacobian while the latter may or may not. If the latter is 100% accurate, then with respect to the solver the ADKernel and Kernel will appear completely equivalent.\nThere is one tricky thing that AD triggers for PJFNK. For the default AD container type, we compute the object Jacobian all at once and we add to the system Jacobian all at once. It is impossible (or it would be very difficult and slow) to filter out Jacobian contributions from specific variables. Consequently if you have any AD objects and you are using our default MOOSE configuration, you will be implicitly getting a full = true matrix all the time, e.g. if you requested only a diagonal matrix or if you asked for specific row-column coupling, we would ignore your request.\nPerhaps I should also note that if you specify solve_type = NEWTON then we also set full = true behind the scenes and this is true irrespective of whether there are any AD objects in the simulation. We do this because it only makes sense to use NEWTON if you are supplying all the variable couplings (e.g. complete and hopefully accurate Jacobian). A differenc here is that I believe we still honor requests for specific row-column couplings ... but it would be to your detriment.",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-2000059",
                          "updatedAt": "2022-07-09T09:54:28Z",
                          "publishedAt": "2022-01-19T18:35:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "You really should not think of ADKernels and Kernels as being any different with the exception that you can be quite confident that the former will produce a 100% accurate Jacobian while the latter may or may not. If the latter is 100% accurate, then with respect to the solver the ADKernel and Kernel will appear completely equivalent.\n\nThe op was assuming incorrect non-AD Jacobian.\nI agree with you otherwise.",
                          "url": "https://github.com/idaholab/moose/discussions/20075#discussioncomment-2000142",
                          "updatedAt": "2022-07-09T09:54:39Z",
                          "publishedAt": "2022-01-19T18:52:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Custom InterfaceKernel for permeation flux",
          "author": {
            "login": "lanzam213"
          },
          "bodyText": "My question relates to constructing a DGresidual and Jacobian for a custom interface kernel. I developed the interface kernel to satisfy a permeation flux model at a gas-solid interface. A summary of the problem approach and interface kernel is included below. Currently I'm stuck after looking at examples of interface kernels with DGresidual, including conjugateHeatTransfer, and attempting to solve this problem.  The solution converges but does not appear correct.\npermeation_example.i Input\npermeation_example.txt\nProblem summary\nPermeation_approach.pptx\nPermeationFLuxKernel.h\nPermeationFluxKernel.h.txt\n-Mark",
          "url": "https://github.com/idaholab/moose/discussions/20044",
          "updatedAt": "2023-02-06T20:29:33Z",
          "publishedAt": "2022-01-13T21:15:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf it converges but the result is incorrect, then the formula for the residual must be wrong.\nIf you replace the interface by boundary conditions, do you get acceptable results?\nIf so then there must be an issue with the interface kernel. What kind of fluxes do you have across the interface? Just diffusion? Looks like there is a constant term too?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20044#discussioncomment-1987229",
                  "updatedAt": "2023-02-06T20:29:39Z",
                  "publishedAt": "2022-01-18T01:47:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about kappa's value in input file",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Dear Sir/Madam,\nCould you please explain the kappa's meaning to me in the input file? What does kappa represent and how does it relate to the interface width and energy? Normally, how to set the value of kappa?\n\nThank you very much.\nBest regards,\nHaiying",
          "url": "https://github.com/idaholab/moose/discussions/20052",
          "updatedAt": "2022-06-22T07:33:34Z",
          "publishedAt": "2022-01-16T21:33:19Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhich input file are you talking about? kappa could be very different things depending on the physics.\nYou can see its value by changing the prop_values field to the value you want. If you want something more complex than a constant, please let us know and we'll discuss what's best for your case\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20052#discussioncomment-1980524",
                  "updatedAt": "2022-06-22T12:33:55Z",
                  "publishedAt": "2022-01-17T03:18:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "I am talking about solving the CH equation. What's the meaning of kappa when dealing with CH equation?",
                          "url": "https://github.com/idaholab/moose/discussions/20052#discussioncomment-1987262",
                          "updatedAt": "2022-06-22T12:34:02Z",
                          "publishedAt": "2022-01-18T02:00:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen will know",
                          "url": "https://github.com/idaholab/moose/discussions/20052#discussioncomment-1987272",
                          "updatedAt": "2022-06-22T12:34:03Z",
                          "publishedAt": "2022-01-18T02:03:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "In this input file, kappa is the value of the gradient energy coefficient. You can get a good introduction to solving the Cahn-Hilliard equation using MOOSE by going through the following tutorial:\nhttps://mooseframework.inl.gov/modules/phase_field/Tutorial.html",
                          "url": "https://github.com/idaholab/moose/discussions/20052#discussioncomment-1993899",
                          "updatedAt": "2022-06-22T12:34:10Z",
                          "publishedAt": "2022-01-18T22:47:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[ Convergence problem ] occurs  when i change the  material properties. [ N-S module ]",
          "author": {
            "login": "leezw37"
          },
          "bodyText": "Hello, everyone. I am a confused new user of MOOSE and need your help!  Anything will be appreciated!\nWhen i was using Navier Stokes Module, I got  a convegence problem as soon as i changed the material properties of a test file.And here is the address: moose/modules/navier_stokes/test/tests/finite_element/ins/velocity_channel/velocity_inletBC_by_parts.i\nAll i have done to make this didn't converge is changeing \"mu\" from 1 to 1e-5 in the 88th line. I didn't get it.\n(Why 1e-5?\nActually, I am doing a more complex thing with the propeties of air : rho = 1.225, mu = 1.7894e-05.\nWhen i used real properties of air or water, instead of 1 like so many other test files, i got this problem. And this problem occurs in many other test files.)\nMOOSE is no doubt a powerful tool, and i think there must be a way to deal with the complex matertial properties.Is there anyone can help me to find out the reason and solution? Love you.\n========================================================================================\n#moose/modules/navier_stokes/test/tests/finite_element/ins/velocity_channel/velocity_inletBC_by_parts.i\n# This input file tests outflow boundary conditions for the incompressible NS equations.\n\n[GlobalParams]\n  gravity = '0 0 0'\n  integrate_p_by_parts = true\n[]\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmin = 0\n  xmax = 3.0\n  ymin = 0\n  ymax = 1.0\n  nx = 30\n  ny = 10\n  elem_type = QUAD9\n[]\n\n\n[Variables]\n  [./vel_x]\n    order = SECOND\n    family = LAGRANGE\n  [../]\n  [./vel_y]\n    order = SECOND\n    family = LAGRANGE\n  [../]\n  [./p]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n[Kernels]\n  [./mass]\n    type = INSMass\n    variable = p\n    u = vel_x\n    v = vel_y\n    pressure = p\n  [../]\n  [./x_momentum_space]\n    type = INSMomentumLaplaceForm\n    variable = vel_x\n    u = vel_x\n    v = vel_y\n    pressure = p\n    component = 0\n  [../]\n  [./y_momentum_space]\n    type = INSMomentumLaplaceForm\n    variable = vel_y\n    u = vel_x\n    v = vel_y\n    pressure = p\n    component = 1\n  [../]\n[]\n\n[BCs]\n  [./x_no_slip]\n    type = DirichletBC\n    variable = vel_x\n    boundary = 'top bottom'\n    value = 0.0\n  [../]\n  [./y_no_slip]\n    type = DirichletBC\n    variable = vel_y\n    boundary = 'left top bottom'\n    value = 0.0\n  [../]\n  [./x_inlet]\n    type = FunctionDirichletBC\n    variable = vel_x\n    boundary = 'left'\n    function = 'inlet_func'\n  [../]\n[]\n\n[Materials]\n  [./const]\n    type = GenericConstantMaterial\n    block = 0\n    prop_names = 'rho mu'\n    prop_values = '1  1e-5'  # mu was 1 in the original inputfile\n  [../]\n[]\n\n[Preconditioning]\n  [./SMP_PJFNK]\n    type = SMP\n    full = true\n    solve_type = NEWTON\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  petsc_options_iname = '-ksp_gmres_restart -pc_type -sub_pc_type -sub_pc_factor_levels'\n  petsc_options_value = '300                bjacobi  ilu          4'\n  line_search = none\n  nl_rel_tol = 1e-12\n  nl_max_its = 6\n  l_tol = 1e-6\n  l_max_its = 300\n[]\n\n[Outputs]\n  [./out]\n    type = Exodus\n  [../]\n[]\n\n[Functions]\n  [./inlet_func]\n    type = ParsedFunction\n    value = '-4 * (y - 0.5)^2 + 1'\n  [../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20054",
          "updatedAt": "2022-07-03T15:51:34Z",
          "publishedAt": "2022-01-17T13:47:45Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "For Re > 1, you should put supg = true in your GlobalParams block. Unless you add streamline-upwind Petrov-Galerkin stabilization, you will essentially have a central-differencing scheme for advection which does not capture the physics and is unstable.",
                  "url": "https://github.com/idaholab/moose/discussions/20054#discussioncomment-1992325",
                  "updatedAt": "2022-07-03T15:52:05Z",
                  "publishedAt": "2022-01-18T18:10:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Solve two field variables with separator solvers",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE Experts,\nI am working on a multi-field problem in which one field converges with a different solver or preconditioner and another one with a different solver or preconditioner. Is there any way by which I can solve different fields with separate solvers?\nI am thinking of using the MultiApp module provided in the MOOSE.\nPlease let me know. I shall be very thankful.\nBest\nAvtar",
          "url": "https://github.com/idaholab/moose/discussions/20069",
          "updatedAt": "2022-08-13T00:55:28Z",
          "publishedAt": "2022-01-18T16:25:50Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nMultiapps are the current cannon way to do this. You can converge all fields by iterating between both apps (tight coupling).\nThis tutorial should help: https://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial02_multiapps/index.html\nIf you think you can get away with different pre-conditioners for each field, while keeping them fully-coupled (single matrix solve), then you may use a field-split preconditioning instead. I wrote some docs but they arent merged yet. They are online on this PR:\nhttps://github.com/idaholab/moose/blob/585373f878996b8d56f3b96bb6fd04ad4c8b036f/framework/doc/content/source/preconditioners/FieldSplitPreconditioner.md\nDoc website isnt up yet\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20069#discussioncomment-1992128",
                  "updatedAt": "2022-08-13T00:55:45Z",
                  "publishedAt": "2022-01-18T17:35:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hello Guillaume\nThank you very much for guiding me.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20069#discussioncomment-1992147",
                          "updatedAt": "2022-08-13T00:55:51Z",
                          "publishedAt": "2022-01-18T17:38:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "SSL peer certificate was not OK",
          "author": {
            "login": "HerambMahajan"
          },
          "bodyText": "During MOOSE Conda packages installation, 'mamba install moose-tools moose-libmesh' command gave me following error:\n\" SSL peer certificate or SSH remote key was not OK. [https://conda.software.inl.gov/public/noarch/repodata.json] SSL certificate problem: unable to get local issuer certificate. \".\nHow can I connect my machine to license servers?",
          "url": "https://github.com/idaholab/moose/discussions/20058",
          "updatedAt": "2022-06-29T15:12:08Z",
          "publishedAt": "2022-01-17T17:31:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "We have seen this error most frequent when the user is using some sort of VPN software, or possibly has proxy settings set. Proxies that allows that person's corporation to perform MITM (man in the middle) inspections on the data being transferred to and from machine. These inspections put the package back together, but not in a way which most terminal application trust (corporation using self-signed root/authority certificates).\nYou can try the following to 'ignore' SSL errors. But this allows for additional security concerns.\nconda config --set ssl_verify false\nAnd then try your mamba command again.\nOnce complete, if you wish to be more secure once again:\nconda config --set ssl_verify true",
                  "url": "https://github.com/idaholab/moose/discussions/20058#discussioncomment-1985846",
                  "updatedAt": "2022-06-29T15:12:09Z",
                  "publishedAt": "2022-01-17T19:32:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "HerambMahajan"
                          },
                          "bodyText": "Thank you. That worked!",
                          "url": "https://github.com/idaholab/moose/discussions/20058#discussioncomment-1991139",
                          "updatedAt": "2022-06-29T15:12:26Z",
                          "publishedAt": "2022-01-18T15:10:07Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}