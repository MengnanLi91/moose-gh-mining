{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNS0wNVQwOTo1MDoyNC0wNTowMM4ATh9l"
    },
    "edges": [
      {
        "node": {
          "title": "Multithreading error \"signal 11\" in thermal expansion simulation with gap",
          "author": {
            "login": "nuomi68"
          },
          "bodyText": "Hello!\nMOOSE\nI get an error  showed  that \"signal 11\"  when I added thermal expansion to heat conduction. The run command is mpiexec -n 2 ./app-opt  -i gaptherm.i --n-threads=2 , which is showed as follows:\n\nI have tried three cases without this error:\n\nNot use  multithreading;\nChange the 3D simulation to 2D;\nNot use Tensor Mechanics module in the 3D case\n\nMy input file is\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  incremental = true\n[]\n\n\ngap_size = 0.0001\n\nfuel_outer_radius = 0.005\nclad_width=0.001\nclad_inner_radius = '${fparse fuel_outer_radius + gap_size}'\nclad_outer_radius = '${fparse fuel_outer_radius + gap_size+clad_width}'\n\n[Mesh]\n  parallel_type = distributed\n  use_displaced_mesh = true\n  [fuel_rod]\n    type = ConcentricCircleMeshGenerator\n    num_sectors = 30\n    radii = '${fuel_outer_radius} ${clad_inner_radius} ${clad_outer_radius}'\n    rings = '15 1 5'\n    has_outer_square = false\n    preserve_volumes = true\n    portion = full\n  []\n  [renameblock]\n    type = RenameBlockGenerator\n    input = fuel_rod\n    old_block = '1 2 3'\n    new_block = 'fuel gap cladding'\n  []\n  [renameboundary]\n    type = RenameBoundaryGenerator\n    input = renameblock\n    old_boundary = 'outer'\n    new_boundary = 'cladding_outface'\n  []\n  [rename_fuel_face]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = renameboundary\n    primary_block = fuel\n    paired_block = gap\n    new_boundary = 'fuel_face'\n  []\n  [rename_cladding_inface]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = rename_fuel_face\n    primary_block = cladding\n    paired_block = gap\n    new_boundary = 'cladding_inface'\n  []\n  [2d_mesh]\n    type = BlockDeletionGenerator\n    input = rename_cladding_inface\n    block = gap\n  []\n  [3d_mesh]\n    type = AdvancedExtruderGenerator\n    input = 2d_mesh\n    heights = '0.02'\n    direction = '0 0 1'\n    num_layers = '10'\n  []\n  patch_update_strategy=iteration\n[]\n\n[Problem]\n  coord_type = XYZ\n#    rz_coord_axis = Z\n[]\n\n[GlobalParams]\n  order = FIRST\n[]\n\n[Variables]\n    [./disp_x]\n  [../]\n  [./disp_y]\n  [../]\n  [./disp_z]\n  [../]\n  [temp]\n      order = FIRST\n      family = LAGRANGE\n      initial_condition = 300.0\n  []\n[]\n\n[AuxVariables]\n  [./gap_conductance]\n      order = CONSTANT\n      family = MONOMIAL\n  [../]\n[]\n\n[Kernels]\n  [./heat]\n      type = HeatConduction\n      variable = temp\n  [../]\n  [./heat_source]\n      type = HeatSource\n      value = 6.6E7\n      variable = temp\n      block=fuel\n  [../]\n  [./heat_derivative]\n      type = HeatConductionTimeDerivative\n      variable = temp\n  [../]\n[]\n\n\n[BCs]\n  [temp_clad]\n      type = DirichletBC\n      boundary = cladding_outface\n      variable = temp\n      value = 400.0\n  []\n[]\n\n[Materials]\n  [fuel_elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.0e11\n    poissons_ratio = 0.345\n  [../]\n  [./thermal_strain1]\n    type = ComputeThermalExpansionEigenstrain\n    thermal_expansion_coeff = 1.243e-6\n    stress_free_temperature = 10\n    temperature = temp\n    eigenstrain_name = eigenstrain\n  [../]\n  [heat]\n      type = HeatConductionMaterial\n      specific_heat = 299.96\n      thermal_conductivity = 17\n  []\n  [density]\n      type = GenericConstantMaterial\n      prop_names = density\n      prop_values = 6.161E3\n  []\n  [fuel_stress]\n    type = ComputeFiniteStrainElasticStress\n\n  []\n[]\n[Modules/TensorMechanics/Master]\n  [fule]\n    strain = FINITE\n    eigenstrain_names = 'eigenstrain'#swell\n    add_variables = true\n    generate_output = 'stress_xx stress_yy stress_zz stress_xy stress_xz stress_yz\n                      strain_xx strain_yy strain_zz strain_xy strain_xz strain_yz'\n  []\n[]\n[Contact]\n  [interface]\n    primary = cladding_inface\n    secondary = fuel_face\n    model = frictionless\n    formulation = penalty\n    penalty = 1e14\n    normalize_penalty = true\n    normal_smoothing_distance = 0.1\n    # order=SECOND\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  \n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = 'lu        superlu_dist'\n\n  start_time = 0.0\n  end_time = 1.0\n  dt = 0.1\n  dtmin = 0.0001\n\n  nl_rel_tol = 1E-12\n  nl_abs_tol = 1E-7\n\n  [./Quadrature]\n      order = fifth\n      side_order = seventh\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24294",
          "updatedAt": "2023-06-24T22:35:10Z",
          "publishedAt": "2023-05-08T14:05:15Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThank you for the bug report.\nWe'll take a look\nFor now, please just use mpirun -n 4 without any threads if it runs well in that configuration\nPerformance should be very similar if not better.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5838763",
                  "updatedAt": "2023-05-08T14:12:36Z",
                  "publishedAt": "2023-05-08T14:12:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thank you for your reply.\nI've just made some try again, when I add ModularGapConductanceConstraint module, the error will disappear. But I can't use this module properly, which means I can't set reasonably parameter values.  At the same time, the module needs to add an extra variable, which greatly increases  computation time. So I still hope to run the simulation without using this module. I hope your help.\nLWZ\nMy new input file is\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  incremental = true\n[]\n\ngap_size = 0.0001\nfuel_outer_radius = 0.005\nclad_width=0.001\nclad_inner_radius = '${fparse fuel_outer_radius + gap_size}'\nclad_outer_radius = '${fparse fuel_outer_radius + gap_size+clad_width}'\n\n[Mesh]\n  parallel_type = distributed\n  use_displaced_mesh = true\n  [fuel_rod]\n    type = ConcentricCircleMeshGenerator\n    num_sectors = 30\n    radii = '${fuel_outer_radius} ${clad_inner_radius} ${clad_outer_radius}'\n    rings = '15 1 5'\n    has_outer_square = false\n    preserve_volumes = true\n    portion = full\n  []\n  [renameblock]\n    type = RenameBlockGenerator\n    input = fuel_rod\n    old_block = '1 2 3'\n    new_block = 'fuel gap cladding'\n  []\n  [renameboundary]\n    type = RenameBoundaryGenerator\n    input = renameblock\n    old_boundary = 'outer'\n    new_boundary = 'cladding_outface'\n  []\n  [rename_fuel_face]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = renameboundary\n    primary_block = fuel\n    paired_block = gap\n    new_boundary = 'fuel_face'\n  []\n  [rename_cladding_inface]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = rename_fuel_face\n    primary_block = cladding\n    paired_block = gap\n    new_boundary = 'cladding_inface'\n  []\n  [2d_mesh]\n    type = BlockDeletionGenerator\n    input = rename_cladding_inface\n    block = gap\n  []\n  [3d_mesh]\n    type = AdvancedExtruderGenerator\n    input = 2d_mesh\n    heights = '0.02'\n    direction = '0 0 1'\n    num_layers = '10'\n  []\n  [secondary]\n    type = LowerDBlockFromSidesetGenerator\n    sidesets = 'fuel_face'\n    new_block_id = 10001\n    new_block_name = 'secondary_lower'\n    input = 3d_mesh\n  []\n  [primary]\n    type = LowerDBlockFromSidesetGenerator\n    sidesets = 'cladding_inface'\n    new_block_id = 10000\n    new_block_name = 'primary_lower'\n    input = secondary\n  []\n  patch_update_strategy=iteration\n[]\n\n[Problem]\n  coord_type = XYZ\n[]\n\n[GlobalParams]\n  order = FIRST\n[]\n\n[Variables]\n    [./disp_x]\n  [../]\n  [./disp_y]\n  [../]\n  [./disp_z]\n  [../]\n  [temp]\n      order = FIRST\n      family = LAGRANGE\n      initial_condition = 300.0\n  []\n  [lm]\n    block = 'secondary_lower'\n  []\n\n[]\n\n[AuxVariables]\n  [./gap_conductance]\n      order = CONSTANT\n      family = MONOMIAL\n  [../]\n  [interface_normal_lm]\n    block = 'secondary_lower'\n    initial_condition = 100.0\n  []\n[]\n\n[Kernels]\n  [./heat]\n      type = HeatConduction\n      variable = temp\n  [../]\n  [./heat_source]\n      type = HeatSource\n      value = 6.6E7\n      variable = temp\n      block=fuel\n  [../]\n  [./heat_derivative]\n      type = HeatConductionTimeDerivative\n      variable = temp\n  [../]\n[]\n\n\n[BCs]\n  [temp_clad]\n      type = DirichletBC\n      boundary = cladding_outface\n      variable = temp\n      value = 400.0\n  []\n[]\n\n[Materials]\n  [fuel_elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 2.0e11\n    poissons_ratio = 0.345\n  [../]\n  [./thermal_strain1]\n    type = ComputeThermalExpansionEigenstrain\n    thermal_expansion_coeff = 1.243e-6\n    stress_free_temperature = 10\n    temperature = temp\n    eigenstrain_name = eigenstrain\n  [../]\n  [heat]\n      type = HeatConductionMaterial\n      specific_heat = 299.96\n      thermal_conductivity = 17\n  []\n  [density]\n      type = GenericConstantMaterial\n      prop_names = density\n      prop_values = 6.161E3\n  []\n  [fuel_stress]\n    type = ComputeFiniteStrainElasticStress\n\n  []\n[]\n[Modules/TensorMechanics/Master]\n  [fule]\n    strain = FINITE\n    eigenstrain_names = 'eigenstrain'#swell\n    add_variables = true\n    generate_output = 'stress_xx stress_yy stress_zz stress_xy stress_xz stress_yz\n                      strain_xx strain_yy strain_zz strain_xy strain_xz strain_yz'\n  []\n[]\n\n\n[UserObjects]\n  [radiation]\n    type = GapFluxModelRadiation\n    temperature = temp\n    boundary =  cladding_inface\n    primary_emissivity = 1.0\n    secondary_emissivity = 1.0\n    use_displaced_mesh = true\n  []\n  [closed]\n    type = GapFluxModelPressureDependentConduction\n    temperature = temp\n    contact_pressure = interface_normal_lm\n    primary_hardness = 129\n    secondary_hardness = 15\n    boundary =   cladding_inface\n    primary_conductivity=330\n    secondary_conductivity=330\n  []\n[]\n\n[ThermalContact]\n  [./thermal_contact]\n    type = GapHeatTransfer\n    variable =  temp\n    primary = cladding_inface\n    secondary = fuel_face\n    emissivity_primary = 0\n    emissivity_secondary = 0\n    gap_conductivity = 1\n    quadrature = true\n    gap_geometry_type = CYLINDER\n    cylinder_axis_point_1 = '0 0 0'\n    cylinder_axis_point_2 = '0 0 1'\n  [../]\n[]\n\n[Contact]\n  [interface]\n    primary = cladding_inface\n    secondary = fuel_face\n    model = frictionless\n    formulation = penalty\n    penalty = 1e14\n    normalize_penalty = true\n    normal_smoothing_distance = 0.1\n  []\n[]\n\n[Constraints]\n  [ced]\n    type = ModularGapConductanceConstraint\n    variable = lm\n    secondary_variable = temp\n    primary_boundary =  cladding_inface\n    primary_subdomain = 10000\n    secondary_boundary = fuel_face\n    secondary_subdomain = 10001\n    gap_flux_models = 'closed radiation'\n    # gap_geometry_type = AUTO\n    # sphere_origin = '0 0 0'\n    use_displaced_mesh = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n  \n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = 'lu        superlu_dist'\n\n  start_time = 0.0\n  end_time = 1.0\n  dt = 0.1\n  dtmin = 0.0001\n\n  nl_rel_tol = 1E-12\n  nl_abs_tol = 1E-7\n\n  [./Quadrature]\n      order = fifth\n      side_order = seventh\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5839049",
                          "updatedAt": "2023-05-08T14:38:48Z",
                          "publishedAt": "2023-05-08T14:38:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I get this error in parallel\nError in NearestNodeLocator : The nearest neighbor lies outside the ghosted set of elements. Increase the ghosting_patch_size parameter in the mesh block and try again.\nplease follow these instructions and see if it fixes it",
                  "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5839047",
                  "updatedAt": "2023-05-08T14:38:27Z",
                  "publishedAt": "2023-05-08T14:38:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "I also got this error in my attempts, but I do not know how to solve it. I tried to adjust min_gap in GapHeatTransfer, but the problem has not been improved",
                          "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5839089",
                          "updatedAt": "2023-05-08T14:42:14Z",
                          "publishedAt": "2023-05-08T14:42:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It s a mesh parameter. The parameter can be added directly in the Mesh block",
                          "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5839104",
                          "updatedAt": "2023-05-08T14:44:06Z",
                          "publishedAt": "2023-05-08T14:44:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "I tried to add ghosting_patch_size parameter into the Mesh, but the problem was not solved. NearestNodeLocator error would not appear when  Contact  was not used.\nI am very sorry that I forgot to delete the Contact module in the first input file. If I delete Contact, I will get the multi-threading error I described.",
                          "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5839364",
                          "updatedAt": "2023-05-08T15:13:09Z",
                          "publishedAt": "2023-05-08T15:13:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "nuomi68"
                  },
                  "bodyText": "I've tried a solution to the multithreading error I mentioned above. First I use the--mesh-only command to generate the mesh, and then input files to read the generated mesh so that there will be no multithreading error. I think this error is caused by Libmesh.",
                  "url": "https://github.com/idaholab/moose/discussions/24294#discussioncomment-5846512",
                  "updatedAt": "2023-05-09T08:57:33Z",
                  "publishedAt": "2023-05-09T08:57:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to calculate the Jacobian in [ComputeSimoHughesJ2PlasticityStress]",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Hallo MOOSEers,\nI'm trying to use [ComputeSimoHughesJ2PlasticityStress] module, as listed here https://mooseframework.inl.gov/source/materials/lagrangian/ComputeSimoHughesJ2PlasticityStress.html. When I check the source code of it, I cannot figure out how does the jacobian matrix is calculated, specifically the derivatives inside, like 'd_tau_d_F', '_d_be_d_F', '_d_deltaep_d_betr', '_d_n_d_be' , '_d_R_d_betr', '_d_J_d_betr'. I checked to the reference of it (Simo and Hughes (2006), Borden et al. (2016).), but I didn't find these derivatives. So I'm writing to ask how these values are derived, and it would be great if you could refer me to any literatures. Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/24302",
          "updatedAt": "2023-06-24T22:34:43Z",
          "publishedAt": "2023-05-08T21:27:56Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You can update the Jacobian iteratively (the one I implemented) like this:\nSimoHughesJ2Jacobian.pdf\nor use the implicit function theorem, which is easier in my opinion.\nI haven't had a chance to publish the above derivation, though it's pretty straightforward IMO.",
                  "url": "https://github.com/idaholab/moose/discussions/24302#discussioncomment-5843244",
                  "updatedAt": "2023-05-09T00:33:42Z",
                  "publishedAt": "2023-05-09T00:33:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thank you! @hugary1995",
                          "url": "https://github.com/idaholab/moose/discussions/24302#discussioncomment-5846113",
                          "updatedAt": "2023-05-09T08:10:04Z",
                          "publishedAt": "2023-05-09T08:10:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Failed to JIT compile expression",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "Hello,\nI got a message while executing that I have never seen before:\n\"*** Info ***\nFailed to JIT compile expression, falling back to byte code interpretation.\" This seems to lead to a fatal error later:\n\"JIT compile failed.\nIn file included from /opt/ohpc/pub/compiler/gcc/9.4.0/include/c++/9.4.0/x86_64-pc-linux-gnu/bits/c++config.h:528,\n                 from /opt/ohpc/pub/compiler/gcc/9.4.0/include/c++/9.4.0/cmath:41,\n                 from ./tmp_jit_mpl4ep.cc:2:\n/opt/ohpc/pub/compiler/gcc/9.4.0/include/c++/9.4.0/x86_64-pc-linux-gnu/bits/os_defines.h:39:10: fatal error: features.h: No such fileor directory\n   39 | #include <features.h>\"\n\nThe weird thing is that I run the same code on another (Linux) machine using the same gnu compiler suite (I think) and there I do not get this message and error.\nThis issue seems to be not the same as JIT compile error when \"too many files open\" using ParsedMaterials (tophmatthews #9549). I am using ParsedMaterials,  but only three of them that are also linked: the third one uses the second one which uses the first one.\nAny ideas of what is going on here?",
          "url": "https://github.com/idaholab/moose/discussions/24298",
          "updatedAt": "2023-05-08T15:46:02Z",
          "publishedAt": "2023-05-08T14:40:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Can you share the parsed expression here?\nAnd you have write access to the folder this is running in / permissions set correctly right",
                  "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839095",
                  "updatedAt": "2023-05-08T14:42:54Z",
                  "publishedAt": "2023-05-08T14:42:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Hi Guillaume,\nYes, I have write access to the folder.\nBelow are the ParsedMaterials. The quantities mur, aparam, Ms are GenericConstantMaterials defined in preceding blocks:\n   [./hnorm]\n    type = ParsedMaterial\n    property_name = h_norm\n    coupled_variables = 'Hext_x Hext_y Hext_z'#\n    expression = 'sqrt((Hext_x)^2+(Hext_y)^2+(Hext_z)^2)'\n    execute_on = 'final'\n  [../]\n  [./Ha]\n    type = ParsedMaterial\n    property_name = Ha\n    material_property_names = 'mur Ms h_norm'\n    expression = 'max(0.,(mur -1.)*h_norm/Ms)'\n    execute_on = 'final'\n  [../]\n    [./permeability]\n    type = ParsedMaterial\n    property_name = chi\n    material_property_names = 'Ms aparam Ha h_norm'\n    expression = '0.5*Ms*(Ha +1.-sqrt((Ha+1.)^2-4.*Ha*(1.-aparam)))/((1.-aparam))'\n    execute_on = 'final'\n  [../]\n```",
                          "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839152",
                          "updatedAt": "2023-05-08T14:55:09Z",
                          "publishedAt": "2023-05-08T14:49:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Note that copy and paste missed some * signs for multiplication in the parsed expressions.",
                          "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839181",
                          "updatedAt": "2023-05-08T14:52:37Z",
                          "publishedAt": "2023-05-08T14:52:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "formatting got them back",
                          "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839202",
                          "updatedAt": "2023-05-08T14:55:02Z",
                          "publishedAt": "2023-05-08T14:55:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "for the last one, can you try:\n     material_property_names = 'Ms aparam Ha'\nyou dont use h_norm\nfor all, can you please try removing this execute_on = final. I ve never done that on Material",
                          "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839217",
                          "updatedAt": "2023-05-08T14:56:46Z",
                          "publishedAt": "2023-05-08T14:56:45Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Hi Guillaume. Yeah it looks like the \"execute_on\" is causing trouble. Removing that line for the ParsedMaterials seems to have made the problem go away. Interesting that the two different computer platforms gave different errors. On my linux workstation (Ubuntu 20.04 and gnu compilers) I did not get a warning about JIT compile and subsequent crash - instead the execution crashed because \"unused parameter 'Materials/permeability/execute_on' \"",
                          "url": "https://github.com/idaholab/moose/discussions/24298#discussioncomment-5839706",
                          "updatedAt": "2023-05-08T15:45:58Z",
                          "publishedAt": "2023-05-08T15:45:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow: how to visualise velocity on surfaces (paraview)",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nOur mesh has surfaces that we apply BCs on them, I want to visualise the velocity normal to the surfaces, is it possible with MOOSE/Paraview?\n[./topol_linear_TOPOLSRF_F005_UG1]\ntype = PorousFlowPiecewiseLinearSinkBEH\nvariable = porepressure\nboundary = 'TOPOLSRF_F005_UG1'\npt_vals = '-1e9 1e9'\nmultipliers = '-1e9 1e9'\nflux_function = 1\nv = min_dist\nPT_shift = -9810\nfluid_phase = 0\n[../]\n\n\nI know I can visualise the surface via Sets on Paraview, but I only can show node properties (velocity is a mesh property)\n\nIs there a way to work around this (like project element velocity value to the element surface [normal multiply?])?\nThank you very much!\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/24132",
          "updatedAt": "2023-05-06T01:58:31Z",
          "publishedAt": "2023-04-20T01:44:08Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to look at auxkernels for that.\nCreate a new auxiliary variable vec_times_n, const monomial\nThen in the auxkernel, also boundary restricted, you can set the value with velocity * _normal\nYou ll want the DIffusionFluxAux but change from grad_u to just _u.\nThere might be one already somewhere, but cant seem to find it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5668782",
                  "updatedAt": "2023-04-20T04:09:01Z",
                  "publishedAt": "2023-04-20T04:09:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud,\nThank you for a reply, to start, should I create another object based on DIffusionFluxAux and follow what you mentioned?\n\n\nvec_times_n, const monomial\n\n\nset the value with velocity * _normal\n\n\nchange from grad_u to just _u.\n\n\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5668800",
                          "updatedAt": "2023-04-20T04:12:40Z",
                          "publishedAt": "2023-04-20T04:12:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would do that yes.\nvec_times_n, const monomial -> just an input file change\nNew auxkernel (named: AdvectiveFluxAux)\n\nparameters: vx vy vz as params.addCoupledVar\ncoupled variables v_xyz set as v_x(coupledValue(\"vx\")\nreturn RealVectorValue(v_x[_qp], v_y[_qp], v_z[_qp]) * _normals[_qp]",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5668821",
                          "updatedAt": "2023-04-20T04:16:31Z",
                          "publishedAt": "2023-04-20T04:16:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "this is my code:\n#include \"AdvectiveFluxAuxBE.h\"\n#include \"Assembly.h\"\n\nregisterMooseObject(\"MOOSE_BEHApp\", AdvectiveFluxAuxBE);\n\nInputParameters\nAdvectiveFluxAuxBE::validParams()\n{\n  InputParameters params = AuxKernel::validParams();\n  params.addClassDescription(\"Compute components of flux vector for advection problems \"\n                             \"$(\\\\vec{J} = \\\\vec{v} \\\\cdot \\\\vec{n})$.\");\n  params.addCoupledVar(\"vx\", \"The x component of velocity\");\n  params.addCoupledVar(\"vy\", \"The y component of velocity\");\n  params.addCoupledVar(\"vz\", \"The z component of velocity\");\n  return params;\n}\n\nAdvectiveFluxAuxBE::AdvectiveFluxAuxBE(const InputParameters & parameters)\n  : AuxKernel(parameters),\n    _v_x(coupledValue(\"vx\")),\n    _v_y(coupledValue(\"vy\")),\n    _v_z(coupledValue(\"vz\")),\n    _normals(_assembly.normals())\n{\n}\n\nReal\nAdvectiveFluxAuxBE::computeValue()\n{\n  RealVectorValue velocity(_v_x[_qp], _v_y[_qp], _v_z[_qp]);\n  return velocity * _normals[_qp];\n}\n\ni'm still a bit confused, where does it take the velocity data from?\nI look at the example of the input file, it will look somewhat like this:\n\n[AuxVariables]\n  [./flux_n]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./flux_n]\n    type = AdvectiveFluxAuxBE\n    variable = flux_n\n    component = normal\n    boundary = 'xxxx'  #define my surface here\n    check_boundary_restricted = false\n  [../]\n[]\n\nand how do I visualise this data?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5669231",
                          "updatedAt": "2023-04-20T05:27:32Z",
                          "publishedAt": "2023-04-20T05:27:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "i'm still a bit confused, where does it take the velocity data from?\n\nDo you not have velocity non linear variables?\nAnd if not, cant porous flow compute them from the pressure field?\n\nand how do I visualise this data?\n\nYou visualize it on the whole domain, then use the threhshold filter in paraview to only show the nonzero cells. They will all be near the boundary",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5673845",
                          "updatedAt": "2023-04-20T13:24:49Z",
                          "publishedAt": "2023-04-20T13:24:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Do you not have velocity non linear variables?\nAnd if not, cant porous flow compute them from the pressure field?\n\nhmm i'm using this to compute Velocity PorousFlowDarcyVelocityComponent\n[./darcy_x]\norder = CONSTANT\nfamily = MONOMIAL\n[../]\n[./darcy_y]\norder = CONSTANT\nfamily = MONOMIAL\n[../]\n[./darcy_z]\norder = CONSTANT\nfamily = MONOMIAL\n[../]\n[]\n\n\n[AuxKernels]\n[./darcy_x]\ntype = PorousFlowDarcyVelocityComponent\nvariable = darcy_x\ngravity = '0 0 -9.81'\ncomponent = x\n[../]\n[./darcy_y]\ntype = PorousFlowDarcyVelocityComponent\nvariable = darcy_y\ngravity = '0 0 -9.81'\ncomponent = y\n[../]\n[./darcy_z]\ntype = PorousFlowDarcyVelocityComponent\nvariable = darcy_z\ngravity = '0 0 -9.81'\ncomponent = z\n[../]\n[]\n\nI'm still not sure, I will get back to you once there's an error.\n\nYou visualize it on the whole domain, then use the threhshold filter in paraview to only show the nonzero cells. They will all be near the boundary\n\nThis makes sense, thanks!\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5674809",
                          "updatedAt": "2023-04-20T14:51:09Z",
                          "publishedAt": "2023-04-20T14:51:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "darcy_xyz could serve as the v_xyz parameters then I think.\nbtw if you feel like making a pull request this auxkernel could go in the moose/framework. We are keen on external contributions",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5676172",
                          "updatedAt": "2023-04-20T16:51:43Z",
                          "publishedAt": "2023-04-20T16:51:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "@GiudGiud\nI think it kinda almost works now, this is the updated code:\n#include \"AdvectiveFluxAuxBE.h\"\n#include \"Assembly.h\"\n\nregisterMooseObject(\"MOOSE_BEHApp\", AdvectiveFluxAuxBE);\n\nInputParameters\nAdvectiveFluxAuxBE::validParams()\n{\n  InputParameters params = AuxKernel::validParams();\n  MooseEnum component(\"x y z normal\");\n  params.addClassDescription(\"Compute components of flux vector for advection problems \"\n                             \"$(\\\\vec{J} = \\\\vec{v} \\\\cdot \\\\vec{n})$.\");\n  params.addCoupledVar(\"v\", \"The x component of velocity\");\n  params.addParam<MooseEnum>(\"component\", component, \"The desired component of flux.\"); // Added this line\n  return params;\n}\n\nAdvectiveFluxAuxBE::AdvectiveFluxAuxBE(const InputParameters & parameters)\n  : AuxKernel(parameters),\n    _component(getParam<MooseEnum>(\"component\")),\n    _v(coupledValue(\"v\")),\n    _normals(_assembly.normals()),\n    _use_normal(getParam<MooseEnum>(\"component\") == \"normal\")\n{\n  if (_use_normal && !isParamValid(\"boundary\"))\n    paramError(\"boundary\", \"A boundary must be provided if using the normal component!\");\n}\n\nReal\nAdvectiveFluxAuxBE::computeValue()\n{\n  RealVectorValue velocity(_v[_qp]);\n  return velocity * _normals[_qp];\n}\n\nin this particular case, I only do it for flux_x\n  [./flux_x]\n    type = AdvectiveFluxAuxBE\n    variable = flux_x\n    v = darcy_x\n    component = normal\n    boundary = DRAINSRF_F008_UG4\n    check_boundary_restricted = false\n  [../]\n\n\njust wondering why in the Darcy_x it shows negative value (which is correct based on the flow and drainage conditions) but when I project it to the surface (figure below), it becomes positive, is there anything that I missed?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5749613",
                          "updatedAt": "2023-04-28T03:12:09Z",
                          "publishedAt": "2023-04-28T03:12:07Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How is the sideset oriented? The _normal attribute will depend on that",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5749745",
                          "updatedAt": "2023-04-28T03:44:36Z",
                          "publishedAt": "2023-04-28T03:44:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "How is the sideset oriented? The _normal attribute will depend on that\n\nI think it kinda makes sense now, it positive becase the velocity is flowing outward respect to the surface (hence positive) not to the xyz space. on the other hands if the flow is inward into the surface, it will be positive (i guess)\n\nabove is the surface where I apply BCs\n[./drain_DRAINSRF_F008_UG4] \ntype = PorousFlowPiecewiseLinearSinkBEH \nvariable = porepressure \nboundary = 'DRAINSRF_F008_UG4'\npt_vals = '0 1e9' \nmultipliers = '0 1e9' \nflux_function = 1\nv = min\nPT_shift = 0 \nuse_mobility = true\nfluid_phase = 0\n[../]",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5749771",
                          "updatedAt": "2023-04-28T03:51:00Z",
                          "publishedAt": "2023-04-28T03:50:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think it kinda makes sense now, it positive becase the velocity is flowing outward respect to the surface (hence positive) not to the xyz space. on the other hands if the flow is inward into the surface, it will be positive (i guess)\n\nyes, as long as the sideset is consistently oriented\nhow is that surface/sideset defined? using a commercial mesher?\nDoes it consistently point the same direction?\nWe unfortunately do not currently have a way (coming this summer is the plan) to look at sideset directions from MOOSE",
                          "url": "https://github.com/idaholab/moose/discussions/24132#discussioncomment-5754704",
                          "updatedAt": "2023-04-28T13:35:21Z",
                          "publishedAt": "2023-04-28T13:35:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "initQpStatefulProperties problem",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "Hi,\nI used a program like below a few years ago but it does now work with today's MOOSE.\nI get the error message of\n\"The parameter 'initial_length' is being retrieved before being set.\"\nPlease help!\nSincerely, S. Thomas\nFor the C file:\ntemplate <>\nInputParameters\nvalidParams()\n{\nInputParameters params = validParams();\nparams.addParam(\"initial_length\",0.1, \"initial length\");\nreturn params;\n}\nInitialProb::InitialProb(const InputParameters & parameters)\n: Material(parameters),\n_initial_length(getParam(\"initial_length\")),\n_value(declareProperty(\"value\")),\n_length(declareProperty(\"length\")),\n_length_old(getMaterialPropertyOld(\"length_old\"))\n{\n}\nvoid\nInitialProb::initQpStatefulProperties()\n{\n_length[_qp] = _initial_length;\n}\nvoid\nInitialProb::computeQpProperties()\n{\nfloat constant1 = 2, constant2 = 5;\n_length[_qp] = _length_old[_qp] + constant1;\n_value[_qp] = _length[_qp] * constant2;\n}\nFor h file:\ntemplate <>\nInputParameters validParams();\nclass InitialProb : public Material\n{\npublic:\nInitialProb(const InputParameters & parameters);\nprotected:\nvirtual void initQpStatefulProperties() override;\nvirtual void computeQpProperties() override;\nprivate:\nReal _initial_length;\nMaterialProperty & _value;\nMaterialProperty & _length;\nconst MaterialProperty & _length_old;\n};",
          "url": "https://github.com/idaholab/moose/discussions/24281",
          "updatedAt": "2023-05-05T22:45:11Z",
          "publishedAt": "2023-05-05T00:48:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Move validParams() inside the class like so\nclass InitialProb : public Material\n{\npublic:\n  static InputParameters validParams();\n\n  // ...\n};\nIn the source file change accordingly\nInputParameters\nInitialProb::validParams()\n{\n  InputParameters params = validParams();\n  params.addParam(\"initial_length\", 0.1, \"initial length\");\n  return params;\n}",
                  "url": "https://github.com/idaholab/moose/discussions/24281#discussioncomment-5816328",
                  "updatedAt": "2023-05-05T13:56:42Z",
                  "publishedAt": "2023-05-05T13:56:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "see this newsletter for the announcement and steps to take around this deprecation\nhttps://mooseframework.inl.gov/newsletter/2020/2020_04.html#c1ba1ef6-13a6-4210-bedb-0b691fec2ce7",
                          "url": "https://github.com/idaholab/moose/discussions/24281#discussioncomment-5817591",
                          "updatedAt": "2023-05-05T15:56:18Z",
                          "publishedAt": "2023-05-05T15:56:17Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you very much for your patience with me.\nS. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/24281#discussioncomment-5821277",
                          "updatedAt": "2023-05-05T22:45:12Z",
                          "publishedAt": "2023-05-05T22:45:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to use ChainedReal",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Hi MOOSEer,\nI came across ChainedReal in a .C file, but I cannot find useful documentation of it in MOOSE. Are there any examples of its definition and how to use it? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24284",
          "updatedAt": "2023-06-24T22:34:38Z",
          "publishedAt": "2023-05-05T12:06:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "ChainedReal is a typedef:\ntypedef DualNumber<Real, Real> ChainedReal;\nDualNumber is from https://github.com/roystgnr/MetaPhysicL\nThis instantiation is helpful to partially propagate the derivatives. Consider the following example:\n#include <iostream>\n\n#include \"metaphysicl/dualnumber.h\"\n\ntypedef double Real;\ntypedef MetaPhysicL::DualNumber<Real, Real> ADReal;\ntypedef MetaPhysicL::DualNumber<ADReal, ADReal> ADADReal;\n\nint\nmain(int argc, const char * argv[])\n{\n  ADReal x = 1;\n  x.derivatives() = 1;\n\n  ADReal g = 3 * x * x * x;\n  ADReal f = 2 * g * g;\n\n  ADReal one(1, 0);\n  ADADReal g_ad(g, one);\n  ADADReal f_ad = 2 * g_ad * g_ad;\n\n  std::cout << \"x = \" << x << std::endl;\n  std::cout << \"g = \" << g << std::endl;\n  std::cout << \"f = \" << f << std::endl;\n\n  std::cout << \"g_ad = \" << g_ad << std::endl;\n  std::cout << \"f_ad = \" << f_ad << std::endl;\n\n  std::cout << \"df/dg = \" << f_ad.derivatives() << std::endl;\n\n  return 0;\n}\nThe output is\nx = (1,1)\ng = (3,9)\nf = (18,108)\ng_ad = ((3,9),(1,0))\nf_ad = ((18,108),(12,36))\ndf/dg = (12,36)",
                  "url": "https://github.com/idaholab/moose/discussions/24284#discussioncomment-5815866",
                  "updatedAt": "2023-05-05T13:16:00Z",
                  "publishedAt": "2023-05-05T13:15:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/24284#discussioncomment-5820266",
                          "updatedAt": "2023-05-05T20:41:34Z",
                          "publishedAt": "2023-05-05T20:41:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A general question about preconditioner",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello everyone,\nI had a general question about the preconidtioner.\n\n\nWhat is the difference between MOOSE and PETSC preconditioner? why we need to use them both?\n\n\nConsidering the below setup, what does the sub_pc mean? So we have a pc and sub_pc. What is the purpose of using both of them here. For example, what will happen if we do not use a sub_pc?\n\n\n    petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -sub_pc_factor_levels -sub_pc_factor_shift_type'\n   petsc_options_value = 'asm      2               ilu          4                     NONZERO'\n\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/24282",
          "updatedAt": "2023-06-24T22:34:31Z",
          "publishedAt": "2023-05-05T03:40:56Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nA MOOSE 'preconditioner' is just setting the right parameters for a PETSc preconditioner.\nFor the more complex PETSc preconditioners, we have set up interfaces in MOOSE that can check parameters or make sure the PETSc parameters are passed in the desired order or with some more parameters tied to the size of the system that would not naturally be passed by a user.\nMany preconditioners are naturally composable and the sub_ option lets you specify options on each block (numerical)\nFor example see this page explaining the sub_ options for asm: https://petsc.org/release/manualpages/PC/PCGASM/\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24282#discussioncomment-5817545",
                  "updatedAt": "2023-05-05T15:51:27Z",
                  "publishedAt": "2023-05-05T15:51:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Thank you very much!\nAli",
                          "url": "https://github.com/idaholab/moose/discussions/24282#discussioncomment-5819073",
                          "updatedAt": "2023-05-05T18:49:40Z",
                          "publishedAt": "2023-05-05T18:49:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "April 2023 Newsletter",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "The April 2023 MOOSE Newsletter has been released!",
          "url": "https://github.com/idaholab/moose/discussions/24286",
          "updatedAt": "2023-05-08T20:08:59Z",
          "publishedAt": "2023-05-05T15:57:32Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Csv file",
          "author": {
            "login": "nourriahi"
          },
          "bodyText": "Hello,\nI wanted to get a csv file that includes data for the whole domain (2D) for, I have got earlier a csv file that includes variations only on x axis but when I wanted to do so for both axis (all domain) I did not manage to :\n[VectorPostprocessors]\n  [t_sampler]\n    type = LineValueSampler\n    variable = temperature\n    start_point = '0 0 0'\n    end_point = '0.00008 0.000005 0'\n    num_points = 20\n    sort_by = x y\n\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/24283",
          "updatedAt": "2023-06-24T22:34:26Z",
          "publishedAt": "2023-05-05T11:27:47Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nRight now you only have something along (0,0) -> (0.00008 0.000005)\nIf you have a 2D domain, you may consider this instead:\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementValueSampler.html\nWhich will sample every element\nor\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/NodalValueSampler.html\nfor every node\nWe are in need of a PlaneValueSampler if you have time to build one and contribute it.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24283#discussioncomment-5817427",
                  "updatedAt": "2023-05-05T15:39:58Z",
                  "publishedAt": "2023-05-05T15:39:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "An error occurred in calculating the generalized plane strain of the ring: Index out of bounds!",
          "author": {
            "login": "09liu"
          },
          "bodyText": "I ran into an error while calculating the generalized plane strain problem for a ring, and I was wondering why this error occurs and how to fix it. Here is my input card.\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  type = FileMesh\n  file = halo.e\n[]\n\n[Variables]\n  [./temp]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 553.15\n  [../]\n  [./disp_x]\n  [../]\n  [./disp_y]\n  [../]\n  [./scalar_strain_zz]\n    order = FIRST\n    family = SCALAR\n  [../]\n[]\n\n[Functions]\n  [./power_profile]\n    type = PiecewiseLinear\n    data_file = power_halo.csv\n    format = columns\n  [../]\n  [./shape]\n    type = ParsedFunction\n    value = 8.0e7\n  [../]\n  [./q]\n    type = CompositeFunction\n    functions = 'power_profile shape'\n  [../]\n  [./gap_conductance]\n    type =  ParsedFunction\n    value = '-1.8275e-4*t+3500'\n  [../]\n[]\n\n[Kernels]\n  [./ht]\n    type = HeatConduction\n    variable = temp\n    block = halo\n  [../]\n  [./h_dt]\n    type = HeatConductionTimeDerivative\n    variable = temp\n    block = halo\n  [../]\n  [./hs]\n    type = HeatSource\n    variable = temp\n    block = halo\n    function = q\n  [../]\n  [./TensorMechanics]\n    use_displaced_mesh = false\n    displacements = 'disp_x disp_y'\n    temperature = temp\n    block = halo\n  [../]\n[]\n\n[Modules]\n  [./TensorMechanics]\n    [./GeneralizedPlaneStrain]\n      [./fuel]\n        use_displaced_mesh = true\n        displacements = 'disp_x disp_y'\n        scalar_out_of_plane_strain = scalar_strain_zz\n        block = halo\n      [../]\n    [../]\n  [../]\n[]\n\n[Materials]\n  [./den]\n    type = GenericConstantMaterial\n    block = halo\n    prop_names = 'density'\n    prop_values = 10960.0\n  [../]\n  [./hc]\n    type = HeatConductionMaterial\n    block = halo\n    temperature = temp\n    thermal_conductivity = 9.0\n    specific_heat = 350.0\n  [../]\n  [./ev]\n    type = ComputeIsotropicElasticityTensor\n    block = halo\n    poissons_ratio = 0.316\n    youngs_modulus = 2.1e11\n  [../]\n  [./strain]\n    type = ComputePlaneSmallStrain\n    displacements = 'disp_x disp_y'\n    scalar_out_of_plane_strain = scalar_strain_zz\n    block = halo\n    eigenstrain_names = eigenstrain\n  [../]\n  [./thermal_eigen_strain]\n    type = ComputeThermalExpansionEigenstrain\n    block = halo\n    temperature = temp\n    eigenstrain_name = eigenstrain\n    stress_free_temperature = 298.0\n    thermal_expansion_coeff = 1e-5\n  [../]\n  [./stress]\n    type = ComputeStrainIncrementBasedStress\n    block = halo\n  [../]\n[]\n\n[BCs]\n  [./outer_temp]\n    type = ConvectiveFluxFunction\n    variable = temp\n    boundary = 'ri ro'\n    T_infinity = 393.0\n    coefficient_function = gap_conductance\n    coefficient = 1.0\n  [../]\n  [./no_disp_x]\n     type = DirichletBC\n     variable = disp_x\n     boundary = 'obottom ibottom otop itop'\n     value = 0.0\n  []\n  [./no_disp_y]\n     type = DirichletBC\n     variable = disp_y\n     boundary = 'oleft ileft oright iright'\n     value = 0.0\n  []\n[]\n\n[Postprocessors]\n  [./disp_p1]\n    type = PointValue\n    point = '4.95e-3 0.0 0.0'\n    variable = disp_x\n    execute_on = 'initial timestep_end'\n  [../]\n  [./disp_p2]\n    type = PointValue\n    point = '7.05e-3 0.0 0.0'\n    variable = disp_x\n    execute_on = 'initial timestep_end'\n  [../]\n  [./temp_p2]\n    type = PointValue\n    point = '6.0e-3 0.0 0.0'\n    variable = temp\n    execute_on = 'initial timestep_end'\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n\n  solve_type = PJFNK\n  petsc_options_iname = '-pc_type -sub_pc_type -pc_asm_overlap -ksp_gmres_restart'\n  petsc_options_value = 'asm lu 20 101'\n\n  l_max_its = 10\n  l_tol = 1e-4\n\n  nl_abs_tol = 1e-8\n  nl_rel_tol = 1e-8\n  nl_max_its = 10\n\n  dtmax = 1e5\n  dtmin = 1e-3\n  end_time = 4.2e6\n  automatic_scaling = true\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1000\n    optimal_iterations = 10\n    iteration_window = 4\n    linear_iteration_ratio = 10\n  [../]\n[]\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24160",
          "updatedAt": "2023-06-24T22:34:21Z",
          "publishedAt": "2023-04-23T12:08:37Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "09liu"
                  },
                  "bodyText": "@GiudGiud Do you know what caused this error?",
                  "url": "https://github.com/idaholab/moose/discussions/24160#discussioncomment-5740435",
                  "updatedAt": "2023-04-27T09:02:09Z",
                  "publishedAt": "2023-04-27T09:02:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I cant run your input file could you please share your mesh?",
                          "url": "https://github.com/idaholab/moose/discussions/24160#discussioncomment-5742239",
                          "updatedAt": "2023-04-27T12:07:05Z",
                          "publishedAt": "2023-04-27T12:07:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "09liu"
                          },
                          "bodyText": "I cant run your input file could you please share your mesh?\n\nhalo.zip\npower_halo.csv\nThere are my mesh and power file. Thank you very much.",
                          "url": "https://github.com/idaholab/moose/discussions/24160#discussioncomment-5742653",
                          "updatedAt": "2023-04-27T12:51:22Z",
                          "publishedAt": "2023-04-27T12:49:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "runs 'fine' for me\njust start with a 10s time step instead of a big one and let it grow later\nalso let the solver take more iterations\n  l_max_its = 100\n  nl_max_its = 100\n\nBUT\nthe results dont look right, and that s probably because the mesh has artefacts",
                          "url": "https://github.com/idaholab/moose/discussions/24160#discussioncomment-5742945",
                          "updatedAt": "2023-04-27T13:17:21Z",
                          "publishedAt": "2023-04-27T13:17:21Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "09liu"
                          },
                          "bodyText": "runs 'fine' for me\njust start with a 10s time step instead of a big one and let it grow later also let the solver take more iterations\n  l_max_its = 100\n  nl_max_its = 100\n\nBUT the results dont look right, and that s probably because the mesh has artefacts \n\nI used this method run it but still met same error.\nI realized maybe becaused moose that I installed was old version. So I ran this case again in the latest version of moose and found error disappeared. The results was same as yours.\n\n\n\n\nThis was due to a problem with my heat source settings, and I got reasonable results after I corrected the heat source. Thank you again.",
                          "url": "https://github.com/idaholab/moose/discussions/24160#discussioncomment-5816889",
                          "updatedAt": "2023-05-05T14:50:25Z",
                          "publishedAt": "2023-05-05T14:50:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}