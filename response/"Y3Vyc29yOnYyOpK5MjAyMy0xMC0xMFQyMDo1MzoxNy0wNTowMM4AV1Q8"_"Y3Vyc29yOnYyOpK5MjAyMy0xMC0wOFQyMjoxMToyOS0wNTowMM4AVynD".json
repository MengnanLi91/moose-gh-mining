{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMC0wOFQyMjoxMToyOS0wNTowMM4AVynD"
    },
    "edges": [
      {
        "node": {
          "title": "Error when initiating variables",
          "author": {
            "login": "ZoeyChen1993"
          },
          "bodyText": "Could anyone tell me why do I get this error message? Attach my input code and error",
          "url": "https://github.com/idaholab/moose/discussions/25034",
          "updatedAt": "2023-10-10T23:17:08Z",
          "publishedAt": "2023-07-25T20:52:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nthe system is only detecting one timestep in that exodus file. Do you have 80?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6545228",
                  "updatedAt": "2023-07-25T22:52:25Z",
                  "publishedAt": "2023-07-25T22:52:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "Here is the output folder of start simulation, I want to restart from the timestep 80 or 132, there are total 133 output files here, the first one is the .e file",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6552334",
                  "updatedAt": "2023-07-26T14:24:37Z",
                  "publishedAt": "2023-07-26T14:24:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Use the name of the last exodus file instead of the short name. And use LATEST for the timestep",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6552388",
                          "updatedAt": "2023-07-26T14:30:05Z",
                          "publishedAt": "2023-07-26T14:30:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "I tried this way, the simulation runs, however I see the instruction from the website, I thought the time step could be specified https://mooseframework.inl.gov/application_usage/restart_recover.html. And the restart simulation doesn't converge since very beginning. It does converge in a single simulation with continuous time.",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6552476",
                  "updatedAt": "2023-08-04T14:02:07Z",
                  "publishedAt": "2023-07-26T14:38:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Exodus restart can be tricky to get right. I would recommend using checkpoint files for the restart first",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6552799",
                          "updatedAt": "2023-07-26T15:09:28Z",
                          "publishedAt": "2023-07-26T15:09:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I still cannot get converge since very beginning of the restart by checking point restart like this.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6555192",
                          "updatedAt": "2023-07-26T19:43:08Z",
                          "publishedAt": "2023-07-26T19:43:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you output with exodus on initial and confirm all the fields are properly initialized?\nyou are now mixing checkpoint and exodus restart syntax. The initial_from_file_var parameters are for exodus",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6562680",
                          "updatedAt": "2023-07-29T22:42:15Z",
                          "publishedAt": "2023-07-27T08:26:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I am not familiar with the checkpoint restart, could you please give a reference syntax in input file for the checkpoint restart that I can refer to?",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6567145",
                          "updatedAt": "2023-07-27T15:56:58Z",
                          "publishedAt": "2023-07-27T15:56:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nThere's a few examples on the Virtual Test Bed of simulations using checkpoint restart:\nhttps://github.com/idaholab/virtual_test_bed/blob/main/sfr/abtr/abtr_ulof.i\nhttps://github.com/idaholab/virtual_test_bed/blob/main/msr/msre/reactivity_insertion/msre_pke_ss.i\nOtherwise the best documentation is here:\nhttps://mooseframework.inl.gov/application_usage/restart_recover.html\nfollow the advanced Restart section\nDid you do this?\n\nCan you output with exodus on initial and confirm all the fields are properly initialized?\n\nand what did it show?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6584955",
                          "updatedAt": "2023-07-29T22:45:53Z",
                          "publishedAt": "2023-07-29T22:45:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "The output of both the last timestep from start simulation and the initial step from restart simulation are showing here, all of the variables seem to be the same when initiate.\n\nAnd I still don't know how to correctly using checkpoint restart. It seems the only change of blocks is the mesh and problem, as you pointed, the initial_from_file_var is in exodus restart, so in checkpoint restart, what should I use for the variable initiation.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6610226",
                          "updatedAt": "2023-08-01T21:42:58Z",
                          "publishedAt": "2023-08-01T21:42:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you please attach:\n\nthe full log for the first simulation\nthe log for the second simulation (restarts and fails)\nthe input file & mesh\n\nI d like to see if I can find what's wrong",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6610828",
                          "updatedAt": "2023-08-02T00:06:46Z",
                          "publishedAt": "2023-08-02T00:06:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "restart.tar.gz\nAttached the files here. Could you please take a look?",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6627725",
                          "updatedAt": "2023-08-03T13:08:06Z",
                          "publishedAt": "2023-08-03T13:08:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nThis does not look like a restart issue, because it crashes 20 time steps after the restart, not immediately.\nThen this convergence criterion\n  nl_rel_tol = 1e-3\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\nis extremely loose. You ll want to tighten it by 5 orders of magnitude most likely\nCould the problem come from ActivateEelementByPath\nin the first one you have this function for fx:\nif(t<15, 0, (t-15)*0.0008)', which reaches 5 * 0.0008 = 0.0040\n\nin the second one:\n(0.004+t*0.001)' which reaches 0.004 + 0.002 = 0.006\n\nso maybe run the first simulation longer? to reach the same fx and see if you hit the problem as well.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6628126",
                          "updatedAt": "2023-08-03T13:40:53Z",
                          "publishedAt": "2023-08-03T13:40:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "Hi I attached the files include one start simulation ,one restart simulation , and one single simulation. The start simulation runs 20s, the function is\nif(t<15, 0, (t-15)*0.0008)', which reaches 5 * 0.0008 = 0.0040\nThen the restart simulation at t = 20s, for 10s, function is:\n(0.004+t*0.0008)', start from the fx = 0.004 which is the same location with the end of start simulation, and the speed does not change \nFor the single simulation is expected to run for total 30s, but doesn't converge at different timestep:\nif(t<15, 0, (t-15)*0.0008)', which reaches 5 * 0.0008 = 0.0040 at 20s, then keep running after 20s for another 10s,\nrestart_modify.tar.gz",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6629344",
                          "updatedAt": "2023-08-03T15:33:34Z",
                          "publishedAt": "2023-08-03T15:33:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "oh if you look at my second response and zip file, you'll see, I used speed of 0.0008 for both simulations.",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6638966",
                  "updatedAt": "2023-08-04T13:57:44Z",
                  "publishedAt": "2023-08-04T13:57:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@dewenyushu can you please check if ActivateElementByPath is used properly here?\nAnything we ought to look out for with that object?\n@ZoeyChen1993 what kind of physics are you solving here? let's try to bring in people who do this into the conversation",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6639026",
                  "updatedAt": "2023-08-04T14:16:25Z",
                  "publishedAt": "2023-08-04T14:04:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I'm solving a differential equation set involves thermal conduction and chemical reaction, which requires two variables in the input file, temperature and cure.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6639330",
                          "updatedAt": "2023-08-04T14:31:48Z",
                          "publishedAt": "2023-08-04T14:31:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "The syntax looks good to me.\nI do recall that there had been an issue using element activation (or element subdomain modifier) with restart, what we found a while back, IIRC, was while loading the checkpoint files, there seemed to be a mismatch between the number of material properties requested vs. provided in DataIO.\nIt might be helpful to run this in debug mode (if problem size can be reduced to shorten the runtime) and see if this is the same issue I had before..",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6641114",
                          "updatedAt": "2023-08-04T17:49:25Z",
                          "publishedAt": "2023-08-04T17:49:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "to run in debug mode, follow the instructions here to get a debug executable then use that\nhttps://mooseframework.inl.gov/application_development/debugging.html",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6652808",
                          "updatedAt": "2023-08-06T21:07:29Z",
                          "publishedAt": "2023-08-06T21:07:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen who is a good person to bring in on thermal conduction + chemical reaction (cure) ?",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6652809",
                          "updatedAt": "2023-08-06T21:08:01Z",
                          "publishedAt": "2023-08-06T21:08:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "When I tried to make debug executable, I use METHOD=dbg make -j 8, and I think I got error output like this\n(moose) [zchen@mercury army_ants]$ METHOD=dbg make -j 4\nLinking Library /data/zchen/projects/moose/modules/solid_properties/lib/libsolid_properties-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/navier_stokes/lib/libnavier_stokes-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/contact/lib/libcontact-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/peridynamics/lib/libperidynamics-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/phase_field/lib/libphase_field-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/porous_flow/lib/libporous_flow-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/xfem/lib/libxfem-dbg.la...\nCompiling C++ (in dbg mode) /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C...\nCreating Unity /data/zchen/projects/army_ants/build/unity_src/materials_Unity.C\nCompiling C++ (in dbg mode) /data/zchen/projects/army_ants/build/unity_src/materials_Unity.C...\nLinking Library /data/zchen/projects/moose/modules/fsi/lib/libfsi-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/thermal_hydraulics/lib/libthermal_hydraulics-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/scalar_transport/lib/libscalar_transport-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/combined/lib/libcombined-dbg.la...\nLinking Library /data/zchen/projects/moose/modules/module_loader/lib/libmodule_loader_with_cr_em_eps_fp_fet_gc_ls_ray_rdg_rct_rich_st_hc_sp_tm_ns_con_fsi_misc_opt_pd_pf_pflow_th_st_xfem_comb-dbg.la...\nLinking Library /data/zchen/projects/army_ants/test/lib/libarmy_ants_test-dbg.la...\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:2:\n/data/zchen/projects/army_ants/src/kernels/CPPAnonDgeneralPT.C: In member function 'virtual libMesh::Real CPPAnonDgeneralPT::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/CPPAnonDgeneralPT.C:106:6: warning: unused variable 'Pc' [-Wunused-variable]\n  106 | Real Pc = KT*falpha;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:3:\n/data/zchen/projects/army_ants/src/kernels/CPPAnonDgeneralPTAllPara.C: In member function 'virtual libMesh::Real CPPAnonDgeneralPTAllPara::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/CPPAnonDgeneralPTAllPara.C:107:6: warning: unused variable 'Pc' [-Wunused-variable]\n  107 | Real Pc = KT*falpha;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:8:\n/data/zchen/projects/army_ants/src/kernels/DCPDNonDimentionalCureKinetics.C: In member function 'virtual libMesh::Real DCPDNonDimentionalCureKinetics::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/DCPDNonDimentionalCureKinetics.C:103:6: warning: unused variable 'Pc' [-Wunused-variable]\n  103 | Real Pc = KT*falpha;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:9:\n/data/zchen/projects/army_ants/src/kernels/DCPDnonDgeneralPT.C: In member function 'virtual libMesh::Real DCPDnonDgeneralPT::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/DCPDnonDgeneralPT.C:108:6: warning: unused variable 'Pc' [-Wunused-variable]\n  108 | Real Pc = KT*falpha;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:10:\n/data/zchen/projects/army_ants/src/kernels/DCPDnonDgeneralPTAllPara.C: In member function 'virtual libMesh::Real DCPDnonDgeneralPTAllPara::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/DCPDnonDgeneralPTAllPara.C:109:6: warning: unused variable 'Pc' [-Wunused-variable]\n  109 | Real Pc = KT*falpha;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:13:\n/data/zchen/projects/army_ants/src/kernels/PPCnonDgeneralPT.C: In member function 'virtual libMesh::Real PPCnonDgeneralPT::computeQpJacobian()':\n/data/zchen/projects/army_ants/src/kernels/PPCnonDgeneralPT.C:107:6: warning: unused variable 'Pc' [-Wunused-variable]\n  107 | Real Pc = KT*fbeta;\n      |      ^~\nIn file included from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:15:\n/data/zchen/projects/army_ants/src/kernels/TimeDerivative.C: In member function 'virtual void TimeDerivative::computeJacobian()':\n/data/zchen/projects/army_ants/src/kernels/TimeDerivative.C:50:84: error: no matching function for call to 'Assembly::jacobianBlock(unsigned int, unsigned int)'\n   50 |     DenseMatrix<Number> & ke = _assembly.jacobianBlock(_var.number(), _var.number());\n      |                                                                                    ^\nIn file included from /data/zchen/projects/moose/framework/build/header_symlinks/TaggingInterface.h:15,\n                 from /data/zchen/projects/moose/framework/build/header_symlinks/ResidualObject.h:23,\n                 from /data/zchen/projects/moose/framework/build/header_symlinks/KernelBase.h:12,\n                 from /data/zchen/projects/moose/framework/build/header_symlinks/Kernel.h:12,\n                 from /data/zchen/projects/army_ants/build/header_symlinks/CPPAnonDgeneralPT.h:18,\n                 from /data/zchen/projects/army_ants/src/kernels/CPPAnonDgeneralPT.C:16,\n                 from /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C:2:\n/data/zchen/projects/moose/framework/build/header_symlinks/Assembly.h:1073:25: note: candidate: 'libMesh::DenseMatrix<double>& Assembly::jacobianBlock(unsigned int, unsigned int, Assembly::LocalDataKey, TagID)'\n 1073 |   DenseMatrix<Number> & jacobianBlock(unsigned int ivar, unsigned int jvar, LocalDataKey, TagID tag)\n      |                         ^~~~~~~~~~~~~\n/data/zchen/projects/moose/framework/build/header_symlinks/Assembly.h:1073:25: note:   candidate expects 4 arguments, 2 provided\nmake: *** [/data/zchen/projects/moose/framework/build.mk:149: /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.x86_64-conda-linux-gnu.dbg.lo] Error 1\nmake: *** Waiting for unfinished jobs....",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6692081",
                          "updatedAt": "2023-08-10T15:13:31Z",
                          "publishedAt": "2023-08-10T14:15:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nYou have an old duplicate definition of TimeDerivative in your application.\nDid you need to duplicate this object in your app? why?\notherwise there's a bunch of unused variables and other warnings. I would fix those if I were you, it will make working on other issues easier\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6692863",
                          "updatedAt": "2023-08-10T15:15:35Z",
                          "publishedAt": "2023-08-10T15:14:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "Hi I replace the TimeDerivative in the application, but got this error.\n(moose) [zchen@mercury army_ants]$ make -j 4\nCreating Unity /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C\nCompiling C++ (in opt mode) /data/zchen/projects/army_ants/build/unity_src/kernels_Unity.C...\nLinking Library /data/zchen/projects/army_ants/lib/libarmy_ants-opt.la...\nLinking Executable /data/zchen/projects/army_ants/army_ants-opt...\n/data/zchen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /data/zchen/projects/army_ants/lib/libarmy_ants-opt.so: undefined reference to `InputParameters validParams<StressUpdateBaseTempl<false, RankTwoTensorTempl<double>, RankFourTensorTempl<double> > >()'\n/data/zchen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /data/zchen/projects/army_ants/lib/libarmy_ants-opt.so: undefined reference to `InputParameters validParams<Diffusion>()'\n/data/zchen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /data/zchen/projects/army_ants/lib/libarmy_ants-opt.so: undefined reference to `InputParameters validParams<ComputeEigenstrainBaseTempl<false> >()'\n/data/zchen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /data/zchen/projects/army_ants/lib/libarmy_ants-opt.so: undefined reference to `InputParameters validParams<AuxKernelTempl<double> >()'\n/data/zchen/mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /data/zchen/projects/army_ants/lib/libarmy_ants-opt.so: undefined reference to `InputParameters validParams<Kernel>()'\ncollect2: error: ld returned 1 exit status\nmake: *** [/data/zchen/projects/moose/framework/app.mk:445: /data/zchen/projects/army_ants/army_ants-opt] Error 1",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6744291",
                          "updatedAt": "2023-08-17T15:27:45Z",
                          "publishedAt": "2023-08-16T19:36:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nsee my answer on the other post.\nThis is likely due to some old templated validParams methods, which we have retired long ago\nhttps://mooseframework.inl.gov/moose/newsletter/2021/2021_11.html#legacy-input-parameter-deprecation",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6752714",
                          "updatedAt": "2023-08-17T15:32:41Z",
                          "publishedAt": "2023-08-17T15:32:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I tried the restart in the debug mode for the first time. Could you please help me to see what does this mean? I attached the message and the zip input file here.\nRestart_debug.tar.gz",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6792337",
                          "updatedAt": "2023-08-22T14:03:25Z",
                          "publishedAt": "2023-08-22T14:03:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nDo you mind creating a github repo to share your inputs? I am not supposed to download tar files from the internet\nThank you!\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-6792379",
                          "updatedAt": "2023-08-22T14:07:00Z",
                          "publishedAt": "2023-08-22T14:06:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "I print all the terms in this equation to the output by adding _console all these terms. I ran an example simulation both in opt mode and debug mode. Two output files are pasted at the end of this answer, in the debug mode, it still points to the line of the\nReal falpha = ...\nline. Though in the opt mode, it completes the calculation. And also, I give the ConstantBounds to the variable _u be (0,1) by adding the block in input file. And in the input file, other values in the equation are given.\nReal DCPDnonDgeneralPT::computeQpResidual()\n{\n  // velocity * _grad_u[_qp] is actually doing a dot product\n  /* To be copied to QpJacobian */\n//Constants\n    Real R = 8.314;\n//Temperature dependence: K(theta), _v_var is theta\nReal KT =_A[_qp] *exp(-E/(R*(_v_var[_qp]*(_Ttrig-_Tintl)+(_Tintl+273.0))));\n//Cure dependence: f(alpha)\nReal falpha = pow(std::max(0.000001, 1.0-_u[_qp]),n)*pow(std::min(0.999999, _u[_qp]),m)*(1.0/(1.0+exp(cd*(_u[_qp]-ad))));\n    /* To be copied to QpJacobian */\n_console << falpha << std::endl;\n_console << _u[_qp] << std::endl;\n_console << pow(1.0-_u[_qp],n) << std::endl;\n_console << pow(_u[_qp],m) << std::endl;\n_console <<1.0/(1.0+exp(cd*(_u[_qp]-ad))) << std::endl;\n\nReal Pc = KT*falpha;\n  return  -_test[_i][_qp]*Pc; // changed this, note - sign\n}\n\nHere are the input file.\n[Problem]  \n  type = FEProblem\n[]\n\n[Mesh]\n  [./gen]\n    #type = GeneratedMeshGenerator\n    type = FileMeshGenerator\n    file = Single_element.inp\n[../]\n[]\n\n[Variables]\n  [./Temperature]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 20\n    block = '0'\n  [../]\n  [./Cure]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = '0.15'\n    block = '0'\n  [../]\n\n[]\n\t\t\n[AuxVariables]\n  [bounds_dummy]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[Kernels]\n  [./tempdiff] #temperature diffusion term\n    type = TempDiffusion\n    block = '0'\n    variable = Temperature\n  [../]\n  [./coupledcurederv]\n    type = CoupledCureTimeDerivative\n    block = '0'\n    variable = Temperature\n    v = Cure\n    \n  [../]\n \n [./tempderv]\n  type = HeatConductionTimeDerivative\n  block = '0'\n  variable = Temperature\n  lumping=false\n  #specific_heat = '1'\n  #density = '1'\n  #the specific heat and density are added in materials and not in this block\n  [../]\n [./curederv]\n  type=TimeDerivative\n  block = '0'\n  variable = Cure\n  lumping=false\n  [../]  \n  \n\n [./cureformula]\n  type=DCPDnonDgeneralPT\n  block = '0'\n  variable = Cure\n  v = Temperature #this is the coupled variable\n  Ttrig = '1'\n  Tintl = '0'\n  _E= '103539'\n  _n= '1.6754'\n  _m= '0.8344'\n  _cd= '28.1163'\n  _ad= '0.6809'\n  [../]\n[]\n\n[BCs]\n\n  [./temp_bottom]\n    type = DirichletBC\n    #type = NeumannBC\n   variable = Temperature\n    boundary = bot\n    value = '200'    \n  [../]\n[]\n\n\n[Bounds]\n  [cure_upper_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    bounded_variable = Cure\n    bound_type = upper\n    bound_value = 0.999999\n  []\n  [cure_lower_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    bounded_variable = Cure\n    bound_type = lower\n    bound_value = 0.000001\n  []\n[]\n[Materials]\n  [./ink]\n   block = '0'\n    type = GenericConstantMaterial\n   \n    prop_names = 'specific_heat Hr density TConductivity A'\n    prop_values = '1600 340000 980 0.152 3.129e14'  # polymer attributes\n  [../]\n[]\n\n\n\n[Executioner]\n  automatic_scaling = true\n  type = Transient\n  num_steps = 80000\n  # num_steps = 1000\n  nl_rel_tol = 1e-3\n\n  end_time=5\n\n  nl_max_its=10\n  l_max_its=15\n  \n  [./TimeStepper]\n    type = ConstantDT    \n    dt = 1\n    # dt = 3.6e14 \n  [../]\n  \n  [./TimeIntegrator]\n   type = ImplicitEuler\n   #type = CrankNicolson\n[../]\n  \n  #Preconditioned JFNK (default)\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre boomeramg'\n  #petsc_options_iname = '-pc_type'\n  #petsc_options_value = 'gamg'\n  \n[]\n\n\n[Outputs]\n  execute_on = 'initial timestep_end' # Limit the output to timestep end (removes initial condition)\n  #checkpoint = true\n   [./exodus]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    type = Exodus\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    file_base = ./Single_element_new/single_element_new\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    interval = 1          # only output every 10 step\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  [../]  \t\t\n    [./console]\n   type = Console\n   interval = 1\n   output_file = true\n   file_base = ./single_element_new_indebug\n     all_variable_norms = true\n   print_mesh_changed_info = true\n  [../]\t\t\t\n  [pgraph]\n    type = PerfGraphOutput\n    execute_on = 'initial final'  # Default is \"final\"\n    level = 2                     # Default is 1\n    heaviest_branch = true        # Default is false\n    heaviest_sections = 7         # Default is 0\n  []\n[]\n\nThe domain is just a square with single element looks like this. The Cure denotes the variable _u, which has an initial value of 0.15.\n\nsingle_element_opt.txt\nsingle_element_debug.txt",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116053",
                  "updatedAt": "2023-09-26T19:04:54Z",
                  "publishedAt": "2023-09-26T18:59:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what is line 70 in that file?\nthe backtrace points to it\n#1  0x00007ffff7f6a85c in DCPDnonDgeneralPT::computeQpResidual (this=0x555555dbf860) at /data/zchen/projects/army_ants/src/kernels/DCPDnonDgeneralPT.C:70",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116103",
                          "updatedAt": "2023-09-26T19:06:37Z",
                          "publishedAt": "2023-09-26T19:06:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "It's this line\nReal falpha = pow(std::max(0.000001, 1.0-_u[_qp]),n)*pow(std::min(0.999999, _u[_qp]),m)*(1.0/(1.0+exp(cd*(_u[_qp]-ad))));",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116112",
                          "updatedAt": "2023-09-26T19:07:39Z",
                          "publishedAt": "2023-09-26T19:07:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what are n and m?\nDepending on their signs we cannot compute (1-u)^n or u^m",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116131",
                          "updatedAt": "2023-09-26T19:10:04Z",
                          "publishedAt": "2023-09-26T19:10:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "They are given here in the input file\n_n= '1.6754'\n_m= '0.8344'\n  type=DCPDnonDgeneralPT\n  block = '0'\n  variable = Cure\n  v = Temperature #this is the coupled variable\n  Ttrig = '1'\n  Tintl = '0'\n  _E= '103539'\n  _n= '1.6754'\n  _m= '0.8344'\n  _cd= '28.1163'\n  _ad= '0.6809'\n  [../]\n[]```",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116148",
                  "updatedAt": "2023-09-26T19:11:49Z",
                  "publishedAt": "2023-09-26T19:11:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "is _u bounded? n and m are not integers so 1 - u cannot be taken to a fractional exponent if u > 1",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116186",
                          "updatedAt": "2023-09-26T19:16:15Z",
                          "publishedAt": "2023-09-26T19:16:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ZoeyChen1993"
                  },
                  "bodyText": "I used both methods, bounds in the input file as below, and this ``` pow(std::min(0.999999, _u[_qp]),m)  ````\n  [cure_upper_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    bounded_variable = Cure\n    bound_type = upper\n    bound_value = 0.999999\n  []\n  [cure_lower_bound]\n    type = ConstantBoundsAux\n    variable = bounds_dummy\n    bounded_variable = Cure\n    bound_type = lower\n    bound_value = 0.000001\n  []\n[]```",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116213",
                  "updatedAt": "2023-09-26T19:18:50Z",
                  "publishedAt": "2023-09-26T19:18:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh ok I see. Must be something else\ncan you show me the header please?\nEspecially all the material properties",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116301",
                          "updatedAt": "2023-09-26T19:29:15Z",
                          "publishedAt": "2023-09-26T19:29:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I upload all the files including the input files and the source code files to my own repo, I set it as private, how can I share that just with you?",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116315",
                          "updatedAt": "2023-09-26T19:31:09Z",
                          "publishedAt": "2023-09-26T19:31:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "add me in Settings/collaborators of the repo",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116345",
                          "updatedAt": "2023-09-26T19:35:06Z",
                          "publishedAt": "2023-09-26T19:35:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "Thank you, I did the setting.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116384",
                          "updatedAt": "2023-09-26T19:39:20Z",
                          "publishedAt": "2023-09-26T19:39:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "Could you please take a look of the source codes files? I also uploaded the input files. I was originally hoping to solve the convergence issue in the restart, but it seems the issue is not only in the restart but in the source.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116493",
                          "updatedAt": "2023-09-26T19:52:52Z",
                          "publishedAt": "2023-09-26T19:52:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not seeing anything rn. i ll take another look and compile your app later",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7116767",
                          "updatedAt": "2023-09-26T20:32:13Z",
                          "publishedAt": "2023-09-26T20:32:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so from your prints I am seeing this:\nflapha = nan\nu = -3.20137e-09\nthis is because you have u ^ m\nyou must do this:\npow(std::max(0.000001, std::min(0.00000001, 1.0 - _u[_qp])), n) * pow(std::min(0.999999, std::max(0.000001, _u[_qp]))\n\nto be safe.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7123015",
                          "updatedAt": "2023-09-27T12:46:39Z",
                          "publishedAt": "2023-09-27T12:46:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also the Bounds are not active, because you are not using a variational inequality solver. See the bounds documentation:\nhttps://mooseframework.inl.gov/source/auxkernels/ConstantBoundsAux.html",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7123020",
                          "updatedAt": "2023-09-27T12:47:36Z",
                          "publishedAt": "2023-09-27T12:47:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ZoeyChen1993"
                          },
                          "bodyText": "I think you mean in\npow(std::max(0.000001, std::min(0.00000001, 1.0 - _u[_qp])), n) * pow(std::min(0.999999, std::max(0.000001, _u[_qp]))\nIt should be\npow(std::max(0.000001, std::min(0.999999, 1.0 - _u[_qp])), n) * pow(std::min(0.999999, std::max(0.000001, _u[_qp]))\nto make 0.000001<_u < 0.999999, 0.000001<(1-_u)<0.999999\nNot sure my understand is correct?",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7124385",
                          "updatedAt": "2023-09-27T14:48:22Z",
                          "publishedAt": "2023-09-27T14:48:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes :)",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7124492",
                          "updatedAt": "2023-09-27T14:57:37Z",
                          "publishedAt": "2023-09-27T14:57:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "zx1987"
                  },
                  "bodyText": "so they look exactly the same before and after the restart?\n@GiudGiud\n\nHi Guillaume, thank you for all your help! If you do not mind me jumping in here - by the way my name is Xiang, and Zhuoting works with me.\nWe used chekpoints for restart, and for different variables we checked, before and after the restart, the values are the same. We did this following your suggestions using problem/solve=false, such that only initial state are stored.  So Resart seems to pick up the right information.\nHowever, our restart also involves CoupledVarThresholdElementSubdomainModifier that activates material A to material P.  The current issue we are trying to address is how to set the initial condition of those newly activated elements in the restart. Say some elements of material A is activated to be material P. A has variable T, and B has variables T and alpha. Right before activation, material A has T=T0A, and we wish to initialize the newly activated B with T=T0B and alpha=alpha_0. However, the code seems to use T= T0A and alpha=0 to initialize the newly activated B material.\nIs what we are trying to achieve an existing capability in MOOSE or we should develop this capability by ourselves? If we were to develop this capability, would you mind commenting what is the best way to start? Thanks.\nBest,\nXiang",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7213963",
                  "updatedAt": "2023-10-06T22:14:25Z",
                  "publishedAt": "2023-10-06T22:12:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nI think @dewenyushu will know if this has already been implemented or not. Otherwise, you can look at the options and the various inputs using ActivateElementByPaths for whether something like this is being done. If it's possible, there will be a test for it.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7214141",
                          "updatedAt": "2023-10-06T22:55:16Z",
                          "publishedAt": "2023-10-06T22:55:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zx1987"
                          },
                          "bodyText": "Thanks! @GiudGiud  I checked both and we do find CoupledVarThresholdElementSubdomainModifier appears to be a better choice. We will see what Dewen @dewenyushu says and start from there. Thank you for all your help!\nBest,\nXiang",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7214197",
                          "updatedAt": "2023-10-06T23:24:58Z",
                          "publishedAt": "2023-10-06T23:10:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "Hi Xiang:\nThanks for your detailed explanation.\nIIRC,  none of the activate by path nor element subdomain modifier directly interferes with the restart capability in MOOSE. So if you\u2019ve tried various options in the initial condition (IC) with what current restart capability has to offer, it looks like you will need some modifications in the code (maybe in a wrapper you already have?) to overwrite the IC for your specific need.\nI need to admit that I am not very familiar with the restart part of the code in MOOSE and cannot provide you with a clearer/better solution off the top of my head.",
                          "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7246755",
                          "updatedAt": "2023-10-10T23:17:09Z",
                          "publishedAt": "2023-10-10T23:17:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "zx1987"
                  },
                  "bodyText": "@hugary1995 Hi Garry, by searching some old threads, it appears you may also know this  CoupledVarThresholdElementSubdomainModifier well. Dewen may not currently have the bandwidth to look into this, but if you are in a convenient position, could you take a look at the below-quoted issue we are trying to address, and see if you happen to know if this is something already implemented, or if we should implement by ourselves? If in the latter case, any suggestions on where to get started would be very much appreciated. Thanks\nBest,\nXiang\n\n\nso they look exactly the same before and after the restart?\n@GiudGiud\n\nHi Guillaume, thank you for all your help! If you do not mind me jumping in here - by the way my name is Xiang, and Zhuoting works with me.\nWe used chekpoints for restart, and for different variables we checked, before and after the restart, the values are the same. We did this following your suggestions using problem/solve=false, such that only initial state are stored. So Resart seems to pick up the right information.\nHowever, our restart also involves CoupledVarThresholdElementSubdomainModifier that activates material A to material P. The current issue we are trying to address is how to set the initial condition of those newly activated elements in the restart. Say some elements of material A is activated to be material P. A has variable T, and B has variables T and alpha. Right before activation, material A has T=T0A, and we wish to initialize the newly activated B with T=T0B and alpha=alpha_0. However, the code seems to use T= T0A and alpha=0 to initialize the newly activated B material.\nIs what we are trying to achieve an existing capability in MOOSE or we should develop this capability by ourselves? If we were to develop this capability, would you mind commenting what is the best way to start? Thanks.\nBest, Xiang",
                  "url": "https://github.com/idaholab/moose/discussions/25034#discussioncomment-7243933",
                  "updatedAt": "2023-10-10T17:53:47Z",
                  "publishedAt": "2023-10-10T17:53:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Looking for MeshGenerator that combines nodesets but leaves old nodesets intact",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "I have some nodesets/boundaries that I'd like to combine in multiple ways. Say I have 3 nodesets A, B, and C. I want:\n\nA + B = D\nA + C = E\nB + C = F\n\nSeems like RenameBoundaryGenerator is close, but it destroys the old boundaries. I'm using it like:\nold_boundary = 'A B'\nnew_boundary  = 'D D'\n\netc...",
          "url": "https://github.com/idaholab/moose/discussions/25707",
          "updatedAt": "2023-10-10T20:45:28Z",
          "publishedAt": "2023-10-10T20:11:41Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Use ParsedGenerateSideset with the included_boundaries parameter to create new ones.\nthe combinatorial geometry can be x > -1000000 to not matter",
                  "url": "https://github.com/idaholab/moose/discussions/25707#discussioncomment-7245724",
                  "updatedAt": "2023-10-10T20:22:10Z",
                  "publishedAt": "2023-10-10T20:22:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Hmm, that creates sidesets, but what about nodesets? Also, the nodesets may not be located together - could be 4 corners of the mesh for example, or centers of mesh edges, so I can't think of a expression that works for the combinatorial geometry.",
                          "url": "https://github.com/idaholab/moose/discussions/25707#discussioncomment-7245775",
                          "updatedAt": "2023-10-10T20:29:27Z",
                          "publishedAt": "2023-10-10T20:29:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "kk seems like you ll need to make ParsedGenerateNodeset. It will be a massive copy paste with very few line changes",
                          "url": "https://github.com/idaholab/moose/discussions/25707#discussioncomment-7245882",
                          "updatedAt": "2023-10-10T20:45:39Z",
                          "publishedAt": "2023-10-10T20:45:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "mamba init",
          "author": {
            "login": "gsoim"
          },
          "bodyText": "Hi everyone,\nI am trying install MOOSE on a Mac (with Intel processor) but I got this message when I am initializing mamba:\nmemoryview: a bytes-like object is required, not 'str'\n\n# >>>>>>>>>>>>>>>>>>>>>> ERROR REPORT <<<<<<<<<<<<<<<<<<<<<<\n\n    Traceback (most recent call last):\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/conda/exceptions.py\", line 1129, in __call__\n        return func(*args, **kwargs)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/mamba/mamba.py\", line 935, in exception_converter\n        raise e\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/mamba/mamba.py\", line 928, in exception_converter\n        exit_code = _wrapped_main(*args, **kwargs)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/mamba/mamba.py\", line 886, in _wrapped_main\n        result = do_call(parsed_args, p)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/mamba/mamba.py\", line 758, in do_call\n        exit_code = shell_init(args)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/mamba/mamba_shell_init.py\", line 79, in shell_init\n        exit_code = initialize(\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/conda/core/initialize.py\", line 119, in initialize\n        run_plan_elevated(plan2)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/conda/core/initialize.py\", line 688, in run_plan_elevated\n        result = subprocess_call(\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/site-packages/conda/gateways/subprocess.py\", line 100, in subprocess_call\n        stdout, stderr = process.communicate(input=stdin)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/subprocess.py\", line 1152, in communicate\n        stdout, stderr = self._communicate(input, endtime, timeout)\n      File \"/Users/georgiossoimoiris/mambaforge3/lib/python3.10/subprocess.py\", line 1983, in _communicate\n        input_view = memoryview(self._input)\n    TypeError: memoryview: a bytes-like object is required, not 'str'\n\n`$ /Users/georgiossoimoiris/mambaforge3/bin/mamba init`\n\n  environment variables:\n                 CIO_TEST=<not set>\n        CONDA_DEFAULT_ENV=base\n                CONDA_EXE=/opt/anaconda3/bin/conda\n             CONDA_PREFIX=/opt/anaconda3\n    CONDA_PROMPT_MODIFIER=(base)\n         CONDA_PYTHON_EXE=/opt/anaconda3/bin/python\n               CONDA_ROOT=/Users/georgiossoimoiris/mambaforge3\n              CONDA_SHLVL=1\n           CURL_CA_BUNDLE=<not set>\n                     PATH=/Users/georgiossoimoiris/mambaforge3/bin:/opt/anaconda3/bin:/opt/anaco\n                          nda3/condabin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/\n                          usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/s\n                          bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Apple/usr/bin:/Li\n                          brary/Frameworks/Mono.framework/Versions/Current/Commands\n       REQUESTS_CA_BUNDLE=<not set>\n            SSL_CERT_FILE=<not set>\n\n     active environment : /opt/anaconda3\n    active env location : /opt/anaconda3\n            shell level : 1\n       user config file : /Users/georgiossoimoiris/.condarc\n populated config files : /Users/georgiossoimoiris/mambaforge3/.condarc\n                          /Users/georgiossoimoiris/.condarc\n          conda version : 22.9.0\n    conda-build version : not installed\n         python version : 3.10.6.final.0\n       virtual packages : __osx=13.0.1=0\n                          __unix=0=0\n                          __archspec=1=x86_64\n       base environment : /Users/georgiossoimoiris/mambaforge3  (writable)\n      conda av data dir : /Users/georgiossoimoiris/mambaforge3/etc/conda\n  conda av metadata url : None\n           channel URLs : https://conda.software.inl.gov/public/osx-64\n                          https://conda.software.inl.gov/public/noarch\n                          https://conda.anaconda.org/conda-forge/osx-64\n                          https://conda.anaconda.org/conda-forge/noarch\n                          https://repo.anaconda.com/pkgs/main/osx-64\n                          https://repo.anaconda.com/pkgs/main/noarch\n                          https://repo.anaconda.com/pkgs/r/osx-64\n                          https://repo.anaconda.com/pkgs/r/noarch\n          package cache : /Users/georgiossoimoiris/mambaforge3/pkgs\n                          /Users/georgiossoimoiris/.conda/pkgs\n       envs directories : /Users/georgiossoimoiris/mambaforge3/envs\n                          /Users/georgiossoimoiris/.conda/envs\n               platform : osx-64\n             user-agent : conda/22.9.0 requests/2.28.1 CPython/3.10.6 Darwin/22.1.0 OSX/13.0.1\n                UID:GID : 501:20\n             netrc file : None\n           offline mode : False\n\n\nAn unexpected error has occurred. Conda has prepared the above report.",
          "url": "https://github.com/idaholab/moose/discussions/22807",
          "updatedAt": "2023-10-10T14:48:49Z",
          "publishedAt": "2022-11-28T20:24:11Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis looks like a borked mamba. I would reinstall mamba and try again. If still not working I d try download a different version\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22807#discussioncomment-4257117",
                  "updatedAt": "2022-11-28T20:36:09Z",
                  "publishedAt": "2022-11-28T20:36:09Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "gsoim"
                          },
                          "bodyText": "Yes, it works! Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22807#discussioncomment-4261036",
                          "updatedAt": "2022-11-29T07:39:01Z",
                          "publishedAt": "2022-11-29T07:39:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Jensoulou"
                          },
                          "bodyText": "Hey,\nI have the same problem. I tried to reinstall mamba and even older versions. Sadly, none of them are working: I always have the exact same error as shown above. What can you suggest to me to do to fix this?\nThank you so much,\nJens",
                          "url": "https://github.com/idaholab/moose/discussions/22807#discussioncomment-7240156",
                          "updatedAt": "2023-10-10T11:40:07Z",
                          "publishedAt": "2023-10-10T11:40:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Let s open a new post if the solutions on this thread don't work.\nCan you run the diagnostics script in moose/script when you create the new post? Thank you",
                          "url": "https://github.com/idaholab/moose/discussions/22807#discussioncomment-7240750",
                          "updatedAt": "2023-10-10T12:48:02Z",
                          "publishedAt": "2023-10-10T12:48:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Jensoulou"
                          },
                          "bodyText": "I opened a new one: #25703 (comment)\n:-)",
                          "url": "https://github.com/idaholab/moose/discussions/22807#discussioncomment-7241961",
                          "updatedAt": "2023-10-10T14:33:17Z",
                          "publishedAt": "2023-10-10T14:33:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Boundaries in CohesiveZoneAction",
          "author": null,
          "bodyText": "Hello,\nIs there a way to set all of the interfacial boundary IDs (block0_block1 block1_block2 etc) as boundary parameter in the CohesiveZoneAction or do we have to name them all one by one ?",
          "url": "https://github.com/idaholab/moose/discussions/25690",
          "updatedAt": "2023-10-10T14:28:39Z",
          "publishedAt": "2023-10-09T14:03:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@jiangwen84 @arovinelli",
                  "url": "https://github.com/idaholab/moose/discussions/25690#discussioncomment-7233072",
                  "updatedAt": "2023-10-09T17:51:20Z",
                  "publishedAt": "2023-10-09T17:51:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "arovinelli"
                  },
                  "bodyText": "@nshabib if you use the split_interface=true option (see BreakMeshByBlockGenerator ) yes, you have to list them all.",
                  "url": "https://github.com/idaholab/moose/discussions/25690#discussioncomment-7233905",
                  "updatedAt": "2023-10-09T19:47:17Z",
                  "publishedAt": "2023-10-09T19:47:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Oh ok, thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/25690#discussioncomment-7237971",
                          "updatedAt": "2023-10-10T07:48:58Z",
                          "publishedAt": "2023-10-10T07:48:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "arovinelli"
                          },
                          "bodyText": "@nshabib Just a clarification.\nYou need to use split_interface=true only if the cohesive responses is different for different interfaces.\nIf this is not the case, i.e. you use the same cohesive law with the same parameter for all interfaces, you can use split_interface=false. This will generate one single cohesive interface called interface",
                          "url": "https://github.com/idaholab/moose/discussions/25690#discussioncomment-7241849",
                          "updatedAt": "2023-10-10T14:24:33Z",
                          "publishedAt": "2023-10-10T14:24:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Yes I got that, thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/25690#discussioncomment-7241901",
                          "updatedAt": "2023-10-10T14:28:40Z",
                          "publishedAt": "2023-10-10T14:28:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A postprocessor that can simultaneously handle integration using 2 variables",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Hello everyone,\nI want to integrate the following volume integral on the computational domain.\nu_r and u_z are both my main variables. If I only had one variable, ElementIntegralVariablePostprocessor would had been a great option. Now that the integral consists of two main variables, how can I calculate the volume integral?\n\n\nThanks,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/25695",
          "updatedAt": "2023-10-10T13:21:04Z",
          "publishedAt": "2023-10-09T23:33:18Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf you have a variable for each derivative you could use a ParsedAux to form the whole term in a new auxvariable then use the classic PP to integrate it\nIf not then you ll need to make a new PP. It should be fine there s plenty of examples\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25695#discussioncomment-7235068",
                  "updatedAt": "2023-10-09T23:37:38Z",
                  "publishedAt": "2023-10-09T23:37:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Thanks. Do you think this is a correct way to calculate it? I mean I can integrate by getting r and z velocities separately and then call a variable that does not exist in the integral Here are .h, .C and input files.\n    [./VD]\n    type = ViscousDissipation\n    variable = w\n    vel_r = vel_x\n    vel_z = vel_y\n    c = c\n    mu = ${mu_water}\n[../]\n\n#pragma once\n\n#include \"ElementIntegralPostprocessor.h\"\n#include \"MooseVariableInterface.h\"\n\n\nclass ViscousDissipation : public ElementIntegralPostprocessor,\n                                             public MooseVariableInterface<Real>\n{\npublic:\n  static InputParameters validParams();\n\n  ViscousDissipation(const InputParameters & parameters);\n\nprotected:\n  virtual Real computeQpIntegral() override;\n\n  /// Holds the solution at current quadrature points\n  const VariableValue & _u;\n  const VariableValue & _vel_r;\n  const VariableValue & _vel_z;\n  /// Holds the solution gradient at the current quadrature points\n  const VariableGradient & _grad_vel_r;\n  const VariableGradient & _grad_vel_z;\n\n  const VariableValue & _c;\n  const Real & _mu;\n};\n\n#include \"ViscousDissipation.h\"\n\nregisterMooseObject(\"MooseApp\", ViscousDissipation);\n\nInputParameters\nViscousDissipation::validParams()\n{\n  InputParameters params = ElementIntegralPostprocessor::validParams();\n  params.addRequiredCoupledVar(\"variable\", \"The name of the variable that this object operates on\");\n  params.addRequiredCoupledVar(\"vel_r\", \"vel_r\");\n  params.addRequiredCoupledVar(\"vel_z\", \"vel_z\");\n  params.addRequiredCoupledVar(\"c\", \"c\");\n  params.addClassDescription(\"Computes a volume integral of the specified variable\");\n  params.addParam<Real>(\"mu\", 1.0, \"mu\");\n  return params;\n}\n\nViscousDissipation::ViscousDissipation(\n    const InputParameters & parameters)\n  : ElementIntegralPostprocessor(parameters),\n    MooseVariableInterface<Real>(this,\n                                 false,\n                                 \"variable\",\n                                 Moose::VarKindType::VAR_ANY,\n                                 Moose::VarFieldType::VAR_FIELD_STANDARD),\n    _u(coupledValue(\"variable\")),\n    _vel_r(coupledValue(\"vel_r\")),\n    _vel_z(coupledValue(\"vel_z\")),\n\n    _grad_vel_r(coupledGradient(\"vel_r\")),\n    _grad_vel_z(coupledGradient(\"vel_z\")),\n\n    _c(coupledValue(\"c\")),\n\n    _mu(getParam<Real>(\"mu\"))\n\n\n{\n  addMooseVariableDependency(&mooseVariableField());\n}\n\nReal\nViscousDissipation::computeQpIntegral()\n{\n  if (_c[_qp] < -0.0)\n  return 0;\n  const Real & r = _q_point[_qp](0);\n\n  return _mu *(2.0 * (_grad_vel_r[_qp](0)*_grad_vel_r[_qp](0) + _vel_r[_qp]*_vel_r[_qp] / (r * r) + _grad_vel_z[_qp](1)*_grad_vel_z[_qp](1)) +\n        _grad_vel_r[_qp](1)*_grad_vel_r[_qp](1) + _grad_vel_z[_qp](0)*_grad_vel_z[_qp](0) + 2.0 * _grad_vel_r[_qp](1)*_grad_vel_z[_qp](0));       \n}",
                          "url": "https://github.com/idaholab/moose/discussions/25695#discussioncomment-7235398",
                          "updatedAt": "2023-10-10T00:47:00Z",
                          "publishedAt": "2023-10-10T00:47:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Looks like you are on the right track\nThe best way to check this is to use it on a case where you know the solution.",
                          "url": "https://github.com/idaholab/moose/discussions/25695#discussioncomment-7241130",
                          "updatedAt": "2023-10-10T13:21:05Z",
                          "publishedAt": "2023-10-10T13:21:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "1D Curve boundary conditions for Flow in Fractured Media",
          "author": {
            "login": "SirGardener"
          },
          "bodyText": "Dear Moose community and developers,\nI hope you can help me out with this. What I am trying to accomplish is to reproduce the flow in fractured media example from the porous flow module (https://github.com/idaholab/moose/blob/next/modules/porous_flow/examples/flow_through_fractured_media/coarse_3D.i). However, I want to use an externally generated .msh File created in GMSH with the OCC Geometry Kernel. In the example, two intersecting fractures embedded within a cubic matrix are considered. These fractures, each box side and the total volume are assigned as physical groups in GMSH. Moreover, the intersection lines (1D) with the box sides are assigned as physical groups. By searching through the forum, I came across the hint that adding lower_dimensional_block in the .msh file in the respective lines under $PhysicalGroups fixed a first issue. This issue was that the fractures were not recognized in spite of having the correct ids. Afterward, the simulation successfully converged. However, inspection of the exported exodus II file revealed that lf1 and rf2 (the fracture intersections with the box side) were the entire left and right side of the cube instead of only the intersection lines. I am not sure whether this is a problem related to Moose or to GMSH. It might also be relevant to mention that while these lines were visible after creating the file in gmsh there are only points (no curves) visible for them when reopening the written .msh file with GMSHs fltk GUI. Does anybody have recommendations for me on what the best way would be to use mesh files generated in gmsh, e. g. in terms of file format? Is is perhaps necessary to combine the mesh with internal meshing capabilities?\nBest Regards\nChris",
          "url": "https://github.com/idaholab/moose/discussions/25699",
          "updatedAt": "2023-10-10T12:48:02Z",
          "publishedAt": "2023-10-10T10:18:37Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "SirGardener"
                  },
                  "bodyText": "I found out that is was just turner in the input file and now it works. Closed",
                  "url": "https://github.com/idaholab/moose/discussions/25699#discussioncomment-7240749",
                  "updatedAt": "2023-10-10T12:48:17Z",
                  "publishedAt": "2023-10-10T12:47:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "What do negative values for reaction rates imply in PorousFlow?",
          "author": null,
          "bodyText": "Hello,\nI recently simulated a simple dissolution problem using the PorousFlowAqueousPreDis Kernel. However, I was surprised to see that my dissolution rates were negative. According to the PorousFlow documentation, I expected positive values for dissolution and negative values for precipitation. Is this some type of error in my simulation? I tried convincing myself by running the PorousFlow dissolution_limited.i test file, and again, I observed negative values for that problem. Does it mean negative values correspond to dissolution? Could someone please clarify this? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/25697",
          "updatedAt": "2023-10-10T04:14:54Z",
          "publishedAt": "2023-10-10T02:03:42Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "So, is the mineral actually dissolving when the reaction rate is negative? And how are you checking the reaction rate?",
                  "url": "https://github.com/idaholab/moose/discussions/25697#discussioncomment-7236352",
                  "updatedAt": "2023-10-10T03:41:34Z",
                  "publishedAt": "2023-10-10T03:41:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": null,
                          "bodyText": "Hi @cpgr, Yes. The mineral is dissolving while the reaction rate is negative.I\u2019m getting the reaction rate from PorousFlowPropertyAux Kernel as follows:\n[AuxVariables]\n[diss_rate_per_sec]\n  family = MONOMIAL\n  order = CONSTANT\n[]\n[]\n\n[AuxKernels]\n[diss_rate_per_sec]\n  type = PorousFlowPropertyAux\n  property = mineral_reaction_rate\n  mineral_species = 0\n  variable = diss_rate_per_sec\n[]\n[]  \n\n\nHere is a graph of my reaction rate with the dissolving mineral:",
                          "url": "https://github.com/idaholab/moose/discussions/25697#discussioncomment-7236509",
                          "updatedAt": "2023-10-10T04:15:37Z",
                          "publishedAt": "2023-10-10T04:14:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Calling derivative of the basis functions and assembling in the a postprocessor",
          "author": {
            "login": "xiekai-mc"
          },
          "bodyText": "Hello,\nI want to calculate the macroscopic overall moduli $\\bar{\\mathbb{C}}$ as described in  https://doi.org/10.1016/S0927-0256(99)00080-4, with the formula being\n\n\nI believe I should use a postprocessor to compute the components of $\\bar{\\mathbb{C}}$, but I'm unsure about how to call the derivative of the basis functions $B$ within the postprocessor and assemble it across all elements.",
          "url": "https://github.com/idaholab/moose/discussions/25665",
          "updatedAt": "2023-10-12T14:29:01Z",
          "publishedAt": "2023-10-04T18:00:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "What is C?",
                  "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7191002",
                  "updatedAt": "2023-10-04T19:57:33Z",
                  "publishedAt": "2023-10-04T19:57:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xiekai-mc"
                          },
                          "bodyText": "$\\mathbb{C}$ is  a rank four tensor.",
                          "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7193036",
                          "updatedAt": "2023-10-05T02:12:02Z",
                          "publishedAt": "2023-10-05T02:09:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "grmnptr"
                          },
                          "bodyText": "The spatial derivatives of the basis functions should be accessible using the gradPhi function of your variable if I remember correctly. Or through the assembly object if you have access to it.",
                          "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7203803",
                          "updatedAt": "2023-10-05T23:00:03Z",
                          "publishedAt": "2023-10-05T22:59:26Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "What goes into C?",
                          "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7213266",
                          "updatedAt": "2023-10-06T20:17:51Z",
                          "publishedAt": "2023-10-06T20:17:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xiekai-mc"
                          },
                          "bodyText": "$\\mathbb{C} = \\frac{\\partial \\boldsymbol{P}}{\\partial \\boldsymbol{F}} $, $\\boldsymbol{P}$ is the pk1 stress,  $\\boldsymbol{F}$ is the deformation gradient.",
                          "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7223723",
                          "updatedAt": "2023-10-08T16:25:57Z",
                          "publishedAt": "2023-10-08T16:25:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I would follow @grmnptr's suggestion",
                          "url": "https://github.com/idaholab/moose/discussions/25665#discussioncomment-7233032",
                          "updatedAt": "2023-10-09T17:47:05Z",
                          "publishedAt": "2023-10-09T17:47:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Orthotropic temperature dependent material",
          "author": {
            "login": "chakra34"
          },
          "bodyText": "Hi,\nI saw that currently MOOSE has temperature dependent isotropic elasticity, however it does not have that for orthotropic materials. I was hoping to implement such in MOOSE, and was wondering if I could get some help/documentation for the way the ComputeVariableIsotropicElasticity is coded, so that I can use that as a basis for orthotropic materials.\nAny suggestion/literature in this direction will be extremely helpful.\nThanks.",
          "url": "https://github.com/idaholab/moose/discussions/25194",
          "updatedAt": "2023-10-09T19:46:50Z",
          "publishedAt": "2023-08-13T20:51:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor elasticity, there's a section on orthotropic models here:\nhttps://mooseframework.inl.gov/source/materials/ComputeElasticityTensor.html\nit s a matter of selecting the fill method\nSo you could adapt the code in ComputeVariableIsotropicElasticity the same way\n@jiangwen84 for comment\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6722056",
                  "updatedAt": "2023-08-14T15:19:50Z",
                  "publishedAt": "2023-08-14T15:18:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Yeah in the code ComputeVariableIsotropicElasticity there is dE, d2E, dlambda, d2lambda,... etc. I was wondering where I can get some reading material on these derivatives, and how they would look for orthotropic material.\nThere is a fill method, but for Orthotropic it needs 9 input, each of which would be temperature dependent, and would be provided in a tabular format in the input file.\nThanks again,\nAritra",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6751934",
                          "updatedAt": "2023-08-17T14:24:56Z",
                          "publishedAt": "2023-08-17T14:24:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think you would need to convert the tabular form to a \"Function\" form using PiecewiseLinear function for example to capture the temperature dependence.\nThen for the coeffiicent entry, you enable Functions instead of numbers\nYou can look at ComputeVariableIsotropicElasticity for examples on receiving functions\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6752436",
                          "updatedAt": "2023-08-17T15:08:48Z",
                          "publishedAt": "2023-08-17T15:08:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "okay, I can do that, as in input the parameters as Function. But still for the orthotropic I also need to provide the derivatives right ? Like there is dE and d2E, ... there would be similar for orthotropic where it would be dE11 dE22 dE33, dG12,....(9 terms) for each derivative ?",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6753511",
                          "updatedAt": "2023-08-17T16:54:14Z",
                          "publishedAt": "2023-08-17T16:54:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For the derivatives you should be able to use the time derivative method of functions\nbecause the functions you are inputting are functions of temperature used as the time  variable",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6753560",
                          "updatedAt": "2023-08-17T16:59:43Z",
                          "publishedAt": "2023-08-17T16:59:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "okay, so I don't have to write the expression for dE, d2E, but directly use the derivative method functions? In that case I will start writing a skeleton, and ask for help as I proceed through it!\nAlso, (forgive me for the stupid question), is there any code that already uses the time derivative method functions which I can look into ?\nThanks a lot!\nAritra",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6761043",
                          "updatedAt": "2023-08-18T12:20:05Z",
                          "publishedAt": "2023-08-18T12:20:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can see in the function source files the definitions of each timeDerivative routine.\nYou can see here a use case for this routine:\nvoid\nThermalFunctionSolidProperties::rho_from_T(const Real & T, Real & rho, Real & drho_dT) const\n{\n  rho = rho_from_T(T);\n  drho_dT = _rho_function.timeDerivative(T);\n}",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6769366",
                          "updatedAt": "2023-08-19T16:27:24Z",
                          "publishedAt": "2023-08-19T16:27:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Thanks a lot! :)",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-6780105",
                          "updatedAt": "2023-08-21T11:57:40Z",
                          "publishedAt": "2023-08-21T11:57:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "chakra34"
                  },
                  "bodyText": "Hi @GiudGiud , I finally started to code a orthotropic temperature dependent elasticity material, but am facing the following questions:\nSo I wrote the following code  ComputeVariableOrthotropicElasticityTensor.h which inherits from ComputeElasticityTensorTempl with the following header file:\n#pragma once\n\n#include \"ComputeElasticityTensor.h\"\n\n/**\n * ComputeVariableIsotropicElasticityTensor defines an elasticity tensor material for\n * isotropic materials in which the elastic constants (Young's modulus and Poisson's ratio)\n * vary as defined by material properties.\n */\ntemplate <bool is_ad>\nclass ComputeVariableOrthotropicElasticityTensorTempl : public ComputeElasticityTensorTempl<is_ad>\n{\npublic:\n  static InputParameters validParams();\n\n  ComputeVariableOrthotropicElasticityTensorTempl(const InputParameters & parameters);\n\nprotected:\n  virtual void computeQpElasticityTensor() override;\n\n  /// Value of temperature at each quadrature point\n  const VariableValue & _temperature;\n\n  /// Function input for 9 elasticity parameters required for orthotropic values\n  const Function & _E11;\n  const Function & _E22;\n  const Function & _E33;\n  \n  const Function & _G12;\n  const Function & _G23;\n  const Function & _G31;\n\n  const Function & _nu12;\n  const Function & _nu23;\n  const Function & _nu31;\n\n  /// vector to store the stiffness values\n  std::vector<Real> _ortho_stiffness_components ; \n  ///\n  RankFourTensor _ortho_Cijkl ;\n\n  using ComputeElasticityTensorTempl<is_ad>::_elasticity_tensor;\n  using ComputeElasticityTensorTempl<is_ad>::_qp;\n\n};\n\n\ntypedef ComputeVariableOrthotropicElasticityTensorTempl<false> ComputeVariableOrthotropicElasticityTensor;\ntypedef ComputeVariableOrthotropicElasticityTensorTempl<true> ADComputeVariableOrthotropicElasticityTensor;\n\n\nand the following is the source file:\n#include \"ComputeVariableOrthotropicElasticityTensor.h\"\n#include \"RotationTensor.h\"\n\nregisterMooseObject(\"TensorMechanicsApp\", ComputeVariableOrthotropicElasticityTensor);\nregisterMooseObject(\"TensorMechanicsApp\", ADComputeVariableOrthotropicElasticityTensor);\n\ntemplate <bool is_ad>\nInputParameters\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::validParams()\n{\n  InputParameters params = ComputeElasticityTensorTempl<is_ad>::validParams();\n  params.addClassDescription(\"Compute an orthotropic elasticity tensor for elastic constants that \"\n                             \"change as a function of temperature\");\n\n  params.addRequiredCoupledVar(\"temperature\", \"Coupled temperature\");\n\n  params.addRequiredParam<FunctionName>(\n      \"E11\",\n      \"Function describing the Young's modulus E11\");\n  params.addRequiredParam<FunctionName>(\n      \"E22\",\n      \"Function describing the Young's modulus E11\");\n  params.addRequiredParam<FunctionName>(\n      \"E33\",\n      \"Function describing the Young's modulus E11\");\n\n  params.addRequiredParam<FunctionName>(\n      \"G12\",\n      \"Function describing the shear modulus G12\");\n  params.addRequiredParam<FunctionName>(\n      \"G23\",\n      \"Function describing the shear modulus G23\");\n  params.addRequiredParam<FunctionName>(\n      \"G31\",\n      \"Function describing the shear modulus G31\");\n\n  params.addRequiredParam<FunctionName>(\n      \"nu12\",\n      \"Function describing the Poisson's ratio nu12\");\n  params.addRequiredParam<FunctionName>(\n      \"nu23\",\n      \"Function describing the Poisson's ratio nu23\");\n  params.addRequiredParam<FunctionName>(\n      \"nu31\",\n      \"Function describing the Poisson's ratio nu31\");\n\n  return params;\n}\n\n\ntemplate <bool is_ad>\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::ComputeVariableOrthotropicElasticityTensorTempl(\n    const InputParameters & parameters)\n  : ComputeElasticityTensorTempl<is_ad>(parameters),\n  _temperature(coupledValue(\"temperature\")),\n  _E11(this->getFunction(\"E11\")),\n  _E22(this->getFunction(\"E22\")),\n  _E33(this->getFunction(\"E33\")),\n  _G12(this->getFunction(\"G12\")),\n  _G23(this->getFunction(\"G23\")),\n  _G31(this->getFunction(\"G31\")),\n  _nu12(this->getFunction(\"nu12\")),\n  _nu23(this->getFunction(\"nu23\")),\n  _nu31(this->getFunction(\"nu31\"))\n{ \n}\n\ntemplate <bool is_ad>\nvoid\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::computeQpElasticityTensor()\n{\n  // Get the stiffness values for the current temperature\n  const auto current_qp_temperature = 100.0;  //_temperature[_qp].value();\n  _ortho_stiffness_components[0] = _E11.value(current_qp_temperature);\n  _ortho_stiffness_components[1] = _E22.value(current_qp_temperature);\n  _ortho_stiffness_components[2] = _E33.value(current_qp_temperature);\n\n  _ortho_stiffness_components[3] = _G12.value(current_qp_temperature);\n  _ortho_stiffness_components[4] = _G23.value(current_qp_temperature);\n  _ortho_stiffness_components[5] = _G31.value(current_qp_temperature);\n\n  _ortho_stiffness_components[6] = _nu12.value(current_qp_temperature);\n  _ortho_stiffness_components[7] = _nu23.value(current_qp_temperature);\n  _ortho_stiffness_components[8] = _nu31.value(current_qp_temperature);\n\n  // _nu21 = _nu12 * (_E22/_E11) ; \n  // _nu32 = _nu23 * (_E33/_E22) ; \n  // _nu13 = _nu31 * (_E11/_E33) ; \n\n  _ortho_stiffness_components[9]  = _nu12.value(current_qp_temperature) * \n                                    (_E22.value(current_qp_temperature)/ _E11.value(current_qp_temperature));\n  _ortho_stiffness_components[10] = _nu23.value(current_qp_temperature) * \n                                    (_E33.value(current_qp_temperature)/ _E22.value(current_qp_temperature));\n  _ortho_stiffness_components[11] = _nu31.value(current_qp_temperature) * \n                                    (_E11.value(current_qp_temperature)/ _E33.value(current_qp_temperature));\n\n\n  _ortho_Cijkl.fillGeneralOrthotropicFromInputVector(_ortho_stiffness_components);\n\n  // Assign elasticity tensor at a given quad point\n  _elasticity_tensor[_qp] = _ortho_Cijkl;\n\n}\n\n\nFor the above code I get compiler errors:\n--  with regards to adding the coupled variable _temperature\nerror: there are no arguments to \\u2018coupledValue\\u2019 that depend on a template parameter, so a declaration of \\u2018coupledValue\\u2019 must be available [-fpermissive]\n   64 |  _temperature(coupledValue(\"temperature\"))\n\n\nwhich probably indicates that I don't have a material property, in that case how do I access the local temperature at each _qp\n--- with regard to  void fillGeneralOrthotropicFromInputVector(const std::vector<T> & input); it gives the following error:\nerror: \\u2018void RankFourTensorTempl< <template-parameter-1-1> >::fillGeneralOrthotropicFromInputVector(const std::vector<T>&) [with T = double]\\u2019 is protected within this context\n  107 |   _ortho_Cijkl.fillGeneralOrthotropicFromInputVector(_ortho_stiffness_components);\n\n\nbut my definition of _ortho_stiffness_components is a  std::vector<Real>, and it is in protected, so I don't understand the error :(\n--- A basic question, if I have to declare a general vector with a certain size how do I do that in Moose header file ? Right now as you can see the _ortho_stiffness_components vector is not defined with a certain size, I tried  std::vector<double> _ortho_stiffness_components(12); and it gave an error :(\n--- Lastly, I haven't put the derivatives here, but I guess I would need to have _dstiffness which would be the _E11.timeDerivative(), _E22.timeDerivative(), ...\nApologies for such long comment, but I have been trying to figure out the issue for some time, and am currently unable to do it.\nThanks again,\nAritra",
                  "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7213277",
                  "updatedAt": "2023-10-06T20:18:40Z",
                  "publishedAt": "2023-10-06T20:18:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The first one is because your class is a template\ninstead of\n_temperature(coupledValue(\"temperature\"))\n\nit should be\n_temperature(this->coupledValue(\"temperature\"))\n\nit s a C++ thing, the templating is pretty unintuitive\nFor the 3rd thing, the vector is already declared in your header, so it s a member of the class. You dont need to re-declare it.\nJust resize it:\n_ortho_stiffness_components.resize(12);\n\nthen fill it\n_E11 is a function so you can indeed call .timeDerivative() and it will give you the derivative with regards to whatever you are using in lieu of time when calling the function",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7213381",
                          "updatedAt": "2023-10-06T20:32:04Z",
                          "publishedAt": "2023-10-06T20:32:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Thanks a lot @GiudGiud ! definitely resolved the compilation issues. The following code compiles (Please have a look if you get a chance):\n#include \"ComputeVariableOrthotropicElasticityTensor.h\"\n#include \"RotationTensor.h\"\n\nregisterMooseObject(\"TensorMechanicsApp\", ComputeVariableOrthotropicElasticityTensor);\nregisterMooseObject(\"TensorMechanicsApp\", ADComputeVariableOrthotropicElasticityTensor);\n\ntemplate <bool is_ad>\nInputParameters\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::validParams()\n{\n  InputParameters params = ComputeElasticityTensorTempl<is_ad>::validParams();\n  params.addClassDescription(\"Compute an orthotropic elasticity tensor for elastic constants that \"\n                             \"change as a function of temperature\");\n\n  params.addRequiredCoupledVar(\"temperature\", \"Coupled temperature\");\n\n  params.addRequiredParam<FunctionName>(\n      \"E11\",\n      \"Function describing the Young's modulus E11\");\n  params.addRequiredParam<FunctionName>(\n      \"E22\",\n      \"Function describing the Young's modulus E11\");\n  params.addRequiredParam<FunctionName>(\n      \"E33\",\n      \"Function describing the Young's modulus E11\");\n\n  params.addRequiredParam<FunctionName>(\n      \"G12\",\n      \"Function describing the shear modulus G12\");\n  params.addRequiredParam<FunctionName>(\n      \"G23\",\n      \"Function describing the shear modulus G23\");\n  params.addRequiredParam<FunctionName>(\n      \"G31\",\n      \"Function describing the shear modulus G31\");\n\n  params.addRequiredParam<FunctionName>(\n      \"nu12\",\n      \"Function describing the Poisson's ratio nu12\");\n  params.addRequiredParam<FunctionName>(\n      \"nu23\",\n      \"Function describing the Poisson's ratio nu23\");\n  params.addRequiredParam<FunctionName>(\n      \"nu31\",\n      \"Function describing the Poisson's ratio nu31\");\n\n  return params;\n}\n\n\ntemplate <bool is_ad>\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::ComputeVariableOrthotropicElasticityTensorTempl(\n    const InputParameters & parameters)\n  : ComputeElasticityTensorTempl<is_ad>(parameters),\n _temperature(this->coupledValue(\"temperature\")),\n  _E11(this->getFunction(\"E11\")),\n  _E22(this->getFunction(\"E22\")),\n  _E33(this->getFunction(\"E33\")),\n  _G12(this->getFunction(\"G12\")),\n  _G23(this->getFunction(\"G23\")),\n  _G31(this->getFunction(\"G31\")),\n  _nu12(this->getFunction(\"nu12\")),\n  _nu23(this->getFunction(\"nu23\")),\n  _nu31(this->getFunction(\"nu31\"))\n{ \n}\n\ntemplate <bool is_ad>\nvoid\nComputeVariableOrthotropicElasticityTensorTempl<is_ad>::computeQpElasticityTensor()\n{\n  // Get the stiffness values for the current temperature\n  const auto current_qp_temperature = _temperature[_qp];\n  _ortho_stiffness_components.resize(12);\n  _ortho_stiffness_components = {0.0} ;\n\n  _ortho_stiffness_components[0] = _E11.value(current_qp_temperature);\n  _ortho_stiffness_components[1] = _E22.value(current_qp_temperature);\n  _ortho_stiffness_components[2] = _E33.value(current_qp_temperature);\n\n  _ortho_stiffness_components[3] = _G12.value(current_qp_temperature);\n  _ortho_stiffness_components[4] = _G23.value(current_qp_temperature);\n  _ortho_stiffness_components[5] = _G31.value(current_qp_temperature);\n\n  _ortho_stiffness_components[6] = _nu12.value(current_qp_temperature);\n  _ortho_stiffness_components[7] = _nu23.value(current_qp_temperature);\n  _ortho_stiffness_components[8] = _nu31.value(current_qp_temperature);\n\n  // _nu21 = _nu12 * (_E22/_E11) ; \n  // _nu32 = _nu23 * (_E33/_E22) ; \n  // _nu13 = _nu31 * (_E11/_E33) ; \n\n  _ortho_stiffness_components[9]  = _nu12.value(current_qp_temperature) * \n                                    (_E22.value(current_qp_temperature)/ _E11.value(current_qp_temperature));\n  _ortho_stiffness_components[10] = _nu23.value(current_qp_temperature) * \n                                    (_E33.value(current_qp_temperature)/ _E22.value(current_qp_temperature));\n  _ortho_stiffness_components[11] = _nu31.value(current_qp_temperature) * \n                                    (_E11.value(current_qp_temperature)/ _E33.value(current_qp_temperature));\n\n\n _ortho_Cijkl.zero();\n _ortho_Cijkl.fillFromInputVector(_ortho_stiffness_components, RankFourTensor:: orthotropic);\n\n  // Assign elasticity tensor at a given quad point\n  _elasticity_tensor[_qp] = _ortho_Cijkl;\n\n}\n\ntemplate class ComputeVariableOrthotropicElasticityTensorTempl<false>;\ntemplate class ComputeVariableOrthotropicElasticityTensorTempl<true>;\n\nAlso, a final question regarding the derivative, so if I have only temperature dependence, then I populate the std::vector<MaterialProperty<RankFourTensor> *> _delasticity_tensor , but where is it being used ? Do I have to modify some other code/source file, or just populating the _delasticity_tensor in the current file should be enough ?\nAgain, thank you so much for the huge help!\n-Aritra",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7225021",
                          "updatedAt": "2023-10-09T12:46:52Z",
                          "publishedAt": "2023-10-08T21:17:16Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Also what is _effective_stiffness[_qp] do I need to populate that as well ?",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7230643",
                          "updatedAt": "2023-10-09T13:43:06Z",
                          "publishedAt": "2023-10-09T13:43:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'm not that familiar with that part of the code.\nI would expect you dont need to fill _delasticity_tensor  if you use automatic differentiation but you ll have to check",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7230961",
                          "updatedAt": "2023-10-09T14:11:42Z",
                          "publishedAt": "2023-10-09T14:11:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chakra34"
                          },
                          "bodyText": "Thank you so much @GiudGiud , I have added the derivatives following similar to \"ComputeConcentrationDependentElasticity\". It compiles and now I am going to test it out.\nThanks again, so much for all the help!!\n-Aritra",
                          "url": "https://github.com/idaholab/moose/discussions/25194#discussioncomment-7231669",
                          "updatedAt": "2023-10-09T15:14:44Z",
                          "publishedAt": "2023-10-09T15:14:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "cannot open source file \"MooseApp.h\"",
          "author": {
            "login": "nan-f"
          },
          "bodyText": "Hi all,\nI already had MOOSE on my system,and I try to write code on vscode. but I can\u2019t find source file \"MooseApp.h\".\nThis is my setting.json:\n{\n    \"[cpp]\": {\n        \"editor.defaultFormatter\": \"ms-vscode.cpptools\"\n    },\n    \"telemetry.telemetryLevel\": \"off\",\n    \"C_Cpp.default.cppStandard\": \"c++17\",\n    \"C_Cpp.default.includePath\": [\n        \"${workspaceFolder}/**\",\n        \"/home/fangn/mambaforge3/envs/moose/**\",\n        \"/usr/include/**\"\n    ],\n    \"files.associations\": {\n        \"*.C\": \"cpp\",\n        \"*.h\": \"cpp\"\n    },\n    \"files.trimTrailingWhitespace\": true,\n    \"editor.tabSize\": 2,\n    \"editor.formatOnSave\": true,\n    \"files.insertFinalNewline\": true\n}",
          "url": "https://github.com/idaholab/moose/discussions/25684",
          "updatedAt": "2023-10-09T03:11:29Z",
          "publishedAt": "2023-10-08T07:48:24Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI just tried with your settings and it works fine. Ctrl + P will still find MooseApp.h\nAre you getting a compiling error? This would not be related to your vscode settings\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25684#discussioncomment-7224129",
                  "updatedAt": "2023-10-08T17:44:09Z",
                  "publishedAt": "2023-10-08T17:44:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nan-f"
                          },
                          "bodyText": "I try to change my  .vscode/c_cpp_properties.json as  #18307 say, and then I can find MooseApp.h. \ud83d\ude04",
                          "url": "https://github.com/idaholab/moose/discussions/25684#discussioncomment-7226279",
                          "updatedAt": "2023-10-09T03:11:30Z",
                          "publishedAt": "2023-10-09T03:11:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}