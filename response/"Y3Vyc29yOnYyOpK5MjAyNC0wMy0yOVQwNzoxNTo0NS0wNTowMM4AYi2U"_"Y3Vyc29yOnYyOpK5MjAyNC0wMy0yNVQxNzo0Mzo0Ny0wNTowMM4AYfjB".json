{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wMy0yNVQxNzo0Mzo0Ny0wNTowMM4AYfjB"
    },
    "edges": [
      {
        "node": {
          "title": "Contact block not recognized",
          "author": {
            "login": "lyyc199586"
          },
          "bodyText": "I got an error about my contact block:\n Common causes:\n- you misspelled the Action/section name\n- the app you are running does not support this Action/syntax\n/home/yl740/projects/raccoon/soda/half/elasticity-coh-contact.i:174.3: section '[Contact/v_notch]' does not have an associated \"Action\".\n Common causes:\n- you misspelled the Action/section name\n- the app you are running does not support this Action/syntax\n/home/yl740/projects/raccoon/soda/half/elasticity-coh-contact.i:184.3: section '[Contact/long_bar]' does not have an associated \"Action\".\n Common causes:\n- you misspelled the Action/section name\n- the app you are running does not support this Action/syntax\n\nthis is my contact block:\n[Contact]\n  [v_notch]\n    primary = bar_v\n    secondary = v-entire\n    model = coulomb\n    formulation = penalty\n    normalize_penalty = true\n    friction_coefficient = 0.35\n    penalty = 1e8\n    tangential_tolerance = 0.005\n  []\n  [long_bar]\n    primary = striker_right\n    secondary = bar_left\n    model = frictionless\n    formulation = penalty\n    penalty = 1e8\n    normalize_penalty = true\n  []\n[]\n\nI checked the makefile to make sure the contact module is set to yes\nCONTACT             := yes",
          "url": "https://github.com/idaholab/moose/discussions/27215",
          "updatedAt": "2024-03-28T20:47:28Z",
          "publishedAt": "2024-03-28T17:25:13Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "How to scale one variable by another variable in multi-physics transient solver",
          "author": {
            "login": "NorthMagic"
          },
          "bodyText": "Hello, I am solving on a coupling multi-physics transient problem. It is described by two coupled equations including two variables. At the end of each time step, one of the variables need to be scaled by another variable (solved in the current time step) for next time step. I didn't how to achieve it based on MOOSE framework, could you please give me some suggestions?",
          "url": "https://github.com/idaholab/moose/discussions/27210",
          "updatedAt": "2024-03-28T13:53:32Z",
          "publishedAt": "2024-03-28T12:59:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nnonlinear variables in MOOSE are supposed to only be computed by the nonlinear solve. As such, auxiliary kernels for example cannot set change their values. There are two workarounds:\n\ncode a user object like \"VariableScalingUO\" that performs this scaling operation, executed on TIMESTEP_END, and does so by modifying the solution vector\nuse a MultiApp setup in which you:\n\n\ntransfer the variable (on timestep_end) you want to scale to an auxiliary variable of exactly the same finite element family and order, in a multiapp with exactly the same mesh\nuse an auxkernel (parsedAux for example) to scale it there\ntransfer back from the auxvariable onto the nonlinear variable in the main app\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27210#discussioncomment-8940469",
                  "updatedAt": "2024-03-28T13:10:57Z",
                  "publishedAt": "2024-03-28T13:10:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "NorthMagic"
                          },
                          "bodyText": "I am trying on the first way just as you mentioned, but I don't clearly know how to do it. I saw \"Writing directly to coupled variables\" about \"Coupleable\" in the MOOSE website. Should I get variables by \"writableVariiable\" and modify them by \"setNodalValue\"?",
                          "url": "https://github.com/idaholab/moose/discussions/27210#discussioncomment-8940580",
                          "updatedAt": "2024-03-28T13:21:55Z",
                          "publishedAt": "2024-03-28T13:21:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For option 1 there are two options.\nThe coupleable interface writable values.\nSetNodalValue will work only if you have a nodal variable (for example 1st order lagrange). Otherwise you will want to use setDofValue. For scaling, both should work\nor accessing the solution vector directly from the nonlinear system",
                          "url": "https://github.com/idaholab/moose/discussions/27210#discussioncomment-8940622",
                          "updatedAt": "2024-03-28T13:24:59Z",
                          "publishedAt": "2024-03-28T13:24:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "NorthMagic"
                          },
                          "bodyText": "Directly deal with solution vector from nonlinear system is a better choice. I know that _fe_problem.getNonlinearSystem(0).solution() can get the solution vector, dose it contain solutions of all coupled variables? How can I get the solution vector for each variable separately? I am so sorry for these minor questions.",
                          "url": "https://github.com/idaholab/moose/discussions/27210#discussioncomment-8940902",
                          "updatedAt": "2024-03-28T13:46:32Z",
                          "publishedAt": "2024-03-28T13:46:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "See the doxygen for all the apis available\nhttps://mooseframework.inl.gov/docs/doxygen/moose/classNonlinearSystem.html\n\nYou ll want to use the variable number in the system",
                          "url": "https://github.com/idaholab/moose/discussions/27210#discussioncomment-8940976",
                          "updatedAt": "2024-03-28T13:53:33Z",
                          "publishedAt": "2024-03-28T13:53:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Some questions on the ComputeFiniteStrain class",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I want to implement a custom material model. The problem to be solved is a Finite Strain problem, so I need to calculate the strain using ComputeFiniteStrain.\n-Assuming my problem were Linear Elastic, I would use ComputeFiniteStrainElasticStress, which I understand computes the Cauchy Stress using an incremental formulation, by looking at the source code. I don't see where the properties needed are declared in ComputeFiniteStrain, i.e elastic_strain and strain_increment . How/where are they gotten from?\n-My custom model is a hyperelastic material model, and the strain energy is calculated based on the principal stretches, lambda_(1,2,3). Therefore I will need the stretch tensor, U. I see it referred to in the documentation, but how do I \"get\" it? I cannot find it declared in ComputeFiniteStrain.\nAlso, my problem works with the Green-Lagrange Strain, and second PK stress. To calculate the Green-Lagrange Strain I need the Cauchy-Green deformation tensor, C, which I can calculate from U.\n-Are the names of the variables also the same for ComputeIncrementalSmallStrain?\n-I guess this last one is more of a mechanics problem but by my understanding, for an elastic/hyperelastic problem the old strain + the strain increment are always equal to the current strain, right?",
          "url": "https://github.com/idaholab/moose/discussions/27196",
          "updatedAt": "2024-03-28T13:48:03Z",
          "publishedAt": "2024-03-26T18:01:45Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@bwspenc",
                  "url": "https://github.com/idaholab/moose/discussions/27196#discussioncomment-8918930",
                  "updatedAt": "2024-03-26T18:13:30Z",
                  "publishedAt": "2024-03-26T18:13:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "-Assuming my problem were Linear Elastic, I would use ComputeFiniteStrainElasticStress, which I understand computes the Cauchy Stress using an incremental formulation, by looking at the source code. I don't see where the properties needed are declared in ComputeFiniteStrain, i.e elastic_strain and strain_increment . How/where are they gotten from?\n\nLook at it base class, i.e. ComputeIncrementalStrainBase.C\n\n-My custom model is a hyperelastic material model, and the strain energy is calculated based on the principal stretches, lambda_(1,2,3). Therefore I will need the stretch tensor, U. I see it referred to in the documentation, but how do I \"get\" it? I cannot find it declared in ComputeFiniteStrain.\n\nSame, look for the base class, if not available, you can declare and compute it in your new material class.\n\nAlso, my problem works with the Green-Lagrange Strain, and second PK stress. To calculate the Green-Lagrange Strain I need the Cauchy-Green deformation tensor, C, which I can calculate from U.\n\nSame.\n\n-Are the names of the variables also the same for ComputeIncrementalSmallStrain?\n\nWhat are the variable names you refer to?\n\n-I guess this last one is more of a mechanics problem but by my understanding, for an elastic/hyperelastic problem the old strain + the strain increment are always equal to the current strain, right?\n\nIn In principle , Yes.",
                  "url": "https://github.com/idaholab/moose/discussions/27196#discussioncomment-8940917",
                  "updatedAt": "2024-03-28T13:48:32Z",
                  "publishedAt": "2024-03-28T13:48:03Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error while installing MOOSE on HPC",
          "author": {
            "login": "yuezhiying6"
          },
          "bodyText": "Dear all,\nI am installing MOOSE on HPC  according to the instructions in the official documentation. However, some errors occurred when compiling the superlu_dist. Following is the configure.log file after I run the command in the terminal ./moose/scripts/update_and_rebuild_petsc.sh. Any suggestion would be appreciated.\nconfigure.log\nZhiying\nBest regards",
          "url": "https://github.com/idaholab/moose/discussions/27209",
          "updatedAt": "2024-03-28T12:39:31Z",
          "publishedAt": "2024-03-28T08:25:22Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou are using the intel compilers which are not supported by moose, and looking at the log also not by superlu\nyou will need to clean your environment and have only supported compilers (gnu clang) available\nyou can use \u2018env\u2019 to check or the diagnostics script in moose/scripts\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27209#discussioncomment-8940172",
                  "updatedAt": "2024-03-28T12:39:31Z",
                  "publishedAt": "2024-03-28T12:39:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Anisotropic porous friction?",
          "author": {
            "login": "veeshy"
          },
          "bodyText": "Anyone have thoughts on how to implement an anisotropic porous friction factor in PINSFV to model a perforated plate like in https://www.simscale.com/knowledge-base/how-to-use-porous-media-feature-to-define-perforated-plate/ ? For flow aligned to an axis it seems easy enough, but I'm not sure what to do if the plate is angled like in the linked example.",
          "url": "https://github.com/idaholab/moose/discussions/27001",
          "updatedAt": "2024-03-27T15:57:55Z",
          "publishedAt": "2024-03-06T23:45:25Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI would create a new friction material. In this material, make the friction coefficient dependent on the direction d of the perforations and the velocity. Maybe just the scalar product d * v.\nif d and v are alight, K is minimum, as d * v decreases, K increases to block flow\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8701986",
                  "updatedAt": "2024-03-07T04:03:07Z",
                  "publishedAt": "2024-03-07T04:03:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "Hm, I don't think just the scalar product will work because it won't artificially inflate the transverse friction. For example if the perforation direction was {1, 0, 0}, I'd want my friction to be {F, 10F, 10F}. And I don't know what the equivalent is if the direction were {0.5, 0.5 0}",
                          "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8724267",
                          "updatedAt": "2024-03-08T20:08:57Z",
                          "publishedAt": "2024-03-08T20:08:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "pretty sure it can work. Pseudo code:\nif (d * v > 0.9 * norm(d) * norm(v))\nF_x = F_y = F_z = 1\nelse\nF_x = F_y = F_z = 10\nthis penalizes other directions than d.\nYou ll want something smooth instead of this to get better convergence",
                          "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8724405",
                          "updatedAt": "2024-03-08T20:24:09Z",
                          "publishedAt": "2024-03-08T20:24:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "oh, yeah that does look better than what I though. Seems to generally work on its way to convergence then diverges. I'll think about a smoother way to get there. Thanks for the suggestion!",
                          "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8725416",
                          "updatedAt": "2024-03-08T22:31:11Z",
                          "publishedAt": "2024-03-08T22:31:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "I tried this out, I'm not sure it's quite right. I was able to get some mild convergence but never quite there. I have a pipe with a directional perforated plate in it not aligned to an axis. I rotated the mesh so that the plate is normal to the x axis. I expect both cases to give the same results and that the x axis case should simply be the case where I can input the x direction loss factor and keep the y direction much larger.\nI don't think the v dotted with the plate orientation can capture the \"actual\" velocity where the flow isn't actually in the perforation direction where the wall would be blocking the perfection exit.\n\nI tried a case of rotating the loss factors from the perforation axis to the global one, that ends up having a much higher pressure drop.",
                          "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8859227",
                          "updatedAt": "2024-03-21T00:17:33Z",
                          "publishedAt": "2024-03-21T00:17:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "Ah, I think simply rotating the friction vector isn't right because I'm using the action version of PINSFV which assumes the loss term only depends on the principle directions. I think a shear-like term needs to be there with a tensor form of the loss coefficient * the velocity vector (or something like that..)",
                          "url": "https://github.com/idaholab/moose/discussions/27001#discussioncomment-8930583",
                          "updatedAt": "2024-03-27T15:57:55Z",
                          "publishedAt": "2024-03-27T15:57:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error when compilng Cardinal",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "@milljm Hello. I met some error when compiling Cardinal.\nI set the environment variables before compiling:\n(base) [linux@localhost cardinal]$ export MPI_UNDERLYING_COMPILER=/usr/local/bin/g++\n(base) [linux@localhost cardinal]$ export CC=/usr/local/bin/gcc\n(base) [linux@localhost cardinal]$ export CXX=/usr/local/bin/g++\n(base) [linux@localhost cardinal]$ export FC=/usr/local/bin/gfortran\n\nBut the error persists:\n-- Found MPI_UNDERLYING_COMPILER: /usr/bin/g++\nCMake Error at CMakeLists.txt:95 (message):\n  GNU compiler version must be at least 9.1!\n\nMy GNU version is 9.5.0:\n(base) [linux@localhost cardinal]$ mpicxx --version\ng++ (GCC) 9.5.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",
          "url": "https://github.com/idaholab/moose/discussions/27161",
          "updatedAt": "2024-04-01T14:02:59Z",
          "publishedAt": "2024-03-21T12:22:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "export CC=mpicc\n...\nMy guess is /usr/local/bin/g++ --version returns <9.1",
                  "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8865857",
                  "updatedAt": "2024-03-21T13:14:15Z",
                  "publishedAt": "2024-03-21T13:14:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "But I just installed 9.5.0-version gcc in /usr/local/bin this morning, here is the files in /usr/local/bin:\n(base) [linux@localhost ~]$ ls -l /usr/local/bin\ntotal 153700\n-rwxr-xr-x. 1 root root     1887 Mar 17 23:03 aggregate_profile.pl\n-rwxr-xr-x. 4 root root  7202856 Mar 21 08:11 c++\n-rwxr-xr-x. 1 root root 16372000 Mar 18 01:18 ccmake\n-rwxr-xr-x. 1 root root 16693696 Mar 18 01:18 cmake\nlrwxrwxrwx. 1 root root       45 Sep 22  2021 coreform_cubit -> /opt/Coreform-Cubit-2021.5/bin/coreform_cubit\n-rwxr-xr-x. 1 root root 17133952 Mar 18 01:18 cpack\n-rwxr-xr-x. 1 root root  7199056 Mar 21 08:11 cpp\n-rwxr-xr-x. 1 root root 18301744 Mar 18 01:18 ctest\n-rwxr-xr-x. 4 root root  7202856 Mar 21 08:11 g++\n-rwxr-xr-x. 3 root root  7191168 Mar 21 08:11 gcc\n-rwxr-xr-x. 2 root root   175192 Mar 21 08:11 gcc-ar\n-rwxr-xr-x. 2 root root   175128 Mar 21 08:11 gcc-nm\n-rwxr-xr-x. 2 root root   175136 Mar 21 08:11 gcc-ranlib\n-rwxr-xr-x. 1 root root  6732024 Mar 21 08:11 gcov\n-rwxr-xr-x. 1 root root  4089952 Mar 21 08:11 gcov-dump\n-rwxr-xr-x. 1 root root  4448992 Mar 21 08:11 gcov-tool\n-rwxr-xr-x. 2 root root  7204768 Mar 21 08:11 gfortran\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpic++ -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpicc -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpiCC -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpicxx -> opal_wrapper\nlrwxrwxrwx. 1 root root        7 Mar 17 23:03 mpiexec -> orterun\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpif77 -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpif90 -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 mpifort -> opal_wrapper\nlrwxrwxrwx. 1 root root        7 Mar 17 23:03 mpirun -> orterun\nlrwxrwxrwx. 1 root root       10 Mar 17 23:03 ompi-clean -> orte-clean\nlrwxrwxrwx. 1 root root        8 Sep 22  2021 ompi-dvm -> orte-dvm\n-rwxr-xr-x. 1 root root    36328 Mar 17 23:03 ompi_info\nlrwxrwxrwx. 1 root root        7 Sep 22  2021 ompi-ps -> orte-ps\nlrwxrwxrwx. 1 root root       11 Mar 17 23:03 ompi-server -> orte-server\nlrwxrwxrwx. 1 root root        8 Sep 22  2021 ompi-top -> orte-top\n-rwxr-xr-x. 1 root root    32296 Mar 17 23:03 opal_wrapper\nlrwxrwxrwx. 1 root root       12 Mar 17 23:03 ortecc -> opal_wrapper\n-rwxr-xr-x. 1 root root    23680 Mar 17 23:03 orte-clean\n-rwxr-xr-x. 1 root root    17736 Mar 17 23:03 orted\n-rwxr-xr-x. 1 root root    91680 Sep 22  2021 orte-dvm\n-rwxr-xr-x. 1 root root    44048 Mar 17 23:03 orte-info\n-rwxr-xr-x. 1 root root    33048 Sep 22  2021 orte-ps\n-rwxr-xr-x. 1 root root    22824 Mar 17 23:03 orterun\n-rwxr-xr-x. 1 root root    24504 Mar 17 23:03 orte-server\n-rwxr-xr-x. 1 root root    39544 Sep 22  2021 orte-top\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 oshc++ -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 oshcc -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 oshCC -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 oshcxx -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 oshfort -> opal_wrapper\n-rwxr-xr-x. 1 root root    32056 Sep 22  2021 oshmem_info\nlrwxrwxrwx. 1 root root        6 Sep 22  2021 oshrun -> mpirun\n-rwxr-xr-x. 1 root root     2709 Mar 17 23:03 profile2mat.pl\n-rwxr-xr-x. 1 root root   110536 Sep 22  2021 prun\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 shmemc++ -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 shmemcc -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 shmemCC -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 shmemcxx -> opal_wrapper\nlrwxrwxrwx. 1 root root       12 Sep 22  2021 shmemfort -> opal_wrapper\nlrwxrwxrwx. 1 root root        6 Sep 22  2021 shmemrun -> mpirun\n-rwxr-xr-x. 4 root root  7202856 Mar 21 08:11 x86_64-pc-linux-gnu-c++\n-rwxr-xr-x. 4 root root  7202856 Mar 21 08:11 x86_64-pc-linux-gnu-g++\n-rwxr-xr-x. 3 root root  7191168 Mar 21 08:11 x86_64-pc-linux-gnu-gcc\n-rwxr-xr-x. 3 root root  7191168 Mar 21 08:11 x86_64-pc-linux-gnu-gcc-9.5.0\n-rwxr-xr-x. 2 root root   175192 Mar 21 08:11 x86_64-pc-linux-gnu-gcc-ar\n-rwxr-xr-x. 2 root root   175128 Mar 21 08:11 x86_64-pc-linux-gnu-gcc-nm\n-rwxr-xr-x. 2 root root   175136 Mar 21 08:11 x86_64-pc-linux-gnu-gcc-ranlib\n-rwxr-xr-x. 2 root root  7204768 Mar 21 08:11 x86_64-pc-linux-gnu-gfortran",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8865894",
                          "updatedAt": "2024-03-21T13:16:47Z",
                          "publishedAt": "2024-03-21T13:16:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "(base) [linux@localhost ~]$ cd /usr/local/bin\n(base) [linux@localhost bin]$ ./gcc --version\ngcc (GCC) 9.5.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n(base) [linux@localhost bin]$ ./g++ --version\ng++ (GCC) 9.5.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8865930",
                          "updatedAt": "2024-03-21T13:18:55Z",
                          "publishedAt": "2024-03-21T13:18:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks fine\ndid you try again with exporting these\nexport CC=mpicc\n...",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8865971",
                          "updatedAt": "2024-03-21T13:21:28Z",
                          "publishedAt": "2024-03-21T13:21:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Yes and it looks like no difference.\nI think the problem is still from:\n-- Found MPI_UNDERLYING_COMPILER: /usr/bin/g++\nCMake Error at CMakeLists.txt:95 (message):\n  GNU compiler version must be at least 9.1!\n\nIs MPI_UNDERLYING_COMPILER a environment variable? Why I set export MPI_UNDERLYING_COMPILER=/usr/local/bin/g++, the\nMPI_UNDERLYING_COMPILER still identifies the g++ in /usr/bin\uff1f",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8866098",
                          "updatedAt": "2024-03-21T13:31:49Z",
                          "publishedAt": "2024-03-21T13:31:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont think that s an env variabkle. I dont have it, I have a MPIHOME though",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8866289",
                          "updatedAt": "2024-03-21T13:45:58Z",
                          "publishedAt": "2024-03-21T13:45:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Oh, so the export MPI_UNDERLYING_COMPILER=/usr/local/bin/g++ is meaningless. Hmmmm, do you have any ideas about how to make MPI_UNDERLYING_COMPILER identifie the g++ in /usr/local/bin but not /usr/bin?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8866313",
                          "updatedAt": "2024-03-21T13:48:01Z",
                          "publishedAt": "2024-03-21T13:48:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "check the PATH?\nrun diagnostics in moose/scripts and look for stuff pointing to /usr/bin first",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8866686",
                          "updatedAt": "2024-03-21T14:14:31Z",
                          "publishedAt": "2024-03-21T14:14:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "I\u2018m not pro at these....\nDo you mean this? I run the diagnostics in moose/scripts:\nPATH=/home/linux/projects/moose:/usr/share/Modules/bin:/home/linux/projects/moose:/home/linux/mambaforge3/bin:/home/linux/mambaforge3/condabin:/home/linux/.local/bin:/home/linux/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8866863",
                          "updatedAt": "2024-03-21T14:27:53Z",
                          "publishedAt": "2024-03-21T14:27:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The script has the full picture.\nyou ll want to check all of these for what s bringing in the wrong compiler",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8867009",
                          "updatedAt": "2024-03-21T14:41:32Z",
                          "publishedAt": "2024-03-21T14:41:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "But I didn't find anything about the MPI_UNDERLYING_COMPILER\nThu Mar 21 10:23:29 EDT 2024\n\nSystem Arch: LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 8.5.2111 Release: 8.5.2111 Codename: n/a\n\nMOOSE Package Version: Custom Build\n\nCPU Count: 4\n\nMemory Free: 9216.500 MB\n\n$CC not set\n\nMPICC:\nwhich mpicc:\n\t/usr/local/bin/mpicc\nmpicc -show:\n\tgcc -I/usr/local/include -pthread -L/usr/local/lib -Wl,-rpath -Wl,/usr/local/lib -Wl,--enable-new-dtags -lmpi\n\nCOMPILER gcc:\ngcc (GCC) 9.5.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nPython:\n\t/home/linux/mambaforge3/bin/python\n\tPython 3.9.10\n\nMODULES:\nNo Modulefiles Currently Loaded.\n\nPETSC_DIR not set\n\nENVIRONMENT:\n *)\n ;;\n ;;\n ;;\n ;;\n}\n}\n}\n}\n}\n}\nBASH_FUNC_ml%%=() {  module ml \"$@\"\nBASH_FUNC_module%%=() {  _module_raw \"$@\" 2>&1\nBASH_FUNC__module_raw%%=() {  unset _mlshdbg;\nBASH_FUNC_scl%%=() {  if [ \"$1\" = \"load\" -o \"$1\" = \"unload\" ]; then\nBASH_FUNC_switchml%%=() {  typeset swfound=1;\nBASH_FUNC_which%%=() {  ( alias;\n case \"$-\" in \n_CE_CONDA=\n_CE_M=\nCOLORTERM=truecolor\nCONDA_DEFAULT_ENV=base\nCONDA_EXE=/home/linux/mambaforge3/bin/conda\nCONDA_PREFIX=/home/linux/mambaforge3\nCONDA_PROMPT_MODIFIER=(base) \nCONDA_PYTHON_EXE=/home/linux/mambaforge3/bin/python\nCONDA_SHLVL=1\nDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus,guid=b9170d3e51c4932871ccb5b165f90538\nDBUS_STARTER_ADDRESS=unix:path=/run/user/1000/bus,guid=b9170d3e51c4932871ccb5b165f90538\nDBUS_STARTER_BUS_TYPE=session\nDESKTOP_SESSION=gnome\nDISPLAY=:0\n do\n done;\n echo \"Cannot switch to Modules $swname version, command not found\";\n echo \"Switching to Modules $swname version\";\n else\n else\n else\n else\n else\n esac;\n eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot \"$@\"\n eval `eval ${_mlre} /usr/bin/tclsh /usr/share/Modules/libexec/modulecmd.tcl bash '\"$@\"'`;\n eval \"module $@\";\n eval `/usr/bin/tclsh /usr/share/Modules/libexec/modulecmd.tcl bash \"$@\"`;\n export MODULES_USE_COMPAT_VERSION;\n fi\n fi\n fi;\n fi;\n fi;\n fi;\n fi;\n fi;\n fi;\n fi;\n fi;\n fi;\n for _mlv in ${MODULES_RUN_QUARANTINE:-};\nGDM_LANG=en_US.UTF-8\nGDMSESSION=gnome\nGNOME_DESKTOP_SESSION_ID=this-is-deprecated\nGNOME_TERMINAL_SCREEN=/org/gnome/Terminal/screen/9297cb69_58ad_48dd_b3fc_f911f1b8b852\nGNOME_TERMINAL_SERVICE=:1.168\nHISTCONTROL=ignoredups\nHISTSIZE=1000\nHOME=/home/linux\nHOSTNAME=localhost.localdomain\n if [ \"${_mlv}\" = \"${_mlv##*[!A-Za-z0-9_]}\" -a \"${_mlv}\" = \"${_mlv#[0-9]}\" ]; then\n if [ \"${MODULES_SILENT_SHELL_DEBUG:-0}\" = '1' ]; then\n if [ \"${MODULES_USE_COMPAT_VERSION:-0}\" = '1' ]; then\n if [ $swfound -eq 0 ]; then\n if [ -e /usr/share/Modules/libexec/modulecmd-compat ]; then\n if [ -e /usr/share/Modules/libexec/modulecmd.tcl ]; then\n if [ -n \"${IFS+x}\" ]; then\n if [ -n \"${_mlIFS+x}\" ]; then\n if [ -n \"${_mlre:-}\" ]; then\n if [ -n \"${_mlshdbg:-}\" ]; then\n if [ -n \"`eval 'echo ${'$_mlv'+x}'`\" ]; then\n IFS=' ';\n IFS=$_mlIFS;\nINVOCATION_ID=4d9e0579449d4c59b27e0d7163d31e8a\nJOURNAL_STREAM=9:46544\nLANG=en_US.UTF-8\nLC_MEASUREMENT=en_US.UTF-8\nLC_MONETARY=en_US.UTF-8\nLC_NUMERIC=en_US.UTF-8\nLC_PAPER=en_US.UTF-8\nLC_TIME=en_US.UTF-8\nLD_LIBRARY_PATH=/Home/SACOS/GMP/gmp/lib:\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nLOADEDMODULES=\nLOGNAME=linux\nLS_COLORS=rs=0:di=38;5;33:ln=38;5;51:mh=00:pi=40;38;5;11:so=38;5;13:do=38;5;5:bd=48;5;232;38;5;11:cd=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=01;05;37;41:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;40:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.zst=38;5;9:*.tzst=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.wim=38;5;9:*.swm=38;5;9:*.dwm=38;5;9:*.esd=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.mjpg=38;5;13:*.mjpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.m4a=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.oga=38;5;45:*.opus=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:\nMAIL=/var/spool/mail/linux\nMANAGERPID=2280\nMANPATH=:\n _mlIFS=$IFS;\n _mlre=\"${_mlre:-}${_mlv}='`eval 'echo ${'$_mlrv':-}'`' \";\n _mlre=\"${_mlre:-}${_mlv}_modquar='`eval 'echo ${'$_mlv'}'`' \";\n _mlrv=\"MODULES_RUNENV_${_mlv}\";\n _mlshdbg=''\n _mlshdbg='v'\n _mlshdbg='vx'\n _mlshdbg='x'\n _mlstatus=$?;\nMODULEPATH=/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles\nMODULEPATH_modshare=/usr/share/modulefiles:1:/usr/share/Modules/modulefiles:1:/etc/modulefiles:1\nMODULES_CMD=/usr/share/Modules/libexec/modulecmd.tcl\nMODULESHOME=/usr/share/Modules\nMODULES_RUN_QUARANTINE=LD_LIBRARY_PATH LD_PRELOAD\n MODULES_USE_COMPAT_VERSION=1;\nPATH=/home/linux/projects/moose:/usr/share/Modules/bin:/home/linux/projects/moose:/home/linux/mambaforge3/bin:/home/linux/mambaforge3/condabin:/home/linux/.local/bin:/home/linux/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin\nPWD=/home/linux/cardinal/contrib/moose/scripts\nQT_IM_MODULE=ibus\n return $_mlstatus\n return 1;\nSESSION_MANAGER=local/unix:@/tmp/.ICE-unix/2328,unix/unix:/tmp/.ICE-unix/2328\n set -$_mlshdbg;\n set +v;\n set +vx;\n set +x;\nSHELL=/bin/bash\nSHLVL=3\n source /usr/share/Modules/init/bash;\nSSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass\nSSH_AUTH_SOCK=/run/user/1000/keyring/ssh\nTC_LIB_DIR=/usr/lib64/tc\nTERM=xterm-256color\n typeset swfound=0;\n typeset swfound=0;\n typeset swname='compatibility';\n typeset swname='main';\n unset IFS;\n unset _mlre _mlIFS;\n unset _mlre _mlv _mlrv _mlIFS;\n unset _mlshdbg;\n unset MODULES_USE_COMPAT_VERSION;\nUSER=linux\nUSERNAME=linux\n_=/usr/bin/env\n /usr/bin/scl \"$@\";\n *v*)\nVTE_VERSION=5204\n *v*x*)\nWAYLAND_DISPLAY=wayland-0\nwhich_declare=declare -f\n *x*)\nXAUTHORITY=/run/user/1000/.mutter-Xwaylandauth.H77VK2\nXDG_CURRENT_DESKTOP=GNOME\nXDG_DATA_DIRS=/home/linux/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share\nXDG_MENU_PREFIX=gnome-\nXDG_RUNTIME_DIR=/run/user/1000\nXDG_SEAT=seat0\nXDG_SESSION_DESKTOP=gnome\nXDG_SESSION_ID=2\nXDG_SESSION_TYPE=wayland\nXDG_VTNR=2\nXMODIFIERS=@im=ibus",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8867292",
                          "updatedAt": "2024-03-21T15:04:33Z",
                          "publishedAt": "2024-03-21T15:04:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ethan-xj"
                  },
                  "bodyText": "@milljm I still get truck in this problem....help\nHow can I make MPI locate my new version of g++?",
                  "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8878772",
                  "updatedAt": "2024-03-22T14:17:39Z",
                  "publishedAt": "2024-03-22T14:17:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what machine are you on?\ntoday is Friday off at INL btw",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879437",
                          "updatedAt": "2024-03-22T15:12:55Z",
                          "publishedAt": "2024-03-22T15:12:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "On a personal computer's virtual machine running CentOS 8.\nAh, that's too bad. I might be stuck with this issue for a few days...",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879471",
                          "updatedAt": "2024-03-22T15:16:21Z",
                          "publishedAt": "2024-03-22T15:16:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok if you are on your personal computer dont use your compilers (unless you want to keep debugging this, but I imagine you got stuff to run)\nYou could be done in like an hour if you go the conda route\nhttps://mooseframework.inl.gov/getting_started/installation/conda.html for the whole MOOSE stack then I suppose Cardinal can be installed after?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879492",
                          "updatedAt": "2024-03-22T15:18:24Z",
                          "publishedAt": "2024-03-22T15:17:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "But if I use the conda environment, does that mean I won't be able to use NekRS features?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879528",
                          "updatedAt": "2024-03-22T15:22:10Z",
                          "publishedAt": "2024-03-22T15:22:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "have not tried. Are you using the GPU for Nek ? what is the hold up?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879670",
                          "updatedAt": "2024-03-22T15:32:38Z",
                          "publishedAt": "2024-03-22T15:32:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "No, I actually don't understand Cardinal very well. Perhaps I misunderstood? After installing Cardinal in a conda environment, can I still use all the functionalities of Cardinal, such as modeling and coupled simulations?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879781",
                          "updatedAt": "2024-03-22T15:40:33Z",
                          "publishedAt": "2024-03-22T15:40:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ah yeah no NekRS it says here\nhttps://cardinal.cels.anl.gov/with_conda.html",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879876",
                          "updatedAt": "2024-03-22T15:47:40Z",
                          "publishedAt": "2024-03-22T15:47:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "are you going to be running NekRS simulations though? On a laptop in a VM it seems uncommon",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8879880",
                          "updatedAt": "2024-03-22T15:48:03Z",
                          "publishedAt": "2024-03-22T15:48:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "It seems like that's the case indeed. Looks like I should install it on the server instead...\nBtw, if I install via conda, does it mean I can only perform coupled simulations between OpenMC and MOOSE?",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8880052",
                          "updatedAt": "2024-03-22T16:01:16Z",
                          "publishedAt": "2024-03-22T16:01:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes",
                          "url": "https://github.com/idaholab/moose/discussions/27161#discussioncomment-8880082",
                          "updatedAt": "2024-03-22T16:04:20Z",
                          "publishedAt": "2024-03-22T16:03:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to implement 3D interpolation in ADMaterial in a fast way?",
          "author": {
            "login": "SomnusYu"
          },
          "bodyText": "Hi all,\nI would like to implement a 3D interpolation in ADMaterial. Now I have finished it, but it takes too long time to search and calculate since it has too much data. Is there any faster or better way to do this? Here is a part of my code:\n/*\n  input:\n    pk - pressure\n    gabs -  Absolute value of total centered mass flux.\n    quale - Equilibrium quality\n  output:\n    QCHF- chf value\n*/\n\n  // define the index\n  int i = 0;\n  int j = 0;\n  int k = 0;\n\n  std::vector<ADReal> p_look = {\n                                100.0,   300.0,   500.0,   1000.0,   2000.0,\n                                3000.0,  5000.0,  7000.0,  10000.0,  12000.0,\n                                14000.0, 16000.0, 18000.0, 20000.0,  21000.0\n                               };\n\n  std::vector<ADReal> G_look = {\n                                0.0,     50.0,     100.0,     300.0,     500.0,\n                                750.0,   1000.0,   1500.0,    2000.0,    2500.0,\n                                3000.0,  3500.0,   4000.0,    4500.0,    5000.0,\n                                5500.0,  6000.0,   6500.0,    7000.0,    7500.0,\n                                8000.0\n                               };\n\n  std::vector<ADReal> Xe_look = {\n                                -0.50,  -0.40,  -0.30,  -0.20,  -0.15,\n                                -0.10,  -0.05,   0.00,   0.05,   0.10,\n                                 0.15,   0.20,   0.25,   0.30,   0.35,\n                                 0.40,   0.45,   0.50,   0.60,   0.70,\n                                 0.80,   0.90,   1.0\n                                };\n  \n  // Find the matrix indexes for interpolation\n  for (int l=0; l<15; l++) //pressure\n  {\n    if (pk > p_look[l])\n      i = i+1;\n  }\n  for (int m=0; m<21;m++) //mass flow rate\n  {\n    if (gabs > G_look[m])\n      j = j+1;\n  }\n  for (int n=0; n<23; n++) //quality\n  {\n    if (quale > Xe_look[n])\n     k = k+1;\n  }\n\n  // Determine the rationality of the pressure, mass flow rate and quality.\n  if (i == 0)  // EXTRAPOLATION AT THE MINMUM BOUNDARY OF PRESSURE\n  {\n    i = i+1;     \n  }\n  if (i == 15) // EXTRAPOLATION AT THE MAXMUM BOUNDARY OF PRESSURE\n  {\n    i = i-1;    \n  }\n\n  if (j == 0)\n  {\n    mooseError(\"Error! Negative mass flow rate in look-up table CHF model!\");\n  }\n  if (j == 21) // EXTRAPOLATION AT THE MAXMUM BOUNDARY OF MASS FLOW RATE\n  {\n    j = j-1; \n  }\n    \n  if (k == 1) // EXTRAPOLATION AT THE MINMUM BOUNDARY OF QUALITY\n  {\n    k = k+1;     \n  }\n  if (k == 23)\n  {\n    mooseError(\"Error! Too high quality in look-up table CHF model!\");\n  }\n\n  // CHF look-up table data\n  std::vector<std::vector<std::vector<ADReal>>> QCHF_data = \n  {\n    // For p = 100.0\n    {\n        {8111,  7252,  6302,  4802,  4086,  3057,  1990,  1142,  637,   415,   284,   223,  188,   165,   152,   142,   133,   123,   114,   110,   96,    55,    0.0}, // For G = 0.0\n        {8317,  7271,  6326,  5035,  4236,  3453,  2420,  1570,  1011,  784,   641,   587,  553,   531,   475,   443,   419,   387,   347,   277,   239,   204,   0.0}, // For G = 50.0\n        {8390,  7295,  6371,  5322,  4586,  3640,  2942,  2103,  1558,  1275,  1013,  885,  847,   811,   789,   758,   745,   715,   700,   600,   459,   359,   0.0}, // For G =100.0\n        {10698, 9288,  7795,  6020,  5009,  3865,  3196,  2479,  1961,  1707,  1317,  1177, 1172,  1159,  1150,  1100,  1085,  1041,  1031,  675,   517,   366,   0.0}, // For G = 300.0\n        {12882, 10946, 9224,  6791,  5348,  3938,  3369,  2685,  2087,  1808,  1412,  1347, 1311,  1303,  1282,  1260,  1212,  1193,  1071,  605,   450,   295,   0.0}, // For G = 500.0\n        {16982, 14405, 11641, 7496,  5662,  4234,  3471,  2780,  2229,  1970,  1649,  1606, 1591,  1563,  1510,  1495,  1400,  1280,  595,   415,   243,   206,   0.0}, // For G = 750.0\n        {19441, 16278, 13255, 8232,  5971,  4495,  3533,  3012,  2653,  2349,  2070,  2000, 1980,  1930,  1715,  1550,  1359,  1165,  503,   322,   172,   105,   0.0}, // For G = 1000.0\n        {22781, 19225, 15465, 9100,  6603,  5358,  3741,  3524,  3166,  2917,  2635,  2572, 2467,  2378,  1908,  1350,  1005,  815,   302,   210,   126,   51,    0.0}, // For G = 1500.0\n        {25268, 21321, 17143, 9141,  7059,  6036,  4074,  3855,  3556,  3402,  3167,  2986, 2720,  2549,  1696,  1105,  805,   595,   247,   105,   87,    39,    0.0}, // For G = 2000.0\n        {28026, 23599, 18346, 9503,  7506,  6516,  4502,  4047,  3852,  3599,  3228, 3019,  2676,  2458,  1148,  956,   708,   485,   290,   120,   46,    22,    0.0}, // For G = 2500.0\n        {30294, 25465, 19383, 9779,  8063,  7088,  4826,  4182,  3976,  3389,  2968, 2706,  2369,  1829,  940,   846,   665,   532,   302,   159,   55,    20,    0.0}, // For G = 3000.0\n        {32227, 27043, 21068, 10156, 8518,  7302,  5113,  4384,  4106,  3196,  2769, 2557,  2311,  1729,  1158,  891,   817,   670,   402,   210,   75,    28,    0.0}, // For G = 3500.0\n        {33928, 28471, 22722, 10512, 8728,  7528,  5582,  4709,  4228,  3119,  2736, 2504,  2282,  1850,  1470,  1160,  1030,  823,   475,   248,   96,    38,    0.0}, // For G = 4000.0\n        {35406, 29774, 23890, 10945, 9088,  8067,  6267,  5013,  4272,  3287,  2769, 2541,  2304,  1972,  1718,  1405,  1185,  969,   585,   289,   129,   61,    0.0}, // For G = 4500.0\n        {36808, 30988, 24979, 11185, 9592,  8576,  6748,  5113,  4342,  3410,  2890, 2629,  2355,  2066,  1779,  1498,  1247,  1030,  647,   347,   167,   81,    0.0}, // For G = 5000.0\n        {38232, 32141, 25791, 11929, 10084, 8940,  6867,  5175,  4389,  3465,  2954, 2680,  2406,  2128,  1848,  1595,  1334,  1118,  729,   409,   206,   101,   0.0}, // For G = 5500.0\n        {39525, 33222, 26637, 13026, 10396, 9347,  6919,  5241,  4423,  3580,  2921, 2681,  2447,  2170,  1908,  1651,  1418,  1204,  807,   468,   244,   121,   0.0}, // For G = 6000.0\n        {40727, 34244, 27480, 14371, 10748, 9701,  6995,  5295,  4491,  3620,  2918, 2694,  2477,  2209,  1965,  1719,  1493,  1281,  878,   523,   282,   142,   0.0}, // For G = 6500.0\n        {41950, 35224, 28165, 15045, 11091, 10522, 7062,  5370,  4513,  3668,  2958, 2724,  2501,  2247,  2013,  1780,  1559,  1349,  943,   576,   319,   162,   0.0}, // For G = 7000.0\n        {43448, 36075, 28604, 15822, 11538, 10726, 7087,  5381,  4585,  3699,  2996, 2751,  2526,  2285,  2060,  1838,  1622,  1414,  1000,  615,   347,   180,   0.0}, // For G = 7500.0\n        {44338, 36803, 29089, 16599, 12085, 10900, 7313,  5392,  4689,  3780,  3031, 2778,  2553,  2320,  2103,  1890,  1679,  1473,  1054,  651,   371,   196,   0.0}  // For G = 8000.0\n    },\n    // For p = 300.0\n    {\n        {8027,  7043,  6206,  4761,  4106,  3131,  2483,  1374,  883,   606,   420,  313,  248, 205,   180,   165,   148,   141,   135,   131,   125,   67,    0.0},  // For G = 0.0\n        {8153,  7058,  6287,  5304,  4564,  3729,  2847,  2071,  1587,  1315,  1052, 871,  709, 599,   516,   499,   457,   389,   372,   362,   274,   207,   0.0},  // For G = 50.0\n        {8418,  7315,  6499,  5509,  4883,  4013,  3238,  2638,  2150,  1869,  1528, 1373, 1262, 1183,  1127,  1065,  1057,  1033,  902,   691,   502,   394,   0.0}, // For G = 100.0\n        {10397, 9094,  7805,  6085,  5320,  4107,  3429,  3011,  2617,  2263,  1862, 1657, 1614, 1576,  1513,  1480,  1446,  1403,  1193,  722,   572,   419,   0.0}, // For G = 300.0\n        {12787, 10894, 9193,  6962,  5664,  4134,  3563,  3285,  2821,  2405,  2001, 1832, 1688, 1663,  1610,  1610,  1520,  1504,  1112,  616,   452,   297,   0.0}, // For G = 500.0\n        {16084, 13658, 11132, 7493,  5853,  4282,  3743,  3512,  2987,  2538,  2062, 1868, 1698, 1676,  1636,  1598,  1447,  1300,  656,   440,   253,   207,   0.0}, // For G = 750.0\n        {17866, 15378, 12753, 8194,  6038,  4572,  3898,  3610,  3224,  2791,  2450, 2230, 2070, 1990,  1805,  1570,  1369,  1173,  523,   334,   184,   112,   0.0}, // For G = 1000.0\n        {21559, 18208, 14718, 9252,  7091,  6091,  4818,  4243,  3557,  3134,  2981, 2720, 2658, 2491,  2042,  1365,  1016,  813,   308,   210,   130,   57,    0.0}, // For G = 1500.0\n        {23993, 20257, 16367, 10134, 8179,  6790,  5171,  4462,  3759,  3490,  3410, 3232, 2894, 2672,  1803,  1108,  822,   599,   254,   118,   88,    41,    0.0}, // For G = 2000.0\n        {26215, 22280, 18013, 10477, 8534,  7134,  5245,  4519,  3951,  3681,  3444, 3248, 2846, 2521,  1168,  981,   732,   488,   292,   132,   47,    23,    0.0}, // For G = 2500.0\n        {27747, 23975, 19028, 10840, 8691,  7393,  5326,  4551,  4081,  3502,  3082, 2977, 2523, 1868,  945,   852,   681,   534,   304,   161,   56,    21,    0.0}, // For G = 3000.0\n        {29254, 25440, 20427, 10948, 8793,  7585,  5600,  4681,  4195,  3283,  2967, 2695, 2389, 1788,  1170,  895,   820,   675,   410,   226,   76,    29,    0.0}, // For G = 3500.0\n        {30763, 26771, 21520, 11006, 8997,  8017,  6253,  5184,  4271,  3344,  2951, 2648, 2383, 1960,  1500,  1170,  1050,  850,   499,   264,   97,    39,    0.0}, // For G = 4000.0\n        {32150, 27994, 22599, 11137, 9388,  8517,  6725,  5594,  4329,  3504,  2981, 2677, 2408, 2094,  1746,  1423,  1228,  998,   600,   304,   126,   59,    0.0}, // For G = 4500.0\n        {33465, 29133, 23700, 11600, 9705,  8845,  7103,  6052,  4369,  3655,  3048, 2739, 2449, 2139,  1843,  1542,  1289,  1061,  665,   358,   165,   80,    0.0}, // For G = 5000.0\n        {34919, 30223, 24325, 12512, 10147, 9115,  7281,  6122,  4427,  3720,  3070, 2776, 2501, 2200,  1881,  1636,  1377,  1153,  748,   418,   206,   100,   0.0}, // For G = 5500.0\n        {36122, 31241, 25169, 13522, 10870, 9576,  7398,  6323,  4481,  3685,  3104, 2773, 2543, 2247,  1942,  1708,  1462,  1241,  828,   476,   244,   121,   0.0}, // For G = 6000.0\n        {37231, 32198, 25960, 14708, 11330, 10024, 7446,  6440,  4571,  3705,  3123, 2783, 2578, 2288,  2004,  1783,  1543,  1320,  902,   532,   268,   142,   0.0}, // For G = 6500.0\n        {38099, 33093, 26558, 15513, 11759, 10532, 7599,  6469,  4650,  3772,  3155, 2812, 2605, 2327,  2037,  1844,  1611,  1391,  970,   586,   303,   150,   0.0}, // For G = 7000.0\n        {38989, 34027, 27283, 16123, 12062, 10765, 7689,  6500,  4702,  3784,  3221, 2839, 2625, 2361,  2095,  1898,  1673,  1456,  1029,  627,   331,   166,   0.0}, // For G = 7500.0\n        {39744, 34510, 27900, 16757, 12891, 11128, 7784,  6544,  4760,  3892,  3228, 2867, 2649, 2395,  2126,  1946,  1728,  1514,  1083,  664,   356,   181,   0.0}  // For G = 8000.0\n    },\n\u00b7\n\u00b7 \uff08ellipsis\uff09\n\u00b7\n\u00b7\n    // For p = 21000.0\n    {\n        {1584, 1462, 1324, 1222, 1184, 1147, 1084, 1008, 939,  904,  821,  733,  644,  570,  501,  440,  415,  366,  309,  194,  84,   45,   0.0}, // For G = 0.0\n        {1587, 1456, 1301, 1194, 1164, 1119, 1062, 999,  938,  900,  823,  736,  685,  650,  578,  501,  457,  411,  303,  197,  99,   53,   0.0}, // For G = 50.0\n        {1589, 1439, 1270, 1177, 1124, 1111, 1060, 992,  948,  894,  826,  739,  697,  668,  599,  527,  469,  417,  300,  198,  102,  55,   0.0}, // For G = 100.0\n        {1601, 1314, 1133, 1114, 1102, 1069, 1037, 959,  925,  857,  801,  730,  700,  669,  600,  510,  473,  399,  278,  169,  97,   56,   0.0}, // For G = 300.0\n        {1617, 1307, 990,  981,  959,  925,  878,  828,  789,  727,  661,  608,  587,  556,  524,  459,  400,  327,  180,  142,  70,   50,   0.0}, // For G = 500.0\n        {1643, 1411, 1153, 1045, 1007, 949,  900,  799,  712,  652,  616,  553,  530,  515,  479,  418,  324,  236,  115,  97,   57,   33,   0.0}, // For G = 750.0\n        {1787, 1566, 1328, 1211, 1130, 1045, 992,  908,  807,  765,  708,  628,  583,  533,  470,  375,  280,  209,  111,  69,   42,   21,   0.0}, // For G = 1000.0\n        {2261, 1991, 1764, 1570, 1422, 1344, 1228, 1115, 998,  943,  894,  800,  758,  675,  545,  404,  251,  209,  117,  71,   36,   17,   0.0}, // For G = 1500.0\n        {2689, 2248, 1983, 1711, 1594, 1490, 1395, 1327, 1225, 1193, 1101, 971,  874,  812,  741,  526,  343,  230,  150,  88,   35,   15,   0.0}, // For G = 2000.0\n        {2997, 2554, 2223, 1903, 1733, 1609, 1519, 1426, 1314, 1260, 1183, 1109, 988,  900,  816,  623,  445,  349,  214,  102,  36,   15,   0.0}, // For G = 2500.0\n        {3238, 2847, 2465, 2068, 1880, 1706, 1644, 1547, 1457, 1302, 1193, 1170, 1053, 958,  884,  681,  535,  425,  286,  119,  39,   15,   0.0}, // For G = 3000.0\n        {3393, 2953, 2590, 2193, 2012, 1859, 1772, 1672, 1543, 1397, 1284, 1215, 1130, 993,  933,  773,  601,  516,  343,  138,  42,   16,   0.0}, // For G = 3500.0\n        {3482, 3160, 2776, 2356, 2159, 2004, 1924, 1794, 1654, 1541, 1428, 1347, 1256, 1155, 1027, 891,  726,  627,  389,  155,  45,   17,   0.0}, // For G = 4000.0\n        {3532, 3270, 2896, 2517, 2289, 2142, 2028, 1906, 1752, 1624, 1544, 1500, 1348, 1274, 1100, 973,  809,  674,  421,  167,  49,   18,   0.0}, // For G = 4500.0\n        {3660, 3436, 3101, 2646, 2456, 2256, 2172, 2016, 1834, 1742, 1660, 1596, 1457, 1350, 1160, 1063, 818,  711,  451,  181,  54,   21,   0.0}, // For G = 5000.0\n        {3803, 3603, 3229, 2831, 2608, 2447, 2288, 2165, 1973, 1880, 1808, 1726, 1603, 1482, 1300, 1184, 939,  793,  492,  199,  61,   24,   0.0}, // For G = 5500.0\n        {3955, 3698, 3320, 2917, 2733, 2544, 2379, 2256, 2073, 1965, 1884, 1823, 1695, 1572, 1379, 1277, 1038, 867,  544,  221,  70,   28,   0.0}, // For G = 6000.0\n        {4116, 3784, 3378, 2975, 2801, 2599, 2485, 2355, 2203, 2056, 1990, 1903, 1780, 1652, 1478, 1334, 1100, 924,  579,  239,  78,   32,   0.0}, // For G = 6500.0\n        {4275, 3839, 3393, 2985, 2850, 2658, 2529, 2447, 2294, 2117, 2050, 1971, 1835, 1693, 1523, 1373, 1163, 969,  601,  254,  85,   35,   0.0}, // For G = 7000.0\n        {4471, 3887, 3394, 3000, 2880, 2700, 2589, 2496, 2361, 2216, 2129, 2033, 1872, 1737, 1566, 1403, 1214, 1003, 640,  272,  91,   39,   0.0}, // For G = 7500.0\n        {4689, 3970, 3405, 3030, 2900, 2740, 2598, 2498, 2410, 2287, 2170, 2067, 1902, 1790, 1622, 1439, 1260, 1026, 667,  290,  96,   42,   0.0}  // For G = 8000.0\n    } \n  };\n\n  // calculate the needed chf value \n  // The process of interpolation\n  // If we'd like to implement the pressure interpolation, we should calculate Q2 and Q1 firstly\n  //                                                       , which means mass flow rate and quality should be interpolated firstly.\n  ADReal Q1;      // Q1, Q2 represent critical heat flux at p_look[i-1] and p_look[i], respectively.\n  ADReal Q2;\n  ADReal QCHF;    // The output critical heat flux.\n  // mass flow rate and quality interpolation at p = p_look[i-1] -----> to calculate Q1\n  ADReal Q11, Q12;    // Q11, Q12 represent critical heat flux at G_look[j-1] and G_look[j], respectively.\n  Q11 = (quale - Xe_look[k-1])/(Xe_look[k]-Xe_look[k-1]) * (QCHF_data[i-1][j-1][k] - QCHF_data[i-1][j-1][k-1]) + QCHF_data[i-1][j-1][k-1];\n  Q12 = (quale - Xe_look[k-1])/(Xe_look[k]-Xe_look[k-1]) * (QCHF_data[i-1][j][k] - QCHF_data[i-1][j][k-1]) + QCHF_data[i-1][j][k-1];\n  Q1 = (gabs - G_look[j-1])/(G_look[j] - G_look[j-1]) * (Q12 - Q11) + Q11;\n  // mass flow rate and quality interpolation at p = p_look[i] -----> to calculate Q2\n  ADReal Q21, Q22;    // Q21, Q22 represent critical heat flux at G_look[j-1] and G_look[j], respectively.\n  Q21 = (quale - Xe_look[k-1])/(Xe_look[k]-Xe_look[k-1]) * (QCHF_data[i][j-1][k] - QCHF_data[i][j-1][k-1]) + QCHF_data[i][j-1][k-1];\n  Q22 = (quale - Xe_look[k-1])/(Xe_look[k]-Xe_look[k-1]) * (QCHF_data[i][j][k] - QCHF_data[i][j][k-1]) + QCHF_data[i][j][k-1];\n  Q2 = (gabs - G_look[j-1])/(G_look[j] - G_look[j-1]) * (Q22 - Q21) + Q21;\n  // Pressure interpolation\n  QCHF = (pk - p_look[i-1])/(p_look[i]-p_look[i-1]) * (Q2 - Q1) + Q1;\n\n\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/27192",
          "updatedAt": "2024-03-27T01:29:31Z",
          "publishedAt": "2024-03-26T11:58:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is a linear interpolation utility you can use\nfor 2D ( (a, b) -> c )\nhttps://github.com/idaholab/moose/blob/next/framework/src/utils/LinearInterpolation.C\nfor multiD\nhttps://github.com/idaholab/moose/blob/next/framework/src/utils/MultiDimensionalInterpolation.C\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8915929",
                  "updatedAt": "2024-03-26T14:14:06Z",
                  "publishedAt": "2024-03-26T14:14:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks! By the way, is this way faster than mine?",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8916043",
                          "updatedAt": "2024-03-26T14:22:03Z",
                          "publishedAt": "2024-03-26T14:22:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont know. The grid is indexed regularly right?\nThere are more continuous way than linear interpolations, and there are faster inverse lookups (you know chf and some other quantity, find the inputs that lead to those).\nFor your code I would double check that you need everything AD.",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8916084",
                          "updatedAt": "2024-03-26T14:25:08Z",
                          "publishedAt": "2024-03-26T14:25:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "The grid is indexed regularly right?\n\nYes.\n\nThere are more continuous way than linear interpolations, and there are faster inverse lookups (you know chf and some other quantity, find the inputs that lead to those).\n\nI think I really need a faster way, there is so much data on QCHF that causes too much time in searching for the position.",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8916217",
                          "updatedAt": "2024-03-26T14:33:57Z",
                          "publishedAt": "2024-03-26T14:33:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think I really need a faster way, there is so much data on QCHF that causes too much time in searching for the position.\n\nDid you use a profiler to determine that?\nI dont think the code is optimal right now.\n  std::vector<std::vector<std::vector<ADReal>>> QCHF_data = \n\nthis is clearly not an AD vector, it s just single numbers",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8916708",
                          "updatedAt": "2024-03-26T15:07:00Z",
                          "publishedAt": "2024-03-26T15:07:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Did you use a profiler to determine that?\n\nI just ran the cases and found that it is too slow.\n\nI dont think the code is optimal right now.\n\nYes, I also think so. But I do not have any idea how to improve it.\n\nthis is clearly not an AD vector, it s just single numbers\n\nYes, so should I use Real instead of ADReal?",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8916832",
                          "updatedAt": "2024-03-26T15:14:42Z",
                          "publishedAt": "2024-03-26T15:14:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yes, everywhere it makes sense. Simple coefficients are not ADReal. The value of a variable or the output values are ADreal",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8917837",
                          "updatedAt": "2024-03-26T17:09:59Z",
                          "publishedAt": "2024-03-26T16:29:00Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks a lot! It works very well.",
                          "url": "https://github.com/idaholab/moose/discussions/27192#discussioncomment-8922208",
                          "updatedAt": "2024-03-27T01:29:00Z",
                          "publishedAt": "2024-03-27T01:29:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Negative Nodal Areas",
          "author": {
            "login": "maxposchmann"
          },
          "bodyText": "I've been using the Contact action, which generates an auxvariable nodal_area calculated by the NodalArea userobject. My system is 3D, my mesh uses HEX20 elements, and I was hoping to have everything second order.\nLooking at my contact pressures, I noticed that they alternated large positive and negative values from one node to the next. Going a bit further, I noticed the same thing was happening with nodal_area (though with signs reversed). I tried going back to a simple generated mesh with just nodal_area calculated and the problem persists for second order elements in 3D.\n\nI'm not actually sure this is incorrect, but it feels wrong in my bones. Negative areas aren't physical. However, the sum of the nodal_area values is correct (checked with postprocessor). On the other hand, there are many (infinite?) possible weightings of how the sum is done that would give the correct total area and not have any negative nodal_area values.\nI tried messing around with quadrature options and the results are the same (obviously the integral over a constant converges quickly).\nAny thoughts? Should I try to stop thinking about this? Would an alternative weighting of the area sum be more realistic?",
          "url": "https://github.com/idaholab/moose/discussions/27149",
          "updatedAt": "2024-03-26T14:29:55Z",
          "publishedAt": "2024-03-20T10:42:02Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "maxposchmann"
                  },
                  "bodyText": "Here's an input for testing.\n[Mesh]\n  [./square]\n    type = GeneratedMeshGenerator\n    nx = 2\n    ny = 2\n    nz = 2\n    dim = 3\n    elem_type = HEX20\n  [../]\n[]\n\n[Variables]\n  [./dummy]\n  [../]\n[]\n\n[AuxVariables]\n  [./nodal_area]\n    order = SECOND\n    family = LAGRANGE\n  [../]\n[]\n\n[Kernels]\n  [./dummy]\n    type = Diffusion\n    variable = dummy\n  [../]\n[]\n\n[UserObjects]\n  [./nodal_area]\n    type = NodalArea\n    variable = nodal_area\n    boundary = 1\n    execute_on = 'initial timestep_end'\n  [../]\n[]\n\n[BCs]\n  [./dummy]\n    type = DirichletBC\n    variable = dummy\n    boundary = 1\n    value = 100\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -ksp_gmres_restart'\n  petsc_options_value = 'jacobi   101'\n\n  line_search = 'none'\n\n  nl_abs_tol = 1e-11\n  nl_rel_tol = 1e-10\n\n  l_max_its = 20\n  [Quadrature]\n    order = SECOND\n    side_order = SECOND\n  []\n[]\n\n[Postprocessors]\n  [face_area]\n    type = NodalSum\n    variable = nodal_area\n    boundary = 1\n  []\n[]\n\n[Outputs]\n  exodus = true\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8851195",
                  "updatedAt": "2024-03-20T10:43:49Z",
                  "publishedAt": "2024-03-20T10:43:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@recuero @dewenyushu @gambka",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8856034",
                          "updatedAt": "2024-03-20T17:17:44Z",
                          "publishedAt": "2024-03-20T17:17:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "maxposchmann"
                  },
                  "bodyText": "I don't know if this answers my questions or not, but I tried messing around with the nodal_area sum in the userobject and find that the product nodal_area * contact_pressure comes out the same. Is contact_pressure just for show?",
                  "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8865451",
                  "updatedAt": "2024-03-21T12:42:00Z",
                  "publishedAt": "2024-03-21T12:42:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "maxposchmann"
                          },
                          "bodyText": "Continuing the conversation with my most esteemed colleague, I've noticed that the determination for contact release is:\nif (-contact_pressure >= _tension_release)\nwhich means that getting the contact_pressure (and therefore the nodal_area) right actually does matter.",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8868938",
                          "updatedAt": "2024-03-21T17:16:47Z",
                          "publishedAt": "2024-03-21T17:14:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dewenyushu"
                  },
                  "bodyText": "I am not sure what is happening for the nodal area values.\nBut, for reducing/eliminating unphysical oscillatory contact pressure values - did you try mortar contact? i.e., have formation = mortar in your contact action block",
                  "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8870252",
                  "updatedAt": "2024-03-21T19:36:00Z",
                  "publishedAt": "2024-03-21T19:35:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "maxposchmann"
                          },
                          "bodyText": "Thanks for the suggestion. I actually did try mortar at an earlier point, not in response to this particular issue. I found it very slow relative to a simple penalty/glued formulation so was hoping to get away from it. Maybe I made mistakes that made it slower than it ought to have been, but the real case is also just a large-ish 3D model.",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8870336",
                          "updatedAt": "2024-03-21T19:46:09Z",
                          "publishedAt": "2024-03-21T19:46:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxposchmann"
                          },
                          "bodyText": "Also I'd add that I am not convinced there is actually any problem with oscillations in the contact forces. The bigger issue is with release/delamination which is derived directly from the pressures as I noted above.",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8870407",
                          "updatedAt": "2024-03-21T19:54:38Z",
                          "publishedAt": "2024-03-21T19:54:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "gambka"
                          },
                          "bodyText": "When using Mortar have you removed [Quadrature] block from the Executioner?  Also, how did you determine the order and side_order used when playing with the Quadrature options in the node on face formulation? Have to tried increasing these? I haven't tried it on your problem but I've seen higher order quadrature help with oscillations in the past, particularly in the side_order.\n  [Quadrature]\n    order = THIRD\n    side_order = FIFTH\n  []\n\nPerhaps @bwspenc may have some ideas here.",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8910317",
                          "updatedAt": "2024-03-26T04:11:37Z",
                          "publishedAt": "2024-03-26T04:11:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxposchmann"
                          },
                          "bodyText": "I haven't tested mortar thoroughly at all, I can go back and try that in the real problem.\nAs I mentioned, the nodal_area calculation is the same for all order and side_order values I've tried. This should, and does, converge very quickly. I do not believe there is an issue with contact force oscillations, these are determined directly from penetration and don't reference the nodal_area.\nI think the release issue still remain no matter what is changed in the input and am therefore leaning towards opening an issue now that I have a better handle on what problems the negative nodal_area causes.",
                          "url": "https://github.com/idaholab/moose/discussions/27149#discussioncomment-8916147",
                          "updatedAt": "2024-03-26T14:29:56Z",
                          "publishedAt": "2024-03-26T14:29:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Seeking Community Input on Anisotropic Scattering Implementation",
          "author": {
            "login": "hityyds"
          },
          "bodyText": "Hello everyone,\nI'm currently grappling with an issue in my implementation of an anisotropic scattering feature based on the SN method. Despite numerous checks and improvements, my test results remain peculiar. The scalar flux distribution oscillates akin to trigonometric functions, with flux magnitudes roughly symmetric about zero. I suspect there might be an issue with my implementation approach.\n\nHere's a brief overview: I've discretized angular flux as a variable, with the program assigning an AnisoKernel for each angular flux during execution. Typically, in other implementations, anisotropic scattering involves converting angular flux to flux moments, multiplying with higher-order cross-sections to obtain higher-order scattering sources, and then converting these sources back to angular flux at discrete angles. However, in my MOOSE-based implementation, I've consolidated these steps into a single formula within AnisoKernel, directly calculating angular flux from angular flux.\nI've validated the calculation formulas through various means, so they seem sound. And, when I set all higher-order scattering to zero (meaning I'm using the code for anisotropic scattering but effectively performing calculations equivalent to isotropic scattering), the results behave quite reasonably.\n\nHowever, this is my first time using JFNK and assembling residuals to solve equations. I'm concerned that my approach with AnisoKernel might be incorrect. When utilizing solve_type=PJFNK, residual convergence slows down progressively and eventually halts without convergence. Only by resorting to solve_type=NEWTON did the program produce the peculiar results.\nCould you please advise if my implementation approach is erroneous? Should I separately declare variables to compute and store flux moments and higher-order scattering sources, then utilize these sources to obtain scattering source magnitudes at each discrete angle?\nI'm eager to hear your insights and suggestions.\nThank you,\nhityyds",
          "url": "https://github.com/idaholab/moose/discussions/27191",
          "updatedAt": "2024-03-26T03:52:05Z",
          "publishedAt": "2024-03-26T03:52:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Pencil electrode test benchmark for corrosion simulations",
          "author": {
            "login": "arjunvarmar"
          },
          "bodyText": "I am trying to run a simple Kim-Kim-Suzuki model that can be used to obtain the results of the pencil electrode test (see 1 and 2). I use the same input script as given in the examples of the phase field module in MOOSE and only modify the initial and boundary conditions to suit the benchmark problem. However, when I run the simulation, the interface is stationary even though it becomes diffuse and smooth in the first few steps. I am using non-dimensionalised values of parameters in the script. I am attaching my script (.i file) for reference. (The extension has been changed to .txt as .i is not accepted for upload.)\nIt would be a great help if someone who has already solved this benchmark could let me know what mistake I am making here.\ncorr_trial.txt",
          "url": "https://github.com/idaholab/moose/discussions/27190",
          "updatedAt": "2024-03-25T22:43:47Z",
          "publishedAt": "2024-03-25T22:43:17Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": []
          }
        }
      }
    ]
  }
}