{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNi0xN1QwODoxMTowMi0wNTowMM4AZ8X_"
    },
    "edges": [
      {
        "node": {
          "title": "Question about phase field fracture model for multi-phase material.",
          "author": {
            "login": "Yaode-Yin"
          },
          "bodyText": "Hello Moose expert:\nI try to use Moose to simulate the fracture of composite materials, and I find it convenient to introduce an additional order-parameter eta to distinguish the matrix and reinforcement of composites (eta = 0 for matrix, and eta = 1 for reinforcement). Let\u2019s start form the simplest example: one circle reinforcement material under transverse loading at plane-strain state, as the figure.\n\nI define base_name = A or base_name = B to distinguish the two materials in Moose material system, and then use SwitchingFunctionalMaterial with the order parameter eta to finish the composite material model. But errors occur when the input file is submitted.\n*** ERROR ***\nThe following error occurred in the object \"MOOSE Problem\", of type \"FEProblem\".\n\nThe following material properties are declared on block 0 by multiple materials:\n  Material Property             Material Objects\n  d2Fdcdstrain                  combined damage_stress_A damage_stress_B degradation fracture_driving_energy local_fracture_energy mech_strain switching \n  hist                          combined damage_stress_A damage_stress_B degradation fracture_driving_energy local_fracture_energy mech_strain switching\n\nHere are the codes for the Moose material system:\n[Materials]\n  [./pfbulkmat]\n    type = GenericConstantMaterial\n    prop_names = 'gc_prop l visco'\n    prop_values = '2.7 0.1 1e-32'\n  [../]\n  [./define_mobility]\n    type = ParsedMaterial\n    material_property_names = 'gc_prop visco'\n    property_name = L\n    expression = '1.0/(gc_prop * visco)'\n  [../]\n  [./define_kappa]\n    type = ParsedMaterial\n    material_property_names = 'gc_prop l'\n    property_name = kappa_op\n    expression = '3 * gc_prop * l /4'\n  [../]\n  [./elastic_tensor_A]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 100e3\n    poissons_ratio = 0.3\n     base_name = A\n  [../]\n  [./strain_A]\n    type = ComputeSmallStrain\n    base_name = A\n  [../]\n  [./elastic_tensor_B]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 10e3\n    poissons_ratio = 0.3\n     base_name = B\n  [../]\n    [./strain_B]\n    type = ComputeSmallStrain\n    base_name = B\n  [../]\n  [./damage_stress_A]\n    type = ComputeLinearElasticPFFractureStress\n    c = c\n    E_name = 'elastic_energy_A'\n    D_name = 'degradation'\n    F_name = 'local_fracture_energy'\n    decomposition_type = none\n    use_snes_vi_solver = true\n    base_name = A\n  [../]\n   [./damage_stress_B]\n    type = ComputeLinearElasticPFFractureStress\n    c = c\n    E_name = 'elastic_energy_B'\n    D_name = 'degradation'\n    F_name = 'local_fracture_energy'\n    decomposition_type = none\n    use_snes_vi_solver = true\n    base_name = B\n  [../]\n##########################################3\n  [./degradation]\n    type = DerivativeParsedMaterial\n    property_name = degradation\n    coupled_variables = 'c'\n    expression = '(1-c)^2*(1-eta)+eta'\n    constant_names       = 'eta'\n    constant_expressions = '0.0'\n    derivative_order = 2\n  [../]\n  [./local_fracture_energy]\n    type = DerivativeParsedMaterial\n    property_name = local_fracture_energy\n    coupled_variables = 'c'\n    material_property_names = 'gc_prop l'\n    expression = '3* c * gc_prop / 8 / l'\n    derivative_order = 2\n  [../]\n  [./fracture_driving_energy]\n    type = DerivativeSumMaterial\n    coupled_variables = c\n    sum_materials = 'elastic_energy_A elastic_energy_B  local_fracture_energy'\n    derivative_order = 2\n    property_name = F\n  [../]\n##############################################\n  [./switching]\n    type = SwitchingFunctionMaterial\n    eta = eta\n  [../]\n [./combined]\n    type = TwoPhaseStressMaterial\n    base_A = A\n    base_B =B\n  [../]\n[]\n\n\nUsing the Debug system to set show_material_props = true, I find ComputeLinearElasticPFFractureStress calculated2Fdcdstrainand hist without the mentioned base name A or B. That\u2019s why the calculation fails. How should I modify to correctly model the phase field fracture of a composite material?\nBest wishes!",
          "url": "https://github.com/idaholab/moose/discussions/27921",
          "updatedAt": "2024-06-19T00:57:35Z",
          "publishedAt": "2024-06-18T01:48:14Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt looks like a bug to me.\nFeel free to modify ComputeLinearElasticPFFractureStress and add _base_name in the declare class, like this:\ndeclareProperty<Real>(_base_name + \"hist\")\n\nWe ll wait until someone from the phase field community pitches in to be sure\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27921#discussioncomment-9800565",
                  "updatedAt": "2024-06-18T01:58:27Z",
                  "publishedAt": "2024-06-18T01:58:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "Thanks for your reply. I looked at the source code of ComputeLinearElasticPFFractureStress and find that d2Fdcdstrain is probably wrong. It should be d2Edcdstrain , where E stands for the elastic energy.\n\nI'm still checking on the hist issue.",
                          "url": "https://github.com/idaholab/moose/discussions/27921#discussioncomment-9800815",
                          "updatedAt": "2024-06-18T02:41:35Z",
                          "publishedAt": "2024-06-18T02:41:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "I find a simpe way to fix the problems, but dont ensure it suitable for all cases. Just replace d2Fdcdstrain by d2Edcdstrain in servral .c or .h files included  d2Fdcdstrain.  As for hist issue,   just modify ComputeLinearElasticPFFractureStress and add  _base_name  in the declare class.\nBecause I use the variational inequality solver, I dont need to face the issues about  hist or d2Fdcdstrain directly. So I think the simple modification is effective.",
                          "url": "https://github.com/idaholab/moose/discussions/27921#discussioncomment-9803398",
                          "updatedAt": "2024-06-18T08:26:31Z",
                          "publishedAt": "2024-06-18T08:25:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "why do you not think the d2F/Edcdstrain should be prefaced with _base_name?",
                          "url": "https://github.com/idaholab/moose/discussions/27921#discussioncomment-9807435",
                          "updatedAt": "2024-06-18T14:55:19Z",
                          "publishedAt": "2024-06-18T14:55:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "Yes, d2F/Edcdstrain also needs to be prefaced with _base_name. Otherwise, the claculation cannot strat.",
                          "url": "https://github.com/idaholab/moose/discussions/27921#discussioncomment-9811733",
                          "updatedAt": "2024-06-19T00:45:20Z",
                          "publishedAt": "2024-06-19T00:45:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "new Kernel: Porous Flow' style QpJac (Hardly converged)  Vs.  General hand-coding QpJac (easily converged)",
          "author": {
            "login": "Bearunner"
          },
          "bodyText": "Dear all,\nRecently, I am learning the dirackernels/PorousFlowPeacemanBorehole and try to implement it in the kernels.\nInitially, I finish it by using general hand-coding QpJac and get good converged results.\nRecently, I try to use the Porous Flow' style QpJac  (e.g. PorousFlowMassTimeDerivative.C and PorousFlowFullySaturatedMassTimeDerivative.C )  to speed up the simulation.\n1 General hand-coding QpJac (easily convergence).txt\n2 Porous Flow' style QpJac (Hardly convergence).txt\n1_log.txt\n2_log.txt\nUnlucky, I find it is hard to converge even at first step.\nCould you please help me on this?\nThanks a lot.\nB\nGeneral hand-coding QpJac (easily converged)\nReal\nPorousFlowPeaceman::computeQpResidual()\n{\n    Real r = 0.0;\n\n    for (unsigned int ph = 0; ph < _num_phases; ++ph)\n    {\n\n     r += _fluid_density_node[_i][_ph] / _fluid_viscosity[_i][_ph] * (_u[_i] - 100000));\n\n    }\n\n  return r * _test[_i][_qp];\n}\n\n\nReal\nPorousFlowPeaceman::computeQpJacobian()\n{\n  return computeQpJac(_var.number());\n}\n\n\n\nReal\nPorousFlowPeaceman::computeQpJac(unsigned int jvar) const\n{\n  const unsigned int pvar = _dictator.porousFlowVariableNum(jvar);\n\n  Real j = 0.0;\n\n  if (jvar == _p_var_number)\n\n  {\n    for (unsigned int ph = 0; ph < _num_phases; ++ph)\n  {\n\n  j += -_dfluid_viscosity_dvar[_i][ph][pvar] * _phi[_j][_qp] * _fluid_density_node[_i][ph] / std::pow(_fluid_viscosity[_i][ph], 2) + _dfluid_density_node_dvar[_i][ph][pvar] * _phi[_j][_qp] / _fluid_viscosity[_i][ph];\n  j *= (_u[_i] - 100000));\n  j += _fluid_density_node[_i][ph] / _fluid_viscosity[_i][ph] * _phi[_j][_qp];\n\n  }\n\n  }\n\n  return j * _test[_i][_qp];\n}\n\nReal\nPorousFlowPeaceman::computeQpOffDiagJacobian(unsigned int jvar)\n{\n  const unsigned int pvar = _dictator.porousFlowVariableNum(jvar);\n\n  Real j = 0.0;\n\n\n  if (jvar == _T_var_number)\n\n  {\n\n  for (unsigned int ph = 0; ph < _num_phases; ++ph)\n\n  {\n\n  j += -_dfluid_viscosity_dvar[_i][ph][pvar] * _phi[_j][_qp] * _fluid_density_node[_i][ph] / std::pow(_fluid_viscosity[_i][ph], 2) + _dfluid_density_node_dvar[_i][ph][pvar] * _phi[_j][_qp] / _fluid_viscosity[_i][ph];\n  j *= (_u[_i] - 100000));\n\n  }\n\n  }\n\n  return j * _test[_i][_qp];\n}\n\nlog:easily converged\nTime Step 1, time = 0.1, dt = 0.1\n    |residual|_2 of individual variables:\n               porepressure: 1.76996\n 0 Nonlinear |R| = 1.769956e+00\nCurrently Executing\n    Computing Jacobian..........                                                         [ 56.95 s] [  547 MB]\n      0 Linear |R| = 1.769956e+00\n      1 Linear |R| = 5.037185e-03\n      2 Linear |R| = 2.008511e-05\n      3 Linear |R| = 5.927711e-08\n      4 Linear |R| = 1.849117e-10\n      5 Linear |R| = 3.081674e-13\n    |residual|_2 of individual variables:\n               porepressure: 0.000207102\n 1 Nonlinear |R| = 2.071023e-04\n    Computing Jacobian.........                                                          [ 54.19 s] [  896 MB]\n      0 Linear |R| = 2.071023e-04\n      1 Linear |R| = 7.806158e-08\n      2 Linear |R| = 1.620506e-10\n      3 Linear |R| = 2.768883e-13\n      4 Linear |R| = 4.960755e-16\n      5 Linear |R| = 1.366996e-18\n    |residual|_2 of individual variables:\n               porepressure: 2.08483e-05\n 2 Nonlinear |R| = 2.084832e-05\n    Computing Jacobian.........                                                          [ 53.74 s] [  897 MB]\n      0 Linear |R| = 2.084832e-05\n      1 Linear |R| = 7.685754e-09\n      2 Linear |R| = 1.321019e-11\n      3 Linear |R| = 2.502334e-14\n      4 Linear |R| = 4.155741e-17\n      5 Linear |R| = 8.306119e-20\n    |residual|_2 of individual variables:\n               porepressure: 1.8536e-06\n 3 Nonlinear |R| = 1.853598e-06\n    Computing Jacobian.........                                                          [ 54.96 s] [  898 MB]\n      0 Linear |R| = 1.853598e-06\n      1 Linear |R| = 6.889821e-10\n      2 Linear |R| = 1.292019e-12\n      3 Linear |R| = 2.389580e-15\n      4 Linear |R| = 5.196694e-18\n      5 Linear |R| = 2.334065e-20\n    |residual|_2 of individual variables:\n               porepressure: 1.7901e-07\n 4 Nonlinear |R| = 1.790101e-07\n Solve Converged!\n  Finished Solving                                                                       [228.06 s] [  559 MB]\n\n\nPorous Flow' style QpJac (Hardly converged)\n\nReal\nPorousFlowPeaceman::computeQpResidual()\n{\n    Real r = 0.0;\n\n\n     r += _fluid_density_node[_i][_ph] / _fluid_viscosity[_i][_ph] * (_pp[_i][_ph] - 100000) * _mass_frac[_i][_ph][_fluid_component];\n\n  return r * _test[_i][_qp];\n}\n\n\nReal\nPorousFlowPeaceman::computeQpJacobian()\n{\n  if (!_var_is_porflow_var)\n  return 0.0;\n\n  return computeQpJac(_dictator.porousFlowVariableNum(_var.number()));\n}\n\n\nReal\nPorousFlowPeaceman::computeQpOffDiagJacobian(unsigned int jvar)\n{\n  if (_dictator.notPorousFlowVariable(jvar))\n    return 0.0;\n  return computeQpJac(_dictator.porousFlowVariableNum(jvar));\n}\n\n\nReal\nPorousFlowPeaceman::computeQpJac(unsigned int pvar)\n{\n  Real j = 0.0;\n\n  j += -_dfluid_viscosity_dvar[_i][_ph][pvar] * _fluid_density_node[_i][_ph] / std::pow(_fluid_viscosity[_i][_ph], 2) + _dfluid_density_node_dvar[_i][_ph][pvar] / _fluid_viscosity[_i][_ph];\n  j *= (_pp[_i][_ph] - 100000) * _mass_frac[_i][_ph][_fluid_component];\n  j += _fluid_density_node[_i][_ph] / _fluid_viscosity[_i][_ph] * (_dpp_dvar[_i][_ph][pvar] * _mass_frac[_i][_ph][_fluid_component] + (_pp[_i][_ph] - 100000) * _dmass_frac_dvar[_i][_ph][_fluid_component][pvar]);\n\n  return j * _test[_i][_qp];\n}\n\n\n\nlog: Hardly converged\nTime Step 1, time = 0.1, dt = 0.1\n\n|residual|_2 of individual variables:\n           porepressure: 1.1471\n0 Nonlinear |R| = 1.147099e+00\nCurrently Executing\n   Computing Jacobian...........                                                        [ 64.59 s] [  467 MB]\n     0 Linear |R| = 1.147099e+00\n     1 Linear |R| = 1.444729e-02\n     2 Linear |R| = 3.728843e-04\n     3 Linear |R| = 5.364687e-06\n     4 Linear |R| = 1.140004e-07\n     5 Linear |R| = 7.141013e-10\n     6 Linear |R| = 3.131963e-12\n     7 Linear |R| = 7.391971e-15\n   |residual|_2 of individual variables:\n              porepressure: 0.166439\n1 Nonlinear |R| = 1.664389e-01\n   Computing Jacobian...........                                                        [ 63.57 s] [  761 MB]\n     0 Linear |R| = 1.664389e-01\n     1 Linear |R| = 2.626463e-03\n     2 Linear |R| = 3.870046e-05\n     3 Linear |R| = 8.534643e-07\n     4 Linear |R| = 1.141531e-08\n     5 Linear |R| = 9.185115e-11\n     6 Linear |R| = 4.429794e-13\n     7 Linear |R| = 1.007129e-15\n   |residual|_2 of individual variables:\n              porepressure: 0.0262875\n2 Nonlinear |R| = 2.628752e-02\n   Computing Jacobian...........                                                        [ 62.79 s] [  762 MB]\n     0 Linear |R| = 2.628752e-02\n     1 Linear |R| = 4.084056e-04\n     2 Linear |R| = 1.022684e-05\n     3 Linear |R| = 3.412311e-07\n     4 Linear |R| = 4.277030e-09\n     5 Linear |R| = 1.550830e-11\n     6 Linear |R| = 6.803209e-14\n     7 Linear |R| = 1.427683e-16\n   |residual|_2 of individual variables:\n              porepressure: 0.00664934\n3 Nonlinear |R| = 6.649337e-03\n   Computing Jacobian...........                                                        [ 62.28 s] [  765 MB]\n     0 Linear |R| = 6.649337e-03\n     1 Linear |R| = 1.908789e-04\n     2 Linear |R| = 5.361577e-06\n     3 Linear |R| = 1.166733e-07\n     4 Linear |R| = 7.627529e-10\n     5 Linear |R| = 2.290047e-12\n     6 Linear |R| = 9.519533e-15\n     7 Linear |R| = 2.726405e-17\n   |residual|_2 of individual variables:\n              porepressure: 0.0030829\n4 Nonlinear |R| = 3.082901e-03\n   Computing Jacobian...........                                                        [ 62.97 s] [  763 MB]\n     0 Linear |R| = 3.082901e-03\n     1 Linear |R| = 6.883939e-05\n     2 Linear |R| = 1.860284e-06\n     3 Linear |R| = 5.889309e-08\n     4 Linear |R| = 2.524422e-10\n     5 Linear |R| = 6.137773e-13\n     6 Linear |R| = 2.665876e-15\n   |residual|_2 of individual variables:\n              porepressure: 0.00163936\n5 Nonlinear |R| = 1.639360e-03\n   Computing Jacobian...........                                                        [ 62.40 s] [  765 MB]\n     0 Linear |R| = 1.639360e-03\n     1 Linear |R| = 3.855174e-05\n     2 Linear |R| = 1.124493e-06\n     3 Linear |R| = 3.161580e-08\n     4 Linear |R| = 1.246819e-10\n     5 Linear |R| = 2.108129e-13\n     6 Linear |R| = 4.080236e-16\n   |residual|_2 of individual variables:\n              porepressure: 0.000882297\n6 Nonlinear |R| = 8.822973e-04\n   Computing Jacobian...........                                                        [ 62.45 s] [  766 MB]\n     0 Linear |R| = 8.822973e-04\n     1 Linear |R| = 2.033103e-05\n     2 Linear |R| = 5.844302e-07\n     3 Linear |R| = 1.696500e-08\n     4 Linear |R| = 6.698822e-11\n     5 Linear |R| = 1.217664e-13\n     6 Linear |R| = 3.566407e-16\n   |residual|_2 of individual variables:\n              porepressure: 0.000475276\n\n7 Nonlinear |R| = 4.752755e-04\n   Computing Jacobian...........                                                        [ 62.40 s] [  766 MB]\n     0 Linear |R| = 4.752755e-04\n     1 Linear |R| = 1.100907e-05\n     2 Linear |R| = 3.179114e-07\n     3 Linear |R| = 9.145917e-09\n     4 Linear |R| = 3.603855e-11\n     5 Linear |R| = 6.383199e-14\n     6 Linear |R| = 1.672315e-16\n   |residual|_2 of individual variables:\n              porepressure: 0.000256038\n8 Nonlinear |R| = 2.560380e-04\n   Computing Jacobian...........                                                        [ 62.47 s] [  766 MB]\n     0 Linear |R| = 2.560380e-04\n     1 Linear |R| = 5.922062e-06\n     2 Linear |R| = 1.708009e-07\n     3 Linear |R| = 4.925906e-09\n     4 Linear |R| = 1.941879e-11\n     5 Linear |R| = 3.462604e-14\n     6 Linear |R| = 9.367789e-17\n   |residual|_2 of individual variables:\n              porepressure: 0.000137932\n9 Nonlinear |R| = 1.379321e-04\n   Computing Jacobian...........                                                        [ 62.07 s] [  767 MB]\n     0 Linear |R| = 1.379321e-04\n     1 Linear |R| = 3.191600e-06\n     2 Linear |R| = 9.208255e-08\n     3 Linear |R| = 2.653845e-09\n     4 Linear |R| = 1.046051e-11\n     5 Linear |R| = 1.861778e-14\n     6 Linear |R| = 4.993557e-17\n   |residual|_2 of individual variables:\n              porepressure: 7.43065e-05\n10 Nonlinear |R| = 7.430646e-05\n   Computing Jacobian...........                                                        [ 62.06 s] [  765 MB]\n     0 Linear |R| = 7.430646e-05\n     1 Linear |R| = 1.719180e-06\n     2 Linear |R| = 4.959614e-08\n     3 Linear |R| = 1.429646e-09\n     4 Linear |R| = 5.635367e-12\n     5 Linear |R| = 1.003496e-14\n     6 Linear |R| = 2.697880e-17\n   |residual|_2 of individual variables:\n              porepressure: 4.00302e-05\n11 Nonlinear |R| = 4.003021e-05\n   Computing Jacobian...........                                                        [ 62.03 s] [  767 MB]\n     0 Linear |R| = 4.003021e-05\n     1 Linear |R| = 9.261817e-07\n     2 Linear |R| = 2.671992e-08\n     3 Linear |R| = 7.701803e-10\n     4 Linear |R| = 3.035851e-12\n     5 Linear |R| = 5.405229e-15\n     6 Linear |R| = 1.452236e-17\n   |residual|_2 of individual variables:\n              porepressure: 2.1565e-05\n12 Nonlinear |R| = 2.156496e-05\n   Computing Jacobian...........                                                        [ 62.31 s] [  767 MB]\n     0 Linear |R| = 2.156496e-05\n     1 Linear |R| = 4.989457e-07\n     2 Linear |R| = 1.439422e-08\n     3 Linear |R| = 4.149085e-10\n     4 Linear |R| = 1.635471e-12\n     5 Linear |R| = 2.912018e-15\n     6 Linear |R| = 7.825182e-18\n   |residual|_2 of individual variables:\n              porepressure: 1.16174e-05\n13 Nonlinear |R| = 1.161744e-05\n   Computing Jacobian...........                                                        [ 62.77 s] [  767 MB]\n     0 Linear |R| = 1.161744e-05\n     1 Linear |R| = 2.687917e-07\n     2 Linear |R| = 7.754469e-09\n     3 Linear |R| = 2.235190e-10\n     4 Linear |R| = 8.810599e-13\n     5 Linear |R| = 1.568759e-15\n     6 Linear |R| = 4.215468e-18\n   |residual|_2 of individual variables:\n              porepressure: 6.25852e-06\n14 Nonlinear |R| = 6.258517e-06\n   Computing Jacobian...........                                                        [ 62.96 s] [  767 MB]\n     0 Linear |R| = 6.258517e-06\n     1 Linear |R| = 1.448026e-07\n     2 Linear |R| = 4.177452e-09\n     3 Linear |R| = 1.204134e-10\n     4 Linear |R| = 4.746418e-13\n     5 Linear |R| = 8.450914e-16\n     6 Linear |R| = 2.270897e-18\n15 Nonlinear |R| = 3.371568e-06\n   Computing Jacobian...........                                                        [ 63.14 s] [  768 MB]\n     0 Linear |R| = 3.371568e-06\n     1 Linear |R| = 7.800762e-08\n     2 Linear |R| = 2.250466e-09\n     3 Linear |R| = 6.486885e-11\n     4 Linear |R| = 2.556965e-13\n     5 Linear |R| = 4.552742e-16\n     6 Linear |R| = 1.223370e-18\n   |residual|_2 of individual variables:\n              porepressure: 1.81632e-06\n16 Nonlinear |R| = 1.816321e-06\n   Computing Jacobian...........                                                        [ 62.88 s] [  768 MB]\n     0 Linear |R| = 1.816321e-06\n     1 Linear |R| = 4.202415e-08\n     2 Linear |R| = 1.212373e-09\n     3 Linear |R| = 3.494600e-11\n     4 Linear |R| = 1.377448e-13\n     5 Linear |R| = 2.452573e-16\n     6 Linear |R| = 6.590093e-19\n   |residual|_2 of individual variables:\n              porepressure: 9.78507e-07\n\n17 Nonlinear |R| = 9.785069e-07\nSolve Converged!\n Finished Solving                                                                       [1102.69 s] [  428 MB]",
          "url": "https://github.com/idaholab/moose/discussions/27907",
          "updatedAt": "2024-06-18T21:36:26Z",
          "publishedAt": "2024-06-15T19:49:28Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou may want to follow the advice on convergence issues here:\nhttps://mooseframework.inl.gov/moose/application_usage/failed_solves.html\nIf you suspect the Jacobian is not correct, then there are techniques on that page to check and suggestions on how to remedy this",
                  "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9783632",
                  "updatedAt": "2024-06-15T20:41:47Z",
                  "publishedAt": "2024-06-15T20:41:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Is it just simply a typo somewhere in the derivative when you include mass fractions? That seems to be the only difference?",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9790152",
                          "updatedAt": "2024-06-17T04:54:13Z",
                          "publishedAt": "2024-06-17T04:54:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Also, doing it the second way won't speed up the simulation I wouldn't think? If the first way is working, maybe use that (but it looks like you probably want to include mass fractions in that one?)",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9790287",
                          "updatedAt": "2024-06-17T05:25:40Z",
                          "publishedAt": "2024-06-17T05:25:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "But just realised the first one assumes that the variable if pressure, where it might not be, which is why we used the second form. The second one is missing _phi in there isn't it?",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9790301",
                          "updatedAt": "2024-06-17T05:28:43Z",
                          "publishedAt": "2024-06-17T05:28:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "OK, thinking some more and I think your derivatives are correct for the case where you are using nodal properties. I think you just need to add something like\n  if (_i != _j)\n    return 0.0;\n\nat the start of QpJac() for the same reason that PorousFlowMassTimeDerivative does (where it has a comment to remind us As the fluid mass is lumped to the nodes, only non-zero terms are for _i==_j). So the derivative of density, mass fraction, should be 0 if _i != _j",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9790961",
                          "updatedAt": "2024-06-17T07:12:37Z",
                          "publishedAt": "2024-06-17T07:12:37Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "OK, thinking some more and I think your derivatives are correct for the case where you are using nodal properties. I think you just need to add something like\n  if (_i != _j)\n    return 0.0;\n\nat the start of QpJac() for the same reason that PorousFlowMassTimeDerivative does (where it has a comment to remind us As the fluid mass is lumped to the nodes, only non-zero terms are for _i==_j). So the derivative of density, mass fraction, should be 0 if _i != _j\n\nThanks for your tips, Chris.\nI add it as follows.\nReal\nPorousFlowPeaceman::computeQpJac(unsigned int pvar)\n{\nReal j = 0.0;\nif (_i != _j)\nreturn 0.0;\nj += -_dfluid_viscosity_dvar[_i][_ph][pvar] * _fluid_density_node[_i][_ph] / std::pow(_fluid_viscosity[_i][_ph], 2) + _dfluid_density_node_dvar[_i][_ph][pvar] / _fluid_viscosity[_i][_ph];\nj *= (_pp[_i][_ph] - 100000) * _mass_frac[_i][_ph][_fluid_component];\nj += _fluid_density_node[_i][_ph] / _fluid_viscosity[_i][_ph] * (_dpp_dvar[_i][_ph][pvar] * _mass_frac[_i][_ph][_fluid_component] + (_pp[_i][_ph] - 100000) * _dmass_frac_dvar[_i][_ph][_fluid_component][pvar]);\nreturn j * _test[_i][_qp];\n}\nBut I got a negative mass_fraction of one component at 5000 seconds around the injection position.\nIt looks like a [_qp] or [_i] error problem?\nCould you please help me on this?\nThanks a lot.",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9796787",
                          "updatedAt": "2024-06-17T23:38:49Z",
                          "publishedAt": "2024-06-17T16:29:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "Hello\nYou may want to follow the advice on convergence issues here: https://mooseframework.inl.gov/moose/application_usage/failed_solves.html\nIf you suspect the Jacobian is not correct, then there are techniques on that page to check and suggestions on how to remedy this\n\nThanks for your suggestions, Guillaume.",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9796808",
                          "updatedAt": "2024-06-17T16:31:53Z",
                          "publishedAt": "2024-06-17T16:31:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Bearunner"
                          },
                          "bodyText": "Hello Chris,\nI learned the lines 293-296 in PorousFlowPeacemanBorehole.C and Lines 341-350 in PorousFlowLineSink.C\nSo I changed the '_pp[_i][_ph]'  into _pp[_qp][ph]. Until now, it's working well without negative mass_fraction as above picture.\nCould you please help me confirm whether this change is correct or not?\nThanks a lot.\nReal\nPorousFlowPeaceman::computeQpResidual()\n{\n    Real r = 0.0;\n\n    for (unsigned ph = 0; ph < _num_phases; ++ph)\n    {\n     r += _fluid_density_node[_i][ph] / _fluid_viscosity[_i][ph] * (_pp[_qp][ph] - 100000) * _mass_frac[_i][ph][_fluid_component];\n    }\n\n  return r * _test[_i][_qp];\n}\n\n\nReal\nPorousFlowPeaceman::computeQpJacobian()\n{\n  if (!_var_is_porflow_var)\n  return 0.0;\n\n  return computeQpJac(_dictator.porousFlowVariableNum(_var.number()));\n}\n\n\nReal\nPorousFlowPeaceman::computeQpOffDiagJacobian(unsigned int jvar)\n{\n  // If the variable is not a PorousFlow variable, the OffDiag Jacobian terms are 0\n  if (_dictator.notPorousFlowVariable(jvar))\n    return 0.0;\n  return computeQpJac(_dictator.porousFlowVariableNum(jvar));\n}\n\n\nReal\nPorousFlowPeaceman::computeQpJac(unsigned int pvar)\n{\nReal j = 0.0;\n\nfor (unsigned ph = 0; ph < _num_phases; ++ph)\n  {\n  j += _fluid_density_node[_i][ph] / _fluid_viscosity[_i][ph] * _dpp_dvar[_qp][ph][pvar] * _phi[_j][_qp] * _mass_frac[_i][ph][_fluid_component];\n  }\n\nif (_i != _j)\n  return j * _test[_i][_qp];\n\nfor (unsigned ph = 0; ph < _num_phases; ++ph)\n  {\n  j += (_pp[_qp][ph] - 100000) * _mass_frac[_i][ph][_fluid_component] * (_dfluid_density_node_dvar[_i][ph][pvar] / _fluid_viscosity[_i][ph] - _dfluid_viscosity_dvar[_i][ph][pvar] * _fluid_density_node[_i][ph] / std::pow(_fluid_viscosity[_i][ph], 2));\n  j += (_pp[_qp][ph] - 100000) * _dmass_frac_dvar[_i][ph][_fluid_component][pvar] * _fluid_density_node[_i][ph] / _fluid_viscosity[_i][ph];\n  }\n\n  return j * _test[_i][_qp];\n}",
                          "url": "https://github.com/idaholab/moose/discussions/27907#discussioncomment-9810888",
                          "updatedAt": "2024-06-18T22:12:01Z",
                          "publishedAt": "2024-06-18T21:36:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "no variable found for substitution expression Error",
          "author": {
            "login": "agniksr"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nThe input file in the examples of HeatConductionMaterial named : (modules/heat_transfer/test/tests/gap_heat_transfer_mortar/large_gap_heat_transfer_test_rz_cylinder.i)\ndisplays the following error when i run it:\n*** ERROR ***\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:7.5: no variable 'core_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:7.5: no variable 'rpv_core_gap_size' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:7.5: no variable 'rpv_width' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:16.5: no variable 'core_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:30.5: no variable 'rpv_inner_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:31.5: no variable 'rpv_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:63.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:78.5: no variable 'rpv_outer_htc' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:79.5: no variable 'rpv_outer_Tinf' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:100.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:115.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:121.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:127.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:132.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:138.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:144.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:149.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:155.5: no variable 'rpv_outer_Tinf' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_mesh_tmp.i:156.5: no variable 'rpv_outer_htc' found for substitution expression\n\nCould someone please help with this",
          "url": "https://github.com/idaholab/moose/discussions/27917",
          "updatedAt": "2024-06-18T20:42:26Z",
          "publishedAt": "2024-06-17T17:29:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis input large_gap_heat_transfer_test_rz_cylinder.i runs fine for me.\nYou seem to be running a different input: /peacock_run_mesh_tmp.i\nwhere did you find this?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9797915",
                  "updatedAt": "2024-06-17T18:41:38Z",
                  "publishedAt": "2024-06-17T18:41:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "agniksr"
                  },
                  "bodyText": "Yeah i just copied that input file into my own app just to see if it runs. It has the HeatTransfer module enabled",
                  "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9797939",
                  "updatedAt": "2024-06-17T18:46:19Z",
                  "publishedAt": "2024-06-17T18:46:18Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how are you running this input?",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798021",
                          "updatedAt": "2024-06-17T18:54:39Z",
                          "publishedAt": "2024-06-17T18:54:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "i am using peacock -i test.i",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798180",
                          "updatedAt": "2024-06-17T19:11:27Z",
                          "publishedAt": "2024-06-17T19:11:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Just use peacock, without an input file, then open the other input",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798192",
                          "updatedAt": "2024-06-17T19:12:55Z",
                          "publishedAt": "2024-06-17T19:12:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "Still gives me the same error\n'''\nRunning command: /home/agniksr/projects/leo/leo-opt Outputs/csv=true -i peacock_run_exe_tmp_test.i\nWorking directory: /home/agniksr/projects/leo/Input Files\n*** Warning, This code is deprecated and will be removed in future versions:\nPlease update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'.\nStack frames: 6\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits >, char const (&) [136]>(libMesh::BasicOStreamProxy<char, std::char_traits >&, bool, bool, char const (&) [136])\n2: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, int, char**, int)\n3: main\n4: __libc_start_main\n5: /home/agniksr/projects/leo/leo-opt(+0x33ef) [0x563654a323ef]\n*** ERROR ***\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:7.5: no variable 'core_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:7.5: no variable 'rpv_core_gap_size' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:7.5: no variable 'rpv_width' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:16.5: no variable 'core_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:30.5: no variable 'rpv_inner_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:31.5: no variable 'rpv_outer_radius' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:63.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:78.5: no variable 'rpv_outer_htc' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:79.5: no variable 'rpv_outer_Tinf' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:100.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:115.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:121.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:127.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:132.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:138.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:144.5: no variable 'rpv_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:149.5: no variable 'core_blocks' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:155.5: no variable 'rpv_outer_Tinf' found for substitution expression\n/home/agniksr/projects/leo/Input Files/peacock_run_exe_tmp_test.i:156.5: no variable 'rpv_outer_htc' found for substitution expression\nStack frames: 9\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, std::__cxx11::basic_string<char, std::char_traits, std::allocator >)\n2: void mooseError<std::__cxx11::basic_string<char, std::char_traits, std::allocator >&>(std::__cxx11::basic_string<char, std::char_traits, std::allocator >&)\n3: Moose::Builder::build()\n4: MooseApp::setupOptions()\n5: MooseApp::run()\n6: main\n7: __libc_start_main\n8: /home/agniksr/projects/leo/leo-opt(+0x33ef) [0x563654a323ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\nFinished: Exit code: 1\n'''",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798220",
                          "updatedAt": "2024-06-17T19:17:08Z",
                          "publishedAt": "2024-06-17T19:17:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "please use backquotes to format your posts, not straight quotes\nit looks like your app is outdated. Is this a new app? Or did you just start from an old version of moose",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798279",
                          "updatedAt": "2024-06-17T19:22:22Z",
                          "publishedAt": "2024-06-17T19:22:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "I think i updated moose recently as well as ran the make clobberall, make and run_tests for the app as well. How can i check if im using the latest update or not",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9798356",
                          "updatedAt": "2024-06-17T19:32:56Z",
                          "publishedAt": "2024-06-17T19:32:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "agniksr"
                          },
                          "bodyText": "Hey so i updated moose again and ran all the commands as above. The code seems to work when i run it using the  opt thing but gives the same error when i use peacock.\nAny idea why that happens?",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9809613",
                          "updatedAt": "2024-06-18T18:32:11Z",
                          "publishedAt": "2024-06-18T18:32:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@milljm have you seen this before?\npeacock is not actively maintained.",
                          "url": "https://github.com/idaholab/moose/discussions/27917#discussioncomment-9810589",
                          "updatedAt": "2024-06-18T20:42:27Z",
                          "publishedAt": "2024-06-18T20:42:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Profiling libresolv.9.dylib symbolization file missing error",
          "author": {
            "login": "smithht"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI have been using MOOSE for crystal plasticity simulations. I have run into slowdowns when trying to run larger simulations, so I have tried to profile my code using gperftools and pprof. The only hiccup I had in the installation process was updating and rebuilding libmesh. When running that script, I got the following error:\n(moose) harrysmith@Harrys-MacBook-Pro moose % scripts/update_and_rebuild_libmesh.sh\nERROR: LIBMESH_DIR=/Users/harrysmith/miniforge/envs/moose/libmesh exists within the conda base /Users/harrysmith/miniforge\nExiting in order to stop you from overwriting your conda environment\n\nI proceeded without rebuilding libmesh and I was able to compile and run in oprof mode. I successfully got the profile .prof files out, but I am getting this error when I try to use pprof to read the profiles:\n(moose) harrysmith@Harrys-MacBook-Pro run_4 % pprof run4_0.prof \nLocal symbolization failed for libresolv.9.dylib: stat /usr/lib/libresolv.9.dylib: no such file or directory\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: libvtkIOLegacy-9.2.9.2.5.dylib\nType: cpu\n\nI can still see some of the MOOSE framework functions when I use top, but most of the function run time is clumped under libresolv.9.dylib , making this profiling tool largely unhelpful:\nShowing top 10 nodes out of 168\n      flat  flat%   sum%        cum   cum%\n    33.62s 92.82% 92.82%     36.22s   100%  [libresolv.9.dylib]\n     0.30s  0.83% 93.65%      0.30s  0.83%  RankFourTensorTempl::operator*\n     0.18s   0.5% 94.15%      0.32s  0.88%  RankTwoTensorTempl::times\n\nI have tied setting PPROF_BINARY_PATH to the path of the oprof executable file, but that did not help. I found this missing libresolv.9.dylib file online, put it in my project directory, and tried setting PPROF_BINARY_PATH to the path of that file. I got the same error after trying that. Lastly, I have also tried removing my Conda environment and gperftools and reinstalling them without any luck.\nI am running this on an Apple Silicon Mac, but I have also tried running this on WSL and got the same missing file error. Thank you in advance for your time and help.",
          "url": "https://github.com/idaholab/moose/discussions/27735",
          "updatedAt": "2024-06-18T16:16:31Z",
          "publishedAt": "2024-05-29T17:23:41Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "I don't know much about profiling, but I know we've created a Conda package for it. Just checking for the simple things that I can do before another among my team attempts to answer you;\nAre you using our moose-pprof Conda package?\nconda activate moose\nconda install moose-pprof\nNext, be sure to build your application using the oprof method:\ncd ~/projects/YourApp\nMETHOD=\"oprof\" make clobberall\nMETHOD=\"oprof\" make -j 8\n...\npprof the_thing\nTipThere should be no need to rebuild libMesh in preparation to profile your app as we distribute moose-libmesh with \"profiling\" methods already. Our moose-libmesh package comes with the following methods: opt, dbg, devel, oprof.",
                  "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9597321",
                  "updatedAt": "2024-05-29T18:36:14Z",
                  "publishedAt": "2024-05-29T18:35:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "I just installed the moose-pprof package and recompiled using the oprof method and I am having the same issue. It looks like I am missing another symbolization file too now:\nLocal symbolization failed for libresolv.9.dylib: stat /usr/lib/libresolv.9.dylib: no such file or directory\nLocal symbolization failed for libsystem_kernel.dylib: error reading fat Mach-O file /usr/lib/system/libsystem_kernel.dylib: architecture not found in /usr/lib/system/libsystem_kernel.dylib: arm64\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: libvtkIOLegacy-9.2.9.2.5.dylib\nType: cpu",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9597646",
                          "updatedAt": "2024-05-29T19:10:01Z",
                          "publishedAt": "2024-05-29T19:10:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I get the same error:\n\u276f pprof run1_1.prof\nLocal symbolization failed for libresolv.9.dylib: stat /usr/lib/libresolv.9.dylib: no such file or directory\nLocal symbolization failed for libsystem_kernel.dylib: error reading fat Mach-O file /usr/lib/system/libsystem_kernel.dylib: architecture not found in /usr/lib/system/libsystem_kernel.dylib: arm64\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: libvtkIOLegacy-9.2.9.2.5.dylib\nType: cpu\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)  \n\nIt appears to be a warning of sorts, as I am still able to generate PNG graphs. But I admit, I know nothing about profiling...\nI also receive a rather cryptic set of errors upon installing moose-pprof. I realize this package is old. Perhaps I simply need to re-build it using the latest compilers moose-dev is pinned to.",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9607352",
                          "updatedAt": "2024-05-30T15:15:50Z",
                          "publishedAt": "2024-05-30T15:14:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "Yeah, I am able to create the PNG graphs and see functions using top, too. The graphs are not very useful though since most of the runtime is lumped under that unsymbolized libresolv.9.dylib file. I would like to be able to see the actual functions that are taking up most of the runtime under that cryptic file.",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9607781",
                          "updatedAt": "2024-05-30T15:53:21Z",
                          "publishedAt": "2024-05-30T15:53:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Let me build a new version of moose-pprof. I am hopeful all those errors during installation are related to pprof not functioning correctly. Once complete, I'll post another comment with information on how to add this channel to your Conda list, so you can try to install/use it.",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9608061",
                          "updatedAt": "2024-05-30T16:19:43Z",
                          "publishedAt": "2024-05-30T16:19:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I completely forgot about this, I apologize! Working on this now...\n#27751",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9703229",
                          "updatedAt": "2024-06-07T14:35:39Z",
                          "publishedAt": "2024-06-07T14:22:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I still get the same issue with an updated version of several packages (compiler, libcxx, etc). Unfortunately this also included the latest version of gperf:\n# Build/Install pprof from google at specified hash\ngo install github.com/google/pprof@latest\n\nI am a bit stumped at the moment.",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9704764",
                          "updatedAt": "2024-06-07T16:28:29Z",
                          "publishedAt": "2024-06-07T16:28:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Time to figure this out:\n/mann/xsxp.n']'\n   INFO (moose-pprof,pprof/bin/pprof): Needed DSO /opt/MacOSX11.3.sdk/usr/lib/libSystem.B.dylib found in $SYSROOT\n   INFO (moose-pprof,pprof/bin/pprof): Needed DSO /opt/MacOSX11.3.sdk/usr/lib/libresolv.9.dylib found in $SYSROOT\n   INFO (moose-pprof,pprof/bin/pprof): Needed DSO /opt/MacOSX11.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation found in $SYSROOT\n   INFO (moose-pprof,pprof/bin/pprof): Needed DSO /opt/MacOSX11.3.sdk/System/Library/Frameworks/Security.framework/Versions/A/Security found in $SYSROOT\nWARNING (moose-pprof): run-exports library package conda-forge/osx-arm64::mpich==4.2.1=h9ee2227_101 in requirements/run but it is not used (i.e. it is overdepending or perhaps statically linked? If that is what you want then add it to `build/ignore_run_exports`)\nWARNING (moose-pprof): run-exports library package conda-forge/osx-arm64::perl==5.32.1=7_h4614cfb_perl5 in requirements/run but it is not used (i.e. it is overdepending or perhaps statically linked? If that is what you want then add it to `build/ignore_run_exports`)\nWARNING (moose-pprof): dso library package conda-forge/osx-arm64::gperftools==2.10=hb7217d7_0 in requirements/run but it is not used (i.e. it is overdepending or perhaps statically linked? If that is what you want then add it to `build/ignore_run_exports`)\n\nThis has to be important \ud83d\ude0f",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9739408",
                          "updatedAt": "2024-06-11T13:31:21Z",
                          "publishedAt": "2024-06-11T13:31:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Indeed... this is better:\n\u276f pprof run1_1.prof\nLocal symbolization failed for CommonAuth: stat /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth: no such file or directory\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: libvtkIOLegacy-9.3.9.3.dylib\nType: cpu\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n\n\n(pprof) top 2\nShowing nodes accounting for 20ms, 50.00% of 40ms total\nShowing top 2 nodes out of 80\n      flat  flat%   sum%        cum   cum%\n      10ms 25.00% 25.00%       10ms 25.00%  MPIDU_genq_shmem_queue_dequeue\n      10ms 25.00% 50.00%       10ms 25.00%  MPIR_Igatherv_allcomm_sched_linear\n(pprof)",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9739845",
                          "updatedAt": "2024-06-11T14:18:42Z",
                          "publishedAt": "2024-06-11T14:07:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "smithht"
                          },
                          "bodyText": "Thank you for your help on this, Jason! It seems like some of the root causes to the symbolization errors are fixed. Are any of the changes you made to moose-pprof available for me to try, so I can continue to troubleshoot on my end?",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9767195",
                          "updatedAt": "2024-06-13T19:47:02Z",
                          "publishedAt": "2024-06-13T19:47:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am still trying to shuffle this into our public Conda channel.\nBut when I ask others in my group why no one has brought up the fact that moose-pprof isn't working, they all gave me an answer that it does work.\nI am still moving forward with updating pprof, but it's possible something else might be causing your issue. I was told \"you have to build libMesh in a special way\". But when I read the instructions, that special way is being done automatically these days:\n\nlibMesh automatically adds -fno-omit-frame-pointer to METHOD=oprof builds. However, if you want to do profiling with other methods (e.g. opt, which will not give line number information), both libMesh and MOOSE should be built with CXXFLAGS=-fno-omit-frame-pointer...\n\nref: https://mooseframework.inl.gov/application_development/profiling.html\nI think I'd like to bring @lindsayad in on this, as he might have more insight. I'll certainly post once I can get an updated moose-pprof into a location you can grab.",
                          "url": "https://github.com/idaholab/moose/discussions/27735#discussioncomment-9767568",
                          "updatedAt": "2024-06-13T20:38:55Z",
                          "publishedAt": "2024-06-13T20:38:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Getting the correct units for a body force, where a body forces acts on a single voxel (not an entire surface/edge)",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "Hi, I am attempting to solve the PDEs shown below:\n\nI am trying to model the cube seen below, and I have four different forces $\\bf{F}_1$, $\\bf{F}_2$, $\\bf{F}_3$ and $\\bf{F}_4$ that I am modelling as body forces.\nMy question: I know that body forces must have units of force/volume. In my case, the forces aren't acting on a 'volume', but rather on single voxels (i.e., they are localised to the corners of the box in this case). What volume must I divide these forces by: (a) the volume of the entire cube being modelled? Or (b) the volume of a single voxel on which these localized forces are acting on?",
          "url": "https://github.com/idaholab/moose/discussions/27926",
          "updatedAt": "2024-06-18T15:54:06Z",
          "publishedAt": "2024-06-18T12:35:51Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "thanks for detailed post.\nSee #27714 (reply in thread)",
                  "url": "https://github.com/idaholab/moose/discussions/27926#discussioncomment-9808148",
                  "updatedAt": "2024-06-18T15:54:06Z",
                  "publishedAt": "2024-06-18T15:54:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Specifying the Direction of a Traction BC applied at Nodes for a Solid Mechanics Linearized-Elasticity Problem in 3D",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI'm trying to solve the 3D linearized-elasticity PDE seen below:\n\nSpecifically, I am trying to solve it for the two-dimensional 2 x 2 square geometry seen below. I intend to fix $u_x = u_y = 0$ along the left boundary. Furthermore, I know that my geometry experiences contact forces $\\mathbf{F_1}$ and $\\mathbf{F_2}$ in the directions shown below at the upper right and lower right corners of the square, where $|\\mathbf{F_1}| = 5000000N$ and $|\\mathbf{F_2}| = 2000000N$.\n\nQuestion: How do I specify these force/traction boundary conditions (i.e., $\\mathbf{\\sigma} \\cdot \\mathbf{n} = \\mathbf{t}$) using MOOSE, correctly capturing both the desired direction and magnitude of these contact forces?\nI have attached my attempt below, which is clearly wrong:\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 20\n    ny = 20\n    xmin = 0\n    xmax = 2\n    ymin = 0\n    ymax = 2\n  []\n  [node1]\n    type = ExtraNodesetGenerator\n    input = gen\n    new_boundary = \"node1\"\n    coord = '2 2 0'\n  []\n  [node2]\n    type = ExtraNodesetGenerator\n    input = node1\n    new_boundary = \"node2\"\n    coord = '2 0 0'\n  []\n[]\n\n[Physics/SolidMechanics/QuasiStatic]\n  [all]\n    add_variables = true\n  []\n[]\n\n[BCs]\n  [simply_support_x]     # setting u_x = 0 along the left boundary\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'left'\n    value = 0.0\n  []\n  [simply_support_y]   # setting u_y = 0 along the left boundary\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'left'\n    value = 0.0\n  []\n  [node1force]\n    type = ConstantRate\n    variable = disp_y\n    boundary = \"node1\"\n    rate = 5000000.0\n  []\n  [node2force]\n    type = ConstantRate\n    variable = disp_x\n    boundary = \"node2\"\n    rate = 2000000.0\n  []\n[]\n\n[Materials]\n  [elasticity]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e9\n    poissons_ratio = 0.3\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[Executioner]\n  type = Steady\n[]\n\n[Outputs]\n  exodus = true\n[]\n\nThis is wrong because this is the resulting output I get in Paraview:\n\nClearly, the above applies the forces $|\\mathbf{F_1}| = 5000000N$ and $|\\mathbf{F_2}| = 2000000N$ at the correct nodes, but the direction of $|\\mathbf{F_1}|$ is applied along the +y-axis, while the direction of $|\\mathbf{F_2}|$ is applied along the +x-axis, whereas I need the directions pointing diagonally towards the centre of the box as seen in my diagram earlier?\nI need to be able to specify the direction which these contact forces are applied at the corner nodes? I inspected the BCs system, but I can't find anything that accomplishes what I want (I'm guessing there is a solution, but I can't find it as I'm relatively new to solving 3D linearized-elasticity PDEs, and I am still learning about the stress tensor $\\mathbf{\\sigma}$). Come to think of it, I don't really understand what something like $\\mathbf{\\sigma} \\cdot \\mathbf{n}$ means, given that $\\mathbf{\\sigma}$ is a 3x3 matrix and $\\mathbf{n}$ is a vector (i.e., how do we compute a dot product between a matrix and vector)? Perhaps the answer to this might clarify matters for me?",
          "url": "https://github.com/idaholab/moose/discussions/27714",
          "updatedAt": "2024-06-18T15:53:13Z",
          "publishedAt": "2024-05-28T02:36:59Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI'm not sure about using ConstantRate. Where did you see this being used? Which example?\nI would expect a PressureBC to work for this\nThere's a Pressure syntax that is a little different you ll want to look at examples\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9578541",
                  "updatedAt": "2024-05-28T09:20:27Z",
                  "publishedAt": "2024-05-28T09:19:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "maxnezdyur"
                  },
                  "bodyText": "You will need 2 BCs for each of your forces. For a force F, you need to find the F_x and F_y components. Then apply those as BCs. The ConstantRate should work for your problem but you need to mind the signs on the forces that you are applying. All of your x forces will be negative, but the bottom node y force will be positive, while the top will be negative still. I would only use the ConstantRate, if you are really just trying to apply the forces on two nodes. It would make more sense that the force is spread out, but not sure what you are testing.",
                  "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9579710",
                  "updatedAt": "2024-05-28T11:04:35Z",
                  "publishedAt": "2024-05-28T11:00:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Thanks @maxnezdyur. Can you help me make sense of how $\\mathbf{u}$, $\\boldsymbol{\\sigma}$ and $\\mathbf{F_1}$ are all related? My understanding was that a traction boundary condition is represented by $\\boldsymbol{\\sigma} \\cdot \\mathbf{n} = c \\in \\mathbb{R}$. In my case, $\\mathbf{F_1}$ is a traction boundary condition, where $\\mathbf{F_1} = \\boldsymbol{\\sigma} \\cdot \\mathbf{n} = 5000000N$.\nBut if the above is true, ConstantRate seems to apply $\\frac{d\\mathbf{u}}{dt} = c$ (i.e. the time-derivative of the displacement-vector), whereas I want a spatial derivative, since $\\sigma_x = E\\frac{\\partial u_x}{\\partial x}$, where $E$ is Young's Modulus? Thus, I'm not convinced that the ConstantRate approach correctly implements these equations since a time derivative is involved?\nNOTE: $\\mathbf{F_1}$ and $\\mathbf{F_2}$ are meant to represent contact forces acting on my square. Eventually, I want to perform an FEA solve on the 3D cube seen below, which is simulated in a physics simulator. My ultimate goal is to be able to perform a solid mechanics FEA solve on any arbitrary geometry by (a) simulating it in a physics simulator and (b) reading in the observed contact forces applied at different points/nodes on my mesh as traction BCs applied in MOOSE (so I don't want to have the force spread out, but rather applied at the points observed in the physics simulator).\n\n  \n    \n    \n\n    box_falling.mp4",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9588758",
                          "updatedAt": "2024-05-29T05:25:59Z",
                          "publishedAt": "2024-05-29T05:12:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "The ConstantRate docs are giving an example where this could be used. So for the du/dt=c equation the constant rate just adds the \"c\" part and if you scrolled further down in the example they show another block adds the time derivative. The ConstantRate for your problem should just be adding a force directly for each node. A similar object CoupledForceNodalKernel would allow you specify a variable to determine the force, but when you look at the implementation they perform the same thing if the coupled variable is constant throughout the domain.",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9592486",
                          "updatedAt": "2024-05-29T11:14:57Z",
                          "publishedAt": "2024-05-29T11:14:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "So for the du/dt=c equation the constant rate just adds the \"c\" part and if you scrolled further down in the example they show another block adds the time derivative.\n\nI can see how we are adding the \"c\" part. My issue is that I don't understand how we are adding a force directly for each node using the techniques you have described. For example, suppose $|\\mathbf{F_1}| = |\\mathbf{F_2}| = 4N$ in the problem above. Then, using the advice you have given, I would include a block like the following in my input file:\n[NodalKernels]\n  [node1force_xforce]\n    type = ConstantRate\n    variable = disp_x\n    boundary = \"node1\"\n    rate = -2\n  []\n  [node1force_yforce]\n    type = ConstantRate\n    variable = disp_y\n    boundary = \"node1\"\n    rate = -2\n  []\n  [node2force_xforce]\n    type = ConstantRate\n    variable = disp_x\n    boundary = \"node2\"\n    rate = -2\n  []\n  [node2force_yforce]\n    type = ConstantRate\n    variable = disp_y\n    boundary = \"node2\"\n    rate = 2\n  []\n[]\n\nWhat I am confused about is disp_x represents $u_x$ and disp_y represents $u_y$, so where is the connection to forces $\\mathbf{F_1}$ and $\\mathbf{F_2}$ coming from if I am inputting disp_x and disp_y in these sections?",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9601197",
                          "updatedAt": "2024-05-30T04:53:52Z",
                          "publishedAt": "2024-05-30T04:52:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The variable parameter in a kernel is more indicative of which equation you are adding this term to, than of which variable you are modifying\nThe equation for the displacement is a balance of forces. Adding a term there means adding a force, not setting the value of a displacement",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9601240",
                          "updatedAt": "2024-05-30T04:59:36Z",
                          "publishedAt": "2024-05-30T04:59:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "kurtenkera"
                          },
                          "bodyText": "Do we need to divide the forces $\\bf{F_i}$ by the volume (for a 3D case) of the entire object being modelled? Or in this case, since the forces are only acting locally on the individual voxels at the corners, do I divide these forces by the volume of the individual voxels? My understanding is that the body forces $\\bf{b}$ must have units of force/volume so they must be divided by some kind of volume - but I'm unsure which kind in this case?",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9805945",
                          "updatedAt": "2024-06-18T12:42:12Z",
                          "publishedAt": "2024-06-18T12:42:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if you are applying forces on a point then no need to normalize.\nIf you are applying on a side, then normalize by the side area.\nIf you are applying inside an element (volumetric term), then normalize by the volume of the element to form a volumetric density of force.\nThe idea is simply to conserve the integral of the force.\nI think by voxel you mean a node, so no normalization needed afaik",
                          "url": "https://github.com/idaholab/moose/discussions/27714#discussioncomment-9808140",
                          "updatedAt": "2024-06-18T15:53:14Z",
                          "publishedAt": "2024-06-18T15:53:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about explicit time integrator",
          "author": {
            "login": "SomnusYu"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi all,\nI would like to know why all the explicit time integrators required solve_type = LINEAR. If the solve type = PJFNK, is it impossible to use explicit time integrators?\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/27925",
          "updatedAt": "2024-06-18T15:10:01Z",
          "publishedAt": "2024-06-18T11:02:02Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThat's not true for all explicit time integrators.\nSee this one:\nhttps://mooseframework.inl.gov/source/timeintegrators/ActuallyExplicitEuler.html\nFor those that do require it, it's because the implementation does not support nonlinear solves at the moment. It s something that can be changed with enough development work\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27925#discussioncomment-9807527",
                  "updatedAt": "2024-06-18T15:02:39Z",
                  "publishedAt": "2024-06-18T15:02:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "SomnusYu"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/27925#discussioncomment-9807618",
                          "updatedAt": "2024-06-18T15:10:02Z",
                          "publishedAt": "2024-06-18T15:10:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue with Segmentation Fault in Vector Initialization",
          "author": {
            "login": "sSajjad90"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI encountered a segmentation fault issue while initializing a vector in a new source code. I defined a vector to stor properties, and initialized it within the function initQpStatefulProperties(). However, when I run the simulation, I immediately receive a \"Segmentation fault (core dumped)\" error.\nThe weird thing is, I've successfully defined and initialized several other vectors in other *.C files within the same application without any issues.\nCould you please review the following simplified test case and let me know what might be causing this problem?\nThank you for your support,\nSincerely,\nSajjad\nPS: MOOSE is up to date on my PC.\n#pragma once\n\n#include \"Material.h\"\n\n/**\n *\n */\nclass MTest : public Material\n{\npublic:\n  static InputParameters validParams();\n\n  MTest(const InputParameters & parameters);\n\nprotected:\n  virtual void initQpStatefulProperties() override;\n  virtual void computeQpProperties() override;\n\n  MaterialProperty<std::vector<Real>> & _Tester2;\n\n  int LL = 5;\n\n};\n\n#include \"MTest.h\"\n\n#include <vector>\n#include <iostream>\n#include <cmath>\n\n\nregisterMooseObject(\"precipitationApp\", MTest);\n\nInputParameters\nMTest::validParams()\n{\n  InputParameters params = Material::validParams();\n  params.addRequiredParam<std::vector<MaterialPropertyName>>(\"Tester2\", \"to stor the size  of the precipitate\");\n  return params;\n}\n\nMTest::MTest(const InputParameters & parameters)\n: Material(parameters),\n_Tester2(declareProperty<std::vector<Real>>(\"Tester2\"))\n\n\n{\n}\n\nvoid\nMTest::initQpStatefulProperties()\n{\n  //initializing the vector \n  _Tester2[_qp].resize(LL);\n  _Tester2[_qp].assign(LL, 0);\n}\n\nvoid\nMTest::computeQpProperties()\n{\n  for (size_t i = 0; i < LL; i++)\n  {\n    _Tester2[_qp][i] = 35;\n  }\n}",
          "url": "https://github.com/idaholab/moose/discussions/27895",
          "updatedAt": "2024-06-17T22:34:16Z",
          "publishedAt": "2024-06-13T16:05:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nyou could have done\n  _Tester2[_qp].resize(LL, 0);\n\nto just resize and initialize the first time.\ncan you compile in debug mode and get a backtrace to make sure which line is seg-faulting?\nhttps://mooseframework.inl.gov/application_development/debugging.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9767043",
                  "updatedAt": "2024-06-13T19:26:07Z",
                  "publishedAt": "2024-06-13T19:26:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sSajjad90"
                  },
                  "bodyText": "(moose) sajjad@sajjad-PC:~/projects/precipitation$ ./precipitation-dbg -i test/01_UpdatedUnified/MTest.i \n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nPlease update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'. \nStack frames: 8\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits<char> >, char const (&) [136]>(libMesh::BasicOStreamProxy<char, std::char_traits<char> >&, bool, bool, char const (&) [136])\n2: void mooseDeprecated<char const (&) [136]>(char const (&) [136])\n3: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, int)\n4: main\n5: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f2e1a6ccd90]\n6: __libc_start_main\n7: ./precipitation-dbg(+0x4079) [0x55d3cd44d079]\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n\"registerAll\" in Modules is deprecated. Please update your *App.C file(s) to call the new templated \"registerAllObjects\" method (e.g. ModulesApp::registerAllObjects<MyApp>(...))\nStack frames: 22\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits<char> >, char const (&) [178]>(libMesh::BasicOStreamProxy<char, std::char_traits<char> >&, bool, bool, char const (&) [178])\n2: void mooseDeprecated<char const (&) [178]>(char const (&) [178])\n3: ModulesApp::registerAll(Factory&, ActionFactory&, Syntax&)\n4: precipitationApp::registerAll(Factory&, ActionFactory&, Syntax&)\n5: precipitationTestApp::registerAll(Factory&, ActionFactory&, Syntax&, bool)\n6: precipitationTestApp::precipitationTestApp(InputParameters)\n7: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x14ced) [0x7f2e32795ced]\n8: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x14a52) [0x7f2e32795a52]\n9: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x145e0) [0x7f2e327955e0]\n10: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x140c1) [0x7f2e327950c1]\n11: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x13e2a) [0x7f2e32794e2a]\n12: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x13c11) [0x7f2e32794c11]\n13: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x1396f) [0x7f2e3279496f]\n14: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x135f5) [0x7f2e327945f5]\n15: /home/sajjad/projects/precipitation/test/lib/libprecipitation_test-dbg.so.0(+0x13328) [0x7f2e32794328]\n16: AppFactory::createShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters, int)\n17: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, int)\n18: main\n19: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f2e1a6ccd90]\n20: __libc_start_main\n21: ./precipitation-dbg(+0x4079) [0x55d3cd44d079]\n\nFramework Information:\nMOOSE Version:           git commit 310e264875 on 2024-06-12\nLibMesh Version:         \nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1\nCurrent Time:            Thu Jun 13 16:54:32 2024\nExecutable Timestamp:    Thu Jun 13 16:32:37 2024\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          1\n  Spatial Dimension:       1\n  Nodes:                   2\n  Elems:                   1\n  Num Subdomains:          1\n\nAuxiliary System:\n  Num DOFs:                2\n  Num Local DOFs:          2\n  Variables:               \"prop00\" \n  Finite Element Types:    \"MONOMIAL\" \n  Approximation Orders:    \"FIRST\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator:          ImplicitEuler\n  Solver Mode:             JFNK\n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\nLEGACY MODES ENABLED:\n This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\n\n\nTime Step 0, time = 0\n\nPostprocessor Values:\n+----------------+----------------+\n| time           | 01_Tester2     |\n+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |\n+----------------+----------------+\n\n\nTime Step 1, time = 1, dt = 1\n Solve Skipped!\nSegmentation fault (core dumped)\n(moose) sajjad@sajjad-PC:~/projects/precipitation$ \n\n\n[Materials]\n    [./MTest2]\n        type = MTest\n        Tester2 = 'Tester2'\n    [../]\n[]\n[Postprocessors]\n    [./01_Tester2]\n        type = ElementAverageValue\n        variable = prop00\n    [../]\n[]\n[Mesh]\n    type = GeneratedMesh\n    dim = 1\n[]\n[Problem]\n    solve = false\n[]\n[Outputs]\n    exodus = true\n    csv = true\n    perf_graph = true \n[]\n[Executioner]\n    type = Transient\n    solve_type = JFNK\n    start_time = 0\n    end_time = 3\n    dt = 1\n[]\n[AuxVariables]\n    [./prop00]\n        order = FIRST\n        family = MONOMIAL\n    [../]\n[]\n[AuxKernels]\n    [./prop01_output]\n        type = MaterialStdVectorAux\n        property = Tester2\n        variable = prop00\n        index = 1\n    [../]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9767767",
                  "updatedAt": "2024-06-13T21:02:37Z",
                  "publishedAt": "2024-06-13T21:02:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you ll have to use a debugger too to get the line\nit s fairly easy though it's just\nlldb -- ./precipitation-dbg -i test/01_UpdatedUnified/MTest.i \n\non mac and similar with gdb on linux",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9767880",
                          "updatedAt": "2024-06-13T21:19:13Z",
                          "publishedAt": "2024-06-13T21:19:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sSajjad90"
                  },
                  "bodyText": "In the following you can see the problem\nTime Step 0, time = 0\n\nPostprocessor Values:\n+----------------+----------------+\n| time           | 01_Tester2     |\n+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |\n+----------------+----------------+\n\n\nTime Step 1, time = 1, dt = 1\n Solve Skipped!\nProcess 558330 stopped\n* thread #1, name = 'precipitation-d', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\n    frame #0: 0x00007ffff35fdb7e libprecipitation-dbg.so.0`MTest::computeQpProperties(this=0x0000555555df3020) at MTest.C:45:21\n   42  \t{\n   43  \t  for (size_t i = 0; i < LL; i++)\n   44  \t  {\n-> 45  \t    Tester2[_qp][i] = 35;\n   46  \t  }\n   47  \t}",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9768163",
                  "updatedAt": "2024-06-13T22:09:10Z",
                  "publishedAt": "2024-06-13T22:09:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok I dont see why it s not doing what we want.\nmaybe initQpStateful is not actually overriding ?? Do you have override in the header for that declaration\nadd thiis in computeQpProperties\n_Tester2[_qp].resize(LL);",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9768183",
                          "updatedAt": "2024-06-13T22:14:31Z",
                          "publishedAt": "2024-06-13T22:14:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sSajjad90"
                  },
                  "bodyText": "Sure, here's the revised text for better clarity and correctness:\nAs you can see in the header file, both initQpStatefulProperties and computeQpProperties are overridden.\nAdding_Tester2[_qp].resize(LL);in computeQpProperties resolves the issue. However, I'm concerned if this might cause errors during the simulation.\n#pragma once\n\n#include \"Material.h\"\n\n/**\n *\n */\nclass MTest : public Material\n{\npublic:\n  static InputParameters validParams();\n\n  MTest(const InputParameters & parameters);\n\nprotected:\n  virtual void initQpStatefulProperties() override;\n  virtual void computeQpProperties() override;\n\n  MaterialProperty<std::vector<Real>> & _Tester2;\n\n  int LL = 5;\n\n};",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9774731",
                  "updatedAt": "2024-06-14T13:18:06Z",
                  "publishedAt": "2024-06-14T13:18:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it won't cause errors. You are resizing then filling the vector immediately.",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9774800",
                          "updatedAt": "2024-06-14T13:22:50Z",
                          "publishedAt": "2024-06-14T13:22:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "Thank you so much",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9774831",
                          "updatedAt": "2024-06-14T13:25:44Z",
                          "publishedAt": "2024-06-14T13:25:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sSajjad90"
                  },
                  "bodyText": "I just added a new vector to my existing code, which had been working well previously. These codes include several vectors and have been functioning without issues. After compiling the modified code, I encountered a Segmentation fault (core dumped) error.\nNotably, before adding the new vector, I made some other modifications and tested the code. Everything worked perfectly, and all vectors operated as expected. However, as soon as I added the new vector, the segmentation fault error appeared. Even after removing the new vector and testing again, the error persisted.\nThis leads me to believe that the issue might be related to recent updates or changes in the main source code of the MOOSE framework\nI should mention that using resize() in the computeQpProperties function is not a viable option for me, because it causes issues with vectorpostprocessors and postprocessors in my application (I get the segmentation fault error if I add a postprocessor for vectors)\nThank you for your assistance.",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9776963",
                  "updatedAt": "2024-06-14T16:59:42Z",
                  "publishedAt": "2024-06-14T16:59:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nIf you want to investigate this you will have to use a git bisect on recent changes to find which change may have caused the issue.\nIt's however quite unlikely as we run thousands of tests and recent changes in moose do not break those.\nThe seg fault with the postprocessors could be a clue. Which postprocessor are you using? What is it measuring?",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9777870",
                          "updatedAt": "2024-06-14T19:01:57Z",
                          "publishedAt": "2024-06-14T19:01:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sSajjad90"
                  },
                  "bodyText": "Hi\nI think the problem stems from the following code issue; please advise how I may resolve it.\n#include errors detected. Please update your includePath. Squiggles are disabled for this translation unit (/home/sajjad/projects/precippanter/src/Materials/Inputs.C).C/C++(1696)\ncannot open source file \"Material.h\" (dependency of \"Inputs.h\")C/C++(1696)\n\nMaterial is a source file from the Moose framework and serves as the application's base class.\nAll relevant MOOSE framework source codes encountered the same issue.\n\nIn the following, you can see the VSCode setup\n\nSincerely,\nSajjad",
                  "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9798581",
                  "updatedAt": "2024-06-17T19:55:51Z",
                  "publishedAt": "2024-06-17T19:55:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this is a VSCode setup change? it wont cause a segfault",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9799278",
                          "updatedAt": "2024-06-17T21:39:30Z",
                          "publishedAt": "2024-06-17T21:39:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "\"Yes, however, I encountered an error (warning) in the source code, like Material.h.\"\nDo you have any suggestion to fix it?",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9799361",
                          "updatedAt": "2024-06-17T21:59:53Z",
                          "publishedAt": "2024-06-17T21:57:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can just ignore it, it's just VScode that is not properly set up\nYou can fix your VSCode setup by adding the path to search for header files",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9799375",
                          "updatedAt": "2024-06-17T22:00:15Z",
                          "publishedAt": "2024-06-17T22:00:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sSajjad90"
                          },
                          "bodyText": "Do you have any insights regarding the segmentation fault? Could there be an issue with the Moose framework on my PC? I've updated Moose and my application twice in the last five days, but the error persists. I'm considering uninstalling and reinstalling Moose.",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9799432",
                          "updatedAt": "2024-06-17T22:12:09Z",
                          "publishedAt": "2024-06-17T22:12:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It's very unlikely to be due to moose. And much more likely to be due to a fault in the code in your application.\nFollow the debugging instructions to get us a backtrace. Seg faults are good eerrors to have, they are easy to find",
                          "url": "https://github.com/idaholab/moose/discussions/27895#discussioncomment-9799535",
                          "updatedAt": "2024-06-17T22:34:17Z",
                          "publishedAt": "2024-06-17T22:34:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Material Property error",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I am trying to use the ComputeMultipleCrystalPlasticityStress in conjunction with the CrystalPlasticityKalidindiUpdate for my simulation.\nThe input script below works fine after making the necessary adjustments in the source codes by adding the _base_name.\n[Mesh]\n  [file]\n    type = FileMeshGenerator\n    file = my_kks_noload_twophase_out.e-s180\n    use_for_exodus_restart = true\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n\n  # order parameter 0\n  [eta0]\n    initial_from_file_var = eta1\n  []\n  # order parameter 1\n  [eta1]\n    initial_from_file_var = eta3\n  []\n[]\n\n[AuxVariables]\n  [vonmises]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [stress_xx]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n[]\n\n[AuxKernels]\n  [vonmises]\n    type = RankTwoScalarAux\n    rank_two_tensor = stress\n    variable = vonmises\n    scalar_type = VonMisesStress\n    execute_on = timestep_end\n    #   block = 0\n  []\n  [stress_xx]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xx\n    index_j = 0\n    index_i = 0\n    execute_on = timestep_end\n    block = 0\n  []\n[]\n\n[BCs]\n  [symmy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [symmx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  []\n  [tdisp]\n    type = FunctionDirichletBC\n    variable = disp_x\n    boundary = right\n    function = '0.1*t'\n  []\n[]\n\n[Materials]\n  [elasticity_tensor_phase0]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    base_name = phase0\n    block = 0\n  []\n  [stress_phase0]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_phase0'\n    rtol = 1e-06\n    tan_mod_type = exact\n    base_name = phase0\n  []\n  [trial_xtalpl_phase0]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = phase0\n  []\n  [strain_phase0]\n    type = ComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n    base_name = phase0\n    #    eigenstrain_names = eigenstrain2\n  []\n\n  [elasticity_tensor_phase1]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 45.0\n    euler_angle_3 = 0.0\n    base_name = phase1\n  []\n  [stress_phase1]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_phase1'\n    rtol = 1e-06\n    tan_mod_type = exact\n    base_name = phase1\n  []\n  [trial_xtalpl_phase1]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = phase1\n  []\n\n  [strain_phase1]\n    type = ComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n    base_name = phase1\n  []\n\n\n  # Switching functions for each phase\n  [h0]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta0\n    all_etas = 'eta0 eta1'\n    h_name = h0\n  []\n  [h1]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta1\n    all_etas = 'eta0 eta1'\n    h_name = h1\n  []\n \n  # Generate the global stress from the phase stresses\n  [global_stress]\n    type = MultiPhaseStressMaterial\n    phase_base = 'phase0 phase1'\n    h = 'h0  h1'\n  []\n[]\n\n[Kernels]\n  [eta0_dt]\n    type = TimeDerivative\n    variable = eta0\n  []\n  [eta1_dt]\n    type = TimeDerivative\n    variable = eta1\n  []\n  [TensorMechanics]\n    displacements = 'disp_x disp_y'\n  []\n[]\n\n[Postprocessors]\n  [vonmises]\n    type = ElementAverageValue\n    variable = vonmises\n    block = 'ANY_BLOCK_ID 0'\n  []\n  [stress_xx]\n    type = ElementAverageValue\n    variable = stress_xx\n    block = 'ANY_BLOCK_ID 0'\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_type'\n  petsc_options_value = 'lu            superlu_dist          vinewtonrsls'\n\n  #  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  #  petsc_options_value = ' asm      2              lu            gmres     200'\n  l_max_its = 20\n  nl_max_its = 10\n  nl_rel_tol = 1.0e-8\n  nl_abs_tol = 1.0e-9\n\n  end_time = 100\n\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 5e-3\n    cutback_factor = 0.75\n    growth_factor = 1.2\n    optimal_iterations = 20\n  []\n[]\n\n[Outputs]\n  exodus = true\n  print_linear_residuals = true\n  [./table]\n    type = CSV\n    execute_on = timestep_end\n  [../]\n  [./checkpoint]\n    type = Checkpoint\n    num_files = 10\n    interval = 10\n  [../]\n[]\n\nBut after  I added the extra blocks such as the fp_xx, pk2,e_xx in the auxvariable block as shown below\n[Mesh]\n  [file]\n    type = FileMeshGenerator\n    file = my_kks_noload_twophase_out.e-s180\n    use_for_exodus_restart = true\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n\n  # order parameter 0\n  [eta0]\n    initial_from_file_var = eta1\n  []\n  # order parameter 1\n  [eta1]\n    initial_from_file_var = eta3\n  []\n[]\n\n[AuxVariables]\n  [vonmises]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [stress_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [pk2]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [fp_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_xx]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [phase0_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [phase0_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [phase1_gss]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n  [phase1_slip_increment]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 0\n  []\n[]\n\n[AuxKernels]\n  [vonmises]\n    type = RankTwoScalarAux\n    rank_two_tensor = stress\n    variable = vonmises\n    scalar_type = VonMisesStress\n    execute_on = timestep_end\n    #   block = 0\n  []\n  [stress_xx]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xx\n    index_j = 0\n    index_i = 0\n    execute_on = timestep_end\n    \n  []\n  [pk2]\n    type = RankTwoAux\n    variable = pk2\n    rank_two_tensor = second_piola_kirchhoff_stress\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n  []\n  [fp_xx]\n    type = RankTwoAux\n    variable = fp_xx\n    rank_two_tensor = plastic_deformation_gradient\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n    \n  []\n  [e_xx]\n    type = RankTwoAux\n    variable = e_xx\n    rank_two_tensor = total_lagrangian_strain\n    index_j = 2\n    index_i = 2\n    execute_on = timestep_end\n    \n  []\n  [gss_phase0]\n    type = MaterialStdVectorAux\n    variable = phase0_gss\n    property = phase0_slip_resistance\n    index = 0\n    execute_on = timestep_end\n    \n  []\n  [slip_inc_phase0]\n    type = MaterialStdVectorAux\n    variable = phase0_slip_increment\n    property = phase0_slip_increment\n    index = 0\n    execute_on = timestep_end\n    \n  []\n  [gss_phase1]\n    type = MaterialStdVectorAux\n    variable = phase1_gss\n    property = phase1_slip_resistance\n    index = 0\n    execute_on = timestep_end\n    \n  []\n  [slip_inc_phase1]\n    type = MaterialStdVectorAux\n    variable = phase1_slip_increment\n    property = phase1_slip_increment\n    index = 0\n    execute_on = timestep_end\n    \n  []\n[]\n\n[BCs]\n  [symmy]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [symmx]\n    type = DirichletBC\n    variable = disp_x\n    boundary = left\n    value = 0\n  []\n  [tdisp]\n    type = FunctionDirichletBC\n    variable = disp_x\n    boundary = right\n    function = '0.1*t'\n  []\n[]\n\n[Materials]\n  [elasticity_tensor_phase0]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    base_name = phase0\n    \n  []\n  [stress_phase0]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_phase0'\n    rtol = 1e-06\n    tan_mod_type = exact\n    base_name = phase0\n    \n  []\n  [trial_xtalpl_phase0]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = phase0\n  []\n  [strain_phase0]\n    type = ComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n    base_name = phase0\n    #    eigenstrain_names = eigenstrain2\n  []\n\n  [elasticity_tensor_phase1]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 45.0\n    euler_angle_3 = 0.0\n    base_name = phase1\n  []\n  [stress_phase1]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_phase1'\n    rtol = 1e-06\n    tan_mod_type = exact\n    base_name = phase1\n  []\n  [trial_xtalpl_phase1]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = phase1\n  []\n\n  [strain_phase1]\n    type = ComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n    base_name = phase1\n  []\n\n  # Switching functions for each phase\n  [h0]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta0\n    all_etas = 'eta0 eta1'\n    h_name = h0\n  []\n  [h1]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta1\n    all_etas = 'eta0 eta1'\n    h_name = h1\n  []\n\n  # Generate the global stress from the phase stresses\n  [global_stress]\n    type = MultiPhaseStressMaterial\n    phase_base = 'phase0 phase1'\n    h = 'h0  h1'\n  []\n[]\n\n[Kernels]\n  [eta0_dt]\n    type = TimeDerivative\n    variable = eta0\n  []\n  [eta1_dt]\n    type = TimeDerivative\n    variable = eta1\n  []\n  [TensorMechanics]\n    displacements = 'disp_x disp_y'\n  []\n[]\n\n[Postprocessors]\n  [vonmises]\n    type = ElementAverageValue\n    variable = vonmises\n    block = 'ANY_BLOCK_ID 0'\n  []\n\n  [stress_xx]\n    type = ElementAverageValue\n    variable = stress_xx\n    \n  []\n  [pk2]\n    type = ElementAverageValue\n    variable = pk2\n   \n  []\n  [fp_xx]\n    type = ElementAverageValue\n    variable = fp_xx\n    \n  []\n  [e_xx]\n    type = ElementAverageValue\n    variable = e_xx\n  []\n  [phase0_gss]\n    type = ElementAverageValue\n    variable = phase0_gss\n  []\n  [phase0_slip_increment]\n    type = ElementAverageValue\n    variable = phase0_slip_increment\n  []\n  [phase1_gss]\n    type = ElementAverageValue\n    variable = phase1_gss\n  []\n  [phase1_slip_increment]\n    type = ElementAverageValue\n    variable = phase1_slip_increment\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = 'PJFNK'\n\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_type'\n  petsc_options_value = 'lu            superlu_dist          vinewtonrsls'\n\n  #  petsc_options_iname = '-pc_type -pc_asm_overlap -sub_pc_type -ksp_type -ksp_gmres_restart'\n  #  petsc_options_value = ' asm      2              lu            gmres     200'\n  l_max_its = 20\n  nl_max_its = 10\n  nl_rel_tol = 1.0e-8\n  nl_abs_tol = 1.0e-9\n\n  end_time = 100\n\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 5e-3\n    cutback_factor = 0.75\n    growth_factor = 1.2\n    optimal_iterations = 20\n  []\n[]\n\n[Outputs]\n  exodus = true\n  print_linear_residuals = true\n  [table]\n    type = CSV\n    execute_on = timestep_end\n  []\n  [checkpoint]\n    type = Checkpoint\n    num_files = 10\n    interval = 10\n  []\n[]\n[Debug]\n  show_material_props = true\n[]\n\nI get the error below which has something to do with e_xx, pk2, and fp_xx. I am unsure how to solve that.\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.check_inp(moose_srv)\nMaterial property 'total_lagrangian_strain', requested by 'e_xx' is not defined on block 0check_inp(moose_srv)\nMaterial property 'plastic_deformation_gradient', requested by 'fp_xx' is not defined on block 0check_inp(moose_srv)\nMaterial property 'second_piola_kirchhoff_stress', requested by 'pk2' is not defined on block 0\n\nBelow is the Debug/show_materials_property\nActive Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       strain_phase0\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\n    Active Face Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_face\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_face\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0_face\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       strain_phase0_face\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_face\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_face\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_face\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_face\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_face\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_face\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_face\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Neighboring Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_phase0_neighbor\n      Property Names:      \"phase0_Euler_angles\" \"phase0_crysrot\" \"phase0_effective_stiffness\" \"phase0_elasticity_tensor\" \n                             \n      Material Name:       stress_phase0_neighbor\n      Property Names:      \"phase0_Jacobian_mult\" \"phase0_elastic_strain\" \"phase0_plastic_deformation_gradient\" \n                             \"phase0_rotation_total\" \"phase0_second_piola_kirchhoff_stress\" \"phase0_stress\" \n                             \"phase0_total_lagrangian_strain\" \"phase0_updated_rotation\" \n      Material Name:       trial_xtalpl_phase0_neighbor\n      Property Names:      \"phase0_applied_shear_stress\" \"phase0_flow_direction\" \"phase0_slip_increment\" \n                             \"phase0_slip_resistance\" \n      Material Name:       strain_phase0_neighbor\n      Property Names:      \"phase0_deformation_gradient\" \"phase0_mechanical_strain\" \"phase0_rotation_increment\" \n                             \"phase0_strain_increment\" \"phase0_strain_rate\" \"phase0_total_strain\" \n      Material Name:       elasticity_tensor_phase1_neighbor\n      Property Names:      \"phase1_Euler_angles\" \"phase1_crysrot\" \"phase1_effective_stiffness\" \"phase1_elasticity_tensor\" \n                             \n      Material Name:       stress_phase1_neighbor\n      Property Names:      \"phase1_Jacobian_mult\" \"phase1_elastic_strain\" \"phase1_plastic_deformation_gradient\" \n                             \"phase1_rotation_total\" \"phase1_second_piola_kirchhoff_stress\" \"phase1_stress\" \n                             \"phase1_total_lagrangian_strain\" \"phase1_updated_rotation\" \n      Material Name:       trial_xtalpl_phase1_neighbor\n      Property Names:      \"phase1_applied_shear_stress\" \"phase1_flow_direction\" \"phase1_slip_increment\" \n                             \"phase1_slip_resistance\" \n      Material Name:       strain_phase1_neighbor\n      Property Names:      \"phase1_deformation_gradient\" \"phase1_mechanical_strain\" \"phase1_rotation_increment\" \n                             \"phase1_strain_increment\" \"phase1_strain_rate\" \"phase1_total_strain\" \n      Material Name:       h0_neighbor\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta1^2\" \"dh0/deta0\" \"dh0/deta1\" \n                             \"h0\" \n      Material Name:       h1_neighbor\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta1^2\" \"dh1/deta0\" \"dh1/deta1\" \n                             \"h1\" \n      Material Name:       global_stress_neighbor\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Boundary Materials:\n\n@dschwen @vprithiv @GiudGiud",
          "url": "https://github.com/idaholab/moose/discussions/27903",
          "updatedAt": "2024-06-17T16:16:55Z",
          "publishedAt": "2024-06-14T16:29:25Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nTotal_lagrangian_stress exists but has a phase0_ prefix\nSo you need to use that prefix in the requestor object\nDo you have an object that is supposed to compute homogenized properties maybe?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27903#discussioncomment-9777849",
                  "updatedAt": "2024-06-14T18:59:01Z",
                  "publishedAt": "2024-06-14T18:59:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I do not understand your question but calling the right object as you suggested solved the issue. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/27903#discussioncomment-9796268",
                          "updatedAt": "2024-06-17T15:42:51Z",
                          "publishedAt": "2024-06-17T15:42:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "version `GLIBCXX_3.4.26' not found error when building MOOSE on TACC Frontera",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (avoid screenshots if possible, triple back quotes before/after pasted text, etc)\n\nIssue or question about MOOSE\nHi all, I tried to build MOOSE on Frontera cluster using conda environment, the building process is fine, however after I submitted the job, it states version GLIBCXX_3.4.26 not found, I have looked for similar posts, which a old verision moose-tools may be the issue, but seems may not be the case here:\n(moose) login3.frontera(264)$ conda list | grep moose\n# packages in environment at /scratch1/10024/zhaochun/miniforge/envs/moose:\nmoose-dev                 2024.05.13              build_0    https://conda.software.inl.gov/public\nmoose-libmesh             2024.05.05              build_0    https://conda.software.inl.gov/public\nmoose-libmesh-vtk         9.2.6                   build_9    https://conda.software.inl.gov/public\nmoose-mpich               4.0.2                  build_16    https://conda.software.inl.gov/public\nmoose-peacock             2023.04.11           hb6770a3_0    https://conda.software.inl.gov/public\nmoose-petsc               3.20.3                  build_1    https://conda.software.inl.gov/public\nmoose-tools               2024.05.02           h4a78fc2_0    https://conda.software.inl.gov/public\nmoose-wasp                2024.05.08              build_0    https://conda.software.inl.gov/public\n\nThe slurm job script is like this:\n#!/bin/bash\n#SBATCH -J smeared           # Job name\n#SBATCH -o smeared.o%j       # Name of stdout output file\n#SBATCH -e smeared.e%j       # Name of stderr error file\n#SBATCH -p normal          # Queue (partition) name\n#SBATCH -N 4               # Total # of nodes \n#SBATCH -n 40              # Total # of mpi tasks\n#SBATCH -t 01:30:00        # Run time (hh:mm:ss)\n#SBATCH --mail-type=all    # Send email at begin and end of job\n#SBATCH -A *********       # Project/Allocation name (req'd if you have more than 1)\n#SBATCH --mail-user=chunhui3@illinois.edu\n\n# Any other commands must follow all #SBATCH directives...\nconda activate moose\n\n# Launch MPI code... \nibrun ./farms-opt -i /scratch1/10024/zhaochun/projects/farms/examples/smeared_cracking/smeared_model.i   # Use ibrun instead of mpirun or mpiexec\n\nAny suggestion is appreciated!\nDiagnostics for MOOSE installation issues\n[Optional] Output of the diagnostics scripts. To run the script: cd ~/projects/moose/scripts; ./diagnostics.sh",
          "url": "https://github.com/idaholab/moose/discussions/27838",
          "updatedAt": "2024-06-17T13:11:02Z",
          "publishedAt": "2024-06-09T21:23:09Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIn the job submission script do you load the entire environnement that you used for building the code?\nNot only conda but also the modules\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9721685",
                  "updatedAt": "2024-06-09T23:54:43Z",
                  "publishedAt": "2024-06-09T23:54:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi Guid, I checked the module list:\n(base) login1.frontera(288)$ module list\n\nCurrently Loaded Modules:\n  1) intel/19.1.1   2) impi/19.0.9   3) git/2.24.1   4) autotools/1.2   5) python3/3.7.0   6) cmake/3.24.2   7) hwloc/1.11.12   8) xalt/2.10.34   9) TACC\n\nI have included them all, but it doesn't work:\n# Any other commands must follow all #SBATCH directives...\nmodule purge\nmodule load intel/19.1.1\nmodule load impi/19.0.9\nmodule load python3/3.7.0\nmodule load cmake/3.24.2\nmodule load autotools/1.2\nmodule load hwloc/1.11.12\nmodule load xalt/2.10.34\nmodule load TACC\nconda activate moose",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9731793",
                          "updatedAt": "2024-06-10T21:19:04Z",
                          "publishedAt": "2024-06-10T21:12:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi @milljm, sorry to bother you again, I wonder do you have any idea on this? Much appreciated!",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9731849",
                          "updatedAt": "2024-06-10T21:21:20Z",
                          "publishedAt": "2024-06-10T21:21:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You have loaded the intel compilers\nWe do not support those.\nUse GCC or clang",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9732071",
                          "updatedAt": "2024-06-10T21:57:30Z",
                          "publishedAt": "2024-06-10T21:57:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "I see, I changed but it still gives the same error, i think maybe I should rebuild moose with the correct modules loaded?",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9732094",
                          "updatedAt": "2024-06-10T22:02:35Z",
                          "publishedAt": "2024-06-10T22:02:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You ll need to rebuild with the new compiler indeed",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9732649",
                          "updatedAt": "2024-06-11T00:09:58Z",
                          "publishedAt": "2024-06-11T00:09:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "it seems like Frontera only has intel compiler:\n(moose) login3.frontera(368)$ module spider mpi\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  boost-mpi:\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    Description:\n      Boost provides free peer-reviewed portable C++ source libraries.\n\n     Versions:\n        boost-mpi/1.69\n        boost-mpi/1.72\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  For detailed information about a specific \"boost-mpi\" package (including how to load the modules) use the module's full name.\n  Note that names that have a trailing (E) are extensions provided by other modules.\n  For example:\n\n     $ module spider boost-mpi/1.72\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  impi:\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    Description:\n      Intel MPI Library (C/C++/Fortran for x86_64)\n\n     Versions:\n        impi/18.0.5\n        impi/19.0.5\n        impi/19.0.7\n        impi/19.0.9\n        impi/21.9.0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  For detailed information about a specific \"impi\" package (including how to load the modules) use the module's full name.\n  Note that names that have a trailing (E) are extensions provided by other modules.\n  For example:\n\n     $ module spider impi/21.9.0\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nShould I install openmpi myself?",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9733223",
                          "updatedAt": "2024-06-11T01:51:49Z",
                          "publishedAt": "2024-06-11T01:51:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can do that but the performance might be limited.\nIdeally you ask the cluster managers to do that for you",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9735010",
                          "updatedAt": "2024-06-11T06:51:25Z",
                          "publishedAt": "2024-06-11T06:51:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "You can attempt to build everything from scratch using the available Intel compiler, but @GiudGiud is correct, we cannot offer more support other than a best effort. If the code does not compile, we usually end up hitting a wall.\nCan you get into the following state for us?\n(base) login1.frontera(288)$ module list\n\nCurrently Loaded Modules:\n  1) intel/19.1.1    2) impi/19.0.9    3) git/2.24.1      4) autotools/1.2   \n  5) python3/3.7.0   6) cmake/3.24.2   7) hwloc/1.11.12   8) xalt/2.10.34   9) TACC\nAt which time, we then create a blank Conda environment, so as to try and divorce ourselves from any binaries/libraries supplied by Conda:\nconda create -n blank --yes\nconda activate blank\nFrom here, I'd like to see how the env looks so far:\ncd ~/projects/moose/scripts\n./diagnostics.sh\nPlease report back with the above results. I'd like to see if CC, CXX, FC, etc environment variables are populated correctly. If you see an OK status in every field, please continue on:\nClean previous build (see important note below first!):\ncd ~/projects/moose\ngit clean -xfd; git submodule foreach --recursive git clean -xfd\ncd ~/projects/farms\ngit clean -xfd\nImportantbe sure to save any uncommitted work before running above commands\n\nNext, build the support libraries, stopping along the way if there is an error:\nexport METHODS=opt MOOSE_JOBS=6\ncd ~/projects/moose/scripts\n./update_and_rebuild_petsc.sh\n./update_and_rebuild_llibmesh.sh\n./update_and_rebuild_wasp.sh\nIf we make it this far, next try to build your app! If not, please report the error.\nI hope this works! Sometimes Intel works fine for us, sometimes not.",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9738736",
                          "updatedAt": "2024-06-11T12:31:44Z",
                          "publishedAt": "2024-06-11T12:31:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Intel won't compile. Others have tried. The support for templating does not meet the latest C++ standards",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9739586",
                          "updatedAt": "2024-06-11T13:47:02Z",
                          "publishedAt": "2024-06-11T13:47:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Oh, is intel/19.1.1 too old? I wasn't sure...",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9739644",
                          "updatedAt": "2024-06-11T13:52:57Z",
                          "publishedAt": "2024-06-11T13:52:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "chunhuizhao478"
                  },
                  "bodyText": "I also attempt to build from source, by loading the following modules:\nlogin3.frontera(463)$ module list\n\nCurrently Loaded Modules:\n  1) gcc/9.1.0   2) cmake/3.29.5   3) mvapich2-x/2.3   4) python3/3.9.2\n\nBut when I try to build petsc, it throws error at the start:\nlogin3.frontera(471)$ ./update_and_rebuild_petsc.sh\n/scratch1/10024/zhaochun/projects/moose/scripts\nINFO: Checking for HDF5...\nINFO: HDF5 library not detected, opting to download via PETSc...\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nThe version of PETSc you are using is out-of-date, we recommend updating to the new release\n Available Version: 3.21.2   Installed Version: 3.20.3\nhttps://petsc.org/release/download/\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n=============================================================================================\n                         Configuring PETSc to compile on your system\n=============================================================================================\n=============================================================================================\n                                     ***** WARNING *****\n  Found environment variable: CC=mpicc. Ignoring it! Use \"./configure CC=$CC\" if you really\n  want to use this value\n=============================================================================================\n=============================================================================================\n                                     ***** WARNING *****\n  Found environment variable: CXX=mpicxx. Ignoring it! Use \"./configure CXX=$CXX\" if you\n  really want to use this value\n=============================================================================================\n=============================================================================================\n                                     ***** WARNING *****\n  Found environment variable: FC=mpif90. Ignoring it! Use \"./configure FC=$FC\" if you\n  really want to use this value\n=============================================================================================\n=============================================================================================\n                                     ***** WARNING *****\n  Found environment variable: F77=mpif77. Ignoring it! Use \"./configure F77=$F77\" if you\n  really want to use this value\n=============================================================================================\n=============================================================================================\n                                     ***** WARNING *****\n  Found environment variable: F90=mpif90. Ignoring it! Use \"./configure F90=$F90\" if you\n  really want to use this value\n=============================================================================================\nTESTING: checkCxxDialect from config.setCompilers(config/BuildSystem/config/setCompilers.py:773)\n*********************************************************************************************\n           UNABLE to CONFIGURE with GIVEN OPTIONS (see configure.log for details):\n---------------------------------------------------------------------------------------------\n  Using CUDA dialect C++11 as lower bound due to package(s):\n  - hypre\n  - strumpack\n  - SuperLU_DIST\n  But CUDA compiler (clang) appears non-compliant with C++11 or didn't accept:\n  - -std=gnu++20\n  - -std=c++20\n  - -std=gnu++17\n  - -std=c++17\n  - -std=gnu++14\n  - -std=c++14\n  - -std=gnu++11\n  - -std=c++11\n*********************************************************************************************\n\nThere was an error. Exiting...\n\nI wonder how to solve it? Thanks!",
                  "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9776426",
                  "updatedAt": "2024-06-14T15:59:19Z",
                  "publishedAt": "2024-06-14T15:59:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "How did clang get pulled in?\nThe MPI distribution for this GCC ?",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9777830",
                          "updatedAt": "2024-06-14T18:56:04Z",
                          "publishedAt": "2024-06-14T18:56:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "I'm not sure.. I asked consultant of TACC, this is the reply, not sure if it helps:\nFirst of all, petsc/3.21 is already installed on the system. Can you use that?\n\nSecondly, the error message says something about CUDA. Are you indeed\ninstalling something that requires CUDA? If CUDA is optional, can you first\ntry without?\n\nVictor.",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9788002",
                          "updatedAt": "2024-06-16T18:22:17Z",
                          "publishedAt": "2024-06-16T18:22:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Perhaps Intel calls it something different. Can you perform the following:\nexport FC=mpif90\nexport F90=mpif90\nexport F77=mpif90\nAnd then run the diagnostic again:\n./diagnostics.sh",
                          "url": "https://github.com/idaholab/moose/discussions/27838#discussioncomment-9794585",
                          "updatedAt": "2024-06-17T13:11:02Z",
                          "publishedAt": "2024-06-17T13:11:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}