{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNS0xNlQxMDoyMjowNC0wNTowMM4AT1-Z"
    },
    "edges": [
      {
        "node": {
          "title": "PorousFlow: Hydromechanical Iterative Coupling Question",
          "author": {
            "login": "jrpatterson79"
          },
          "bodyText": "Hello friends,\nFirst time poster and new user to the MOOSE framework. I'm working to build a coupled hydromechanical discrete fracture model. My starting point is a 2D penny-shaped, horizontal, fracture embedded in a 3D rock mesh. I would like to use an iterative coupling scheme to couple the hydraulic problem to the quasi-static linear elastic mechanical problem using Multi-Apps and Transfers.\nI can run the model, in its current form, to completion without Picard (Fixed Point) iterations; however, when I add the Fixed Point iterations to the Executioner block I get the error below. I read this error as saying my injection location (a Dirac kernel) has the same node ID as one of the nodes in the 3D mesh, but I'm not sure how to correct it. Does anyone have any insights they can share?\n*** ERROR ***\nThe following error occurred in the object \"pp_from_frac\", of type \"ReporterPointSource\".\n\nCached Dirac point (x,y,z)=(       0,        0,        0) already exists with ID: 0 and does not match point (x,y,z)=( 9.69032,  92.1973,        0)\n\nThe input files are located at https://github.com/jrpatterson79/testing\nI updated MOOSE and all packages in the mamba moose environment this morning to ensure I'm running with the most recent release and package versions.\nThanks in advance,\nJ Patt",
          "url": "https://github.com/idaholab/moose/discussions/24367",
          "updatedAt": "2023-05-17T13:47:53Z",
          "publishedAt": "2023-05-15T19:43:08Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I'm not sure if I can help with this problem but just wanted to say this looks really cool! Hopefully it is something simple that one of the MOOSE team can help with.",
                  "url": "https://github.com/idaholab/moose/discussions/24367#discussioncomment-5910481",
                  "updatedAt": "2023-05-16T00:12:42Z",
                  "publishedAt": "2023-05-16T00:12:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "let me take a look today",
                          "url": "https://github.com/idaholab/moose/discussions/24367#discussioncomment-5916351",
                          "updatedAt": "2023-05-16T13:09:16Z",
                          "publishedAt": "2023-05-16T13:09:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok I found the issue, the cache is not cleared and the reporter values (giving the points) change.\nI dont think this was in whoever designed Dirac Kernel's objectives to have moving points. It might not be too difficult to fix though",
                          "url": "https://github.com/idaholab/moose/discussions/24367#discussioncomment-5919865",
                          "updatedAt": "2023-05-16T18:46:37Z",
                          "publishedAt": "2023-05-16T18:46:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For right now you can either check out my PR\n#24400\nor work with this object\nhttps://mooseframework.inl.gov/source/dirackernels/ReporterTimePointSource.html",
                          "url": "https://github.com/idaholab/moose/discussions/24367#discussioncomment-5920179",
                          "updatedAt": "2023-05-16T19:28:50Z",
                          "publishedAt": "2023-05-16T19:28:49Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jrpatterson79"
                          },
                          "bodyText": "@GiudGiud, thank you for making the time to have a look and offer your insight. I will see what I can do with the ReporpterTimePointSource while the PR is being reviewed for merge.",
                          "url": "https://github.com/idaholab/moose/discussions/24367#discussioncomment-5927972",
                          "updatedAt": "2023-05-17T13:47:36Z",
                          "publishedAt": "2023-05-17T13:47:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about the Hw in Custom Closures",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "@joshuahansel @licharlot\nI write an input file which calculates a 7-rods case(with 18 channels). I'm not sure if I use the custom closures in the right way.\nHere is the picture of the assembly:\n\nIn my understanding, if there is only one heat structure connected with a flow channel, the heat transfer coefficient is Hw by default. And if there are two heat structures connected with a flow channel, the heat transfer coefficients are Hw:1 and Hw:2(3 hs case, the heat transfer coefficients are Hw:1 Hw:2 and Hw:3).  The problem is that all these 3 cases appear in my input file.\nFor example, there should only be a Hw in channel1 which connected to rod1.  But for channel2, there should be Hw:1 and Hw:2, right? I write the input file in this way and meet an error: the terminal says that I should define Hw in channel2 and I can't understand why. But I still define Hw in all flow channels(to avoid error).\nAnd the input file is:\nT_in = 522.436        # K\n# m_dot_in = 1e-4     # kg/s\npress = 101325        # Pa\n\nflow_blocks = 'core_chan1 core_chan2 core_chan3 core_chan4 core_chan5 core_chan6\n               core_chan7 core_chan8 core_chan9 core_chan10 core_chan11 core_chan12\n               core_chan13 core_chan14 core_chan15 core_chan16 core_chan17 core_chan18'\n# ht_blocks_1SC = 'core_chan1 core_chan3 core_chan9 core_chan10 core_chan16 core_chan18'\nht_blocks_2SC = 'core_chan2 core_chan4 core_chan5 core_chan6 core_chan7 core_chan8\n                 core_chan11 core_chan12 core_chan13 core_chan14 core_chan15 core_chan17'\nht_blocks_3SC = 'core_chan6 core_chan7 core_chan8 core_chan11 core_chan12 core_chan13'\n\n\n[GlobalParams]\n  initial_p = ${press}\n  initial_vel = 0\n  initial_T = ${T_in}\n\n  rdg_slope_reconstruction = full\n  closures = simple_closures\n  fp = Lead\n  pitch = 0.023\n  rod_diameter = 0.012\n#  wire_lead = 0.3048\n#  f = 0.033\n#  Hw = 343.173\n[]\n\n[FluidProperties]\n  [./Lead]\n    type = LeadBismuthFluidProperties_zxy\n  [../]\n[]\n\n[Functions]\n  [PowerDistribution]\n    type = ParsedFunction\n    expression = sin(5*pi*z/3)\n  [../]\n[]\n\n[Materials]\n  [f_mat]\n    type = ADWallFrictionChurchillMaterial\n    D_h = D_h\n    f_D = f_D\n    mu = mu\n    rho = rho\n    vel = vel\n    block = ${flow_blocks}\n  [../]\n  [Hw_mat]\n    type = ADWallHeatTransferCoefficientMikityukMaterial\n    D_h = D_h\n    rho = rho\n    vel = vel\n    T = T\n    cp = cp\n    mu = mu\n    k = k\n    Hw = Hw\n    block = ${flow_blocks}\n  [../]\n  [Hw1_mat]\n    type = ADWallHeatTransferCoefficientMikityukMaterial\n    D_h = D_h\n    rho = rho\n    vel = vel\n    T = T\n    cp = cp\n    mu = mu\n    k = k\n    Hw = Hw:1\n    block = ${ht_blocks_2SC}\n  [../]\n  [Hw2_mat]\n    type = ADWallHeatTransferCoefficientMikityukMaterial\n    D_h = D_h\n    rho = rho\n    vel = vel\n    T = T\n    cp = cp\n    mu = mu\n    k = k\n    Hw = Hw:2\n    block = ${ht_blocks_2SC}\n  [../]\n  [Hw3_mat]\n    type = ADWallHeatTransferCoefficientMikityukMaterial\n    D_h = D_h\n    rho = rho\n    vel = vel\n    T = T\n    cp = cp\n    mu = mu\n    k = k\n    Hw = Hw:3\n    block = ${ht_blocks_3SC}\n  [../]\n[]\n\n[Closures]\n  [simple_closures]\n#    type = Closures1PhaseSimple\n    type = Closures1PhaseNone\n  []\n[]\n\n[HeatStructureMaterials]\n  [fuel-mat]\n    type = SolidMaterialProperties\n    k = 15\n    cp = 460\n    rho = 8.4e3\n  [../]\n#  [gap-mat]\n#    type = SolidMaterialProperties\n#    k = 0.027\n#    cp = 1007\n#    rho = 0.43\n#  []\n#  [clad-mat]\n#    type = SolidMaterialProperties\n#    k = 20\n#    cp = 450\n#    rho = 7.95e3\n#  []\n[]\n\n[Components]\n  [total_power]\n    type = TotalPower\n    power = 3335.933\n  [../]\n  [./inlet1]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan1:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan1]\n    type = FlowChannel1Phase\n    position = '-0.015 -0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet1]\n    type = Outlet1Phase\n    input = 'core_chan1:out'\n    p = ${press}\n  [../]\n  [./inlet2]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan2:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan2]\n    type = FlowChannel1Phase\n    position = '0 -0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet2]\n    type = Outlet1Phase\n    input = 'core_chan2:out'\n    p = ${press}\n  [../]\n  [./inlet3]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan3:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan3]\n    type = FlowChannel1Phase\n    position = '0.015 -0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet3]\n    type = Outlet1Phase\n    input = 'core_chan3:out'\n    p = ${press}\n  [../]\n  [./inlet4]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan4:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan4]\n    type = FlowChannel1Phase\n    position = '-0.0225 -0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet4]\n    type = Outlet1Phase\n    input = 'core_chan4:out'\n    p = ${press}\n  [../]\n  [./inlet5]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan5:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan5]\n    type = FlowChannel1Phase\n    position = '0.0225 -0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet5]\n    type = Outlet1Phase\n    input = 'core_chan5:out'\n    p = ${press}\n  [../]\n  [./inlet6]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan6:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan6]\n    type = FlowChannel1Phase\n    position = '0 -0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet6]\n    type = Outlet1Phase\n    input = 'core_chan6:out'\n    p = ${press}\n  [../]\n  [./inlet7]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan7:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan7]\n    type = FlowChannel1Phase\n    position = '-0.01125 -0.006495 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet7]\n    type = Outlet1Phase\n    input = 'core_chan7:out'\n    p = ${press}\n  [../]\n  [./inlet8]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan8:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan8]\n    type = FlowChannel1Phase\n    position = '0.01125 -0.006495 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet8]\n    type = Outlet1Phase\n    input = 'core_chan8:out'\n    p = ${press}\n  [../]\n  [./inlet9]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan9:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan9]\n    type = FlowChannel1Phase\n    position = '-0.03 0 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet9]\n    type = Outlet1Phase\n    input = 'core_chan9:out'\n    p = ${press}\n  [../]\n  [./inlet10]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan10:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan10]\n    type = FlowChannel1Phase\n    position = '0.03 0 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet10]\n    type = Outlet1Phase\n    input = 'core_chan10:out'\n    p = ${press}\n  [../]\n  [./inlet11]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan11:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan11]\n    type = FlowChannel1Phase\n    position = '-0.01125 0.006495 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet11]\n    type = Outlet1Phase\n    input = 'core_chan11:out'\n    p = ${press}\n  [../]\n  [./inlet12]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan12:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan12]\n    type = FlowChannel1Phase\n    position = '0.01125 0.006495 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet12]\n    type = Outlet1Phase\n    input = 'core_chan12:out'\n    p = ${press}\n  [../]\n  [./inlet13]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan13:in'\n    m_dot = 0.0735\n    T = ${T_in}\n  [../]\n  [core_chan13]\n    type = FlowChannel1Phase\n    position = '0 0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 172.515e-6\n    D_h = 36.608e-3\n  [../]\n  [outlet13]\n    type = Outlet1Phase\n    input = 'core_chan13:out'\n    p = ${press}\n  [../]\n  [./inlet14]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan14:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan14]\n    type = FlowChannel1Phase\n    position = '-0.0225 0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet14]\n    type = Outlet1Phase\n    input = 'core_chan14:out'\n    p = ${press}\n  [../]\n  [./inlet15]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan15:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan15]\n    type = FlowChannel1Phase\n    position = '0.0225 0.01299 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet15]\n    type = Outlet1Phase\n    input = 'core_chan15:out'\n    p = ${press}\n  [../]\n  [./inlet16]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan16:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan16]\n    type = FlowChannel1Phase\n    position = '-0.015 0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet16]\n    type = Outlet1Phase\n    input = 'core_chan16:out'\n    p = ${press}\n  [../]\n  [./inlet17]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan17:in'\n    m_dot = 0.1124\n    T = ${T_in}\n  [../]\n  [core_chan17]\n    type = FlowChannel1Phase\n    position = '0 0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 263.874e-6\n    D_h = 25.221e-3\n  [../]\n  [outlet17]\n    type = Outlet1Phase\n    input = 'core_chan17:out'\n    p = ${press}\n  [../]\n  [./inlet18]\n    type = InletMassFlowRateTemperature1Phase\n    input = 'core_chan18:in'\n    m_dot = 0.0394\n    T = ${T_in}\n  [../]\n  [core_chan18]\n    type = FlowChannel1Phase\n    position = '0.015 0.02598 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    A = 92.598e-6\n    D_h = 16.622e-3\n  [../]\n  [outlet18]\n    type = Outlet1Phase\n    input = 'core_chan18:out'\n    p = ${press}\n  [../]\n  [7RODS]\n    type = FLARE_7RODS_TEST\n    flow_channel1 = core_chan1\n    flow_channel2 = core_chan2\n    flow_channel3 = core_chan3\n    flow_channel4 = core_chan4\n    flow_channel5 = core_chan5\n    flow_channel6 = core_chan6\n    flow_channel7 = core_chan7\n    flow_channel8 = core_chan8\n    flow_channel9 = core_chan9\n    flow_channel10 = core_chan10\n    flow_channel11 = core_chan11\n    flow_channel12 = core_chan12\n    flow_channel13 = core_chan13\n    flow_channel14 = core_chan14\n    flow_channel15 = core_chan15\n    flow_channel16 = core_chan16\n    flow_channel17 = core_chan17\n    flow_channel18 = core_chan18\n  [../]\n  [ROD1]\n    type = HeatStructureCylindrical\n    position = '-0.0115 -0.0199 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD2]\n    type = HeatStructureCylindrical\n    position = '0.0115 -0.0199 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD3]\n    type = HeatStructureCylindrical\n    position = '-0.023 0 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD4]\n    type = HeatStructureCylindrical\n    position = '0 0 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD5]\n    type = HeatStructureCylindrical\n    position = '0.023 0 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD6]\n    type = HeatStructureCylindrical\n    position = '-0.0115 0.0199 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [ROD7]\n    type = HeatStructureCylindrical\n    position = '0.0115 0.0199 0'\n    orientation = '0 0 1'\n    length = 0.6\n    n_elems = 60\n    initial_T = 522.436\n    names = 'fuel'\n    widths = '0.006'\n    n_part_elems = '5'\n    materials = 'fuel-mat'\n  [../]\n  [HeatSource1]\n    type = HeatSourceFromTotalPower\n    hs = ROD1\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource2]\n    type = HeatSourceFromTotalPower\n    hs = ROD2\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource3]\n    type = HeatSourceFromTotalPower\n    hs = ROD3\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource4]\n    type = HeatSourceFromTotalPower\n    hs = ROD4\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource5]\n    type = HeatSourceFromTotalPower\n    hs = ROD5\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource6]\n    type = HeatSourceFromTotalPower\n    hs = ROD6\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [HeatSource7]\n    type = HeatSourceFromTotalPower\n    hs = ROD7\n    regions = 'fuel'\n    power = total_power\n    power_shape_function = PowerDistribution\n    power_fraction = 0.142857\n  [../]\n  [ROD1_FLOWSC1]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan1\n    hs = ROD1\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n  [ROD1_FLOWSC2]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan2\n    hs = ROD1\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD1_FLOWSC4]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan4\n    hs = ROD1\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD1_FLOWSC6]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan6\n    hs = ROD1\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD1_FLOWSC7]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan7\n    hs = ROD1\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD2_FLOWSC2]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan2\n    hs = ROD2\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD2_FLOWSC3]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan3\n    hs = ROD2\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n  [ROD2_FLOWSC5]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan5\n    hs = ROD2\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD2_FLOWSC6]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan6\n    hs = ROD2\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD2_FLOWSC8]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan8\n    hs = ROD2\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD3_FLOWSC4]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan4\n    hs = ROD3\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD3_FLOWSC7]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan7\n    hs = ROD3\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD3_FLOWSC9]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan9\n    hs = ROD3\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n  [ROD3_FLOWSC11]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan11\n    hs = ROD3\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD3_FLOWSC14]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan14\n    hs = ROD3\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD4_FLOWSC6]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan6\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD4_FLOWSC7]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan7\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD4_FLOWSC8]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan8\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD4_FLOWSC11]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan11\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD4_FLOWSC12]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan12\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD4_FLOWSC13]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan13\n    hs = ROD4\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:1\n  [../]\n  [ROD5_FLOWSC5]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan5\n    hs = ROD5\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD5_FLOWSC8]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan8\n    hs = ROD5\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD5_FLOWSC10]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan10\n    hs = ROD5\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n  [ROD5_FLOWSC12]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan12\n    hs = ROD5\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD5_FLOWSC15]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan15\n    hs = ROD5\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD6_FLOWSC11]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan11\n    hs = ROD6\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD6_FLOWSC13]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan13\n    hs = ROD6\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:2\n  [../]\n  [ROD6_FLOWSC14]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan14\n    hs = ROD6\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD6_FLOWSC16]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan16\n    hs = ROD6\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n  [ROD6_FLOWSC17]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan17\n    hs = ROD6\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:1\n  [../]\n  [ROD7_FLOWSC12]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan12\n    hs = ROD7\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD7_FLOWSC13]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan13\n    hs = ROD7\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw:3\n  [../]\n  [ROD7_FLOWSC15]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan15\n    hs = ROD7\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD7_FLOWSC17]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan17\n    hs = ROD7\n    hs_side = outer\n    P_hf = 0.0377/4\n    Hw = Hw:2\n  [../]\n  [ROD7_FLOWSC18]\n    type = HeatTransferFromHeatStructure1Phase\n    flow_channel = core_chan18\n    hs = ROD7\n    hs_side = outer\n    P_hf = 0.0377/6\n    Hw = Hw\n  [../]\n[]\n\n[Preconditioning]\n  [./a]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[VectorPostprocessors]\n  [./T_SC_CORNER1]\n    type = ElementValueSampler\n    variable = T\n    sort_by = z\n    block = 8\n  [../]\n  [./T_SC_CORNER2]\n    type = ElementValueSampler\n    variable = T\n    sort_by = z\n    block = 0\n  [../]\n  [./T_SC_SIDE]\n    type = ElementValueSampler\n    variable = T\n    sort_by = z\n    block = 16\n  [../]\n  [./T_SC_CENTER]\n    type = ElementValueSampler\n    variable = T\n    sort_by = z\n    block = 7\n  [../]\n#  [./M_SC_CORNER]\n#    type = ElementValueSampler\n#    variable = rhouA\n#    sort_by = z\n#    block = 8\n#  [../]\n#  [./M_SC_SIDE]\n#    type = ElementValueSampler\n#    variable = rhouA\n#    sort_by = z\n#    block = 16\n#  [../]\n#  [./M_SC_CENTER]\n#    type = ElementValueSampler\n#    variable = rhouA\n#    sort_by = z\n#    block = 7\n#  [../]\n[]\n\n[Executioner]\n  type = Transient\n  start_time = 0\n  end_time = 200\n  dt = 1\n\n# line_search = basic\n  solve_type = 'PJFNK'\n  l_max_its = 100\n\n  nl_rel_tol = 1e-5\n  nl_abs_tol = 1e-5\n  nl_max_its = 100\n\n  automatic_scaling = true\n  off_diagonals_in_auto_scaling = true\n  line_search = 'none'\n\n  petsc_options = '-ksp_type<preonly>'\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n\n[]\n\n[Outputs]\n  exodus = true\n  [CSV]\n    type = CSV\n    start_time = 190\n    end_time = 200\n  [../]\n[]\n\nBtw, the ADWallHeatTransferCoefficientMikityukMaterial closure is defined by me, which don't need the T_wall.\nI don't know if this input file is right. Can anybody help me?\nEthan",
          "url": "https://github.com/idaholab/moose/discussions/24197",
          "updatedAt": "2023-05-17T12:53:04Z",
          "publishedAt": "2023-04-27T13:52:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "meet an error: the terminal says that I should define Hw in channel2\n\nCan you post this error message?",
                  "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5745109",
                  "updatedAt": "2023-04-27T16:23:27Z",
                  "publishedAt": "2023-04-27T16:23:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "OK. When I only set Hw in the corner flow channel like this:\n  [Hw_mat]\n    type = ADWallHeatTransferCoefficientMikityukMaterial\n    D_h = D_h\n    rho = rho\n    vel = vel\n    T = T\n    cp = cp\n    mu = mu\n    k = k\n    Hw = Hw\n    block = ${ht_blocks_1SC}\n  [../]\n\nAnd ht_blocks_1SC is like:\nht_blocks_1SC = 'core_chan1 core_chan3 core_chan9 core_chan10 core_chan16 core_chan18'\nThe error is:\n*** ERROR ***\nThe following error occurred in the object \"THM:problem\", of type \"THMProblem\".\n\nMaterial property 'Hw', requested by 'core_chan2:avg_T_wall_3eqn_mat' is not defined on block core_chan2\nMaterial property 'Hw', requested by 'core_chan2:avg_T_wall_3eqn_mat_face' is not defined on block core_chan2\nMaterial property 'Hw', requested by 'core_chan2:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan2\nMaterial property 'Hw', requested by 'core_chan4:avg_T_wall_3eqn_mat' is not defined on block core_chan4\nMaterial property 'Hw', requested by 'core_chan4:avg_T_wall_3eqn_mat_face' is not defined on block core_chan4\nMaterial property 'Hw', requested by 'core_chan4:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan4\nMaterial property 'Hw', requested by 'core_chan5:avg_T_wall_3eqn_mat' is not defined on block core_chan5\nMaterial property 'Hw', requested by 'core_chan5:avg_T_wall_3eqn_mat_face' is not defined on block core_chan5\nMaterial property 'Hw', requested by 'core_chan5:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan5\nMaterial property 'Hw', requested by 'core_chan6:avg_T_wall_3eqn_mat' is not defined on block core_chan6\nMaterial property 'Hw', requested by 'core_chan6:avg_T_wall_3eqn_mat_face' is not defined on block core_chan6\nMaterial property 'Hw', requested by 'core_chan6:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan6\nMaterial property 'Hw', requested by 'core_chan7:avg_T_wall_3eqn_mat' is not defined on block core_chan7\nMaterial property 'Hw', requested by 'core_chan7:avg_T_wall_3eqn_mat_face' is not defined on block core_chan7\nMaterial property 'Hw', requested by 'core_chan7:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan7\nMaterial property 'Hw', requested by 'core_chan8:avg_T_wall_3eqn_mat' is not defined on block core_chan8\nMaterial property 'Hw', requested by 'core_chan8:avg_T_wall_3eqn_mat_face' is not defined on block core_chan8\nMaterial property 'Hw', requested by 'core_chan8:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan8\nMaterial property 'Hw', requested by 'core_chan11:avg_T_wall_3eqn_mat' is not defined on block core_chan11\nMaterial property 'Hw', requested by 'core_chan11:avg_T_wall_3eqn_mat_face' is not defined on block core_chan11\nMaterial property 'Hw', requested by 'core_chan11:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan11\nMaterial property 'Hw', requested by 'core_chan12:avg_T_wall_3eqn_mat' is not defined on block core_chan12\nMaterial property 'Hw', requested by 'core_chan12:avg_T_wall_3eqn_mat_face' is not defined on block core_chan12\nMaterial property 'Hw', requested by 'core_chan12:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan12\nMaterial property 'Hw', requested by 'core_chan13:avg_T_wall_3eqn_mat' is not defined on block core_chan13\nMaterial property 'Hw', requested by 'core_chan13:avg_T_wall_3eqn_mat_face' is not defined on block core_chan13\nMaterial property 'Hw', requested by 'core_chan13:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan13\nMaterial property 'Hw', requested by 'core_chan14:avg_T_wall_3eqn_mat' is not defined on block core_chan14\nMaterial property 'Hw', requested by 'core_chan14:avg_T_wall_3eqn_mat_face' is not defined on block core_chan14\nMaterial property 'Hw', requested by 'core_chan14:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan14\nMaterial property 'Hw', requested by 'core_chan15:avg_T_wall_3eqn_mat' is not defined on block core_chan15\nMaterial property 'Hw', requested by 'core_chan15:avg_T_wall_3eqn_mat_face' is not defined on block core_chan15\nMaterial property 'Hw', requested by 'core_chan15:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan15\nMaterial property 'Hw', requested by 'core_chan17:avg_T_wall_3eqn_mat' is not defined on block core_chan17\nMaterial property 'Hw', requested by 'core_chan17:avg_T_wall_3eqn_mat_face' is not defined on block core_chan17\nMaterial property 'Hw', requested by 'core_chan17:avg_T_wall_3eqn_mat_neighbor' is not defined on block core_chan17\n\n\nStack frames: 14\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: callMooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, MooseApp*)\n3: /home/linux/projects/moose/framework/libmoose-opt.so.0(+0x88e6bd) [0x7f29990db6bd]\n4: SubProblem::checkBlockMatProps()\n5: FEProblemBase::checkProblemIntegrity()\n6: Action::timedAct()\n7: ActionWarehouse::executeActionsWithAction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n8: ActionWarehouse::executeAllActions()\n9: MooseApp::runInputFile()\n10: MooseApp::run()\n11: main\n12: __libc_start_main\n13: ./flare-opt(+0x33ef) [0x55a07b44d3ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5745439",
                          "updatedAt": "2023-04-27T16:59:44Z",
                          "publishedAt": "2023-04-27T16:59:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "licharlot"
                          },
                          "bodyText": "If you have several heat transfers, the Closures1PhaseNone will calculate an average wall temperature, using an user-defined material Hw.  This is why you have an error if you don't define it. We should probably remove that from the code. Anyways, I think your input file is ok. Is it giving you correct results?\nLise",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5746535",
                          "updatedAt": "2023-04-27T19:03:43Z",
                          "publishedAt": "2023-04-27T19:03:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Oh, I have the guess that maybe the Hw is some average value.\nThe result is not that good. The fluid is LBE. The average temperature rise is OK. And for the specific flow channel, the temperature rise of center channel should be higher than the temperature rise of side and corner channel. But their temperature rise are nearly the same.\nIf the input file is OK, maybe there're some problems with the new closure.\nAnd I remember one thing that maybe causes the problem:\nThe FlowChannel1Phase need e_from_v_h.But there is no e_from_v_h in LeadBismuthFluidProperties.\nSo I define a e_from_v_h in the LeadBismuthFluidProperties_zxy. But I'm not sure if this is right.\nIs there anyway to replace the e_from_v_h in FlowChannel1Phase by e_from_p_T? If so, we can directly use liquid metal material in FlowChannel1Phase.\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5749553",
                          "updatedAt": "2023-04-28T05:28:17Z",
                          "publishedAt": "2023-04-28T02:58:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "The FlowChannel1Phase need e_from_v_h.But there is no e_from_v_h in LeadBismuthFluidProperties.\nSo I define a e_from_v_h in the LeadBismuthFluidProperties_zxy. But I'm not sure if this is right.\nIs there anyway to replace the e_from_v_h in FlowChannel1Phase by e_from_p_T? If so, we can directly use liquid metal material in FlowChannel1Phase.\n\nThis we can address fairly easily. I'll do it now.",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5753792",
                          "updatedAt": "2023-04-28T12:13:41Z",
                          "publishedAt": "2023-04-28T12:13:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "I spoke too soon. I looked at the fluid properties. The idea was to invert the existing h_from_v_e relation, but it has no dependence on e whatsoever, which makes no sense to me.",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5754196",
                          "updatedAt": "2023-04-28T12:50:17Z",
                          "publishedAt": "2023-04-28T12:50:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "If you have an implementation, do it directly in LeadBismuthFluidProperties, not a new class. There's a unit test modules/fluid_properties/unit/src/LeadBismuthFluidPropertiesTest.C that you can use to check your work. Let me know if it doesn't make sense to you. To run it, go into modules/fluid_properties/unit and do make -j6 or whatever and then run that executable. Let me know if anything doesn't make sense.",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5754216",
                          "updatedAt": "2023-04-28T12:52:58Z",
                          "publishedAt": "2023-04-28T12:52:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "I was discussing LeadBismuthFluidProperties with @GiudGiud , and we decided that LeadBismuthFluidProperties is an incompressible equation of state and doesn't make sense to be used with THM's flow model, which solves equations where v and e are solved independently. Maybe it could work in practice, but it seems fundamentally flawed. Maybe you'd just see stiffness in the equations but you're able to overcome this. It was suggested that maybe you try to use SimpleFluidProperties instead to see if that is able to meet your needs.\nWe're considering adding a check for the compressibility of the equation of state so that the user gets a warning/error.",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5754886",
                          "updatedAt": "2023-04-28T13:50:08Z",
                          "publishedAt": "2023-04-28T13:50:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can also try the new\nhttps://mooseframework.inl.gov/source/userobjects/TemperaturePressureFunctionFluidProperties.html\nJust be careful when you define the function fluid properties.\nAnd maybe you ll miss some implementations, please let me know",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5755124",
                          "updatedAt": "2023-04-28T14:10:31Z",
                          "publishedAt": "2023-04-28T14:10:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@joshuahansel Hello josh, I have the same worry. I defined a e_from_v_h in the LeadBismuthFluidProperties_zxy and it can work successfully in most of cases. But as you say, this success seems fundamentally flawed because of the incompressibility.\n\nIt was suggested that maybe you try to use SimpleFluidProperties instead to see if that is able to meet your needs.\n\nAnd I don't understand how I should use SimpleFluidProperties. If I use SimpleFluidProperties, I still need to define a e_from_v_h to satisfy to need of FlowChannel1Phase, right?",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5755185",
                          "updatedAt": "2023-04-28T14:16:22Z",
                          "publishedAt": "2023-04-28T14:16:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "You can also try the new\nhttps://mooseframework.inl.gov/source/userobjects/TemperaturePressureFunctionFluidProperties.html\nJust be careful when you define the function fluid properties.\nAnd maybe you ll miss some implementations, please let me know\n\n@GiudGiud Thank you Giud, I haven't seen it before. I think this is a good option.",
                          "url": "https://github.com/idaholab/moose/discussions/24197#discussioncomment-5755219",
                          "updatedAt": "2023-04-28T14:19:34Z",
                          "publishedAt": "2023-04-28T14:19:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Constant porepressure",
          "author": {
            "login": "asgauthier"
          },
          "bodyText": "Hi everyone, I recently started to use moose to model a geothermal project. However, my results don't seem to be good because the porepressure is constant over time while it should increase progressively and reach a steady state. My input file is based on the injection_production.i file but I changed the injection to be able to impose an injection flow rate of 18.05 kg/s. Can anyone help me ? Thank you a lot !\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 20\n    ny = 20\n    nz = 20\n    xmin = -2500\n    xmax = 2500\n    ymin = -2500\n    ymax = 2500\n    zmin = -4000\n    zmax = 0\n  []\n  [central_nodes]\n    input = gen\n    type = ExtraNodesetGenerator\n    new_boundary = central_nodes\n    coord = '0 0 0; 0 0 -4000'\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n[]\n\n[Variables]\n  [porepressure]\n    initial_condition = 38.3E6\n  []\n  [temperature]\n    initial_condition = 401.15\n    scaling = 1E-6 # fluid enthalpy is roughly 1E6\n  []\n[]\n\n[BCs]\n  [porepressure]\n    type = DirichletBC #Imposes the essential boundary condition u=g\n    value = 38.3E6 #pression initiale du fluide en Pascal\n    variable = porepressure\n    boundary = 'right left top bottom back front'\n  []\n[]\n\n[DiracKernels]\n  [fluid_injection]\n    type = PorousFlowPointSourceFromPostprocessor\n    point = '0 0 -3800'\n    mass_flux = 18.05\n    variable = porepressure\n  []\n  [source_h]\n    type = PorousFlowPointEnthalpySourceFromPostprocessor\n    variable = temperature\n    mass_flux = 18.05\n    point = '0 0 -3800'\n    T_in = T_in\n    pressure = porepressure\n    fp = the_simple_fluid\n  []\n  [fluid_production]\n    type = PorousFlowPeacemanBorehole\n    variable = porepressure\n    SumQuantityUO = produced_mass\n    point_file = production_.bh\n    function_of = pressure\n    fluid_phase = 0\n    bottom_p_or_t = 11.5E6\n    unit_weight = '0 0 0'\n    use_mobility = true\n    character = 1\n  []\n  [remove_heat_at_production_well]\n    type = PorousFlowPeacemanBorehole\n    variable = temperature\n    SumQuantityUO = produced_heat\n    point_file = production_.bh\n    function_of = pressure\n    fluid_phase = 0\n    bottom_p_or_t = 11.5E6\n    unit_weight = '0 0 0'\n    use_mobility = true\n    use_enthalpy = true\n    character = 1\n  []\n[]\n\n[UserObjects]\n  [produced_mass]\n    type = PorousFlowSumQuantity\n  []\n  [produced_heat]\n    type = PorousFlowSumQuantity\n  []\n[]\n\n[Postprocessors]\n  [heat_joules_extracted_this_timestep]\n    type = PorousFlowPlotQuantity\n    uo = produced_heat\n  []\n  [produced_mass_this_timestep]\n    type=PorousFlowPlotQuantity\n    uo=produced_mass\n  []\n  [total_mass]\n    type = PorousFlowFluidMass\n    execute_on = 'initial timestep_end'\n  []\n  [total_heat]\n    type = PorousFlowHeatEnergy\n  []\n  [mass_injected]\n    type = ScalePostprocessor\n    value = 18.05\n    execute_on = 'initial timestep_end'\n  []\n  [mass_injected_cumulative]\n    type = CumulativeValuePostprocessor\n    postprocessor = mass_injected\n    execute_on = 'initial timestep_end'\n  []\n  [T_in]\n    type = ScalePostprocessor\n    value = 333.15\n    execute_on = 'initial timestep_end'\n  []\n  [avg_temp]\n    type = ElementAverageValue\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  [] \n  [porepressure_injection]\n      type = PointValue\n      point = '0 0 -3800'\n      variable = porepressure\n  [ ]\n  [porepressure_production]\n    type = PointValue\n    point = '-808 -1417 -3610'\n    variable = porepressure\n  []\n  [temperature_injection]\n    type = PointValue\n    point = '0 0 -3800'\n    variable = temperature\n  []\n  [temperature_production]\n    type = PointValue\n    point = '-808 -1417 -3610'\n    variable = temperature\n  []\n[]\n\n[FluidProperties]\n  [the_simple_fluid]\n    type = SimpleFluidProperties\n    thermal_expansion = 2E-4\n    bulk_modulus = 2E9\n    viscosity = 1E-3\n    density0 = 1000\n    cv = 4000.0\n    cp = 4000.0\n  []\n[]\n\n[PorousFlowBasicTHM]\n  porepressure = porepressure\n  temperature = temperature\n  coupling_type = ThermoHydro\n  gravity = '0 0 0'\n  fp = the_simple_fluid\n  multiply_by_density=true\n[]\n\n[Materials]\n  [porosity]\n    type = PorousFlowPorosityConst # only the initial value of this is ever used\n    porosity = 0.024\n  []\n  [biot_modulus]\n    type = PorousFlowConstantBiotModulus\n    solid_bulk_compliance = 1E-10\n    fluid_bulk_modulus = 2E9\n  []\n  [permeability]\n    type = PorousFlowPermeabilityConst\n    permeability = '1.5E-12 0 0   0 1.5E-12 0   0 0 1.5E-12'\n  []\n  [thermal_expansion]\n    type = PorousFlowConstantThermalExpansionCoefficient\n    biot_coefficient=0.85\n    fluid_coefficient = 5E-6\n    drained_coefficient = 2E-4\n  []\n  [thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '1 0 0  0 1 0  0 0 1'\n  []\n  [rock_heat]\n    type = PorousFlowMatrixInternalEnergy\n    density = 2700.0\n    specific_heat_capacity = 1200.0\n  []\n[]\n\n[Preconditioning]\n  active = basic\n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  end_time = 1200\n  dt = 300\n[]\n\n[Outputs]\n  perf_graph = false\n  exodus = true\n  csv = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24326",
          "updatedAt": "2023-05-17T08:26:28Z",
          "publishedAt": "2023-05-11T10:35:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n@WilkAndy will know more than me\nI find it odd that porepressure is constrained on all surfaces around the system\n[BCs]\n  [porepressure]\n    type = DirichletBC #Imposes the essential boundary condition u=g\n    value = 38.3E6 #pression initiale du fluide en Pascal\n    variable = porepressure\n    boundary = 'right left top bottom back front'\n  []\n[]\n\nwhere do you expect pressure to build up?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5873858",
                  "updatedAt": "2023-05-11T14:15:37Z",
                  "publishedAt": "2023-05-11T14:15:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "asgauthier"
                          },
                          "bodyText": "Hello! thanks for your reply :) The pressure is supposed to build up at the injection point and the pressure on all surfaces is the pressure far away the wells so it's supposed to not be influenced by the wells\nAstrid",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5876337",
                          "updatedAt": "2023-05-11T18:02:58Z",
                          "publishedAt": "2023-05-11T18:02:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I think @GiudGiud might be right. Your injection point is right next to a boundary, so the pressure can't really increase much. I'm sure you would see an increase if you extend the mesh domain to be further from the wells.",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5883818",
                          "updatedAt": "2023-05-12T11:02:43Z",
                          "publishedAt": "2023-05-12T11:02:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "asgauthier"
                          },
                          "bodyText": "The pore pressure indeed changed a bit but it decreased instead of increasing :/",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5892119",
                          "updatedAt": "2023-05-13T13:49:29Z",
                          "publishedAt": "2023-05-13T13:49:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hmm, doesn't sound right.  I changed the mesh a bit so that is basically half the model (so symmetrical in y direction so no bc applied to this face), and got this.\n\nNote: the injection mass is pretty small compared to the size of the grid blocks so the pressure doesn't go up much, but it does increase at the injection well (and likewise decreases at the production well).",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5914679",
                          "updatedAt": "2023-05-16T10:08:05Z",
                          "publishedAt": "2023-05-16T10:05:48Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Input file\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 60\n    ny = 20\n    nz = 20\n    xmin = -2000\n    xmax = 4000\n    ymin = 0\n    ymax = 2000\n    zmin = -4000\n    zmax = -2000\n  []\n  # [central_nodes]\n  #   input = gen\n  #   type = ExtraNodesetGenerator\n  #   new_boundary = central_nodes\n  #   coord = '0 0 0; 0 0 -4000'\n  # []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n[]\n\n[Variables]\n  [porepressure]\n    initial_condition = 38.3E6\n  []\n  [temperature]\n    initial_condition = 401.15\n    scaling = 1E-6 # fluid enthalpy is roughly 1E6\n  []\n[]\n\n[BCs]\n  [porepressure]\n    type = DirichletBC #Imposes the essential boundary condition u=g\n    value = 38.3E6 #pression initiale du fluide en Pascal\n    variable = porepressure\n    boundary = 'right left top'\n  []\n[]\n\n[DiracKernels]\n  [fluid_injection]\n    type = PorousFlowPointSourceFromPostprocessor\n    point = '0 0 -3000'\n    mass_flux = 18.05\n    variable = porepressure\n  []\n  [source_h]\n    type = PorousFlowPointEnthalpySourceFromPostprocessor\n    variable = temperature\n    mass_flux = 18.05\n    point = '0 0 -3000'\n    T_in = T_in\n    pressure = porepressure\n    fp = the_simple_fluid\n  []\n  [fluid_production]\n    type = PorousFlowPeacemanBorehole\n    variable = porepressure\n    SumQuantityUO = produced_mass\n    point_file = production.bh\n    function_of = pressure\n    fluid_phase = 0\n    bottom_p_or_t = 38.2E6\n    unit_weight = '0 0 0'\n    use_mobility = true\n    character = 1\n  []\n  [remove_heat_at_production_well]\n    type = PorousFlowPeacemanBorehole\n    variable = temperature\n    SumQuantityUO = produced_heat\n    point_file = production.bh\n    function_of = pressure\n    fluid_phase = 0\n    bottom_p_or_t = 38.2E6\n    unit_weight = '0 0 0'\n    use_mobility = true\n    use_enthalpy = true\n    character = 1\n  []\n[]\n\n[UserObjects]\n  [produced_mass]\n    type = PorousFlowSumQuantity\n  []\n  [produced_heat]\n    type = PorousFlowSumQuantity\n  []\n[]\n\n[Postprocessors]\n  [heat_joules_extracted_this_timestep]\n    type = PorousFlowPlotQuantity\n    uo = produced_heat\n  []\n  [produced_mass_this_timestep]\n    type = PorousFlowPlotQuantity\n    uo = produced_mass\n  []\n  [total_mass]\n    type = PorousFlowFluidMass\n    execute_on = 'initial timestep_end'\n  []\n  [total_heat]\n    type = PorousFlowHeatEnergy\n  []\n  [mass_injected]\n    type = ScalePostprocessor\n    value = 18.05\n    execute_on = 'initial timestep_end'\n  []\n  [mass_injected_cumulative]\n    type = CumulativeValuePostprocessor\n    postprocessor = mass_injected\n    execute_on = 'initial timestep_end'\n  []\n  [T_in]\n    type = ScalePostprocessor\n    value = 333.15\n    execute_on = 'initial timestep_end'\n  []\n  [avg_temp]\n    type = ElementAverageValue\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [porepressure_injection]\n    type = PointValue\n    point = '0 0 -3000'\n    variable = porepressure\n    execute_on = 'initial timestep_end'\n  []\n  [porepressure_production]\n    type = PointValue\n    point = '2000 0 -3000'\n    variable = porepressure\n    execute_on = 'initial timestep_end'\n  []\n  [temperature_injection]\n    type = PointValue\n    point = '0 0 -3000'\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [temperature_production]\n    type = PointValue\n    point = '2000 0 -3000'\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[FluidProperties]\n  [the_simple_fluid]\n    type = SimpleFluidProperties\n    thermal_expansion = 2E-4\n    bulk_modulus = 2E9\n    viscosity = 1E-3\n    density0 = 1000\n    cv = 4000.0\n    cp = 4000.0\n  []\n[]\n\n[PorousFlowBasicTHM]\n  porepressure = porepressure\n  temperature = temperature\n  coupling_type = ThermoHydro\n  gravity = '0 0 0'\n  fp = the_simple_fluid\n  multiply_by_density = true\n[]\n\n[Materials]\n  [porosity]\n    type = PorousFlowPorosityConst # only the initial value of this is ever used\n    porosity = 0.024\n  []\n  [biot_modulus]\n    type = PorousFlowConstantBiotModulus\n    solid_bulk_compliance = 1E-10\n    fluid_bulk_modulus = 2E9\n  []\n  [permeability]\n    type = PorousFlowPermeabilityConst\n    permeability = '1.5E-12 0 0   0 1.5E-12 0   0 0 1.5E-12'\n  []\n  [thermal_expansion]\n    type = PorousFlowConstantThermalExpansionCoefficient\n    biot_coefficient = 0.85\n    fluid_coefficient = 5E-6\n    drained_coefficient = 2E-4\n  []\n  [thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '1 0 0  0 1 0  0 0 1'\n  []\n  [rock_heat]\n    type = PorousFlowMatrixInternalEnergy\n    density = 2700.0\n    specific_heat_capacity = 1200.0\n  []\n[]\n\n[Preconditioning]\n  active = basic\n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      ilu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n    petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n    petsc_options_value = ' lu       mumps'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = Newton\n  end_time = 5e4\n  dt = 1e4\n[]\n\n[Outputs]\n  perf_graph = false\n  exodus = true\n  csv = true\n[]\n\nand production.bh containing\n0.25 2000 0 -3000\n0.25 2000 0 -3010",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5914695",
                          "updatedAt": "2023-05-16T10:07:19Z",
                          "publishedAt": "2023-05-16T10:07:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "asgauthier"
                          },
                          "bodyText": "Thanks for your help !",
                          "url": "https://github.com/idaholab/moose/discussions/24326#discussioncomment-5924877",
                          "updatedAt": "2023-05-17T08:26:29Z",
                          "publishedAt": "2023-05-17T08:26:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question on stochastic module LibtorchANNTrainer example input file GFunction",
          "author": {
            "login": "chongxiyuan"
          },
          "bodyText": "Hi MOOSE community,\nI recently installed MOOSE with libtorch, and I am trying to learn how to train and evaluate neural networks on MOOSE. I just started running given examples. I run into an error for modules/stochastic_tools/test/tests/surrogates/libtorch_nn/train.i file that says: A 'GFunction' is not a registered object.\nIt seems like GFunction is a vectorpostprocessor, but I didn't find it in the MOOSE website documentation. Is this a custom postprocessor? Please point me to the right direction.\nThe example input file is\n[StochasticTools]\n\n[]\n\n[Samplers]\n  [sample]\n    type = CartesianProduct\n    linear_space_items = '0 0.0125 5\n                          0 0.0125 5\n                          0 0.0125 5'\n  []\n[]\n\n[VectorPostprocessors]\n  [values]\n    type = GFunction\n    sampler = sample\n    q_vector = '0 0 0'\n    execute_on = INITIAL\n    outputs = none\n  []\n[]\n\n[Trainers]\n  [train]\n    type = LibtorchANNTrainer\n    sampler = sample\n    response = values/g_values\n    num_epochs = 40\n    num_batches = 10\n    num_neurons_per_layer = '64 32'\n    learning_rate = 0.001\n    nn_filename = mynet.pt\n    read_from_file = false\n    print_epoch_loss = 10\n    activation_function = 'relu relu'\n    max_processes = 1\n  []\n[]\n\n[Outputs]\n  [out]\n    type = SurrogateTrainerOutput\n    trainers = 'train'\n    execute_on = FINAL\n  []\n[]\n\nThank you!\nChongxi Yuan",
          "url": "https://github.com/idaholab/moose/discussions/24368",
          "updatedAt": "2023-05-16T19:54:48Z",
          "publishedAt": "2023-05-15T20:48:03Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is a test object for the stochastic tools module.\nIf you want to use it, you need to\n\nuse the stochastic_tools module executable\npass on the command line: --allow-test-objects\n\nIt wont have documentation as it s a test object. But you can find it in modules/stochastic_tools/test/src/functions\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24368#discussioncomment-5916435",
                  "updatedAt": "2023-05-16T13:16:33Z",
                  "publishedAt": "2023-05-16T13:16:32Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@zachmprince fyi in case it needs to be promoted",
                          "url": "https://github.com/idaholab/moose/discussions/24368#discussioncomment-5916447",
                          "updatedAt": "2023-05-16T13:17:42Z",
                          "publishedAt": "2023-05-16T13:17:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chongxiyuan"
                          },
                          "bodyText": "Thank you so much, I found the function in modules/stochastic_tools/test/src/functions and manually copied the function to my executable folder, and it worked as well.",
                          "url": "https://github.com/idaholab/moose/discussions/24368#discussioncomment-5919985",
                          "updatedAt": "2023-05-16T19:00:00Z",
                          "publishedAt": "2023-05-16T18:59:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zachmprince"
                          },
                          "bodyText": "GFunction is something commonly used for verification of global sensitivity methods. I don't think it has any physical meaning. So I think having it as a test-only object is appropriate. You can probably replicate it using a ParsedPostprocessor in a sub-application.",
                          "url": "https://github.com/idaholab/moose/discussions/24368#discussioncomment-5920379",
                          "updatedAt": "2023-05-16T19:54:48Z",
                          "publishedAt": "2023-05-16T19:54:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Query related to use of different time steps in Multiapp",
          "author": {
            "login": "deepakbiitk"
          },
          "bodyText": "Hi all,\nI am solving a weakly coupled thermomechanical problem. I adopted the use of Multiapp. In the main app, I solve heat conduction and I am then transferring the   temperature data to the sub app and solve for deformation. I want to use two different time steps. like a staggered approach i.e., solve heat equation with a time step dt and transfer the data to sub app in the intervals of 10dt, 20dt, 30*dt, .... and solve for deformation.\nAny suggestions how can I set this in my input file in the MultiApps and Transfer section. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24395",
          "updatedAt": "2023-05-16T19:48:46Z",
          "publishedAt": "2023-05-16T17:30:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nTypically you would flip the two apps, then you could run the subapp more often than the parent app.\nThis is the main criterion for deciding which app is the main app, it s the one running the longest time step.\nIf you dont want to do that, you can turn on and off transfers and multiapps using the controls system.\nhttps://mooseframework.inl.gov/source/controls/TimePeriod.html\nYou ll have to create this frequency (once every 10 dt) yourself, I dont think we have that one\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24395#discussioncomment-5919266",
                  "updatedAt": "2023-05-16T17:33:44Z",
                  "publishedAt": "2023-05-16T17:33:43Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "deepakbiitk"
                  },
                  "bodyText": "Hello Guillaume,\nThank you for the prompt response. I flipped my two apps. However, I am still not able to make it run with 2 different time steps.\nThis is the section in my parent app:\n[AuxVariables]\n[./temperature]\n[../]\n[]\n[MultiApps]\n[sub_app]\ntype = TransientMultiApp\ninput_files = 'transient_thermal_main.i'\nexecute_on = 'timestep_begin'\n[]\n[]\n[Transfers]\n[from_sub]\ntype = MultiAppCopyTransfer\nfrom_multi_app = sub_app\nvariable = temperature\nsource_variable= temperature\nexecute_on = 'timestep_begin'\n[]\n[]\nMy time step in sub app is dt =1 and time step in parent app is dt = 10. When I run it, both the apps run with dt =1. Thanks",
                  "url": "https://github.com/idaholab/moose/discussions/24395#discussioncomment-5920167",
                  "updatedAt": "2023-05-16T19:27:12Z",
                  "publishedAt": "2023-05-16T19:27:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "turn on sub_cycling in the MultiApp sub_app block",
                          "url": "https://github.com/idaholab/moose/discussions/24395#discussioncomment-5920174",
                          "updatedAt": "2023-05-16T19:28:36Z",
                          "publishedAt": "2023-05-16T19:28:35Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "deepakbiitk"
                          },
                          "bodyText": "Thanks, It worked.",
                          "url": "https://github.com/idaholab/moose/discussions/24395#discussioncomment-5920330",
                          "updatedAt": "2023-05-16T19:48:47Z",
                          "publishedAt": "2023-05-16T19:48:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ADParsedMaterial",
          "author": {
            "login": "nourriahi"
          },
          "bodyText": "Hello,\nI have one variable that varies along the y axis, so for this I want to use ADParsedMaterial to define a function:\n[Materials]\n    [./qs]\n    type = ADParsedMaterial\n    property_name = 'surface_heat_flux'\n    function = '99.98*((1.000088*(y-283.2))/(1-(y-1.0e5)/2.15e9))'\n    outputs = exodus\n    []\n  []\n\nUnfortunately, I received this error message that I couldn't find a way to fix it:\n*** ERROR ***\nqs: Coupled variable 'y' was not found",
          "url": "https://github.com/idaholab/moose/discussions/24389",
          "updatedAt": "2023-05-16T18:33:33Z",
          "publishedAt": "2023-05-16T15:52:27Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Use ADGenericFunctionMaterial.",
                  "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5918265",
                  "updatedAt": "2023-05-16T15:55:17Z",
                  "publishedAt": "2023-05-16T15:55:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "x,y,z cannot be used in ParsedMaterial. They can be used in Functions.\nA simple function like this can be parsed directly, or you can define a ParsedFunction then use it in ADGenericFunctionMaterial",
                          "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5918305",
                          "updatedAt": "2023-05-16T15:59:52Z",
                          "publishedAt": "2023-05-16T15:59:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nourriahi"
                          },
                          "bodyText": "I am trying to apply what you suggested, but, first I needed to make some changes to the source file to be able to declare my variable \"qs\" as a function in the input file :\nparams.addParam<FunctionName>(\n    \"qs\", \"3e10\", \"the laser source input function\");\n  return params;\n}\n\nHeatConductionOutFlow::HeatConductionOutFlow(const InputParameters & parameters)\n    : ADIntegratedBC(parameters), \n       _value(getParam<Real>(\"value\")),\n       _T_infinity(getADMaterialProperty<Real>(\"T_infinity\")),\n       _chtc(getADMaterialProperty<Real>(\"convective_heat_transfer_coefficient\")),\n       _rhtc(getADMaterialProperty<Real>(\"radiation_heat_transfer_coefficient\")),\n       _qs(getFunction(\"surface_heat_flux\"))\n\n{ \n}\n\nADReal\nHeatConductionOutFlow::computeQpResidual()\n{\nreturn - _test[_i][_qp] * _qs[_qp] + _test[_i][_qp] * ((_chtc[_qp] * (_T_infinity[_qp] - _u[_qp])) + (_rhtc[_qp] * ((_T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp]) - (_u[_qp] * _u[_qp] * _u[_qp] * _u[_qp]))));\n}\n\n\nUnfortunately, I got this error message: \n\n error: no match for 'operator[]' (operand types are 'const Function' and 'unsigned int')\n   41 | return - _test[_i][_qp] * _qs[_qp] + _test[_i][_qp] * ((_chtc[_qp] * (_T_infinity[_qp] - _u[_qp])) + (_rhtc[_qp] * ((_T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp]) - (_u[_qp] * _u[_qp] * _u[_qp] * _u[_qp]))));",
                          "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5919630",
                          "updatedAt": "2023-05-16T18:20:57Z",
                          "publishedAt": "2023-05-16T18:20:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Functions are not indexed by quadrature point.\nYou evaluate Functions at points and time.\nFor example:\n_function.value(_t, _q_point[_qp])\nhere your function is _qps\nBtw, qps is not a great name for a function",
                          "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5919649",
                          "updatedAt": "2023-05-16T18:22:50Z",
                          "publishedAt": "2023-05-16T18:22:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I'm a little confused. Why can't you use\n  [qs]\n    type = ADGenericFunctionMaterial\n    prop_names = 'surface_heat_flux'\n    prop_values = '99.98*((1.000088*(y-283.2))/(1-(y-1.0e5)/2.15e9))'\n  []",
                          "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5919691",
                          "updatedAt": "2023-05-16T18:27:38Z",
                          "publishedAt": "2023-05-16T18:27:38Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nourriahi"
                          },
                          "bodyText": "Thanks both for you help",
                          "url": "https://github.com/idaholab/moose/discussions/24389#discussioncomment-5919750",
                          "updatedAt": "2023-05-16T18:33:34Z",
                          "publishedAt": "2023-05-16T18:33:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Questions about using MOOSE Materials with custom Material files",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "I read through the documentation and believe I understand how the material file system works. Within an input file, you can declare a block with your material values, e.g\n  [block_name]\n    type = customMaterial\n    constant1= 0.2\n  []\n\nand then within the custom material, you get the value from the user, i.e\n /// Get Parameter from user, name in input file is in quotes\n_user_constant1(getParam<Real>(\"constant1\")),\n\nthe variable _user_constant1 can now be used within the computeQpProperties() e.g\nauto _calc_in_method = _user_constant1*5;\nto compute whatever you want, and then you send it back out with, say\n_calc_in_method(declareADProperty<Real>(\"calculated_value\")),\nIn this case, any kernel that wants to use the value we calculated here will do this:\n_necessary_constant(getADMaterialPropertyByName<Real>(\"calculated_value\"))\nthen, _necessary_constant can be used within the computeQpresidual method.\nDo I understand how this works correctly? And in the above, is the \"block_name\" relevant or just for the user using the input file? I asked because of the following questions.\n\nNow for my first question- how can I use/get material properties defined by MOOSE already? I saw the following in someone's custom code:\n    _base_name(isParamValid(\"base_name\") ? getParam<std::string>(\"base_name\") + \"_\" : \"\"),\n\n    _stress(getADMaterialPropertyByName<RankTwoTensor>(_base_name + \"stress\")),\n    _cto(getADMaterialPropertyByName<RankFourTensor>(_base_name + \"elasticity_tensor\")),\n    _strain(getADMaterialPropertyByName<RankTwoTensor>(_base_name + \"mechanical_strain\")),\n\nIn the input file, they have this:\n  [elasticity_tensor]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 30000\n    poissons_ratio = 0.2\n  []\n  \n  [strain]\n    type = ADComputeSmallStrain\n  []\n  \n  [stress]\n    type = ADComputeLinearElasticStress\n  []\n\nI want to understand how/why this code works. In the constructor, they \"get\" those material properties, which I assume are declared somewhere. However, those names- \"stress\", \"elasticity_tensor\", and \"mechanical_strain\". Where are they defined? I initially thought that \"elasticity_tensor\" was gotten from the name of the block, and same for \"stress\", but then that wouldn't make sense since \"mechanical_strain\" is not the name of the block in the input file, but they used that name to get the property. Is the block name relevant at all? Or how were these material values gotten?\nI tried to look through the source code, but in ComputeSmallStrain.C, I do not see any declareProperty in the constructor. So I'm not sure how to know what name to call the material by when \"getting\" it.\nAlso, could you break down the possible use/purpose of the whole \"base_name\" thing? I don't understand its purpose.\n\nFollowing up on this question, if I were to want to declare a RankFourTensor tensor to use in my custom material file, how would I do so in the input file? I'm not very clear on the documentation (https://mooseframework.inl.gov/docs/doxygen/moose/classRankFourTensorTempl.html) but I'm assuming it would be something along the lines of:\n[./material1_elasticitytensor]\n  type = RankFourTensor\n  input= '1.684e5 0.176e5 0.176e5 1.684e5 0.176e5 1.684e5 0.754e5 0.754e5 0.754e5'\n  fill_method = symmetric9\n  property =  betaphase_elasticity_tensor\n[../]\n\nSo that in my custom material file, I can now do:\n_betaphase(getParam<RankFourTensor>(\"betaphase_elasticity_tensor\")),\nIs this the correct syntax?",
          "url": "https://github.com/idaholab/moose/discussions/24358",
          "updatedAt": "2023-05-16T17:19:34Z",
          "publishedAt": "2023-05-14T05:56:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor question 1, this\n_stress(getADMaterialPropertyByName(_base_name + \"stress\")),\nis retrieving a stress material property that is known to be declared with this name by the stress model.\nThe tensor mechanics module is using this convention for naming the stress, so materials are using that same name as well, without an explicit declaration in the input file of what the stress name will be\nsame for strain, elasticity tensor etc\nThe base_name is to disambiguate if there are multiple stress models. One can then pass different a base_name to retrieve the stress material property of interest.\nQuestion 2:\n_betaphase(getParam(\"betaphase_elasticity_tensor\")),\nthis is not correct. This retrieves a tensor directly, not through the material property system.\nYou want:\n_betaphase(getMaterialPropertyByName(\"betaphase_elasticity_tensor\")),\nand _betaphase must be declared in the header as a material property\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5899646",
                  "updatedAt": "2023-05-15T00:36:45Z",
                  "publishedAt": "2023-05-15T00:36:45Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "So essentially all stress-related materials can be retrieved with \"stress\", and to differentiate them if I use multiple, I can add a base_name to each's material block? Is this convention explained anywhere in the documentation? Asking because I was wondering about materials in other modules, are their naming conventions also explained anywhere?\nApart from clarity for the user of the input file, is the block name relevant?",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5907249",
                          "updatedAt": "2023-05-15T16:15:16Z",
                          "publishedAt": "2023-05-15T16:15:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the block name is generally not relevant, it s the name of the Material not the Material Property.\nNaming conventions will depend on the module, there's no universal rule",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5907713",
                          "updatedAt": "2023-05-15T17:07:50Z",
                          "publishedAt": "2023-05-15T17:07:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Thank you. A few more questions:\n\nI believe I followed the steps properly and cannot figure out why I am getting this error:\n\nerror: 'MaterialProperty< <template-parameter-1-1> >::MaterialProperty(const MaterialProperty< <template-parameter-1-1> >&) [with T = RankFourTensorTempl<double>]' is private within this context\nI have this in my custom material file header:\n#pragma once\n\n#include \"DerivativeMaterialInterface.h\"\n#include \"RankTwoTensor.h\"\n#include \"RankFourTensor.h\"\n#include \"Eigen/Core\"\n#include \"Eigen/Dense\"\n#include <unsupported/Eigen/CXX11/Tensor>\n#include \"Material.h\"\n\nclass Custom : public DerivativeMaterialInterface<Material>\n{\npublic:\n  static InputParameters validParams();\n\n  CustomMaterial(const InputParameters & parameters);\n\nprotected:\n  ...\n  \n  // just for debugging\n  MaterialProperty<Real> & _seeoutput;\n\n  // Materials calculated by this custom material\n  MaterialProperty<RankTwoTensor> & _cust_eigenstr;\n  MaterialProperty<RankFourTensor> & _elasticity_eta;\n  \n};\n\nAnd in my source file, I have this:\n#include \"CustomMaterial.h\"\n#include <Eigen/Dense>\n#include <cmath>\n\nregisterMooseObject(\"myApp\", CustomMaterial);\n\nInputParameters\nCustomMaterial::validParams()\n{\n  ...\n  \n  return params;\n}\n\nCustomMaterial::CustomMaterial(const InputParameters & parameters)\n  : DerivativeMaterialInterface<Material>(parameters),\n\t\n         ...\n\n\t_seeoutput(declareProperty<Real>(\"debug_purposes\")),\n\t_cust_eigenstr(declareProperty<RankTwoTensor>(\"e_ij_0\")),\n\t_elasticity_eta(declareProperty<RankFourTensor>(\"c_ijkl\"))\n\t\n{\n}\n\nHowever, I get an error when I try to compile, saying\nerror: 'MaterialProperty< <template-parameter-1-1> >::MaterialProperty(const MaterialProperty< <template-parameter-1-1> >&) [with T = RankFourTensorTempl<double>]' is private within this context\n   32 |  _elasticity_eta(declareProperty<RankFourTensor>(\"elasticity_eta\"))\n\nI am not really sure what this means. I tried to follow the format in the documentation. Should the variable/attribute \"_elasticity_eta\" have been declared publicly?\nAlso, I got a similar error for a kernel trying to \"get\" these properties.\n\nSecondly, I wanted to ask about the \"MaterialADConverter\" system. I am making non-AD materials because one of the kernels is a slightly edited version of a kernel from the phase-field module, and I derived the Jacobian and coded it there. However, I do not want to derive the Jacobian for another custom kernel I created from scratch, and so I want to convert the materials in my custom Material file from non-AD to AD.\nI have this in my input file:\n[convert_to_AD]\n    type = MaterialADConverter\n\tad_props_in = 'c_ijkl e_ij_0 mechanical_strain'\n\tad_props_out = 'ADc_ijkl ADe_ij_0 ADmechanical_strain'\n[]\n\nIn the AD Kernel, will I then \"get\" the AD version using the new name like this?\n_e_ij_0(getADMaterialPropertyByName<Real>(\"ADe_ij_0\")),\nAnd for the ADmechanical_strain, would it be better to just make another material block for ADComputeSmallStrain? The \"mechanical_strain\" there is intended to be from ComputeSmallStrain which already exists in my input file",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5909976",
                          "updatedAt": "2023-05-15T22:05:07Z",
                          "publishedAt": "2023-05-15T22:05:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For the second question, I would not recommend doing that.\nThe outgoing \"AD\" version does not contain the derivaties, it's just passing the Real as an ADReal, with 0 for all derivatives",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5911349",
                          "updatedAt": "2023-05-16T02:54:16Z",
                          "publishedAt": "2023-05-16T02:54:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Thanks! I should probably just work on the Jacobians then (or is there a way to convert from AD to non-AD so I can make my material class AD)?\nAlso, I figured out the first one- for posterity's sake, there was a missing \"&\" in the header of one of the kernels that used that material, and when I fixed that the error somehow disappeared.",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5912516",
                          "updatedAt": "2023-05-16T06:12:26Z",
                          "publishedAt": "2023-05-16T06:12:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok I m not surprised for the first one.\nThis is what I was looking for in the code you pasted, but it seemed correct there, there was no copy?\nMaterialPropertyValues may not be copied, you can only take a reference to them. This was accomplished by making the copy-constructor private, hence the compilation error message.\nIt's very easy to convert from AD to non AD, in fast the same MaterialADConverter can do that (using ad_props_in and reg_props_out)",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5916595",
                          "updatedAt": "2023-05-16T13:29:14Z",
                          "publishedAt": "2023-05-16T13:29:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Got it, that makes sense. I think I didn't update the compiled version or something.\nI'll try the MaterialADConverter, thanks.\nAlso, another follow up on the use of RankFourTensor & RankTwoTensor. As stated earlier, I have a block in my input file:\n[./material1_elasticitytensor]\n  type = RankFourTensor\n  input= '1.684e5 0.176e5 0.176e5 1.684e5 0.176e5 1.684e5 0.754e5 0.754e5 0.754e5'\n  fill_method = symmetric9\n  property =  betaphase_elasticity_tensor\n[../]\n\nHowever, I get this error\n*** ERROR ***\nA 'RankFourTensor' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nwhat do I need to do to be able to use this?\n\nAlternatively, I could use the ComputeElasticityTensor. The reason I didn't use it earlier was because I still had some confusion over the \"base_name\" syntax, and I have multiple elasticity tensors.\nIf I change the above to ComputeElasticityTensor, is this the correct syntax to send and retrieve it in the material file system?\n[./beta_elasticity_tensor]\n  type = ComputeElasticityTensor\n  C_ijkl = '1022726 113636 113636 1022726 454545'\n  fill_method = beta_phase\n[../]\n\n[./alpha_elasticity_tensor]\n  type = ComputeElasticityTensor\n  C_ijkl = '1022726 113636 113636 1022726 454545'\n  fill_method = axisymmetric_rz\n  base_name = alpha_phase\n[../]\n\nand then I can \"get\" them with\n_c_beta(getADMaterialPropertyByName<RankFourTensor>(\"beta_phase_\" + \"elasticity_tensor\")),\n_c_alpha(getADMaterialPropertyByName<RankFourTensor>(\"alpha_phase_\" + \"elasticity_tensor\")),\n\nsince I wrote the \"base_name\" directly, would I still need the below code?\n_base_name(isParamValid(\"base_name\") ? getParam<std::string>(\"base_name\") + \"_\" : \"\"),\nI realize I still don't fully understand how it works.",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5917259",
                          "updatedAt": "2023-05-16T14:23:58Z",
                          "publishedAt": "2023-05-16T14:23:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I was looking but I cant recall how to input a RankFourTensor directly in the input. It s not with type = RankFourTensor\nfill_method = beta_phase\nis not what you want. Maybe\n  fill_method = axisymmetric_rz\n  base_name = beta_phase\n\nSo you have two base_names essentially? Like you are getting the same property but for two phases in the same object.\nI think it s fine to hardcode beta/alpha_base instead of base_name",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5917317",
                          "updatedAt": "2023-05-16T14:29:43Z",
                          "publishedAt": "2023-05-16T14:29:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "oh yeah that was a typo. I meant:\n[./beta_elasticity_tensor]\n  type = ComputeElasticityTensor\n  fill_method = symmetric9\n  C_ijkl = '1111 1122 1133 2222 2233 3333 2323 1313 1212'\n  base_name = beta_phase\n[../]\n\n[./alpha_elasticity_tensor]\n  type = ComputeElasticityTensor\n  C_ijkl = '6 7 8 9 10'\n  fill_method = axisymmetric_rz\n  base_name = alpha_phase\n[../]\n\nas in, I have two completely different elasticity tensors that I do some operations on in the material file. And just so I get you, is that the proper way to hardcode the custom name? As in, whatever I type for base_name + \"_\" + \"elasticity_tensor\"?",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5917373",
                          "updatedAt": "2023-05-16T14:35:33Z",
                          "publishedAt": "2023-05-16T14:34:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yes this seems fine.\nThe proper way would be to have two parameters:\nbase_name_phase_1\nbase_name_phase_2\nretrieve them in two strings, and use that to retrieve the tensors.\nThis will let you change the base name in alpha_elasticity_tensor in the future for example",
                          "url": "https://github.com/idaholab/moose/discussions/24358#discussioncomment-5917448",
                          "updatedAt": "2023-05-16T14:41:58Z",
                          "publishedAt": "2023-05-16T14:41:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How can I solve this equation in couple with tensor mechanics module?",
          "author": {
            "login": "K-Komal-98"
          },
          "bodyText": "Here sigma_h is the hydrostatic stress. The terms two terms are straightforward. I can use TimeDerivative and Diffusion kernel. How can I solve for the last term where there is derivative of hydrostatic stress?",
          "url": "https://github.com/idaholab/moose/discussions/24361",
          "updatedAt": "2023-05-16T16:03:57Z",
          "publishedAt": "2023-05-15T00:41:09Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the stress a single-valued field (=variable) here?\nOr a tensor?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5899682",
                  "updatedAt": "2023-05-15T00:44:32Z",
                  "publishedAt": "2023-05-15T00:44:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "sigma_h is an average of normal stress components of a stress tensor i.e. sigma_11, sigma_22, sigma_33. I think it can be defined as an AuxVariable. Am I right?",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5899806",
                          "updatedAt": "2023-05-15T01:11:58Z",
                          "publishedAt": "2023-05-15T01:11:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "AuxVariable will likely be problematic because you will miss the derivatives of the stress tensor component with regards to each variable, to form the Jacobian later down the line\nA material property is likely the way to go here",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5899826",
                          "updatedAt": "2023-05-15T01:18:50Z",
                          "publishedAt": "2023-05-15T01:18:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Thanks!\nIs there any example file where I can look into?",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5899875",
                          "updatedAt": "2023-05-15T01:29:43Z",
                          "publishedAt": "2023-05-15T01:29:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Your best best is the tensor mechanics module.\nI'm not sure which model in particular though",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5900086",
                          "updatedAt": "2023-05-15T02:18:06Z",
                          "publishedAt": "2023-05-15T02:18:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Hi @GiudGiud !\nIn this discussion (#22910), the hydrostatic stress has been taken as an aux variable. You have suggested to use a material property. Are these two different approaches?",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5912156",
                          "updatedAt": "2023-05-16T05:18:32Z",
                          "publishedAt": "2023-05-16T05:18:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think we suggested material property there too",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5915157",
                          "updatedAt": "2023-05-16T10:56:38Z",
                          "publishedAt": "2023-05-16T10:56:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "avtarsinghh1991"
                  },
                  "bodyText": "Hello there\nFollow this discussion (#22910) for incorporating the hydrostatic stress coupling.\nThanks,\nAvtar",
                  "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5909891",
                  "updatedAt": "2023-05-15T21:48:24Z",
                  "publishedAt": "2023-05-15T21:46:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "K-Komal-98"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5912139",
                          "updatedAt": "2023-05-16T05:16:24Z",
                          "publishedAt": "2023-05-16T05:16:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "In addition to what I suggested in #22910, there is a cheaper way of getting the gradient using a local projection. See for example this code snippet: https://github.com/hugary1995/eel/blob/main/src/materials/chemistry/ChemicalPotential.C#L56-L78\nMOOSE doesn't support ADRealEigenMatrix and ADRealEigenVector yet, so I defined those utils in my app.This is the third or fourth time I see this question pop up, I can create a PR or a gist to demonstrate this capability. @GiudGiud this might be a good side project for an intern. Ideally, this would be a material object called something like MaterialPropertyGradient which takes a scalar-valued material property, does the local projection, and interpolates its gradients onto the qps.",
                  "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5918071",
                  "updatedAt": "2023-05-16T15:59:54Z",
                  "publishedAt": "2023-05-16T15:37:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Let s create an issue to keep track of this.\nI agree this would make a good project. Once we have interns started on their main project we can consider it",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5918289",
                          "updatedAt": "2023-05-16T15:58:24Z",
                          "publishedAt": "2023-05-16T15:58:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Sounds good. Let me know if anyone starts working on this. I could also have someone here do it.",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5918322",
                          "updatedAt": "2023-05-16T16:01:33Z",
                          "publishedAt": "2023-05-16T16:01:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "My interns wont be up and running for another month.\n@permcody might have a resource",
                          "url": "https://github.com/idaholab/moose/discussions/24361#discussioncomment-5918346",
                          "updatedAt": "2023-05-16T16:03:58Z",
                          "publishedAt": "2023-05-16T16:03:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Restarting MALAMUTE Simulation",
          "author": {
            "login": "raj-anant"
          },
          "bodyText": "Dear MOOSE Team,\nI am trying to resume a MOOSE simulation using the results of a previous simulation as the initial state. I am following the strategy given in the following example:\nhttps://mooseframework.inl.gov/application_usage/restart_recover.html\nI read in the mesh from the previous result:\n[Mesh]\n    file = previous.e\n[]\n\nI am running a MLAMUTE simulation and need to read the temperature and velocity profiles from the previous results. Temperature is a scalar, and so works easily using the following:\n[temp]\n    initial_from_file_var = temp\n  []\n\nHowever, velocity is a vector, and the results save the velocity as veloctiy_x and velocity_y. How can I read the two components from the previous results using the same format? The following two formats do not work\n[velocity]\n    family = LAGRANGE_VEC\n    initial_from_file_var = velocity\n []\n\n[velocity]\n    family = LAGRANGE_VEC\n    initial_from_file_var = velocity_x velocity_y\n []\n\nPlease let me know how I can get this to work.\nThanks,\nAnant",
          "url": "https://github.com/idaholab/moose/discussions/24347",
          "updatedAt": "2023-05-16T16:01:32Z",
          "publishedAt": "2023-05-12T20:17:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "What did you generate them with ? In the first simulation, was velocity a lagrange_vec?\nIn the Mesh block, did you remember to set use_for_exodus_restart = true?",
                  "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5888657",
                  "updatedAt": "2023-05-12T20:41:33Z",
                  "publishedAt": "2023-05-12T20:41:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "raj-anant"
                  },
                  "bodyText": "The first simulation also had velocity as a lagrange_evc.\nI did not use the use_forexodus_restart = true in the mesh block in the previous simulation.\nI tried using that in a fresh run, but it gave me an error: \"unused parameter 'Mesh/use_for_exodus_restart'\"",
                  "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5888809",
                  "updatedAt": "2023-05-12T21:06:11Z",
                  "publishedAt": "2023-05-12T21:06:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "use a FileMeshGenerator to load the mesh\nThe parameter might be mispelled too. This parameter must be used to restart from an exodus file",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5888848",
                          "updatedAt": "2023-05-12T21:12:01Z",
                          "publishedAt": "2023-05-12T21:12:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "raj-anant"
                          },
                          "bodyText": "I used that tag as you suggested\n[Mesh]\n  [file_mesh]\n     type = FileMeshGenerator\n     file = melt_pool_old.e\n     use_for_exodus_restart = true\n   []\n[]\n\n[velocity]\n    family = LAGRANGE_VEC\n    initial_from_file_var = velocity\n[]\n\nThe velocity was a LAGRANGE_VEC in the initial simulation as well. I still get the same error when trying to read the velocity:\nAvailable variables:\ncurvature\ngrad_ls_x\ngrad_ls_y\nls\np\ntemp\nvelocity_x\nvelocity_y\nlibMesh terminating:\nUnable to locate variable named: velocity\nWhat do you think?",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5908957",
                          "updatedAt": "2023-05-15T19:35:54Z",
                          "publishedAt": "2023-05-15T19:31:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Looks like we dont support exodus restart of vector variables then\n@cticenhour what did you use for restart in EM? for loading variables into other variables at initialization",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909000",
                          "updatedAt": "2023-05-15T19:37:55Z",
                          "publishedAt": "2023-05-15T19:37:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "I simply don't do restarts in the EM module right now because of this incompatibility. It's a pretty serious (and frustrating) gap, in my opinion. I am hopeful that the milestone work I am doing for the initial condition system this summer will help address this.",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909016",
                          "updatedAt": "2023-05-15T19:40:34Z",
                          "publishedAt": "2023-05-15T19:40:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "raj-anant"
                          },
                          "bodyText": "Is there any other way of reading the initial conditions for a variable from a .csv file or any other format? Or maybe you could give me some pointers as to how I could write some custom scripts inside MOOSE to read initial data from any file? I need to be able to read in randomly perturbed initial states for the problem I am working on.",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909135",
                          "updatedAt": "2023-05-15T19:55:03Z",
                          "publishedAt": "2023-05-15T19:55:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "raj-anant"
                          },
                          "bodyText": "ChatGPT suggested the following round about solution:\n[ICs]\n  [./velocity_x_ic]\n    type = FunctionIC\n    variable = velocity_x\n    function = 'fromfile_x'\n  [../]\n  [./velocity_y_ic]\n    type = FunctionIC\n    variable = velocity_y\n    function = 'fromfile_y'\n  [../]\n[]\n\n[Functions]\n  [./fromfile_x]\n    type = ParsedFunction\n    value = 'restartable_data_x'\n  [../]\n  [./fromfile_y]\n    type = ParsedFunction\n    value = 'restartable_data_y'\n  [../]\n[]\n\n[RestartableData]\n  [./restartable_data_x]\n    type = ExodusReader\n    file = 'previous_simulation.e'\n    variable = 'velocity_x'\n  [../]\n  [./restartable_data_y]\n    type = ExodusReader\n    file = 'previous_simulation.e'\n    variable = 'velocity_y'\n  [../]\n[]\n\nIs something along these lines possible? I tried it but got an error: '[RestartableData]' does not have an associated \"Action\"",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909229",
                          "updatedAt": "2023-05-16T16:00:42Z",
                          "publishedAt": "2023-05-15T20:09:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "You could try using the VectorFunctionIC object and define functions for each component given the requirements you have. Example input files using this are listed at the bottom of that page. You then might be able to define a suitable function from CSV for each by using the PiecewiseConstantFromCSV object. Note on the latter page a section containing links to other function objects that can take CSV data if this one isn't adequate.",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909296",
                          "updatedAt": "2023-05-15T20:20:14Z",
                          "publishedAt": "2023-05-15T20:19:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ChatGPT is making up syntax here. We dont have that one",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5909462",
                          "updatedAt": "2023-05-15T20:36:31Z",
                          "publishedAt": "2023-05-15T20:36:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Don't do variable reinitialization then... You can do Problem/restart_file_base=xxxxx or something like that (I don't recall the exact syntax).",
                  "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5918142",
                  "updatedAt": "2023-05-16T15:44:27Z",
                  "publishedAt": "2023-05-16T15:44:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Instead of using the 'Exodus' restart, you should use the 'Checkpoint' restart. It s less flexible but it will support the vector variables",
                          "url": "https://github.com/idaholab/moose/discussions/24347#discussioncomment-5918321",
                          "updatedAt": "2023-05-16T16:01:33Z",
                          "publishedAt": "2023-05-16T16:01:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Implementation of polar decomposition, sqrt for rank two tensor",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "After poking around a bit, I'm happy to see there is already a method that does polar decomposition of a rank two tensor (in tensor mechanics here).\nI know that a lot of the heavy lifting when doing the polar decomposition is in taking the square root of the tensor. I'd like to know how this is implemented in MOOSE. Looks like that polar decomposition method is calling MathUtils::sqrt(), but I'm having trouble finding where that is defined. Can anyone point me in the right direction?",
          "url": "https://github.com/idaholab/moose/discussions/24388",
          "updatedAt": "2023-06-24T22:20:35Z",
          "publishedAt": "2023-05-16T13:45:25Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "That (and a few other common unary operators) is defined in FactorizedRankTwoTensor.h. It's just an eigenvalue decomposition behind the scenes.",
                  "url": "https://github.com/idaholab/moose/discussions/24388#discussioncomment-5917894",
                  "updatedAt": "2023-05-16T15:22:04Z",
                  "publishedAt": "2023-05-16T15:22:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}