{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNi0wMlQwNzowMToyNS0wNTowMM4AUC8k"
    },
    "edges": [
      {
        "node": {
          "title": "How to use automatic differentiation correctly",
          "author": {
            "login": "nuomi68"
          },
          "bodyText": "Hello, everyone\uff01\nI want to use automatic differentiation in gap heat transfer,I'm trying to create some values with ADReal, but I don't know how to get their derivatives.\nI tried modifying the code for  GapConductance\nvoid\nGasGapConductance::computeQpConductance()\n{\n  if (_has_info)\n  {\n    const ADReal cache_conductance= h_conduction() + h_radiation()+h_contact();\n    // _gap_conductance[_qp] = h_conduction() + h_radiation();\n     _gap_conductance[_qp] = cache_conductance.value();\n    // _gap_conductance_dT[_qp] = dh_conduction() + dh_radiation();\n    _gap_conductance_dT[_qp] =cache_conductance.derivatives();\n  }\n  else\n  {\n    _gap_conductance[_qp] = 0;\n    _gap_conductance_dT[_qp] = 0;\n  }\n}\n\nI got an error like this\nerror: cannot convert 'const MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<500> >' to 'MooseADWrapper<double, false>' {aka 'double'} in assignment _gap_conductance_dT[_qp] =cache_conductance.derivatives();\nI hope to get your help!",
          "url": "https://github.com/idaholab/moose/discussions/24583",
          "updatedAt": "2023-06-24T22:46:54Z",
          "publishedAt": "2023-06-03T16:28:44Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "nuomi68"
                  },
                  "bodyText": "For example, for h_radiation(), I added AD keyword, compared with the original MOOSE\nADReal\nGasGapConductance::h_radiation()\n{\n  if (_emissivity == 0.0)\n    return 0.0;\n\n  ADReal surface_integration_factor = 1.0;\n\n  if (_gap_geometry_type == GasGapConductance::CYLINDER)\n    surface_integration_factor = 0.5 * (_r1 + _r2) / _radius;\n  else if (_gap_geometry_type == GasGapConductance::SPHERE)\n    surface_integration_factor = 0.25 * (_r1 + _r2) * (_r1 + _r2) / (_radius * _radius);\n\n  const ADReal temp_func =\n      (_temp[_qp] * _temp[_qp] + _gap_temp * _gap_temp) * (_temp[_qp] + _gap_temp);\n\n  return _stefan_boltzmann * temp_func / _emissivity * surface_integration_factor;\n}",
                  "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6079540",
                  "updatedAt": "2023-06-03T16:40:54Z",
                  "publishedAt": "2023-06-03T16:40:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "error: cannot convert 'const MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<500> >' to 'MooseADWrapper<double, false>' {aka 'double'} in assignment _gap_conductance_dT[_qp] =cache_conductance.derivatives();\n\nmeans you are trying to implicitly convert from an ADReal to a Real.\nThe material property is probably declared as a Real",
                  "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6079561",
                  "updatedAt": "2023-06-03T16:45:25Z",
                  "publishedAt": "2023-06-03T16:45:25Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Yeah, I'd like to compute the derivative of cache_conductance for temperature. But the derivative expression displayed is more complex, so I want to use automatic differentiation. Whether there are reference cases?",
                          "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6079685",
                          "updatedAt": "2023-06-03T17:14:16Z",
                          "publishedAt": "2023-06-03T17:14:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What does the header look like right now?",
                          "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6079689",
                          "updatedAt": "2023-06-03T17:15:55Z",
                          "publishedAt": "2023-06-03T17:15:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thank you for your attention, I have solved my problem now.",
                          "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6092816",
                          "updatedAt": "2023-06-05T17:10:44Z",
                          "publishedAt": "2023-06-05T17:10:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "AD residual objects should never need to access the .derivatives() API. This data member _gap_conductance_dT should go away for example",
                  "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6092404",
                  "updatedAt": "2023-06-05T16:26:53Z",
                  "publishedAt": "2023-06-05T16:26:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "_gap_conductance should be an ADReal and should contain both the function value and its derivatives. Yea .derivatives() and .value() should not be called",
                          "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6092413",
                          "updatedAt": "2023-06-05T16:28:14Z",
                          "publishedAt": "2023-06-05T16:28:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thank you for your answer, I think I have achieved what I wanted to do, maybe not the recommended way to achieve. I used ChainedReal,\nconst GenericChainedReal<true> cache_temp =GenericChainedReal<true>(_temp[_qp], 1);\n const GenericChainedReal<true> cache_conductance=  h_radiation(cache_temp);\n_gap_conductance[_qp] =  cache_conductance.value().value();\n_gap_conductance_dT[_qp] =cache_conductance.derivatives().value();\n\nGenericChainedReal<true>\nGasGapConductance::h_radiation(const GenericChainedReal<true> & temp)\n{\n  if (_emissivity == 0.0)\n    return GenericChainedReal<true>(0, 0);\n  ADReal surface_integration_factor = 1.0;\n  const GenericChainedReal<true> temp_func =\n      (temp * temp + _gap_temp * _gap_temp) * (temp + _gap_temp);\n  return _stefan_boltzmann * temp_func / _emissivity * surface_integration_factor;\n}\n\nI inserted a little AD calculation in the non-AD version because the derivative expression of gap_conductance for temperature is too complex.I used a simple example to do the experiment, and it was numerically correct\uff0cGapFluxModelPressureDependentConduction module seems to also have this kind of insert AD",
                          "url": "https://github.com/idaholab/moose/discussions/24583#discussioncomment-6092819",
                          "updatedAt": "2023-06-05T17:10:56Z",
                          "publishedAt": "2023-06-05T17:10:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to get an imaginary or complex mesh discretization",
          "author": {
            "login": "salaudeen-ya"
          },
          "bodyText": "Hello,\nI am working on a project that needs to stretch the mesh discretization in the complex plane.\nAny idea on how to get an imaginary/complex values length?",
          "url": "https://github.com/idaholab/moose/discussions/24392",
          "updatedAt": "2023-06-24T22:46:34Z",
          "publishedAt": "2023-05-16T16:50:54Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this a 3D mesh?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5918949",
                  "updatedAt": "2023-05-16T17:05:43Z",
                  "publishedAt": "2023-05-16T17:05:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "salaudeen-ya"
                  },
                  "bodyText": "I actually need it for all dimensions (1D, 2D and 3D)\nOn Tue, May 16, 2023 at 1:05 PM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n Is this a 3D mesh?\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#24392 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AJCC7QYDRIH2XSZ3YRDMUSLXGOXXBANCNFSM6AAAAAAYD5U7GM>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n-- \nYusuf",
                  "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919054",
                  "updatedAt": "2023-05-16T17:17:01Z",
                  "publishedAt": "2023-05-16T17:17:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont think we can do that. @roystgnr will know for sure.\nSo you need complex valued mesh positions, not just complex valued variables?",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919094",
                          "updatedAt": "2023-05-16T17:19:09Z",
                          "publishedAt": "2023-05-16T17:19:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "I need complex values mesh lengths, in particular. But I will be needing complex value variables too.",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919111",
                          "updatedAt": "2023-05-16T17:21:03Z",
                          "publishedAt": "2023-05-16T17:21:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Complex value variables you could just duplicate the variables, both being Real, and be mindful of it with the math.\nFor mesh lengths, we could pull the same trick, but it s not as easy as the multi-mesh capability in MOOSE is hardly used (unless you'd be fine with a MultiApp setup, all Real in one app, all imaginary in the other one, this would mean using fixed point iterations to converge equations)",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919127",
                          "updatedAt": "2023-05-16T17:23:12Z",
                          "publishedAt": "2023-05-16T17:22:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Yea at its core Node is a Point which is a TypeVector<Real> so there is definitely not support out of the box. You could play around with modifying libMesh, modifying Point to be a TypeVector<Number> and configuring libmesh to enable complex numbers, but I don't know what might break if you try that",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919669",
                          "updatedAt": "2023-05-16T18:25:09Z",
                          "publishedAt": "2023-05-16T18:25:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "I see. I will take a look at modifying the libmesh and hopefully, nothing breaks!",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919799",
                          "updatedAt": "2023-05-16T18:38:49Z",
                          "publishedAt": "2023-05-16T18:38:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "Tons of things will break.\nYou might have better luck modifying Real to be std::complex<double>.  I'd still expect things to break, but at least it's imaginable that the breakage won't be too bad to fix.",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919938",
                          "updatedAt": "2023-05-16T18:54:47Z",
                          "publishedAt": "2023-05-16T18:54:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "In my vague memory there may not be a lot of breakages but the ones that occur will be somewhat annoying such as interfaces to lapack and blas \ud83e\udd14",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919971",
                          "updatedAt": "2023-05-16T18:58:07Z",
                          "publishedAt": "2023-05-16T18:58:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "I think all our BLAS stuff is inside #ifdef LIBMESH_USE_REAL_NUMBERS - if you're running complex anyway then the code ought to fall back on our simple hand-coded routines.",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5920017",
                          "updatedAt": "2023-05-16T19:04:17Z",
                          "publishedAt": "2023-05-16T19:04:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "oh nice",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5920921",
                          "updatedAt": "2023-05-16T21:07:02Z",
                          "publishedAt": "2023-05-16T21:07:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "salaudeen-ya"
                          },
                          "bodyText": "Hello,\nI have a quick thought about getting complex lengths/planes. I was wondering if it could be possible to have a MaterialProperty specified that can be used to achieve the complex stretching. With this material property to be used in the Kernels and possibly in the mesh, maybe it could be used to distinguish between the real and the imaginary part. A kernel with the customized MaterialProperty would be used in computing the imaginary part. And eventually, the real and the imaginary part would be coupled in the end (which I don't know how, yet). This is just a conception, and I want to know if this could be possible.\nThanks.",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-6091830",
                          "updatedAt": "2023-06-05T16:34:47Z",
                          "publishedAt": "2023-06-05T15:21:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "salaudeen-ya"
                  },
                  "bodyText": "I get the part of splitting the real and the imaginary part of\nthe variables.\n\nBut for the mesh, I hope it could be done even with the MOOSE mesh\ngenerators\nOn Tue, May 16, 2023 at 1:22 PM Guillaume Giudicelli < ***@***.***> wrote:\n Complex value variables you could just duplicate the variables, both being\n Real, and be mindful of it with the math.\n For mesh lengths, we could pull the same trick, but it s not as easy as\n the multi-mesh capability in MOOSE is hardly used.\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#24392 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AJCC7Q6GUDD36DJ25P5OT5LXGOZVXANCNFSM6AAAAAAYD5U7GM>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n-- \nYusuf",
                  "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919136",
                  "updatedAt": "2023-05-16T17:25:54Z",
                  "publishedAt": "2023-05-16T17:24:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Please respond in thread if you can. It keeps the discussion much cleaner and more linear",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919642",
                          "updatedAt": "2023-05-16T18:22:05Z",
                          "publishedAt": "2023-05-16T18:22:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It's because they're emailing back. GH doesnt sort emails back into threads",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919658",
                          "updatedAt": "2023-05-16T18:23:43Z",
                          "publishedAt": "2023-05-16T18:23:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I know. So better to not email",
                          "url": "https://github.com/idaholab/moose/discussions/24392#discussioncomment-5919671",
                          "updatedAt": "2023-05-16T18:25:31Z",
                          "publishedAt": "2023-05-16T18:25:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE Instation",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "I have started to install MOOSE following the procedure.\nNow I am at\n\"Upon restarting your terminal, you should see your prompt prefixed with (base). This indicates you are in the base environment, and Conda is ready for operation: $ (base) ~>\"\nBut my terminal does not show \"$ (base) >\" . It shows just \" %\"\nPlease let me know if I can continue installation.\nS. Thomas",
          "url": "https://github.com/idaholab/moose/discussions/24072",
          "updatedAt": "2023-06-05T14:08:15Z",
          "publishedAt": "2023-04-14T20:14:26Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat do you get from mamba activate moose ?\nthen mamba list | grep moose\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620011",
                  "updatedAt": "2023-04-14T20:25:57Z",
                  "publishedAt": "2023-04-14T20:25:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "I did\n\"mamba init\nexit\"\nas the procedure instructs.\nI think \"mamba activate moose\" is the later process.\nI am sill in the process in the Conda MOOSE Environment.\nI am just wondering it is OK to proceed with \"~%\" not the \"$(base\" prompt.\nPlease let me know.\nS. Thomas",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620062",
                          "updatedAt": "2023-04-14T20:33:49Z",
                          "publishedAt": "2023-04-14T20:33:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "mamba activate moose will not break anything",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620065",
                          "updatedAt": "2023-04-14T20:34:34Z",
                          "publishedAt": "2023-04-14T20:34:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you could mamba activate base instead",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620069",
                          "updatedAt": "2023-04-14T20:34:47Z",
                          "publishedAt": "2023-04-14T20:34:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "So, type \"mamba activate moose\" now?\nPlease let me know.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620104",
                          "updatedAt": "2023-04-14T20:39:55Z",
                          "publishedAt": "2023-04-14T20:39:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "mamba activate base\nmamba list\nwhat do you get",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620126",
                          "updatedAt": "2023-04-14T20:43:25Z",
                          "publishedAt": "2023-04-14T20:43:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Is it OK to type \"mamba init\" again?\nor it might conflict with some thing.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620149",
                          "updatedAt": "2023-04-14T20:46:32Z",
                          "publishedAt": "2023-04-14T20:46:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "when type \"mamba active base\"\nI got\n\"zsh: command not found: mamba\"\nIs it OK to type \"mamba init\" again?\nor it might conflict with some thing.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620185",
                          "updatedAt": "2023-04-14T20:52:15Z",
                          "publishedAt": "2023-04-14T20:52:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Is it OK to re-start from the beginning again?\nor it might conflict with some thing.\nPlease let me know.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620224",
                          "updatedAt": "2023-04-14T20:58:43Z",
                          "publishedAt": "2023-04-14T20:58:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it s ok but it s not finding mamba so a step before that one failed",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620239",
                          "updatedAt": "2023-04-14T21:01:27Z",
                          "publishedAt": "2023-04-14T21:01:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "I did\nexport PATH=$HOME/mambaforge3/bin:$PATH\nmamba init\nThe terminal shows:\n\"==> For changes to take effect, close and re-open your current shell. <==\nAdded mamba to /Users/d3k768/.bash_profile\n==> For changes to take effect, close and re-open your current shell. <==\"\nThen, exit and re-start the terminal.  \"mamba\" does not work any more.\nI am just wondering if I can keep moving to the next process of\n\"conda config --add channels https://conda.software.inl.gov/public\" with the \"~%\" prompt in the terminal.\nplease let me know.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-5620366",
                          "updatedAt": "2023-04-14T21:27:57Z",
                          "publishedAt": "2023-04-14T21:27:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "zaheen1258"
                  },
                  "bodyText": "Hello @styyokuda, So I'm facing the same problem with conda installation in a brand new MacBook Pro with M2 Pro chip. I've already tried all the steps above like creating a .zshrc file but couldn't reach \"(base)xxxx@xxx\" step. So how did you actually overcame this problem? Thanks in advance.",
                  "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6061744",
                  "updatedAt": "2023-06-01T14:04:11Z",
                  "publishedAt": "2023-06-01T14:04:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Same issue as in not being able to get a (base) environment after install?\nIf I'm reading you correctly, I've run into the same issue with new laptops issues by our organization which \"profiles\" our machines. Perhaps the same issue exists for you; this is just a guess:\n\u276f echo $0\n-zsh\nWhile this may say ZSH is my shell, somewhere/somehow, the Conda installer detects you might still be using BASH. This is even after running the hint command supplied by Apple when starting in a BASH shell:\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nFor more details, please visit https://support.apple.com/kb/HT208050.\nFollowing the above directions does not seem to fix the issue. Unless you also make the correct modifications to your ~/.zshrc file manually, or, by heading into \"System Settings\", \"Users & Groups\", and making the \"default shell\" modification there (involves right-click advanced options clickery, which I no longer have access to on my corporate managed machine).\nIf you are unable to make the necessary changes using my \"System Settings\" instructions, then you are left with creating the necessary ~/.zshrc changes manually.\n# >>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/d3k768/mambaforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)\"\n                         ^^^^^ this                           ^^^ and this\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/d3k768/mambaforge3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/d3k768/mambaforge3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/d3k768/mambaforge3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n\nif [ -f \"/Users/d3k768/mambaforge3/etc/profile.d/mamba.sh\" ]; then\n    . \"/Users/d3k768/mambaforge3/etc/profile.d/mamba.sh\"\nfi\n# <<< conda initialize <<<\nWhere this, and this need to change accordingly, throughout the file.\nIf the above has no effect, try copy/pasting the initialization contents into a new file and sourcing it:\ncat'ing the file as an example:\n\u276f  cat mamba_init\n# >>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/YOURUSERNAME/mambaforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/YOURUSERNAME/mambaforge3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/YOURUSERNAME/mambaforge3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/YOURUSERNAME/mambaforge3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n\nif [ -f \"/Users/YOURUSERNAME/mambaforge3/etc/profile.d/mamba.sh\" ]; then\n    . \"/Users/YOURUSERNAME/mambaforge3/etc/profile.d/mamba.sh\"\nfi\n# <<< conda initialize <<<\nAnd then source the file manually, see what happens:\n\u276f  source mamba_init\n(base)  \u276f",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6064726",
                          "updatedAt": "2023-06-01T19:13:38Z",
                          "publishedAt": "2023-06-01T19:13:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zaheen1258"
                          },
                          "bodyText": "Thank you so much @milljm for your elaborate reply. I think that creating the necessary ~/.zshrc manually is the best option. However, I solved it with a different way. Yesterday before getting your response, I installed Conda with mambaforge installer from GitHub rather than following mambaforge3 installation instruction from INL getting started page. I let the installer initialise conda and it created the necessary .zshrc file for me. After that I could install MOOSE smoothly and even ran the step01 of DarcyThermoMech tutorial. Now the question is, am I going to face any problem in the future for using mambaforge instead of mambaforge3? Thanks again for all your help.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6073482",
                          "updatedAt": "2023-06-02T15:41:31Z",
                          "publishedAt": "2023-06-02T15:41:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Do you recall the URL you installed? Our instructions point to the Miniforge GitHub page. But that site has several variants. Perhaps the one you choose may be the \"better\" one. I'd like to try it out  for myself, and possibly change our instructions if it \"just works better\"!",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6090113",
                          "updatedAt": "2023-06-05T12:35:32Z",
                          "publishedAt": "2023-06-05T12:35:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zaheen1258"
                          },
                          "bodyText": "Yes! I do remember. I went to the following URL directly from google.\nhttps://github.com/conda-forge/miniforge#mambaforge\nand then I downloaded the installer for the apple silicon chip (Screenshot attached). Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6090771",
                          "updatedAt": "2023-06-05T13:43:42Z",
                          "publishedAt": "2023-06-05T13:43:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Well, odd... That is the \"group\" we are instructing folks to download using curl, so I am not sure why the second attempt worked for you... But I am glad you got it sorted!",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6090852",
                          "updatedAt": "2023-06-05T13:49:28Z",
                          "publishedAt": "2023-06-05T13:49:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "zaheen1258"
                          },
                          "bodyText": "Thanks a lot. Strange!... but I can think of a possibility. Before trying for 2nd time I tried creating a .zshrc file and pasting your code manually as per your direction present in these comments. However, it didn't work that time. So, I think the installer got a .zshrc file to manipulate for the 2nd time which wasn't simply present during 1st attempt. I'm not sure myself as I'm shooting in the dark here. However, this is the only difference between my 1st and 2nd attempt. Also, if I remember correctly, the cURL command did not initialise conda automatically. But during 2nd time the installer gave me a prompt in the terminal, something like this:\ndo you want the installer to initialise conda?(Y/n):\nI think that made the difference.",
                          "url": "https://github.com/idaholab/moose/discussions/24072#discussioncomment-6091071",
                          "updatedAt": "2023-06-05T14:08:16Z",
                          "publishedAt": "2023-06-05T14:08:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "SecondPhase",
          "author": {
            "login": "Adairle"
          },
          "bodyText": "Request help\nThe collision program will end after the interaction force between the second phase particles at the solid-liquid interface.\nLooking forward to your reply, thank you\uff01",
          "url": "https://github.com/idaholab/moose/discussions/24591",
          "updatedAt": "2023-06-24T22:46:23Z",
          "publishedAt": "2023-06-05T07:27:31Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCould you please give more details? What models are you using?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24591#discussioncomment-6090038",
                  "updatedAt": "2023-06-05T12:27:59Z",
                  "publishedAt": "2023-06-05T12:27:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "changing non-linear tolerance during simulation",
          "author": {
            "login": "sinaomrani96"
          },
          "bodyText": "Hi,\nHope you are doing well.\nI wanted to know that if we can change the non-linear tolerance during the simulation. In my system, I add an extra phase to simulation which add to non-linearity of system and I was wondering if this is possible. The alternative way would be restart/recover method with a more loose tolerance, I guess. Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24592",
          "updatedAt": "2023-06-24T22:46:19Z",
          "publishedAt": "2023-06-05T09:27:37Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNo we currently cant change that number. It's set in the input file and we can't modify it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24592#discussioncomment-6090075",
                  "updatedAt": "2023-06-05T12:30:52Z",
                  "publishedAt": "2023-06-05T12:30:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Geochemistry Module] Kinetic Rate as an aux-variable",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello Moose Geochemistry Experts,\nIs it possible to output the dissolution rate calculated by the GeochemistryKineticRate UO as an aux-variable? For example, let\u2019s say I want to output the kinetically-controlled dissolution rate of quartz and then use this rate as a coupled variable in a PorousFlow material. Is this feasible, and how do I go about it? Thx.",
          "url": "https://github.com/idaholab/moose/discussions/24584",
          "updatedAt": "2023-06-05T01:06:38Z",
          "publishedAt": "2023-06-03T16:38:57Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "@WilkAndy?",
                  "url": "https://github.com/idaholab/moose/discussions/24584#discussioncomment-6084767",
                  "updatedAt": "2023-06-04T22:00:50Z",
                  "publishedAt": "2023-06-04T22:00:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Varibale derivates, coupled variable derivatives",
          "author": {
            "login": "Alirezarei"
          },
          "bodyText": "I have general questions about how to add variable derivatives to the kernel. My specific questions are:\n\n\nHow can I add different variable derivatives (let it be WRT time, space, or a mix of these two) to the kernel. Is there any source or sample that I can refer to?!\nLet's say I want to use _ad_grad_u_dot in my kernel. How should the header and the source files look like?\n\n\nHow can I do the same for coupled variables and their derivatives?\n\n\nThank you,\nAlireza",
          "url": "https://github.com/idaholab/moose/discussions/24580",
          "updatedAt": "2023-06-24T22:45:58Z",
          "publishedAt": "2023-06-02T19:09:45Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou have to leverage the coupleable (interfaces/coupleable.h) interface to retrieve those derivatives (time -> coupledDot, space -> coupledGradient)\nIn your header for the kernel you are creating, add references to those values. The type of the values is the return type of the routine in the coupleable interface.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24580#discussioncomment-6075279",
                  "updatedAt": "2023-06-02T19:53:01Z",
                  "publishedAt": "2023-06-02T19:53:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Alirezarei"
                          },
                          "bodyText": "Hi Guillaume,\nThank you so much for your response. I'm still struggling with this. Could you please provide some sample header and source files in which they use higher order dedrivatives like ad_grad_u_dot or the second order derivative WRT time and space of the field variables?\nIt would be great if you can refer me to some sample header and source files that do the same for coupled variables as well.\nI appreciate your help,\nAlireza",
                          "url": "https://github.com/idaholab/moose/discussions/24580#discussioncomment-6079366",
                          "updatedAt": "2023-06-03T15:58:13Z",
                          "publishedAt": "2023-06-03T15:58:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Here's one with a u_dot\nhttps://github.com/idaholab/moose/blob/968eb46a3868f624d7930083ffdedd039b3d4fd5/framework/include/kernels/TimeKernel.h\nHere s on with a grad_u\nhttps://github.com/idaholab/moose/blob/968eb46a3868f624d7930083ffdedd039b3d4fd5/framework/include/auxkernels/DiffusionFluxAux.h\nSecond time derivative of a VECTOR (remove vector to get a scalar)\n\n  \n    \n      moose/modules/electromagnetics/include/kernels/VectorSecondTimeDerivative.h\n    \n    \n         Line 30\n      in\n      968eb46\n    \n  \n  \n    \n\n        \n          \n           const VectorVariableValue & _u_dot_dot; \n        \n    \n  \n\n\nin general you want to rely on this page to use the coupleable interface:\nhttps://mooseframework.inl.gov/docs/doxygen/moose/classCoupleable.html",
                          "url": "https://github.com/idaholab/moose/discussions/24580#discussioncomment-6079431",
                          "updatedAt": "2023-06-03T16:20:06Z",
                          "publishedAt": "2023-06-03T16:20:05Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Nodal Materials",
          "author": {
            "login": "stephen-dixon"
          },
          "bodyText": "Can Functor materials be used as nodal materials? Otherwise are there any plans to implement nodal materials for use with the nodal kernel system?\nFor context I'm currently trying to develop a reaction-diffusion type app with a large number of species, where the reaction rates at each point are calculated in an external library I'd like to treat as a black-box. I think I'd like to use nodal kernels and the AD system for this, but an initial implementation using a user object and aux-variables (similar to Thermochimica in the chemical reaction module) hasn't worked for me. I did manage to get something running with normal kernels and materials, but I'm concerned numerical stability could be an issue.\nThanks for your time.",
          "url": "https://github.com/idaholab/moose/discussions/24560",
          "updatedAt": "2023-06-02T13:15:33Z",
          "publishedAt": "2023-06-01T10:07:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNot currently.\nHowever, this is something we are considering because it would be very natural.\nA new NodalArg for the functor spatial argument could be {node, element}  or {node, subdomain_id} and would naturally know which subdomain the material has been defined on.\nPart of the problem with nodal materials has always been how to deal with different material definitions on different subdomains, as nodes can be at the interface between two subdomains. I think this is solved if we let the caller specify which subdomain the node is actually part of.\n@lindsayad  will know more about issues with nodal materials\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24560#discussioncomment-6060509",
                  "updatedAt": "2023-06-01T16:45:07Z",
                  "publishedAt": "2023-06-01T12:00:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Hi @stephen-dixon thank you for your interest in functors \ud83d\ude04 Yes I think nodal functor evaluation could be on the way soon. See #19420 where adding nodal evaluations is a top priority. I agree with @GiudGiud that supplying a subdomain would alleviate the principal concern we've always had with \"nodal materials\", e.g. what happens at the intersection between multiple different materials. But by allowing the user to explicitly say what subdomain they want to associate with, that concern goes away",
                          "url": "https://github.com/idaholab/moose/discussions/24560#discussioncomment-6063537",
                          "updatedAt": "2023-06-01T16:42:05Z",
                          "publishedAt": "2023-06-01T16:42:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "stephen-dixon"
                          },
                          "bodyText": "\"Functors are great and we want more of them\" love it. Thanks for the quick responses.",
                          "url": "https://github.com/idaholab/moose/discussions/24560#discussioncomment-6071849",
                          "updatedAt": "2023-06-02T13:15:35Z",
                          "publishedAt": "2023-06-02T13:15:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can a parse function material property depend on the old value of a variable?",
          "author": {
            "login": "bylore"
          },
          "bodyText": "Hi, i want to create a material property depending on the last time step value of a variable in a parse function manner. Can you guys give some advice?",
          "url": "https://github.com/idaholab/moose/discussions/24448",
          "updatedAt": "2023-06-02T12:43:06Z",
          "publishedAt": "2023-05-23T07:16:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can use the coupledValueOld instead of the coupledValue to get the variable value at the last time step.\nHowever, with ParsedMaterial, we have not implemented that.\nSo you would have to either:\n\nmodify the code\nuse a trick. Using the SelfAux auxkernel you can copy a variable onto another variable. If you execute it on TIMESTEP_BEGIN, you will effectively \"save\" the previous step variable value\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24448#discussioncomment-5977755",
                  "updatedAt": "2023-05-23T12:32:37Z",
                  "publishedAt": "2023-05-23T12:32:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "Thanks for your repley. I found that ParsedMaterial and DerivativeParsedMaterial has a parameter \"material_property_names\". If I define a material property calculated on some variable old value. And  define a ParsedMaterial depend on the material property.  Then I guess I can obtain a ParsedMaterial depend on the variable old value?",
                          "url": "https://github.com/idaholab/moose/discussions/24448#discussioncomment-6071165",
                          "updatedAt": "2023-06-02T12:16:46Z",
                          "publishedAt": "2023-06-02T12:16:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you could do that",
                          "url": "https://github.com/idaholab/moose/discussions/24448#discussioncomment-6071327",
                          "updatedAt": "2023-06-02T12:33:45Z",
                          "publishedAt": "2023-06-02T12:33:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "double Integrate Postprocessor",
          "author": {
            "login": "bosxered"
          },
          "bodyText": "Hello Moose Experts.\nI found a postprocessor called SideIntegralVariablePostprocessor that integrates variable u over the side.\nIn a 2D system, it calculates, at the bottom,\n\nI want to calculate\n\nIs there any postprocessor that calculates the above one?\nThank you.\nBest wishes,\nJeonghwan",
          "url": "https://github.com/idaholab/moose/discussions/24564",
          "updatedAt": "2023-06-02T12:01:31Z",
          "publishedAt": "2023-06-01T14:35:59Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat are you trying to compute? This does not seem right, a \"side\" of a 2D system is 1D so the differential element is dx not dx*dx.\nAre you looking for a volumetric (2d element in 2D) integration?\nTo your question, no there is not. But you could make your own by modifying the SideIntegralPostprocessor which has the quadrature integration calculation\nGUillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6062204",
                  "updatedAt": "2023-06-01T14:45:42Z",
                  "publishedAt": "2023-06-01T14:45:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "I am trying to simulate a 2D system assuming a cylindrical symmetry just like the above picture.\nI have to calculate the electrical current using the current density at the bottom.\nI think Sigma(u*3.14*dx*dx) is reasonable because I am assuming cylindrical symmetry.\nDoesn't it make sense?\nActually, I am a beginner in C++ language and I have not sure that I can modify well. That is why I was finding an already-implemented postprocessor. Could you check if I am doing right?\nFrom the SideIntegralPostprocessor.C, I modified \"::computeIntegral()\" as follows\nReal\nSideIntegralPostprocessor::computeIntegral()\n{\n  Real sum = 0;\n  if (_qp_integration)\n    for (_qp = 0; _qp < _qrule->n_points(); _qp++)\n      sum += _JxW[_qp] * _coord[_qp] * _coord[_qp] * computeQpIntegral();\n  else\n  {\n    // Finite volume functors integration is over FaceInfo, not quadrature points\n    getFaceInfos();\n\n    for (auto & fi : _face_infos)\n      sum += fi->faceArea() * fi->faceCoord() * computeFaceInfoIntegral(fi);\n  }\n  return sum;\n}\n\nThe modified line is just sum += _JxW[_qp] * _coord[_qp] * _coord[_qp] * computeQpIntegral();\nand I am trying to make a new postprocessor \"SideDoubleIntegralValuePostprocessor\" from this \"SideDoubleIntegralPostprocessor\".\nIs it make sense?\nThank you",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6062757",
                          "updatedAt": "2023-06-01T15:40:42Z",
                          "publishedAt": "2023-06-01T15:40:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I still dont think you need to do this.\nThe _coord in RZ is here to multiply by the radius\nJxW has the local weight of the quadrature and the mapping between elements\nAre you performing RZ simulations or 3D with a cylinder system?",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6064757",
                          "updatedAt": "2023-06-01T21:26:40Z",
                          "publishedAt": "2023-06-01T19:19:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "No. I am performing a 2D simulation (x,y).\nThe red box is my system.\n\nAnd this is my Exodus output results of J which is the current density.\n\nI am performing 2D simulation but if I assume this has cylindrical symmetry, I can consider this as a 3D cylinder system by just doing 2D simulation.\nAs I mentioned, I want to calculate the current(A) from the current density(A/m^2).\nEven if I am doing a 2D simulation for computational efficiency, I want to get the current value in a 3D system with simple and reasonable assumptions.\nTo do that, I want to calculate (in this case, u is the current density)\n\nthis one because, if it is right, I can get the current value by multiplying 3.14.\nFor example,\n\nIf the J is the same over the boundary just like the above simple example, I can just use SideaveragePostprocessor and multiply using Parsedpostprocessor.\nUnfortunately, it isn't so that I cannot compare with current values from different systems.\nSo, does your answer mean that my modification of the code is correct?\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6067902",
                          "updatedAt": "2023-06-02T05:47:20Z",
                          "publishedAt": "2023-06-02T05:47:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Are you using coord_type = RZ in the Mesh block?\nThis multiplication to go from the bottom line to the blue area should be already performed by a SideIntegralPostprcoessor if you are using coord_type = RZ",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6070848",
                          "updatedAt": "2023-06-02T11:38:49Z",
                          "publishedAt": "2023-06-02T11:38:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "No. I am not using RZ coord_type.\nMy simulated system is only a 2D green rectangular system.\nUsing results from the rectangular system, I can get 3D system results without 3D simulation when I can calculate\n\nbecause my 2D system has cylindrical symmetry.",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6070958",
                          "updatedAt": "2023-06-02T11:50:28Z",
                          "publishedAt": "2023-06-02T11:50:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Well there's your problem.\nIf your 2D system has cylindrical symmetry, you have to specify the coordinate type of RZ in the Mesh block.\ncoord_type = RZ\nIf you dont, the postprocessing is wrong, but the solve as well. All the kernels are acting on elements of the wrong size.",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6071000",
                          "updatedAt": "2023-06-02T11:56:23Z",
                          "publishedAt": "2023-06-02T11:56:23Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bosxered"
                          },
                          "bodyText": "Okay.\nI will try the corrd_type = RZ.\nThank you very much!!",
                          "url": "https://github.com/idaholab/moose/discussions/24564#discussioncomment-6071040",
                          "updatedAt": "2023-06-02T12:01:26Z",
                          "publishedAt": "2023-06-02T12:01:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}