{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNi0wNlQxMDo1NzoyNC0wNTowMM4APhkQ"
    },
    "edges": [
      {
        "node": {
          "title": "Trouble with visualizing mesh using Peacock",
          "author": {
            "login": "leosmith36"
          },
          "bodyText": "I am trying to visualize a mesh using Peacock's exodus viewer, and I am able to get the color scale to show but not the image itself. I should be able to see a grid of elemental compositions, and it works in Paraview but not in Peacock. You can see a screenshot of my issue below. I am not sure what else to try, so all advice would be appreciated!\n\nMy laptop runs Windows 10, and I am running Peacock on Ubuntu 20.04 using the MOOSE conda framework. I open peacock using the peacock command in Ubuntu, and then I navigate to the exodus.e file using the exodus viewr. The output I get when I run peacock is:\nQStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-<username>'\nNo executable found for method type(s): opt, dbg, oprof, devel",
          "url": "https://github.com/idaholab/moose/discussions/21237",
          "updatedAt": "2022-06-09T18:51:10Z",
          "publishedAt": "2022-06-08T15:12:44Z",
          "category": {
            "name": "Q&A Tools"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Peacock on WSL has issues I think\nhttps://mooseframework.inl.gov/getting_started/installation/windows10.html\nso even if you fix this one you ll still have the others. We recommend you work with paraview or with the NEAMS workbench. I ll try to get instructions for the second one and report back\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21237#discussioncomment-2906823",
                  "updatedAt": "2022-06-08T15:20:04Z",
                  "publishedAt": "2022-06-08T15:19:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "best reference for now\nhttps://code.ornl.gov/neams-workbench/downloads\nHave not used it on WSL so please let us know if you hit issues there",
                          "url": "https://github.com/idaholab/moose/discussions/21237#discussioncomment-2907042",
                          "updatedAt": "2022-06-08T15:44:21Z",
                          "publishedAt": "2022-06-08T15:44:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "array of variables",
          "author": {
            "login": "mortezaaesmaeilpour"
          },
          "bodyText": "Hi all\nThe mass, momentum, and energy equations are solved (and coupled) in my MOOSE-based application to simulate multiphase flows in wellbores. Now, I want to transport different components in the simulation environment (like CO2, N2, NaCl, ...). a new main variable should be defined for the concentration of each of these new components in the mixture. The new kernels are like each other except the off-diagonal jacobian part ( concentrations of other components).\n\nMy first question is: what is the best way to define these new kernels and variables (action, array kernel, ....). Could you please address an example in MOOSE?\nMy second question is: How can I compute or define off-diagonal jacobians in mass, momentum, and energy kernels against these new sets of variables (concentration)?\n\nKind regards\nMorteza",
          "url": "https://github.com/idaholab/moose/discussions/21234",
          "updatedAt": "2022-06-12T10:25:22Z",
          "publishedAt": "2022-06-08T08:05:51Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe best way is to use array variables and array kernels if there are quite a few components. This will reduce the number of objects needed to tackle the equations and possibly will reduce the computational time by reducing duplicate calculations.\nWell is there off-diagonal jacobian terms for mass momentum and energy? Are the concentrations in co2 etc influencing the material properties, like density or thermal conductivity? If so then I think the cleaner way to do this is to use automatic differentiation. The derivatives will automatically be carried forward from the concentrations to those equations\nJust out of curiosity, what numerical discretization did you use for this problem? FEM ? FV? What scheme?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21234#discussioncomment-2906704",
                  "updatedAt": "2022-06-08T15:03:37Z",
                  "publishedAt": "2022-06-08T15:03:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "help with convergence [likely BCs issue] of PorousFlow ThermoHydro hydrothermal model",
          "author": {
            "login": "garciapintado"
          },
          "bodyText": "Hi all,\nI am struggling to get convergence in a thermo-hydraulic model with PorousFlow. In my real case scenario, the model domain is a 2D cross-section of an ocean-basin, bounded at both sides by continental margins. The model aims to simulate basin-wide hydrothermal circulation. This is a density-driven circulation, where the thermal energy that heats the water comes form the underlying mantle. Thanks to you (discussion #20139, solved by @WilkAndy ) now PorousFlow is block-restricted, which has allowed me to go further by applying only non-PorousFlow thermal diffusion in the underlying mantle, so avoiding the high pressure and temperature subdomain, which were very problematic for the water EOS.\nI can figure out some reasons by which the model still does not converge. Possibly, the tabulated extrapolation of the EOS [which I still need] is perhaps not god enough, but more than that I believe the top boundary conditions are probably not still in a good shape, which is driving the convergence process towards wildly sampling the EOS out of reasonable  P-T values.\nTo help me finding out the issue(s), I\u2019ve been back to using box synthetic models of partial domains and playing with the boundary conditions. The attached image represents a model [after 6300 year simulation time] corresponding to the input file below. This model represents a block of porous material completely submerged [its top is at -3000m] under the ocean [other areas in my real model are sub-areal, in unsaturated conditions toward the surface]. That is, in this simple case it is assumed the model is top-bounded by ocean water, which can enter and exit freely the top of domain. No flow can go through the bottom, and flow should freely go in & out through the side boundaries [representing a continuation of porous matrix materials].\nThe bottom of the domain is [DirichletBC] at 800 \u00baC, representing a heat source from an upwelling melting body coming from the mantle. Porosity is constant, and permeability has a Gaussian-decay away from the center of the domain towards the sides, such that it allows for convection to develop only towards a centered column in the domain.\nI had hoped that this should still be an easy case for MOOSE-PorousFlow.  This synthetic model eventually converges, but still it goes through several steps relatively early in the simulation [~200 simulation years ] where it struggles to converge, and it samples out of the [very wide] tabulated range of P-T for the EOS. Overall I\u2019d say the model is too slow [if I run it with a simple fluid, it is more than x100 times faster, but then the convection does not develop, so it is not realistic at all], and I am wondering if there is an issue with the BCs, which aggravates later on  in the \u201creal-case\u201d simulations [where the range of pressures and temperatures is wider, including unsaturated conditions] to the point of preventing convergence at all at the initial steps.\nAs you can see in the image, the hydrothermal plumes at the top of the domain have a natural shape, apparently leaving the domain without extraneous effects. To get this I\u2019ve been playing with  PorousFlowPiecewiseLinearSink, for both pore pressure and temperature. By playing with the parameters for these BCs I\u2019ve finally got hydrothermal plumes that do not tend to vanish nor to rebound when they reach the top of the domain. So, from a visualization perspective they look reasonable.\nStill, being the convergence so problematic at several steps throughout the simulation, makes me think I am doing something wrong. The input file can be directly run with the standard MOOSE+PorousFlow+FluidProperties modules plus the attached fluid properties file. The input files and tabulated EOS it calls [I can upload the 2.2GB Exodus output file after 10000 yr if that helps; simulation is ~3h with 'mpiexec -np 4' my iMAC] is at https://github.com/garciapintado/MOOSE_porous_flow_stuff.git\nHope that you can help to spot  input errors and advise on ways to make the convergence go faster [as said, I am mostly suspicious of the BCs; and not even certain to be applying correctly the left and right \u2018PorousFlowOutflowBC\u2019 conditions, as the solution is not as symmetric as I would have expected regarding the lateral fluxes].\nBest wishes,\nJavier\n\u2014",
          "url": "https://github.com/idaholab/moose/discussions/21038",
          "updatedAt": "2022-06-25T05:41:20Z",
          "publishedAt": "2022-05-17T10:04:07Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Tagging @cpgr on this one.  I'm going on holiday soon so may be of limited use.",
                  "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2766575",
                  "updatedAt": "2022-06-09T14:40:26Z",
                  "publishedAt": "2022-05-17T10:26:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Hi @garciapintado\n@WilkAndy knows I love these convection problems!\nI think your main issue driving your convergence problem is that your maximum tilmestep size is too large. I set dtmax = 1e9 arbitrarily, and each tilmestep converged in less than 5 nonlinear iterations and there was never a point where the solver tries to sample outside the specified pressure and temperature range. I also made a much smaller csv file of fluid properties to speed things up. Your one is 26 MB, so lots of entries. Most of the time required in  TabulatedFluidProperties is finding the correct position in the array for interpolation, so less points in your csv file = faster lookup. I'm not sure how you made yours, but I like to use the python CoolProp library.\nAnyway, it looks like the warm water is escaping through the top, so your BC's look to be working for you. With the above changes, the following took about 45 minutes using 4 cores of my iMac. You could speed this up by coarsening the mesh in the upper regions and to the sides where nothing is happening (you could use less elements in the y direction and use the bias_y parameter, or even just refine in the middle section where everything happens).\n\n  \n    \n    \n\n    convection.mp4\n    \n  \n\n  \n\n  \n\n\nPS: using SimpleFluidProperties doesn't lead to any convection, so all flow is diffusive which is why it runs so fast. The reason is that the density change over this temperature range is too small using a constant thermal expansion coefficient like SimpleFluidProperties uses in comparison to the real density change.\nAlso, here is the code I used to create a csv file of fluid properties\nimport CoolProp.CoolProp as cp\nimport pandas as pd\nimport numpy as np\n\n# Range of pressure and temperature\npressure = np.arange(1e7, 1.8e8+1, 5e6)\ntemperature = np.arange(273, 1300+1, 50)\n\ndata = np.zeros((pressure.size * temperature.size, 6))\n\nfor i in np.arange(pressure.size):\n    for j in np.arange(temperature.size):\n        data[i * temperature.size + j, 0] = pressure[i]\n        data[i * temperature.size + j, 1] = temperature[j]\n        data[i * temperature.size + j, 2] = cp.PropsSI('D', 'P', pressure[i], 'T', temperature[j], 'Water')\n        data[i * temperature.size + j, 3] = cp.PropsSI('V', 'P', pressure[i], 'T', temperature[j], 'Water')\n        data[i * temperature.size + j, 4] = cp.PropsSI('H', 'P', pressure[i], 'T', temperature[j], 'Water')\n        data[i * temperature.size + j, 5] = cp.PropsSI('U', 'P', pressure[i], 'T', temperature[j], 'Water')\n\n# Write out fluid_properties_extended.csv\ndf = pd.DataFrame(data, columns = ['pressure', 'temperature', 'density', 'viscosity', 'enthalpy', 'internal_energy'])\ndf.to_csv('fluid_properties_extended.csv', index=False)",
                  "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2779971",
                  "updatedAt": "2022-05-19T00:50:44Z",
                  "publishedAt": "2022-05-19T00:50:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @cpgr,\nMany thanks! This is extremely helpful and informative! I was unaware of CoolProp, and made an R script with a simple extrapolation towards extrema P,T values with a mild slope taken from the boundaries of the available P,T thermodynamic domain + a small mutiplicative factor.\nI'll try your advices + script and will come with feedback [hopefully with the real domain problem; which has further issues]",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2781187",
                          "updatedAt": "2022-05-19T06:34:29Z",
                          "publishedAt": "2022-05-19T06:34:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I forgot to mention that you could make your first time step much larger than 1, as you give a good initial function for p and T. I used 1e4 I think (this saves a few time steps at the start). Also, you could increase the maximum tilmestep which would speed up the total compute time as well. I just guessed 1e9s, you might get away with 3e9 or higher, just not 3e10!",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2781301",
                          "updatedAt": "2022-05-19T06:56:12Z",
                          "publishedAt": "2022-05-19T06:56:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Thanks! A short question: why don't you get \"cv\" and \"cp\" for the tabulated fluid properties? And if so, where does MOOSE get these properties from?",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2781466",
                          "updatedAt": "2022-05-19T07:26:03Z",
                          "publishedAt": "2022-05-19T07:26:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "They aren't used in any of the kernels you have, so I didn't include them. If they were required, it would pass calculation back to the water fluid properties (in your case it would error out with a pressure out of range error).",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2781581",
                          "updatedAt": "2022-05-19T07:42:54Z",
                          "publishedAt": "2022-05-19T07:42:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @cpgr,\nI am using now your script based on CoolProp to get the thermodynamic fluid properties of water. Many thanks!\nThe limitation of the maximum timestep to 1e9 also works for me [higher values as 2e9 still lead to some sampling out of the validity range of the thermodynamic tables], and I am also using your discretisation steps for P,T so the file for the tabulated properties is much smaller.\nStill, the simulation is not much faster on this side, and now and then I am getting some steps with take more than 10 nonlinear iterations to converge leading to smaller timesteps. All in all, it still takes 2.76 h [slightly less than before] in my iMAC, which is not that old [Processor: 3.6 GHz Intel Core i9; Memory: 64 GB2667 MHz DDR4] with \u2018mpiexec -np 4\u00b4 processors,\nand about the same time in a newer [1.5 years old] linux workstation.\nI am wondering if it might be an issue with version of libraries [the last time I updated MOOSE+PETSc\u2026 was ~January in the iMAC]. In any case, I am going to try now a realistic case so I can be more specific about the real application at hand\u2026",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2784860",
                          "updatedAt": "2022-05-19T16:10:04Z",
                          "publishedAt": "2022-05-19T16:10:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hmm, if you upload your new input file I can try and run it.\nIn any case, it is good that it is running.",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2786919",
                          "updatedAt": "2022-05-19T22:09:29Z",
                          "publishedAt": "2022-05-19T22:09:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "I've uploaded it along with the python script to create the tabulated water properties [slightly wider range than your so I can use it for my 'real' case scenario, but still only 127KB size]\nAs it is, it has taken 9950 s in my iMAC with 'np -4'\nI'm also close to finish an example with my real case scenario...",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2788315",
                          "updatedAt": "2022-05-20T05:47:20Z",
                          "publishedAt": "2022-05-20T05:47:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Hi @cpgr,\nAssuming we\u2019ll be able to figure out why the \u2019simple block\u2019 simulation still is not as fast in my computer, in the meantime I\u2019ve been back to my original, realistic case, scenario [on which @WilkAndy started to help earlier this year], here I am even more doubtful about my BCs [actually, pretty sure they are wrong!] but kind of lost about how to do it properly. Sorry, if you think this is a separate discussion. I can wait until the current one on the simple block is solved and then open another one with this message, but hoped this would give context on the nature of the real application.\nFor info, I am pasting an image resulting from a coupled  mechanical-hydrothermal simulation done with Matlab. I have done this is Matlab in a pretty raw way [splitting all operations], and I\u2019hope to do it more properly in MOOSE, including some geochemistry [anhydrite deposition to close the pore space\u2026]. I already have a mechanical code in Matlab, which by now the plan is to keep using it. The idea it that every 10000 years [the matlab mechanical model timestep] the matlab mesh [an evolving Lagrangian] would be exported to MOOSE, who would do the hydrothermal part and return the thermal state and the porepressure to Matlab. And so on. At least by now, I\u2019d do the coupling just by system files forth and back every 10000 simulation years. The total coupled simulations would run for several millions years if we can afford that. The bottleneck is the hydrothermal part, which likely will run at a few years timesteps in MOOSE-PorousFlow.  So, the computing time it would take to do the hydrothermal part is critical to face the problem. The pasted image results from my current simple coupling between the mechanical and hydrothermal flow after ~10 Myr of hydrothermal activity [only the temperature feedback goes by now into the mechanical]. It shows the permeability field and the isotherms. The convection that develops around faults looks fine to me. I also believe that the hydrothermal activity extends too much towards the subaerial part, and don\u2019t know how much of this is an artifact. In any case, the lack of geochemistry here [e.g. anhydrite deposition] seems to lead to unrealistically long-lived hydrothermal activity. My hope is to solve these issues in MOOSE+PorousFlow.\n\n\nThe second pasted image indicates the blocks I am using into MOOSE. So, in MOOSE, I am considering a lower block [not governed by PorousFlow], where only heat conduction applies [\u2018nopore\u2019]. The upper blocks are governed by the PorousFlow dictator. The central part of the domain is submerged under the ocean [this covers the continental shelves; roughly the width of the \u2018sediment\u2019 area], while towards the sides, there is a subaerial part, where only barometric pressure should apply.  By now, I do not want to simulate the mechanical part in MOOSE as this is done in Matlab, so this would be a ThermoHydro coupling in PorousFlow.\nAlso, I am not really interested in the unsaturated areas towards the top of subaerial part, but have to include them as well, as heat conduction should be considered in all the domain. To create the \u2018unsat\u2019 subdomain, I am simply making the assumption that a \u2018phreatic level\u2019 is above sea level by some 25% of the vertical distance between the topography and sea_level at each x-coordinate. My idea of doing so is to simply induce a mild flow from the sub-aerial part towards the submarine continental shelfs.\nA problem I am facing now is how to set these top boundary conditions. Can this be done with a single-phase unsaturated simulation? If so, how would one set the porepressure boundaries on the top of the subaerial part so a mild inflow [kind of emulating rainfall] replenishes the subaerial part as it drains toward the ocean?\nA first alternative [a] I\u2019ve considered is to say the \u2018unsat\u2019 block is also only subject to conduction. Then indicate some environment pressure and use PorousFlowPiecewiseLinearSink BCs for the porepressure at the interface between \u2018unsat\u2019 and \u2018crust\u2019. The flux allowed in this interface is very small, with the idea that it allows for some control of the porepressure at this interface but the small flux internal flux avoids some extraneous effects in the thermal field [i.e. I am not added the corresponding PorousFlowPiecewiseLinearSink for temperature at this inner interface, as conceptually I would not understand its meaning]. If I'm getting this right this would emulate a \"confined\" situation for the porous media under 'unsat', and the PorousFlowPiecewisewiseLinearSink would emulate the lack of the mechanical pressure, so continuously feeding the porepressure at this interface.\nA simulation for 10000 year with a simple fluid takes only 671 secs [but thanks to you I understand this is because the lack of convection]. This develops some anomalies in temperature around the \u2018unsat\u2019 area, which I believe is because these internal BCs, but still Darcy fluxes close to the ocean bottom look to be in the right direction. However, if I try a real fluid [now with your CoolProp script] the simulation crashes very soon with messages as:\n\u201cTemperature 271.179 is outside the range of tabulated temperature (273.17, 1300).\nA MooseException was raised during Auxiliary variable computation.\nThe next solve will fail, the timestep will be reduced, and we will try again.\u201d\nA second alternative [b], I\u2019ve been considering is to consider \u2018unsat\u2019 as part of the PorousFlow domain, so this block is also subject to convection. In reality I\u2019d favour this alternative if it worked. It is way slower than [a] for a simple fluid,  but positively the solution develops negative porepressures in the \u2018unsat\u2019 area, wich I understand is a good thing [still saturation is always 0, which I don\u2019t understand]. Again, error messages similar to alternative [a] appear and the simulation crashes soon for the realistic EOS. Considering that \u2018ptop_auxvar\u2019 is the sum of a constant barometric pressure [1 atm] + the pressure by the corresponding water column, used as environment pressure, that \u2018temperature_f\u2019 is the temperature field imported from matlab, and that `top_submarine\u2019 and \u2018top_subaerial\u2019 are respectively the nodesets under the ocean or over sea level, the BC block for [b] is as:\n[BCs]\n[Ptop_submarine_sink]\ntype = PorousFlowPiecewiseLinearSink\nvariable = porepressure\nboundary = top_submarine               # nodes touching the ocean bottom\nPT_shift = ptop_auxvar                      # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '0 1e9'\nmultipliers = '0 1e9'\nuse_mobility = true\nuse_relperm = true\nflux_function = 100\nfluid_phase = 0\nsave_in = mass_flux_top_submarine_sink\n[]\n[Ptop_submarine_source]\ntype = PorousFlowPiecewiseLinearSink\nvariable = porepressure\nboundary = top_submarine               # nodes touching the ocean bottom\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '-1e9 0'\nmultipliers = '-1e9 0'\nuse_mobility = true\nuse_relperm = false\nflux_function = 100\nfluid_phase = 0\nsave_in = mass_flux_top_submarine_source\n[]\n[Ptop_subaerial_sink]\ntype = PorousFlowPiecewiseLinearSink\nvariable = porepressure\nboundary = top_subaerial               # nodes top-bounding the subDomain for porous flow simulation\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '0 1e9'\nmultipliers = '0 1e9'\nuse_mobility = true\nuse_relperm = true\nflux_function = 100 # similar to Ptop_submarine_sink to avoid shocks\nfluid_phase = 0\nsave_in = mass_flux_top_subaerial_sink\n[]\n[Ptop_subaerial_source]\ntype = PorousFlowPiecewiseLinearSink  #\nvariable = porepressure\nboundary = top_subaerial               # nodes top-bounding the subDomain for porous flow simulation\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '-1e9 0'\nmultipliers = '-1e9 0'\nuse_mobility = true\nuse_relperm = false\nflux_function = 0.001 # to be calibrated: should allow for emptying of porespace\nfluid_phase = 0\nsave_in = mass_flux_top_subaerial_source\n[]\n[Ttop_submarine_sink]\ntype = PorousFlowPiecewiseLinearSink\nvariable = temperature\nboundary = top_submarine               # nodes touching the ocean bottom\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '0 1e9'\nmultipliers = '0 1e9'\nuse_mobility = true\nuse_enthalpy = true\nuse_relperm = true\nflux_function = 100\nfluid_phase = 0\nsave_in = heat_flux_adv_top_submarine_sink\n[]\n[Ttop_submarine_source]\ntype = PorousFlowPiecewiseLinearSink\nvariable = temperature\nboundary = top_submarine               # nodes touching the ocean bottom\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '-1e9 0'\nmultipliers = '-1e9 0'\nuse_mobility = true\nuse_enthalpy = true\nuse_relperm = false\nflux_function = 100\nfluid_phase = 0\nsave_in = heat_flux_adv_top_submarine_source\n[]\n[Ttop_subaerial_sink]\ntype = PorousFlowPiecewiseLinearSink\nvariable = temperature\nboundary = top_subaerial               # nodes top-bounding the subDomain for porous flow simulation\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '0 1e9'\nmultipliers = '0 1e9'\nuse_mobility = true\nuse_enthalpy = true\nuse_relperm = true\nflux_function = 100 # similar to Ptop_submarine_sink to avoid shocks\nfluid_phase = 0\nsave_in = heat_flux_adv_top_subaerial_sink\n[]\n[Ttop_subaerial_source]\ntype = PorousFlowPiecewiseLinearSink  #\nvariable = temperature\nboundary = top_subaerial               # nodes top-bounding the subDomain for porous flow simulation\nPT_shift = ptop_auxvar                 # [Pa] reference environmental pressure: 1 atm + water column\npt_vals = '-1e9 0'\nmultipliers = '-1e9 0'\nuse_mobility = true\nuse_enthalpy = true\nuse_relperm = false\nflux_function = 0.001 # to be calibrated: should allow for emptying of porespace\nfluid_phase = 0\nsave_in = heat_flux_adv_top_subaerial_source\n[]\n[Ttop_submarine_dif] # diffusive heat flux = - lambda * grad_T\ntype = PorousFlowPiecewiseLinearSink\nvariable = temperature\nPT_shift = 278.15                            # [K]    5\u00baC\nboundary = top_submarine\npt_vals     = '-1000 0 1000'                  # x coordinates defining g\nmultipliers = '-10000 0 1000'                 # y coordinates defining g\nuse_thermal_conductivity = true\nflux_function = 0.01\nsave_in = heat_flux_dif_top_submarine\n[]\n[Ttop_subaerial_dif] # diffusive heat flux = - lambda * grad_T\ntype = PorousFlowPiecewiseLinearSink\nvariable = temperature\nPT_shift = 278.15                            # [K]    5\u00baC\nboundary = top_subaerial\npt_vals     = '-1000 0 1000'                  # x coordinates defining g\nmultipliers = '-1000 0 1000'                 # y coordinates defining g\nuse_thermal_conductivity = true\nflux_function = 1\nsave_in = heat_flux_dif_top_subaerial\n[]\n[Tbot]\ntype = FunctionDirichletBC\nvariable = temperature\nboundary = bottom\nfunction = temperature_f\n[]\n[]\nI had expected that a low flux_function for the top_subaerial mass and advective heat BCs would lead to the side of the domain being slowly emptied. This seems to be the case as the popressure goes towards negative but the simple fluid, but this does not seem to happen with the tabulated EOS [although the latter crashes very soon, so maybe it is a matter of time]. Still, none of them has a saturation below 1 at any point, which is not what I expected.\nDarcy velocities across the ocean bottom look similar in both [a] and [b] for the simple fluid. For illustration I'm sending a plot comparing Darcy vertical velocities in both, still with the simple fluid after ~6000 years of simulation ([a] is the one on top):\n\nIn summary, I\u2019m obviously doing things wrong and not understanding how these BCs interact with the model. Shall I upload to GitHub the input files so the simulation can be run if this helps you to help me? In the end I'd need to run this with the realsitic tabulated EOS.\nI understand this is complicated and would not like to take much of your time. If there is something I could do to make your help not a big burden, but still get it please let me know.\nJavier",
                  "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2790748",
                  "updatedAt": "2022-05-20T12:40:59Z",
                  "publishedAt": "2022-05-20T12:40:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @cpgr\nJust to note that this is for academic purposes in the context of marine environmental sciences [see #20139]. As I already mentioned to @WilkAndy. If we manage to have this running with your help, I will more than happy if eventually you were also interested in being a coauthor in \u2018hopefully\u2019 derived publications. I know this is off-topic now, but just wanted to mention.\nJavier",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2802758",
                          "updatedAt": "2022-05-23T08:34:56Z",
                          "publishedAt": "2022-05-23T08:34:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hi Javier,\nIt would be great if you could upload this model to your GitHub so I can take a look at it.\nChris",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2807663",
                          "updatedAt": "2022-05-23T22:19:30Z",
                          "publishedAt": "2022-05-23T22:19:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Hi Chris,\nMany thanks! I\u2019ve uploaded it to my Github, within the folder \u2018rift_model\u2019. For both, cases [a] and [b] the model converges with simple fluid, but crashes very early when using the tabulated EOS. I am also attaching the tabulated EOS file, which is the same as for the simple block experiment [corresponding to the script also in my Github].\nJavier\n---\nOn Tuesday, May 24, 2022 00:19 CEST, Chris Green ***@***.***> wrote:\n\u00a0\n\u00a0\nHi Javier,\nIt would be great if you could upload this model to your GitHub so I can take a look at it.\nChris\n\u2014\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n\n\u00a0",
                  "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2810076",
                  "updatedAt": "2022-05-24T08:12:05Z",
                  "publishedAt": "2022-05-24T08:12:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hi @garciapintado - I haven't forgotten about this (just been busy/away), but was wondering if you had a smaller problem that exhibits the same problem? Or do you think it would it be ok if I just cut this in half down a vertical line through the middle?",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2903639",
                          "updatedAt": "2022-06-08T07:40:21Z",
                          "publishedAt": "2022-06-08T07:40:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Hi @cpgr, Many thanks. I was wondering if it all looks too complicated. I haven't a smaller problem as this is derived from our realistic models of continental extension and rift generation towards oceanic spreading. A problem with coarser resolutions is that the faults do not develop so well, so we are stuck with this sort of problem size. Actually, our mesh in matlab has quadratic elements (a Tri6), and I am now importing it as Tri3 to MOOSE to make the problem faster and because in previous synthetic models with PorousFlow I found that in some circumstances that a Tri6 mesh did not converge while a Tri3 did! Also to make the problem easier to converge I am calculating by now the porosity and permeability fields in Matlab (approximately reproducing the PorousFlowPorosity ---simply cutting porosity below a threshold, rather than your non-negative porosity approach--- and KozenyCarman derived permeability formulations) and passing then as constant static fields to MOOSE (although eventually I'd like to do that also in MOOSE if everthing goes well; so they are updated along with the hydrothermal flow). About cutting in half down a vertical in the middle, I'd guess that if it works, it should work in all the domain. I need help but not sure how to help you to help me, and I understand that this application maybe is not so simple. If you think it'd be possible any useful, I could see to come to CSIRO for some weeks later after summer in Germany (after learning a bit more about MOOSE-PorousFlow).",
                          "url": "https://github.com/idaholab/moose/discussions/21038#discussioncomment-2904058",
                          "updatedAt": "2022-06-08T08:32:50Z",
                          "publishedAt": "2022-06-08T08:32:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Need guidance regarding development of Solid beam formulation.",
          "author": {
            "login": "abdullah2146"
          },
          "bodyText": "I want to develop the solid beam formulation on MOOSE as it's presented in this journal paper https://www.sciencedirect.com/science/article/pii/S0045782513001618\nIs there any example or C++ files that would be helpful in developing this?\nThe problem I am facing is how I will define the entities of B matrix in MOOSE which need to be calculated at the nodes of the plane.\n\n\n@jain651 may be you can help me, as I asked this thing in MOOSE workshop and the presenter of Tensor mechanics module told me to ask you.",
          "url": "https://github.com/idaholab/moose/discussions/21229",
          "updatedAt": "2022-06-09T01:47:23Z",
          "publishedAt": "2022-06-07T21:37:03Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jain651"
                  },
                  "bodyText": "Please have a look at the formulation of the shell elements. Their formulation also involves formation of matrices like these. I hope this will help you.",
                  "url": "https://github.com/idaholab/moose/discussions/21229#discussioncomment-2901172",
                  "updatedAt": "2022-06-07T21:53:22Z",
                  "publishedAt": "2022-06-07T21:53:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "libMesh Update (2022.06.06)",
          "author": {
            "login": "cticenhour"
          },
          "bodyText": "A new libMesh made its way to the MOOSE master branch yesterday. For those using the conda packages, please perform\nmamba update --all\n\nin your MOOSE conda environment. The appropriate moose-libmesh package version should be 2022.06.06. For those using the the libMesh submodule, please run in the moose/scripts directory\n./update_and_rebuild_libmesh.sh\n\nafter updating your copy of MOOSE.\nMore details on the content of this update can be found in the June 2022 Newsletter.",
          "url": "https://github.com/idaholab/moose/discussions/21223",
          "updatedAt": "2022-06-07T15:07:54Z",
          "publishedAt": "2022-06-07T15:07:52Z",
          "category": {
            "name": "News"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Error while using restart option.",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE Experts\nI am trying to use the restart feature but getting the following error.\nAny suggestions on how to resolve it.\nBest\nAvtar\n*** Info ***\nAdded data file path: /home/asingh/projects/moose/framework/src/base/../../data\n\n\n*** Info ***\nAdded data file path: /home/asingh/projects/moose/modules/tensor_mechanics/src/base/../../data\n\n\n*** Info ***\nMerging inputs MESH_Restart.i,PHYSICS_Restart.i\n\n\n*** Info ***\nTensorMechanics Action: selecting 'total small strain' formulation. Use `incremental = true` to select 'incremental small strain' instead.\n\n\n*** Info ***\nUsing /home/asingh/projects/babbler/Polycrystal_adaptivity/PHYSICS_my_checkpoint_cp/4125 for restart.\n\n  Finished Instantiating Sub-Apps                                                        [  2.41 s] [  130 MB]\n*** Automatic Eigenstrain Names ***\nall: eigenstrain\n  Finished Initializing                                                                  [  5.54 s] [   65 MB]\nFinished Setting Up                                                                      [  9.74 s] [  335 MB]\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[0] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[1] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[2] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[3] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[4] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[8] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[9] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[10] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[11] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[12] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[13] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[14] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[15] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[5] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[6] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[7] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[16] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[17] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[18] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[19] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[20] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[21] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[22] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"error\" not found in file ../src/systems/system.C on line 1443\n[23] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\n\n*********************************************************************\nREADING THE FILE \"/home/asingh/projects/babbler/Polycrystal_adaptivity/PHYSICS_my_checkpoint_cp/4125.xdr\" FAILED.\nIt is possible this file contains infinite element information,\nbut the version string does not contain \" with infinite elements\"\nLet's try this again, but looking for infinite element information...\n*********************************************************************\n\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[0] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[1] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[4] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at map_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[5] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[6] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[7] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[8] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[9] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[12] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[13] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[14] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[15] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\n\n*********************************************************************\nWell, at least we tried!\nGood Luck!!\n*********************************************************************\n\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[2] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[3] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\n19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[10] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[11] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[16] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[17] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[18] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[19] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[20] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[21] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[22] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\nmap_find() error: key \"\" not found in file ../src/systems/system.C on line 1443\n[23] ./include/libmesh/utility.h, line 152, compiled Apr 27 2022 at 19:40:49\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 1\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 7\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 8\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 9\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 13\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 14\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 15\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 3\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 4\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 5\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 6\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 11\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 12\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 23\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 2\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 10\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 16\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 17\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 18\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 19\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 20\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 21\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 22",
          "url": "https://github.com/idaholab/moose/discussions/21222",
          "updatedAt": "2022-06-07T15:00:46Z",
          "publishedAt": "2022-06-07T13:54:38Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe key to using the restart system is that it must be exactly the same numerical solve (we are working to relax that, not ready yet).\nHow did you run into this? What commands did you run? Did you run the same exact input files in the second time?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21222#discussioncomment-2898544",
                  "updatedAt": "2022-06-07T14:34:38Z",
                  "publishedAt": "2022-06-07T14:34:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Ok. Actually, I removed the mesh adaptivity option which was there in the original input file.\nI added it again. Now it works fine.\nThanks.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/21222#discussioncomment-2898737",
                          "updatedAt": "2022-06-07T15:00:38Z",
                          "publishedAt": "2022-06-07T15:00:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "configure error for submodule libmesh with external petsc on cluster",
          "author": {
            "login": "BoZeng1997"
          },
          "bodyText": "Hi,\nI am trying to configure the submodule libmesh inside moose with an external PETSc on cluster. The external PETSc was successfully installed and passed all test provided by PETSc. I have specified the correct PETSC_DIR when running ./update_and_rebuild_libmesh.sh in moose/scripts and PETSc was shown found. However, this is the error I got:\n<<< Found PETSc 3.17.2 installation in /hpc/group/dolbowlab/bz75/petsc ... >>>\nchecking whether we can compile a trivial PETSc program... no\nchecking for TAO support via PETSc... no\nconfigure: error: *** PETSc was not found, but --enable-petsc-required was specified.\n\nThe details related to PETSc not found in moose/libmesh/build/config.log are pasted below. I do have the missing files in my $PETSC_DIR/include.\n(There are other error in the log file but I am not sure if they are the reason the configure was aborted. I can provide them if needed.)\nconfigure:49429: result: <<< Found PETSc 3.17.2 installation in /hpc/group/dolbowlab/bz75/petsc ... >>>\nconfigure:49439: checking whether we can compile a trivial PETSc program\nconfigure:49470: mpicxx -std=gnu++17 -c     conftest.cpp >&5\nconftest.cpp:155:20: fatal error: petsc.h: No such file or directory\n  155 |           #include <petsc.h>\n      |                    ^~~~~~~~~\ncompilation terminated.\nconfigure:49470: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"libmesh\"\n| #define PACKAGE_TARNAME \"libmesh\"\n| #define PACKAGE_VERSION \"1.7.0-pre\"\n| #define PACKAGE_STRING \"libmesh 1.7.0-pre\"\n| #define PACKAGE_BUGREPORT \"https://github.com/libMesh/libmesh/discussions\"\n| #define PACKAGE_URL \"http://libmesh.github.io\"\n| #define CONFIGURE_INFO \"../configure  '--enable-silent-rules' '--enable-unique-id' '--disable-warnings' '--with-thread-model=openmp' '--disable-maintainer-mode' '--enable-hdf5' '--enable-petsc-hypre-required' '--enable-metaphysicl-required' '--with-cxx-std-min=2014' '--without-gdb-command' '--with-methods=opt oprof devel dbg' '--prefix=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/installed' '--with-future-timpi-dir=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/installed' 'INSTALL=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/build-aux/install-sh -C' 'PETSC_DIR=/hpc/group/dolbowlab/bz75/petsc' 'PETSC_ARCH=/hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt' 'METHODS=opt oprof devel dbg' 'SLEPC_DIR=/hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt'\"\n| #define PACKAGE \"libmesh\"\n| #define VERSION \"1.7.0-pre\"\n| #define HAVE_CXX17 1\n| #define HAVE_CXX11_AUTO 1\n| #define HAVE_CXX11_RANGEFOR 1\n| #define HAVE_CXX11_INITIALIZER_LIST 1\n| #define HAVE_CXX11_UNIQUE_PTR 1\n| #define HAVE_CXX11_MAKE_UNIQUE_WORKAROUND 1\n| #define HAVE_CXX11_TUPLE 1\n| #define HAVE_CXX11_LAMBDA 1\n| #define HAVE_CXX11_FIXED_TYPE_ENUM 1\n| #define HAVE_CXX11_FIXED_TYPE_ENUM_FWD 1\n| #define HAVE_CXX11_OVERRIDE 1\n| #define HAVE_CXX11_MOVE_CONSTRUCTORS 1\n| #define HAVE_CXX11_DELETED_FUNCTIONS 1\n| #define HAVE_CXX11_DEFAULTED_FUNCTIONS 1\n| #define HAVE_CXX11_NULLPTR 1\n| #define HAVE_CXX11_FINAL 1\n| #define HAVE_CXX11_DECLTYPE 1\n| #define HAVE_CXX11_SHARED_PTR 1\n| #define HAVE_CXX11_RVALUE_REFERENCES 1\n| #define HAVE_CXX11_TO_STRING 1\n| #define HAVE_CXX11_CONSTEXPR 1\n| #define HAVE_CXX11_VARIADIC_TEMPLATES 1\n| #define HAVE_CXX11_ALIAS_DECLARATIONS 1\n| #define HAVE_CXX17_SPLICING 1\n| #define HAVE_CXX14 1\n| #define HAVE_CXX11 1\n| #define HAVE_CXX14_MAKE_UNIQUE 1\n| #define HAVE_CXX11_REGEX 1\n| #define HAVE_CXX11_THREAD 1\n| #define HAVE_CXX11_CONDITION_VARIABLE 1\n| #define HAVE_CXX11_TYPE_TRAITS 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_SINE 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_COSINE 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_TANGENT 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_SINE_COMPLEX 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_COSINE_COMPLEX 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_TANGENT_COMPLEX 1\n| #define HAVE_CXX11_ERF 1\n| #define HAVE_CXX17_FALLTHROUGH_ATTRIBUTE_BUT_DISABLED 1\n| #define HAVE_DOUBLE_UNDERSCORE_ATTRIBUTE_FALLTHROUGH 1\n| #define STDC_HEADERS 1\n| #define HAVE_SYS_TYPES_H 1\n| #define HAVE_SYS_STAT_H 1\n| #define HAVE_STDLIB_H 1\n| #define HAVE_STRING_H 1\n| #define HAVE_MEMORY_H 1\n| #define HAVE_STRINGS_H 1\n| #define HAVE_INTTYPES_H 1\n| #define HAVE_STDINT_H 1\n| #define HAVE_UNISTD_H 1\n| #define HAVE_DLFCN_H 1\n| #define LT_OBJDIR \".libs/\"\n| #define MAJOR_VERSION 1\n| #define MINOR_VERSION 7\n| #define MICRO_VERSION 0\n| #define LIB_VERSION \"1.7.0-pre\"\n| #define LIB_RELEASE \"\"\n| #define CXX \"mpicxx -std=gnu++17\"\n| #define IO_COMPATIBILITY_VERSION \"1.7.0\"\n| #define HAVE_NAMESPACES /**/\n| #define DEFAULT_DOUBLE_PRECISION 1\n| #define DEFAULT_SCALAR_TYPE double\n| #define restrict __restrict\n| #define HAVE_PWD_H 1\n| #define HAVE_GETPWUID 1\n| #define ENABLE_EXCEPTIONS 1\n| #define ENABLE_TIMESTAMPS 1\n| #define SIZEOF_SHORT_INT 2\n| #define SIZEOF_INT 4\n| #define SIZEOF_UNSIGNED_INT 4\n| #define SIZEOF_SIZE_T 8\n| #define SIZEOF_LONG_INT 8\n| #define SIZEOF_FLOAT 4\n| #define SIZEOF_DOUBLE 8\n| #define SIZEOF_VOID_P 8\n| #define SIZEOF_FUNCTION_POINTER 8\n| #define HAVE_RTTI /**/\n| #define HAVE_GETOPT_H 1\n| #define HAVE_SYS_TIME_H 1\n| #define HAVE_CSIGNAL 1\n| #define HAVE_SYS_RESOURCE_H 1\n| #define HAVE_LOCALE /**/\n| #define HAVE_SSTREAM /**/\n| #define HAVE_STRINGSTREAM /**/\n| #define HAVE_FENV_H 1\n| #define HAVE_XMMINTRIN_H 1\n| #define HAVE_FEENABLEEXCEPT 1\n| #define HAVE_FEDISABLEEXCEPT 1\n| #define HAVE_DECL_SIGACTION 1\n| #define HAVE_MKDIR /**/\n| #define HAVE_DECL__MKDIR 0\n| #define HAVE_MKSTEMP 1\n| #define HAVE_GETTIMEOFDAY 1\n| #define HAVE_SYS_UTSNAME_H 1\n| #define HAVE_STD_UNORDERED_MULTIMAP 1\n| #define BEST_UNORDERED_MULTIMAP std::unordered_multimap\n| #define INCLUDE_UNORDERED_MULTIMAP <unordered_map>\n| #define HAVE_STD_UNORDERED_MAP 1\n| #define BEST_UNORDERED_MAP std::unordered_map\n| #define INCLUDE_UNORDERED_MAP <unordered_map>\n| #define HAVE_STD_UNORDERED_MULTISET 1\n| #define BEST_UNORDERED_MULTISET std::unordered_multiset\n| #define INCLUDE_UNORDERED_MULTISET <unordered_set>\n| #define HAVE_STD_UNORDERED_SET 1\n| #define BEST_UNORDERED_SET std::unordered_set\n| #define INCLUDE_UNORDERED_SET <unordered_set>\n| #define HAVE_STD_HASH 1\n| #define BEST_HASH std::hash\n| #define INCLUDE_HASH <functional>\n| #define DEFINE_HASH_STRING /**/\n| #define DEFINE_HASH_POINTERS /**/\n| #define HAVE_DLOPEN 1\n| #define HAVE_GCC_ABI_DEMANGLE 1\n| #define HAVE_GLIBC_BACKTRACE 1\n| #define GDB_COMMAND \"no\"\n| #define ENABLE_UNIQUE_PTR 1\n| #define ENABLE_DEPRECATED 1\n| #define FORWARD_DECLARE_ENUMS 1\n| #define REQUIRE_SEPARATE_NAMESPACE 1\n| #define BOUNDARY_ID_BYTES 2\n| #define DOF_ID_BYTES 4\n| #define PROCESSOR_ID_BYTES 4\n| #define SUBDOMAIN_ID_BYTES 2\n| #define ENABLE_UNIQUE_ID 1\n| #define UNIQUE_ID_BYTES 8\n| #define ENABLE_AMR 1\n| #define ENABLE_VSMOOTHER 1\n| #define ENABLE_PERIODIC 1\n| #define ENABLE_DIRICHLET 1\n| #define MAPVECTOR_CHUNK_SIZE 1\n| #define ENABLE_GHOSTED 1\n| #define ENABLE_NODE_VALENCE 1\n| #define DIM 3\n| #define ENABLE_HIGHER_ORDER_SHAPES 1\n| #define ENABLE_SECOND_DERIVATIVES 1\n| #define USE_REAL_NUMBERS 1\n| #define ENABLE_REFERENCE_COUNTING 1\n| #define HAVE_BOOST 1\n| #define HAVE_BOOST_MOVELIB_UNIQUE_PTR 1\n| #define HAVE_MPI 1\n| /* end confdefs.h.  */\n| \n|           #undef MAJOR_VERSION\n|           #undef MINOR_VERSION\n|           #include <petsc.h>\n|           static char help[]=\"\";\n| \n|           int main(int argc, char **argv)\n|           {\n|             PetscInitialize(&argc, &argv, (char*)0,help);\n|             PetscFinalize();\n|             return 0;\n|           }\n| \nconfigure:49477: result: no\nconfigure:49497: checking for TAO support via PETSc\nconfigure:49531: mpicc -c     conftest.c >&5\nconftest.c:155:20: fatal error: petsctao.h: No such file or directory\n  155 |           #include <petsctao.h>\n      |                    ^~~~~~~~~~~~\ncompilation terminated.\nconfigure:49531: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"libmesh\"\n| #define PACKAGE_TARNAME \"libmesh\"\n| #define PACKAGE_VERSION \"1.7.0-pre\"\n| #define PACKAGE_STRING \"libmesh 1.7.0-pre\"\n| #define PACKAGE_BUGREPORT \"https://github.com/libMesh/libmesh/discussions\"\n| #define PACKAGE_URL \"http://libmesh.github.io\"\n| #define CONFIGURE_INFO \"../configure  '--enable-silent-rules' '--enable-unique-id' '--disable-warnings' '--with-thread-model=openmp' '--disable-maintainer-mode' '--enable-hdf5' '--enable-petsc-hypre-required' '--enable-metaphysicl-required' '--with-cxx-std-min=2014' '--without-gdb-command' '--with-methods=opt oprof devel dbg' '--prefix=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/installed' '--with-future-timpi-dir=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/installed' 'INSTALL=/hpc/group/dolbowlab/bz75/projects/raccoon/moose/scripts/../libmesh/build-aux/install-sh -C' 'PETSC_DIR=/hpc/group/dolbowlab/bz75/petsc' 'PETSC_ARCH=/hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt' 'METHODS=opt oprof devel dbg' 'SLEPC_DIR=/hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt'\"\n| #define PACKAGE \"libmesh\"\n| #define VERSION \"1.7.0-pre\"\n| #define HAVE_CXX17 1\n| #define HAVE_CXX11_AUTO 1\n| #define HAVE_CXX11_RANGEFOR 1\n| #define HAVE_CXX11_INITIALIZER_LIST 1\n| #define HAVE_CXX11_UNIQUE_PTR 1\n| #define HAVE_CXX11_MAKE_UNIQUE_WORKAROUND 1\n| #define HAVE_CXX11_TUPLE 1\n| #define HAVE_CXX11_LAMBDA 1\n| #define HAVE_CXX11_FIXED_TYPE_ENUM 1\n| #define HAVE_CXX11_FIXED_TYPE_ENUM_FWD 1\n| #define HAVE_CXX11_OVERRIDE 1\n| #define HAVE_CXX11_MOVE_CONSTRUCTORS 1\n| #define HAVE_CXX11_DELETED_FUNCTIONS 1\n| #define HAVE_CXX11_DEFAULTED_FUNCTIONS 1\n| #define HAVE_CXX11_NULLPTR 1\n| #define HAVE_CXX11_FINAL 1\n| #define HAVE_CXX11_DECLTYPE 1\n| #define HAVE_CXX11_SHARED_PTR 1\n| #define HAVE_CXX11_RVALUE_REFERENCES 1\n| #define HAVE_CXX11_TO_STRING 1\n| #define HAVE_CXX11_CONSTEXPR 1\n| #define HAVE_CXX11_VARIADIC_TEMPLATES 1\n| #define HAVE_CXX11_ALIAS_DECLARATIONS 1\n| #define HAVE_CXX17_SPLICING 1\n| #define HAVE_CXX14 1\n| #define HAVE_CXX11 1\n| #define HAVE_CXX14_MAKE_UNIQUE 1\n| #define HAVE_CXX11_REGEX 1\n| #define HAVE_CXX11_THREAD 1\n| #define HAVE_CXX11_CONDITION_VARIABLE 1\n| #define HAVE_CXX11_TYPE_TRAITS 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_SINE 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_COSINE 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_TANGENT 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_SINE_COMPLEX 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_COSINE_COMPLEX 1\n| #define HAVE_CXX11_INVERSE_HYPERBOLIC_TANGENT_COMPLEX 1\n| #define HAVE_CXX11_ERF 1\n| #define HAVE_CXX17_FALLTHROUGH_ATTRIBUTE_BUT_DISABLED 1\n| #define HAVE_DOUBLE_UNDERSCORE_ATTRIBUTE_FALLTHROUGH 1\n| #define STDC_HEADERS 1\n| #define HAVE_SYS_TYPES_H 1\n| #define HAVE_SYS_STAT_H 1\n| #define HAVE_STDLIB_H 1\n| #define HAVE_STRING_H 1\n| #define HAVE_MEMORY_H 1\n| #define HAVE_STRINGS_H 1\n| #define HAVE_INTTYPES_H 1\n| #define HAVE_STDINT_H 1\n| #define HAVE_UNISTD_H 1\n| #define HAVE_DLFCN_H 1\n| #define LT_OBJDIR \".libs/\"\n| #define MAJOR_VERSION 1\n| #define MINOR_VERSION 7\n| #define MICRO_VERSION 0\n| #define LIB_VERSION \"1.7.0-pre\"\n| #define LIB_RELEASE \"\"\n| #define CXX \"mpicxx -std=gnu++17\"\n| #define IO_COMPATIBILITY_VERSION \"1.7.0\"\n| #define HAVE_NAMESPACES /**/\n| #define DEFAULT_DOUBLE_PRECISION 1\n| #define DEFAULT_SCALAR_TYPE double\n| #define restrict __restrict\n| #define HAVE_PWD_H 1\n| #define HAVE_GETPWUID 1\n| #define ENABLE_EXCEPTIONS 1\n| #define ENABLE_TIMESTAMPS 1\n| #define SIZEOF_SHORT_INT 2\n| #define SIZEOF_INT 4\n| #define SIZEOF_UNSIGNED_INT 4\n| #define SIZEOF_SIZE_T 8\n| #define SIZEOF_LONG_INT 8\n| #define SIZEOF_FLOAT 4\n| #define SIZEOF_DOUBLE 8\n| #define SIZEOF_VOID_P 8\n| #define SIZEOF_FUNCTION_POINTER 8\n| #define HAVE_RTTI /**/\n| #define HAVE_GETOPT_H 1\n| #define HAVE_SYS_TIME_H 1\n| #define HAVE_CSIGNAL 1\n| #define HAVE_SYS_RESOURCE_H 1\n| #define HAVE_LOCALE /**/\n| #define HAVE_SSTREAM /**/\n| #define HAVE_STRINGSTREAM /**/\n| #define HAVE_FENV_H 1\n| #define HAVE_XMMINTRIN_H 1\n| #define HAVE_FEENABLEEXCEPT 1\n| #define HAVE_FEDISABLEEXCEPT 1\n| #define HAVE_DECL_SIGACTION 1\n| #define HAVE_MKDIR /**/\n| #define HAVE_DECL__MKDIR 0\n| #define HAVE_MKSTEMP 1\n| #define HAVE_GETTIMEOFDAY 1\n| #define HAVE_SYS_UTSNAME_H 1\n| #define HAVE_STD_UNORDERED_MULTIMAP 1\n| #define BEST_UNORDERED_MULTIMAP std::unordered_multimap\n| #define INCLUDE_UNORDERED_MULTIMAP <unordered_map>\n| #define HAVE_STD_UNORDERED_MAP 1\n| #define BEST_UNORDERED_MAP std::unordered_map\n| #define INCLUDE_UNORDERED_MAP <unordered_map>\n| #define HAVE_STD_UNORDERED_MULTISET 1\n| #define BEST_UNORDERED_MULTISET std::unordered_multiset\n| #define INCLUDE_UNORDERED_MULTISET <unordered_set>\n| #define HAVE_STD_UNORDERED_SET 1\n| #define BEST_UNORDERED_SET std::unordered_set\n| #define INCLUDE_UNORDERED_SET <unordered_set>\n| #define HAVE_STD_HASH 1\n| #define BEST_HASH std::hash\n| #define INCLUDE_HASH <functional>\n| #define DEFINE_HASH_STRING /**/\n| #define DEFINE_HASH_POINTERS /**/\n| #define HAVE_DLOPEN 1\n| #define HAVE_GCC_ABI_DEMANGLE 1\n| #define HAVE_GLIBC_BACKTRACE 1\n| #define GDB_COMMAND \"no\"\n| #define ENABLE_UNIQUE_PTR 1\n| #define ENABLE_DEPRECATED 1\n| #define FORWARD_DECLARE_ENUMS 1\n| #define REQUIRE_SEPARATE_NAMESPACE 1\n| #define BOUNDARY_ID_BYTES 2\n| #define DOF_ID_BYTES 4\n| #define PROCESSOR_ID_BYTES 4\n| #define SUBDOMAIN_ID_BYTES 2\n| #define ENABLE_UNIQUE_ID 1\n| #define UNIQUE_ID_BYTES 8\n| #define ENABLE_AMR 1\n| #define ENABLE_VSMOOTHER 1\n| #define ENABLE_PERIODIC 1\n| #define ENABLE_DIRICHLET 1\n| #define MAPVECTOR_CHUNK_SIZE 1\n| #define ENABLE_GHOSTED 1\n| #define ENABLE_NODE_VALENCE 1\n| #define DIM 3\n| #define ENABLE_HIGHER_ORDER_SHAPES 1\n| #define ENABLE_SECOND_DERIVATIVES 1\n| #define USE_REAL_NUMBERS 1\n| #define ENABLE_REFERENCE_COUNTING 1\n| #define HAVE_BOOST 1\n| #define HAVE_BOOST_MOVELIB_UNIQUE_PTR 1\n| #define HAVE_MPI 1\n| /* end confdefs.h.  */\n| \n|           #undef MAJOR_VERSION\n|           #undef MINOR_VERSION\n|           #include <petsctao.h>\n|           static char help[]=\"\";\n| \n|           int main(int argc, char **argv)\n|           {\n|             Tao tao;\n|             PetscInitialize(&argc, &argv, (char*)0,help);\n|             TaoCreate(PETSC_COMM_WORLD,&tao);\n|             TaoDestroy(&tao);\n|             PetscFinalize();\n|             return 0;\n|           }\n| \nconfigure:49539: result: no\nconfigure:49698: error: *** PETSc was not found, but --enable-petsc-required was specified.",
          "url": "https://github.com/idaholab/moose/discussions/21214",
          "updatedAt": "2022-06-09T01:50:57Z",
          "publishedAt": "2022-06-06T01:10:03Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Can you attach the libmesh_diagnostic.log which should reside in moose/scripts? It contains additional information that might help shed some light on the issue. If that file does not exist, please re-run moose/scripts/update_and_rebuild_libmesh.sh using the same environment you plan on having it succeed in.\nAlso, can you provide the results of an ldd on a PETSc library you are using (this will help us understand what compiler was being used to build):\nldd $PETSC_DIR/lib/libpetsc.so",
                  "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2890679",
                  "updatedAt": "2022-06-06T12:57:52Z",
                  "publishedAt": "2022-06-06T12:57:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "libmesh_diagnostic.log is here.\nlibmesh_diagnostic.log\nThe ldd on PETSc library I think do shown there is a problem with my installation. Here is what I got:\nbz75@dcc-login-03  /hpc/group/dolbowlab/bz75/petsc $ ldd $PETSC_DIR/lib/libpetsc.so\nldd: /hpc/group/dolbowlab/bz75/petsc/lib/libpetsc.so: No such file or directory\n\nbut\nbz75@dcc-login-03  /hpc/group/dolbowlab/bz75/projects/raccoon $ ldd $PETSC_DIR/$PETSC_ARCH/lib/libpetsc.so\n\tlinux-vdso.so.1 (0x00007ffee458d000)\n\tlibHYPRE-2.24.0.so => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libHYPRE-2.24.0.so (0x00007f64e3153000)\n\tlibstrumpack.so => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libstrumpack.so (0x00007f64e278c000)\n\tlibscalapack.so.2.2 => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libscalapack.so.2.2 (0x00007f64e1f36000)\n\tlibsuperlu_dist.so.7 => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libsuperlu_dist.so.7 (0x00007f64e1be6000)\n\tlibhdf5_hl.so.200 => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libhdf5_hl.so.200 (0x00007f64e19c2000)\n\tlibhdf5.so.200 => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libhdf5.so.200 (0x00007f64e1345000)\n\tlibparmetis.so => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libparmetis.so (0x00007f64e1105000)\n\tlibmetis.so => /hpc/group/dolbowlab/bz75/petsc/arch-linux-c-opt/lib/libmetis.so (0x00007f64e0ea2000)\n\tlibm.so.6 => /lib64/libm.so.6 (0x00007f64e0b20000)\n\tlibX11.so.6 => /lib64/libX11.so.6 (0x00007f64e07dd000)\n\tlibstdc++.so.6 => /opt/apps/rhel7/gcc-9.3.0/lib64/libstdc++.so.6 (0x00007f64e0403000)\n\tlibdl.so.2 => /lib64/libdl.so.2 (0x00007f64e01ff000)\n\tlibmpi_usempif08.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libmpi_usempif08.so.40 (0x00007f64dffc2000)\n\tlibmpi_usempi_ignore_tkr.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libmpi_usempi_ignore_tkr.so.40 (0x00007f64dfdb4000)\n\tlibmpi_mpifh.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libmpi_mpifh.so.40 (0x00007f64dfb50000)\n\tlibmpi.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libmpi.so.40 (0x00007f64df82d000)\n\tlibgfortran.so.5 => /opt/apps/rhel7/gcc-9.3.0/lib64/libgfortran.so.5 (0x00007f64df39f000)\n\tlibgcc_s.so.1 => /opt/apps/rhel7/gcc-9.3.0/lib64/libgcc_s.so.1 (0x00007f64df187000)\n\tlibquadmath.so.0 => /opt/apps/rhel7/gcc-9.3.0/lib64/libquadmath.so.0 (0x00007f64def41000)\n\tlibpthread.so.0 => /lib64/libpthread.so.0 (0x00007f64ded21000)\n\tlibrt.so.1 => /lib64/librt.so.1 (0x00007f64deb19000)\n\tlibgomp.so.1 => /opt/apps/rhel7/gcc-9.3.0/lib64/libgomp.so.1 (0x00007f64de8e3000)\n\tlibc.so.6 => /lib64/libc.so.6 (0x00007f64de51d000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f64e51b1000)\n\tlibxcb.so.1 => /lib64/libxcb.so.1 (0x00007f64de2f4000)\n\tlibopen-rte.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libopen-rte.so.40 (0x00007f64de03e000)\n\tlibopen-pal.so.40 => /opt/apps/rhel8/openmpi-4.0.5/lib/libopen-pal.so.40 (0x00007f64ddd37000)\n\tlibutil.so.1 => /lib64/libutil.so.1 (0x00007f64ddb33000)\n\tlibz.so.1 => /lib64/libz.so.1 (0x00007f64dd91c000)\n\tlibXau.so.6 => /opt/apps/rhel7/compatlib/libXau.so.6 (0x00007f64dd718000)",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2891126",
                          "updatedAt": "2022-06-06T14:20:58Z",
                          "publishedAt": "2022-06-06T14:20:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Oh right, PETSC_ARCH (good observation!). I think your installation of PETSc is fine. The diagnostics indicate perhaps CC, CXX, etc need to be set. Can you try this, and report back (attaching those same logs):\nexport CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77\nscripts/update_and_rebuild_libmesh.sh\nI do see that XDR has not been found. I am not sure if this will hinder you later down the road, but we might need your system administrator to install an additional library. We will deal with that when we run into it...",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2891249",
                          "updatedAt": "2022-06-06T14:40:21Z",
                          "publishedAt": "2022-06-06T14:40:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "After setting the compilers and $PETSC_ARCH, update_and_rebuild_libmesh.sh ran to complete. However, I got many warnings during the compilation. Here are the logs.\nlibmesh_diagnostic.log\nconfig.log\nWhen I continued to compile a custom branch of moose, I got the following errors\nCompiling C++ (in opt mode) /hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C...\n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:104:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  104 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:133:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  133 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:160:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  160 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:184:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  184 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:208:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  208 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:232:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  232 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:256:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  256 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:284:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  284 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:311:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  311 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:338:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  338 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:365:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  365 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:394:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  394 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:402:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  402 |              displaced.size());\n      |             ^~~~~~~~~~~~~~~~~~~                 \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:435:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  435 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:443:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  443 |              displaced.size());\n      |             ^~~~~~~~~~~~~~~~~~~                 \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:473:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  473 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:496:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  496 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:547:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n  547 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1052:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1052 |             SETERRQ1(((PetscObject)dm)->comm, PETSC_ERR_PLIB, \"Failed to embed split %D\", d);\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1357:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1357 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1417:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1417 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1621:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1621 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1653:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1653 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:1923:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 1923 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2014:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2014 |              DMMOOSE);\n      |             ^~~~~~~~~~                          \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2139:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2139 |              maxcontacts);\n      |             ^~~~~~~~~~~~~~                      \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2160:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2160 |                  sz);\n      |             ^    ~~~~                           \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2220:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2220 |              maxcontacts);\n      |             ^~~~~~~~~~~~~~                      \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2241:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2241 |                  sz);\n      |             ^    ~~~~                           \n/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.C:2307:13: error: Use SETERRQ() (since version 3.17) [-Werror]\n 2307 |                nnsplits);\n      |             ^  ~~~~~~~~~~                       \ncc1plus: all warnings being treated as errors\nmake: *** [/hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/build.mk:145: /hpc/group/dolbowlab/bz75/projects/raccoon/moose/framework/src/utils/PetscDMMoose.x86_64-pc-linux-gnu.opt.lo] Error 1\n\nI see that moose is now using submodule PETSc-3.16.5. Do you think my latest error is from a too advance PETSc-3.17.2?",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2894216",
                          "updatedAt": "2022-06-07T00:51:05Z",
                          "publishedAt": "2022-06-07T00:50:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "why are all warnings treated as errors? What are the compile flags?\n3.17.2 is not officially supported yet.",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2894479",
                          "updatedAt": "2022-06-07T02:02:03Z",
                          "publishedAt": "2022-06-07T02:02:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "The compile flags did treat all warning as error.\nThe warnings are gone after I switched to PETSc-3.16.5.",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2898109",
                          "updatedAt": "2022-06-07T13:32:16Z",
                          "publishedAt": "2022-06-07T13:32:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "MOOSE will use what-ever-petsc libMesh was built against. And libMesh will either use what-ever PETSC_DIR is set to, or submodule petsc... But it would appear you have things running. So, your call on where we head next :)\nWhile latest PETSc isn't supported, we applaud attempts and reporting back any fixes you may find/solve along the way!",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2898241",
                          "updatedAt": "2022-06-07T13:49:34Z",
                          "publishedAt": "2022-06-07T13:49:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "BoZeng1997"
                          },
                          "bodyText": "I think this issue is solved.\nHowever, I compiled this stand alone PETSc in hope to fix another issue, which remains an issue now. I am following the debug guide to produce backtrace. I will open a new discussion soon.\nThank you!",
                          "url": "https://github.com/idaholab/moose/discussions/21214#discussioncomment-2898330",
                          "updatedAt": "2022-06-07T14:03:45Z",
                          "publishedAt": "2022-06-07T14:03:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Plugin flags at app level",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "Is there anything that can be done at the app-level to change compile and/or include flags for plugins? I have an app with some UMAT  f90 files in a \"plugins\" directory on the app's root. I'm trying to add extra include dirs and compile flags to the Makefile but haven't managed to affect the way the plugins are being compiled.\n@dschwen",
          "url": "https://github.com/idaholab/moose/discussions/21190",
          "updatedAt": "2022-06-09T01:49:19Z",
          "publishedAt": "2022-06-01T13:27:40Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@dschwen",
                  "url": "https://github.com/idaholab/moose/discussions/21190#discussioncomment-2865175",
                  "updatedAt": "2022-06-01T15:42:37Z",
                  "publishedAt": "2022-06-01T15:42:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@jessecarterMOOSE\nthe easiest way to lure @dschwen to answer a question is to post the wrong answer haha\nor maybe just reach out directly on slack",
                          "url": "https://github.com/idaholab/moose/discussions/21190#discussioncomment-2893261",
                          "updatedAt": "2022-06-06T20:29:04Z",
                          "publishedAt": "2022-06-06T20:29:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "LOL, noted. I think I figured it out though: set the PLUGIN_FLAGS variable in the app's Makefile. For example:\nPLUGIN_FLAGS += -ffree-line-length-none -I$(CURDIR)/include",
                          "url": "https://github.com/idaholab/moose/discussions/21190#discussioncomment-2898309",
                          "updatedAt": "2022-06-07T14:01:15Z",
                          "publishedAt": "2022-06-07T14:01:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compliance tensor is equal to nan",
          "author": {
            "login": "RossMech"
          },
          "bodyText": "Hello everyone,\nI have following problem. I would like to calculate the phase-field stress distribution using Reuss-Sachs approximation, i.e.\n$\\mathbf{C} = \\left( \\sum h_{\\alpha} \\mathbf{S}_{\\alpha} \\right)^{-1}$\nwhere $ h_{\\alpha} $ is weighting function of the each particular phase and $\\mathbf{S}_{\\alpha}$ is compliance tensor of each phase.\nMy idea was to calculate the compliance tensor of each phase hard-coded inside of the stress calculation subroutine, i.e.\nRankFourTensor compliance_alpha = _elasticity_tensor_alpha[_qp].inverse();\nThe elasticity tensor is constructed with ComputeIsotropicElasticityTensor material, i.e.\n[./elasticity_tensor_alpha]\ntype = ComputeIsotropicElasticityTensor\nyoungs_modulus = 1\npoissons_ratio = 0.3\nbase_name = alpha_phase\n[../]\nThe output inverse is estimated to be nan. If someone has idea, why the inversion operation results in nan values, I would like to discuss them!\nBest regards,\nRostyslav Nizinkovskyi.",
          "url": "https://github.com/idaholab/moose/discussions/21189",
          "updatedAt": "2022-06-07T13:56:25Z",
          "publishedAt": "2022-06-01T09:34:31Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "It shouldn't be nan given this pair of lame parameters. Where and how are you calculating the _elasticity_tensor_alpha?",
                  "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2862983",
                  "updatedAt": "2022-06-01T11:26:11Z",
                  "publishedAt": "2022-06-01T11:26:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "For example, if you calculate the inverse before elasticity tensor is computed, you'll for sure get nan. You could try printing out the elasticity tensor right before the inversion.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2863013",
                          "updatedAt": "2022-06-01T11:31:23Z",
                          "publishedAt": "2022-06-01T11:31:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Hi,\nthank you for the reply and suggestions. _elasticity_tensor_alpha is consumed into material subroutine via\nparams.addRequiredParam<std::string>(\"base_name_alpha\",\"Elasticity tensor of alpha phase eta = 1\");\nand\n_base_name_alpha(getParam<std::string>(\"base_name_alpha\") + \"_\"), _elasticity_tensor_alpha(getMaterialPropertyByName<RankFourTensor>(_base_name_alpha+\"elasticity_tensor\")),.\nI had also tried to get output for the all values, which should be non-zero\n\nAs you can see, the values are non-zero and have a correspondent values. But the inversion is nevertheless nan (except for one value).\nIf you have further suggestions, I would like to consider them as well!",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2877014",
                          "updatedAt": "2022-06-03T09:05:32Z",
                          "publishedAt": "2022-06-03T09:05:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Okay, I can reproduce this. I will create an issue out of this discussion.\nFor now, since your elasticity tensor is symmetric, you can use invSymm in place of inverse as a work-around.\n@dschwen FYI. This bug is related to eigen I believe.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2879412",
                          "updatedAt": "2022-06-03T15:52:37Z",
                          "publishedAt": "2022-06-03T15:52:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Hi! The invSymm method seems to work just correct! Thank you very much for the answer.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2898284",
                          "updatedAt": "2022-06-07T13:56:25Z",
                          "publishedAt": "2022-06-07T13:56:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "Dear @RossMech\nYou can see an example of inversion of RankFourTensor here:\nhttps://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/unit/src/RankFourTensorTest.C\nYou need to specify where are you carrying out the inversion.\nIs that inside a material object?\nIn that case, it is better to avoid doing the inversion inside the initQpStatefulProperties() function\nbecause at that stage the elasticity tensor may not be yet calculated.\nBest Regards,\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2871160",
                  "updatedAt": "2022-06-02T12:34:58Z",
                  "publishedAt": "2022-06-02T12:34:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Thank you for the answer! I use a ComputeStressBase as a starting point for my material development. The inversion is calculated inside of ComputeQpStress() function.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2876838",
                          "updatedAt": "2022-06-03T08:38:06Z",
                          "publishedAt": "2022-06-03T08:38:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Also a little bit of additional information. In answer to @hugary1995 I had added an image, containing output of non-zero values of the stiffness and compliance tensors.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2877050",
                          "updatedAt": "2022-06-03T09:11:07Z",
                          "publishedAt": "2022-06-03T09:11:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "@RossMech  difficult to say, either the elasticity is not invertible for some reason, like components don't get filled completely. Or the class you use cannot be inverted. I suggest the following attempts to clarify:\n\nUse without base name\nTry printing _elasticity_tensor_alpha after the inversion operation, maybe inverse() is not meant to give an output and just invert the tensor\nTry using another class instead of ComputeIsotropicElasticityTensor, like ComputeElasticityTensorConstantRotationCP, like here:\nhttps://github.com/idaholab/moose/blob/next/modules/tensor_mechanics/test/tests/crystal_plasticity/stress_update_material_based/linesearch.i\nand try inverting _Cijkl instead.\nIf you can share the entire material class, it is easier to help.\nNicol\u00f2",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2879264",
                          "updatedAt": "2022-06-03T15:25:20Z",
                          "publishedAt": "2022-06-03T15:25:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "1 & 3 aren't related to this issue as I see it.\n2. inverse() isn't an in-place operation.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2879428",
                          "updatedAt": "2022-06-03T15:54:23Z",
                          "publishedAt": "2022-06-03T15:54:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ngrilli"
                          },
                          "bodyText": "@RossMech  do you include with\n#include \"RankFourTensor.h\"\nin your material class?",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2886456",
                          "updatedAt": "2022-06-05T15:02:01Z",
                          "publishedAt": "2022-06-05T15:02:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "@ngrilli I am discussing this in #21211, feel free to take a look if you are interested.",
                          "url": "https://github.com/idaholab/moose/discussions/21189#discussioncomment-2887920",
                          "updatedAt": "2022-06-06T01:30:57Z",
                          "publishedAt": "2022-06-06T01:30:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "INSAD failing to converge",
          "author": {
            "login": "j-bowhay"
          },
          "bodyText": "Hi\nI am trying to model fluid flow through a straight pipe as a simple benchmark. I have had good success using INSFV but I am now trying to use INSAD and struggling to get the solve to converge. Have tried making the mesh finer and messing around with various options to no avail.\nAny suggestions welcome.\nJake\n\nInput File\n\n# 2d siumulation of a water through a pipe.\n\nmu=1e-3 # Nsm^-2\nrho=997.0 # kgm^-3\nRe=1000.0\npipe_length=1 # m\npipe_radius=0.1 # m\nu_inlet=${fparse (mu * Re)/(2 * pipe_radius * rho)} # ms^-1\n\n[GlobalParams]\n  integrate_p_by_parts = true\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    xmin = 0\n    xmax = ${pipe_length}\n    ymin = 0\n    ymax = ${pipe_radius}\n    nx = 1000\n    ny = 100\n  []\n[]\n\n[Problem]\n  coord_type = 'RZ'\n  rz_coord_axis = x\n[]\n\n[Variables]\n  [./velocity]\n    family = LAGRANGE_VEC\n  [../]\n  [./p]\n  [../]\n[]\n\n[ICs]\n  [velocity]\n    type = VectorConstantIC\n    x_value = 1e-15\n    y_value = 1e-15\n    variable = velocity\n  []\n[]\n\n[Kernels]\n  [./mass]\n    type = INSADMass\n    variable = p\n  [../]\n  [./momentum_convection]\n    type = INSADMomentumAdvection\n    variable = velocity\n  [../]\n\n  [./momentum_viscous]\n    type = INSADMomentumViscous\n    variable = velocity\n  [../]\n\n  [./momentum_pressure]\n    type = INSADMomentumPressure\n    variable = velocity\n    pressure = p\n  [../]\n[]\n\n[BCs]\n  [inlet]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'left'\n    function_x = ${u_inlet}\n    function_y = 0\n  [../]\n  [wall]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'top'\n    function_x = 0\n    function_y = 0\n  []\n  [axis]\n    type = ADVectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'bottom'\n    set_x_comp = false\n    function_y = 0\n  []\n  [outlet]\n    type = INSADMomentumNoBCBC\n    variable = velocity\n    pressure = p\n    boundary = 'right'\n  []\n  # When the NoBCBC is applied on the outlet boundary then there is nothing\n  # constraining the pressure. Thus we must pin the pressure somewhere to ensure\n  # that the problem is not singular. If the below BC is not applied then\n  # -pc_type svd -pc_svd_monitor reveals a singular value\n  [p_corner]\n    type = DirichletBC\n    boundary = 'right'\n    value = 0\n    variable = p\n  []\n[]\n\n[Materials]\n  [./const]\n    type = ADGenericConstantMaterial\n    prop_names = 'rho mu'\n    prop_values = '${rho} ${mu}'\n  [../]\n  [ins_mat]\n    type = INSADMaterial\n    velocity = velocity\n    pressure = p\n  []\n[]\n\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n    solve_type = 'NEWTON'\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n\n  petsc_options_iname = '-pc_type -sub_pc_factor_levels -ksp_gmres_restart'\n  petsc_options_value = 'asm      6                     200'\n  nl_rel_tol = 1e-12\n  nl_abs_tol = 1e-12\n  l_max_its = 200\n  line_search = 'none'\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/21012",
          "updatedAt": "2022-06-12T07:41:15Z",
          "publishedAt": "2022-05-12T15:26:34Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhat is your Reynolds number? Do you expect the flow to be turbulent?\nINSAD, which is based on finite element, requires numerical stabilization techniques such as PSPG or SUPG.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2746725",
                  "updatedAt": "2022-06-12T07:41:16Z",
                  "publishedAt": "2022-05-13T16:12:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "j-bowhay"
                          },
                          "bodyText": "Hi\nThe Reynolds number is 1000 so the flow should be laminar.\nThanks again\nJake",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2749994",
                          "updatedAt": "2022-06-12T07:41:17Z",
                          "publishedAt": "2022-05-14T07:13:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think you ll want to have stabilization as soon as Re>1",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2750563",
                          "updatedAt": "2022-06-12T07:41:17Z",
                          "publishedAt": "2022-05-14T11:06:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You could try raising the viscosity and decreasing the inlet velocity to see how far you get without stabilization but at 1000 I expect you ll need it\nanother thing that helps is to do a relaxation to steady state transient rather than solve with a steady executioner",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2750849",
                          "updatedAt": "2022-06-12T07:41:17Z",
                          "publishedAt": "2022-05-14T13:08:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "j-bowhay"
                          },
                          "bodyText": "Ok thanks, I am going to try adding stabilization first",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2757787",
                          "updatedAt": "2022-06-16T19:51:11Z",
                          "publishedAt": "2022-05-16T08:46:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "j-bowhay"
                          },
                          "bodyText": "So I have added stabilization and the solution now converges however the results are incorrect.\nINSAD:\n\nINSFV (Validated against analytical solution):\n\n\nINSAD Input File\n\n# 2d siumulation of a water through a pipe.\n\nmu=1e-3 # Nsm^-2\nrho=997.0 # kgm^-3\nRe=1000.0\npipe_length=1 # m\npipe_radius=0.1 # m\nu_inlet=${fparse (mu * Re)/(2 * pipe_radius * rho)} # ms^-1\n\n[GlobalParams]\n  integrate_p_by_parts = true\n[]\n\n[Mesh]\n  [gen]\n    type = GeneratedMeshGenerator\n    dim = 2\n    xmin = 0\n    xmax = ${pipe_length}\n    ymin = 0\n    ymax = ${pipe_radius}\n    nx = 1000\n    ny = 100\n  []\n[]\n\n[Problem]\n  coord_type = 'RZ'\n  rz_coord_axis = x\n[]\n\n[Variables]\n  [velocity]\n    family = LAGRANGE_VEC\n  []\n  [p]\n  []\n[]\n\n[ICs]\n  [velocity]\n    type = VectorConstantIC\n    x_value = 1e-15\n    y_value = 1e-15\n    variable = velocity\n  []\n[]\n\n[Kernels]\n  [mass]\n    type = INSADMass\n    variable = p\n  []\n  [mass_pspg]\n    type = INSADMassPSPG\n    variable = p\n  []\n  [momentum_convection]\n    type = INSADMomentumAdvection\n    variable = velocity\n  []\n\n  [momentum_viscous]\n    type = INSADMomentumViscous\n    variable = velocity\n  []\n\n  [momentum_pressure]\n    type = INSADMomentumPressure\n    variable = velocity\n    pressure = p\n  []\n\n  [momentum_supg]\n    type = INSADMomentumSUPG\n    variable = velocity\n    velocity = velocity\n  []\n[]\n\n[BCs]\n  [inlet]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'left'\n    function_x = ${u_inlet}\n    function_y = 0\n  [../]\n  [wall]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'top'\n    function_x = 0\n    function_y = 0\n  []\n  [axis]\n    type = ADVectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'bottom'\n    set_x_comp = false\n    function_y = 0\n  []\n  [outlet]\n    type = INSADMomentumNoBCBC\n    variable = velocity\n    pressure = p\n    boundary = 'right'\n  []\n  # When the NoBCBC is applied on the outlet boundary then there is nothing\n  # constraining the pressure. Thus we must pin the pressure somewhere to ensure\n  # that the problem is not singular. If the below BC is not applied then\n  # -pc_type svd -pc_svd_monitor reveals a singular value\n  [p_corner]\n    type = DirichletBC\n    boundary = 'right'\n    value = 0\n    variable = p\n  []\n[]\n\n[Materials]\n  [./const]\n    type = ADGenericConstantMaterial\n    prop_names = 'rho mu'\n    prop_values = '${rho} ${mu}'\n  [../]\n  [ins_mat]\n    type = INSADTauMaterial\n    velocity = velocity\n    pressure = p\n  []\n[]\n\n[Preconditioning]\n  [./SMP]\n    type = SMP\n    full = true\n    solve_type = 'NEWTON'\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n\n  petsc_options_iname = '-pc_type -sub_pc_factor_levels -ksp_gmres_restart'\n  petsc_options_value = 'asm      6                     200'\n  nl_rel_tol = 1e-12\n  nl_abs_tol = 1e-12\n  l_max_its = 200\n  line_search = 'none'\n[]\n\n[Outputs]\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2766135",
                          "updatedAt": "2022-06-16T19:51:11Z",
                          "publishedAt": "2022-05-17T09:14:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you try second order velocities?",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2768272",
                          "updatedAt": "2022-06-16T19:51:22Z",
                          "publishedAt": "2022-05-17T14:30:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "j-bowhay"
                          },
                          "bodyText": "I have tried second order velocity but it wont converge with either quad8 or quad9 elements",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2768804",
                          "updatedAt": "2022-06-16T19:51:21Z",
                          "publishedAt": "2022-05-17T15:44:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@lindsayad any thoughts on this",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2770761",
                          "updatedAt": "2022-06-16T19:51:23Z",
                          "publishedAt": "2022-05-17T20:38:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "If you share your input, I'll look into it",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2770828",
                          "updatedAt": "2022-06-16T19:51:24Z",
                          "publishedAt": "2022-05-17T20:52:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "j-bowhay"
                          },
                          "bodyText": "@lindsayad thank you. My fe input file that isnt working: https://gist.github.com/j-bowhay/f61fb605e311dc06e88c3f7e4ca25adf",
                          "url": "https://github.com/idaholab/moose/discussions/21012#discussioncomment-2774025",
                          "updatedAt": "2022-06-16T19:51:25Z",
                          "publishedAt": "2022-05-18T08:37:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}