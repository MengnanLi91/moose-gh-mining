{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wOS0yMlQxNTozMjo1My0wNTowMM4ANiCq"
    },
    "edges": [
      {
        "node": {
          "title": "Documentation confusing for ADComputeVariableIsotropicElasticityTensor",
          "author": {
            "login": "makeclean"
          },
          "bodyText": "Hi All\nIm working with a problem with lots of ADComputeVariableIsotropicElasticityTensor's, the documentation https://mooseframework.inl.gov/source/materials/ADComputeVariableIsotropicElasticityTensor.html states that the youngs_modulus entry is;\n\nWhich to me reads that if I have the following setup\n[Materials]\n  [./fred_youngs_modulus]\n    type = ADPiecewiseLinearInterpolationMaterial\n    xy_data = '0          10e+6\n               599.9999   10e+6\n               600        9.94e+6\n               99900      10e3'\n    property = youngs_modulus\n    variable = temp\n  [../]\n\n  [./elasticity_tensor]\n    type = ADComputeVariableIsotropicElasticityTensor\n    youngs_modulus = fred_youngs_modulus\n    poissons_ratio = 0.0\n  [../]\n[]\n\nThen all should be well, but it isnt, my material with name fred_youngs_modulus isn't found, I interpret the name to be the name of the HIT block. It isn't instead it needs to be the name of the property returned by the ADPieceWiseLinearInterpolation object. Is that a bug/intentional, either way I think the documentation should be a little clearer. Happy to submit a documentation PR if it helps.",
          "url": "https://github.com/idaholab/moose/discussions/18896",
          "updatedAt": "2021-09-28T00:40:40Z",
          "publishedAt": "2021-09-22T17:59:00Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThank you for reporting this. I ll add this to a documentation fix PR I have open.\nI ll look for other instances too.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18896#discussioncomment-1371139",
                  "updatedAt": "2021-09-22T18:30:24Z",
                  "publishedAt": "2021-09-22T18:30:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Fixed by #18866",
                          "url": "https://github.com/idaholab/moose/discussions/18896#discussioncomment-1393302",
                          "updatedAt": "2021-09-28T00:40:30Z",
                          "publishedAt": "2021-09-28T00:40:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "NonlinearEigen executioner with ArrayVariable",
          "author": {
            "login": "crb3874"
          },
          "bodyText": "Hello,\nI am implementing a simple eigenvalue multi-group neutron diffusion application, using ArrayVariable/Kernels for condensing energy groups to avoid the need for verbose kernel definitions for scattering/fission/etc. in the input file.\nI'd like to use the NonlinearEigen executioner for this, which requires deriving the fission kernel from the EigenKernel class. However, there does not appear to be an analagous \"ArrayEigenKernel\" to derive from for my specific case, as there are for ArrayKernels/ArrayDGKernels.\nIs there compatibility currently for doing this? If not, would the sensible path forward be to implement my own ArrayEigenKernel class?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/18935",
          "updatedAt": "2022-09-13T06:34:14Z",
          "publishedAt": "2021-09-27T16:53:05Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@YaqiWang will be able to give you some clues here",
                  "url": "https://github.com/idaholab/moose/discussions/18935#discussioncomment-1391717",
                  "updatedAt": "2022-09-13T06:34:14Z",
                  "publishedAt": "2021-09-27T17:01:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "I suggest to work with Eigenvalue executioner with which the eigen kernels are derived from the same base as other kernels except are tagged differently in the input file.  The folder moose/tests/problems/eigen_problem/arraykernels contains few examples.",
                  "url": "https://github.com/idaholab/moose/discussions/18935#discussioncomment-1391768",
                  "updatedAt": "2022-09-13T06:34:17Z",
                  "publishedAt": "2021-09-27T17:11:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "crb3874"
                          },
                          "bodyText": "Yaqi, thanks for the quick response. I'll take a look at these examples.",
                          "url": "https://github.com/idaholab/moose/discussions/18935#discussioncomment-1391794",
                          "updatedAt": "2022-09-13T06:34:24Z",
                          "publishedAt": "2021-09-27T17:18:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error registering tasks to build new objects",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "Dear all,\nI am intending to create a new object \"ConstantVectorPostprocessor_UO\" which is based conceptually on \"ConstantVectorPostprocessor\" but does not inherit any of their member functions/variables as such. The former one is now being developed to read data from user objects rather than from the input file itself. The block of commands following is relevant to this new object.\n \n[VectorPostprocessors]\n  [from_main_vpp_UO]\n    type = ConstantVectorPostprocessor_UO\n    stresstens_UO = stresstens\n    vector_names = 'a b c'\n  []\n[]\n \nThe following section of code initialises the paramaters and the member variables.\n#include \"ConstantVectorPostprocessor_UO.h\"\n#include \"InputParameters.h\"\n\nregisterMooseObject(\"MooseApp\", ConstantVectorPostprocessor_UO);\n\n//registerMooseObjectTask(\"add_vector_postprocessor\", ConstantVectorPostprocessor_UO, false);\n\ndefineLegacyParams(ConstantVectorPostprocessor_UO);\n\nInputParameters\nConstantVectorPostprocessor_UO::validParams()\n{\n//  InputParameters params = emptyInputParameters();\n  InputParameters params = MooseObject::validParams();\n  params.addClassDescription(\n      \"Populate constant VectorPostprocessorValue directly from an user object.\");\n  params.addParam<std::vector<std::string>>(\"vector_names\",\n                                            \"Names of the column vectors in this object\");\n  params.addRequiredParam<UserObjectName>(\n      \"stresstens_UO\", \"Name of user object that defines the stress tensor.\");\n\n  params.registerBase(\"ConstantVectorPostprocessor_UO\");\n  return params;\n}\n\nConstantVectorPostprocessor_UO::ConstantVectorPostprocessor_UO(const InputParameters & parameters)\n   : MooseObject(parameters),\n   Restartable(this, \"ConstantVectorPostprocessor_UO\"),\n   _vector_names(getParam<std::vector<std::string>>(\"vector_names\"))\n{\n  _vector_names = getParam<std::vector<std::string>>(\"vector_names\");\n  unsigned int nvec = _vector_names.size();\n}\n\nExecuting this test gives the following run time error.\n\n*** ERROR ***\nTask add_vector_postprocessor is not registered to build ConstantVectorPostprocessor_UO derived objects\n\nI am pretty sure the above task is not properly resgistered to the new bject that is currently under development. I tried to set this right in Moose.C by setting the boolean to true in the following line of code.\n\nregisterMooseObjectTask(\"add_vector_postprocessor\",     VectorPostprocessor,    true);\n\nHowever this does not fix the issue even with a 'clobberall' build. Happy to welcome any suggestions in this regard.\nKind regards,\nArun",
          "url": "https://github.com/idaholab/moose/discussions/18884",
          "updatedAt": "2022-06-15T19:40:52Z",
          "publishedAt": "2021-09-21T18:32:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe issue that the inheritance chain for your new postprocessor does not include a postprocessor class.\nSo if you change MooseObject to GeneralPostprocessor then your object will actually be a postprocessor to the system.\nNote that while you may not want to re-use any of the member functions of the ConstantPP, some of the ones above the chains are pretty important",
                  "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1364316",
                  "updatedAt": "2022-06-15T19:40:56Z",
                  "publishedAt": "2021-09-21T20:48:19Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Guillaume,\nInclusion of 'GeneralPostprocessor' seems to induce compilation issues deep in to the system files. The following error has been encountered.\n\n(base) abalasub@freia013> make -j10\nUsing HIT from /home/abalasub/Working/Projects/moose/framework/contrib/hit\nCreating Unity /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C\nCompiling C++ (in opt mode) /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C...\nIn file included from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33:0,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/allocator.h:46,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/string:41,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/locale_classes.h:40,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/ios_base.h:41,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/ios:42,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/istream:38,\n                 from /usr/local/depot/gcc-7.3.0/include/c++/7.3.0/fstream:38,\n                 from /home/abalasub/Working/Projects/moose/framework/src/vectorpostprocessors/CSVReader.C:11,\n                 from /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C:2:\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/ext/new_allocator.h: In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = exampleVectorPostprocessor; _Args = {const InputParameters&}; _Tp = exampleVectorPostprocessor]\u2019:\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/alloc_traits.h:475:4:   required from \u2018static void std::allocator_traits >::construct(std::allocator_traits >::allocator_type&, _Up*, _Args&& ...) [with _Up = exampleVectorPostprocessor; _Args = {const InputParameters&}; _Tp = exampleVectorPostprocessor; std::allocator_traits >::allocator_type = std::allocator]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr_base.h:526:39:   required from \u2018std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {const InputParameters&}; _Tp = exampleVectorPostprocessor; _Alloc = std::allocator; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr_base.h:637:4:   required from \u2018std::__shared_count<_Lp>::__shared_count(std::_Sp_make_shared_tag, _Tp*, const _Alloc&, _Args&& ...) [with _Tp = exampleVectorPostprocessor; _Alloc = std::allocator; _Args = {const InputParameters&}; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr_base.h:1295:35:   required from \u2018std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_make_shared_tag, const _Alloc&, _Args&& ...) [with _Alloc = std::allocator; _Args = {const InputParameters&}; _Tp = exampleVectorPostprocessor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr.h:344:64:   required from \u2018std::shared_ptr<_Tp>::shared_ptr(std::_Sp_make_shared_tag, const _Alloc&, _Args&& ...) [with _Alloc = std::allocator; _Args = {const InputParameters&}; _Tp = exampleVectorPostprocessor]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr.h:690:14:   required from \u2018std::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = exampleVectorPostprocessor; _Alloc = std::allocator; _Args = {const InputParameters&}]\u2019\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/bits/shared_ptr.h:706:39:   required from \u2018std::shared_ptr<_Tp> std::make_shared(_Args&& ...) [with _Tp = exampleVectorPostprocessor; _Args = {const InputParameters&}]\u2019\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/Registry.h:146:29:   required from \u2018std::shared_ptr moose::internal::buildObj(const InputParameters&) [with T = exampleVectorPostprocessor]\u2019\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/Registry.h:207:21:   required from \u2018static char Registry::add(const RegistryEntry&) [with T = exampleVectorPostprocessor]\u2019\n/home/abalasub/Working/Projects/moose/framework/src/vectorpostprocessors/exampleVectorPostprocessor.C:12:1:   required from here\n/usr/local/depot/gcc-7.3.0/include/c++/7.3.0/ext/new_allocator.h:136:4: error: invalid new-expression of abstract class type \u2018exampleVectorPostprocessor\u2019\n  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/abalasub/Working/Projects/moose/framework/src/vectorpostprocessors/exampleVectorPostprocessor.C:10:0,\n                 from /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C:42:\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/exampleVectorPostprocessor.h:21:7: note:   because the following virtual functions are pure within \u2018exampleVectorPostprocessor\u2019:\n class exampleVectorPostprocessor : public GeneralPostprocessor\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/FEProblemBase.h:28:0,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/DistributionInterface.h:14,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/UserObject.h:13,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/GeneralUserObject.h:13,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/GeneralVectorPostprocessor.h:14,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/CSVReader.h:13,\n                 from /home/abalasub/Working/Projects/moose/framework/src/vectorpostprocessors/CSVReader.C:14,\n                 from /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C:2:\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/Postprocessor.h:36:30: note:      virtual PostprocessorValue Postprocessor::getValue()\n   virtual PostprocessorValue getValue() = 0;\n                              ^~~~~~~~\nIn file included from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/GeneralUserObject.h:13:0,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/GeneralVectorPostprocessor.h:14,\n                 from /home/abalasub/Working/Projects/moose/framework/build/header_symlinks/CSVReader.h:13,\n                 from /home/abalasub/Working/Projects/moose/framework/src/vectorpostprocessors/CSVReader.C:14,\n                 from /home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.C:2:\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/UserObject.h:67:16: note:         virtual void UserObject::execute()\n   virtual void execute() = 0;\n                ^~~~~~~\n/home/abalasub/Working/Projects/moose/framework/build/header_symlinks/UserObject.h:72:16: note:         virtual void UserObject::initialize()\n   virtual void initialize() = 0;\n                ^~~~~~~~~~\nmake: *** [/home/abalasub/Working/Projects/moose/framework/build/unity_src/vectorpostprocessors_Unity.x86_64-pc-linux-gnu.opt.lo] Error 1\n\nLine 12 in exampleVectorPostprocessor.C (renamed my class \"ConstantVectorPostprocessor_UO\" just for an example and to debug the issue) corresponds to\n\nregisterMooseObject(\"MooseApp\", exampleVectorPostprocessor);\n\nCommenting this line compiles the code, but falters when it searches for the registration of this new object. Another alternative is usage of MooseObject as the parent class for the new class, in which case it compiles without any problems, but asks me to register the task add_vector_postprocessor to the newly derived class at run time. I tried to check this very deep in to the Action classes to see if there is any missing link, and tried some experiments but eventually could not fix it.  I suspect there are some problems in the base level functions, especially when it comes to registering objects under VectorPostprocessors, which might need to be corrected.\nWelcome your suggesions in this regard.",
                          "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1376233",
                          "updatedAt": "2022-06-23T18:42:09Z",
                          "publishedAt": "2021-09-23T18:29:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Look at the header for GeneralPostprocessor and make sure all the pure virtual functions are implemented.\nSome of them you can just implement an empty routine\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1376280",
                          "updatedAt": "2022-06-23T18:42:28Z",
                          "publishedAt": "2021-09-23T18:39:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I'm thinking there might be a derived class that is better than GeneralPostprocessor to inherit. Maybe ElementPostprocessor if you are working on elements, InterfacePP for sides on interfaces etc\nThat will implement a couple of these pure virtual routines (in generalPP) for you.",
                          "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1380806",
                          "updatedAt": "2022-06-23T18:42:27Z",
                          "publishedAt": "2021-09-24T15:49:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Yes, i think it is appropriate to derive from objects that has every thing self contained. The data to be stored in VPP comes from an integration point of a particular element that i choose programmatically based on certain calculations, which in my case would happen in an user object. The new VPP that i am planning to develop, will read this user oject and populate the variables to be transferred across the apps. This is very much inline with \"ConstantVectorPostprocessor\" and the good thing is inheriting this object works in our case, but the input structure is quite different and so i cannot use this object moving forward. Either we must identify the right object to inherit the vector post processor features or we might want to create a new object (as can be seen from this example SamplerBase.C and NodalValueSampler.C). Both of these approaches eventually comes down to the case of finding the right VPP object to inherit from, which in our case may be none. Probably we might be required to build an object with only basic framework that can sit inside VectorPostprocessor block and continue the developments from there on.",
                          "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1389232",
                          "updatedAt": "2022-08-10T15:09:58Z",
                          "publishedAt": "2021-09-27T09:14:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "abarun22"
                  },
                  "bodyText": "Hi Guillaume,\nThis is now working OK after a struggle. I allowed my new object to inherit from GeneralVectorPostprocessor and retained the initialize() and execute pure virtual functions.\nKind regards,\nArun",
                  "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1390830",
                  "updatedAt": "2022-06-23T18:42:27Z",
                  "publishedAt": "2021-09-27T14:39:31Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Great! As there is no objects that does part of the work for you then, the General... are the recommended base classes.\nConstantVPP inherits from GeneralVPP",
                          "url": "https://github.com/idaholab/moose/discussions/18884#discussioncomment-1391023",
                          "updatedAt": "2022-06-23T18:42:34Z",
                          "publishedAt": "2021-09-27T15:08:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Is there a moose application for benchmarking and comparing results?",
          "author": {
            "login": "chippy-byron"
          },
          "bodyText": "Hi\nIs there a shared moose application that people use for benchmarking and comparing results?  In particular I would be interested to compare results when using mpi to run moose in parallel across many nodes.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/18922",
          "updatedAt": "2021-10-11T03:52:30Z",
          "publishedAt": "2021-09-24T14:46:22Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor benchmarking performance (scaling plots), there's a script that was merged in this PR #18005 that you can adapt quite easily\nFor comparing results, you can load previous results using a SolutionUserObject and then there's plenty of postprocessors and auxkernels to compute differences between two solutions.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18922#discussioncomment-1380434",
                  "updatedAt": "2021-09-24T15:02:39Z",
                  "publishedAt": "2021-09-24T15:02:29Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Density driven PorousFlow",
          "author": {
            "login": "MatiasAllay"
          },
          "bodyText": "Hi,\nIs there an example of density driven multiphase flow in PorousFlow?\nThanks!\nMatias",
          "url": "https://github.com/idaholab/moose/discussions/18904",
          "updatedAt": "2022-07-26T14:49:11Z",
          "publishedAt": "2021-09-23T12:16:39Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "MatiasAllay"
                  },
                  "bodyText": "Okay, I found the 1phase_convection.i example",
                  "url": "https://github.com/idaholab/moose/discussions/18904#discussioncomment-1379044",
                  "updatedAt": "2022-07-26T14:49:11Z",
                  "publishedAt": "2021-09-24T09:52:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to Manipulate Variables at Each Time Step?",
          "author": {
            "login": "mcrossover97"
          },
          "bodyText": "Hi everyone!\nI am trying to solve a reactive transport problem where equilibrium calculations are performed after solving momentum and continuity equations. However, I don't have a clue how I should implement this. I guess I have to hardcode some stuff in the main.c file (I have done this before using OpenFOAM).\nFor example, I want to write a code that multiplies the concentration of aqueous species by 2 at each time step. How is that possible and where should I write such code?\nThanks for your help and support!\nBest,\nMohammad",
          "url": "https://github.com/idaholab/moose/discussions/18905",
          "updatedAt": "2022-07-08T08:05:00Z",
          "publishedAt": "2021-09-23T12:54:47Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAre aqueous species a nonlinear variable (one you solve for in the numerical system) ?\nIf not, then use an auxkernel to do those operations.\nIf so, then you can either:\n\nfit all the operations during the timestep (both equilibrium and momentum/continuity) and solve for them together. This is what really happens in the system anyway, reactions and advection are happening at the same time\nuse a transient multiapp setup and split both solves on each app, then use transfers to re-write the ICs to each app using the final state of the previous solve\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18905#discussioncomment-1375235",
                  "updatedAt": "2022-07-08T08:04:58Z",
                  "publishedAt": "2021-09-23T15:07:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mcrossover97"
                          },
                          "bodyText": "Thanks for your answer!\nYes, they are nonlinear variables and I can't use an auxkernel. I probably have to go with your second suggestion as I'm treating transfer and chemistry separately (It's a sequential approach). This usually works if your timesteps are small enough.",
                          "url": "https://github.com/idaholab/moose/discussions/18905#discussioncomment-1375299",
                          "updatedAt": "2022-07-08T08:04:57Z",
                          "publishedAt": "2021-09-23T15:20:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Some question about DerivativeMultiPhaseMaterial.i",
          "author": {
            "login": "AlexSacMorane"
          },
          "bodyText": "Dear all,\nI am studying the example input at moose/modules/phase_field/examples/multiphase/DerivativeMultiPhaseMaterial.i to understand how a multi phase simulation works. And I have some questions about it :\n\nThis example uses 3 unconserved variables etai but what should I change if I would like to use conserved variables ? If I understand well Basic Phase Field Equations, I just need to replace ACMultiInterface by CHInterface and AllenCahn by CahnHilliard.\nDoes the free energy used here depend only on the concentration c ? I do not see any etai in the definition of the phase_free_energy_i .\n\nI stay available. Regards\nAlexandre Sac--Morane",
          "url": "https://github.com/idaholab/moose/discussions/18870",
          "updatedAt": "2022-06-15T16:43:08Z",
          "publishedAt": "2021-09-20T20:15:35Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "souravmat-git"
                  },
                  "bodyText": "Hello,\nI am not sure about the model you are trying to use.\nTo my understanding, the ACMultiInterface kernel is based on the model by Steinbach et al. (see Eq. 6 in https://www.sciencedirect.com/science/article/pii/0167278995002987), while CHInterface kernel is needed to implement composition gradients, which is not assumed in this example model.\nNo. The total free energy F (see https://mooseframework.inl.gov/modules/phase_field/MultiPhase/WBM.html) depends on both concentration and phase-field variable etai. This expression is coded in the material DerivativeMultiPhaseMaterial.\nHope this helps.\nSourav",
                  "url": "https://github.com/idaholab/moose/discussions/18870#discussioncomment-1360471",
                  "updatedAt": "2022-06-15T16:44:29Z",
                  "publishedAt": "2021-09-21T05:07:58Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AlexSacMorane"
                          },
                          "bodyText": "Thanks you, I have well noticed the influence of c and etai on the total free energy F.\nConcerning my model, here the simuation considers unconserved variables etai. But I would like to do the same with conserved variables ci. I have just replaced Allen-Cahn equations by Cahn-Hilliard ones. Then I have trouble for the moment with SwitchingFunctionMaterial. I would like to impose the sum of my ci equals to 1 but the SwitchingFunctionMaterial seems to be designed for etai. Is there a same function concerning conserved variables?\nRegards\nAlexandre",
                          "url": "https://github.com/idaholab/moose/discussions/18870#discussioncomment-1364076",
                          "updatedAt": "2022-06-15T16:44:36Z",
                          "publishedAt": "2021-09-21T19:46:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "anilkunwar"
                          },
                          "bodyText": "Switching functions (function of eta_i) are principally designed to interpolate properties at the interface , and thus two different properties can be assigned to two different phases (eta1 and eta2). Generally, for a system with non-conserved volume, the phases (eta_i) are described by Allen-Cahn equation and conserved variables ci (e.g. composition) are described by Cahn-HIlliard equation. There is no need to define switching function of ci variables (if they mean mole fraction and do not mean phases ). I assume that the system is binary, ternary or multicomponent  (with the statement sum of ci equals 1) . In this case, the design rule for interface composition can be understood through WBM and KKS models (these models are implemented in moose).  In case like non-reactive wetting , volume is conserved and  in such cases Cahn-Hilliard equation represents the evolution of phases (eta or c  whichever notation is used) .",
                          "url": "https://github.com/idaholab/moose/discussions/18870#discussioncomment-1364434",
                          "updatedAt": "2022-06-15T16:44:42Z",
                          "publishedAt": "2021-09-21T21:18:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AlexSacMorane"
                          },
                          "bodyText": "Ok thanks for those details it becomes clearer. I think I have managed to get what I would like.",
                          "url": "https://github.com/idaholab/moose/discussions/18870#discussioncomment-1375193",
                          "updatedAt": "2022-06-15T16:44:46Z",
                          "publishedAt": "2021-09-23T14:59:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Some issues while creating a new application in MOOSE",
          "author": {
            "login": "emdcstanford"
          },
          "bodyText": "Hi, I recently installed MOOSE on my Mac laptop with the Catalina 10.15.7 operating system. The installation seems to go well, all the tests are passed, and I am able to successfully run the examples, and I also was able to create the \"Babbler\" example Moose application from the tutorial and run everything. However, I am interested in running a new different application which we called \"farm\". This application runs without any warnings or errors on a windows computer where it was originally written, but when I do \"make -j4\" in the new farm application folder on my Mac, I get a number of errors relating to the libmesh folder which strangely seems to be empty in my Moose installation on my Mac. I'm attaching a screenshot showing these errors. It's odd that the function \"exp\" is not found, I am including cmath in my src files.\n\nI should note that this application called \"farm\" is within the projects folder next to the Moose folder, and I have the .C files in farm/src/kernels/ and the .h files in farm/include/kernels/, and in the installation process I did conda install moose-libmesh. Am I missing something really basic here, or might something have gone wrong in the installation, or are there some compatibility issues from Mac to Windows? In my past experience using MOOSE, there were occasional issues running .i files on my Mac which had been written in a text editor on a Windows. Thank you very much for the help.",
          "url": "https://github.com/idaholab/moose/discussions/18902",
          "updatedAt": "2022-05-31T15:05:59Z",
          "publishedAt": "2021-09-23T02:19:39Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "roystgnr"
                  },
                  "bodyText": "It's odd that the function \"exp\" is not found, I am including cmath in my src files.\n\nIncluding cmath rather than math.h is the right thing to do, but one of the reasons it's the right thing is that it doesn't pollute the global namespace; it puts everything in namespace std.  You'll want to either change your exp calls to std::exp or add a using std::exp at the top of your source file.  If a compiler let you get away with a bare exp before then either you were also including math.h elsewhere or you were getting saved by a compiler or library bug somewhere.\nI'm kind of surprised to see that -Werror=reorder is added to user flags by Moose build.mk; IMHO that's great for Moose to use internally but too nitpicky to force on app developers. ... but git says Moose has been trying to enforce it since 2011, and successfully enforcing it on g++ users since 2013 - maybe you just never hit it before because you were always on Mac and so using a different compiler?  One of these days I'm going to try to talk the Moose people into adopting the libMesh -Werror policy (turn on tons of warnings and make them all errors when building our own codes, but don't try to enforce anything on users unless they ask for it), but for now your best bet is to just fix the warning: reorder the initialization lines in your constructor definitions so that they match the order of variables in your class/struct (which is the order in which C++ executes them regardless, IIRC).",
                  "url": "https://github.com/idaholab/moose/discussions/18902#discussioncomment-1374696",
                  "updatedAt": "2022-05-31T15:06:01Z",
                  "publishedAt": "2021-09-23T13:20:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "postprocess for a vector of element integrals",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi,\nCan I integrate a function on each element and return a vector of the results where the size of the vector is equal to the number of elements in the domain?\nI know ElementIntegralVariablePostprocessor sums all integration results in the domain but I need the integration of each individual element to be output in a vector.",
          "url": "https://github.com/idaholab/moose/discussions/18888",
          "updatedAt": "2022-08-22T15:25:32Z",
          "publishedAt": "2021-09-21T23:16:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhy do you need this as a vector rather than a field (auxvariable) ? Is this for output to CSV?\nDo you need this everywhere or just in a few locations?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1364807",
                  "updatedAt": "2022-08-22T15:25:41Z",
                  "publishedAt": "2021-09-21T23:26:28Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "I need it everywhere (i.e for each element).\nI am working on a material inversion problem where I need to compute the gradient of an objective function w.r.t material parameter. For a general material distribution case, each element will have distinct parameter, for example, we would have randomly distributed (in space) Young's modulus. In this case, the size of the gradient vector = number of elements (which is equal to the number of material parameters) with  gradient[ i ] =element_integral(adjoint_solution * material_derivative * forward_solution) where material_derivative is zero everywhere except at that ith element.",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1364848",
                          "updatedAt": "2022-08-22T15:25:45Z",
                          "publishedAt": "2021-09-21T23:47:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so will you be processing that data outside of moose? we can look at gradients on variables within moose with a custom auxkernel for example.\nI m asking because if not working outside of moose, I would use an auxvariable rather than postprocessors",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1364863",
                          "updatedAt": "2022-08-22T15:25:49Z",
                          "publishedAt": "2021-09-21T23:52:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Yes, I will use it outside moose.",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1364897",
                          "updatedAt": "2022-08-22T15:25:48Z",
                          "publishedAt": "2021-09-22T00:00:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This vectorpostprocessor is doing what you want, if you apply to a variable that contains the ElementWise-integral.\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementValueSampler.html\nFor the variable, use a CONSTANT MONOMIAL variable and use this auxkernel to populate it (with a L1 norm):\nhttps://mooseframework.inl.gov/source/auxkernels/ElementLpNormAux.html\nIf the documentation for this latter one is not good enough, please let me know, I just added it last week and would welcome the feedback",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1366906",
                          "updatedAt": "2022-08-22T15:25:55Z",
                          "publishedAt": "2021-09-22T02:40:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Thanks @GiudGiud\nOne issue that makes this approach is not suitable is that it does not take the sign into consideration. So it only returns the absolute value of the integration.\nI do think the documentation is pretty well!",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1371823",
                          "updatedAt": "2022-08-22T15:26:03Z",
                          "publishedAt": "2021-09-22T21:05:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ah good point. You could modify the source code very easily to remove the abs() and create a new class in your application / your MOOSE version",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1371899",
                          "updatedAt": "2022-08-22T15:26:06Z",
                          "publishedAt": "2021-09-22T21:29:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "xueyang94"
                  },
                  "bodyText": "The gradient of an objective function w.r.t. material can be computed using the DerivativeParsedMaterial in the Materials block, with the additional_derivative_symbols parameter. Paraview can give you the cell (elemental) data in the whole domain give the moose .e file.",
                  "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1371333",
                  "updatedAt": "2022-08-22T15:26:14Z",
                  "publishedAt": "2021-09-22T19:15:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "The gradient of an objective function w.r.t. material can be computed using the DerivativeParsedMaterial in the Materials block, with the additional_derivative_symbols parameter. Paraview can give you the cell (elemental) data in the whole domain give the moose .e file.\n\nThanks @xueyang94 , I am learning that on moose website.\nIf you have input.i file example other than that on moose website would be much appreciated.",
                          "url": "https://github.com/idaholab/moose/discussions/18888#discussioncomment-1371854",
                          "updatedAt": "2022-08-22T15:26:17Z",
                          "publishedAt": "2021-09-22T21:15:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with reference and displaced meshes",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "Hello,\nI was wondering if someone could give me some insight into the following error im getting\n*** ERROR ***\nOur reference and displaced meshes are not in sync with respect to whether we should delete remote elements.\n\nIve built a moose app that is coupled to another moose app which uses a displaced mesh. Not sure if it has something to do with that. This error only seems to be affecting some of my unit test and their doesn't appear to be a specific reason why.\nThanks\nZack",
          "url": "https://github.com/idaholab/moose/discussions/18736",
          "updatedAt": "2022-06-22T18:25:40Z",
          "publishedAt": "2021-08-30T23:28:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe're going to need more context on this. Are you deleting elements? Through what mechanism? (distributed mesh?)\nThe code triggering this\n  else if (_current_task == \"delete_remote_elements_after_late_geometric_ghosting\")\n  {\n    TIME_SECTION(\"deleteRemoteElems\", 2, \"Deleting Remote Elements\");\n\n    if (_displaced_mesh &&\n        (_mesh->needsRemoteElemDeletion() != _displaced_mesh->needsRemoteElemDeletion()))\n      mooseError(\"Our reference and displaced meshes are not in sync with respect to whether we \"\n                 \"should delete remote elements.\");\n\nseems to show that one of the subapp or main app is wanting to delete some elements and the other not\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18736#discussioncomment-1269251",
                  "updatedAt": "2022-06-22T18:25:41Z",
                  "publishedAt": "2021-09-02T00:50:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "Its being triggered by trying to add periodic boundary conditions using this block\n[BCs]\n  [Periodic]\n    [all]\n      variable = 'c_i'\n      auto_direction = 'x y'\n    []\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/18736#discussioncomment-1273208",
                          "updatedAt": "2022-06-22T18:25:42Z",
                          "publishedAt": "2021-09-02T17:17:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Oh sorry I missed this.\n@fdkong any idea? Who s our expert on periodic BCs?",
                          "url": "https://github.com/idaholab/moose/discussions/18736#discussioncomment-1366849",
                          "updatedAt": "2022-06-22T18:25:44Z",
                          "publishedAt": "2021-09-22T02:15:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "@rtaylo45 Are you able to provide a minimal example on this?\nIt simply stated that two meshes are out of sync. Did you change any moose code?",
                          "url": "https://github.com/idaholab/moose/discussions/18736#discussioncomment-1370953",
                          "updatedAt": "2022-06-22T18:25:45Z",
                          "publishedAt": "2021-09-22T17:45:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "This error came up from coupling two codes together. It turns out that we don't need to use periodic BCs when the codes run in this way and this error came up from a unit test in one of the codes. To work around this the unit test were placed in groups and for the special case of the codes being compiled together this group of test is not needed and so they are not run. Thanks for the follow up though.",
                          "url": "https://github.com/idaholab/moose/discussions/18736#discussioncomment-1371698",
                          "updatedAt": "2022-08-29T13:34:11Z",
                          "publishedAt": "2021-09-22T20:32:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}