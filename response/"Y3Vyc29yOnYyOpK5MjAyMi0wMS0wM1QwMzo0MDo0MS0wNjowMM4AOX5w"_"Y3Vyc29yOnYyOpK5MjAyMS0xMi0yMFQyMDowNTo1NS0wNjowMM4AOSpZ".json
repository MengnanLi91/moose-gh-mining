{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0xMi0yMFQyMDowNTo1NS0wNjowMM4AOSpZ"
    },
    "edges": [
      {
        "node": {
          "title": "Concentration dependent anisotropic elastic modulus",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE experts\nI am solving a coupled chemo-mechanical problem for an anisotropic material. In my material system, the elastic modulus tensor needs to be concentration-dependent. Can you please suggest the procedure to do it? Kindly suggest some useful examples as well?\nI want to make linear variation of elastic tensor with concentration.\nC(c) = (1-c)C0\n[Materials]\n  [./elasticity_tensor_with_Euler]\n    type = ComputeElasticityTensorCP\n    fill_method = symmetric9\n    C_ijkl = '1.984e9 0.196e9 0.176e9 1.684e9 0.176e9 1.584e9 0.754e9 0.754e9 0.754e9'\n    read_prop_user_object = euler_angle_read\n  [../]\n  [thermalexpansion]\n    type = ComputeThermalExpansionEigenstrain\n    temperature = diffused\n    thermal_expansion_coeff = 3.496e-6\n    stress_free_temperature = 0.0\n    eigenstrain_name = thermal_strain\n  []\n  [stress]\n    type = ComputeFiniteStrainElasticStress\n  []\n[]\n\nPlease help.\nThank you very much.",
          "url": "https://github.com/idaholab/moose/discussions/19932",
          "updatedAt": "2022-06-08T01:45:39Z",
          "publishedAt": "2021-12-30T05:52:19Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSeems like this is what you want to use:\nhttps://mooseframework.inl.gov/source/materials/ComputeConcentrationDependentElasticityTensor.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19932#discussioncomment-1889114",
                  "updatedAt": "2022-06-08T01:46:14Z",
                  "publishedAt": "2021-12-30T20:26:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hello Guillaume\nThank you very much. This is exactly what I was looking for.\nJust one query. Can I read the Euler angles from the data file, the same way I was doing earlier to rotate the Elastic tensor?\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/19932#discussioncomment-1890098",
                          "updatedAt": "2022-06-08T01:46:15Z",
                          "publishedAt": "2021-12-31T02:23:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "No, looks like this one only does constant euler angles.\nYou could create a new class and blend the two functionalities?",
                          "url": "https://github.com/idaholab/moose/discussions/19932#discussioncomment-1890831",
                          "updatedAt": "2022-06-08T01:46:19Z",
                          "publishedAt": "2021-12-31T09:11:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hello Guillaume\nThank you very much. I will merge the two functionalities.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/19932#discussioncomment-1891898",
                          "updatedAt": "2022-06-08T01:46:27Z",
                          "publishedAt": "2021-12-31T16:36:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "TIMEOUT error when ./run_tests -j n",
          "author": {
            "login": "bylore"
          },
          "bodyText": "Dear all,\nI have installed moose by the offline way on my workstation with Centos 7. When run ./run_tests -j n,  all the failed tests show [FINISHED] FAILED (TIMEOUT). I have tried to increase the timeout limit, but still failed.  When i just ./moose_test-opt, the program hangs without any output.\nwhich mpi* shows correct returns.\nI found a similar issue #16788. The author solved the issue by commenting lines loading some modules for intel fortran that insludes openmpi in  bash_profile. But my bash_profile and .bashrc do not contain any lines relavant to openmpi.\nAny suggestions?\nBest regards,",
          "url": "https://github.com/idaholab/moose/discussions/19922",
          "updatedAt": "2023-02-12T11:19:32Z",
          "publishedAt": "2021-12-26T06:12:57Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCould you please run the program in gdb, interrupt it then get us a backtrace?\nhttps://stackoverflow.com/questions/11616364/getting-a-stack-trace-of-a-hung-process-running-in-gdb\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1871473",
                  "updatedAt": "2023-06-01T00:19:33Z",
                  "publishedAt": "2021-12-26T10:22:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "I ran moose_test-opt in gdb, after i interrupted it by Ctrl+C, i got the following message.\nStarting program: /home/xxx/offline/moose/test/moose_test-opt moose_test-opt\nwarning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffd000\n[Thread debugging using libthread_db enabled]\nwarning: File \"/home/xxx/gcc/lib64/libstdc++.so.6.0.26-gdb.py\" auto-loading has been declined by your `auto-load safe-path' set to \"/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py\".\nTo enable execution of this file add\nadd-auto-load-safe-path /home/xxx/gcc/lib64/libstdc++.so.6.0.26-gdb.py\nline to your configuration file \"/home/xxx/.gdbinit\".\nTo completely disable this security protection add\nset auto-load safe-path /\nline to your configuration file \"/home/xxx/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\ninfo \"(gdb)Auto-loading safe path\"\n^C\nProgram received signal SIGINT, Interrupt.\n0x0000003f9d80c465 in ?? () from /lib64/libpthread.so.0\nMissing separate debuginfos, use: debuginfo-install glibc-2.12-1.107.el6.x86_64 glibc-2.12-1.192.el6.x86_64 libX11-1.6.3-2.el6.x86_64 libXau-1.0.6-4.el6.x86_64 libudev-147-2.46.el6.x86_64 libudev-147-2.73.el6_8.2.x86_64 libxcb-1.11-2.el6.x86_64 libxml2-2.7.6-21.el6_8.1.x86_64 libxml2-2.7.6-8.el6_3.4.x86_64 zlib-1.2.3-29.el6.x86_64",
                          "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1871977",
                          "updatedAt": "2023-06-01T00:19:34Z",
                          "publishedAt": "2021-12-26T12:48:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "using backtrace command, i got\n#0  0x0000003f9d80c465 in ?? () from /lib64/libpthread.so.\n#1  0x00007ffff3aa8cd3 in libMesh::Singleton::Setup::Setup() () from /home/xxx/offline/moose/libmesh/installed/lib/libmesh_opt.so.0\n#2  0x00007ffff3e2cdc6 in _GLOBAL__sub_I_remote_elem.C () from /home/xxx/offline/moose/libmesh/installed/lib/libmesh_opt.so.0\n#3  0x00007ffff482c772 in __do_global_ctors_aux () from /home/xxx/offline/moose/libmesh/installed/lib/libmesh_opt.so.0\n#4  0x00007fffffffca68 in ?? ()\n#5  0x0000000000000002 in ?? ()\n#6  0x00007fffffffca68 in ?? ()\n#7  0x00007ffff392959b in _init () from /home/xxx/offline/moose/libmesh/installed/lib/libmesh_opt.so.0\n#8  0x00007fffee4299c0 in ?? ()\n#9  0x0000003f9cc0e705 in _dl_init_internal () from /lib64/ld-linux-x86-64.so.2\n#10 0x0000003f9cc00b3a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2\n#11 0x0000000000000002 in ?? ()\n#12 0x00007fffffffcda5 in ?? ()\n#13 0x00007fffffffcde7 in ?? ()\n#14 0x0000000000000000 in ?? ()",
                          "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1872031",
                          "updatedAt": "2023-06-01T00:19:44Z",
                          "publishedAt": "2021-12-26T13:20:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "To use moose, i added\nexport LD_LIBRARY_PATH=/home/xxx/offline/moose/libmesh/installed/lib:$LD_LIBRARY_PATH to my .bashrc file.\nAfter doing this, my previous program built on external libmesh showed the similar hanging behavior.\nAnd then i commented the above LD_LIBRARY_PATH line, my program built on externally installed libmesh worked well again.\nSo, the problem may be related to the libmesh installed asscociated with moose.\nI installed moose on another machine through the same way and the TIMEOUT error did not occur and most tests passed.",
                          "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1873762",
                          "updatedAt": "2023-06-01T00:19:51Z",
                          "publishedAt": "2021-12-27T05:50:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What do you get by running ldd ./executable-opt ?\nDo you get a different result when LD_LIBRARY_PATH is set to include libmesh/installed and when it is not?",
                          "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1889633",
                          "updatedAt": "2023-06-01T00:19:51Z",
                          "publishedAt": "2021-12-30T22:59:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "and just to make sure, you have only installed a single copy of libmesh on the entire system ?",
                          "url": "https://github.com/idaholab/moose/discussions/19922#discussioncomment-1889634",
                          "updatedAt": "2023-06-01T00:20:00Z",
                          "publishedAt": "2021-12-30T22:59:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to generate a two-dimensional boundary",
          "author": {
            "login": "amosaha"
          },
          "bodyText": "Hello,\nThe meshes I generated with trelis cannot be used, so I tried to use the mesh generator that comes with moose.I have created a 3D model. If I want to specify a specific 2D plane, which function should I use\uff1f\nThanks.",
          "url": "https://github.com/idaholab/moose/discussions/19920",
          "updatedAt": "2024-01-15T23:34:12Z",
          "publishedAt": "2021-12-25T09:32:28Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDo you want to use this plane as a sideset in a 3D solve (for a boundary condition for example) or do you want to use this plane as a 2D mesh for the solve?\nEither way, you'll want to work with one of those to define the plane\nhttps://mooseframework.inl.gov/source/meshgenerators/ParsedGenerateSideset.html\nor if the plane is on the outer boundary of the mesh:\nhttps://mooseframework.inl.gov/source/meshgenerators/SideSetsAroundSubdomainGenerator.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19920#discussioncomment-1869518",
                  "updatedAt": "2024-01-15T23:34:12Z",
                  "publishedAt": "2021-12-25T11:50:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "InterfaceUserObject not getting material in DG kernel",
          "author": {
            "login": "lynnmunday"
          },
          "bodyText": "@AhmedAlmetwally posted this as an issue but maybe there is simple fix that someone here might know of.  The Issue is #19735\nI pasted in his error below:\nWe are trying to couple the DG and CG schemes for diffusion problems to enforce mass conservation. We started with adding a DG kernel to the diffusion CG kernel and ran the same input file of issue #11766 and got the following error:\nAssertion `i < _size' failed\n\nAccess out of bounds in MooseArray (i: 0 size: 0)\n\nat /Users/aalmetwally/projects/moose/framework/build/header_symlinks/MooseArray.h, line 276\n\nStack frames: 16\n\n0: 0 libmesh_dbg.0.dylib 0x000000010b6d8232 libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits >&) + 626\n\n1: 1 libporous_flow-dbg.0.dylib 0x0000000100281b4d MooseArray::operator[](unsigned int) const + 941\n\n2: 2 libporous_flow-dbg.0.dylib 0x000000010037d586 PorousFlow1PhaseFullySaturated::buildQpPPSS() + 38\n\n3: 3 libporous_flow-dbg.0.dylib 0x0000000100391858 PorousFlow1PhaseFullySaturated::initQpStatefulProperties() + 40\n\n4: 4 libmoose-dbg.0.dylib 0x0000000103bfcdae MaterialBase::initStatefulProperties(unsigned int) + 94\n\n5: 5 libporous_flow-dbg.0.dylib 0x0000000100390d8b PorousFlowMaterial::initStatefulProperties(unsigned int) + 107\n\n6: 6 libmoose-dbg.0.dylib 0x0000000103d25487 MaterialPropertyStorage::initStatefulProps(MaterialData&, std::__1::vector<std::__1::shared_ptr, std::__1::allocator<std::__1::shared_ptr > > const&, unsigned int, libMesh::Elem const&, unsigned int) + 199\n\n7: 7 libmoose-dbg.0.dylib 0x0000000104a01305 ComputeMaterialsObjectThread::onInternalSide(libMesh::Elem const*, unsigned int) + 1285\n\n8: 8 libmoose-dbg.0.dylib 0x000000010408c4d4 ThreadedElementLoopBase<libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> >::operator()(libMesh::StoredRange<libMesh::MeshBase::const_element_iterator, libMesh::Elem const*> const&, bool) + 1412\n\n9: 9 libmoose-dbg.0.dylib 0x00000001042326f1 FEProblemBase::initialSetup() + 21329\n\n10: 10 libmoose-dbg.0.dylib 0x0000000103b503ef Transient::init() + 2415\n\n11: 11 libmoose-dbg.0.dylib 0x0000000105251516 MooseApp::executeExecutioner() + 1350\n\n12: 12 libmoose-dbg.0.dylib 0x000000010524b44f MooseApp::run() + 8415\n\n13: 13 porous_flow-dbg 0x000000010000cfb5 main + 149\n\n14: 14 libdyld.dylib 0x00007fff20438f3d start + 1\n\n15: 15 ??? 0x0000000000000003 0x0 + 3\n\n[0] /Users/aalmetwally/projects/moose/framework/build/header_symlinks/MooseArray.h, line 276, compiled Dec 10 2021 at 11:50:32\n\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n\n:\n\nsystem msg for write_line failure : Bad file descriptor\n\nProcess 14528 exited with status = 1 (0x00000001)",
          "url": "https://github.com/idaholab/moose/discussions/19887",
          "updatedAt": "2022-08-16T10:49:12Z",
          "publishedAt": "2021-12-22T20:13:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "@lindsayad  fixed issue #19735 with pr #19918",
                  "url": "https://github.com/idaholab/moose/discussions/19887#discussioncomment-1864194",
                  "updatedAt": "2022-08-16T10:49:14Z",
                  "publishedAt": "2021-12-23T16:13:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lynnmunday"
                          },
                          "bodyText": "I would have deleted the disucssion topic but I don't know how.",
                          "url": "https://github.com/idaholab/moose/discussions/19887#discussioncomment-1864200",
                          "updatedAt": "2022-08-16T10:49:15Z",
                          "publishedAt": "2021-12-23T16:13:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "No need to delete! This is appropriate.",
                          "url": "https://github.com/idaholab/moose/discussions/19887#discussioncomment-1864389",
                          "updatedAt": "2022-08-16T10:49:15Z",
                          "publishedAt": "2021-12-23T16:47:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to get the node value of coupled variable in current element for 1D mesh?",
          "author": {
            "login": "YuhangNIU"
          },
          "bodyText": "Hi all,\nI know the node value of mainly variable in the current element (in ADKernel) can be defined as \"_u_nodal(_var.dofValues())\" and can be used as _u_nodal[0] in 1D mesh. But how to define and get the node value of the coupled variable in the current element?\nCould anyone kindly teach me?\nBest regards,\nYuhang",
          "url": "https://github.com/idaholab/moose/discussions/19673",
          "updatedAt": "2022-06-21T20:24:50Z",
          "publishedAt": "2021-12-21T02:45:47Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAre you talking about a coupled auxiliary variable?\nYou cant define directly the nodal (or any) value of a main (non-linear) variable, these have to be solved for.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19673#discussioncomment-1853653",
                  "updatedAt": "2022-06-21T20:25:06Z",
                  "publishedAt": "2021-12-21T16:08:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Thank you for your reply!\nI have solved this problem in another way. In this problem, we could define the coupled variable as _coupled_var_nodal(getVar(\"coupled_var\", 0)->dofValues()). So the node value of the coupled variable in the current element can be expressed as _coupled_var_nodal[0] or _coupled_var_nodal[1] in 1D mesh.\nMuch appreciate!\nYuhang",
                          "url": "https://github.com/idaholab/moose/discussions/19673#discussioncomment-1855805",
                          "updatedAt": "2022-06-21T20:25:08Z",
                          "publishedAt": "2021-12-22T01:22:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "sounds good.\nYou can indeed access a coupled variable dof that way. The preferred way is to use _coupled_var_nodal(coupledValue(\"coupled_var\", 0))    (adCoupledValue for ADKernels)\nPlease see the function definition in interface/Coupleable.C and see if you want to use that instead:\nconst VariableValue &\nCoupleable::coupledValue(const std::string & var_name, unsigned int comp) const\n{\n  const auto * const var = getVarHelper<MooseVariableField<Real>>(var_name, comp);\n  if (!var)\n    return *getDefaultValue(var_name, comp);\n  checkFuncType(var_name, VarType::Ignore, FuncAge::Curr);\n\n  if (!_coupleable_neighbor)\n  {\n    if (_c_nodal)\n      return (_c_is_implicit) ? var->dofValues() : var->dofValuesOld();\n    else\n      return (_c_is_implicit) ? var->sln() : var->slnOld();\n  }\n  else\n  {\n    if (_c_nodal)\n      return (_c_is_implicit) ? var->dofValuesNeighbor() : var->dofValuesOldNeighbor();\n    else\n      return (_c_is_implicit) ? var->slnNeighbor() : var->slnOldNeighbor();\n  }\n}\n\n_coupled_var_nodal is of the VariableValue type.  (ADVariableValue for AD)\nIt can be accessed at a quadrature point with [_qp]",
                          "url": "https://github.com/idaholab/moose/discussions/19673#discussioncomment-1855885",
                          "updatedAt": "2022-06-21T20:25:15Z",
                          "publishedAt": "2021-12-22T01:53:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YuhangNIU"
                          },
                          "bodyText": "Thank you! It looks better. I will have a try in this way.\nBest regards,\nYuhang",
                          "url": "https://github.com/idaholab/moose/discussions/19673#discussioncomment-1856578",
                          "updatedAt": "2022-06-21T20:31:06Z",
                          "publishedAt": "2021-12-22T06:47:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "error message for installation",
          "author": {
            "login": "snugook1108"
          },
          "bodyText": "/home/1ox/anaconda3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/9.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/1ox/project_mole_test/mole/src/.libs/main.x86_64-conda-linux-gnu.opt.o: in function `main':\nmain.C:(.text.startup.main+0x3b): undefined reference to `XXXTestApp::registerApps()'\ncollect2: error: ld returned 1 exit status\n\nThe undefined reference is there. I don't know how to solve this problem.",
          "url": "https://github.com/idaholab/moose/discussions/19667",
          "updatedAt": "2022-08-29T20:35:56Z",
          "publishedAt": "2021-12-19T06:28:44Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "This looks like remains from a previous compilation. Try to make clobberall then if that fails, commit/save all your work and use git clean -xfd. You may want to do this for every submodule with this: git submodule foreach --recursive git clean -xfd",
                  "url": "https://github.com/idaholab/moose/discussions/19667#discussioncomment-1844220",
                  "updatedAt": "2022-08-29T20:35:56Z",
                  "publishedAt": "2021-12-19T21:34:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "snugook1108"
                          },
                          "bodyText": "I tried to use git clean -xfd and git submodule foreach --recursive git clean -xfd , and make clobberall but the same message, main.C:(.text.startup.main+0x3b): undefined reference to `XXXTestApp::registerApps()' collect2: error: ld returned 1 exit status.",
                          "url": "https://github.com/idaholab/moose/discussions/19667#discussioncomment-1854743",
                          "updatedAt": "2022-08-29T20:35:56Z",
                          "publishedAt": "2021-12-21T20:14:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you grep for XXXTestApp in the head of the directory?\nWe have to find what s referring to this app in your files. This really looks like a test object.",
                          "url": "https://github.com/idaholab/moose/discussions/19667#discussioncomment-1855597",
                          "updatedAt": "2022-08-29T20:35:57Z",
                          "publishedAt": "2021-12-22T00:11:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Memory Usage",
          "author": {
            "login": "KhaledNabilSharafeldin"
          },
          "bodyText": "Hello,\nSo I am running into memory problems when running a larger mesh code with a lot of variables (almost a 100 variable).\n\nDoes using LAGRANGE_VEC for field data instead of 3 LAGRANGE variables would be more efficient memory usage?\nI am using a userObject in one of the primary kernels that I am using and it has large matrices , this one is called in computeResidual, computeJacobian, and computeOffDiagJacobian functions. for a nodal variable, does this mean that a userObject is created for each node or each element?\nWhen using meshes of 1+million elements, it hogs all the memory, is there a way to reduce memory usage? I am already using --use-distributed-mesh\nI can see moose has a memory logger, but it doesnt have a detailed usage for the kernels or objects in the MooseApp I have built, is there a simple way to analyze this? I have tried memscape and most of the tracebacks were leading back to libmesh.\n\nThanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/19660",
          "updatedAt": "2022-06-21T16:42:33Z",
          "publishedAt": "2021-12-16T23:50:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nNot really any advantage in memory. There's some advantages in simulation time with cache efficiencies when using vector variables. No real difference in how much data has to be stored. @lindsayad might know better\nNo the user object is created once per process. It's not created for every node or element. It may be ran on every node or element, depending on the type of the user object.\nTo reduce your memory footprint, please have a look at this post:\n#19460\nI think you should work on the numerics / petsc options now to reduce the memory costs.\nYou can use\n\n[Debug]\n  show_actions = true\n[]\n\nto see more information about the memory cost of each object. Note that a kernel or a UO usually do not have a large cost. It's more the cost of storing variables or solving the numerical systems.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19660#discussioncomment-1842109",
                  "updatedAt": "2022-06-21T16:42:33Z",
                  "publishedAt": "2021-12-19T00:22:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "We have a section on memory profiling here. Also MOOSE will not recognize the option --use-distributed-mesh. It's just --distributed-mesh. When MOOSE prints out its header at the beginning of a simulation you should be able to see whether you're replicated or distributed.\nI don't think there's much resource advantage between multiple LAGRANGE variables and a LAGRANGE_VEC variable. The advantage to me is cleaner code and a cleaner input file.",
                          "url": "https://github.com/idaholab/moose/discussions/19660#discussioncomment-1843901",
                          "updatedAt": "2022-06-21T16:42:41Z",
                          "publishedAt": "2021-12-19T18:53:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KhaledNabilSharafeldin"
                          },
                          "bodyText": "Thank you for the replies and clarifications!\nI am already using -ilu flag for PETSc, it doesn't seem to be that different.\nI'm also using 2 multiapps, so it is probably a big factor in this since i'm transfer-copying a lot of variables.\nis there a way to operate on the same variables without creating copies of them?\nAlso, is there a way to disable restart and restore? if it saves some memory, this might be helpful to test larger problems. it seems to be the largest factor in show actions.",
                          "url": "https://github.com/idaholab/moose/discussions/19660#discussioncomment-1855157",
                          "updatedAt": "2022-06-21T16:42:43Z",
                          "publishedAt": "2021-12-21T21:49:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "did you see a change in memory usage between replicated and distributed? I don't know a whole lot about the memory tracking through the actions. I usually rely on the heap profiler to show me exactly what is consuming memory otherwise my guesses are often inaccurate. If you have a MWE, then I could run the profiler for you if you're not well setup to run it yourself",
                          "url": "https://github.com/idaholab/moose/discussions/19660#discussioncomment-1855253",
                          "updatedAt": "2022-06-21T16:42:43Z",
                          "publishedAt": "2021-12-21T22:15:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "invalid active developer path, missing xcrun",
          "author": {
            "login": "ASKapat"
          },
          "bodyText": "Hi,\nAfter updating my MacOS to 11.2.3 from 11.2 (before which I wasn't having this issue) I'm now getting the following error when I activate moose:\nxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun",
          "url": "https://github.com/idaholab/moose/discussions/17482",
          "updatedAt": "2022-10-27T19:22:33Z",
          "publishedAt": "2021-04-01T19:58:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "First I would try re-installing CommandLineTools. In your Terminal, run:\nxcode-select --install\n\nNote that after installation completes, you should probably close your Terminal window and open a new one.",
                  "url": "https://github.com/idaholab/moose/discussions/17482#discussioncomment-559888",
                  "updatedAt": "2022-06-10T15:47:20Z",
                  "publishedAt": "2021-04-01T20:21:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ASKapat"
                          },
                          "bodyText": "That did it, thanks for the help!",
                          "url": "https://github.com/idaholab/moose/discussions/17482#discussioncomment-559972",
                          "updatedAt": "2022-06-10T15:47:22Z",
                          "publishedAt": "2021-04-01T20:38:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Glad I could help!",
                          "url": "https://github.com/idaholab/moose/discussions/17482#discussioncomment-560077",
                          "updatedAt": "2022-06-10T15:47:22Z",
                          "publishedAt": "2021-04-01T20:56:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Trevor1910"
                          },
                          "bodyText": "Perfect fix!  Thanks a lot!",
                          "url": "https://github.com/idaholab/moose/discussions/17482#discussioncomment-1853495",
                          "updatedAt": "2022-06-10T15:47:21Z",
                          "publishedAt": "2021-12-21T15:40:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "using watt as unit of heat source",
          "author": {
            "login": "PJohnYu"
          },
          "bodyText": "Hello, I have a mesh with multi-blocks, and I want to use watt density as heat source at specified block. But I don't find ways to realize it. Can you please tell me some ideas?\nThank you",
          "url": "https://github.com/idaholab/moose/discussions/19670",
          "updatedAt": "2022-09-29T06:51:46Z",
          "publishedAt": "2021-12-20T12:07:12Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou want to specify a heat source term in Watts?\nIf your mesh is in meters, and the rest of your simulation is in SI units, then you dont need to do any conversion. Watt is J/s, the SI unit.\nYou can use the HeatSource\nhttps://mooseframework.inl.gov/source/kernels/HeatSource.html\nor the BodyForce kernels\nhttps://mooseframework.inl.gov/source/kernels/BodyForce.html\nto add a source term to an energy equation\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19670#discussioncomment-1847064",
                  "updatedAt": "2022-09-29T06:51:51Z",
                  "publishedAt": "2021-12-20T12:58:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PJohnYu"
                          },
                          "bodyText": "Thanks for your reply, Guillaume!\nI did a incomplete describe about my problem above.\nIn my app, heat source is created by SolutionAux so it is stored in a AuxVariable.\nIt maybe my  mistake that HeatSource and BodyForce can't seem to use AuxVariable object as source term. Do you have some suggestion?",
                          "url": "https://github.com/idaholab/moose/discussions/19670#discussioncomment-1847572",
                          "updatedAt": "2022-09-29T06:51:58Z",
                          "publishedAt": "2021-12-20T14:37:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "loganharbour"
                          },
                          "bodyText": "You can scale your SolutionAux with the \u201cscale_factor\u201d parameter, where here you would use the conversion from your units -> W",
                          "url": "https://github.com/idaholab/moose/discussions/19670#discussioncomment-1847659",
                          "updatedAt": "2022-09-29T06:51:55Z",
                          "publishedAt": "2021-12-20T14:55:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You can use the CoupledForce kernel to use an auxvariable as a heat source\nhttps://mooseframework.inl.gov/source/kernels/CoupledForce.html\n\n\u2026\n Le 20 d\u00e9c. 2021 \u00e0 15:55, Logan Harbour ***@***.***> a \u00e9crit :\n\n \ufeff\n You can scale your SolutionAux with the \u201cscale_factor\u201d parameter, where here you would use the conversion from your units -> W\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n Triage notifications on the go with GitHub Mobile for iOS or Android.\n You are receiving this because you commented.",
                  "url": "https://github.com/idaholab/moose/discussions/19670#discussioncomment-1847675",
                  "updatedAt": "2022-09-29T06:51:55Z",
                  "publishedAt": "2021-12-20T14:59:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "PJohnYu"
                  },
                  "bodyText": "Thank you very much. I have found the suitable cases following your suggestion.",
                  "url": "https://github.com/idaholab/moose/discussions/19670#discussioncomment-1850988",
                  "updatedAt": "2022-09-29T06:51:55Z",
                  "publishedAt": "2021-12-21T06:18:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to realize the element average of a MaterialProperty in the material class?",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear MOOSE experts,\nThe MaterialProperty average value of a certain calculation domain is needed as another material parameter. So, I am trying to find the element average or node average of a MaterialProperty  in the material module. I focused on referring to the ElementAverageMaterialProperty class in the Postprocessors module.\nElementAverageMaterialPropertyTest was created to implement such operations, the code is as follows,\n// ElementAverageMaterialPropertyTest.h\nprotected:\nMaterialProperty<Real> & _material_property;\n\nvoid computeIntegral(Real & material_property); // Real & _material_property\n\ntemplate <typename T>\nvoid gatherSum(T & value)\n{\n  _communicator.sum(value);\n}\n// ElementAverageMaterialPropertyTest.C\nElementAverageMaterialPropertyTest::ElementAverageMaterialPropertyTest(const InputParameters & parameters):_material_property(declareProperty<Real>(_base_name + \"material_property\"))\n{    \n}\n\nvoid\nElementAverageMaterialPropertyTest::computeIntegral(Real & material_property)\n{\n  std::vector<Real> sum(2, 0);\n  std::vector<Real> area(2, 0); \n  Real average = 0.0;\n\n  unsigned int op_index = 0;\n  unsigned int size = _hard_factor.size();\n\n    //  Calculate the average for each element\n  for (unsigned int qp = 0; qp < _qrule->n_points(); qp++) // _qrule->n_points()--\u56db\u8282\u70b9\u5355\u5143\u7f51\u683c\n  {\n    sum[op_index] += _JxW[qp] * _coord[qp] * material_property; // Calculate the average of each element\n    area[op_index] += _JxW[qp] * _coord[qp]; // Calculate the area of each element\n\n    // _JxW[qp] = 0.03; // the area of each element is 0.03*4 = 0.12 for QUAD4\n    // _coord[qp] = 1;\n    // _qrule->n_points() = 4;\n  }\n\n    _communicator.sum(sum[op_index]);\n    _communicator.sum(area[op_index]);\n\n    average = sum[0]/area[0];\n}\nWhen using 30 Processors, an error occurred during the calculation process, the error is as follows,\napplication called MPI_Abort(MPI_COMM_WORLD, 805906695) - process 9\nGeneric Warning: In /opt/civet/build_1/conda_builds/conda_envs/next-2e4c730e2f/conda-bld/moose-libmesh-vtk_1626837403905/work/Parallel/MPI/vtkMPICommunicator.cxx, line 69\nMPI had an error\n------------------------------------------------\nInvalid root, error stack:\nPMPI_Bcast(448): MPI_Bcast(buf=0x7ffe66f8efa0, count=1, MPI_UNSIGNED_LONG, root=1074329026, comm=MPI_COMM_WORLD) failed\nPMPI_Bcast(408): Invalid root (value given was 1074329026)\n------------------------------------------------\n\napplication called MPI_Abort(MPI_COMM_WORLD, 269035783) - process 22\nFinally, It should be noted that if I cancel the following code, it can run normally.\n    _communicator.sum(sum[op_index]);\n    _communicator.sum(area[op_index]);\nI think I don't understand the execution mechanism of this code very well. In other words, I don't understand how to traverse all the finite element mesh operations in the material class.\nAny suggestions or recommendations to fix the problem would be greatly appreciated.\nThank you\nWei",
          "url": "https://github.com/idaholab/moose/discussions/19648",
          "updatedAt": "2022-06-10T13:19:18Z",
          "publishedAt": "2021-12-16T01:06:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "You must not perform MPI communication in the execute() method of an element userobject/postprocessor! computeIntegral is a virtual function that gets called by execute. execute is run on each element, and there is very likely not the same number of local elements on each processor, which means there are bound to be MPI calls that have no corresponding call on all other processors, which leads to failure.\nI'm not entirely clear what you want to do here. Do you need the average over elements or the average over a (sub)domain? The average over the element can be computed in computeProperties by looping over all QPs an additional time. If you need the average over the domain (and I'm curious what physics would require such a non-local effect) you need to couple in a postprocessor value, and let MOOSE compute the average using ElementAverageMaterialProperty.",
                  "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1824372",
                  "updatedAt": "2022-06-10T13:19:34Z",
                  "publishedAt": "2021-12-16T15:31:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Thank you for your kind help.\n\nYou must not perform MPI communication, ..., which leads to failure.\n\nIn paragraph, ElementAverageMaterialPropertyTempl<is_ad>::execute() is responsible for calculating the sum value on each process or thread on a subset of the domain by calling the MaterialProperty on each point. At this stage, MPI communication is not performed, right?\nAfter that, the actual summations operation is done in ElementAverageMaterialPropertyTempl<is_ad>::getValue() througth the function gatherSum(). MPI needs to be called.\nI don't know if my understanding is correct?\nFinally, I dinn't see the relevent code for calling between execute() and getvalue(), so I am not very clear about the calling relationship between the them. And these two related codes are also listed at the back\nexecute()\n\nElementAverageMaterialPropertyTempl\n\ntemplate <bool is_ad> // ElementAverageMaterialPropertyTempl.C\nvoid\nElementAverageMaterialPropertyTempl<is_ad>::execute()\n{\n  ElementIntegralMaterialPropertyTempl<is_ad>::execute();\n  // _integral_value += computeIntegral(); \u79ef\u5206\u6240\u8ba1\u7b97\u7684\u503c\n\n  _volume += this->_current_elem_volume; // \u8ba1\u7b97\u6240\u7684\u4f53\u79ef\n}\n\nElementIntegralPostprocessor\n\nvirtual void execute() override; //*.h\nvirtual Real computeIntegral();\n\nvoid\nElementIntegralPostprocessor::execute()\n{\n  _integral_value += computeIntegral();\n}\n\nReal\nElementIntegralPostprocessor::computeIntegral()\n{\n  Real sum = 0;\n\n  for (_qp = 0; _qp < _qrule->n_points(); _qp++)\n    sum += _JxW[_qp] * _coord[_qp] * computeQpIntegral();\n  return sum;\n}\n\nElementIntegralMaterialPropertyTempl\n\ntemplate <bool is_ad>\nReal\nElementIntegralMaterialPropertyTempl<is_ad>::computeQpIntegral()\n{\n  return MetaPhysicL::raw_value(_scalar[_qp]);\n}\ngetValue()\n\nElementAverageMaterialPropertyTempl\n\ntemplate <bool is_ad>\nReal\nElementAverageMaterialPropertyTempl<is_ad>::getValue()\n{\n  const Real integral = ElementIntegralMaterialPropertyTempl<is_ad>::getValue();\n  // gatherSum(_integral_value); // in ElementIntegralPostprocessor.C\n\n  ElementIntegralMaterialPropertyTempl<is_ad>::gatherSum(_volume);\n  // gatherSum:: a gather operation is required to collect the values computed on all processes to the root process;\n  \n  return integral / _volume;\n}\n\nElementIntegralPostprocessor\n\nReal\nElementIntegralPostprocessor::getValue()\n{\n  gatherSum(_integral_value);\n  return _integral_value;\n}",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1830565",
                          "updatedAt": "2022-06-10T13:19:36Z",
                          "publishedAt": "2021-12-17T01:52:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Hi Wei,\nCould you tell us what you want to compute here? I'll repeat @dschwen here:\n\nDo you need the average over elements or the average over a (sub)domain?\n\nAdditionally, how do you want to use that average? Do you want to use that average in a material property calculation, in a kernel/auxkernel, or in a postprocessor, etc.? I have a feeling that you are probably going down the wrong path -- There could be a much simpler alternative to what you doing right now.\n\nFinally, I dinn't see the relevent code for calling between execute() and getvalue(), so I am not very clear about the calling relationship between the them. And these two related codes are also listed at the back\n\nTo understand the \"calling relationship\" you'll have to dig through the parent classes of the postprocessor. There are multiple ways of doing that. We do have a C++ fundamentals page to help you get started.",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1830930",
                          "updatedAt": "2022-06-10T13:19:44Z",
                          "publishedAt": "2021-12-17T02:53:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "I'm curious what physics would require such a non-local effect\n\nI am trying to establish a coupled model of phase field (the diffuse interface description) and tensor mechanics (the shrap interface description), such as J2 plasticity or crystal plasticity, based on moose to study the influence of deformed energy including elastic energy and plastic energy on microstructure evolution, such grain boundary migration or precipitation. Plase forgive me for the slow progress now, considering that I don't understand some of mechanisms in moose.\nIn the process of coupling modeling, in view of the incompatibility of the two calculation methods in the description of the microstructure, some assumptions need to be introduced at the interface. L. Zhao, P Chakraborty, M.R. Tonks, I. Szlufarska (2017) used an interpolation scheme to achieve the coupling between them.\nIn this article,\n\nThe sentence marked in green indicates that a weighted average operation is required for the stress and internal states in each grain. The operation of calculating the weighted average of MaterialProperty is my original intention to ask this question. This weighted value needs to be transmitted to the materials bolk again for the calculation of kenels.\nFinally, this model is also based on MOOSE:MARMOT, but I don't have the permission to read it. So I can only directly to the instructions in the article and try to reproduce its operation in my model.\nI truly appreciate your timely help.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1830931",
                          "updatedAt": "2022-06-10T13:19:45Z",
                          "publishedAt": "2021-12-17T02:53:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Okay, this is much clearer. At the grain interface, you will have more than one nonzero order parameter. Since each order parameter represents a crystal (and each crystal has its own stress), you'll have to somehow \"blend\" them together.\nThis operation is performed at each quadrature point -- you don't need any additional loop for that. Suppose you have a set of order parameters phi_i, then one way to perform the weighted average is\nstress = sum(weight(phi_i) * stress_i) / sum(weight(phi_i))\n\nwhere weight(phi_i) is the weighting function of your choice. I think a common choice is phi_i^2.",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1830977",
                          "updatedAt": "2022-08-22T15:20:12Z",
                          "publishedAt": "2021-12-17T03:03:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Hi @hugary1995,\n\nI have a feeling that you are probably going down the wrong path -- There could be a much simpler alternative to what you doing right now.\n\nConsidering the clarity of the question, I divided the response into two. In the last reply, I gave the reason why I want to perform the averaging of the material parameters within the grain (in a certain domain). L. Q. Chen (2015) gives a detailed operation, and I sincerely hope that you have read related articles.\n\nTo understand the \"calling relationship\" you'll have to dig through the parent classes of the postprocessor.\n\nYeah, I also started my introduction to C++ based on the C++ fundamental. But my question now is what is the calling relationship between execute() and getValue(). In moose, I did not find any relevant lines of code to illustrate the calling relationship between them. ElementUserObject.C and Postprocessor.Calso have no related functions to coordinate the calling relationship between them.\nI don\u2019t know if my question is clear, if not, please explain directly.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1831279",
                          "updatedAt": "2022-08-22T15:20:25Z",
                          "publishedAt": "2021-12-17T03:58:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Hi, @hugary1995\nThank you for your kind answer.\n\nstress = sum(weight(phi_i) * stress_i) / sum(weight(phi_i))\uff1b\n\nI absolutely understand what you mean, but the most important question now is how to get stress_i. So I want to calculate stress_i by weighted average, the tensor mechanics block can only get the only certain stress[ _qp] at the orthogonal point.",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1831574",
                          "updatedAt": "2022-08-22T15:20:37Z",
                          "publishedAt": "2021-12-17T04:57:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "You can use MultiPhaseStressMaterial to do that.",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1831657",
                          "updatedAt": "2022-08-22T15:20:49Z",
                          "publishedAt": "2021-12-17T05:27:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Well, I guess I'm still not quite sure about what you really want to do, since what you described is different from what was suggested in the article screenshot you pasted above.\nAnyways, I also replied to your other post #19650, in case an average of material property over a grain is actually what you want. The grain average makes sense to me if you want to couple FFT and FEM.",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1831942",
                          "updatedAt": "2022-08-22T15:20:48Z",
                          "publishedAt": "2021-12-17T06:01:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "problem 1\n\nI guess I'm still not quite sure about what you really want to do,\u2026\n\nI give two articles that may cause some confusion.  I mainly refer to zhao's article, and Chen LongQing\u2019s is just as a supplement, in terms of interpolation processing at the interface.\nIn L. Zhao, P Chakraborty, M.R. Tonks, I. Szlufarska (2017), the processing method at the interface is done by interpolating stress and interal states variables,\n\nAccording to my understanding, a weighted sum of stresses in different crystals in the words marked in green indicate that a weighted average of the stress in each grain needs to be processed.\nA more detailed interpolation scheme is as follows,\n\nZhao applied the same interpolation method to the Cauchy stress $\\sigma_i$, the slip system resistence $s^\\alpha_i$ and the deformed energy $\\psi^{e}_i,\\ \\psi^{p}_i$\nHowever, zhao did not give calculation or description details of the ${\\sigma}{i}, s{i}^{\\alpha}, \\psi_{i}^{e}, \\psi_{i}^{p}}$ corresponding to each crystal or grain, just say a sentence a weighted sum of stresses in different crystals, ... . Therefore, I focused on the interpolation scheme mentioned in Long qingchen (2015), Since he explained their interpolation scheme in detail. The following is\n\nThe interpolation method mentioned in the chen Longqing article is just an alternative for me, because I am not sure how to calculate the stress and internal parameters of each grain in zhao. According to my understanding, the stress and internal parameters calculated by the tensor mechanics module are uniquely determined at each orthogonal point, without distinguishing which crystal grain they belong to.\nAnd today you said that I can try to use MultiPhaseStressMaterial to realize the stress interpolation process at the interface, and I carefully looked at two examples involving MultiPhaseStressMaterial, multiphasestress.i and Pattern1.i.\nI guess Zhao used this coupling modeling method to a large extent. In detail, the stress of each grain is calculated in the material module, and then they are weighted and averaged with MultiPhaseStressMaterial, and finally transmitted to to calculate the balance equation of the mechanics field in kernels. Moreover, I think the advantage of doing so is that the mechanical constitutive model used can be modified very flexibly.\nHowever, I did not see how this method can reset the state parameters at the interface. Specifically,  in the crystal plasticity model, the slip resistance corresponding to the newly activated order parameter during the interface migration process needs to be reset, according to the statement in the zhao's article.\nPlease forgive me for using such words to express my views. If I have not expressed clearly, your questions are very welcome.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1834422",
                          "updatedAt": "2022-08-22T15:20:48Z",
                          "publishedAt": "2021-12-17T11:45:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Problem 2\n\nThe grain average makes sense to me if you want to couple FFT and FEM.\n\nI don't quite understand what you mean.\nThe simulation of phase field and tensor mechanics field both use FEM to solve, which is adopted by me. According to my understanding, if different numerical solution methods are used, the complexity of coupling modeling is artificially increased, because the results obtained by different numerical solutions will have certain differences in data representation and data transmission also needs to be converted.\nAt the same time, such a problem will not occur in FEM. It is only necessary to consider the mismatch of the two simulation methods for the description of the microstructure.\nThank you so much for the speedy reply.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/19648#discussioncomment-1834641",
                          "updatedAt": "2022-08-22T15:21:12Z",
                          "publishedAt": "2021-12-17T12:29:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}