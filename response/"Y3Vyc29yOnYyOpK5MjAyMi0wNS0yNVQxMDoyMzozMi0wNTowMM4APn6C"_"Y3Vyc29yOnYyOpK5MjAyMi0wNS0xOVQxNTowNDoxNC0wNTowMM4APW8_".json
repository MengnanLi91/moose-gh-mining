{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNS0xOVQxNTowNDoxNC0wNTowMM4APW8_"
    },
    "edges": [
      {
        "node": {
          "title": "Setting locale failed",
          "author": {
            "login": "GeneralStarbound"
          },
          "bodyText": "When I try to run the compile and test code, which is as follows\ncd ~/projects/moose/test\nmake -j 4\n./run_tests -j 4\nI keep getting an error that says that my setting locale failed, and that it will fall back on \"c\".  I am not sure what caused this bug or how to fix this.  Without this, I cannot tell if the program is running properly and it results in a mass of errors.",
          "url": "https://github.com/idaholab/moose/discussions/21118",
          "updatedAt": "2022-06-09T01:40:14Z",
          "publishedAt": "2022-05-24T17:12:17Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "I have converted this issue to a discussion post, as this is more suited to that forum. I do not have enough information to give you suggestions and advice on what your issue is, so please let me know the following:\n\nWhat is your platform? (Linux, Mac, Windows Subsystem for Linux - WSL)\nAre you using the MOOSE conda packages (following the MOOSE Getting Started Instructions)?\nIs this an error during build, or only during testing?\nCan you please post a copy of the error? You can either attach a plain .txt file to your reply, or copy and paste it in the post if it isn't too long. To get proper visual formatting, please use the code formatting syntax for GitHub noted here.",
                  "url": "https://github.com/idaholab/moose/discussions/21118#discussioncomment-2814830",
                  "updatedAt": "2022-05-24T20:02:41Z",
                  "publishedAt": "2022-05-24T20:02:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GeneralStarbound"
                          },
                          "bodyText": "It wasn't important.  We got the program working.",
                          "url": "https://github.com/idaholab/moose/discussions/21118#discussioncomment-2815374",
                          "updatedAt": "2022-05-24T21:45:17Z",
                          "publishedAt": "2022-05-24T21:45:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GeneralStarbound"
                          },
                          "bodyText": "I do have a second question, probably also better for the discussion board, about using up too many slots",
                          "url": "https://github.com/idaholab/moose/discussions/21118#discussioncomment-2815376",
                          "updatedAt": "2022-05-24T21:45:48Z",
                          "publishedAt": "2022-05-24T21:45:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "If you got it working, please post the solution in a new \"answer\" below so that it might help others. Feel free to post your other question as a new discussions post.",
                          "url": "https://github.com/idaholab/moose/discussions/21118#discussioncomment-2816692",
                          "updatedAt": "2022-05-25T03:33:57Z",
                          "publishedAt": "2022-05-25T03:33:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "update libmesh fails",
          "author": {
            "login": "srinath-chakravarthy"
          },
          "bodyText": "Hi All,\nI have moose installed on my HPC system and after updating moose via git, libmesh fails to compile.   I am using the manual hpc instructions to compile as the HPC does not have access to the internet. i am also attaching my config.log. I am on the latest master commit commit 16ca78f of moose.\nCXX      src/parallel/libmesh_opt_la-parallel_elem.lo\nCXX      src/parallel/libmesh_opt_la-parallel_ghost_sync.lo\nCXX      src/parallel/libmesh_opt_la-parallel_histogram.lo\nCXX      src/parallel/libmesh_opt_la-parallel_node.lo\nCXX      src/parallel/libmesh_opt_la-parallel_sort.lo\n../src/mesh/poly2tri_triangulator.C:37:10: fatal error: poly2tri/poly2tri.h: No such file or directory\n37 | #include \"poly2tri/poly2tri.h\"\n|          ^~~~~~~~~~~~~~~~~~~~~\ncompilation terminated.\nmake[1]: *** [Makefile:27416: src/mesh/libmesh_opt_la-poly2tri_triangulator.lo] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nmake[1]: Leaving directory '/home/srinathcs/github/moose/libmesh/build'\nmake: *** [Makefile:32937: all-recursive] Error 1\nconfig.log",
          "url": "https://github.com/idaholab/moose/discussions/21114",
          "updatedAt": "2022-05-24T16:58:09Z",
          "publishedAt": "2022-05-24T14:46:31Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@roystgnr\nThis is a new dependency of ours. Can you remove the libmesh folder and try again?",
                  "url": "https://github.com/idaholab/moose/discussions/21114#discussioncomment-2813234",
                  "updatedAt": "2022-05-24T15:40:57Z",
                  "publishedAt": "2022-05-24T15:40:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "It looks as if the new poly2tri submodule isn't there.  A recursive submodule update might get it ... but yeah, removing libMesh and starting over from there might be safest.",
                          "url": "https://github.com/idaholab/moose/discussions/21114#discussioncomment-2813520",
                          "updatedAt": "2022-05-24T16:17:02Z",
                          "publishedAt": "2022-05-24T16:17:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "I'm confused, I did perform a recursive update. So to confirm, remove\nlibmesh and then run update script ??\n\u2026\nOn Tue, May 24, 2022, 12:17 PM roystgnr ***@***.***> wrote:\n It looks as if the new poly2tri submodule isn't there. A recursive\n submodule update might get it ... but yeah, removing libMesh and starting\n over from there might be safest.\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21114 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LNPJO6RHSU2BCFHVHTVLT6IRANCNFSM5WZ22XPQ>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21114#discussioncomment-2813560",
                  "updatedAt": "2022-05-24T16:23:50Z",
                  "publishedAt": "2022-05-24T16:23:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "srinath-chakravarthy"
                          },
                          "bodyText": "Ok removing libmesh and running the update script works. Thanks a lot.",
                          "url": "https://github.com/idaholab/moose/discussions/21114#discussioncomment-2813789",
                          "updatedAt": "2022-05-24T16:58:09Z",
                          "publishedAt": "2022-05-24T16:58:09Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ComputeExtraStressConstant - Function input?",
          "author": {
            "login": "1runer"
          },
          "bodyText": "Hi all,\nThe following question:\nWe have a prestressed block and are only interested in the possible deformation (and strain/ stress change) until failure happens (e.g. by means of Mohr-Coulomb criterion).\nNow there are various possibilities of initial \"prestressing\" via PressureBC, Applied Displacements as BC, etc..\nI also came across ComputeExtraStressConstant, which however only accepts constant values.\nIs there a reason why ComputeExtraStressConstant does not accept a spatial/temporal-dependent function (e.g. from a CSV, postprocessor, z-dependent) as input?\nKind regards",
          "url": "https://github.com/idaholab/moose/discussions/21023",
          "updatedAt": "2022-06-09T01:39:59Z",
          "publishedAt": "2022-05-13T06:56:47Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere is a prefactor option in that object so you can use a material property to define the value of the stress\nAnd using a GenericFunctionMaterial you can get a material property that uses a function (spatial and temporal dependent) .\nhttps://mooseframework.inl.gov/source/materials/GenericFunctionMaterial.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2746498",
                  "updatedAt": "2022-06-08T09:06:58Z",
                  "publishedAt": "2022-05-13T15:40:02Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "1runer"
                  },
                  "bodyText": "Hi Guillaume,\nthanks for your answer.\nI also found this post regarding the usage https://github.com/idaholab/moose/discussions/17410.\nBut how can I use a function to define this prefactor in at least 3 (or all 6) components independent?\ne.g. if I want to add:\nstress_zz = z * rho* g, stress_yy =0.7 * stress_zz, stress_xx = 1e6 = const.\nHow should the 'prefactor' or GenericFunctionMaterial or the ParsedFunction look like to apply this ExtraStress?\nI am not quite clear at which point I define the vector or tensor for the prefactor?\nKind regards",
                  "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2760492",
                  "updatedAt": "2022-06-08T09:06:58Z",
                  "publishedAt": "2022-05-16T15:00:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nok I missed that you wanted a component dependent prefactor.\nThe solution here will be for you to create a new material, which retrieves a tensor material property rather than just a Real material property. Copy paste the ComputeExtraStressConstant.C and ComputeExtraStressConstant.h to a new file name then modify it for a tensor prefactor.\nPlease let us know if you need help with that.\nThen once you have that you can use a GenericFunctionRankTwoTensor to define the new prefactor.\nhttps://mooseframework.inl.gov/source/materials/GenericFunctionRankTwoTensor.html\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2761928",
                          "updatedAt": "2022-06-08T09:06:58Z",
                          "publishedAt": "2022-05-16T18:17:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "1runer"
                          },
                          "bodyText": "Hello Guillaume,\nthanks for your suggestion, it works fine.\nI created my own material and filled the RankTwoTensor of extrastress with some functions from the functionParser.\nI have omitted the prefactor, I can add it if needed.\nThanks a lot and greetings!",
                          "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2776227",
                          "updatedAt": "2022-06-08T09:06:59Z",
                          "publishedAt": "2022-05-18T14:01:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "1runer"
                  },
                  "bodyText": "Hi Guillaume,\nwhere as the coding worked fine`for me,\nI have another question regarding the solution of the extra stress and the stress update due to ComputeExtraStressConstant material, but also in my material.\nWhen I try to solve a simple problem, the extra_stress is not transferred properly to the stress tensor.\nWhile xx, yy always work fine, zz doesn't work for smaller young's moduli.\nPlease see the attached image and the input-file leading to the image.\n\n  type = GeneratedMesh\n  dim = 3\n  nx = 10\n  ny = 10\n  nz = 50\n  ymax = 1\n  ymin = 0\n  xmax = 1\n  xmin = 0\n  zmin = 0\n  zmax = 5\n[]\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n[Modules]\n  [./TensorMechanics]\n    [./Master]\n      [./all]\n      add_variables = true\n      strain = SMALL\n      incremental = true\n      additional_generate_output = 'stress_xx stress_yy stress_zz'\n      [../]\n    [../]\n  [../]\n[]\n\n[BCs]\n  [./no_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = 'left right'\n    value = 0.0\n  [../]\n  [./no_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = 'bottom top'\n    value = 0.0\n  [../]\n  [./no_z]\n    type = DirichletBC\n    variable = disp_z\n    boundary = 'back front'\n    value = '0.0'\n  [../]\n[]\n\n[Materials]\n  [./Elasticity_tensor]\n    type = ComputeElasticityTensor\n    fill_method = symmetric_isotropic_E_nu\n    C_ijkl = '7.4e7 0'\n  [../]\n  [./stress]\n    type = ComputeFiniteStrainElasticStress\n  [../]\n  [./extra_stress]\n    type = ComputeExtraStressConstant\n    extra_stress_tensor = '1 1.5 2 0 0 0'\n    prefactor = stress_fac1\n    output_properties = 'extra_stress'\n    outputs = 'exodus'\n  [../]\n  [./fac1]\n    type = GenericFunctionMaterial\n    prop_names = stress_fac1\n    prop_values = fac1_fcn\n  [../]\n[]\n\n[Functions]\n  [fac1_fcn]\n    type = ParsedFunction\n    value = '(z*1e3)'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 5\n  dt = 5\n  nl_abs_tol = 1e-10\n  l_max_its = 20\n  automatic_scaling = true\n  compute_scaling_once = true\n[]\n\n[Outputs]\n  exodus = true\n  print_linear_residuals = true\n[]\n\nKind regards",
                  "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2789535",
                  "updatedAt": "2022-05-20T14:43:40Z",
                  "publishedAt": "2022-05-20T09:00:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nWhat is the definition of stress_fac1?\nI suspect it's just that tensor components arent entered in the right order for zz\nHow did you implement the tensor prefactor? I still see a function for the prefactor, so a single coefficient.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2791602",
                          "updatedAt": "2022-05-20T18:19:24Z",
                          "publishedAt": "2022-05-20T14:44:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "1runer"
                  },
                  "bodyText": "Hi Guillaume,\nfor the example above, I just followed some earlier discussion here on Github [LINK] #17410)\nThe inpute-file above works with the normal TensorMechanics.\nThe ExtraStress is calculated using the z-value of each QP.\nAnd as far as I could see, the ExtraStress also agrees with the calculated value.\nOnly with the transfer into the stress tensor there are problems. Stress_XX, Stress_YY are z-dependent and identical with the ExtraStress, only Stress_ZZ has a constant value for each element.\nKind regards",
                  "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2802122",
                  "updatedAt": "2022-05-23T06:47:36Z",
                  "publishedAt": "2022-05-23T06:47:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nI see it evolve as expected.\nwith this\n  [./extra_stress]\n    type = ComputeExtraStressConstant\n    extra_stress_tensor = '1 2 3 4 5 6'\n    prefactor = stress_fac1\n    output_properties = 'extra_stress'\n    outputs = 'exodus'\n  [../]\n\nI get this output which seems correct?\nIt has z dependence on every component of the extra_stress, of the expected magnitude. the 22 is the z component.\n\nNote that stress_zz is not the extra stress. It s the total stress. And in your case you get strain which diminishes the stress and most importantly here I think it makes the stress more evenly spread.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2807496",
                          "updatedAt": "2022-05-23T21:37:14Z",
                          "publishedAt": "2022-05-23T21:37:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@dschwen if you want to double check on my explanation",
                          "url": "https://github.com/idaholab/moose/discussions/21023#discussioncomment-2807669",
                          "updatedAt": "2022-05-23T22:20:27Z",
                          "publishedAt": "2022-05-23T22:20:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Exodus Output Specific ID",
          "author": {
            "login": "maxnezdyur"
          },
          "bodyText": "Say I have a model with multiple subdomains, but I only want to output a specific subdomain/block id. Is there a way to do that in MOOSE? I looked through the documentation but it doesn't look like the exists in the docs.",
          "url": "https://github.com/idaholab/moose/discussions/21101",
          "updatedAt": "2022-06-09T01:39:29Z",
          "publishedAt": "2022-05-23T18:39:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "The objects that will allow you (for which it makes sense) to do that will have a block =  parameter",
                  "url": "https://github.com/idaholab/moose/discussions/21101#discussioncomment-2806632",
                  "updatedAt": "2022-05-23T18:41:21Z",
                  "publishedAt": "2022-05-23T18:41:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Divergence of value(const value) AuxVariable in AuxKernel",
          "author": {
            "login": "wangzhaohao"
          },
          "bodyText": "Hello, everyone\nI want to ask is there have some Auxkernel about caculating the divergence of value? i find one about vector divergence. #20554\nmy problem is konw the temperature field distribution, and want to use Auxkernel to get divergence of temp.\nThanks for your help in advance!\nhao",
          "url": "https://github.com/idaholab/moose/discussions/21069",
          "updatedAt": "2022-05-24T03:51:37Z",
          "publishedAt": "2022-05-23T15:07:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI made one in this PR #20956.\nYou can specify the same field for each component to do the divergence of a value\nIt's not merged yet, it ll take a few weeks probably. So you should just grab the file and add it to your MOOSE.\nPlease let me know how it goes.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21069#discussioncomment-2805828",
                  "updatedAt": "2022-05-23T16:23:47Z",
                  "publishedAt": "2022-05-23T16:23:45Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "[Auxkernel][Converge]",
          "author": {
            "login": "coskrrb2002"
          },
          "bodyText": "Dear Moose users,\nI want to ask a tiny stupid question.\nAs far as I know, auxkernel and its auxvariable just calculating some variables.\nAnd the auxvariable and auxkernel should be nothing related to a convergence of a numerical calculation.\nAm I right?\nI am a little bit confused now because I added some auxvariables. And it contributes to the convergence of the entire calculation.\nI didn't make any coupling from these auxvariables to other kernels or material properties.\nTo me, this is so weird.....",
          "url": "https://github.com/idaholab/moose/discussions/21055",
          "updatedAt": "2022-05-23T09:53:41Z",
          "publishedAt": "2022-05-19T07:37:45Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt's not necessarily unrelated to the numerical calculation. The auxvariables may be used in the numerical scheme to compute material properties for example. This all depends on how you write the problem in.\nFor example:\nT is your main variable\nequation : dT/dt + D(T) grad_T = 0\nif you make D a material property you get an updated value throughout the nonlinear solve (by default)\nif you make D an auxvariable you get an updated value whenever you execute the auxkernel for D. If you execute it on TIMESTEP_END for example, you will consider D to be constant on each time step, so basically your numerical scheme will lag D.\nBut the default for auxkernel is actually (for most) linear + timestep_end. So you will get updates the same way as a material property.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21055#discussioncomment-2786041",
                  "updatedAt": "2022-05-19T19:26:44Z",
                  "publishedAt": "2022-05-19T19:25:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "coskrrb2002"
                          },
                          "bodyText": "Thank you for your advice!\nI found the error...\nI used the wrong mesh....\nThank you!",
                          "url": "https://github.com/idaholab/moose/discussions/21055#discussioncomment-2803289",
                          "updatedAt": "2022-05-23T09:53:40Z",
                          "publishedAt": "2022-05-23T09:53:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Why need both BC Pressure and Dirichlet in pore pressure in Porous Flow Tutorial 4",
          "author": {
            "login": "alexguev"
          },
          "bodyText": "Hello,\nAs I'm interested in injecting a fluid into a domain from a boundary, similarly in that regard to the tutorial 4 of the Porous Flow module, I was wondering why there were both the following BC:\n  [constant_injection_porepressure]\n    type = DirichletBC\n    variable = porepressure\n    value = 1E6\n    boundary = injection_area\n  []\n\nand\n  [cavity_pressure_x]\n    type = Pressure\n    boundary = injection_area\n    variable = disp_x\n    component = 0\n    factor = 1E6\n    use_displaced_mesh = false\n  []\n  [cavity_pressure_y]\n    type = Pressure\n    boundary = injection_area\n    variable = disp_y\n    component = 1\n    factor = 1E6\n    use_displaced_mesh = false\n  []\n\nFrom playing with both BC, I can see why they are both useful - I'd struggle to get the inner boundary (where the injection is applied) to expand without the Pressure BC. How to justify though, from a more theoretical point of view, that we need the Pressure BC on top of the Dirichlet BC?\nI understand at first sight that for the Dirichlet BC, the injection pressure affects the solid through the momentum balance, whereas for the Pressure BC, the pressure is a traction, so only affecting the stress times the normal to the boundary. But on paper, in 1D for instance, it seems to (almost) has the same effect, unless mistaken.\nI feel @WilkAndy might know :)\nCheers",
          "url": "https://github.com/idaholab/moose/discussions/20977",
          "updatedAt": "2022-06-28T02:29:48Z",
          "publishedAt": "2022-05-06T20:54:10Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@WilkAndy do you know?",
                  "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2755387",
                  "updatedAt": "2022-06-28T02:29:51Z",
                  "publishedAt": "2022-05-15T20:57:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I feel like you know the answer @alexguev , but you don't know that you know!  You can write out the equations and find the answer, but here's my wordy explanation....\nThe DirichletBC is needed because the borehole is at 1MPa pressure.  That fluid is also \"pushing\" on the rock skeleton: the fluid is mechanically loading the rock.  Eg, imagine a totally non-porous rock: it's pretty clear the borehole pressure will \"push\" on the rock.  Mathematically this means the porepressure is acting as an applied total stress (not effective stress) at the borehole boundary.   There is some discussion in the \"Barometric and oceanic loading\" section of https://mooseframework.inl.gov/modules/porous_flow/tidal.html .   All stresses in PorousFlow are effective stresses (eg, for the constitutive relations, and the output you see in exodus files) except for any Neumann boundary conditions, which are written in terms of total stresses - see discussion around Eqn(12) of https://mooseframework.inl.gov/modules/porous_flow/governing_equations.html .  Hence, we need two Pressure BCs for the total stress (the two mean the applied pressure is acting in the normal direction).",
                  "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2755772",
                  "updatedAt": "2022-06-28T02:30:21Z",
                  "publishedAt": "2022-05-15T23:05:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "Makes perfect sense, thanks @WilkAndy! I mistakenly thought the Pressure BC was acting on the effective stress.",
                          "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2767982",
                          "updatedAt": "2022-06-28T02:30:24Z",
                          "publishedAt": "2022-05-17T14:00:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "Follow-up question if I may @WilkAndy : how should I proceed to impose constant flow rate instead of constant pressure? Instead of DirichletBC for the pore pressure I would use NeumannBC, but what about the Pressure BC for the total stress?",
                          "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2785097",
                          "updatedAt": "2022-05-19T16:48:33Z",
                          "publishedAt": "2022-05-19T16:48:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OK, that is more complicated, but still quite possible.  Have a look at https://mooseframework.inl.gov/modules/porous_flow/thm_example.html .  This isn't exactly your problem, so don't copy it exactly (it uses specific and rather hypothetical assumptions in order to compare with a case that has an analytical solution) but it explains the use of a postprocessor to record fluid pressure, and then apply that to the total stress.  If you understand the opaque comment note, this lags in the input file, you'll have understood everything!",
                          "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2786971",
                          "updatedAt": "2022-05-19T22:25:55Z",
                          "publishedAt": "2022-05-19T22:25:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "That works, thanks, provided one is careful to have timesteps small enough. I guess a potential issue might be when the pressure at the injection boundary is not homogeneous, like when the porosity is prescribed through a spatial field for instance; but then, there might exist some way to assign the pressure at each node - that will be for another day (unless there is an easy solution).",
                          "url": "https://github.com/idaholab/moose/discussions/20977#discussioncomment-2794341",
                          "updatedAt": "2022-05-21T14:08:13Z",
                          "publishedAt": "2022-05-21T00:50:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about different BC",
          "author": {
            "login": "abc-hy"
          },
          "bodyText": "Hi everyone,\nI met a problem about the 'solve did not converge'.\nThe problem is, for the same system, when I use periodic BC, it can successfully run, however, when I use default BC, which is the zero flux BC, then it cannot converge, Why is this? Could anyone please give me some advice? How to make the input file with zero flux BC to successfully run?\nI put the two input files with different BC as below:\nThank you very much.\nThis is the zero flux BC condition input file, the solve cannot converge:\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = 360\n  xmax = 6\n  uniform_refine = 4\n[]\n\n[Variables]\n  [./c]\n  [../]\n  [./w]\n  [../]\n[]\n# aux varaibles to track the free energy change (must decrease with time)\n[AuxVariables]\n  [./total_F]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  # the chemical potential gradients\n[]\n\n[ICs]\n  [./IC_c]\n    x1=0\n    y1=0\n    x2=2\n    y2=0\n    inside = 1\n    outside = 0 # Matrix is supersaturated with solute atoms\n    variable = c\n    type = BoundingBoxIC\n  [../]\n[]\n\n\n# [BCs]\n#   [./Periodic]\n#     [./cx]\n#       variable = c\n#       auto_direction = 'x'\n#     [../]\n#     [./wx]\n#       variable = w\n#       auto_direction = 'x'\n#     [../]\n#   [../]\n#\n# []\n\n\n\n[Kernels]\n  # Split form of Cahn-Hilliard equation with eta as coupled variable\n  # w is the chemical potential\n  [./c_dot]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n  [../]\n  [./c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n  [../]\n\n  [./w_res]\n    type = SplitCHWRes\n    args = 'c'\n    variable = w\n    mob_name = M\n  [../]\n\n[]\n\n[AuxKernels]\n  [./total_F]\n    type = TotalFreeEnergy\n    variable = total_F\n    interfacial_vars = c\n    kappa_names = kappa_c\n  [../]\n[]\n\n\n\n\n[Materials]\n\n  [./mobility]\n    type = DerivativeParsedMaterial\n    f_name = M\n    args = 'c'\n    function = 0.2+0.8*(1-c^2)^2\n    derivative_order = 1\n  [../]\n\n  [./kappa_c]\n    type = GenericConstantMaterial\n    prop_names  = 'kappa_c'\n    prop_values = '8.0e-4'\n  [../]\n\n  [./free_energy]\n    # equivalent to `MathFreeEnergy`\n    type = DerivativeParsedMaterial\n    f_name = F\n    args = 'c'\n    function = 1.5423*c^2*(0.807-3.4035*c^2+2*c^4)+0.92\n  [../]\n\n\n\n[]\n\n\n\n[Postprocessors]\n\n  [./ElementInt_c]\n    type = ElementIntegralVariablePostprocessor\n    variable = c\n  [../]\n\n  [./total_F]\n    type = ElementIntegralVariablePostprocessor\n    variable = total_F\n  [../]\n[]\n\n[VectorPostprocessors]\n # The numerical values of the variables/auxvariables across the centerline\n [./line_values]\n   type =  LineValueSampler\n   start_point = '0 0 0'\n   end_point = '6 0 0'\n   variable = 'c'\n   num_points = 361\n   sort_by = x\n   #execute_on = 'FINAL'\n [../]\n[]\n\n\n ##[VectorPostprocessors]\n  # The numerical values of the variables/auxvariables across the centerline\n  ##[./line_values]\n   ##type =  LineValueSampler\n    ##start_point = '0'\n    #end_point = '9'\n    #variable = 'c w j_tot'\n    #num_points = 199\n    #sort_by =  id\n    #execute_on = 'TIMESTEP_END'\n  #[../]\n#[]\n[Preconditioning]\n  [./SMP] # to produce the complete perfect Jacobian\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n\n  type = Transient\n  scheme = 'BDF2'\n  #petsc_options = '-snes_mf'\n\n  #Preconditioned JFNK (default)\n  solve_type = 'NEWTON'\n\n  petsc_options_iname = '-pc_type -ksp_grmres_restart -sub_ksp_type -sub_pc_type -pc_asm_overlap'\n  petsc_options_value = 'asm      31                  preonly       lu           1'\n  #petsc_options_iname = '-pc_type'\n  #petsc_options_value = 'lu'\n\n  l_max_its = 30 # maximum linear iterations\n  l_tol = 1.0e-6 # 0.001 Linear Tolerance\n\n  nl_max_its = 50 # maximum number of nonlinear iterations. exceed will cut dt.\n  nl_rel_tol = 1.0e-9 # -8 nonlinear relative tolerance\n  #num_steps = 2\n\n\n\n\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1e-6\n    cutback_factor = 0.67\n    growth_factor = 1.5   # 1.6\n    optimal_iterations = 10\n    iteration_window = 2\n\n  [../]\n  [./Adaptivity]\n    coarsen_fraction = 0.1\n    refine_fraction = 0.7\n    max_h_level = 3\n    interval = 1\n\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  interval = 1\n\n[]\n\nThis is the input file using periodic BC case, the simulation can run successfully.\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = 360\n  xmax = 6\n  uniform_refine = 4\n[]\n\n[Variables]\n  [./c]\n  [../]\n  [./w]\n  [../]\n[]\n# aux varaibles to track the free energy change (must decrease with time)\n[AuxVariables]\n  [./total_F]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  # the chemical potential gradients\n[]\n\n[ICs]\n  [./IC_c]\n    x1=0\n    y1=0\n    x2=3\n    y2=0\n    inside = 1\n    outside = 0 # Matrix is supersaturated with solute atoms\n    variable = c\n    type = BoundingBoxIC\n  [../]\n[]\n\n\n[BCs]\n  [./Periodic]\n    [./cx]\n      variable = c\n      auto_direction = 'x'\n    [../]\n    [./wx]\n      variable = w\n      auto_direction = 'x'\n    [../]\n  [../]\n\n[]\n\n\n\n[Kernels]\n  # Split form of Cahn-Hilliard equation with eta as coupled variable\n  # w is the chemical potential\n  [./c_dot]\n    type = CoupledTimeDerivative\n    variable = w\n    v = c\n  [../]\n  [./c_res]\n    type = SplitCHParsed\n    variable = c\n    f_name = F\n    kappa_name = kappa_c\n    w = w\n  [../]\n\n  [./w_res]\n    type = SplitCHWRes\n    args = 'c'\n    variable = w\n    mob_name = M\n  [../]\n\n[]\n\n[AuxKernels]\n  [./total_F]\n    type = TotalFreeEnergy\n    variable = total_F\n    interfacial_vars = c\n    kappa_names = kappa_c\n  [../]\n[]\n\n\n\n\n[Materials]\n\n  [./mobility]\n    type = DerivativeParsedMaterial\n    f_name = M\n    args = 'c'\n    function = 0.2+0.8*(1-c^2)^2\n    derivative_order = 1\n  [../]\n\n  [./kappa_c]\n    type = GenericConstantMaterial\n    prop_names  = 'kappa_c'\n    prop_values = '8.0e-4'\n  [../]\n\n  [./free_energy]\n    # equivalent to `MathFreeEnergy`\n    type = DerivativeParsedMaterial\n    f_name = F\n    args = 'c'\n    function = 1.5423*c^2*(0.807-3.4035*c^2+2*c^4)+0.92\n  [../]\n\n\n\n[]\n\n\n\n[Postprocessors]\n\n  [./ElementInt_c]\n    type = ElementIntegralVariablePostprocessor\n    variable = c\n  [../]\n\n  [./total_F]\n    type = ElementIntegralVariablePostprocessor\n    variable = total_F\n  [../]\n[]\n\n[VectorPostprocessors]\n # The numerical values of the variables/auxvariables across the centerline\n [./line_values]\n   type =  LineValueSampler\n   start_point = '0 0 0'\n   end_point = '6 0 0'\n   variable = 'c'\n   num_points = 361\n   sort_by = x\n   #execute_on = 'FINAL'\n [../]\n[]\n\n\n ##[VectorPostprocessors]\n  # The numerical values of the variables/auxvariables across the centerline\n  ##[./line_values]\n   ##type =  LineValueSampler\n    ##start_point = '0'\n    #end_point = '9'\n    #variable = 'c w j_tot'\n    #num_points = 199\n    #sort_by =  id\n    #execute_on = 'TIMESTEP_END'\n  #[../]\n#[]\n[Preconditioning]\n  [./SMP] # to produce the complete perfect Jacobian\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n\n  type = Transient\n  scheme = 'BDF2'\n  #petsc_options = '-snes_mf'\n\n  #Preconditioned JFNK (default)\n  solve_type = 'NEWTON'\n\n  petsc_options_iname = '-pc_type -ksp_grmres_restart -sub_ksp_type -sub_pc_type -pc_asm_overlap'\n  petsc_options_value = 'asm      31                  preonly       lu           1'\n  #petsc_options_iname = '-pc_type'\n  #petsc_options_value = 'lu'\n\n  l_max_its = 30 # maximum linear iterations\n  l_tol = 1.0e-6 # 0.001 Linear Tolerance\n\n  nl_max_its = 50 # maximum number of nonlinear iterations. exceed will cut dt.\n  nl_rel_tol = 1.0e-9 # -8 nonlinear relative tolerance\n  #num_steps = 2\n\n\n\n\n\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1e-6\n    cutback_factor = 0.67\n    growth_factor = 1.5   # 1.6\n    optimal_iterations = 10\n    iteration_window = 2\n\n  [../]\n  [./Adaptivity]\n    coarsen_fraction = 0.1\n    refine_fraction = 0.7\n    max_h_level = 3\n    interval = 1\n\n\n  [../]\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  interval = 1\n\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20923",
          "updatedAt": "2022-06-22T07:33:07Z",
          "publishedAt": "2022-04-30T05:01:10Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs it the linear solve or the nonlinear solve that cannot converge?\nWhat does the log look like?\nThere's a few things you can do to troubleshoot convergence issues.\nFirst, let's try to see if the system is singular, in case it's underdetermined with only flux BCs. For this, reduce the size of the problem to 1000dofs and use these petsc options -pc_type svd -pc_svd_monitor.\nMore info there:\nhttps://mooseframework.inl.gov/releases/moose/v1.0.0/application_usage/failed_solves.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20923#discussioncomment-2674399",
                  "updatedAt": "2022-06-28T11:44:17Z",
                  "publishedAt": "2022-05-02T15:10:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@abc-hy any update on this?",
                          "url": "https://github.com/idaholab/moose/discussions/20923#discussioncomment-2755396",
                          "updatedAt": "2022-06-28T11:44:18Z",
                          "publishedAt": "2022-05-15T21:00:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abc-hy"
                          },
                          "bodyText": "Hi,\nI have made it run.\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/20923#discussioncomment-2793282",
                          "updatedAt": "2022-05-20T18:58:39Z",
                          "publishedAt": "2022-05-20T18:58:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Isogeometric Analysis in MOOSE",
          "author": {
            "login": "NorbertHofbauer"
          },
          "bodyText": "Hello,\nwhere can i find the c-frame.step file for the IGA example?\nhttps://mooseframework.inl.gov/modules/tensor_mechanics/examples/cframe_iga.html\nbest,\nnorbert",
          "url": "https://github.com/idaholab/moose/discussions/21054",
          "updatedAt": "2022-05-20T14:49:21Z",
          "publishedAt": "2022-05-19T07:36:15Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt's there\n/modules/tensor_mechanics/examples/cframe_iga/c-frame.step\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21054#discussioncomment-2786079",
                  "updatedAt": "2022-05-19T19:30:05Z",
                  "publishedAt": "2022-05-19T19:30:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "NorbertHofbauer"
                          },
                          "bodyText": "Thanks!\ni hadn't looked into the local files. i thought i could find the file somewhere in the online documentation.\nwish you a nice weekend!",
                          "url": "https://github.com/idaholab/moose/discussions/21054#discussioncomment-2790061",
                          "updatedAt": "2022-05-20T10:42:06Z",
                          "publishedAt": "2022-05-20T10:42:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Nemesis crashes (osx?)",
          "author": {
            "login": "veeshy"
          },
          "bodyText": "Bug Description\nUsing nemesis output causes some error where moose crashes. If the execute_on is only once at the end, this doesn't seem to cause the output to be wrong, but you still get an error message that doesn't seem to kill moose so tests pass (I'm speculating..). If you try to execute any nemesis test on initial it won't run.\nSteps to Reproduce\nin the moose tests folder:\n./moose_test-opt -I ./tests/outputs/nemesis/nemesis_elemental.i Outputs/execute_on=initial\n\ngives me\nzsh: illegal hardware instruction  ./moose_test-opt -i  Outputs/execute_on=initial\n\nNot setting the initial gives me the same as above but moose does run and the test associated does pass.\nTrying to run with mpiexec -n 4 causes an actual bad termination.\nMy moose:\nFramework Information:\nMOOSE Version:           git commit 668cd38e2e on 2020-07-07\nLibMesh Version:         6e07d0a45166892bdbeef78440bad7aa46e2a5b7\nPETSc Version:           3.12.5\nSLEPc Version:           3.12.1\n\nI'm on OS X 10.15.5 (19F101) using the standard conda moose. I haven't tried to replicate in ubuntu.\nImpact\nI can't run distributed mesh with a parallel output.",
          "url": "https://github.com/idaholab/moose/discussions/20844",
          "updatedAt": "2023-03-14T11:28:07Z",
          "publishedAt": "2020-07-28T16:09:42Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@veeshy is this fixed? or did you update the mac and now it s gone?",
                  "url": "https://github.com/idaholab/moose/discussions/20844#discussioncomment-2612050",
                  "updatedAt": "2023-04-10T20:43:05Z",
                  "publishedAt": "2022-04-21T23:19:28Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "Do not have the specific versions listed here, happy to check next week though on a newer mac.",
                          "url": "https://github.com/idaholab/moose/discussions/20844#discussioncomment-2612342",
                          "updatedAt": "2023-04-10T20:43:05Z",
                          "publishedAt": "2022-04-22T00:59:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "veeshy"
                          },
                          "bodyText": "this is fixed (sorry for the delay)\nosx 12.3, latest moose",
                          "url": "https://github.com/idaholab/moose/discussions/20844#discussioncomment-2786263",
                          "updatedAt": "2022-05-19T19:58:34Z",
                          "publishedAt": "2022-05-19T19:58:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "great thank you for checking!",
                          "url": "https://github.com/idaholab/moose/discussions/20844#discussioncomment-2786301",
                          "updatedAt": "2022-05-19T20:04:15Z",
                          "publishedAt": "2022-05-19T20:04:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}