{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wNi0wN1QwOToyNTowNS0wNTowMM4AMZKe"
    },
    "edges": [
      {
        "node": {
          "title": "Error executing s1_testmodel.i | Registering objects",
          "author": {
            "login": "rl3fz"
          },
          "bodyText": "Hello, I'm attempting to execute the 's1_testmodel.i' file for spinodal decomposition (Step 1 of the phase field tutorial), but I keep getting:\n\n*** ERROR ***\nA 'SplitCHWRes' is not a registered object.\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nI did not encounter a similar issue with the simple_diffusion or pressure_diffusion input files, and I did not need to register any additional objects for these. I've looked at the documentation for ADSplitCHWRes, but am not sure if or where I would need to incorporate it. The Getting Started Tutorial section on Objects states \"All MOOSE applications posses the full capability of the framework and physics modules,\" so I am wary of creating duplications/any unnecessary files.\nAny advice would be greatly appreciated.",
          "url": "https://github.com/idaholab/moose/discussions/18041",
          "updatedAt": "2022-11-14T23:06:30Z",
          "publishedAt": "2021-06-09T17:52:31Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou probably did not link the phase field module in the executable you are using.\nCould you please look for 'phase field' in the Makefile that was used for compiling the executable?\nAll MOOSE applications can get all physics modules, by default we only include the bare minimum.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18041#discussioncomment-847476",
                  "updatedAt": "2022-11-14T23:06:30Z",
                  "publishedAt": "2021-06-09T19:34:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rl3fz"
                          },
                          "bodyText": "Yes, ok I've changed the \"no\" next to PHASE_FIELD to \"yes\", saved the file, rebooted the terminal, and tried it again but got the same error.\nI then added # include \"ADSplitCHWRes.h\" to the top of the input file but still got the same error.",
                          "url": "https://github.com/idaholab/moose/discussions/18041#discussioncomment-847632",
                          "updatedAt": "2022-11-14T23:06:31Z",
                          "publishedAt": "2021-06-09T20:09:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You need to recompile.\nRebooting the terminal does not change the executable\nYou do not need to add include code headers in input files",
                          "url": "https://github.com/idaholab/moose/discussions/18041#discussioncomment-847634",
                          "updatedAt": "2022-11-14T23:06:31Z",
                          "publishedAt": "2021-06-09T20:10:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rl3fz"
                          },
                          "bodyText": "I can run the file now, thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/18041#discussioncomment-847742",
                          "updatedAt": "2022-11-14T23:06:32Z",
                          "publishedAt": "2021-06-09T20:43:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Change BC only at a particular time",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys,\nI want to change the boundary condition of the sides of the subdomain ONLY at time X (before time X let it equal to whatever is calculated from the simulation)\n[./water_grad_block7]\ntype = FunctionDirichletBC\nvariable = porepressure\nboundary = 'front7 top7 right7 back7 bottom7 left7'\nfunction = pp_block7\n[../]\n\n[./pp_block7]\n  type = ParsedFunction\n  value = 'if(t<4,xxxxx,0)'\n  [../]\n\nxxxx = calculated pore-pressure from simulation\nIs this possible with MOOSE?\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/18027",
          "updatedAt": "2022-09-21T17:01:51Z",
          "publishedAt": "2021-06-08T05:16:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "This should be possible using a postprocessor for xxxx and having it be an argument (in vals) of the ParsedFunction\nhttps://mooseframework.inl.gov/source/functions/MooseParsedFunction.html",
                  "url": "https://github.com/idaholab/moose/discussions/18027#discussioncomment-838159",
                  "updatedAt": "2021-06-08T05:48:13Z",
                  "publishedAt": "2021-06-08T05:45:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @GiudGiud,\nI was looking at this 'postprocessor' as well. However, from what I see, I couldn't find the right one that can store the variable of each side of the sub-domain.\n@WilkAndy have you ever encountered this situation?\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18027#discussioncomment-838273",
                          "updatedAt": "2021-06-08T06:29:42Z",
                          "publishedAt": "2021-06-08T06:29:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Have a look half-way down this page, for BCs and Controls:\nhttps://mooseframework.inl.gov/modules/porous_flow/ates.html\na",
                  "url": "https://github.com/idaholab/moose/discussions/18027#discussioncomment-838389",
                  "updatedAt": "2021-06-08T06:59:20Z",
                  "publishedAt": "2021-06-08T06:59:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Hi @WilkAndy and @GiudGiud\nI got it to work now with the control block\n\nThank you guys.\nKind regards,\nTraiwit",
                          "url": "https://github.com/idaholab/moose/discussions/18027#discussioncomment-843524",
                          "updatedAt": "2021-06-09T06:09:46Z",
                          "publishedAt": "2021-06-09T06:09:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MooseMesh",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "When running my model I get the following error:\n\" *** ERROR ***\n/home/twise/projects/moose/modules/combined/PWR_Studies/peacock_run_exe_tmp_fsi_fallingBal.i:174: (InterfaceKernels/penalty_interface_x/boundary):\nthe following side set ids do not exist on the mesh: 5\nMOOSE distinguishes between \"node sets\" and \"side sets\" depending on whether\nyou are using \"Nodal\" or \"Integrated\" BCs respectively. Node sets corresponding\nto your side sets are constructed for you by default.\n\nTry setting \"Mesh/construct_side_list_from_node_list=true\" if you see this error.\nNote: If you are running with adaptivity you should prefer using side sets. \"\n\nFor MooseMesh, what file(s) do I need to access and modify in order to incorporate either of these changes ?:\nMesh/construct_node_list_from_side_list=true\nMesh/construct_side_list_from_node_list=false",
          "url": "https://github.com/idaholab/moose/discussions/18024",
          "updatedAt": "2022-06-17T14:41:38Z",
          "publishedAt": "2021-06-08T00:38:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "It's likely not the issue.\nWhat is boundary set to in penalty_interface_x ?\nCould you please open your mesh in paraview and check that the boundary you are using is really there?",
                  "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-837564",
                  "updatedAt": "2022-06-17T14:41:46Z",
                  "publishedAt": "2021-06-08T01:00:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "The boundary for the penalty_interface_x is master0_interface. This boundary shows up in peacock. I believe the issue may be related to the fact that I have two separate mesh domains that do not share any side sets. The near neighbor nodes shared with each domain would probably have to be used to assemble a fictitious coupled side set.",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-837637",
                          "updatedAt": "2022-06-17T14:41:44Z",
                          "publishedAt": "2021-06-08T01:40:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you double check the spelling of the interface name? That's a common reason too.\nThen could you please add show_info = true to your last mesh generator (a FileMeshGenerator if you are just loading a mesh) and report the result.\nInterfaceKernels are pretty good at disjoint boundaries. I m not sure it can be empty in between the boundaries, we ll ask someone after that.",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-837867",
                          "updatedAt": "2022-06-17T14:41:45Z",
                          "publishedAt": "2021-06-08T03:21:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Here is the mesh generator information:\nMesh Information:\nelem_dimensions()={2}\nspatial_dimension()=2\nn_nodes()=21069\nn_local_nodes()=21069\nn_elem()=20608\nn_local_elem()=20608\nn_active_elem()=20608\nn_subdomains()=2\nn_partitions()=1\nn_processors()=1\nn_threads()=1\nprocessor_id()=0\nis_prepared()=true\nis_replicated()=true\nMesh Bounding Box:\nMinimum: (x,y,z)=(       0,        0,        0)\nMaximum: (x,y,z)=(    0.31,   2.5625,        0)\nDelta:   (x,y,z)=(    0.31,   2.5625,        0)\nMesh Element Type(s):\nQUADSHELL4\nMesh Nodesets:\nNone\nMesh Sidesets:\nSideset 1 (Walls), 788 sides (EDGE2), 788 elems (QUADSHELL4), 790 nodes\nSide volume: 5.125\nBounding box minimum: (x,y,z)=(       0,        0,        0)\nBounding box maximum: (x,y,z)=(    0.31,   2.5625,        0)\nBounding box delta: (x,y,z)=(    0.31,   2.5625,        0)\nSideset 2 (Inlet), 52 sides (EDGE2), 52 elems (QUADSHELL4), 53 nodes\nSide volume: 0.31\nBounding box minimum: (x,y,z)=(       0,        0,        0)\nBounding box maximum: (x,y,z)=(    0.31,        0,        0)\nBounding box delta: (x,y,z)=(    0.31,        0,        0)\nSideset 3 (Outlet), 52 sides (EDGE2), 52 elems (QUADSHELL4), 53 nodes\nSide volume: 0.31\nBounding box minimum: (x,y,z)=(       0,   2.5625,        0)\nBounding box maximum: (x,y,z)=(    0.31,   2.5625,        0)\nBounding box delta: (x,y,z)=(    0.31,        0,        0)\nSideset 4 (BallWall), 26 sides (EDGE2), 26 elems (QUADSHELL4), 26 nodes\nSide volume: 0.194305\nBounding box minimum: (x,y,z)=(   0.119,  1.51923,        0)\nBounding box maximum: (x,y,z)=(   0.181,  1.58077,        0)\nBounding box delta: (x,y,z)=(   0.062, 0.061548,        0)\nMesh Edgesets:\nNone\nMesh Subdomains:\nSubdomain 1 (Fluid): 20488 elems (QUADSHELL4, 20488 active), 20935 active nodes\nVolume: 0.794375\nBounding box minimum: (x,y,z)=(       0,        0,        0)\nBounding box maximum: (x,y,z)=(    0.31,   2.5625,        0)\nBounding box delta: (x,y,z)=(    0.31,   2.5625,        0)\nSubdomain 2 (Particle): 120 elems (QUADSHELL4, 120 active), 134 active nodes\nVolume: 0.00298977\nBounding box minimum: (x,y,z)=(   0.119,  1.51923,        0)\nBounding box maximum: (x,y,z)=(   0.181,  1.58077,        0)\nBounding box delta: (x,y,z)=(   0.062, 0.061548,        0)\nGlobal mesh volume = 0.797365",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-841332",
                          "updatedAt": "2022-06-17T14:41:45Z",
                          "publishedAt": "2021-06-08T17:38:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So as you can see in the sidesets, moose does not know about master_0interface\nYou could figure out what happened to it, or if possible you could re-create it using MeshGenerators",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-841592",
                          "updatedAt": "2022-06-17T14:41:53Z",
                          "publishedAt": "2021-06-08T18:31:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Here is the mesh definition that I am currently using.:\n\"[Mesh]\n[basic_mesh]\ntype = FileMeshGenerator\n\"#    FileMeshGenerator RenameBlockGenerator\nfile = FallingBall.e\nshow_info = true\n[]\n\"#    uniform_refine = 3\n\" #  [subdomain1]\n\"#    type = SubdomainBoundingBoxGenerator\n\"#    bottom_left = '0.119 1.51923 0'\n\"#    block_id = Particle_2\n\"#    top_right = '0.181 1.58077 0'\n\"#    input = basic_mesh\n\"#  []\n[interface]\ntype = SideSetsBetweenSubdomainsGenerator\nprimary_block = Fluid\npaired_block = Particle\nnew_boundary = 'coupled_bound'\n\"#    input = subdomain\ninput = basic_mesh\nshow_info = true\n[]\n[break_boundary]\ntype = BreakBoundaryOnSubdomainGenerator\ninput = interface\n[]\n[]\"\n\nUsing the code generates this error:\n*** ERROR ***\n/home/twise/projects/moose/modules/combined/PWR_Studies/peacock_run_exe_tmp_fsi_fallingBal.i:176: (InterfaceKernels/penalty_interface_x/boundary):\nthe following side set ids do not exist on the mesh: 9\nMOOSE distinguishes between \"node sets\" and \"side sets\" depending on whether\nyou are using \"Nodal\" or \"Integrated\" BCs respectively. Node sets corresponding\nto your side sets are constructed for you by default.\n\nTry setting \"Mesh/construct_side_list_from_node_list=true\" if you see this error.\nNote: If you are running with adaptivity you should prefer using side sets.",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842810",
                          "updatedAt": "2022-06-17T14:41:52Z",
                          "publishedAt": "2021-06-08T23:45:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Please format the input using markdown (with quotes)\nWhat sideset are you using for penalty_interface_x/boundary?\nCan you paste the show_info output again, for the last mesh generator you used?\nThanks",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842826",
                          "updatedAt": "2022-06-17T14:42:02Z",
                          "publishedAt": "2021-06-08T23:50:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "\" [InterfaceKernels]\n[./penalty_interface_x]\ntype = CoupledPenaltyInterfaceDiffusion\nvariable = vel_x\nneighbor_var = disp_x\nsecondary_coupled_var = vel_x_solid\n\"#    boundary = 'BallWall'\nboundary = 'coupled_bound'\npenalty = 1e6\n[../]\n[./penalty_interface_y]\ntype = CoupledPenaltyInterfaceDiffusion\nvariable = vel_y\nneighbor_var = disp_y\nsecondary_coupled_var = vel_y_solid\n\"#    boundary = 'BallWall'\nboundary = 'coupled_bound'\npenalty = 1e6\n[../]\n[] \"",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842840",
                          "updatedAt": "2022-06-17T14:42:02Z",
                          "publishedAt": "2021-06-08T23:54:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Please format the input using markdown (with quotes)\n\nWould you please provide a visual example for properly formatting to reduce the font size?\nThank you.",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842857",
                          "updatedAt": "2022-06-17T14:42:05Z",
                          "publishedAt": "2021-06-08T23:59:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Please find attached my input files.\nFallingBall.e.txt\nfsi_fallingBal.i.txt",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842870",
                          "updatedAt": "2022-06-17T14:42:06Z",
                          "publishedAt": "2021-06-09T00:02:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "type = CoolObject\n\nso ``` before and after the text in markdown",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-842878",
                          "updatedAt": "2022-06-17T14:42:06Z",
                          "publishedAt": "2021-06-09T00:05:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "Will the movement of the ball deform the mesh of the fluid, introducing numerical error?\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n\u2026\n________________________________\nFrom: Guillaume Giudicelli ***@***.***>\nSent: Tuesday, June 8, 2021 11:03:20 PM\nTo: idaholab/moose ***@***.***>\nCc: Wise, Tammy ***@***.***>; Author ***@***.***>\nSubject: Re: [idaholab/moose] MooseMesh (#18024)\n\n\nOk I checked the mesh, the problem is that the two domains overlap.\nThe fluid mesh needs to go around the solid, then it ll be modified every time step to adjust to the ball movement.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=106de73b-4ff6dfd2-106da9fa-86e0458f6361-d1ce05dec7686ee7&q=1&e=db16fbcc-5d0f-4738-8744-72f5d6854e69&u=https%3A%2F%2Fgithub.com%2Fidaholab%2Fmoose%2Fdiscussions%2F18024%23discussioncomment-843179>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=bda46b12-e23f53fb-bda425d3-86e0458f6361-98a1834dd1a98b5a&q=1&e=db16fbcc-5d0f-4738-8744-72f5d6854e69&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJQ6AYWMTQC24CSBPYCKNFDTR3KXRANCNFSM46IYEBZQ>.",
                  "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-843182",
                  "updatedAt": "2022-06-17T14:41:51Z",
                  "publishedAt": "2021-06-09T03:05:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@fdkong\nI think the error would go down with small timesteps",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-843359",
                          "updatedAt": "2022-06-17T14:42:16Z",
                          "publishedAt": "2021-06-09T04:59:55Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "If the mesh domains were to be separated by some distance with no overlap would the method work in that case?\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n\u2026\n________________________________\nFrom: Wise, Tammy ***@***.***>\nSent: Tuesday, June 8, 2021 11:05:49 PM\nTo: idaholab/moose ***@***.***>; idaholab/moose ***@***.***>\nCc: Author ***@***.***>\nSubject: Re: [idaholab/moose] MooseMesh (#18024)\n\nWill the movement of the ball deform the mesh of the fluid, introducing numerical error?\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n________________________________\nFrom: Guillaume Giudicelli ***@***.***>\nSent: Tuesday, June 8, 2021 11:03:20 PM\nTo: idaholab/moose ***@***.***>\nCc: Wise, Tammy ***@***.***>; Author ***@***.***>\nSubject: Re: [idaholab/moose] MooseMesh (#18024)\n\n\nOk I checked the mesh, the problem is that the two domains overlap.\nThe fluid mesh needs to go around the solid, then it ll be modified every time step to adjust to the ball movement.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=106de73b-4ff6dfd2-106da9fa-86e0458f6361-d1ce05dec7686ee7&q=1&e=db16fbcc-5d0f-4738-8744-72f5d6854e69&u=https%3A%2F%2Fgithub.com%2Fidaholab%2Fmoose%2Fdiscussions%2F18024%23discussioncomment-843179>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=bda46b12-e23f53fb-bda425d3-86e0458f6361-98a1834dd1a98b5a&q=1&e=db16fbcc-5d0f-4738-8744-72f5d6854e69&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJQ6AYWMTQC24CSBPYCKNFDTR3KXRANCNFSM46IYEBZQ>.",
                  "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-843187",
                  "updatedAt": "2022-06-17T14:42:18Z",
                  "publishedAt": "2021-06-09T03:08:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Not an expert in FSI but doubt that would help. Would make it harder to match the sides",
                          "url": "https://github.com/idaholab/moose/discussions/18024#discussioncomment-843358",
                          "updatedAt": "2022-06-17T14:42:17Z",
                          "publishedAt": "2021-06-09T04:59:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Strain calculation: finite total strain",
          "author": {
            "login": "LabrosV"
          },
          "bodyText": "Hi all,\nAccording to this page (https://mooseframework.inl.gov/modules/tensor_mechanics/Strains.html), there is no finite total strain formulation in Moose. I want to solve a hyperelastic model with no plasticity and the incremental form (hypo-elastic) will cause inaccuracies for large strains.  I'm writing this post to discuss the changes in the code I have to make in order to include hyper-elasticity with a total strain formulation.\nSome initial thoughts/steps:\n\nThe properties _total_strain and _mechanical_strain will be defined in class that inherits from \"ComputeStrainBase\".\nModifying TensorMechanicsAction(Base) to call the above function if StrainAndIncrement::FiniteTotal.\nThe Finite Strain Hyperelastic stress will be calculated in a function which inherits from \"ComputeStressBase\".\n\nAfter making these changes, I was able to solve some numerical examples but the jacobian was not correct (I used -snes_test_jacobian in a transient problem for comparison). I pushed forward my jacobian because the stress divergence kernel is expressed in the current configuration. I'm not sure if I have to make any changes in the solvers (nonlinear).\nI look forward to hearing your feedback/ideas about this topic.\nThanks,\nLabros",
          "url": "https://github.com/idaholab/moose/discussions/18036",
          "updatedAt": "2022-06-13T08:29:41Z",
          "publishedAt": "2021-06-08T20:42:13Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "FYI, we have an active PR to add total finite strain formulation with correct Jacobian. see #17475",
                  "url": "https://github.com/idaholab/moose/discussions/18036#discussioncomment-842157",
                  "updatedAt": "2022-06-13T08:29:51Z",
                  "publishedAt": "2021-06-08T20:45:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Was just about to link to that, too. Feel free to chime in on that PR!",
                          "url": "https://github.com/idaholab/moose/discussions/18036#discussioncomment-842163",
                          "updatedAt": "2022-06-13T08:29:49Z",
                          "publishedAt": "2021-06-08T20:45:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Interpolation method in SolutionFunction",
          "author": {
            "login": "hsheldon"
          },
          "bodyText": "I am trying to understand how information is interpolated from a UserObject onto a new mesh when using a SolutionFunction or SolutionAux. The documentation for SolutionAux states that \u201ca point locator is used to find the nearest node or element and the corresponding value.\u201d  This seems to suggest that no interpolation is performed; instead the value at the nearest node or element is used. Is this correct?  If so, is there an alternative method that does actually interpolate between points in the UserObject mesh to determine the values at points in the new mesh?\nThere is not much documentation for SolutionFunction but looking at the code it seems to do essentially the same thing as SolutionAux.",
          "url": "https://github.com/idaholab/moose/discussions/18026",
          "updatedAt": "2023-07-06T22:54:00Z",
          "publishedAt": "2021-06-08T01:17:38Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI went to check in SolutionUserObject and libmesh::MeshFunction is used to interpolate the solutions. So more information / the code doing the interpolation can be found there: https://libmesh.github.io/doxygen/classlibMesh_1_1MeshFunction.html#ae1c64240672461d67f43abba17a5cb18\nIt can also do interpolation in time btw.\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/18026#discussioncomment-837893",
                  "updatedAt": "2023-07-06T22:54:00Z",
                  "publishedAt": "2021-06-08T03:32:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hsheldon"
                          },
                          "bodyText": "Ok that's good news, so it does actually interpolate. Would be good to update the doco for SolutionAux to clarify.",
                          "url": "https://github.com/idaholab/moose/discussions/18026#discussioncomment-837974",
                          "updatedAt": "2023-07-06T22:54:26Z",
                          "publishedAt": "2021-06-08T04:15:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Installing in multi-user environment on HPC",
          "author": {
            "login": "lloydgoodman"
          },
          "bodyText": "I'm trying to install moose in a multiuser environment on a HPC.  I've plenty of experience with installing applications on the HPC but I'm new to moose. I am able to get it working no problem but am unable to see how to set it up how I wanted.  So its less a technical question about specific details of the install and more a broader question about whether the approach I'm trying makes sense given the way moose is used, and if not, what do other people do in this situation.\nI've worked though the \"Multi-User Cluster Instructions\" here https://mooseframework.inl.gov/getting_started/installation/cluster.html but they kind of peter out before they get to the point I'm having problems with\nSo broadly the idea is that we have installations of moose that are snapshots in time, so they are not updated with git, if we want an up to date install we create a new dated installation to sit alongside the existing.\nAnd each installation of moose should be useable by different people for different projects.\nWe're not using conda - a quick over view of the install is\ninstall gcc9.2 / mpich / cmake (shared between all the installations of moose)\ngit clone https://github.com/idaholab/moose.git into a shared location\n./scripts/update_and_rebuild_petsc.sh\n./scripts/update_and_rebuild_libmesh.sh\ncd test && make -j8\nNow originally when we decided on this approach it was thought that building a project against moose didn't alter the moose directory itself.  However I've realised now that the moose installation does get altered which calls into question this strategy.\nSo now I'm thinking each group / project will need to have its own moose directory?  Is that the way the way people typically work?  Is it possible to have moose installed in a way that people build different projects agains a single install of moose?  And if not what do people typically do instead in HPC / multi-user environment.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/18018",
          "updatedAt": "2022-07-03T12:04:11Z",
          "publishedAt": "2021-06-07T10:46:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Now originally when we decided on this approach it was thought that building a project against moose didn't alter the moose directory itself. However I've realised now that the moose installation does get altered which calls into question this strategy.\n\nWhat is getting altered? That should not be the case?",
                  "url": "https://github.com/idaholab/moose/discussions/18018#discussioncomment-835159",
                  "updatedAt": "2022-07-03T12:04:11Z",
                  "publishedAt": "2021-06-07T14:20:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Building a MOOSE based application requires that that user have write access to the moose repository. This is due to object files being created during that user's application build (export MOOSE_DIR=/shared/location/moose; cd my_app; make).\nThe make or 'build' process needs to create files/directories in the MOOSE_DIR location during build. This is why we recommend each individual user maintain their own copy of MOOSE.\nThere are some things you can share. PETSc, and libMesh. However, I would recommend against it, as that will put great strain on the system admin (if that is you); Adding new iterations of these two libraries and keeping them in sync with every iteration of MOOSE your end users are wanting to develop against. This creates many iterations in the long run. This was the reason we introduced the two scripts: update_and_rebuild_petsc.sh; update_and_rebuild_libmesh.sh. They are designed to be executed by the end user (easily).\nThe bottom line, as a developer that developer will need write access to the framework (MOOSE repository).\nIf you have end users wanting to instead execute a MOOSE based app, that is very much sharable. As a working example using Pika, this is what I mean:\nsu user_with_write_access\numask 022\ncd /some/shared/location\ngit clone https://github.com/idaholab/pika\ncd pika\ngit submodule update --init\ncd moose/scripts\n./scripts/update_and_rebuild_petsc.sh\n./scripts/update_and_rebuild_libmesh.sh\ncd ../../\nmake\nPika (a MOOSE based application) can now be run by anyone, so long as the shared location is readable/executable.\nsu johndoe\n/some/shared/location/pika/pika-opt --help\nI welcome input from the reset of the team (I was asked to answer this), so it stands to reason they may wish to avoid requiring write access in the moose repository when building other apps.",
                          "url": "https://github.com/idaholab/moose/discussions/18018#discussioncomment-835448",
                          "updatedAt": "2022-07-11T02:59:53Z",
                          "publishedAt": "2021-06-07T15:18:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Convergence with manufactured solutions for convection-reaction problems",
          "author": {
            "login": "rtaylo45"
          },
          "bodyText": "This is a long one and I am sorry. I am having trouble understanding the convergence rates for a test problem I am running. The problem is defined below\n\nThis problem is very straight forward and using the method of characteristics has an analytic solution. I am trying to use the mms system to show verification with more complex reaction-convection problems but started with something simple. I have initially chosen this problem because it has an analytic solution that i can test the FEM solution against to show convergence. For this same problem I am also using the mms system to show convergence in space and time.\nUsing the simple test function of u = t^3 * x I can get good temporal convergence rates for my mms runs and they agree with the temporal convergence rates for my analytical solution. Spatial convergence is what i am having trouble understanding. Using the analytical solution and a mms I conducted a spatial convergence study for three error metrics show below.\n\n\nFor convection I am using LevelSetAdvection and LevelSetAdvectionSUPG. Looking at the LevelSet module, they have a mms test case where they show second order convergence on the default Lagrange mesh with a similar PDE but with out the decay source term. I am guessing that because i am doing a more complex PDE it will not show a higher rate of convergence against either mms or the true analytical solution? Another question I have is why the convergence rates using mms and analytical don't match up more? Now they do both follow the same general trend however I am very new to using mms and just want to make sure that what I am seeing is ok. The analytical solution is more simple than my assumed mms, not sure how much that changes the convergence rates.  I don't think the LevelSet module us the AD method for the jacobian and not sure if i should be overwriting the class and add new derivatives to the jacobian calculation.\nIn summary I have two questions. Should this problem be converging at a fast rate? Why is the convergence rate for mms slightly worse than testing convergence with the analytical solution?\nI have adjusted the time step sizes to make sure that they are low enough for this problem. Attached are the two input files saved as txt files because of github.\nprogression_02-01_mms_spatial.txt\nprogression_02-01.txt",
          "url": "https://github.com/idaholab/moose/discussions/17936",
          "updatedAt": "2022-06-16T12:51:51Z",
          "publishedAt": "2021-05-26T17:08:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "@rtaylo45 Nice benchmark problems.\nIf you want to use SUPG stabilization, you need to add all SUPG terms, i.e., TimeDerivative, Forcing Function and Advection Function. In your current input file, you only have Advection SUPG term. See modules/level_set/test/tests/verification/1d_level_set_supg_mms/1d_level_set_supg_mms.i for example.\nFor this problem, you probably do not need SUPG stabilization. Remove it and give it a shot.",
                  "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-788134",
                  "updatedAt": "2022-06-16T12:53:33Z",
                  "publishedAt": "2021-05-26T19:52:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "If i were to still use the SUPG stabilization would i need to write a kernel for the decay term in the equation?",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-816448",
                          "updatedAt": "2022-06-16T12:53:33Z",
                          "publishedAt": "2021-06-02T15:16:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Looks like you can reuse LevelSetForcingFunctionSUPG for the decay term.",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-816564",
                          "updatedAt": "2022-06-16T12:53:33Z",
                          "publishedAt": "2021-06-02T15:35:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "So based on the LevelSetForcingFunctionSUPG source file it is based on the ADKernelGrad class. This is confusing to me because based on the formalization in the source documents it seems like they should be based on the ADKernelValue class because it shouldn't use the grad of the nonlinear variable u but the value of u. It seems like it might have something to do with the return value of ADRealVectorValue. I wondering if it might be useful to rewrite these LevelSetSUGP classes using the ADKernelStabilizedTempl base class which has an virtual function computeQpStabilization() method which has a return type of ADRealVectorValue.",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-816818",
                          "updatedAt": "2022-06-16T12:53:33Z",
                          "publishedAt": "2021-06-02T16:26:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "I think my previous comment is not correct. The LevelSetForcingFunctionSUPG only works for a source term. For your case, you probably need to implement a new SUPG kernel for the decay term.\nThe LevelSetForcingFunctionSUPG implements the weak form given as -tau * velocity * grad_test * f. If we use ADKernelGrad, then we only need to provide  (-tau * velocity * f)  to precomputeQpResidual.\nIt seems to be possible to write LevelSetSUPG using ADKernelStablized, although I do not see any obvious advantage there. ADKernelStablized was used for shallow water equation before. Maybe @aeslaughter would know this better than me.",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-817248",
                          "updatedAt": "2022-07-12T09:30:58Z",
                          "publishedAt": "2021-06-02T17:53:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rtaylo45"
                          },
                          "bodyText": "Ok I think I see what i was missing, the grad_test part was coming from the stabilization term.",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-817325",
                          "updatedAt": "2022-07-12T09:30:58Z",
                          "publishedAt": "2021-06-02T18:12:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "@jiangwen84 knows more than I do at this point, it has been many moons since I did that work and it would take me a bit to recall what was doing. However, I remember updating the level set module when I did the work. So, I am assuming that those are implemented with the desired base classes.",
                          "url": "https://github.com/idaholab/moose/discussions/17936#discussioncomment-835300",
                          "updatedAt": "2022-07-12T09:30:58Z",
                          "publishedAt": "2021-06-07T14:47:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "tutorial Darcy simulations not converging from step07d onwards.",
          "author": {
            "login": "garciapintado"
          },
          "bodyText": "Dear all,\nI am new to MOOSE and cloned it from the repository at around 20-05-2021. My interest is on porous flow simulations.\nGoing through the Darcy tutorial steps, the simulations have gone very well up to step07_adaptivity, including problems step7a, step7b & step7c. From there onwards things are not so good [using untouched files as they are cloned]:\nproblem step7d_adapt_blocks.i :: running from command line [on an iMAC] convergence starts nicely, but at time step 15 the convergence starts to struggle. This only get worse, and from step 29 onwards the convergence is terribly slow (~1 minute per time step) and eventually it gets completely stuck.\nI've tried to change some Executioner options (e.g. to \"solver_type = PJFNK\" ) and nothing that I've tried seems able to solve the problem. BTW, in the video tutorial, also Andrew simulation got stuck in this problem, and the he showed results from a stored run. So, I am wondering if there is some current issue going on.\nLater on, following problems also get stuck eventually. For example, running [now from peacock with two threads] problem step10_micro.i, the solver goes very well until step 572 (more than half way of the simulation set 1000 timesteps), where it suddenly crashes with the error:\nNonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 10\n Solve Did NOT Converge!\nAborting as solve did not converge\n\n*** ERROR ***\nThe following error occurred in the object \"TimeStepper\", of type \"ConstantDT\".\n\nSolve failed and timestep already at or below dtmin, cannot continue!\nI am sorry I can find my way around these issues. Please could you help? Has anyone been able to run this simulations lately as they are in the repository?\nBest wishes,\nJavier",
          "url": "https://github.com/idaholab/moose/discussions/17997",
          "updatedAt": "2022-08-02T05:51:40Z",
          "publishedAt": "2021-06-03T09:35:36Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "garciapintado"
                  },
                  "bodyText": "Dear All,\nMy fault. Changing the PETSc preconditioning DOES SOLVE the issue. For me, setting the options in the [Executioner] block:\n[Executioner]\n  ...\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver'\n  petsc_options_value = 'lu mumps'\n  ...\n[]\n\nmakes step7d problem in the tutorial converge nicely, and further running it with 4 threads make it run impressively fast in my iMAC.\nBest wishes,\nJavier",
                  "url": "https://github.com/idaholab/moose/discussions/17997#discussioncomment-821679",
                  "updatedAt": "2022-08-02T05:51:49Z",
                  "publishedAt": "2021-06-03T16:13:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Thanks for the update.",
                          "url": "https://github.com/idaholab/moose/discussions/17997#discussioncomment-835259",
                          "updatedAt": "2022-08-02T05:51:50Z",
                          "publishedAt": "2021-06-07T14:37:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "the number of time steps in postprocessing",
          "author": {
            "login": "snugook1108"
          },
          "bodyText": "Hi, did you know which type/variable setup for the number of time steps in postprocessing?",
          "url": "https://github.com/idaholab/moose/discussions/17996",
          "updatedAt": "2022-12-09T01:48:06Z",
          "publishedAt": "2021-06-03T06:36:32Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nNot sure I fully understand your question. Postprocessing is done by default at the end of every timestep in moose. This can be controlled using the execute_on parameter to most objects. You can make a custom execute_on option that does the postprocessing only when you wish. Also please note the Output objects are also controlled with this system.\nMaybe look at https://mooseframework.inl.gov/source/interfaces/SetupInterface.html which has more information on how that system works.\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17996#discussioncomment-822857",
                  "updatedAt": "2022-12-09T01:48:06Z",
                  "publishedAt": "2021-06-03T18:41:51Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Just to clarify the output side: the \"execute_on\" in an Output object (i.e, [Outputs] in your input file) dictates when an the Output object is executed, it has no control on when the information being computed occurs.\nhttps://mooseframework.inl.gov/syntax/Outputs/index.html",
                          "url": "https://github.com/idaholab/moose/discussions/17996#discussioncomment-835243",
                          "updatedAt": "2022-12-09T01:48:15Z",
                          "publishedAt": "2021-06-07T14:33:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Equal stresses across gas-liquid interface using INS",
          "author": {
            "login": "keniley1"
          },
          "bodyText": "Hello all,\nI'm trying to model an argon jet interacting with a liquid water surface. The setup is essentially a cylindrical tube with a hot tungsten needle at the center, with the tip of the needle reaching temperatures around 2000-2500 K. The tip of the needle is suspended over a reservoir of initially stationary liquid water at room temperature. The flow at the inlet is 8.8 cm/s and the inner radius of the inlet tube is 2 mm, so we believe laminar flow is a very safe assumption. I was able to set up a four region problem (gas phase, heated needle, gas flow tube surrounding the needle, and water) including the incompressible Navier-Stokes equations in the gas and liquid and heat transfer in all 4 regions (see the attached image). I'm using the RZ INS equations in this case.\n\nI'd like to see how the flow induced in the liquid water will affect the temperature distribution and, eventually, evaporation from the liquid.  Right now I'm simply setting the radial component of the velocities equal to each other at the interface and setting the z-component to zero, but I believe a better no slip boundary condition would be equal stress terms at the gas-liquid interface based on this paper: https://iopscience.iop.org/article/10.1088/0022-3727/48/42/424007/meta\nFollowing the Moose INS paper published a couple years ago (https://www.sciencedirect.com/science/article/pii/S0965997817310591) I think this would require an Interface Kernel with the (-p I + \\mu \\nabla \\vec{u}) terms set equal to each other on either side of the interface. I couldn't find anything like this in the INS tests.  I guess this can be split into three questions:\n\nAm I interpreting an \"equal stress\" interfacial condition correctly?\nDoes anything like this exist in Moose?\nIf not, how difficult would it be to implement?\n\nEDIT:\nI was able to run these simulations by setting the y component of the velocity equal to zero at the water interface and setting no BC on the x component of velocity. (Previously I was setting vel_x equal at the interface.) I applied no interfacial BC for the pressure or temperature. The idea was that setting no BC on an interface will enforce natural continuity conditions since the variables vel_x, vel_y, p, and T exist in both blocks. I think that's true with temperature, but I have no idea what setting no interfacial condition means for velocity or pressure.\nThe results seem much more reasonable than before and qualitatively the velocity profiles in the gas and liquid look like I would expect, but I'm still not confident that I am enforcing the correct boundary conditions here. What would a continuity of normal and shear stress interfacial condition look like in Moose?",
          "url": "https://github.com/idaholab/moose/discussions/17220",
          "updatedAt": "2022-07-07T12:33:42Z",
          "publishedAt": "2021-03-03T23:31:07Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSorry we missed this. Your edit made it pop back up on our radar.\nA few questions about what you are trying to do:\n\nare you going to track the two species (argon and H2O) in the gaseous domain?\nare you still trying to model the movement of the water-gas interface? Or are you satisfied with vy=0 ?\n\nI dont think anyone has done this in MOOSE yet, but the community is large so I may just be unaware.\nMaking an interface kernel that sets the terms to be equal would not be hard to do.\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-805225",
                  "updatedAt": "2022-07-07T12:35:13Z",
                  "publishedAt": "2021-05-31T04:49:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "keniley1"
                          },
                          "bodyText": "Thanks for the reply!\n\nare you going to track the two species (argon and H2O) in the gaseous domain?\n\nNo, I am only interested in the velocity and temperature profiles in both regions at the moment.\n\nare you still trying to model the movement of the water-gas interface? Or are you satisfied with vy=0 ?\n\nThe inlet speed is quite low and the flow is laminar so I am content with a static surface, vy = 0. I would definitely be interested to see how I could deal with surface deformation in the future though.\n-Shane",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-806824",
                          "updatedAt": "2022-07-07T12:35:23Z",
                          "publishedAt": "2021-05-31T13:06:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hi Shane\nOk single species should be easier. We are adding multi-species transport to our finite volume Navier Stokes implementation, but it's not quite ready yet. We won't be developing species tracking in FE afaik.\nSurface deformation is actually quite tricky. I don't think it's impossible, but we have added capabilities for fluid-structure interaction, not fluid-fluid interaction.\nI think an interface kernel is the right object to model an equal stress boundary, and it should not be too hard to do. Whether it's the correct thing to do, I think it makes physical sense to have continuity of the stresses.\nYou already did an integration by parts on this term and are looking at the surface contribution right?\nWhat family of variables are you using? Are you sure you want no-slip BCs (=continuous velocities)? It seems to me like the gas would flow faster than the fluid.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-818952",
                          "updatedAt": "2022-07-07T12:35:23Z",
                          "publishedAt": "2021-06-03T05:18:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keniley1"
                          },
                          "bodyText": "You already did an integration by parts on this term and are looking at the surface contribution right?\n\nPressure is integrated by parts, if that's what you mean. All I did was apply the INS kernels in RZ coordinates (INSMassRZ, INSMomentumLaplaceFormRZ, and INSTemperature). What I'm trying to do is set the appropriate boundary condition for two immiscible liquids. That should be continuity of normal and shear stresses across the interface but I have no idea how to actually create that condition. (I agree that it would be an interface kernel, though.)\n\nWhat family of variables are you using?\n\nI am using second order lagrange variables for the velocity and temperature and first order lagrange for pressure. integrate_p_by_parts is set to true.\n\nAre you sure you want no-slip BCs (=continuous velocities)? It seems to me like the gas would flow faster than the fluid.\n\nI am not applying no slip BCs on the interface anymore. Now only vel_y components are zero at the interface, but no condition is applied for vel_x. As you say, the gas should be moving quite a bit faster than the liquid. That was actually the point that led to this question!\nRight now I have variables p, vel_x, and vel_y, and T which all exist in both gas and liquid blocks, and I set no interfacial conditions for vel_x or pressure. With these conditions the results look qualitatively good -- the gas is moving much faster than the liquid and a convective cell forms in the water. Even so, I am just not convinced that continuity of normal and shear stress is being properly enforced if I set no interface condition.\nSo I guess my question now is: what would a stress continuity interface kernel look like?  I believe the stress component is\npI - \\mu \\grad u\nbut this forms a tensor, and I cannot figure out how that can be applied in an interface kernel.\nI've created a branch with a couple input files to demonstrate what I'm doing, if that would help. I'm running these in another Moose app (zapdos), but they only use Moose kernels so the input files should run anywhere with heat conduction and navier stokes modules. They are in zapdos/problems/cfd_tests in this branch:\nhttps://github.com/keniley1/zapdos/tree/cfd_interface_tests\nThe pin_water.i file is the geometry I presented above. The two_fluid_pipe.i file is a simpler steady problem consisting of two immiscible fluids driven by a pressure differential through a pipe.",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-821199",
                          "updatedAt": "2022-07-07T12:35:27Z",
                          "publishedAt": "2021-06-03T14:42:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think using this continuous variable family defined over both domains will impose continuity of velocity and pressure, which is not what you want.\nI think you should have two sets of variables defined on each domain, with pretty much the same kernels but different material properties.\nThe connection between the two domain could then be done with an interface kernel. The interface kernel would impose the stress continuity as a constraint, normal and tangeantial components, with a Lagrange multiplier (one for each maybe?).\nWhat do you think about this?\nI'm not very familiar with FE interface kernels. We'll have to tag more expert people later on",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-824350",
                          "updatedAt": "2022-07-11T12:27:04Z",
                          "publishedAt": "2021-06-04T05:48:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keniley1"
                          },
                          "bodyText": "I'm not sure how to apply Lagrange multipliers here or how it would apply to stress conservation, but I'm willing to learn and try it out!\nAt any rate, I decided to try to go forward with an InterfaceKernel. I just brute forced it so the code is hideous, but I basically just computed each component of the 2D stress tensor by hand and set the \"Element\" stress component equal to the \"Neighbor\" stress component (and vice-versa). This requires applying only two interface kernels, one for each velocity component. I really didn't think this would work because I cannot wrap my head around the idea of a tensor interface condition, but to my surprise, this gave me the correct analytical solution for the pipe flow problem I uploaded. I also needed to use MatchedValueBC to force the velocities to be equal at the interface. I believe that makes sense.\nI've attached plots of (a) the 2D x-velocity profile, and (b) 1D x-velocity profiles in the two regions. In (b), the black curve is the numerical solution and red dotted curve is the analytical one. I got the analytical solution from Bird's book Transport Phenomena (2nd edition, section 2.5, \"Flow of Two Adjacent Immiscible Fluids\").  The interface kernel is called \"StressContinuity\" and is in the branch I linked to previously.  I used an ADInterfaceKernel so I didn't have to bother with jacobians. The percent difference from the analytical solution is basically 0.\nParameters:\nPipe length - 1\nPipe width - 0.25\npressure difference - 10\nBlock 0 (bottom) -  \\mu = 3, \\rho = 2\nBlock 1 (top) - \\mu = 1, \\rho = 1\nEven more surprising: this is the exact same solution that I get when I keep the single continuous variable across both regions. This makes no sense to me because I totally agreed with you -- I didn't think using a continuous variable would apply the correct interfacial condition. Apparently it does. I have no idea how this works!",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-827165",
                          "updatedAt": "2022-07-11T12:27:04Z",
                          "publishedAt": "2021-06-04T18:59:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Well if you force variable continuity, and use the same kernels, and essentially have the same contributions to the residual from the interface kernels as you would from kernels (this part I am unsure, it feels like with variable continuity you may have done that), then it's re-assuring that you got the same solution with two variables defined on each part of the domain and with one variable defined on the whole domain.\nSo the benchmark has continuous velocities. Do you think this should apply to the gas-liquid case too?",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-832970",
                          "updatedAt": "2022-07-11T12:27:07Z",
                          "publishedAt": "2021-06-07T04:08:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "keniley1"
                          },
                          "bodyText": "I believe so, yes. It's certainly an approximation, but the flow in my problem is laminar, no surface deformation is observed in the experiment, and the gas is nonreactive (it's an argon environment over liquid water) so I think the immiscible fluid assumption still holds. The continuous velocities with equal stress tensors has also been used in a similar problems in the past (see this paper), so there's a precedent. I guess this question is answered!  Thanks for the advice.\nIf there is any interest in having a stress continuity interface kernel in Moose I would not mind generalizing the one I made to 3D and submitting a PR. That said, I'm not sure if it has any use since it appears to be equivalent to using a single velocity vector.",
                          "url": "https://github.com/idaholab/moose/discussions/17220#discussioncomment-835189",
                          "updatedAt": "2022-07-11T12:27:07Z",
                          "publishedAt": "2021-06-07T14:25:05Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}