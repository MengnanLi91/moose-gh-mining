{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wMi0wN1QwODozNTowNy0wNjowMM4AXfrp"
    },
    "edges": [
      {
        "node": {
          "title": "Error while updating MOOSE",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "My moose was working fine until I tried to update it today. Below is the error I get\npython-stack) [emmanuel324@tinkercliffs1 belson]$ cd ~/projects/moose\n(python-stack) [emmanuel324@tinkercliffs1 moose]$ \n(python-stack) [emmanuel324@tinkercliffs1 moose]$ git fetch origin\n(python-stack) [emmanuel324@tinkercliffs1 moose]$ \n(python-stack) [emmanuel324@tinkercliffs1 moose]$ git rebase origin/master\nCannot rebase: You have unstaged changes.\nPlease commit or stash them.\n(python-stack) [emmanuel324@tinkercliffs1 moose]$ cd ~/projects/belson\n(python-stack) [emmanuel324@tinkercliffs1 belson]$ make -j 6\nNot compiling MOOSE with NEML2 because NEML2_DIR is not a valid NEML2 checkout and/or libtorch is not enabled.\n***ERROR***\nWASP does not seem to be available.\nMake sure to either run scripts/update_and_rebuild_wasp.sh in your MOOSE directory,\nor set WASP_DIR to a valid WASP install\nmake: *** [wasp_submodule_status] Error 1\n(python-stack) [emmanuel324@tinkercliffs1 belson]$ ./run_tests -j 6\nBuilding and linking hit...\n/home/emmanuel324/projects/moose/framework/contrib/hit/parse.cc: In member function \u2018hit::Field::Kind hit::Field::kind()\u2019:\n/home/emmanuel324/projects/moose/framework/contrib/hit/parse.cc:684:34: error: \u2018class wasp::HITNodeView\u2019 has no member named \u2018token_type\u2019; did you mean \n\u2018set_type\u2019?\n  684 |     auto token_type = value_node.token_type();\n      |                                  ^~~~~~~~~~\n      |                                  set_type\nmake: *** [hit] Error 1\nTraceback (most recent call last):\n  File \"/home/emmanuel324/projects/moose/python/pyhit/__init__.py\", line 13, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/emmanuel324/projects/moose/python/pyhit/__init__.py\", line 18, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/emmanuel324/projects/belson/./run_tests\", line 11, in <module>\n    from TestHarness import TestHarness\n  File \"/home/emmanuel324/projects/moose/python/TestHarness/__init__.py\", line 15, in <module>\n    from .TestHarness import TestHarness\n  File \"/home/emmanuel324/projects/moose/python/TestHarness/TestHarness.py\", line 20, in <module>\n    from FactorySystem.Factory import Factory\n  File \"/home/emmanuel324/projects/moose/python/FactorySystem/__init__.py\", line 13, in <module>\n    from .Parser import Parser\n  File \"/home/emmanuel324/projects/moose/python/FactorySystem/Parser.py\", line 13, in <module>\n    import pyhit\n  File \"/home/emmanuel324/projects/moose/python/pyhit/__init__.py\", line 22, in <module>\n    import hit\nModuleNotFoundError: No module named 'hit'\n(python-stack) [emmanuel324@tinkercliffs1 belson]$",
          "url": "https://github.com/idaholab/moose/discussions/26778",
          "updatedAt": "2024-02-10T04:26:13Z",
          "publishedAt": "2024-02-09T18:08:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nA few things here:\n\ndid you update the moose packages on conda? (conda update moose-libmesh)\nyour rebase failed. Can you commit all your changes then try again?",
                  "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424356",
                  "updatedAt": "2024-02-10T00:21:55Z",
                  "publishedAt": "2024-02-10T00:21:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "This is what i used. And how do I commit my changes?\ncd ~/projects/moose\ngit fetch origin\ngit rebase origin/master",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424388",
                          "updatedAt": "2024-02-10T00:26:48Z",
                          "publishedAt": "2024-02-10T00:26:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "after git rebase origin/master you see it fail\ndo this:\ngit commit -am \"My changes\"",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424411",
                          "updatedAt": "2024-02-10T00:31:29Z",
                          "publishedAt": "2024-02-10T00:31:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Should I try updating the moose again.",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424473",
                          "updatedAt": "2024-02-10T00:37:04Z",
                          "publishedAt": "2024-02-10T00:37:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yeah once you have commited you can update libmesh first then rebase your branch of moose",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424678",
                          "updatedAt": "2024-02-10T00:59:39Z",
                          "publishedAt": "2024-02-10T00:59:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "the command i replace with \"My changes\", is it the directory containing the changes?",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424694",
                          "updatedAt": "2024-02-10T01:04:15Z",
                          "publishedAt": "2024-02-10T01:04:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "All the changes I made are in my own application\nThis is the result I am getting trying to commit\ngit: 'clang-format' is not a git command. See 'git --help'.\nYour code is not properly formatted.\nRun git clang-format to resolve the following issues:\n(python-stack) [emmanuel324@tinkercliffs1 step01_diffusion]$ git commit -am \"problems\"\ngit: 'clang-format' is not a git command. See 'git --help'.\nYour code is not properly formatted.\nRun git clang-format to resolve the following issues:\n(python-stack) [emmanuel324@tinkercliffs1 step01_diffusion]$",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424725",
                          "updatedAt": "2024-02-10T01:12:26Z",
                          "publishedAt": "2024-02-10T01:12:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Emmanuel-324"
                  },
                  "bodyText": "All the changes I made are in my own application\nThis is the result I am getting trying to commit\ngit: 'clang-format' is not a git command. See 'git --help'.\nYour code is not properly formatted.\nRun git clang-format to resolve the following issues:\n(python-stack) [emmanuel324@tinkercliffs1 step01_diffusion]$ git commit -am \"problems\"\ngit: 'clang-format' is not a git command. See 'git --help'.\nYour code is not properly formatted.\nRun git clang-format to resolve the following issues:\n(python-stack) [emmanuel324@tinkercliffs1 step01_diffusion]$",
                  "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424707",
                  "updatedAt": "2024-02-10T01:08:12Z",
                  "publishedAt": "2024-02-10T01:08:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This looks like a problem with your git hooks.\nMaybe you should activate the moose conda environment?",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8424980",
                          "updatedAt": "2024-02-10T02:48:59Z",
                          "publishedAt": "2024-02-10T02:48:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "How do I activate the moose conda environment?",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8425004",
                          "updatedAt": "2024-02-10T02:59:31Z",
                          "publishedAt": "2024-02-10T02:59:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "conda activate moose",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8425013",
                          "updatedAt": "2024-02-10T03:01:05Z",
                          "publishedAt": "2024-02-10T03:01:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "(python-stack) [emmanuel324@tinkercliffs1 ~]$ conda activate moose\nEnvironmentNameNotFound: Could not find conda environment: moose\nYou can list all discoverable environments with conda info --envs.",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8425215",
                          "updatedAt": "2024-02-10T04:11:59Z",
                          "publishedAt": "2024-02-10T04:11:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how did you install moose? which instructions did you follow?",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8425237",
                          "updatedAt": "2024-02-10T04:20:36Z",
                          "publishedAt": "2024-02-10T04:20:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "I actually followed instructions from someone from Moose because I was finding it difficult to get a current cmake to load my environment. I want to see if I can find the thread",
                          "url": "https://github.com/idaholab/moose/discussions/26778#discussioncomment-8425250",
                          "updatedAt": "2024-02-10T04:26:14Z",
                          "publishedAt": "2024-02-10T04:26:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "InterfaceKernel for ArrayVariable",
          "author": {
            "login": "schakrabortygithub"
          },
          "bodyText": "Hi,\nThis is a general question regarding mooseframework. Not a bug or an issue.\nThe problem that I am working on needs to develop an InterfaceKernel for ArrayVariable, because the model has many solution variables. Those variables can be grouped in few of the ArrayVariables.\nDuring implementation I observed that,\nIn most of the base classes (KernelBase.h, DGKernelBase.h, NodalBCBase.h ) resudual and jacobian related functions at QP (e.g., computeQpResidual, computeQpJacobian, computeQpOffDiagJacobian) are not declared in their corresponding base classes. Rather they are declared in the next level of derived classes (Kernel.h. ArrayKernel.h,    DGKernel.h, ArrayDGKernel.h  etc). This is good because those classes need to inherit common stuff(element, neighbor, QP etc) from their base class([kernel, Arraykernel]<= KernelBase, [DGKernel, ArrayDGKernel]<=DGKernelBase etc.). And computeQpResidual, computeQpJacobian, computeQpOffDiagJacobian can have different return types based on the variable type(real, array) they are operating on.\nOne exception is in the InterfaceKernelBase.h. Where computeQpJacobian, computeQpOffDiagJacobian are declared in the base class itself, with a return type 'Real'. I was wondering if there is any reason for doing that?\nBecause, when I write the class ArrayInterfaceKernel.h derived from  InterfaceKernelBase.h for ArrayVariable, return type mismatch for computeQpJacobian and computeQpOffDiagJacobian prohibits to inherit(and override) those two functions from that base class.\n\n  \n    \n      moose/framework/include/interfacekernels/InterfaceKernelBase.h\n    \n    \n        Lines 46 to 54\n      in\n      27c9045\n    \n  \n  \n    \n\n        \n          \n           protected: \n        \n\n        \n          \n             /// Compute jacobians at quadrature points \n        \n\n        \n          \n             virtual Real computeQpJacobian(Moose::DGJacobianType /*type*/) { return 0; } \n        \n\n        \n          \n            \n        \n\n        \n          \n             /// compute off-diagonal jacobian components at quadrature points \n        \n\n        \n          \n             virtual Real computeQpOffDiagJacobian(Moose::DGJacobianType /*type*/, unsigned int /*jvar*/) \n        \n\n        \n          \n             { \n        \n\n        \n          \n               return 0; \n        \n\n        \n          \n             } \n        \n    \n  \n\n\nBest\nSubhendu Chakraborty\nLos Alamos National Laboratory",
          "url": "https://github.com/idaholab/moose/discussions/26782",
          "updatedAt": "2024-02-10T17:18:14Z",
          "publishedAt": "2024-02-09T21:41:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "I did not check the code, but we probably did not think of array variables when developing InterfaceKernelBase. Thanks for working on this! I created an issue #26268 for this at the end of last year for your information.",
                  "url": "https://github.com/idaholab/moose/discussions/26782#discussioncomment-8423717",
                  "updatedAt": "2024-02-09T22:05:43Z",
                  "publishedAt": "2024-02-09T22:05:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This sounds right. Array variables were a later addition and interface kernels are also a rarer need",
                          "url": "https://github.com/idaholab/moose/discussions/26782#discussioncomment-8424002",
                          "updatedAt": "2024-02-09T22:52:23Z",
                          "publishedAt": "2024-02-09T22:52:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Applying volumetric constraint in phase field model for whole domain",
          "author": {
            "login": "vermaprk"
          },
          "bodyText": "Hello\nI am trying to model the phase-field variable eta which evolves due to electroplating at a constant current density. I have built the kernels for eta. However, I want an external constraint as follow:\nvolume integral(d eta/ dt)dV = Constant (which signifies the volume integral of change is order parameter w.r.t time is constant as total current is held constant )\nHow do I implement such constraint in moose?\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/26770",
          "updatedAt": "2024-02-09T21:58:37Z",
          "publishedAt": "2024-02-08T18:07:16Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nHave you looked the Constraints system?\nOr can you formulate the constraint as a Bound on a variable (with the Bounds system)? THat's also an option\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26770#discussioncomment-8413981",
                  "updatedAt": "2024-02-09T01:31:01Z",
                  "publishedAt": "2024-02-09T01:31:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "vermaprk"
                          },
                          "bodyText": "yes I looked into constraint systems. However, I found some discussion on this at\nhttps://groups.google.com/g/moose-users/c/7u7z51mZ3xE\nThe constraint I am trying to apply is not localized for an element but is the volumetric integral over whole simulation box. As per the discussion in the above link I came across ScalarLagrangeMultiplier\nBut again I am confused whether this constraint is per element or for the whole simulation domain.\nThanks\nMy PDE looks like this\n\nand constraint\n\nhere Ir is constant",
                          "url": "https://github.com/idaholab/moose/discussions/26770#discussioncomment-8415297",
                          "updatedAt": "2024-02-09T06:22:18Z",
                          "publishedAt": "2024-02-09T06:22:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Are c_s, F, S and xi variables? And Ir is a known constant?\nI think we can apply this constraint with a lagrange multiplier otherwise, using a scalar kernel.\nIt's been done with this scalar kernel for the average\nhttps://mooseframework.inl.gov/source/scalarkernels/AverageValueConstraint.html\nit could be adapted for any integral",
                          "url": "https://github.com/idaholab/moose/discussions/26770#discussioncomment-8423673",
                          "updatedAt": "2024-02-09T21:58:37Z",
                          "publishedAt": "2024-02-09T21:58:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "problem with Splitting mesh file",
          "author": {
            "login": "dewan1988"
          },
          "bodyText": "Dear MOOSE Experts\nI have splited my mesh file into 128 chunks and trying to run my input file but its showing the following error. How can I solve this problem?\n*** ERROR ***\nThe following error occurred in the object \"mixing_len_aux_ker\", of type \"WallDistanceMixingLengthAux\".\nWallDistanceMixingLengthAux only supports replicated meshes",
          "url": "https://github.com/idaholab/moose/discussions/26771",
          "updatedAt": "2024-02-08T21:33:42Z",
          "publishedAt": "2024-02-08T20:47:40Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo either stop using distributed meshes.\nOR\nYou ll need to use the WallDistanceMixingLengthAux in a simple simulation with no flow and no distributed mesh.\nSave the output in a checkpoint file preferrably or an exodus file\nIn your real distributed simulation, do not use the  WallDistanceMixingLengthAux, instead load the output field from the checkpoint/exodus file",
                  "url": "https://github.com/idaholab/moose/discussions/26771#discussioncomment-8412611",
                  "updatedAt": "2024-02-08T21:33:43Z",
                  "publishedAt": "2024-02-08T21:33:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Inviscid flow an free slip BC",
          "author": {
            "login": "Eilloo"
          },
          "bodyText": "Hello all,\nI am trying to run inviscid flow simulations, to later use as an initial condition for the viscous case in the FE INS module.\nHowever, I have not found a way to implement a free slip/no penetration boundary condition for my geometry - in this case, an aerofoil.\nI had thought that a Neumann BC of zero for all velocity components at the boundary would do the trick, and attempted to implement this using 'ADVectorFunctionBC'.\nHowever, the solution for this was the same as my initial condition (constant velocity for the whole domain), with the flow not moving around the obstacle. The outlet boundary condition was constant pressure = 0.\nI came across this thread when looking for a solution: #21418\nHowever, I am having trouble understanding the difference between the 'no flux' and 'no penetration' cases described here, as well where the mentioned approaches are implemented (ie - can this be done through a moose input file, or would custom BCs be required?)\nMy question then, is: Have I misunderstood the relationship between Neumann BCs and the no penetration condition, and what is the proper way to implement the free slip condition for inviscid flows in FE, rather than FV?\nThanks!",
          "url": "https://github.com/idaholab/moose/discussions/23113",
          "updatedAt": "2024-02-08T16:53:31Z",
          "publishedAt": "2023-01-09T15:29:01Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAre the flow variables defined inside the aerofoil as well?\nIn other words, is the aerofoil boundary inside the flow domain or well on the boundary?\nWhich variable set are you using (velocities or momentum?) ? For whether we have it or not\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4651663",
                  "updatedAt": "2023-01-11T02:07:31Z",
                  "publishedAt": "2023-01-11T02:07:30Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "The flow variables are not defined in the aerofoil, no. Does this mean that not specifying any boundary condition is the same as what I've manually implemented by setting a Neumann BC to zero?\nI'm not certain what you mean by 'variable set', so to be clear, I'm solving for velocity (as well as pressure), which is a Lagrange vector type, but the kernels are 'INSADMomentumAdvection', 'INSADMomentumViscous', and so on.\nThanks!",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4654015",
                          "updatedAt": "2023-01-11T08:56:16Z",
                          "publishedAt": "2023-01-11T08:56:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Whether having no BC is equivalent to a 'no-penetration' depends on the equation. It is often equivalent to 'no flux' to have a 0 contribution to the residual at the boundary for balance equations.\nFor INSAD, the no-BC or no-penetration boundary condition is the INSADMomentumNoBCBC.\nI asked about the variable set because the flow equations can be solved with P, v, T or with the conservative variable set rho, momentum, energy,",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4654937",
                          "updatedAt": "2023-01-11T10:25:00Z",
                          "publishedAt": "2023-01-11T10:25:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Okay... I think I'm having trouble understanding what the 'no BC' BC is doing to achieve no penetration.\nThe description to me sounds like it is reducing the error compared to a Neumann BC of zero when dealing with outflow boundaries, whereas I don't want any flow passing through my boundary at all.\nIn terms of the velocity variable, I believe I'm after u dot n = 0.\nWhere u is the velocity vector and n is normal to the boundary.\nI think I've convinced myself that this can't be achieved using Neumann BC's imposed on the velocity variable, since this would still allow constant flow through the boundary. Previously I was visualising mass flux, hence my misunderstanding.\nIs INSADMomentumNoBCBC still appropriate to impose the above condition?\n(As a side note if so, is there a convenient way to pass in components of my velocity variable, since the BC does not accept vectors? If not, I can tweak the code to do so.)\nHopefully what I want to achieve makes sense - thanks again for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4656989",
                          "updatedAt": "2023-01-11T14:31:13Z",
                          "publishedAt": "2023-01-11T14:31:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For INSAD, the no-BC or no-penetration boundary condition is the INSADMomentumNoBCBC.\n\nMaybe I m wrong here.\n@lindsayad what is the noBCBC",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4657031",
                          "updatedAt": "2023-01-11T14:35:33Z",
                          "publishedAt": "2023-01-11T14:35:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The convection term is not integrated by parts in the FE implementation (at least currently) and so any integrated boundary condition you set will have no impact on the convection \"flux\"",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4660166",
                          "updatedAt": "2023-01-11T19:45:09Z",
                          "publishedAt": "2023-01-11T19:45:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "We don't currently have a great slip boundary condition implementation for the incompressible FE formulation. However, I do think there will be one incoming with #22671\n@GiudGiud the NoBCBC just weakly adds the stresses on the boundaries, so it's basically setting: stress = stress ... so it's doing nothing. Practically speaking it imposes some condition on some higher derivative. Here's what's in our documentation:\n\nThe INSADMomentumNoBCBC class is used to implement the \"No Boundary Condition\" developed by Griffiths. According to Griffiths, the \"No Boundary Condition\" is equivalent to imposing the condition on the original analytical problem that the (p+1)st derivative of a finite element variable of order p should vanish at a point close to the outflow. This is claimed to reduce error relative to a natural boundary condition.",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4660213",
                          "updatedAt": "2023-01-11T19:51:36Z",
                          "publishedAt": "2023-01-11T19:51:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Isnt a 'natural' boundary condition a slip one though? I feel like the 'unnatural', eg the one that you have to do more work for, is setting velocity to 0 for no-slip ?",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4660664",
                          "updatedAt": "2023-01-11T20:41:30Z",
                          "publishedAt": "2023-01-11T20:41:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "The natural boundary condition will set stresses to 0 and that's it. You are used to FV where we convert the advection term into a face term. In the current FE implementation we don't integrate the advection term by parts and so it doesn't appear in surface terms, e.g. integrated boundary conditions",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4660781",
                          "updatedAt": "2023-01-11T20:55:46Z",
                          "publishedAt": "2023-01-11T20:55:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Thanks both for the clarification, and great to hear there's something on the way!",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-4665348",
                          "updatedAt": "2023-01-12T08:57:43Z",
                          "publishedAt": "2023-01-12T08:57:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "doquang"
                          },
                          "bodyText": "Hi, I would like to know if there is any further update on the free slip BC? Looks like MomentumFreeSlipBC was implemented for 2D only. Is there a similar method for 3D?",
                          "url": "https://github.com/idaholab/moose/discussions/23113#discussioncomment-7037170",
                          "updatedAt": "2023-09-18T16:39:56Z",
                          "publishedAt": "2023-09-18T16:39:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to get a node location and",
          "author": {
            "login": "krb-nantes"
          },
          "bodyText": "Hi all,\nI am developing a code on MOOSE and what I need is to calculate the radial average at each axial division of part of my mesh, so I was thinking of getting the values of a variable on the inner wall node and on the outer wall node at the same axial position and take the average of both.\nPrimarily, the code where I will calculate this average looks like this:\n  const Real inner_wall = 5\n  std::vector nodelist = _mesh.getNodeList(inner_wall);\n  for (int id : nodelist)\n  {\n      //get coordinate y of the node id\n\n      //get node on outer wall at the same y\n      out_node = Point(r_outer, y, 0.0) // not sure about this\n\n      //get variable value at outer node\n      out_var = _var[out_node]\n\n      //get ch at inner node\n      in_var = _var[id]\n\n      // radial average\n      const Real radial_avg = (in_var + out_var)/2\n  }\n\nSo, I was wondering if it is possible to get a node axial location, knowing its ID, and the reverse, getting a node ID by its location.",
          "url": "https://github.com/idaholab/moose/discussions/26741",
          "updatedAt": "2024-02-15T21:51:47Z",
          "publishedAt": "2024-02-05T17:49:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "KhaledNabilSharafeldin"
                  },
                  "bodyText": "Hi,\nI have done something similar way back in an action, I'll share what I can remember here:\nPoint\ngetNodePos(libMesh::dof_id_type & n){\n  auto nptr = *_mesh->nodePtr(n);\n  return Point(nptr(0), nptr(1), nptr(2));\n}\n\nI used this to get xyz position of a known ID node, mind you the ID here is zero-based if I remember correctly.\nSo, If I wanted to get a bunch of coordinates from IDs:\nstd::vector<Point>\nbuildCoordVector(std::vector<libMesh::dof_id_type>& nodeID){\n  std::vector<Point> out;\n  for (auto &&i : nodeID)\n    out.push_back(getNodePos(i));\n  return out;\n}\n\nYou can form a nodeset for the nodes of interest and that could be useful to what you're trying to do instead of looping over all the nodes in the domain to locate the nodes every time.",
                  "url": "https://github.com/idaholab/moose/discussions/26741#discussioncomment-8374979",
                  "updatedAt": "2024-02-05T20:27:40Z",
                  "publishedAt": "2024-02-05T20:27:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI believe this is already implemented.\nYou can use these two objects:\n\nparsedMaterial to turn the variable into a material property then\na RadialAverage to compute the average\nhttps://mooseframework.inl.gov/source/userobjects/RadialAverage.html\n\nOR you can use this mesh division:\n\nCylindricalGridDivision to number the mesh https://mooseframework.inl.gov/source/meshdivisions/CylindricalGridDivision.html\nand this vector postprocessor to get a reduction using this numbering\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/MeshDivisionFunctorReductionVectorPostprocessor.html",
                  "url": "https://github.com/idaholab/moose/discussions/26741#discussioncomment-8375817",
                  "updatedAt": "2024-02-05T22:09:00Z",
                  "publishedAt": "2024-02-05T22:08:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "krb-nantes"
                          },
                          "bodyText": "From those options, I think the first one may work better for me, however, when I tried to run the input with it I had the error:\nA 'RadialAverage' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.",
                          "url": "https://github.com/idaholab/moose/discussions/26741#discussioncomment-8376028",
                          "updatedAt": "2024-02-05T22:37:32Z",
                          "publishedAt": "2024-02-05T22:37:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think this object is only present in a single module. Probably thermal_hydraulics.\nmaybe try the second option",
                          "url": "https://github.com/idaholab/moose/discussions/26741#discussioncomment-8376043",
                          "updatedAt": "2024-02-05T22:39:30Z",
                          "publishedAt": "2024-02-05T22:39:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "krb-nantes"
                          },
                          "bodyText": "I just needed to update my MOOSE. Now, I can use the RadialAverage \ud83d\ude05\nHowever, now I have two questions about it:\n1- Does it calculate the same average for the whole block? (I need it for each axial position, in this case, it could be for each axial division of the mesh)\n2- How can I retrieve the calculated value on the source code of my model and, if possible, on the input? For this last one, I looked on postprocessors and vectorpostprocessors and did not find any.",
                          "url": "https://github.com/idaholab/moose/discussions/26741#discussioncomment-8402968",
                          "updatedAt": "2024-02-08T03:44:13Z",
                          "publishedAt": "2024-02-08T03:44:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Cannot run on parallel in a local HPC",
          "author": {
            "login": "saeedvdi"
          },
          "bodyText": "Hello!\nI have been using a moose based FEM package on moose without no problem; however, after i added a new auxiliary variable that calculate the plastic deformation, I get the following error whenever I am truing to run it on parallel. I was wondering if you could help me figure this out.\n\n(moose) s_vadiee@speed-32:/nfs/speed-scratch/s_vadiee/September/00-Dip45-base-case/ICs$ mpiexec -n 32 //speed-scratch/s_vadiee/opt/golem/golem-opt -i 05-THM-Plastic-Slip-3000m.i\nSetting Up.\n  Finished Setting Mesh                                                                  [  2.04 s] [  442 MB]\nStill Setting Up...\n  Initializing\n    Finished Initializing Equation Systems                                               [  8.86 s] [  666 MB]\n    Finished Initializing Displaced Equation System                                      [  8.20 s] [  787 MB]\n  Finished Initializing                                                                  [ 19.96 s] [  788 MB]\nFinished Setting Up                                                                      [ 60.79 s] [  789 MB]\nFramework Information:\nMOOSE Version:           git commit 0db956d593 on 2023-08-20\nLibMesh Version:         \nPETSc Version:           3.16.6\nSLEPc Version:           3.16.2\nCurrent Time:            Sun Oct  8 12:20:14 2023\nExecutable Timestamp:    Mon Aug 21 11:17:55 2023\n\nParallelism:\n  Num Processors:          32\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:       3\n  Nodes:                   \n    Total:                 119732\n    Local:                 4344\n    Min/Max/Avg:           3154/4344/3741\n  Elems:                   \n    Total:                 692523\n    Local:                 21768\n    Min/Max/Avg:           21231/22357/21641\n  Num Subdomains:          4\n  Num Partitions:          32\n  Partitioner:             metis\nonlinear System:\n  Num DOFs:                598660\n  Num Local DOFs:          21720\n  Variables:               { \"disp_x\" \"disp_y\" \"disp_z\" \"pore_pressure\" \"temperature\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                26639633\n  Num Local DOFs:          837932\n  Variables:               { \"stress_xx\" \"stress_yy\" \"stress_zz\" \"stress_xy\" \"stress_xz\" ... \"strain_yy\" \n                             \"strain_zz\" \"strain_xy\" \"strain_xz\" \"strain_yz\" } { \"vf_x\" \"vf_y\" \"vf_z\" \n                             \"porosity\" \"fluid_density\" \"fluid_viscosity\" \"permeability\" } { \"EP\" \"ES_xx\" \n                             \"ES_yy\" \"ES_zz\" \"plastic_strain_xx\" ... \"plastic_strain_xz\" \"plastic_strain_yz\" \n                             \"plastic_strain_eqv\" \"plastic_strain_rate_eqv\" \"yield\" } { \"normal_stress\" \n                             \"shear_stress\" \"slip_tendency\" } \n  Finite Element Types:    \"MONOMIAL\" \"MONOMIAL\" \"MONOMIAL\" \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \"CONSTANT\" \"CONSTANT\" \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  TimeIntegrator:          ImplicitEuler\n  Solver Mode:             NEWTON\n  MOOSE Preconditioner:    FSP\n\nCurrently Executing\n  Performing Initial Setup\n    Setting Up Materials\n      Finished Computing Initial Material Values                                         [  0.71 s] [  899 MB]\n    Finished Setting Up Materials                                                        [  0.71 s] [  899 MB]\n    Building SemiLocalElemMap....                                                        [ 31.18 s] [  938 MB]\n  Finished Performing Initial Setup                                                      [ 34.08 s] [  938 MB]\n\nTime Step 0, time = 0\nime Step 1, time = 1, dt = 1\n\n===================================================================================\n=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES\n=   PID 16449 RUNNING AT speed-32.encs.concordia.ca\n=   EXIT CODE: 11\n=   CLEANING UP REMAINING PROCESSES\n=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\n===================================================================================\nYOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)\nThis typically refers to a problem with your application.\nPlease see the FAQ page for debugging suggestions",
          "url": "https://github.com/idaholab/moose/discussions/25686",
          "updatedAt": "2024-02-07T20:55:28Z",
          "publishedAt": "2023-10-08T16:36:55Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is a genuine bug, signal 11 means we're reading out of bounds most likely\nCould you please share your input with us? A git repo works best for us.\nAlternatively if you want to look for it yourself, seg faults are easy to find using a debugger\nhttps://mooseframework.inl.gov/application_development/debugging.html\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224093",
                  "updatedAt": "2023-10-08T17:36:17Z",
                  "publishedAt": "2023-10-08T17:36:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "saeedvdi"
                          },
                          "bodyText": "Yes, here is the link to my input file\nhttps://github.com/saeedvdi/GeoSaslatoon_Conference.git",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224179",
                          "updatedAt": "2023-10-08T17:52:21Z",
                          "publishedAt": "2023-10-08T17:52:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "And this runs with Golem?",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224322",
                          "updatedAt": "2023-10-08T18:29:38Z",
                          "publishedAt": "2023-10-08T18:29:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "saeedvdi"
                          },
                          "bodyText": "Yes",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224323",
                          "updatedAt": "2023-10-08T18:30:26Z",
                          "publishedAt": "2023-10-08T18:30:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks like I need your mesh to run this input.\nIf you cant share your mesh do you mind making a dummy mesh with the same block / boundary names.\nUsing these generators for example\nhttps://mooseframework.inl.gov/source/meshgenerators/CartesianMeshGenerator.html\nhttps://mooseframework.inl.gov/source/meshgenerators/StitchedMeshGenerator.html\nhttps://mooseframework.inl.gov/source/meshgenerators/RenameBoundaryGenerator.html",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224357",
                          "updatedAt": "2023-10-08T18:37:41Z",
                          "publishedAt": "2023-10-08T18:37:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "saeedvdi"
                          },
                          "bodyText": "I have uploaded the mesh in the same git repository.\nThank you in advance for your assistance.",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224376",
                          "updatedAt": "2023-10-08T18:42:46Z",
                          "publishedAt": "2023-10-08T18:42:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks to be a ghosting issue, that s what I get compiling in devel mode\n\n    Computing Initial Residual\n      Computing Residual.libMesh terminating:\nNo index 1948079 in ghosted vector.\nVector contains [3297537,6592620)\nAnd empty ghost array.\n\nEDIT: still looking for the object causing this",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224503",
                          "updatedAt": "2023-10-08T19:21:52Z",
                          "publishedAt": "2023-10-08T19:13:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "seems this object and the two below are involved.\n  [normal_stress]\n    type = GolemFaultNormalStress\n    variable = normal_stress\n    boundary = '9'\n    check_boundary_restricted = false\n  []\n\nBoundary restricted auxkernels can be a little harder to get right. Do people usually use this with a boundary restriction?\nInternal to the mesh or external?\nIt looks internal in your mesh",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7224750",
                          "updatedAt": "2023-10-08T20:20:06Z",
                          "publishedAt": "2023-10-08T20:20:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It's kind of hacky but all you need is to add a layer of ghosting to avoid the error (I havent checked the results)\nTo do that, just use an object that lets you add that. For example,\n[AuxKernels]\n  [add_ghosting]\n    type = ProjectionAux\n    variable = dummy\n    v = yield\n    ghost_layers = 1\n    execute_on = 'NONE'\n    block = 1\n  []\n[]\n\n[AuxVariables]\n  [dummy]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\nIt would be great to engage with the Golem developers to discuss why they need ghosting on these 3 boundary-restricted auxkernels. Maybe it s simply that to compute the stress, one needs the neighbor values to form a derivative",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7229886",
                          "updatedAt": "2023-10-09T12:19:08Z",
                          "publishedAt": "2023-10-09T12:17:42Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ajacquey"
                          },
                          "bodyText": "Hi,\nFirst, these AuxKernels implemented in Golem are experimental. I was trying to find an easy way to output normal and shear stress to a surface (internal) based on the stress tensor in the surrounding 3D elements. I hadn't had the time to properly test these AuxKernels but I am glad someone tried to use them.\n@GiudGiud As I said above, I was trying to output the normal and shear stress to a fault (represented as a sideset and a lower dimensional material). The main requirement is to be able to compute the traction on the surface (see this line  in GolemFaultShearStress.C) as the product between the stress tensor and the unit normal vector to the surface.",
                          "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-7242373",
                          "updatedAt": "2023-10-10T15:10:34Z",
                          "publishedAt": "2023-10-10T15:10:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "Hi,\nAccording to the response of @GiudGiud meaning that you have problem in \"normal stress\" block.\nActually I am working on such problems (simulation) as well.  So I wrote auxkernels for computing stress on such condition (e.g. computing stress on fault in deep reservoir modeling). I will do \"pull request\" to add i them on MOOSE soon.",
                  "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-8246004",
                  "updatedAt": "2024-01-29T09:03:52Z",
                  "publishedAt": "2024-01-25T14:53:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "saeedvdi"
                  },
                  "bodyText": "@GiudGiud I was able to figure out the problem, and now I can run it in parallel. You can close the discussion. And thank you for your help",
                  "url": "https://github.com/idaholab/moose/discussions/25686#discussioncomment-8399410",
                  "updatedAt": "2024-02-07T19:49:29Z",
                  "publishedAt": "2024-02-07T19:49:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "gravity magnitude jumps around sidesets and lower dimensional block",
          "author": {
            "login": "Rahim-Habibi"
          },
          "bodyText": "Hi all,\nI am working on thermo-hydro-mechanical geothermal reservoir simulation, I want to model the response of a fault against water injection. To model the 2D fault i have to option 1) defining fault as a physical entity using Gmsh along with \"lower_dimensional_block\" and 2) defining fault as a lower dimensional block using MOOSE options (i.e.  SideSetsBetweenSubdomainsGenerator and LowerDBlockFromSidesetGenerator). So, the input file for both is the same only mesh block changes.\nthe model has 15-15-6 km dimension in x,y and z direction and the fault located at the center. Accoring to the manual of \"EquelValueConstraint\" LINK , I defined two sidessets on the boundaries of the subdomains at two sides of the fault as follows:\n[Mesh]\n  [./file]\n    type = FileMeshGenerator\n    file = tpv104-inbox-fault.msh\n  [../]\n  [./sidesetmid1]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = 'file'\n    primary_block = 'SDMidBack'\n    paired_block = 'SDMidFront'\n    new_boundary = 'primary1_interface'\n  [../]\n  [./sidesetmid2]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = 'sidesetmid1'\n    primary_block = 'SDMidFront'\n    paired_block = 'SDMidBack'\n    new_boundary = 'primary2_interface'\n  [../]\n  [interfacemid]\n    type = LowerDBlockFromSidesetGenerator\n    input = sidesetmid2\n    sidesets = 'primary2_interface'\n    new_block_id = '10000'\n    new_block_name = 'interfacemid'\n    []\n    []\n\nHere is the model (figure 1):\n\nWhen I am using the first technique (adding \"lower_dimensional_block\" phrase in .msh mesh file), everything is fine and the outputs make sense.\nHowever, I have to use second technique as I need to have \"EqualValueConstraint\" in my simulation meaning that I have to have sidesets and LDBlock in the mesh. So, I defined then as above. At this step, I only defined gravity in the model. But the stress distribution along depth seems wrong. in the following, more detials are given:\nAccording to Mechanics, I tried to set gravity and I applied it using two methods available in Porous Flow including : Gravity Kernel and Action. I drew a line crossing the center of the model from top to bottom to check gravity distribution over depth. But at the bottom of the fault I have got strange jump in gravity (figure below, figure 2) at two scenarios, kernel and action:\n\nAlso, as you can see, displacement seems strange as well, i.e. lower dimensional block OR sidesets behave like sink where the magnitude differs alot w.r.t. around.\nJust to make a comparisson, i plotted the distribution at a point far away from the lower dimensional block and sidesets. It is a bit shocking, since the jump disappears. Also, comparing this figure with the figure above (figure 2), it can be see that the gravity magnitude changes at the top alot. in this figure, the magnitude starts from about zero which makes sense BUT in the figure above it starts from positive and drops suddenly to negative magnitude.\n\nTo delve more into the issue, i clipped the model at the center where fault exsits to see the distribution. It is obvious that the magnitude along the fault changes alot (and does not make sense).\n\nI can not understand what is happening once lower dimensional block OR sidesets are working with 3D elements. How can i solve this issue?\nBTW, I got the almsot same result for the gravity distribution when I set hydrostatic stress state in the model, Sxx=Syy=Szz.\nThank you in advance",
          "url": "https://github.com/idaholab/moose/discussions/26670",
          "updatedAt": "2024-02-07T16:27:23Z",
          "publishedAt": "2024-01-29T16:36:35Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI wonder if the gravity kernel is not applied on all the elements it should. That could cause artificial stress.\n@1runer thoughts?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8315043",
                  "updatedAt": "2024-01-31T05:32:15Z",
                  "publishedAt": "2024-01-31T05:32:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "Hi,\n@GiudGiud  and @cpgr\nI thought, the issue comes from my mesh or input file etc, so I tried one of the tests from MOOSE which has lower dimensional block((modules/tensor_mechanics/test/tests/j_integral/j_integral_2d_block_restrict.i)), without any edit in input file I just plot the stress along a line, the following show stress-xx and stress-yy along a line:\n\n\nSo, as you can see the jump shows up on lower dimensional block in this example either stress-xx or stress-yy as well.\nwhy such jump happens?\nThanks in advance\nRahim",
                  "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8336932",
                  "updatedAt": "2024-02-01T16:25:44Z",
                  "publishedAt": "2024-02-01T16:25:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I wonder if it is just an output artefact that the stress auxvariables aren't projected to the lower dimensional block?",
                          "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8340543",
                          "updatedAt": "2024-02-01T23:53:32Z",
                          "publishedAt": "2024-02-01T23:53:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would expect a 0 in that case\n@roystgnr do you know what we do for lower D variable output",
                          "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8340571",
                          "updatedAt": "2024-02-01T23:58:43Z",
                          "publishedAt": "2024-02-01T23:58:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "In the example just above the spikes do go to zero, which is why I suspect an output artefact. I wonder if it is a bit different to the first example.",
                          "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8340590",
                          "updatedAt": "2024-02-02T00:01:52Z",
                          "publishedAt": "2024-02-02T00:01:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "I wrote some hacky code to allow users to optionally output fake lower-D elements on which to output SIDE_HIERARCHIC variables when using that FE type ... but we're not using fake visualization-only elements here, right?  We're creating actual, part-of-the-mesh-and-assembly lower-D elements.  AFAIK at the libMesh level we don't try to do any sort of projection from higher-D to lower-D elements when we output the latter, we simply output only those variables which are active on that subdomain.\nSo ... are stress-xx and stress-yy active variables on the lower-D elements?  Do we have something trying to postprocess them that's assuming it's only getting called on a higher-D element?",
                          "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8388894",
                          "updatedAt": "2024-02-06T22:58:00Z",
                          "publishedAt": "2024-02-06T22:57:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "I wonder if it is just an output artefact that the stress auxvariables aren't projected to the lower dimensional block?\n\nThanks @cpgr\nThe issue is not only related to stress projection, also as you can see the displacement behavior sounds inaccurate as well. Actually, the lower dimension at the center moves down more or less \"independently\" resuting in high displacement zone at the center.",
                  "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8396908",
                  "updatedAt": "2024-02-07T15:59:24Z",
                  "publishedAt": "2024-02-07T15:59:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "I wrote some hacky code to allow users to optionally output fake lower-D elements on which to output SIDE_HIERARCHIC variables when using that FE type ... but we're not using fake visualization-only elements here, right? We're creating actual, part-of-the-mesh-and-assembly lower-D elements. AFAIK at the libMesh level we don't try to do any sort of projection from higher-D to lower-D elements when we output the latter, we simply output only those variables which are active on that subdomain.\nSo ... are stress-xx and stress-yy active variables on the lower-D elements? Do we have something trying to postprocess them that's assuming it's only getting called on a higher-D element?\n\nDear @roystgnr\nyes, it is part-of-the-mesh-and-assembly-lower-D elements. you can see the mesh block at top of the issue.\nregarding the 2nd part of the question, I have checked the input file again, the stresses variable are active on LD. Also, no restriction is set for calling the stress either fo LD or HD. Actually at this step I am trying to initialise the gavity in the model.",
                  "url": "https://github.com/idaholab/moose/discussions/26670#discussioncomment-8397272",
                  "updatedAt": "2024-02-07T16:27:23Z",
                  "publishedAt": "2024-02-07T16:27:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Boundary-restricted variables?",
          "author": {
            "login": "stephen-dixon"
          },
          "bodyText": "Hi,\nI'm interested in modelling gas diffusion in metals and wanted to implement some new surface models which would use two coupled non-linear variables - one for the concentration of gas atoms in the bulk material and one for the surface coverage fraction of a monolayer of gas atoms adsorbed to the surface of the metal. The governing equations comprise 2 pdes and describe mass balance between adsorption/desorption between an external gas volume and the surface layer, and diffusion between the surface layer and the bulk concentration, and then onward diffusion downstream in the bulk only.\nI was wondering what the best way to implement this scenario in moose would be? since I can't see anything that can act as a boundary restricted variable and, ideally, I'd prefer not to use an additional layer of cells for all external surfaces of any mesh trying to implement this surface model; spatially, the thickness of this layer would be one atom thick compared to mm or m thickness of the bulk material. Is there another way to think about this or are the extra cells unavoidable?",
          "url": "https://github.com/idaholab/moose/discussions/26761",
          "updatedAt": "2024-02-07T16:00:55Z",
          "publishedAt": "2024-02-07T08:51:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThere are two ways to implement boundary restricted variables. The most straightforward is to create a lowerD block on the surface using this mesh generator:\nhttps://mooseframework.inl.gov/source/meshgenerators/LowerDBlockFromSidesetGenerator.html\nthen block-restrict a variable of a type that can support it (it will give you an error if not) to this block.\nthen you have to write kernels that make sense given the 2D support of the variable\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26761#discussioncomment-8396929",
                  "updatedAt": "2024-02-07T16:00:55Z",
                  "publishedAt": "2024-02-07T16:00:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Relaxation of jump value",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "All,\nThe value of my model jumps sharply at the interface and it requires a very small time step and  a very small mesh size to get a converged solution.  I am using a PenaltyInterfaceDiffusion type of an object at the interface.  I would like to ask if MOOSE has some apps to relax this jump: for example, gradually increase the jump value as a function of time? Please help. S. Thomas",
          "url": "https://github.com/idaholab/moose/discussions/26698",
          "updatedAt": "2024-02-07T14:35:07Z",
          "publishedAt": "2024-01-31T01:09:55Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI would make the parameter for the value of the jump controllable. Then you can use the Controls system to slowly increase the value through time.\nTo make a parameter controllable, you just have to make the parameter a Real and have\nparams.declareControllable(\"param_name\");\n\nin the validParams() of the object\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26698#discussioncomment-8314709",
                  "updatedAt": "2024-01-31T04:18:49Z",
                  "publishedAt": "2024-01-31T04:18:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Rahim-Habibi"
                  },
                  "bodyText": "Hi @styyokuda,\nis the jump like what i explained here #26670 ?\nI dont know your model enough, but in my case it is a 2D interface too.\nRahim",
                  "url": "https://github.com/idaholab/moose/discussions/26698#discussioncomment-8395989",
                  "updatedAt": "2024-02-07T14:35:08Z",
                  "publishedAt": "2024-02-07T14:35:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}