{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMS0xM1QxNToyMTowNC0wNjowMM4AWTum"
    },
    "edges": [
      {
        "node": {
          "title": "Installing HPC Version in a Singularity Container",
          "author": {
            "login": "marinsiebert"
          },
          "bodyText": "Hello everyone,\ni want to use the MOOSEFRAMEWORK on a HPC-Cluster which doesn't have the python development libraries installed and is not planning on doing so. I have currently a functioning version running with the conda environment, however in the installation guide it says that the HPC installation will perform better.\nThe HPC support refers me to using a singularity container, install the required packages there and use that to run the desired software.\nHowever, I am not able to run the tests in the container after sucessfully compiling, as following traceback is produced (seems to have to do with python multiprocessing):\n ./run_tests -j 6\nTraceback (most recent call last):\n  File \"./run_tests\", line 8, in <module>\n    TestHarness.buildAndRun(sys.argv, None, MOOSE_DIR)\n  File \"/root/projects/moose/python/TestHarness/TestHarness.py\", line 180, in buildAndRun\n    harness = TestHarness(argv, moose_dir, app_name=app_name, moose_python=moose_python)\n  File \"/root/projects/moose/python/TestHarness/TestHarness.py\", line 342, in __init__\n    self.initialize(argv, app_name)\n  File \"/root/projects/moose/python/TestHarness/TestHarness.py\", line 924, in initialize\n    self.scheduler = self.factory.create(scheduler_plugin, self, plugin_params)\n  File \"/root/projects/moose/python/FactorySystem/Factory.py\", line 28, in create\n    return self.objects[type](*args, **kwargs)\n  File \"/root/projects/moose/python/TestHarness/schedulers/RunParallel.py\", line 27, in __init__\n    Scheduler.__init__(self, harness, params)\n  File \"/root/projects/moose/python/TestHarness/schedulers/Scheduler.py\", line 74, in __init__\n    self.run_pool = ThreadPool(processes=self.available_slots)\n  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 925, in __init__\n    Pool.__init__(self, processes, initializer, initargs)\n  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 196, in __init__\n    self._change_notifier = self._ctx.SimpleQueue()\n  File \"/usr/lib/python3.8/multiprocessing/context.py\", line 113, in SimpleQueue\n    return SimpleQueue(ctx=self.get_context())\n  File \"/usr/lib/python3.8/multiprocessing/queues.py\", line 336, in __init__\n    self._rlock = ctx.Lock()\n  File \"/usr/lib/python3.8/multiprocessing/context.py\", line 68, in Lock\n    return Lock(ctx=self.get_context())\n  File \"/usr/lib/python3.8/multiprocessing/synchronize.py\", line 162, in __init__\n    SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)\n  File \"/usr/lib/python3.8/multiprocessing/synchronize.py\", line 57, in __init__\n    sl = self._semlock = _multiprocessing.SemLock(\nFileNotFoundError: [Errno 2] No such file or directory\n\nIs there a known quick and easy way around this or is this to singularity-specific to be solved here?",
          "url": "https://github.com/idaholab/moose/discussions/26067",
          "updatedAt": "2023-11-16T08:24:55Z",
          "publishedAt": "2023-11-15T09:53:36Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@milljm",
                  "url": "https://github.com/idaholab/moose/discussions/26067#discussioncomment-7579365",
                  "updatedAt": "2023-11-15T16:58:15Z",
                  "publishedAt": "2023-11-15T16:58:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I have never encountered this error before. Seems to originate from within Python's multiprocessing package. But I don't know why that would be the case. What flavor of Linux did you base this container off of?\nAlso, I think we can get a real clean picture of what went into this container if you can supply the results of the following comand:\napptainer inspect --deffile yourcontainer.sif\nPlease look through the results before posting, and comment out anything you think may be sensitive.",
                          "url": "https://github.com/idaholab/moose/discussions/26067#discussioncomment-7581573",
                          "updatedAt": "2023-11-15T21:52:02Z",
                          "publishedAt": "2023-11-15T21:52:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "edit: I am right now in the process of creating a new container and complete the whole process from scratch, will upload the results later on.\nthis just produces:\nbootstrap: localimage\nfrom: ubuntu-test/\nI created the container using\n$singularity build --sandbox ubuntu docker://ubuntu\n$sudo singularity shell --writable ubuntu\nI should mention i did this on two different machines using the ubuntu image above or the ubuntu20.04 image, respectively.\nI followed the installation for both HPC Clusters and for Offline (air-gapped), the traceback is the same.\nBelow is the command history for the installation of the required packages along the way. I now remembered, that there where some issues with the installation of gcc and mpich, which is why I used the standard packages from build-essential and apt - could this maybe a configuration problem?\n1  ls\n2  apt install wget\n3  apt-get install wget\n4  ls\n5  cd ..\n6  ls\n7  cd home\n8  ls\n9  pip install python3\n\n10  apt-get install python3\n11  apt update\n12  apt -upgrade\n13  apt upgrade\n14  apt-get install python3\n15  apt-get install curl\n16  curl -L -O http://mirrors.concertpass.com/gcc/releases/gcc-10.4.0/gcc-10.4.0.tar.gz\n17  tar -xf gcc-10.4.0.tar.gz -C .\n18  cd gcc-10.4.0\n19  ./contrib/download_prerequisites\n20  ls\n21  cd ..\n22  ls\n23  rm * gcc-10.4.0\n24  rm -rf gcc-10.4.0/\n25  git clone git://gcc.gnu.org/git/gcc.git gcc\n26  apt-get install git\n27  git clone git://gcc.gnu.org/git/gcc.git gcc\n28  cd gcc/\n29  ls\n30  ./contrib/download_prerequisites\n31  apt-get install bzip2\n32  ./contrib/download_prerequisites\n33  mkdir gcc-build\n34  cd gcc-build\n35  ../configure --prefix=/target/installation/path/gcc --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic\n36  apt-get install build-essential\n37  ../configure --prefix=/target/installation/path/gcc --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic\n38  make -j 6\n39  make install\n40  rm config.cache gcc/config.cache\n41  apt-get install g++\n42  apt get install gcc-c++\n43  apt-get install gcc-c++\n44  g++ --version\n45  gcc --vesrion\n46  gcc --version\n47  dpkg -l | grep gcc | awk '{print $2}'\n48  apt remove gccv\n49  apt remove gcc\n50  dpkg -l | grep gcc | awk '{print $2}'\n51  apt remove gcc-11\n52  dpkg -l | grep gcc | awk '{print $2}'\n53  apt autoremove\n54  dpkg -l | grep gcc | awk '{print $2}'\n55  apt autoremove\n56  apt autoremove gcc-12-base\n57  apt autoremove\n58  dpkg -l | grep gcc | awk '{print $2}'\n59  ls\n60  cd ..\n61  ls\n62  cd ..\n63  ls\n64  ls\n65  cd ..\n66  ls\n67  ls\n68  cd home\n69  cd gcc\n70  ls\n71  gcc --version\n72  cd gcc-build/\n73  ls\n74  rm -rf\n75  ls\n76  ls\n77  rf -rf *\n78  rm -rf *\n79  ls\n80  ../configure --prefix=/target/installation/path/gcc --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic\n81  apt install build-essential\n82  gcc --version\n83  dpkg -l | grep gcc | awk '{print $2}'\n84  ../configure --prefix=/target/installation/path/gcc --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic\n85  make -j 6\n86  make install\n87  ls\n88  apt remove gcc\n89  apt remove gcc-11\n90  apt-remove gcc-12\n91  apt remove gcc-12\n92  dpkg -l | grep gcc | awk '{print $2}'\n93  gcc --version\n94  sudo apt install build-essential\n95  apt install build-essential\n96  gcc --version\n97  which mpicc mpicxx mpif90\n98  ls\n99  cd ..\n100  ls\n101  cd ..\n102  ls\n103  cd ..\n104  ls\n105  cd home\n106  rm -rf gcc\n107  gcc -version\n108  gcc --version\n109  curl -L -O http://www.mpich.org/static/downloads/4.0.2/mpich-4.0.2.tar.gz\n110  tar -xf mpich-4.0.2.tar.gz -C .\n111  mkdir mpich-4.0.2/gcc-build\n112  cd mpich-4.0.2/gcc-build\n113  ../configure --prefix=/target/installation/path/mpich-4.0.2 --enable-shared --enable-sharedlibs=gcc --enable-fast=O2 --enable-debuginfo --enable-totalview --enable-two-level-namespace CC=gcc CXX=g++ FC=gfortran F77=gfortran F90='' CFLAGS='' CXXFLAGS='' FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch' F90FLAGS='' F77FLAGS=''\n114  ls\n115  cd ..\n116  ls\n117  cd ..\n118  ls\n119  cd ..\n120  ls\n121  cd home/\n122  ls\n123  rm mpich-4.0.2*\n124  rm -rf mpich-4.0.2/\n125  wget https://www.mpich.org/static/downloads/4.1.2/mpich-4.1.2.tar.gz\n126  apt-get install wget\n127  wget https://www.mpich.org/static/downloads/4.1.2/mpich-4.1.2.tar.gz\n128  tar xfz mpich.tar.gz\n129  tar xfz mpich-4.1.2.tar.gz\n130  ls\n131  cd mpich-4.1.2\n132  fortran --version\n133  which gfortran\n134  ls\n135  cd ..\n136  ls\n137  rm -rf *\n138  ls\n139  cd ..\n140  ls\n141  which gcc\n142  cd /usr/bin/gcc\n143  ls\n144  cd home\n145  wget https://www.mpich.org/static/downloads/4.1.2/mpich-4.1.2.tar.gz\n146  tar xfz mpich-4.1.2.tar.gz\n147  cd mpich-4.1.2\n148  l\n149  ls\n150  ls\n151  mkdir gcc-build\n152  cd gcc-build/\n153  ../configure --prefix=/target/installation/path/mpich-4.1.2 --enable-shared --enable-sharedlibs=gcc --enable-fast=O2 --enable-debuginfo --enable-totalview --enable-two-level-namespace CC=gcc CXX=g++ FC=gfortran F77=gfortran F90='' CFLAGS='' CXXFLAGS='' FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch' F90FLAGS='' F77FLAGS=''\n154  which gfortran\n155  gfortran --version\n156  fortran --verseion\n157  fortran --version\n158  apt-get install gfortran\n159  ../configure --prefix=/target/installation/path/mpich-4.1.2 --enable-shared --enable-sharedlibs=gcc --enable-fast=O2 --enable-debuginfo --enable-totalview --enable-two-level-namespace CC=gcc CXX=g++ FC=gfortran F77=gfortran F90='' CFLAGS='' CXXFLAGS='' FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch' F90FLAGS='' F77FLAGS=''\n160  apt-get install python3\n161  python-dev\n162  apt-get install python-dev\n163  apt-get install python-dev-is-python3\n164  apt -get install cmake\n165  apt-get install cmake\n166  ../configure --prefix=/target/installation/path/mpich-4.1.2 --enable-shared --enable-sharedlibs=gcc --enable-fast=O2 --enable-debuginfo --enable-totalview --enable-two-level-namespace CC=gcc CXX=g++ FC=gfortran F77=gfortran F90='' CFLAGS='' CXXFLAGS='' FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch' F90FLAGS='' F77FLAGS=''\n167  make -j 6\n168  make install\n169  echo $CC $CXX $FC $F90 $F77\n170  export CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77\n171  vi ~/.bash_profile\n172  apt-get install vim\n173  vi ~/.bash_profile\n174  cd ..\n175  ls\n176  cd ..\n177  cd ..\n178  cd ..\n179  ls\n180  cd etc/\n181  ls\n182  cd profile\n183  vi profile\n184  echo $CC $CXX $FC $F90 $F77\n185  cd ~\n186  ls\n187  ls\n188  ls\n189  cd home\n190  ls\n191  cd ..\n192  ls\n193  cd home\n194  ls\n195  rm mpich-4.1.2.tar.gz\n196  mkdir -p ~/projects\n197  cd ~/projects\n198  git clone https://github.com/idaholab/moose.git\n199  cd moose\n200  git checkout master\n201  cd ~/projects/moose/scripts\n202  export MOOSE_JOBS=6 METHODS=opt\n203  ./update_and_rebuild_petsc.sh\n204  ./update_and_rebuild_libmesh.sh\n205  ./update_and_rebuild_wasp.sh\n206  apt-get install dpkg\n207  apt-get install reinstall build-essential\n208  apt-get install --reinstall build-essential\n209  apt-get install -reinstall gcc\n210  apt-get install --reinstall gcc\n211  dpkg-reconfigure build-essential\n212  dpkg-reconfigure gcc\n213  apt install gobjc++\n214  ./update_and_rebuild_petsc.sh --with-mpi-dir=/home/mpich-4.1.2/\n215  which mpich\n216  which mpi\n217  mpi\n218  mpich\n219  mpicc\n220  which mpicc\n221  mpicc --version\n222  ls\n223  ls\n224  cd ..\n225  ls\n226  cd ..\n227  cd ..\n228  ls\n229  cd ..\n230  ls\n231  cd ~\n232  ls\n233  cd home\n234  ls\n235  cd ~\n236  cd ..\n237  cd home\n238  ls\n239  pwd\n240  ls\n241  cd ..\n242  ls\n243  cd ~\n244  ls\n245  pwd\n246  ls\n247  cd ~/home\n248  cd ..\n249  ls\n250  cd ..\n251  ls\n252  cd home\n253  ls\n254  rm -rf *\n255  cd ~\n256  which mpi\n257  wget https://www.mpich.org/static/downloads/4.1.2/mpich-4.1.2.tar.gz\n258  ls\n259  ls\n260  tar mpich-4.1.2.tar.gz\n261  tar -zxvf mpich-4.1.2.tar.gz\n262  ls\n263  rm mpich-4.1.2.tar.gz\n264  cd mpich-4.1.2/\n265  mkdir gcc-build\n266  ls\n267  cd gcc\n268  cd gcc-build/\n269  ../configure --prefix=/target/installation/path/mpich-4.1.2 --enable-shared --enable-sharedlibs=gcc --enable-fast=O2 --enable-debuginfo --enable-totalview --enable-two-level-namespace CC=gcc CXX=g++ FC=gfortran F77=gfortran F90='' CFLAGS='' CXXFLAGS='' FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch' F90FLAGS='' F77FLAGS=''\n270  make -j 6\n271  make install\n272  ls\n273  cd ..\n274  ls\n275  cd ..\n276  ls\n277  echo $CC $CXX $FC $F90 $F77\n278  ls\n279  cd projects/moose/\n280  ls\n281  cd /projects/moose/scripts\n282  export MOOSE_JOBS=6 METHODS=opt\n283  ./update_and_rebuild_petsc.sh\n284  ./update_and_rebuild_libmesh.sh\n285  ./update_and_rebuild_wasp.sh\n286  ~\n287  ls\n288  ./update_and_rebuild_petsc.sh --with-mpi-dir=/mpich-4.1.2/\n289  cd ~/mpich-4.1.2/\n290  ls\n291  which mpi\n292  find /usr -name \"mpich\"\n293  rm -rf mpich-doxygen.in\n294  ls\n295  cd ..\n296  rm -rf mpich-4.1.2/\n297  apt install openmpi\n298  apt-get install openmpi\n299  apt-get install mpich\n300  ./update_and_rebuild_petsc.sh\n301  cd projects/moose/\n302  ./update_and_rebuild_petsc.sh\n303  ls\n304  pwd\n305  cd scripts/\n306  ./update_and_rebuild_petsc.sh\n307  apt-get install ptscotch\n308  apt-get install flex\n309  ./update_and_rebuild_petsc.sh\n310  ./update_and_rebuild_petsc.sh --download-bison\n311  ./update_and_rebuild_libmesh.sh\n312  ./update_and_rebuild_wasp.sh\n313  cd ~/projects/moose/test\n314  make -j 6\n315  apt-get install yaml\n316  pip install yaml\n317  apt-get install python3-pip\n318  pip install yaml\n319  pip install PyYAML\n320  apt-get install packaging\n321  pip install packaging\n322  make -j 6\n323  cd ~/projects/moose/test\n324  ./run_tests -j 6\n325  ls\n326  cd tests\n327  ls\n328  cd ..\n329  ls\n330  pwd\n331  ./run_tests -j 6\n332  ./run_tests -j46\n333  ./run_tests -j 4\n334  ./run_tests -j\n335  ./run_tests -j 1\n336  add-apt-repository ppa:deadsnakes/ppa\n337  pip install moose-tools\n338  apt-get install moose-tools\n339  ./run_tests -j 1\n340  l\u00f6s\n341  ls\n342  logout\n343  exit\n344  ls\n345  exit\n346  ./run_tests -j 1\n347  ls\n348  cd projects/moose/test/\n349  ./run_tests -j 1\n350  apptainer inspect --deffile yourcontainer.sif\n351  exit\n352  apptainer inspect --deffile yourcontainer.sif\n353  exit\n354  exit\n355  cat ~./bash_history\n356  history\nSingularity>",
                          "url": "https://github.com/idaholab/moose/discussions/26067#discussioncomment-7584870",
                          "updatedAt": "2023-11-16T07:41:06Z",
                          "publishedAt": "2023-11-16T07:16:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "marinsiebert"
                  },
                  "bodyText": "terminal_output.txt\nThis is the terminal output during the installation process until the first error regarding some issue with fortran-compiler. This was the point where I switched to using the build-essential gcc version as I was unable to fix the error.",
                  "url": "https://github.com/idaholab/moose/discussions/26067#discussioncomment-7585525",
                  "updatedAt": "2023-11-16T08:24:56Z",
                  "publishedAt": "2023-11-16T08:24:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "VSCode Setup for MOOSE",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI'm currently setting up VSCode to work with MOOSE. I followed the instructions on the website and the things listed are working fine as far as I can tell.\nHowever afterwards I received some include errors and was missing auto-completion so I searched the forum and found #25775. I used that as a reference and copied the c_cpp_properties.json. Then VSCode told me wasphit/HITInterpreter.h was missing as a dependency of several of my header files. I therefore added wasp to includePath. Currently my c_cpp_properties.json looks like this:\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux\",\n            \"includePath\": [\n                \"${workspaceFolder}\",\n                \"${workspaceFolder}/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                \"${workspaceFolder}/../moose/framework/contrib/wasp\",\n                \"${HOME}/mambaforge3/envs/moose/include\",\n                \"${HOME}/mambaforge3/envs/moose/libmesh/include\",\n                \"${workspaceFolder}/../moose/framework/contrib/json/include\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"${HOME}/mambaforge3/envs/moose/bin/mpicxx\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"clang-x64\",\n            \"compileCommands\": \"${workspaceFolder}/compile_commands.json\",\n            \"browse\": {\n                \"path\": [\n                    \"${workspaceFolder}\",\n                    \"${workspaceFolder}/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/modules/module_loader/build/header_symlinks\",\n                    \"${workspaceFolder}/../moose/framework/contrib/boost/include\",\n                    \"${workspaceFolder}/../moose/framework/contrib/hit\",\n                    \"${HOME}/mambaforge3/envs/moose/include\",\n                    \"${HOME}/mambaforge3/envs/moose/libmesh/include\"\n                ]\n            }\n        }\n    ],\n    \"version\": 4\n}\n\nThe only warning left right now is a missing compile_commands.json referenced in the code above. However I haven't found a guide on this topic.\nSo my two questions are:\n\nWhere do I get compile_commands.json from?\nIs my VSCode setup complete once I aquire said file?",
          "url": "https://github.com/idaholab/moose/discussions/26040",
          "updatedAt": "2023-11-16T07:57:12Z",
          "publishedAt": "2023-11-13T15:26:24Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "@dschwen @loganharbour",
                  "url": "https://github.com/idaholab/moose/discussions/26040#discussioncomment-7557959",
                  "updatedAt": "2023-11-13T19:39:18Z",
                  "publishedAt": "2023-11-13T19:39:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ajacquey"
                  },
                  "bodyText": "To generate the file compile_commands.json, you can simply use (in your app directory):\nmake compile_commands.json",
                  "url": "https://github.com/idaholab/moose/discussions/26040#discussioncomment-7569285",
                  "updatedAt": "2023-11-14T19:48:14Z",
                  "publishedAt": "2023-11-14T19:48:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Thanks, everything seems to work fine now.",
                          "url": "https://github.com/idaholab/moose/discussions/26040#discussioncomment-7585186",
                          "updatedAt": "2023-11-16T07:57:12Z",
                          "publishedAt": "2023-11-16T07:57:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to apply displacement on a deformed configration",
          "author": {
            "login": "eric199405"
          },
          "bodyText": "Hi, everyone. From time=0 to time=1s, the boundary A has been deformed to u1 (it's a field). When time>1s, I want to add u2 (constant) on deformed boundary A with u1 field.\nIf I only add DirichletBC of u2 when time>1s, the previous u1 field will disappear.",
          "url": "https://github.com/idaholab/moose/discussions/26071",
          "updatedAt": "2023-11-15T18:17:11Z",
          "publishedAt": "2023-11-15T16:44:07Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "It's not entirely clear to me what you want but you can use the Controls system to turn different objects on and off",
                  "url": "https://github.com/idaholab/moose/discussions/26071#discussioncomment-7579422",
                  "updatedAt": "2023-11-15T17:03:39Z",
                  "publishedAt": "2023-11-15T17:03:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You could rewrite the DirichletBC to apply u2 + u1 instead of just u2.\nJust copy the value of u1 into an auxiliary variable using a CopyAux until t=1s (stop copying then)",
                          "url": "https://github.com/idaholab/moose/discussions/26071#discussioncomment-7580079",
                          "updatedAt": "2023-11-15T18:17:12Z",
                          "publishedAt": "2023-11-15T18:17:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Data Types",
          "author": {
            "login": "jsevic"
          },
          "bodyText": "Hello,\nIf I couple a variable _grad_V as coupledGradient in a kernel, which is a vector data type I think, and compute the product _grad_V * _grad_V, does this retain its vector identity or does it become a real value scalar?\nThank you.",
          "url": "https://github.com/idaholab/moose/discussions/26056",
          "updatedAt": "2023-11-15T01:21:32Z",
          "publishedAt": "2023-11-14T15:28:21Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "it becomes a scalar",
                  "url": "https://github.com/idaholab/moose/discussions/26056#discussioncomment-7567773",
                  "updatedAt": "2023-11-14T17:04:12Z",
                  "publishedAt": "2023-11-14T17:04:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jsevic"
                          },
                          "bodyText": "Great it works thx!",
                          "url": "https://github.com/idaholab/moose/discussions/26056#discussioncomment-7571419",
                          "updatedAt": "2023-11-15T01:21:31Z",
                          "publishedAt": "2023-11-15T01:21:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Two solvers in the same input file",
          "author": {
            "login": "steam-simulator"
          },
          "bodyText": "Hello,\nIs it possible to use two different solvers in the same input file? For example, I want to use PJFNK for tensor mechanics and Newton for Porousflow in the same input file . Is there any example in this regard? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/26066",
          "updatedAt": "2023-11-15T04:03:14Z",
          "publishedAt": "2023-11-15T00:15:47Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "grmnptr"
                  },
                  "bodyText": "As far as I know we don't have that capability right now. We just started supporting segregared nonlinear systems but the executioner support is not there yet. You can split the two systems using multiapps and then define the different solvers in each app.",
                  "url": "https://github.com/idaholab/moose/discussions/26066#discussioncomment-7571239",
                  "updatedAt": "2023-11-15T01:20:44Z",
                  "publishedAt": "2023-11-15T00:49:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Problem which undefined reference to `powf@GLIBC_2.27'  when compile MOOSE with libtorch",
          "author": {
            "login": "nuomi68"
          },
          "bodyText": "holle, MOOSEer!\nI want to try using libtorch in MOOSE, But it can't make it work.The possible cause is that the version of libc on the system is too low, so I checked that libtorch_cpu.so relies on a version of libc that is higher than required.I don't know how to deal with it now, hope someone can help me a little.\nLinking Executable /home/lwz/projects/dog/dog-opt...\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `powf@GLIBC_2.27'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `expf@GLIBC_2.27'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `logf@GLIBC_2.27'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `log2f@GLIBC_2.27'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `lgammaf@GLIBC_2.23'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `exp2f@GLIBC_2.27'\n/home/lwz/.conda/envs/moose2/bin/../lib/gcc/x86_64-conda-linux-gnu/10.4.0/../../../../x86_64-conda-linux-gnu/bin/ld: /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so: undefined reference to `lgamma@GLIBC_2.23'\ncollect2: error: ld returned 1 exit status\n\nmoose2) [lwz@ml64 dog]$ ldd /home/lwz/projects/moose/framework/contrib/libtorch/lib/libtorch_cpu.so\n        linux-vdso.so.1 (0x00007ffdea165000)\n        libc10.so => /home/lwz/projects/moose/framework/contrib/libtorch/lib/libc10.so (0x00007ff72eab2000)\n        librt.so.1 => /lib64/librt.so.1 (0x00007ff71896e000)\n        libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ff718758000)\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007ff718554000)\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007ff718335000)\n        libm.so.6 => /lib64/libm.so.6 (0x00007ff717fb7000)\n        libgomp-52f2fd74.so.1 => /home/lwz/projects/moose/framework/contrib/libtorch/lib/libgomp-52f2fd74.so.1 (0x00007ff717d84000)\n        libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007ff717b70000)\n        libc.so.6 => /usr/lib/libc.so.6 (0x00007ff7177b6000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007ff72e951000)\n\n(moose2) [lwz@ml64 dog]$ /usr/lib/libc.so.6 -version\nGNU C Library (GNU libc) stable release version 2.28.\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\nCompiled by GNU CC version 10.2.0.\nlibc ABIs: UNIQUE IFUNC ABSOLUTE\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/libc/bugs.html>.",
          "url": "https://github.com/idaholab/moose/discussions/26055",
          "updatedAt": "2023-11-14T18:29:50Z",
          "publishedAt": "2023-11-14T14:45:45Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "grmnptr"
                  },
                  "bodyText": "You cannot use MOOSE on linux machines with our conda environment due to the conda compiler stack being built using an old GLIBC, we will work on this this fiscal year.",
                  "url": "https://github.com/idaholab/moose/discussions/26055#discussioncomment-7566489",
                  "updatedAt": "2023-11-14T14:56:55Z",
                  "publishedAt": "2023-11-14T14:53:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "grmnptr"
                          },
                          "bodyText": "So the solution is: if you have a recent Linux-based operating system, just use the system compiler and compile petsc and libmesh yourself, then MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/26055#discussioncomment-7566504",
                          "updatedAt": "2023-11-14T14:55:47Z",
                          "publishedAt": "2023-11-14T14:55:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "grmnptr"
                          },
                          "bodyText": "If you are using INL HPC, we can give you containers as well.",
                          "url": "https://github.com/idaholab/moose/discussions/26055#discussioncomment-7566514",
                          "updatedAt": "2023-11-14T14:56:23Z",
                          "publishedAt": "2023-11-14T14:56:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thank you, I don't use INL HPC, I will try to compile petsc and libmesh , then MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/26055#discussioncomment-7566569",
                          "updatedAt": "2023-11-14T15:02:12Z",
                          "publishedAt": "2023-11-14T15:02:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Somehow I wasn't aware of this... Thanks for posting! I am not sure if Conda even has newer compiler versions available. But I will certainly poke around.",
                          "url": "https://github.com/idaholab/moose/discussions/26055#discussioncomment-7568605",
                          "updatedAt": "2023-11-14T18:29:53Z",
                          "publishedAt": "2023-11-14T18:29:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Implementing Custom Kernels (Mixed Formulation) with Heat Conduction as Example",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I wanted to know the proper syntax for implementing this. I'm not getting converging results for this simple problem, and so I wanted to be sure my syntax was/is correct. Starting with the equations and their corresponding finite element discretizations:\nDiffusion equation with variation taken wrt to T:\n\nConsidering the steady state case first, in my Kernel Header, I have this declaration:\n\nAnd the residual computed like this:\n\nA Fourier relationship between Flux and Temperature with variation taken wrt to q:\n\nIn the Kernel Header, I have:\n\nAnd the residual computation:\n\nKernels block in input file\n\nTo my understanding this has been implemented correctly, but its not converging for what should be a very simple problem (a box with temperature ranging from 0 to 1) and so clearly I'm doing something wrong. Simulations failed with first order elements for all variables, and also with second order q variables. Could you please take a look?",
          "url": "https://github.com/idaholab/moose/discussions/26021",
          "updatedAt": "2023-11-14T17:45:19Z",
          "publishedAt": "2023-11-10T10:13:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Hi @richmondodufisan glancing over this, this looks good to me. If you wanted to share a github branch with your source and input, I could test it out and see if I can identify something problematic",
                  "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7557763",
                  "updatedAt": "2023-11-13T19:15:09Z",
                  "publishedAt": "2023-11-13T19:15:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "@lindsayad thanks! Here's a link to the repository: https://github.com/richmondodufisan/FDTR_Simulation_Hydrodynamics\nThe input file is in Formulation_Test/Simple_Box\nThere is a script to replace the app name in all the source files too to make that easier.",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558304",
                          "updatedAt": "2023-11-13T20:24:58Z",
                          "publishedAt": "2023-11-13T20:24:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "How do I make your application?",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558365",
                          "updatedAt": "2023-11-13T20:34:37Z",
                          "publishedAt": "2023-11-13T20:34:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Oh the whole application isn't what's on github, maybe that's what I should be doing instead. I just thought it would be redundant to create a new app anytime I wanted to add new but different physics. So instead I just created a repo with the custom objects for any user to be able to download and add to their app.\nThe repository I sent you has the source and header files (in the Kernels_and_Headers folder) needed which are to be copied to yourAppName/src/kernels and yourAppName/include/kernels respectively. And then you can make.\nI added a script to change the app name before copying with usage Usage: ./Replace_App.sh <old_app_name> <new_app_name> where in this case old_app_name (name of my app) is \"purple\"",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558476",
                          "updatedAt": "2023-11-13T20:46:53Z",
                          "publishedAt": "2023-11-13T20:46:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "It would be better to create your own app. It can always be easily incorporated into others applications. For instance https://github.com/arfc/squirrel is an \"app\" but it's pulled in and used as a library by multiple other apps such as zapdos and moltres",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558574",
                          "updatedAt": "2023-11-13T21:00:03Z",
                          "publishedAt": "2023-11-13T21:00:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So if you use -pc_type lu you will get an answer but it will look funny as shown below. What you need to add now are \"implicit\" boundary conditions to model the boundary terms coming from integration by parts. Right now you are implicitly setting the boundary terms for the \"q equation\" to 0 at all boundaries and for the \"T equation\" to 0 at the top and bottom boundaries",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558729",
                          "updatedAt": "2023-11-13T21:23:25Z",
                          "publishedAt": "2023-11-13T21:23:02Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "You will have no hope of getting a solution with boomeramg BTW for the Steady case since there is no diagonal for the temperature equation",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558743",
                          "updatedAt": "2023-11-13T21:24:46Z",
                          "publishedAt": "2023-11-13T21:24:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hmm I see, Will it make sense then, to not integrate the temperature term by parts in the q equation? Since the only flux/boundary term I actually want to use is the one from the t equation (i.e q.n = 0 on all natural boundaries)? I did try that but it still didn't converge. Or what boundary conditions would be closest to the usual formulation in ADHeatConduction?\nAlso, to be honest I don't know what most of those options in the Executioner mean, I should probably look into them further. I copied them from another input file when I was initially learning to use MOOSE with the basic understanding that if I used solve_type = 'PJFNK' and made my custom physics inherit from ADKernel, I wouldn't need to code my Jacobians myself thanks to automatic differentiation. I haven't looked in detail at what the rest of the options mean apart from the tolerance.\ncreated the repository btw: https://github.com/richmondodufisan/purple",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7558845",
                          "updatedAt": "2023-11-13T21:38:34Z",
                          "publishedAt": "2023-11-13T21:37:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Hmm I see, Will it make sense then, to not integrate the temperature term by parts in the q equation?\n\nYes you can do that.\n\nI did try that but it still didn't converge\n\nDid you try it with -pc_type lu?",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7559241",
                          "updatedAt": "2023-11-13T22:34:25Z",
                          "publishedAt": "2023-11-13T22:34:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Actually, I tried it again (not integrating the T term in the q equation by parts) and this time it worked! The reason you gave made so much sense and I'm glad it converged, thank you! So it turns out it was something about those other options that was the reason it didn't converge before.\n\nOne thing that I did notice though, is the \"outlier variable residual norms\" in red. What does that mean?\n 0 Nonlinear |R| = 3.060206e+00\n 1 Nonlinear |R| = 3.005904e-05\n 2 Nonlinear |R| = 2.818184e-10\n Solve Converged!\nCurrently Executing\n  Finished Solving                                                                       [  6.71 s] [  157 MB]\n\nOutlier Variable Residual Norms:\n  temperature: 2.803203e-10",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7559245",
                          "updatedAt": "2023-11-13T22:34:48Z",
                          "publishedAt": "2023-11-13T22:34:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "So it turns out it was something about those other options that was the reason it didn't converge before.\n\nYea boomeramg works best for symmetric positive definite matrices and your system is indefinite due to the missing diagonal in the T equation so boomeramg will not work well. Generally when debugging I always use -pc_type lu since that is basically a direct inversion of the preconditioning matrix, so it is the strongest preconditioner you can apply and will work with all systems. It just has very poor efficiency for large matrices.\n\nOne thing that I did notice though, is the \"outlier variable residual norms\" in red. What does that mean?\n\nIt just means that it's residual is larger than the other variable by a significant margin. But you've dropped the overall residual norm by 10 orders of magnitude so I would not worry about it.",
                          "url": "https://github.com/idaholab/moose/discussions/26021#discussioncomment-7559283",
                          "updatedAt": "2023-11-13T22:40:43Z",
                          "publishedAt": "2023-11-13T22:40:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Transient instability in high flowrate model",
          "author": {
            "login": "jvwilliams23"
          },
          "bodyText": "Hi,\nI have spent a couple of months now trying to deal with transient instability in a model with high flowrate (need to go up to 1000 L/min, giving an inlet velocity as 140 m/s). I have simplified the geometry significantly and created an MWE which reproduces the issue. The figure below shows the pressure drop increasing exponentially from about t=0.05 s to eventually crash at t~1.61 s.\n\nFollowing the guidelines in \"Troubleshooting failed solves\" page, I have changed the initial condition from velocity=0 to one based on inlet velocity and flow divisions, I also fixed the diameter as constant. I also scaled the variables to improve the solution. The convergence seems fine throughout the whole simulation (see log below):\nTime Step 16100, time = 1.61, dt = 0.0001\n    |residual|_2 of individual variables:\n         junction-728:rhoEV: 0.954486\n         junction-728:rhoV:  0.00838734\n         junction-728:rhouV: 42.7522\n         junction-728:rhovV: 19.5515\n         junction-728:rhowV: 4.37464\n         junction-733:rhoEV: 5.49613\n         junction-733:rhoV:  0.00634548\n         junction-733:rhouV: 24.375\n         junction-733:rhovV: 110.444\n         junction-733:rhowV: 288.872\n         rhoA:               0.0411604\n         rhoEA:              0.0550817\n         rhouA:              0.060198\n 0 Nonlinear |R| = 3.138465e+02\n      0 Linear |R| = 3.138465e+02\n      1 Linear |R| = 2.163226e+02\n      2 Linear |R| = 1.535664e+00\n      3 Linear |R| = 2.392176e-01\n      4 Linear |R| = 5.622355e-03\n      5 Linear |R| = 1.110909e-05\n    |residual|_2 of individual variables:\n         junction-728:rhoEV: 0.0501407\n         junction-728:rhoV:  3.20005e-05\n         junction-728:rhouV: 1.77731\n         junction-728:rhovV: 1.16674\n         junction-728:rhowV: 0.00863554\n         junction-733:rhoEV: 0.54433\n         junction-733:rhoV:  0.00175378\n         junction-733:rhouV: 1.42963\n         junction-733:rhovV: 9.53675\n         junction-733:rhowV: 0.163855\n         rhoA:               0.000152264\n         rhoEA:              0.000190096\n         rhouA:              0.000191392\n 1 Nonlinear |R| = 9.891371e+00\n      0 Linear |R| = 9.891371e+00\n      1 Linear |R| = 6.471072e-02\n      2 Linear |R| = 8.884682e-03\n      3 Linear |R| = 3.197219e-04\n      4 Linear |R| = 2.780930e-07\n    |residual|_2 of individual variables:\n         junction-728:rhoEV: 3.04345e-06\n         junction-728:rhoV:  7.24824e-09\n         junction-728:rhouV: 2.56967e-06\n         junction-728:rhovV: 4.03091e-06\n         junction-728:rhowV: 9.483e-09\n         junction-733:rhoEV: 0.000150371\n         junction-733:rhoV:  7.11678e-07\n         junction-733:rhouV: 0.000148026\n         junction-733:rhovV: 0.000999644\n         junction-733:rhowV: 1.02263e-05\n         rhoA:               6.19741e-08\n         rhoEA:              1.52932e-07\n         rhouA:              8.7553e-08\n 2 Nonlinear |R| = 1.021738e-03\n      0 Linear |R| = 1.021738e-03\n      1 Linear |R| = 1.061215e-05\n      2 Linear |R| = 4.211359e-07\n      3 Linear |R| = 1.911311e-08\n      4 Linear |R| = 3.632826e-12\n    |residual|_2 of individual variables:\n         junction-728:rhoEV: 2.11386e-13\n         junction-728:rhoV:  1.88877e-14\n         junction-728:rhouV: 4.01883e-11\n         junction-728:rhovV: 4.57945e-12\n         junction-728:rhowV: 1.66978e-13\n         junction-733:rhoEV: 1.39089e-12\n         junction-733:rhoV:  2.88641e-14\n         junction-733:rhouV: 1.24345e-13\n         junction-733:rhovV: 1.33582e-12\n         junction-733:rhowV: 7.95808e-13\n         rhoA:               1.56777e-12\n         rhoEA:              2.15145e-12\n         rhouA:              2.16606e-12\n 3 Nonlinear |R| = 4.064838e-11\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  junction-728:rhouV: 4.018830e-11\n\nBut not long after, the time-step becomes very small and the simulation crashes. I thought maybe this was due to the fluid properties which I fixed as constant becoming less accurate as pressure and temperature change non-homogeneously, but when I changed to Water97FluidProperties the simulation diverges really quick (within a few steps due to issue with line search), so I guess that is a different problem and I should focus on this one first.\nI have attached the input file. Hopefully someone could manage to provide some assistance. Happy to provide more information, log files or anything else that could be useful.\nBest wishes,\nJosh\ncoolant-simulation-for-github.i.txt",
          "url": "https://github.com/idaholab/moose/discussions/25947",
          "updatedAt": "2023-11-14T09:35:33Z",
          "publishedAt": "2023-11-02T09:41:59Z",
          "category": {
            "name": "Q&A Modules: Thermal Hydraulics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jvwilliams23"
                  },
                  "bodyText": "Seems that when I increase the volume at a VolumeJunction from 9e-7 to 9e-4 (just a random test) that everything is stable. Not sure if this is the underlying or is maybe just masking it (something to do with variable scaling in junctions).\nHow should the volume be calculated? In my input files I have been treating the junction as a sphere with the radius equal to that of the upstream branch, and calculating volume of the sphere (which gave 9e-7).",
                  "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7454772",
                  "updatedAt": "2023-11-02T10:41:53Z",
                  "publishedAt": "2023-11-02T10:02:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jvwilliams23"
                          },
                          "bodyText": "Increasing from 9e-7 to 9e-6 seems to delay the issue, but still arises after a while.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7455268",
                          "updatedAt": "2023-11-02T10:54:04Z",
                          "publishedAt": "2023-11-02T10:54:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@joshuahansel",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7456630",
                          "updatedAt": "2023-11-02T13:07:44Z",
                          "publishedAt": "2023-11-02T13:07:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "I tried your input file without the loop 728-784-791-733, and it finishes fine, so it's the loop causing issues. In particular, I think the formulation of VolumeJunction1Phase needs improvement. We've had issues with this junction in the past but have not had the funding to tackle it, despite it being a pretty critical component. The only other junction that can handle multiple connections is JunctionParallelChannels1Phase, but this of course requires that channels be parallel, which is not your situation. I'm going to try and look at the volume junction formulation soon, but I can't guarantee a solution soon.",
                  "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7457708",
                  "updatedAt": "2023-11-02T14:42:37Z",
                  "publishedAt": "2023-11-02T14:42:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "I found something that I can try, so I'm going to try it now. You should hopefully hear from me by the end of the day.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7458509",
                          "updatedAt": "2023-11-02T15:55:31Z",
                          "publishedAt": "2023-11-02T15:55:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "Well I implemented the change (I think correctly...), but I get a lot of nonlinear convergence difficulty on your test problem, even after exploring it for a few hours. At this point, I think I would need to properly fund the task because apparently it is not a quick fix. I made an issue here: #25958. I will see if I can get this work funded.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7462333",
                          "updatedAt": "2023-11-03T00:40:29Z",
                          "publishedAt": "2023-11-03T00:40:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jvwilliams23"
                          },
                          "bodyText": "Yes, the loop is the problem I found too. Thanks for your time.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7464784",
                          "updatedAt": "2023-11-03T09:01:56Z",
                          "publishedAt": "2023-11-03T09:01:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "To answer your question about junction volume, yes, that's how we typically do it. You could also choose a sphere with the same surface area as the sum of the connected cross-sectional areas - maybe that would be better. A tip: you can display the junction variables by setting Outputs/disable_scalars_in_console=false. One thing that was strange that I saw in my experimenting was that the variable rhoV was going up significantly (in a relative sense) in some cases.\nIn case it's useful, here's an input file with the same general setup:\nbypass_loop.txt\nIt appears to give a good solution. You can modify it gradually toward your input file to see what particular thing causes things to break down. That would be helpful to us (maybe to you too).",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7468082",
                          "updatedAt": "2023-11-03T14:58:10Z",
                          "publishedAt": "2023-11-03T14:58:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "See the issue referenced above for an update. I will try the suggested change and see if this improves things.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7468923",
                          "updatedAt": "2023-11-03T16:21:43Z",
                          "publishedAt": "2023-11-03T16:21:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jvwilliams23"
                          },
                          "bodyText": "Thanks for the answer and the case setup file.\nInteresting point raised in the issue regarding the tangential momentum. When I was setting up the MWE, I found that if I remove the junctions \"junction-232\" and \"junction-14\" (pretty much the bends in the pipe attached to inlet and outlet, which would create a straight path from the inlet to the volumejunction, and volumejunction to outlet) then the simulation was stable. I could not figure out why, so I guess this is maybe related.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7484724",
                          "updatedAt": "2023-11-06T08:30:19Z",
                          "publishedAt": "2023-11-06T08:30:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "Good news: I've reworked the volume junction and I tried your input file again, and it ran well. Got to steady state at 1.25 seconds - took 11 time steps. Solution looks plausible.\nI have one more thing to try out on it, and then I'll put up a merge request.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7535478",
                          "updatedAt": "2023-11-10T16:36:26Z",
                          "publishedAt": "2023-11-10T16:36:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jvwilliams23"
                          },
                          "bodyText": "Great news, thanks! I look forward to testing it.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7541495",
                          "updatedAt": "2023-11-11T17:20:16Z",
                          "publishedAt": "2023-11-11T17:20:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "I'm getting waylaid by other work, and this will take some work like documentation and testing before it can be reviewed and merged, but I put up the merge request as a draft if you urgently need the branch for your work: #26046.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7557181",
                          "updatedAt": "2023-11-13T18:07:42Z",
                          "publishedAt": "2023-11-13T18:07:41Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jvwilliams23"
                          },
                          "bodyText": "I have tested it on the MWE and the more complex case, both seem to be working well. Thanks a lot for your help! I will mark this as answered.",
                          "url": "https://github.com/idaholab/moose/discussions/25947#discussioncomment-7563388",
                          "updatedAt": "2023-11-14T09:35:26Z",
                          "publishedAt": "2023-11-14T09:35:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Adaptive mesh refinement",
          "author": {
            "login": "tqcthai"
          },
          "bodyText": "Hello Moose community,\nI am studying adaptive mesh with Moose. There are several indicators we can use like Jump Indicator, Gradient Jump Indicator of a variable. However, I want to study with the simplest one, the indicator is the variable itself, the element will be refined when its value higher than a threadhold. I wonder how to do it? I've tried with Moose variable like the code below but it doesn't work.\n[Adaptivity]\n  marker = errorfrac\n  steps = 1\n  max_h_level = 4\n  [Indicators]\n    [error]\n      type = MooseVariable       #GradientJumpIndicator or ValueJumpIndicator\n      variable = c \n      scale_by_flux_faces = true\n    []\n  []\n  [Markers]\n    [errorfrac]\n      type = ErrorFractionMarker\n      indicator = error\n      refine = 0.5 #cut value\n      coarsen = 0\n    []\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/25680",
          "updatedAt": "2023-11-16T16:24:33Z",
          "publishedAt": "2023-10-06T17:25:41Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Did you try specifying no indicator block and instead passing the name of the variable to the parameter. (The variable being defined normally as an auxvariable or Variable as usual)",
                  "url": "https://github.com/idaholab/moose/discussions/25680#discussioncomment-7212108",
                  "updatedAt": "2023-10-06T17:39:42Z",
                  "publishedAt": "2023-10-06T17:39:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I have not tried, but something like this maybe?\n[Adaptivity]\n  marker = errorfrac\n  steps = 1\n  max_h_level = 4\n  [Markers]\n    [errorfrac]\n      type = ErrorFractionMarker\n      indicator = error\n      refine = 0.5 #cut value\n      coarsen = 0\n    []\n  []\n[]\n\n[AuxVariables]\n  [error]\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/25680#discussioncomment-7212310",
                          "updatedAt": "2023-10-06T18:02:46Z",
                          "publishedAt": "2023-10-06T18:02:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tqcthai"
                          },
                          "bodyText": "It doesn't work. Anyway, I found out a way to define it as an analytical solution of a function\n\n[Functions]\n  [solution]\n    type = ParsedFunction\n    expression = x\n  []\n[]\n\n[Adaptivity]\n  marker = errorfrac\n  steps = 1\n  max_h_level = 4\n  [Indicators]\n    [error]\n      type = AnalyticalIndicator\n      variable = c\n      function = solution\n    []\n  []\n  [Markers]\n    [errorfrac]\n      type = ErrorFractionMarker\n      coarsen = 0.0\n      indicator = error\n      refine = 0.1\n    []\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/25680#discussioncomment-7213146",
                          "updatedAt": "2023-10-06T20:03:18Z",
                          "publishedAt": "2023-10-06T20:00:32Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Discrepancy between Peacock and Paraview",
          "author": {
            "login": "charlotte-b8086"
          },
          "bodyText": "Hello! I am very new to MOOSE and am trying to learn how to use it by following the online 12-hour tutorial recorded in Summer 2020.\nI am currently working on Step 5 but I am concerned that I have done something that is affecting my Paraview.\nWhen I run the Step 5a from my command line using peacock (~/projects/moose/python/peacock/peacock -I step5a_transient.i) I obtain the following graphic:\n\nthis matches what is shown in the video, as the temperature is increasing from 300 to 350.\nHowever, when I attempt to open the output file in Paraview using the command 'open' from my Terminal (I am using a Mac), I obtain the following as my initial and final time steps\n\n\n\n\nDoes anyone have any explanation for why this is occurring or how to fix it? I apologize if this is a very simple question!\nThank you for your time and consideration.",
          "url": "https://github.com/idaholab/moose/discussions/26050",
          "updatedAt": "2023-11-13T23:02:40Z",
          "publishedAt": "2023-11-13T20:07:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ykvishal"
                  },
                  "bodyText": "When you are on last image (ie Time =1), press rescale to Data range and see what happens.",
                  "url": "https://github.com/idaholab/moose/discussions/26050#discussioncomment-7558379",
                  "updatedAt": "2023-11-13T20:36:57Z",
                  "publishedAt": "2023-11-13T20:36:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "charlotte-b8086"
                          },
                          "bodyText": "Thank you so much! That fixed it.",
                          "url": "https://github.com/idaholab/moose/discussions/26050#discussioncomment-7558717",
                          "updatedAt": "2023-11-13T21:21:05Z",
                          "publishedAt": "2023-11-13T21:21:04Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}