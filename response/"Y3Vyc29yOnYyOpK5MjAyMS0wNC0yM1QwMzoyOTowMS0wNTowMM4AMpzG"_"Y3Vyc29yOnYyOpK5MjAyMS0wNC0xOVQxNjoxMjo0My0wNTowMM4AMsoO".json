{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wNC0xOVQxNjoxMjo0My0wNTowMM4AMsoO"
    },
    "edges": [
      {
        "node": {
          "title": "The problem of grain size distribution curve in grain growth",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear MOOSE experts,\nI'm very sorry to ask you such a rudimentary question here, but this question has really bothered me for a long time.\nI\u2019m not sure how the frequency provided in the discussion #17422 is defined? The area enclosed by the grain size distribution curve and the x-axis represents the frequency (after extracting the data of Yadav 2016, I calculated that the area is about 1),\n\nor the y-axis itself is the frequency (frequency = Number of grains in a certain interval after the normalized grain radius/Total number of crystal grains).\nMoreover, I used moose to simulate a grain growth with 6400 initial grains. And using the first frequency calculation method I think, the following curve is obtained, which is very different from the theoretical Hillert grain size distribution curve. So I don't know if the number of initial grains is too small, or the calculated y-axis, that is, the frequency is not calculated as I think.\n\nAny suggestions or recommendations to fix these problems would be greatly appreciated.\nThank you\nWei Peng",
          "url": "https://github.com/idaholab/moose/discussions/17663",
          "updatedAt": "2022-09-22T09:18:01Z",
          "publishedAt": "2021-04-22T15:22:39Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "PengWei97"
                  },
                  "bodyText": "@ykvishal\uff0cCould you give me some guidance?",
                  "url": "https://github.com/idaholab/moose/discussions/17663#discussioncomment-648146",
                  "updatedAt": "2022-09-22T09:18:10Z",
                  "publishedAt": "2021-04-23T06:33:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "strain-based plasticity models",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hi everyone,\nI'm considering implementing some strain-based plasticity models, and i'm wondering whether anyone has done this in MOOSE already, or even toyed with the idea.\nMy reason for doing this is to more easily/accurately capture post-yield behaviour for rocks.  When rocks fail (Mohr-Coulomb plasticity is often used) and further deform, their mechanics is quite different from the pre-yield elastic behaviour.  Eg, consider pulling apart a rock via a tensile stress: after failure the rock has fractured so essentially has \"zero Young's modulus\" (this may not be really true, because tension in an orthogonal direction will encounter competent rock), but then upon recompaction to its original state, the Young's modulus will assume its original value, since the fracture will have \"squashed back\" to nothing.  This mechanics may be captured with softening and hardening of the plastic strengths, but that ends up being computationally quite challenging.\nSo, i'm toying with strain-based plasticity.   Any comments?\nExample article:\nhttps://doi.org/10.1016/S0045-7825(96)01245-5",
          "url": "https://github.com/idaholab/moose/discussions/17666",
          "updatedAt": "2022-06-13T08:30:53Z",
          "publishedAt": "2021-04-22T22:41:24Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "So first possibly dumb question I have: what you described is pretty much just softening plasticity. How does \"strain-based\" factor in here?",
                  "url": "https://github.com/idaholab/moose/discussions/17666#discussioncomment-647738",
                  "updatedAt": "2022-06-13T08:30:53Z",
                  "publishedAt": "2021-04-23T02:59:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "So after reading the abstract of that article, it sounds like strain-based and stress-based plasticity are equally valid choices, but one may be more convenient than the other in certain cases. Correct me if I'm wrong.\nSo is your focus here \"strain space plasticity\" or \"softening plasticity\"? Even if you want both in the end, it may be easier to pursue one of them first, than the other one.\nI don't know how hard \"strain-space plasticity\", but I guess all it needs is a different set of material models in moose. Maybe the return mapping is done on strain?\n\"Softening plasticity\" is trickier, as you may need fixed point iteration to obtain a solution post yielding.",
                          "url": "https://github.com/idaholab/moose/discussions/17666#discussioncomment-647768",
                          "updatedAt": "2022-06-13T08:31:00Z",
                          "publishedAt": "2021-04-23T03:09:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "You're right - i believe that strain-based might be more convenient in my case.  This is just an intuition at the moment, as i haven't tried anything.\nI'm not really interested in softening.  I use it a lot, and find it's too computationally expensive, even if it appears to capture reality somewhat realistically in some cases.\nI'm not sure whether i'm going to pursue this strain-based-plasticity work.  At the moment i'm just wondering if anyone has done stuff in MOOSE (or otherwise) using it.",
                          "url": "https://github.com/idaholab/moose/discussions/17666#discussioncomment-647777",
                          "updatedAt": "2022-06-13T08:31:03Z",
                          "publishedAt": "2021-04-23T03:14:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "breaking (fracturing) elements or breaking meshes (DEM-FEM)",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hi everyone,\nIn some solid-mechanics simulations, such as the tensile failure of materials due to fracture creation, breaking the finite-element mesh along element edges, or breaking individual elements into multiple pieces, might be an appropriate modelling strategy.   Has anyone done this using MOOSE?   I'm hoping you'll say \"yes - this is fully developed in module XXXX, didn't you know?!\".\nNot only does the underlying finite-element package (libmesh) have to be flexible enough to break elements, but the problem becomes numerically complicated, as contact-detection between broken surfaces bogs the code down (you don't want those freshly-created surfaces just passing through each other!).\nAn example of a commercial package that does this: https://www.geomechanica.com/software\na",
          "url": "https://github.com/idaholab/moose/discussions/17667",
          "updatedAt": "2022-09-20T12:58:15Z",
          "publishedAt": "2021-04-22T22:51:05Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "yes - this is fully developed in module Xfem, didn't you know?!",
                  "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647263",
                  "updatedAt": "2022-09-20T12:58:31Z",
                  "publishedAt": "2021-04-22T22:54:22Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OMG, you aren't kidding!   I'm so happy.  Now lots of reading for me.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647290",
                          "updatedAt": "2022-09-20T12:58:31Z",
                          "publishedAt": "2021-04-22T23:09:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "FYI, @bwspenc and @jiangwen84 are the main points of contact for the XFEM module.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647303",
                          "updatedAt": "2022-09-20T12:58:31Z",
                          "publishedAt": "2021-04-22T23:14:56Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Traiwit"
                  },
                  "bodyText": "Hi @WilkAndy @hugary1995\nSince you guys are on this topic, I want to do a mine simulation that has faults in it.\nMy supervisor suggested using 'Cohesive Zone'  https://mooseframework.inl.gov/syntax/Modules/TensorMechanics/CohesiveZoneMaster/index.html\nwhen I see that it does not support the 'Large strain' model, is there any way to work around this problem?\nThank you!\nTraiwit",
                  "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647360",
                  "updatedAt": "2022-09-20T12:58:38Z",
                  "publishedAt": "2021-04-22T23:49:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "@Traiwit here is the PR for large deformation CZM.\n#17157",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647383",
                          "updatedAt": "2022-09-20T12:58:51Z",
                          "publishedAt": "2021-04-23T00:00:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "Nice! Thank you @jiangwen84",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647475",
                          "updatedAt": "2022-09-20T12:58:53Z",
                          "publishedAt": "2021-04-23T00:51:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "When using XFEM to pull apart a material, everything works fine.  But upon recompaction, the fracture surfaces don't \"push back\" against each other.  Is this correct, or am i driving XFEM incorrectly?",
                  "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647414",
                  "updatedAt": "2022-09-20T12:59:06Z",
                  "publishedAt": "2021-04-23T00:18:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "When using XFEM to pull apart a material, everything works fine. But upon recompaction, the fracture surfaces don't \"push back\" against each other. Is this correct, or am i driving XFEM incorrectly?\n\nYou  can implement a contact constrain on the fracture surfaces.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647441",
                          "updatedAt": "2022-10-13T18:04:56Z",
                          "publishedAt": "2021-04-23T00:35:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Where is there an example of this?",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647457",
                          "updatedAt": "2022-10-13T18:04:56Z",
                          "publishedAt": "2021-04-23T00:43:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Where is there an example of this?\n\nWe do not have an example in MOOSE. The basic idea is to use ElemElemConstraint to enforce contact.  One example to enforce glued contact at fracture surfaces using a penalty method is  XFEMSingleVariableConstraint. For more complicated contact constraint, stateful properties at interfaces are usually needed and  #16891 will address that.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647569",
                          "updatedAt": "2022-09-20T12:59:11Z",
                          "publishedAt": "2021-04-23T01:36:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "I tried XFEMSingleVariableConstraint but putting in a few if (_u[_qp] - _u_neighbor[_qp] > 0) conditions so the penalty didn't try to glue the surfaces together.  That won't work if the surfaces move too much relative to each other (and setting the variable in that object seems only possible in very simple situations).\nI looked at the Contact module, but i believe you have to pre-specify the surfaces, which is not what i want.\nAny ideas?",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647571",
                          "updatedAt": "2022-09-20T12:59:11Z",
                          "publishedAt": "2021-04-23T01:38:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Oh, sorry, i didn't see your reply @jiangwen84 .  i don't want to glue the faces together.  i want to prevent interpenetration.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647575",
                          "updatedAt": "2022-09-20T12:59:21Z",
                          "publishedAt": "2021-04-23T01:40:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Oh, sorry, i didn't see your reply @jiangwen84 . i don't want to glue the faces together. i want to prevent interpenetration.\n\nXFEM won't work naturally work with Contact module, but we can possibly reuse some existing contact codes. You are correct that we always assume the constraint is applied on a pair of element and large sliding and opening might be a problem.",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647588",
                          "updatedAt": "2022-09-20T12:59:21Z",
                          "publishedAt": "2021-04-23T01:49:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "OK, this is good to know.  I think that contact detection throughout the mesh is quite a significant addition to MOOSE, and one that i currently don't have time to contribute to.  It will likely involve fairly cumbersome checks involving looking at what's happening on other processors, in the same way that DEM codes are hard to parallelise using MPI.  So, i think for now the XFEM/Contact stuff won't really work for me, but it's good to know what XFEM is after seeing 1E6 emails about it!",
                          "url": "https://github.com/idaholab/moose/discussions/17667#discussioncomment-647605",
                          "updatedAt": "2022-09-20T12:59:21Z",
                          "publishedAt": "2021-04-23T01:57:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to read solution file from adaptive meshing simulations ?",
          "author": {
            "login": "KamalnathOSU"
          },
          "bodyText": "I tried to read-in the variables from another simulation into my current simulation. My previous simulation used adaptive meshing.  Hence, it created a series of files like precipitation_exo.e, precipitation_exo.e-s002, precipitation_exo.e-s003, ..., precipitation_exo.e-s018.\nI tried to load the result file as follows\n[./soln_ppt]\ntype  = SolutionUserObject\nsystem_variables='eta'\nmesh = 'precipitation_exo.e'\n[../]\n\nBut this loads only the first time step results. I want to load all the files so that I can do time interpolation for any time in my current simulation.\nAny suggestions ?\nThank you very much.\n-Kamal",
          "url": "https://github.com/idaholab/moose/discussions/17635",
          "updatedAt": "2022-06-21T21:17:50Z",
          "publishedAt": "2021-04-17T12:56:25Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "To my knowledge this is not supported. @friedmud do you recall for sure? Also, @roystgnr do/can we support time interpolation across adaptive steps?\nIn a related area, this capability was only recently added to VTK. I was involved in the research grant that added it and provided them some data. In the future we will have this ability in our visualization scripts, but it doesn't exist now.",
                  "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-640528",
                  "updatedAt": "2022-06-21T21:17:53Z",
                  "publishedAt": "2021-04-21T15:01:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "friedmud"
                          },
                          "bodyText": "A couple of things:\n\nYou cannot read in adapted Exodus files at all.  They do not contain the correct element hierarchy for MOOSE to be able to understand them.  They are strictly visualization only.\nYou can read adapted meshes from xdr/xda output or from the checkpoint format (see https://mooseframework.inl.gov/application_usage/restart_recover.html )\nI have no idea if we have the ability to read a transient simulation with adapted meshes at all\nYou may want to use a MultiApp approach instead.  That way you can march both of your solutions forward in time together - transferring back and forth.",
                          "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-640835",
                          "updatedAt": "2022-06-21T21:17:53Z",
                          "publishedAt": "2021-04-21T16:04:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "Thank you Derek.\nActually, I was able to read in adapted Exodus files !!! I was able to load the solution from previous simulation into my current simulation and proceed with the calculation. I was able to load the Euler angles from grain growth simulation  into my precipitation model (KKS - two phase) , and simulate anisotropic precipitate growth.\nBut I could not do time interpolation with adaptive meshes.",
                          "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-640888",
                          "updatedAt": "2022-06-21T21:17:57Z",
                          "publishedAt": "2021-04-21T16:15:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "@friedmud Can you give me guidance on how to proceed with MultiApp ?",
                          "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-640893",
                          "updatedAt": "2022-06-21T21:17:57Z",
                          "publishedAt": "2021-04-21T16:17:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "do/can we support time interpolation across adaptive steps\n\nYeah; if you're using any of the libMesh transient classes, or even if you're adding your own solution vectors corresponding to other timesteps but you're not changing the default vector_preservation() setting for your vectors, we'll project them to the new space whenever we adapt the mesh.",
                          "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-640984",
                          "updatedAt": "2022-06-21T21:17:57Z",
                          "publishedAt": "2021-04-21T16:36:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Can you give me guidance on how to proceed with MultiApp ?\n\nhttps://mooseframework.inl.gov/syntax/MultiApps",
                          "url": "https://github.com/idaholab/moose/discussions/17635#discussioncomment-641156",
                          "updatedAt": "2022-06-21T21:17:57Z",
                          "publishedAt": "2021-04-21T17:15:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Heat source time data",
          "author": {
            "login": "ali-mhassaan"
          },
          "bodyText": "Hi,\nI'm currently using the FunctionPathEllipsoidHeatSource for a part of my simulation. I need to output the temperature data w.r.t. time and space and use that in another MOOSE input file. I have tried using the NodalValueSampler, but output is not a function of time. Also, any help regarding reading the data (in this particular case), in the input file would also be appreciated.\nCheers,\nHassaan",
          "url": "https://github.com/idaholab/moose/discussions/17616",
          "updatedAt": "2022-10-19T20:40:27Z",
          "publishedAt": "2021-04-15T06:41:11Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "I think you can get what you need from FunctionAux. The documentation is not complete, but the test input files listed should give you the enough to get it running.\nUsing it will result in the calculation of an AuxVariable using the function that will be stored in the Exodus output as a field variable.",
                  "url": "https://github.com/idaholab/moose/discussions/17616#discussioncomment-640626",
                  "updatedAt": "2022-10-19T20:40:28Z",
                  "publishedAt": "2021-04-21T15:21:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to acquire moose soon",
          "author": {
            "login": "xchengood"
          },
          "bodyText": "Hi moose experts and users,\nThis is a general question. Although I roughly look through the get started section including examples, tutorials as well as the complete syntax, and try my best to understand them, there are still much confusion in my head and I am not able to write complete code for my own model if there are no any example files for reference. I have no idea what syntax I should use even if I go through complete syntax. Does anyone share any good experiences or tips with me? Thanks for your help in advance.",
          "url": "https://github.com/idaholab/moose/discussions/17658",
          "updatedAt": "2021-04-27T15:14:11Z",
          "publishedAt": "2021-04-21T15:05:16Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "I suggest you start here: https://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/index.html\nThis includes a step-by-step guide for creating a MOOSE-based application. If you read it completely and do the steps yourself you will begin to understand the process. It would also be worth watching the video on the homepage.",
                  "url": "https://github.com/idaholab/moose/discussions/17658#discussioncomment-640580",
                  "updatedAt": "2021-04-21T15:13:26Z",
                  "publishedAt": "2021-04-21T15:13:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Move the boundary for central void formation",
          "author": {
            "login": "xuxiaobei1995"
          },
          "bodyText": "Hi all,\n I'm working on a 2D-RZ cylindrical problem in which a void caused by the temperature gradient gradually forms at the center of the cylinder.  So my question is that is there any way to move the centerline boundary to simulate the central void formation? Any suggestion is appreciated.",
          "url": "https://github.com/idaholab/moose/discussions/17657",
          "updatedAt": "2021-04-21T14:42:36Z",
          "publishedAt": "2021-04-21T03:10:24Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "coskrrb2002"
                  },
                  "bodyText": "Dear xuxiaobei1995,\nI think you can do it with activation of element.\nYou should read this post: #16008 .\nBest regards,\nNakkyu",
                  "url": "https://github.com/idaholab/moose/discussions/17657#discussioncomment-639528",
                  "updatedAt": "2021-04-21T11:42:42Z",
                  "publishedAt": "2021-04-21T11:42:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xuxiaobei1995"
                          },
                          "bodyText": "Hi Nakkyu,\nI read the documentation of the ActivateElementUserObject. It seems that the object can only activate the elements. But what I need is to de-activate the elements... Anyway, thanks for your reply!",
                          "url": "https://github.com/idaholab/moose/discussions/17657#discussioncomment-639705",
                          "updatedAt": "2021-04-21T12:24:25Z",
                          "publishedAt": "2021-04-21T12:24:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You can use this: https://mooseframework.inl.gov/source/userobject/CoupledVarThresholdElementSubdomainModifier.html. If you don't add kernels on a subdomian, then that subdomain is effectively \"deactivated\".",
                  "url": "https://github.com/idaholab/moose/discussions/17657#discussioncomment-640064",
                  "updatedAt": "2021-04-21T13:44:54Z",
                  "publishedAt": "2021-04-21T13:44:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xuxiaobei1995"
                          },
                          "bodyText": "Hi Gary,\nThanks for your suggestion! It is just what I need. I will try it for my problem.",
                          "url": "https://github.com/idaholab/moose/discussions/17657#discussioncomment-640401",
                          "updatedAt": "2021-04-21T14:41:52Z",
                          "publishedAt": "2021-04-21T14:41:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Printout member variables",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "Hi MOOSE TEAM,\nI am adding member variables following the Example 3 : Multiphysics coupling.\nI would like to printout member variables for the confirmation.\nFor example, I would like to printout \"_grad_some_variable\" in the Example 3.\nPlease help me.\nExampleConvection.h in Example 3:\nconst VariableGradient & _grad_some_variable;\nExampleConvection.C in Example 3 :\nparams.addRequiredCoupledVar(\"some_variable\", \"The gradient of this variable will be used as the velocity vector.\");\n_grad_some_variable(coupledGradient(\"some_variable\"))\nex03.i in Example 3:\n[Kernels]\n[./conv]\ntype = ExampleConvection\nvariable = convected\n# Couple a variable into the convection kernel using local_name = simulationg_name syntax\nsome_variable = diffused\n[../]\n[]\nSincerely,\nThomas",
          "url": "https://github.com/idaholab/moose/discussions/17647",
          "updatedAt": "2022-10-06T17:30:20Z",
          "publishedAt": "2021-04-20T00:28:06Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hi Thomas\nYou can look at VariableGradientCompoent to output the gradient to an AuxVariable, then in an exodus file and visualize it there.\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17647#discussioncomment-636532",
                  "updatedAt": "2022-10-06T17:30:28Z",
                  "publishedAt": "2021-04-20T17:38:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Possible Bug in Postprocessors::SideFluxIntegral",
          "author": {
            "login": "wrkendrick"
          },
          "bodyText": "Hi all, I've been running some heat conduction in a very simple geometry focused at returning heat fluxes on a surface. I recently updated to the current Master branch of MOOSE (I was previously on a Master checkpoint from around January) and after that my heat fluxes have had a bug.\nAfter the initial construction, on the very first non-linear iteration, the heat fluxes are reported in the ~30kW range, when they should be basically zero. This is correct by the next non-linear iteration, and is correct in the initial construction phase, which is confusing.\nI recompiled everything in devel mode and ran GDB to see if I could find where it goes wrong, and I went all the way down to the calculation step in SideFluxIntegral.C --> \"return -MetaPhysicL::raw_value(_diffusion_coef[_qp]) * _grad_u[_qp] * _normals[_qp];\". The reported value by _grad_u is wrong. I don't know how to go any deeper than this, so I'm coming to y'all. I've attached my input and geometry files so you can replicate, I got the same bug by using the HeatConduction module to execute. For now I'm going to start checking out older checkpoints of the Master branch to see if I can find the date when the bug begins, but hopefully one of you can find the problem first.\nAlso attached is a VectorOfPostprocessors VectorPostprocessor C file that I added printing functions to, in order to see the values of the fluxes at every non-linear step, so you can see that the bug isn't in my variable printing.\nThis is the output of one run:\n`Framework Information:\nMOOSE Version:           git commit 59fb6b8 on 2021-03-23\nLibMesh Version:         ed76100f41840c34c146dd0a7f1ff5410370b489\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nCurrent Time:            Wed Apr 14 12:43:04 2021\nExecutable Timestamp:    Wed Apr 14 12:42:26 2021\nParallelism:\nNum Processors:          1\nNum Threads:             1\nMesh:\nParallel Type:           replicated\nMesh Dimension:          3\nSpatial Dimension:       3\nNodes:\nTotal:                 2205\nLocal:                 2205\nElems:\nTotal:                 10812\nLocal:                 10812\nNum Subdomains:          2\nNum Partitions:          1\nNonlinear System:\nNum DOFs:                2205\nNum Local DOFs:          2205\nVariables:               \"temp\"\nFinite Element Types:    \"LAGRANGE\"\nApproximation Orders:    \"FIRST\"\nExecution Information:\nExecutioner:             Steady\nSolver Mode:             NEWTON\nMOOSE Preconditioner:    SMP (auto)\nFLUXES:\n0: -1.32508e-12\n1: -2.33283e-12\n2: 1.74689e-12\n3: -1.63962e-12\n4: 1.74689e-12\n5: 1.06096e-12\n6: -1.73598e-12\n7: -1.17187e-12\n8: -2.11465e-12\n9: -2.22556e-12\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | heatFlux_0     | heatFlux_1     | heatFlux_2     | heatFlux_3     | heatFlux_4     | heatFlux_5     | heatFlux_6     | heatFlux_7     | heatFlux_8     | heatFlux_9     |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |  -1.325077e-12 |  -2.332828e-12 |   1.746893e-12 |  -1.639621e-12 |   1.746893e-12 |   1.060960e-12 |  -1.735984e-12 |  -1.171869e-12 |  -2.114646e-12 |  -2.225555e-12 |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n0 Nonlinear |R| = 3.863293e+04\nFLUXES:\n0: 34217.3\n1: 28912.7\n2: 31062\n3: 29094.3\n4: 29385.1\n5: 31008.6\n6: 31068.1\n7: 29545.9\n8: 29248.2\n9: 31292.9\n0 Linear |R| = 3.863293e+04\n1 Linear |R| = 1.008715e+04\n2 Linear |R| = 4.930235e+03\n3 Linear |R| = 3.144405e+03\n4 Linear |R| = 2.255522e+03\n5 Linear |R| = 1.659212e+03\n6 Linear |R| = 1.320328e+03\n7 Linear |R| = 1.088051e+03\n8 Linear |R| = 8.710543e+02\n9 Linear |R| = 7.312698e+02\n10 Linear |R| = 6.073942e+02\n11 Linear |R| = 3.994530e+02\n12 Linear |R| = 1.590399e+02\n13 Linear |R| = 5.332944e+01\n14 Linear |R| = 2.492040e+01\n15 Linear |R| = 1.364132e+01\n16 Linear |R| = 8.115729e+00\n17 Linear |R| = 4.601989e+00\n18 Linear |R| = 2.240354e+00\n19 Linear |R| = 1.385551e+00\n20 Linear |R| = 6.454047e-01\n21 Linear |R| = 3.300779e-01\n22 Linear |R| = 1.610229e-01\n23 Linear |R| = 6.466311e-02\n24 Linear |R| = 2.643870e-02\n25 Linear |R| = 1.540049e-02\n26 Linear |R| = 9.712541e-03\n27 Linear |R| = 5.731784e-03\n28 Linear |R| = 2.833014e-03\n29 Linear |R| = 1.385553e-03\n30 Linear |R| = 6.661644e-04\n31 Linear |R| = 4.195771e-04\n32 Linear |R| = 2.200850e-04\n33 Linear |R| = 1.002690e-04\n34 Linear |R| = 5.212515e-05\n35 Linear |R| = 3.409923e-05\n36 Linear |R| = 2.015706e-05\n37 Linear |R| = 9.101468e-06\n38 Linear |R| = 4.056231e-06\n39 Linear |R| = 2.073032e-06\n1 Nonlinear |R| = 2.073031e-06\nFLUXES:\n0: 1500\n1: 1500\n2: 1500\n3: 1500\n4: 1500\n5: 1500\n6: 1500\n7: 1500\n8: 1500\n9: 1500\n0 Linear |R| = 2.073031e-06\n1 Linear |R| = 1.444149e-06\n2 Linear |R| = 1.055687e-06\n3 Linear |R| = 8.781906e-07\n4 Linear |R| = 7.564132e-07\n5 Linear |R| = 6.370497e-07\n6 Linear |R| = 4.991177e-07\n7 Linear |R| = 3.870670e-07\n8 Linear |R| = 2.638227e-07\n9 Linear |R| = 1.766717e-07\n10 Linear |R| = 1.157050e-07\n11 Linear |R| = 5.475745e-08\n12 Linear |R| = 2.415633e-08\n13 Linear |R| = 1.517712e-08\n14 Linear |R| = 9.860500e-09\n15 Linear |R| = 6.009218e-09\n16 Linear |R| = 3.067737e-09\n17 Linear |R| = 1.103899e-09\n18 Linear |R| = 4.960291e-10\n19 Linear |R| = 2.666850e-10\n20 Linear |R| = 1.300409e-10\n21 Linear |R| = 5.918693e-11\n22 Linear |R| = 3.057026e-11\n23 Linear |R| = 1.908830e-11\n24 Linear |R| = 1.175909e-11\n25 Linear |R| = 5.782164e-12\n26 Linear |R| = 2.520530e-12\n27 Linear |R| = 9.299019e-13\n28 Linear |R| = 3.708909e-13\n29 Linear |R| = 1.504580e-13\n30 Linear |R| = 5.621707e-14\n31 Linear |R| = 3.076603e-14\n32 Linear |R| = 1.555730e-14\n33 Linear |R| = 7.200368e-15\n34 Linear |R| = 3.160126e-15\n35 Linear |R| = 1.348425e-15\n36 Linear |R| = 7.433555e-16\n37 Linear |R| = 6.012902e-16\n38 Linear |R| = 5.287429e-16\n39 Linear |R| = 4.450518e-16\n40 Linear |R| = 3.703481e-16\n41 Linear |R| = 2.883527e-16\n42 Linear |R| = 1.969545e-16\n2 Nonlinear |R| = 1.474851e-10\nFLUXES:\n0: 1500\n1: 1500\n2: 1500\n3: 1500\n4: 1500\n5: 1500\n6: 1500\n7: 1500\n8: 1500\n9: 1500\n0 Linear |R| = 1.474851e-10\n1 Linear |R| = 1.004611e-11\n2 Linear |R| = 1.772591e-12\n3 Linear |R| = 6.430570e-13\n4 Linear |R| = 3.221308e-13\n5 Linear |R| = 2.041261e-13\n6 Linear |R| = 1.454971e-13\n7 Linear |R| = 1.160444e-13\n8 Linear |R| = 9.720275e-14\n9 Linear |R| = 8.210715e-14\n10 Linear |R| = 6.696380e-14\n11 Linear |R| = 5.427637e-14\n12 Linear |R| = 4.270465e-14\n13 Linear |R| = 2.910945e-14\n14 Linear |R| = 1.498483e-14\n15 Linear |R| = 7.416829e-15\n16 Linear |R| = 4.706586e-15\n17 Linear |R| = 2.946539e-15\n18 Linear |R| = 1.823344e-15\n19 Linear |R| = 9.573813e-16\n20 Linear |R| = 3.630267e-16\n21 Linear |R| = 1.537032e-16\n22 Linear |R| = 7.623668e-17\n23 Linear |R| = 4.178874e-17\n24 Linear |R| = 2.436014e-17\n25 Linear |R| = 1.166257e-17\n26 Linear |R| = 6.358350e-18\n27 Linear |R| = 4.137238e-18\n28 Linear |R| = 2.242834e-18\n29 Linear |R| = 8.246964e-19\n30 Linear |R| = 2.948909e-19\n31 Linear |R| = 1.449013e-19\n32 Linear |R| = 5.504189e-20\n33 Linear |R| = 2.524015e-20\n34 Linear |R| = 1.519536e-20\n35 Linear |R| = 9.718212e-21\n3 Nonlinear |R| = 1.398896e-10\nSolve Converged!\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | heatFlux_0     | heatFlux_1     | heatFlux_2     | heatFlux_3     | heatFlux_4     | heatFlux_5     | heatFlux_6     | heatFlux_7     | heatFlux_8     | heatFlux_9     |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n|   0.000000e+00 |  -1.325077e-12 |  -2.332828e-12 |   1.746893e-12 |  -1.639621e-12 |   1.746893e-12 |   1.060960e-12 |  -1.735984e-12 |  -1.171869e-12 |  -2.114646e-12 |  -2.225555e-12 |\n|   1.000000e+00 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |   1.500000e+03 |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\nFLUXES:\n0: 1500\n1: 1500\n2: 1500\n3: 1500\n4: 1500\n5: 1500\n6: 1500\n7: 1500\n8: 1500\n9: 1500\n'\nThanks y'all!\nFluxBugInputs.zip",
          "url": "https://github.com/idaholab/moose/discussions/17608",
          "updatedAt": "2022-09-10T09:31:03Z",
          "publishedAt": "2021-04-14T16:45:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "wrkendrick"
                  },
                  "bodyText": "SOLVED: Turns out an initial condition was set too high and on the first calculation it would (correctly) calculate a huge heat flux, and after 1 linear iteration it would fix itself.",
                  "url": "https://github.com/idaholab/moose/discussions/17608#discussioncomment-636476",
                  "updatedAt": "2022-09-10T09:31:09Z",
                  "publishedAt": "2021-04-20T17:25:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "nice Sterling and I were wondering what to do about this yesterday",
                          "url": "https://github.com/idaholab/moose/discussions/17608#discussioncomment-636501",
                          "updatedAt": "2022-09-10T09:31:09Z",
                          "publishedAt": "2021-04-20T17:30:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error : Your current working directory is in a git repository || Moose Installation",
          "author": {
            "login": "stheeda07"
          },
          "bodyText": "I have installed moose and it passed all the tests. When I execute these commands,\n$ cd ~/projects\n$ ./moose/scripts/stork.sh cat\nthere is an error : your current working directory is in a git repository\nI am unable to run stork.sh file to create an application. Thanks in advance.",
          "url": "https://github.com/idaholab/moose/discussions/17645",
          "updatedAt": "2022-08-27T08:57:36Z",
          "publishedAt": "2021-04-19T20:10:11Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "What does the following report?\ncd ~/projects\ngit worktree list\nIt sounds as if your projects directory (or perhaps the parent directory) is a git repo. I would like to understand more before we simply 'remove' this offending git repo. I know some use git as a means to back up everything...",
                  "url": "https://github.com/idaholab/moose/discussions/17645#discussioncomment-632094",
                  "updatedAt": "2022-08-27T08:57:50Z",
                  "publishedAt": "2021-04-19T20:25:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "stheeda07"
                          },
                          "bodyText": "Hey, git worktree list is returning : Users/stheeda  0000000 [master].",
                          "url": "https://github.com/idaholab/moose/discussions/17645#discussioncomment-632131",
                          "updatedAt": "2022-08-27T08:57:55Z",
                          "publishedAt": "2021-04-19T20:39:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "stheeda07"
                          },
                          "bodyText": "@milljm searched in google and did execute this command \"rm -rf .git\" in the projects directory. Now It works fine. But I don't know if this is 'legit'",
                          "url": "https://github.com/idaholab/moose/discussions/17645#discussioncomment-632215",
                          "updatedAt": "2022-08-27T08:58:01Z",
                          "publishedAt": "2021-04-19T20:54:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "@stheeda07 it does fix your immediate problem, if you didn't intend to make your home directory a git repository. If you did want it to be a git repository, well now the history associated with git is no longer available, unless there was some sort of backup elsewhere.",
                          "url": "https://github.com/idaholab/moose/discussions/17645#discussioncomment-632256",
                          "updatedAt": "2022-08-27T08:58:01Z",
                          "publishedAt": "2021-04-19T21:01:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "stheeda07"
                          },
                          "bodyText": "@cticenhour I never wanted my home directory to be a git repository. May be something might've gone wrong during git setup (not sure though). Anyways I have a backup of all the files on my parent directory",
                          "url": "https://github.com/idaholab/moose/discussions/17645#discussioncomment-632308",
                          "updatedAt": "2022-08-27T08:58:05Z",
                          "publishedAt": "2021-04-19T21:12:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}