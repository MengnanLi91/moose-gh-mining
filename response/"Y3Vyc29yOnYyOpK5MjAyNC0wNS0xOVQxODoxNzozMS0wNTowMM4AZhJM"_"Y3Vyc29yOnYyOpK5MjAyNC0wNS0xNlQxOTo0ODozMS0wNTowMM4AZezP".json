{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNS0xNlQxOTo0ODozMS0wNTowMM4AZezP"
    },
    "edges": [
      {
        "node": {
          "title": "Import temperature from Exodus file",
          "author": {
            "login": "fervaldies"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI am currently trying to run a phase-field simulation to check the solidification of some grains. I would like to know if I can run a simulation only for the temperature, which creates an exodus file, and then use those temperatures for my solidification simulation. I was thinking that maybe there is a way to import the temperatures for each timestep from the thermal simulation to save time while doing the phase-field simulation. The mesh and timestep are equal for both simulations.",
          "url": "https://github.com/idaholab/moose/discussions/27666",
          "updatedAt": "2024-05-19T16:53:50Z",
          "publishedAt": "2024-05-19T12:01:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to use a SolutionUserObject to load the file at the end of every time step\nThen a SolutionAux to populate a temperature auxiliary variable\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27666#discussioncomment-9489076",
                  "updatedAt": "2024-05-19T16:53:50Z",
                  "publishedAt": "2024-05-19T16:53:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Biaxial compression test-Mohr coulomb fails",
          "author": {
            "login": "ranjeet270"
          },
          "bodyText": "Hi,\nI am trying to this Biaxial compression test from the PLAXIS module.\n \n\nHere is my input file and I am getting error:\nTime Step 1, time = 0.1, dt = 0.1\n0 Nonlinear |R| = 8.495793e+00\n0 Linear |R| = 8.495793e+00\nAfter reducing the stepsize to 0.0078125 with original strain increment with L2norm 2.36573e-09 the returnMap algorithm failed\n++++++++++++++++++++++++\nChecking the derivatives\n++++++++++++++++++++++++\nDebug Parameters are as follows\nstress =\n-2.33717e-08     1.89488e-10               0\n1.89488e-10    -1.37257e-08               0\n0               0    -9.27434e-09",
          "url": "https://github.com/idaholab/moose/discussions/27664",
          "updatedAt": "2024-05-19T04:07:22Z",
          "publishedAt": "2024-05-19T03:27:24Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow: EOS for Water, Salt, Gas with precipitation and dissolution at elevated temperatures",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello, this issue is related to ticket #23280. It turns out that the optimal EOS for my simulation should have salt precipitation and dissolution and should also account for porosity and permeability variation. TOUGH2\u2019s EWASG (Battistelli,1997), instead of EOS4, seems the most appropriate. I, however, struggle to get the EWASG equivalent in PF. The closest I could get are PorousFlowWaterNCG  and PorousFlowBrineCO2. The latter seems more suitable, so I tried simulating TOUGH2\u2019s EWASG example with it, but my simulation did not converge. It is probably because the PorousFlowBrineCO2 does not include the effect of dissolution and precipitation of halite. Could you please recommend a PF fluid state module that can do this? Or do I need to make any code modifications to PorousFlowBrineCO2? I attached my input file for the EWASG example that I tried. Thanks.\n[Mesh]\n[gen]\n  type = GeneratedMeshGenerator\n  dim = 2\n  xmin = 5\n  xmax = 10000 #10000\n  nx = 100        #100    \n  bias_x = 1.01\n  ymin = -500\n  ymax = 0.0\n  ny = 1\n  []\n  coord_type = RZ\n[]\n\n\n[FluidProperties]\n  [co2]\n    type = CO2FluidProperties\n  []\n  [brine]\n    type = BrineFluidProperties\n  []\n  [true_water]\n    type = Water97FluidProperties\n  []\n  [tabulated_water]\n    type = TabulatedBicubicFluidProperties\n    fp = true_water\n    temperature_max = 900\n    temperature_min = 250\n    pressure_max = 1E8\n    interpolated_properties = 'density viscosity enthalpy internal_energy'\n    fluid_property_file = water97_tabulated_11.csv\n  []\n  [true_co2]\n    type = CO2FluidProperties\n  []\n  [tabulated_co2]\n    type = TabulatedBicubicFluidProperties\n    fp = true_co2\n    temperature_max = 900\n    temperature_min = 250\n    pressure_max = 1E8\n    interpolated_properties = 'density viscosity enthalpy internal_energy'\n    fluid_property_file = co2_tabulated_11.csv\n  []\n[]\n\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pgas zi temperature'\n    number_fluid_phases = 2\n    number_fluid_components = 3\n  []\n  [pc]\n    type = PorousFlowCapillaryPressureConst\n    pc = 0\n  []\n  [fs]\n    type = PorousFlowBrineCO2\n    brine_fp = brine\n   co2_fp = co2\n#    type = PorousFlowWaterNCG\n#    water_fp = true_water\n#    gas_fp =  true_co2           \n    capillary_pressure = pc\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n  gravity = '0.8  0.8  0.8'\n  temperature_unit = Celsius\n[]\n\n[Variables]\n  [pgas]\n    initial_condition = 6e6\n  []\n  [temperature]\n    initial_condition = 275.55\n  []\n  [zi]\n  []\n[]\n\n[ICs]\n  [zi]\n    type = PorousFlowFluidStateIC\n    variable = zi\n    saturation = 0.45\n    gas_porepressure = pgas\n    temperature = temperature\n    fluid_state = fs\n  []\n[]\n\n\n[AuxVariables]\n  [Xnacl]\n    initial_condition = 0.3\n  []\n [sgas]\n   order = CONSTANT\n   family = MONOMIAL\n []\n  [sbrine]\n   order = CONSTANT\n   family = MONOMIAL\n  []\n[]\n\n\n[AuxKernels]\n  [sgas]\n    type = PorousFlowPropertyAux\n    property = saturation\n    phase = 1\n    variable = sgas\n  []\n  [sbrine]\n    type = PorousFlowPropertyAux\n    property = saturation\n    phase = 0\n    variable = sbrine\n  []\n[]\n\n[Kernels]\n  [mass0]\n    type = PorousFlowMassTimeDerivative\n    variable = pgas\n    fluid_component = 0\n  []\n  [adv0]\n    type = PorousFlowAdvectiveFlux\n    variable = pgas\n    fluid_component = 0\n  []\n  [mass1]\n    type = PorousFlowMassTimeDerivative\n    variable = zi\n    fluid_component = 1\n  []\n  [adv1]\n    type = PorousFlowAdvectiveFlux\n    variable = zi\n    fluid_component = 1\n  []\n  [energy]\n    type = PorousFlowEnergyTimeDerivative\n    variable = temperature\n  []\n  [heat_adv]\n    type = PorousFlowHeatAdvection\n    variable = temperature\n  []  \n  [conduction]\n    type = PorousFlowHeatConduction\n    variable = temperature\n  []\n[]\n\n\n[Materials]\n  [temperature]\n    type = PorousFlowTemperature\n    temperature = temperature\n  []\n  [brineCo2Properties]\n    type = PorousFlowFluidState\n    gas_porepressure = pgas\n    z = zi\n    temperature = temperature\n    xnacl = Xnacl\n    capillary_pressure = pc\n    fluid_state = fs\n  []\n  [porosity]\n    type = PorousFlowPorosityConst\n    porosity = 0.05\n  []\n  [permeability]\n    type = PorousFlowPermeabilityConst\n    permeability = '50e-15 0 0   0 50e-15 0   0 0 50e-15'\n  []\n  [relperm0]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 4\n    s_res = 0.30\n    sum_s_res = 0.35\n    phase = 0\n  []\n  [relperm1]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 4\n    s_res = 0.30\n    sum_s_res = 0.35\n    phase = 1\n  []\n  [rock_heat]\n    type = PorousFlowMatrixInternalEnergy\n    specific_heat_capacity = 1000\n    density = 2600\n  [] \n  [rock_thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '2 0 0  0 2 0  0 0 2'\n  []\n[]\n\n\n[DiracKernels]\n  [fluid_produce]   \n    type = PorousFlowSquarePulsePointSource\n    point = '5 -250 0'\n    mass_flux = -1.3e-4   # -65  #-0.033   # \n    variable = pgas\n  []\n[]\n\n[VectorPostprocessors]\n  [vars]\n    type = NodalValueSampler\n    sort_by = x\n    variable = 'pgas zi Xnacl'\n    execute_on = 'timestep_end'\n    outputs = spatial\n  []\n  [auxvars]\n    type = ElementValueSampler\n    sort_by = x\n    variable = 'sbrine sgas'\n    execute_on = 'timestep_end'\n    outputs = spatial\n  []\n[]\n\n[Postprocessors]\n  [Pgas]\n    type = PointValue\n   point =  '5 0 0'\n    variable = pgas\n  []\n  [sgas]\n    type = PointValue\n    point =  '5 0 0'\n    variable = sgas\n  []\n  [sbrine]\n    type = PointValue\n    point =  '5 0 0'\n    variable = sbrine\n  []\n  [Xnacl]\n    type = PointValue\n    point =  '5 0 0'\n    variable = Xnacl\n  []\n[]\n\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n    petsc_options_iname = '-ksp_type -pc_type -sub_pc_type -sub_pc_factor_shift_type'\n    petsc_options_value = 'gmres bjacobi lu NONZERO'\n  []\n[]\n\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  end_time = 2e6\n  nl_max_its = 25\n  l_max_its = 100\n  dtmax = 1e5\n  nl_abs_tol = 1e-20\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 100\n  []\n[]\n\n[Outputs]\n  exodus = true\n  sync_times = '1e4 1e5 2e6'\n  [time]\n    type = CSV\n  []\n  [spatial]\n    type = CSV\n    sync_only = true\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/23701",
          "updatedAt": "2024-05-19T00:47:37Z",
          "publishedAt": "2023-03-13T17:37:34Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Yeah, WaterNCG is probably closest but doesn't do brine so no salt. BrineCO2 is functionally equivalent to TOUGHS ECO2N, so not quite what you are after.\nI think extending WaterNCG to be BrineNCG is probably what you want, but it would take some coding. I'm happy to chat about this and work out how to do it.",
                  "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5319665",
                  "updatedAt": "2023-03-15T10:05:33Z",
                  "publishedAt": "2023-03-15T10:05:32Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @cpgr, thanks a lot! I\u2019m motivated to know about your willingness to guide me on this. As you might already know, I updated the ticket after thoroughly reviewing the documentation on PorousFlowBrineCO2 module. It turns out that PorousFlowBrineCO2 allows high temperatures up to 300\u2103 (just what I need) compared to TOUGH\u2019S ECO2N. Since CO2 occupies most of NCG (approx.. 90%) and PorousFlowBrineCO2 already has three components compared to PorousFlowWaterNCG, I already began updating the former to include the effect of halite dissolution and precipitation. I will consider switching to the latter.\nMy biggest challenge, according to section 2.1 of Blanco et al. (https://doi.org/10.1007/s11242-018-1057-7 )  and section 3.2 of Battistelli et al. (https://www.rockware.com/downloads/documentation/petrasim/Battistelli_Stanford_2017.pdf), is to add an extra phase to represent the solid (halite) phase and accordingly implement the thermodynamic properties of this phase. What do you think?\nSo far, I\u2019m implementing the mass fraction of halite in the gas and aqueous phases based on correlations of Driesner and Heinrich (2007) and Palliser and McKibbin (1998). Please, let me know if I\u2019m on the right path. Thanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5326247",
                          "updatedAt": "2023-03-15T20:05:09Z",
                          "publishedAt": "2023-03-15T19:57:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Before you do too much check out what is in BrineFluidProperties - it most likely has the Driesner work already!",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5326667",
                          "updatedAt": "2023-03-15T20:54:56Z",
                          "publishedAt": "2023-03-15T20:54:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks for the heads up, @cpgr. You save me from doing extra work. To compute the mass fraction, I need the solubility of the halite in water. BrineFluidProperties indeed has this solubility but it is based on Potter et al. (1997). I will update it with Driesner.",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5327049",
                          "updatedAt": "2023-03-15T21:50:33Z",
                          "publishedAt": "2023-03-15T21:50:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @cpgr, I updated the BrineFluidProperties with the halite solubilities. I called it BrineFluidPropertiesBeta. The main modifications are the functions haliteSolubilityWater and haliteSolubilityGas on lines 123 and 132 in the header file (see attached). It compiles successfully, but I keep getting the following object error when I test it. Any hints, please?\n*** ERROR ***\nA 'FluidProperties' object already exists with the name 'brine:water'.\n\nBrineFluidPropertiesBeta_C.txt\nBrineFluidPropertiesBeta_h.txt",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5337432",
                          "updatedAt": "2023-03-16T17:58:04Z",
                          "publishedAt": "2023-03-16T17:54:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "maybe you are unlucky and the name already does exist from the base class?\ncan you try changing this a little like this\n  const std::string water_name = name() + \":water_new_new\";\n  {\n    const std::string class_name = \"Water97FluidProperties\";\n    InputParameters params = _app.getFactory().getValidParams(class_name);\n    if (_tid == 0)\n      _fe_problem.addUserObject(class_name, water_name, params);",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5337566",
                          "updatedAt": "2023-03-16T18:10:23Z",
                          "publishedAt": "2023-03-16T18:10:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I think @GiudGiud  is correct, although you might not need to add the water user object again if you are inheriting from BrineFluidProperties? Or else you might have two of them?",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5338632",
                          "updatedAt": "2023-03-16T20:27:58Z",
                          "publishedAt": "2023-03-16T20:27:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @GiudGiud  and @cpgr, sorry, I\u2019m probably missing something (maybe in my input file). I made the modifications (to the source file) that @GiudGiud  correctly pointed out and also changed the brine fluidName from brine to brine_new, but I\u2019m getting a new error:\n*** ERROR ***\n/home/iyevugah/MOOSE/projects/ergs/problemEOS/ewasg2.i:66: (UserObjects/fs/brine_fp):\n    A valid Brine FluidProperties UserObject must be provided\n\nI modified part of the input file above as follows:\n[FluidProperties]\n  [brine_new]\n    type = BrineFluidPropertiesBeta\n  []\n  [co2]\n    type = CO2FluidProperties\n  []\n  [water_new]\n    type = Water97FluidProperties\n  []\n  [tabulated_water]\n    type = TabulatedBicubicFluidProperties\n    fp = water_new\n    temperature_max = 900\n    temperature_min = 250\n    pressure_max = 1E8\n    interpolated_properties = 'density viscosity enthalpy internal_energy'\n    fluid_property_file = water97_tabulated_11.csv\n  []\n  [true_co2]\n    type = CO2FluidProperties\n  []\n  [tabulated_co2]\n    type = TabulatedBicubicFluidProperties\n    fp = true_co2\n    temperature_max = 900\n    temperature_min = 250\n    pressure_max = 1E8\n    interpolated_properties = 'density viscosity enthalpy internal_energy'\n    fluid_property_file = co2_tabulated_11.csv\n  []\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'pgas zi temperature'\n    number_fluid_phases = 2\n    number_fluid_components = 3\n  []\n  [pc]\n    type = PorousFlowCapillaryPressureConst\n    pc = 0\n  []\n  [fs]\n    type = PorousFlowBrineSaltCO2\n    brine_fp = brine_new\n    water_fp = water_new\n    co2_fp = co2          \n    capillary_pressure = pc\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5338769",
                          "updatedAt": "2023-03-16T20:49:39Z",
                          "publishedAt": "2023-03-16T20:46:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Your PorousFlowBrineSaltCO2 user object will have the following (if it inherits from BrineCO2)\n  if (_brine_fp.fluidName() != \"brine\")\n    paramError(\"brine_fp\", \"A valid Brine FluidProperties UserObject must be provided\");\n\nYou should leave BrineFluidPropertiesBeta::fluidName() = 'brine' to avoid this.",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5338809",
                          "updatedAt": "2023-03-16T20:52:16Z",
                          "publishedAt": "2023-03-16T20:52:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Awesome! Finally, It works! I think I was overthinking this issue :). Now I can move on and implement the mass fractions and the solid phase thermodynamic properties in my PorousFlowBrineSaltCO2. Thanks, @GiudGiud and @cpgr. Please, let me know if you have any feedback on the correlation. I specified the pages and the references in the source file for the BrineFluidPropertiesBeta.",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5339010",
                          "updatedAt": "2023-03-16T21:27:50Z",
                          "publishedAt": "2023-03-16T21:26:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @GiudGiud  and @cpgr. All is looking good. I successfully implemented the mass fractions of halite and its thermodynamic properties. I, however, ran into a major issue. Since my model includes a solid phase, I must consider a multiphase system (Liquid-gas-solid). The phase state enum from the PorousFlowFluidStateBase currently supports only two-phase systems (liquid-gas). Is there a way around it so I can implement a multiphase system? I\u2019m looking at six combinations from a liquid-gas-solid phase instead of the three existing ones from the liquid-gas option (i.e., Liquid, Gas, Twophase). Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23701#discussioncomment-5350013",
                          "updatedAt": "2023-03-17T21:13:32Z",
                          "publishedAt": "2023-03-17T21:13:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about ConstantBounds and VariableOldValueBounds not working",
          "author": {
            "login": "Yasunaoka"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello MOOSE community!\nI've recently been working on the phase field fracture problem, where the phase field parameters need to be constrained to boundaries of 0 and 1 and monotonically increasing. I found that ConstantBounds and VariableOldValueBounds met my requirements well, and I made my input file settings as follows:\n\n[Bounds]\n  [irreversibility]\n    type = VariableOldValueBounds\n    variable = bounds_dummy\n    bounded_variable = c\n    bound_type = lower\n  []\n  [upper]\n    type = ConstantBounds\n    variable = bounds_dummy\n    bounded_variable = c\n    bound_type = upper\n    bound_value = 1.0\n  []\n[]\n\n[Executioner]\n   type = Transient\n   petsc_options_iname = '-pc_type -pc_factor_shift  -snes_type'\n   petsc_options_value = 'lu NONZERO vinewtonrsls'\n\n  [TimeIntegrator]\n    type = ActuallyExplicitEuler\n    solve_type = lumped\n  []\n[]\n\nHowever, from what I've observed, they don't seem to be working correctly:\nTime Step 21987, time = 11.8948, dt = 0.0005\n Solve Converged!\nfracture0: \nfracture0: Time Step 21987, time = 11.8948, dt = 0.0005\nfracture0:  Solve Converged!\n\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | max_c          | max_von        | min_degration  | numelemqps     | time_step      |\n+----------------+----------------+----------------+----------------+----------------+----------------+\n:                :                :                :                :                :                :\n|   1.188778e+01 |   7.880643e-01 |   9.987684e+02 |   1.086355e-01 |   1.451520e+06 |   5.000000e-04 |\n|   1.188828e+01 |   7.910732e-01 |   9.985850e+02 |   1.060929e-01 |   1.451520e+06 |   5.000000e-04 |\n|   1.188878e+01 |   7.944909e-01 |   1.000007e+03 |   1.032356e-01 |   1.451520e+06 |   5.000000e-04 |\n|   1.188928e+01 |   7.983761e-01 |   1.001331e+03 |   1.000241e-01 |   1.451520e+06 |   5.000000e-04 |\n|   1.188978e+01 |   8.027761e-01 |   1.000273e+03 |   9.643148e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189028e+01 |   8.077593e-01 |   9.986019e+02 |   9.241737e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189078e+01 |   8.134319e-01 |   9.969938e+02 |   8.791847e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189128e+01 |   8.198848e-01 |   9.980568e+02 |   8.287774e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189178e+01 |   8.268397e-01 |   1.000820e+03 |   7.748472e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189228e+01 |   8.329732e-01 |   1.001274e+03 |   7.268414e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189278e+01 |   8.390025e-01 |   1.002774e+03 |   6.800265e-02 |   1.451520e+06 |   5.000000e-04 |\n|   1.189328e+01 |   8.471114e-01 |   1.002910e+03 |   6.219615e-02 |   1.451520e+06 |   5.060536e-04 |\n|   1.189378e+01 |   1.495091e+00 |   2.950757e+03 |   8.821367e-05 |   1.451520e+06 |   5.186652e-04 |\n|   1.189430e+01 |   8.508068e-01 |   2.133388e+42 |   1.090975e-01 |   1.451520e+06 |   5.000000e-04 |\n|   1.189480e+01 |   1.003630e+00 |            inf |   1.348090e-02 |   1.451520e+06 |   5.180453e-04 |\n+----------------+----------------+----------------+----------------+----------------+----------------+\n\n\nTime Step 21988, time = 11.8953, dt = 0.000518045\n\nHere I output the global maximum value of the phase fieldmax_c, and I can see that it not only exceeds 1 (violating ConstantBounds), but also decreases (violating VariableOldValueBounds)\nIt should be noted that I have two input files that are linked by MultiApps, both of which are solved by Explicit TimeIntegrator, and I don't know if either of these features would bypass this limitation.\nIs there something wrong with my settings? Any help is greatly appreciated!\nFinally here is my input file\nparent inputfile:\n#use miug mius mm\n[MultiApps]\n  [fracture]\n    type = TransientMultiApp\n    input_files = fracture.i\n    execute_on = TIMESTEP_END\n    clone_parent_mesh = true\n  []\n[]\n\n[Transfers]\n  [from_c]\n    type = MultiAppCopyTransfer\n    from_multi_app = fracture\n    variable = c\n    source_variable = c\n  []\n  [to_shearband_driving_force]\n    type = MultiAppCopyTransfer\n    to_multi_app = fracture\n    variable = shearband_driving_force\n    source_variable = shearband_driving_force\n  []\n[]\n\n[Mesh]\n  allow_renumbering = false\n  [TWC]\n    type = AnnularMeshGenerator\n    rmax = 5\n    rmin = 3.5\n    nt = 960\n    nr = 378\n  []\n[]\n\n[Problem]\n  #restart_file_base = displacement_t_out_cp/LATEST  # You may also use a specific number here\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n[]\n\n[AuxVariables]\n  [c]\n  []\n  [shearband_driving_force]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = MaterialRealAux\n      property = local_energy_dev\n    []\n  []\n  [vonmises]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = RankTwoScalarAux\n      rank_two_tensor = stress\n      variable = vonmises\n      scalar_type = VonMisesStress\n    []\n  []\n  [pressure]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = RankTwoScalarAux\n      rank_two_tensor = stress\n      variable = pressure\n      scalar_type = Hydrostatic\n    []\n  []\n  [temp]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = MaterialRealAux\n      property = T\n      variable = temp\n    []\n  []  \n  [EPS]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = MaterialRealAux\n      property = eqv_plastic_strain\n      variable = EPS\n    []\n  []\n  [yield_factor]\n    order = CONSTANT\n    family = MONOMIAL\n    [AuxKernel]\n      type = MaterialRealAux\n      property = yield_factor\n      variable = yield_factor\n    []\n  []\n  [accel_x]\n  []\n  [vel_x]\n  []\n  [accel_y]\n  []\n  [vel_y]\n  []\n[]\n\n\n[AuxKernels]\n  [accel_x]\n      type = TestNewmarkTI\n      variable = accel_x\n      displacement = disp_x\n      first = false\n  []\n  [vel_x]\n      type = TestNewmarkTI\n      variable = vel_x\n      displacement = disp_x\n  []\n  [accel_y]\n      type = TestNewmarkTI\n      variable = accel_y\n      displacement = disp_y\n      first = false\n  []\n  [vel_y]\n      type = TestNewmarkTI\n      variable = vel_y\n      displacement = disp_y\n  []\n[]\n\n[Kernels]\n  [DynamicSolidMechanics]\n    displacements = 'disp_x disp_y'\n    strain = FINITE\n    incremental = true\n    out_of_plane_direction = z\n    planar_formulation = PLANE_STRAIN\n    decomposition_method = HughesWinget\n  []\n  [inertia_x]\n    type = InertialForce\n    variable = disp_x\n    density = density\n    density_scaling = density_scaling\n  []\n  [inertia_y]\n    type = InertialForce\n    variable = disp_y\n    density = density\n    density_scaling = density_scaling\n  []   \n[]\n\n[BCs]\n  [Pressure]\n      [outter_surface]\n          boundary = 'rmax'\n          function = current_pulse\n          displacements = 'disp_x disp_y'\n      []\n  []\n[]\n\n[Functions]\n  [current_pulse]\n      #4Gpa=4e9n/m^2=4e9 kg/(m*s^2)=4e9 kg/(e3e12mm*mius^2)=4e3 miug/(mm*mius^2)\n      type = PiecewiseLinear\n      x = '0\t0.1\t0.2\t0.3\t0.4\t0.5\t0.6\t0.7\t0.8\t0.9\t1\t1.1\t1.2\t1.3\t1.4\t1.5\t1.6\t1.7\t1.8\t1.9\t2\t2.1\t2.2\t2.3\t2.4\t2.5\t2.6\t2.7\t2.8\t2.9\t3\t3.1\t3.2\t3.3\t3.4\t3.5\t3.6\t3.7\t3.8\t3.9\t4\t4.1\t4.2\t4.3\t4.4\t4.5\t4.6\t4.7\t4.8\t4.9\t5\t5.1\t5.2\t5.3\t5.4\t5.5\t5.6\t5.7\t5.8\t5.9\t6\t6.1\t6.2\t6.3\t6.4\t6.5\t6.6\t6.7\t6.8\t6.9\t7\t7.1\t7.2\t7.3\t7.4\t7.5\t7.6\t7.7\t7.8\t7.9\t8\t8.1\t8.2\t8.3\t8.4\t8.5\t8.6\t8.7\t8.8\t8.9\t9\t9.1\t9.2\t9.3\t9.4\t9.5\t9.6\t9.7\t9.8\t9.9\t10\t10.1\t10.2\t10.3\t10.4\t10.5\t10.6\t10.7\t10.8\t10.9\t11\t11.1\t11.2\t11.3\t11.4\t11.5\t11.6\t11.7\t11.8\t11.9\t12\t12.1\t12.2\t12.3\t12.4\t12.5\t12.6\t12.7\t12.8\t12.9\t13\t13.1\t13.2\t13.3\t13.4\t13.5\t13.6\t13.7\t13.8\t13.9\t14\t14.1\t14.2\t14.3\t14.4\t14.5\t14.6\t14.7\t14.8\t14.9\t15\t15.1\t15.2\t15.3\t15.4\t15.5\t15.6\t15.7\t15.8\t15.9\t16\t16.1\t16.2\t16.3\t16.4\t16.5\t16.6\t16.7\t16.8\t16.9\t17\t17.1\t17.2\t17.3\t17.4\t17.5\t17.6\t17.7\t17.8\t17.9\t18\t18.1\t18.2\t18.3\t18.4\t18.5\t18.6\t18.7\t18.8\t18.9\t19\t19.1\t19.2\t19.3\t19.4\t19.5\t19.6\t19.7\t19.8\t19.9\t20'\n      y = '4.02E-02\t4.03E-02\t3.96E-02\t3.93E-02\t2.76E-02\t-8.19E-03\t-8.96E-02\t-2.25E-01\t-4.23E-01\t-6.42E-01\t-8.92E-01\t-1.06E+00\t-1.00E+00\t-5.29E-01\t4.22E-01\t2.00E+00\t4.27E+00\t7.34E+00\t1.12E+01\t1.59E+01\t2.15E+01\t2.80E+01\t3.54E+01\t4.36E+01\t5.25E+01\t6.20E+01\t7.22E+01\t8.31E+01\t9.45E+01\t1.07E+02\t1.19E+02\t1.33E+02\t1.47E+02\t1.61E+02\t1.76E+02\t1.91E+02\t2.07E+02\t2.23E+02\t2.40E+02\t2.56E+02\t2.73E+02\t2.90E+02\t3.07E+02\t3.24E+02\t3.41E+02\t3.59E+02\t3.76E+02\t3.94E+02\t4.11E+02\t4.28E+02\t4.46E+02\t4.63E+02\t4.81E+02\t4.99E+02\t5.17E+02\t5.34E+02\t5.52E+02\t5.69E+02\t5.86E+02\t6.02E+02\t6.19E+02\t6.35E+02\t6.51E+02\t6.67E+02\t6.83E+02\t6.98E+02\t7.13E+02\t7.27E+02\t7.41E+02\t7.55E+02\t7.69E+02\t7.82E+02\t7.95E+02\t8.07E+02\t8.18E+02\t8.29E+02\t8.39E+02\t8.48E+02\t8.56E+02\t8.64E+02\t8.70E+02\t8.75E+02\t8.80E+02\t8.84E+02\t8.87E+02\t8.89E+02\t8.90E+02\t8.90E+02\t8.89E+02\t8.87E+02\t8.84E+02\t8.80E+02\t8.75E+02\t8.68E+02\t8.60E+02\t8.52E+02\t8.43E+02\t8.32E+02\t8.21E+02\t8.09E+02\t7.96E+02\t7.83E+02\t7.69E+02\t7.55E+02\t7.40E+02\t7.26E+02\t7.12E+02\t6.97E+02\t6.82E+02\t6.67E+02\t6.50E+02\t6.33E+02\t6.15E+02\t5.97E+02\t5.79E+02\t5.61E+02\t5.42E+02\t5.23E+02\t5.03E+02\t4.83E+02\t4.64E+02\t4.45E+02\t4.26E+02\t4.07E+02\t3.88E+02\t3.70E+02\t3.52E+02\t3.35E+02\t3.17E+02\t3.00E+02\t2.82E+02\t2.65E+02\t2.49E+02\t2.33E+02\t2.17E+02\t2.02E+02\t1.87E+02\t1.72E+02\t1.59E+02\t1.45E+02\t1.32E+02\t1.20E+02\t1.08E+02\t9.71E+01\t8.63E+01\t7.61E+01\t6.63E+01\t5.69E+01\t4.83E+01\t4.03E+01\t3.31E+01\t2.66E+01\t2.09E+01\t1.59E+01\t1.15E+01\t7.91E+00\t4.95E+00\t2.66E+00\t9.90E-01\t4.47E-02\t-2.36E-01\t2.15E-01\t1.34E+00\t3.22E+00\t5.72E+00\t8.89E+00\t1.27E+01\t1.72E+01\t2.23E+01\t2.81E+01\t3.47E+01\t4.18E+01\t4.97E+01\t5.81E+01\t6.73E+01\t7.71E+01\t8.72E+01\t9.79E+01\t1.09E+02\t1.20E+02\t1.32E+02\t1.44E+02\t1.57E+02\t1.70E+02\t1.83E+02\t1.96E+02\t2.10E+02\t2.24E+02\t2.38E+02\t2.52E+02\t2.67E+02\t2.82E+02\t2.97E+02\t3.12E+02\t3.27E+02\t3.42E+02\t3.56E+02\t3.71E+02\t3.85E+02\t3.99E+02\t4.13E+02'\n  []\n[]\n\n[Materials]\n  [density]\n    type = Density\n    displacements = 'disp_x disp_y'\n    density = 7.9e3 #miug/mm^3\n  []\n  [density_scaling]\n    type = DensityScaling\n    density = density\n    desired_time_step = 0.0005\n    output_properties = density_scaling\n    outputs = 'exodus'\n    factor = 0.8\n  []\n  [strain]\n    type = ComputeFiniteStrain\n    displacements = 'disp_x disp_y'\n    implicit = false\n    decomposition_method = HughesWinget\n  []\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    shear_modulus = 77.5e3  #77.5Gpa\n    poissons_ratio = 0.3\n  []\n  [damage_stress]\n    type = JCEOSnlnotemp\n    A = 110#Mpa\n    B = 1500\n    n = 0.36\n    C = 0.025\n    reference_strain_rate = 1\n    m = 0.81\n    T_m = 1800#kelvin\n    T_r = 298\n    T_i = 298\n    SpecHeat = 500e-6 #1e-6mm^2/(mius^2*kelvin)=1*m*m/(s*s*kelvin)\n    D_i = 7.9e3\n    ShearModule = 77.5e3\n    C0 = 4569e-3 #1e-3 mm/mius = 1m/s\n    S1 = 1.49\n    gamma0 = 2.17\n    a = 0\n    read_prop_user_object = prop_read\n    c = c\n    D_name = 'degradation'\n    shearband_driving_force_name = local_energy_dev\n  []\n  [degradation]#a1\n    type = DerivativeParsedMaterial\n    property_name = degradation\n    coupled_variables = 'c'\n    expression = '((1.0-c)^2)/(((1.0-c)^2)+a1*c*(1-0.5*c))'\n    constant_names       = 'a1'\n    constant_expressions = '0.8'\n    derivative_order = 2\n  []\n[]\n\n[UserObjects]\n  [prop_read]\n    type = PropertyReadFile\n    prop_file_name = 0.02722_0.5606.txt\n    nprop = 1\n    read_type = element\n  []\n[]\n\n[Postprocessors]\n  [numelemqps]\n    type = NumElemQPs\n  []\n  [max_c]\n    type = NodalExtremeValue\n    variable = c\n  []\n  [max_von]\n    type = ElementExtremeValue\n    variable = vonmises\n  []\n  [min_degration]\n    type = ElementExtremeMaterialProperty\n    mat_prop = degradation\n    value_type = min\n  []\n  [time_step]\n    type = CriticalTimeStep\n    factor = 0.8\n    density = density\n    density_scaling = density_scaling\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  start_time = 0\n  end_time = 20\n  [TimeIntegrator]\n    type = CentralDifference\n    solve_type = lumped\n  []\n  [TimeStepper]\n    type = PostprocessorDT\n    postprocessor = time_step\n  []\n[]\n\n[Outputs]\n  [exodus]\n    type = Exodus\n    start_time = 0\n    end_time = 20\n    interval = 250\n  []\n  [exodus_detail]\n    type = Exodus\n    start_time = 11.7\n    end_time = 20\n    interval = 2\n  []\n  [checkpoint]\n    type = Checkpoint\n    interval = 100\n    num_files = 10\n  []\n[]\n\nsub inputfile\n#use miug mius mm\n[Mesh]\n[]\n\n[AuxVariables]\n  [shearband_driving_force]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [bounds_dummy]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[Bounds]\n  [irreversibility]\n    type = VariableOldValueBounds\n    variable = bounds_dummy\n    bounded_variable = c\n    bound_type = lower\n  []\n  [upper]\n    type = ConstantBounds\n    variable = bounds_dummy\n    bounded_variable = c\n    bound_type = upper\n    bound_value = 1.0\n  []\n[]\n\n[Variables]\n  [c]\n    order = FIRST\n    family = LAGRANGE\n  []\n[]\n\n[Kernels]\n  [trans]\n    type = TimeDerivative\n    variable = c\n  []\n  [Bulk]\n    type = AllenCahn\n    variable = c\n    f_name = F\n    mob_name = L\n  []\n  [ACInterface]\n    type = ACInterface\n    variable = c\n    kappa_name = kappa_op\n    mob_name = L\n  []\n[]\n\n[Materials]\n  [pfbulkmat]\n    type = GenericConstantMaterial\n    prop_names = 'gc_prop l visco'\n    prop_values = '6.666666667\t0.003968254\t1.26001008' # *2/12 before:/8\n\n    #16.8kj/m^2 = 16.8 1e3 N*m/m^2 = 16.8 1e3 N/m = 16.8 10e3 kg/s^2 = 16.8 miug/mius^2\n    #10 mium = 1e-2 mm\n    #yita~(zhang) = yita* c_a * l/gc = 0.01 mius, c_a = 2\n    #yita(origin) = 0.01*gc/(c_a*l) miug/(mm * mius)\n    #visco(moose) = yita(origin)/gc = yita~(zhang)/(c_a*l) = 0.5 mius/mm\n  []\n  [define_mobility]\n    type = ParsedMaterial\n    material_property_names = 'gc_prop visco'\n    property_name = L\n    expression = '1.0/(gc_prop * visco)'\n  []\n  [define_kappa]\n    type = ParsedMaterial\n    material_property_names = 'gc_prop l'\n    property_name = kappa_op\n    expression = 'gc_prop * l'#kappa = 2gc * l/c_a), c_a = 2\n  []\n  [local_fracture_energy]#c_a = 2, a(d) = d^2, f_frac = (1/c_a) * (gc/l) * a(d)\n    type = DerivativeParsedMaterial\n    property_name = local_fracture_energy\n    coupled_variables = 'c'\n    material_property_names = 'gc_prop l'\n    expression = '(c^2 * gc_prop)/(2 * l)'\n    derivative_order = 2\n  []\n  [fracture_driving_energy]\n    type = DerivativeParsedMaterial\n    coupled_variables = 'c shearband_driving_force'\n    material_property_names = 'local_fracture_energy(c) degradation(c)'\n    expression = 'local_fracture_energy + degradation * shearband_driving_force'\n    derivative_order = 2\n    property_name = F\n  []\n  [degradation]#a1\n    type = DerivativeParsedMaterial\n    property_name = degradation\n    coupled_variables = 'c'\n    expression = '((1.0-c)^2)/(((1.0-c)^2)+a1*c*(1-0.5*c))'\n    constant_names       = 'a1'\n    constant_expressions = '0.8'\n    derivative_order = 2\n  []\n[]\n\n[Executioner]\n   type = Transient\n   petsc_options_iname = '-pc_type -pc_factor_shift  -snes_type'\n   petsc_options_value = 'lu NONZERO vinewtonrsls'\n\n  [TimeIntegrator]\n    type = ActuallyExplicitEuler\n    solve_type = lumped\n  []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27645",
          "updatedAt": "2024-05-18T15:41:00Z",
          "publishedAt": "2024-05-16T13:46:14Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCan you use an implicit time stepper?\nThe explicit time stepper skips a lot of steps, because of the reduced solve needs. I would not be surprised if bounds are not included in explicit time stepping\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27645#discussioncomment-9459007",
                  "updatedAt": "2024-05-16T14:30:41Z",
                  "publishedAt": "2024-05-16T14:30:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Yasunaoka"
                          },
                          "bodyText": "Hello\nThank you for your suggestion. After using the implicit time stepper, they worked properly.",
                          "url": "https://github.com/idaholab/moose/discussions/27645#discussioncomment-9480244",
                          "updatedAt": "2024-05-18T15:40:47Z",
                          "publishedAt": "2024-05-18T15:40:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Could Not GetMaterialProperty in Kernel",
          "author": {
            "login": "FanZhangchen"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi,\nI have met a problem I could not get material property from a material subroutine. I tried to print out the output of the material property with MooseWarning, and it has some values inside the quadrature point. However, when I tried to use ElementAverageValue to determine whether the kernel got the material property, I found it is zero and does not change over time. So I wonder if I might make some mistakes in the kernel or material subroutine. Could you give me some advice? Thank you.\nHere is the material subroutine that I declared the material property:\n_edge_dislocation_increment(declareProperty<std::vector<Real>>(\"edge_dislocation_increment\")),\n    _edge_dislocation_increment_old(\n        getMaterialPropertyOld<std::vector<Real>>(\"edge_dislocation_increment\")),\n\n    _screw_dislocation_increment(declareProperty<std::vector<Real>>(\"screw_dislocation_increment\")),\n    _screw_dislocation_increment_old(\n        getMaterialPropertyOld<std::vector<Real>>(\"screw_dislocation_increment\"))\n\nAnd here is the code in kernel\n_edge_dislocation_increment(\n        getMaterialProperty<std::vector<Real>>(\"edge_dislocation_increment\")),\n    _screw_dislocation_increment(\n        getMaterialProperty<std::vector<Real>>(\"screw_dislocation_increment\")),\n\nAnd is there any test I could use to find out where leads to the problems?\nBest,\nZhangchen",
          "url": "https://github.com/idaholab/moose/discussions/27616",
          "updatedAt": "2024-05-18T02:51:50Z",
          "publishedAt": "2024-05-14T11:51:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nElementAverageValue only works with variables\nhttps://mooseframework.inl.gov/source/postprocessors/ElementAverageValue.html\nFor material properties you would work with this one:\nhttps://mooseframework.inl.gov/source/postprocessors/ElementAverageMaterialProperty.html\nThis looks fine.\nCan you check the header too for the declarations of _edge_dislocation_increment and _screw_dislocation_increment in both the material and the kernel?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9434571",
                  "updatedAt": "2024-05-14T14:19:38Z",
                  "publishedAt": "2024-05-14T14:19:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Hi\nI made it an auxvariable and auxkernel with MaterialStdVectorAux.\nHere is the material header\nMaterialProperty<std::vector<Real>> & _edge_dislocation_increment;\n  const MaterialProperty<std::vector<Real>> & _edge_dislocation_increment_old;\n\n  MaterialProperty<std::vector<Real>> & _screw_dislocation_increment;\n  const MaterialProperty<std::vector<Real>> & _screw_dislocation_increment_old;\n\nAnd here is the kernel header\nMaterialProperty<std::vector<Real>> & _edge_dislocation_increment;\n  const MaterialProperty<std::vector<Real>> & _edge_dislocation_increment_old;\n\n  MaterialProperty<std::vector<Real>> & _screw_dislocation_increment;\n  const MaterialProperty<std::vector<Real>> & _screw_dislocation_increment_old;\n\nI checked these headers and found nothing leads to the problems. It seems correct to me.\nzc",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9439725",
                          "updatedAt": "2024-05-15T01:13:52Z",
                          "publishedAt": "2024-05-15T01:13:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Sorry, I pasted the wrong header of kernel, here is the kernel header\n  // SSD for edge dislocation density\n  const MaterialProperty<std::vector<Real>> & _edge_dislocation_increment;\n\n  // SSD for screw dislocation density\n  const MaterialProperty<std::vector<Real>> & _screw_dislocation_increment;",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9443902",
                          "updatedAt": "2024-05-15T10:04:53Z",
                          "publishedAt": "2024-05-15T10:04:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok these look good.\nSo what are you using the check these material properties?",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9444819",
                          "updatedAt": "2024-05-15T11:53:59Z",
                          "publishedAt": "2024-05-15T11:53:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "I used mooseWarning(\"_edge_dislocation_increment: \", _edge_dislocation_increment[_qp][i]); to print out the _edge_dislocation_increment directly in the material subroutine to determine if there is any change in the material variable. And I use the MaterialStdVectorAux and ElementAverageValue to print out it in the postprocessors to check if the material variable is called correctly in the kernel.\nIs that a correct way?",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9444880",
                          "updatedAt": "2024-05-15T11:59:59Z",
                          "publishedAt": "2024-05-15T11:59:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "MaterialStdVectorAux and ElementAverageValue should work\nDid you print the same components with the warning and the MaterialStdVectorAux ?\nwhen did you execute the MaterialStdVectorAux ?\nwhen you visualized the result, did you make sure to go to the last time step? paraview looks at the first time step by default, where everything is 0",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9444987",
                          "updatedAt": "2024-05-15T12:08:49Z",
                          "publishedAt": "2024-05-15T12:08:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Yes, it is the edge_dislocation_increment. Here is the MaterialStdVectorAux part\n[./edi]\n   type = MaterialStdVectorAux\n   variable = edge_dislocation_increment\n   property = edge_dislocation_increment\n   execute_on = timestep_end\n[../]\n\nAnd I print out it to a csv file\n[Outputs]\n  exodus = true\n  time_step_interval = 10\n  [csv]\n    type = CSV\n    file_base = data_output_111\n    execute_on = timestep_end\n  []\n[]\n\nSo I could check the csv if the edge_dislocation_increment is changed. And I found it is zero at each timestep_end in the csv while the warning show it has values.",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9445077",
                          "updatedAt": "2024-05-15T12:15:26Z",
                          "publishedAt": "2024-05-15T12:15:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you are only outputting component 0 of that vector with this.\nAnd you are seeing the global average value. So if on average it is 0, then you see 0\nMaybe look at the field using Exodus output?",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9445153",
                          "updatedAt": "2024-05-15T12:19:58Z",
                          "publishedAt": "2024-05-15T12:19:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "I have checked it using Exodus output, and it is also zero. And in the calculation, the material property should contribute to generate some dislocation in the kernel part and I did not find any generation of dislocation in the Exodus. So I think it might something wrong in my code.\nBut I have a question here\n\nI used a MaterialStdVectorAux, so should it be a vector?",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9445254",
                          "updatedAt": "2024-05-15T12:28:35Z",
                          "publishedAt": "2024-05-15T12:28:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "MaterialStdVectorAux only outputs one component at a time. You are looking at component 0",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9445293",
                          "updatedAt": "2024-05-15T12:31:20Z",
                          "publishedAt": "2024-05-15T12:31:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Thank you for your correction. I changed the index to the other component, and some are not zero which is correct for my understanding. But it is not the problem in my code. Could you please see my kernel part code if the _edge_dislocation_increment is correctly called in it?\nReal\nConservativeAdvectionSchmid::negSpeedQp()\n{\n  Real edge_sign;\n\n  switch (_dislo_sign)\n  {\n    case DisloSign::positive:\n      edge_sign = 1.0;\n      break;\n    case DisloSign::negative:\n      edge_sign = -1.0;\n      break;\n  }\n\n  _velocity.resize(3, 0.0);\n\n  // Find dislocation velocity based on slip systems index and dislocation character\n  switch (_dislo_character)\n  {\n    case DisloCharacter::edge:\n      for (const auto j : make_range(LIBMESH_DIM))\n      {\n        _velocity[j] =\n            _edge_slip_direction[_qp][_slip_sys_index * LIBMESH_DIM + j]; // edge direction\n      }\n      break;\n    case DisloCharacter::screw:\n      for (const auto j : make_range(LIBMESH_DIM))\n      {\n        _velocity[j] =\n            _screw_slip_direction[_qp][_slip_sys_index * LIBMESH_DIM + j]; // screw direction\n      }\n      break;\n  }\n\n  for (const auto j : make_range(LIBMESH_DIM))\n  {\n    _velocity[j] *= _dislo_velocity[_qp][_slip_sys_index]; // velocity value\n    _velocity[j] *= edge_sign;                             // positive or negative dislocation\n  }\n\n  return -_grad_test[_i][_qp] * RealVectorValue(_velocity[0], _velocity[1], _velocity[2]);\n}\n\nReal\nConservativeAdvectionSchmid::computeQpResidual()\n{\n  // This is the no-upwinded version\n  // It gets called via Kernel::computeResidual()\n  _statis_stored_dislocation.resize(12, 0.0);\n  _statis_stored_dislocation_increment.resize(12, 0.0);\n  switch (_dislo_character)\n  {\n    case DisloCharacter::edge:\n      _statis_stored_dislocation[_slip_sys_index] =\n          _edge_dislocation_increment[_qp][_slip_sys_index]; // edge ssd\n      break;\n    case DisloCharacter::screw:\n      _statis_stored_dislocation[_slip_sys_index] =\n          _screw_dislocation_increment[_qp][_slip_sys_index]; // screw ssd\n      break;\n  }\n\n  switch (_is_ssd_inclued)\n  {\n    case SSDInclude::yes:\n      _statis_stored_dislocation_increment[_slip_sys_index] = _statis_stored_dislocation[_slip_sys_index];\n      break;\n    case SSDInclude::no:\n      _statis_stored_dislocation_increment[_slip_sys_index] = 0.0;\n      break;\n  }\n\n  return negSpeedQp() * _u[_qp]+ _statis_stored_dislocation_increment[_slip_sys_index];\n}",
                          "url": "https://github.com/idaholab/moose/discussions/27616#discussioncomment-9452482",
                          "updatedAt": "2024-05-16T02:37:20Z",
                          "publishedAt": "2024-05-16T02:37:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "User Defined Material for Mixed Mode Phase Field Fracture Model",
          "author": {
            "login": "DanielChou0916"
          },
          "bodyText": "Dear MOOSE community\nI'm trying to apply a more complex strain energy decomposition approach in phase field fracture model to capture the rock-like material, which is governed by additional variables such as internal friction angle and cohesion.\nThe explicit decompositions for the material 'ComputeLinearElasticPFFractureStress' is scripted in:\n..\\projects\\moose\\modules\\solid_mechanics\\src\\materials\\ComputeLinearElasticPFFractureStress.C\nAnd this file includes the .h file ''ComputeLinearElasticPFFractureStress.h'' in the directory:\n..\\projects\\moose\\modules\\solid_mechanics\\include\\materials\\ComputeLinearElasticPFFractureStress.h\nAs well as two sub-sequence inclusions\n''ComputePFFractureStressBase.h'' and \"ComputeStressBase.h\" from the same folder:\n..\\projects\\moose\\modules\\solid_mechanics\\include\\materials\\ComputePFFractureStressBase.h\nand\n..\\projects\\moose\\modules\\solid_mechanics\\include\\materials\\ComputeStressBase.h\nI'm wondering if I want to use the strain decomposition method which is not included in \"ComputeLinearElasticPFFractureStress.C\".\nTo aviod messing up, I'm planning to create a new MyPPFractureStress.C file, and set up additional inputs and outputs for this, but I would like to know that\nwill I need to also create several new .h files to handle MyPPFractureStress.C?\nDoes anyone has similar experience and is willing to share with me?\nI really appreciate for your patience and time :)\nSincerely",
          "url": "https://github.com/idaholab/moose/discussions/27658",
          "updatedAt": "2024-05-17T15:44:01Z",
          "publishedAt": "2024-05-17T13:05:01Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@1runer",
                  "url": "https://github.com/idaholab/moose/discussions/27658#discussioncomment-9472433",
                  "updatedAt": "2024-05-17T15:44:02Z",
                  "publishedAt": "2024-05-17T15:44:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "To achieve the function of the piecewise function, there is no class that can be used, or a custom equation class",
          "author": {
            "login": "Mrxiongjy"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\n\nHow to implement the function of the segmentation function, is there a class that can be used, or a custom equation class\n[bu]\ntype = ParsedFunction\nExpression (ti ^ 2) = 1.25 * * 270 / (10431 * 235 * 3.1416 * (4.1 * 10 ^ 3) ^ 2) + 0.001\nsymbol_names = 'ti'\nsymbol_values = 'time'\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27656",
          "updatedAt": "2024-05-17T12:12:04Z",
          "publishedAt": "2024-05-17T06:23:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Mrxiongjy"
                  },
                  "bodyText": "How to implement the function of the segmentation function, is there a class that can be used, or a custom equation class\n[bu]\ntype = ParsedFunction\nExpression (ti ^ 2) = 1.25 * * 270 / (10431 * 235 * 3.1416 * (4.1 * 10 ^ 3) ^ 2) + 0.001\nsymbol_names = 'ti'\nsymbol_values = 'time'\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/27656#discussioncomment-9466250",
                  "updatedAt": "2024-05-17T12:09:34Z",
                  "publishedAt": "2024-05-17T06:23:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\ntime is t in parsed expressions.\nis 1.25 * * 270 what you wanted to have? Does not seem correct\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27656#discussioncomment-9469948",
                          "updatedAt": "2024-05-17T12:12:05Z",
                          "publishedAt": "2024-05-17T12:12:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Multiapp transfer in gap heat transfer issue based mortar",
          "author": {
            "login": "jin0123456"
          },
          "bodyText": "Hello\nI want to use the existing function provided in MOOSE to solve a gap heat transfer problem. As my problem involves contact heat transfer so it needs coupling Solid Mechanics module to acquire contact pressure.\nDirectly I choose GapFluxModelPressureDependentConduction in my case like https://github.com/idaholab/moose/blob/dc8a1fb93b481f2d1f6ccb9e1367bd8547ac3650/modules/combined/test/tests/gap_heat_transfer_mortar/finite-2d/closed_gap_thermomechanical_mortar_contact.i.\nBut my problem is more complicated and I need to create multiapp to solve heat conduction and mechanics calculation respectively.\nI noticed there is contact pressure interface_normal_lm  which is a lowervalue so how can I transfer the value from mechanics card to heat conduction card?",
          "url": "https://github.com/idaholab/moose/discussions/27653",
          "updatedAt": "2024-05-17T12:06:47Z",
          "publishedAt": "2024-05-17T02:50:18Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Coupling with gradients of Material property",
          "author": {
            "login": "Ttw0626"
          },
          "bodyText": "Hi, moose-developers, here is Q about the extension of #22910  and #24361\nas these previous anwsers, I would like to calculate the gradient of material property(scalar) locally which means the additional dofs canbe avoid.\nQ1\nin #24361, a new Material object (MaterialPropertyGradient) maybe implemented but I could not find it. How can I use this function to get this MaterialPropertyGradient like getMaterialPropertyGradient<RealVectorValue>() ??\nQ2 if the Q1 not\nI tried the suggestion by gary in his app https://github.com/hugary1995/eel/blob/main/src/materials/chemistry/ChemicalPotential.C#L56-L78, I just changed the derivatives of energys term to local scalar material property. Unfortunately, when I got the gradients of it within computeQpResidual or computeQpJacobian in kernels (not AD), the nodal result is not continuous. Could you give me\nsome helps about the gradient of material property in non-AD kernels ?\nThanks\ntianwen",
          "url": "https://github.com/idaholab/moose/discussions/27615",
          "updatedAt": "2024-05-17T02:49:17Z",
          "publishedAt": "2024-05-14T02:31:13Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@hugary1995",
                  "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9427991",
                  "updatedAt": "2024-05-14T03:01:01Z",
                  "publishedAt": "2024-05-14T03:01:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ttw0626"
                          },
                          "bodyText": "Hi giud, I  wanna make sure I am not misunderstanding, it will help me to solve this problem maybe.\nQ1\nIf I wanna do some operations locally in one element, is it correct focus on computeProperties ?\nafter the Qps loop on computeQpProperty().\nso that, I can get material properties (scalar) on all of Qps in this element using oneMaterialProperty[_qp].\nQ2: Id of Qps in one element\nis it correct using just _qp ?\nQ3: current coordinates of one Qp in one element\nis it correct using just '_q_point[_qp] (x/y/z)' ?\nThanks.\ntianwen",
                          "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9454012",
                          "updatedAt": "2024-05-16T06:59:46Z",
                          "publishedAt": "2024-05-16T06:59:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Q1 for most applications you are meant to implement computeQpProperties not computeProperties\nIf you want to override the computeProperties, yes you will have access to the property at every Qp after a loop calling computeQpProperties",
                          "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9457877",
                          "updatedAt": "2024-05-16T13:05:56Z",
                          "publishedAt": "2024-05-16T13:04:32Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Q2\nYes the index in an element of the properties is _qp",
                          "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9457897",
                          "updatedAt": "2024-05-16T13:06:29Z",
                          "publishedAt": "2024-05-16T13:06:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Q3 that s correct though x should index 0, y index 1 etc",
                          "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9457900",
                          "updatedAt": "2024-05-16T13:07:06Z",
                          "publishedAt": "2024-05-16T13:07:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ttw0626"
                          },
                          "bodyText": "guid, Thanks for these, I understood. That's make sense to me.\ntianwen",
                          "url": "https://github.com/idaholab/moose/discussions/27615#discussioncomment-9464745",
                          "updatedAt": "2024-05-17T02:49:17Z",
                          "publishedAt": "2024-05-17T02:49:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Material Property Problem",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I am trying to use the crystal plasticity model for an already-generated kks model. Below is a snippet of my material block\n  [elasticity_tensor_eta0]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    base_name = eta0\n  []\n  [stress_eta0]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_eta0'\n    tan_mod_type = exact\n    base_name = eta0\n  []\n  [trial_xtalpl_eta0]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 12\n    slip_sys_file_name = input_slip_sys.txt\n    base_name = eta0\n  []\n\n  [elasticity_tensor_eta1]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 45.0\n    euler_angle_3 = 0.0\n    base_name = eta1\n  []\n  [stress_eta1]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_eta1'\n    tan_mod_type = exact\n    base_name = eta1\n  []\n  [trial_xtalpl_eta1]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 48\n    slip_sys_file_name = input_slip_sys_bcc48.txt\n    base_name = eta1\n  []\n\n  [elasticity_tensor_eta2]\n    type = ComputeElasticityTensorCP\n    C_ijkl = '1.684e5 1.214e5 1.214e5 1.684e5 1.214e5 1.684e5 0.754e5 0.754e5 0.754e5'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = 45.0\n    euler_angle_3 = 0.0\n    base_name = eta2\n  []\n  [stress_eta2]\n    type = ComputeMultipleCrystalPlasticityStress\n    crystal_plasticity_models = 'trial_xtalpl_eta2'\n    tan_mod_type = exact\n    base_name = eta2\n  []\n  [trial_xtalpl_eta2]\n    type = CrystalPlasticityKalidindiUpdate\n    number_slip_systems = 48\n    slip_sys_file_name = input_slip_sys_bcc48.txt\n    base_name = eta2\n  []\n\n  # Switching functions for each phase\n  [h0]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta0\n    all_etas = 'eta0 eta1 eta2'\n    h_name = h0\n  []\n  [h1]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta1\n    all_etas = 'eta0 eta1'\n    h_name = h1\n  []\n  [h2]\n    type = SwitchingFunctionMultiPhaseMaterial\n    phase_etas = eta2\n    all_etas = 'eta0 eta1 eta2'\n    h_name = h2\n  []\n\n  # Generate the global stress from the phase stresses\n  [global_stress]\n    type = MultiPhaseStressMaterial\n    phase_base = 'eta0 eta1 eta2'\n    h = 'h0     h1   h2'\n  []\n[]\n\nBelow is the error I am facing\nThe following error occurred in the Problem 'MOOSE Problem' of type FEProblem.check_inp(moose_srv)\nMaterial property 'eta0_mechanical_strain', requested by 'stress_eta0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta0_strain_increment', requested by 'stress_eta0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta0_rotation_increment', requested by 'stress_eta0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta0_deformation_gradient', requested by 'stress_eta0' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta1_mechanical_strain', requested by 'stress_eta1' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta1_strain_increment', requested by 'stress_eta1' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta1_rotation_increment', requested by 'stress_eta1' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta1_deformation_gradient', requested by 'stress_eta1' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta2_mechanical_strain', requested by 'stress_eta2' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta2_strain_increment', requested by 'stress_eta2' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta2_rotation_increment', requested by 'stress_eta2' is not defined on block 0check_inp(moose_srv)\nMaterial property 'eta2_deformation_gradient', requested by 'stress_eta2' is not defined on block 0check_inp(moose_srv)\n\nI have tried to add _base_name to some of the material properties in the \" ComputeMultipleCrystalPlasticityStress.C\" but it still did not work. I am a beginner with MOOSE.",
          "url": "https://github.com/idaholab/moose/discussions/27652",
          "updatedAt": "2024-05-17T00:48:31Z",
          "publishedAt": "2024-05-16T23:22:13Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Use Debug/show_material_props to find out which material is declaring the property that is missing and with which name",
                  "url": "https://github.com/idaholab/moose/discussions/27652#discussioncomment-9463894",
                  "updatedAt": "2024-05-17T00:16:14Z",
                  "publishedAt": "2024-05-17T00:16:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "This is the output of debug\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_eta0\n      Property Names:      \"eta0_Euler_angles\" \"eta0_crysrot\" \"eta0_effective_stiffness\" \"eta0_elasticity_tensor\" \n                             \n      Material Name:       stress_eta0\n      Property Names:      \"eta0_Jacobian_mult\" \"eta0_elastic_strain\" \"eta0_plastic_deformation_gradient\" \n                             \"eta0_rotation_total\" \"eta0_stress\" \"eta0_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta0\n      Property Names:      \"eta0_applied_shear_stress\" \"eta0_flow_direction\" \"eta0_slip_increment\" \"eta0_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta1\n      Property Names:      \"eta1_Euler_angles\" \"eta1_crysrot\" \"eta1_effective_stiffness\" \"eta1_elasticity_tensor\" \n                             \n      Material Name:       stress_eta1\n      Property Names:      \"eta1_Jacobian_mult\" \"eta1_elastic_strain\" \"eta1_plastic_deformation_gradient\" \n                             \"eta1_rotation_total\" \"eta1_stress\" \"eta1_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta1\n      Property Names:      \"eta1_applied_shear_stress\" \"eta1_flow_direction\" \"eta1_slip_increment\" \"eta1_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta2\n      Property Names:      \"eta2_Euler_angles\" \"eta2_crysrot\" \"eta2_effective_stiffness\" \"eta2_elasticity_tensor\" \n                             \n      Material Name:       stress_eta2\n      Property Names:      \"eta2_Jacobian_mult\" \"eta2_elastic_strain\" \"eta2_plastic_deformation_gradient\" \n                             \"eta2_rotation_total\" \"eta2_stress\" \"eta2_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta2\n      Property Names:      \"eta2_applied_shear_stress\" \"eta2_flow_direction\" \"eta2_slip_increment\" \"eta2_slip_resistance\" \n                             \n      Material Name:       h0\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                             \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n      Material Name:       h1\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                             \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n      Material Name:       h2\n      Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                             \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n      Material Name:       global_stress\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\n    Active Face Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_eta0_face\n      Property Names:      \"eta0_Euler_angles\" \"eta0_crysrot\" \"eta0_effective_stiffness\" \"eta0_elasticity_tensor\" \n                             \n      Material Name:       stress_eta0_face\n      Property Names:      \"eta0_Jacobian_mult\" \"eta0_elastic_strain\" \"eta0_plastic_deformation_gradient\" \n                             \"eta0_rotation_total\" \"eta0_stress\" \"eta0_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta0_face\n      Property Names:      \"eta0_applied_shear_stress\" \"eta0_flow_direction\" \"eta0_slip_increment\" \"eta0_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta1_face\n      Property Names:      \"eta1_Euler_angles\" \"eta1_crysrot\" \"eta1_effective_stiffness\" \"eta1_elasticity_tensor\" \n                             \n      Material Name:       stress_eta1_face\n      Property Names:      \"eta1_Jacobian_mult\" \"eta1_elastic_strain\" \"eta1_plastic_deformation_gradient\" \n                             \"eta1_rotation_total\" \"eta1_stress\" \"eta1_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta1_face\n      Property Names:      \"eta1_applied_shear_stress\" \"eta1_flow_direction\" \"eta1_slip_increment\" \"eta1_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta2_face\n      Property Names:      \"eta2_Euler_angles\" \"eta2_crysrot\" \"eta2_effective_stiffness\" \"eta2_elasticity_tensor\" \n                             \n      Material Name:       stress_eta2_face\n      Property Names:      \"eta2_Jacobian_mult\" \"eta2_elastic_strain\" \"eta2_plastic_deformation_gradient\" \n                             \"eta2_rotation_total\" \"eta2_stress\" \"eta2_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta2_face\n      Property Names:      \"eta2_applied_shear_stress\" \"eta2_flow_direction\" \"eta2_slip_increment\" \"eta2_slip_resistance\" \n                             \n      Material Name:       h0_face\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                             \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n      Material Name:       h1_face\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                             \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n      Material Name:       h2_face\n      Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                             \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n      Material Name:       global_stress_face\n      Property Names:      \"Jacobian_mult\" \"stress\" \n\nActive Neighboring Materials:\n    Subdomain:  (0)\n      Material Name:       elasticity_tensor_eta0_neighbor\n      Property Names:      \"eta0_Euler_angles\" \"eta0_crysrot\" \"eta0_effective_stiffness\" \"eta0_elasticity_tensor\" \n                             \n      Material Name:       stress_eta0_neighbor\n      Property Names:      \"eta0_Jacobian_mult\" \"eta0_elastic_strain\" \"eta0_plastic_deformation_gradient\" \n                             \"eta0_rotation_total\" \"eta0_stress\" \"eta0_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta0_neighbor\n      Property Names:      \"eta0_applied_shear_stress\" \"eta0_flow_direction\" \"eta0_slip_increment\" \"eta0_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta1_neighbor\n      Property Names:      \"eta1_Euler_angles\" \"eta1_crysrot\" \"eta1_effective_stiffness\" \"eta1_elasticity_tensor\" \n                             \n      Material Name:       stress_eta1_neighbor\n      Property Names:      \"eta1_Jacobian_mult\" \"eta1_elastic_strain\" \"eta1_plastic_deformation_gradient\" \n                             \"eta1_rotation_total\" \"eta1_stress\" \"eta1_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta1_neighbor\n      Property Names:      \"eta1_applied_shear_stress\" \"eta1_flow_direction\" \"eta1_slip_increment\" \"eta1_slip_resistance\" \n                             \n      Material Name:       elasticity_tensor_eta2_neighbor\n      Property Names:      \"eta2_Euler_angles\" \"eta2_crysrot\" \"eta2_effective_stiffness\" \"eta2_elasticity_tensor\" \n                             \n      Material Name:       stress_eta2_neighbor\n      Property Names:      \"eta2_Jacobian_mult\" \"eta2_elastic_strain\" \"eta2_plastic_deformation_gradient\" \n                             \"eta2_rotation_total\" \"eta2_stress\" \"eta2_updated_rotation\" \"second_piola_kirchhoff_stress\" \n                             \"total_lagrangian_strain\" \n      Material Name:       trial_xtalpl_eta2_neighbor\n      Property Names:      \"eta2_applied_shear_stress\" \"eta2_flow_direction\" \"eta2_slip_increment\" \"eta2_slip_resistance\" \n                             \n      Material Name:       h0_neighbor\n      Property Names:      \"d^2h0/deta0^2\" \"d^2h0/deta0deta1\" \"d^2h0/deta0deta2\" \"d^2h0/deta1^2\" \"d^2h0/deta1deta2\" \n                             \"d^2h0/deta2^2\" \"dh0/deta0\" \"dh0/deta1\" \"dh0/deta2\" \"h0\" \n      Material Name:       h1_neighbor\n      Property Names:      \"d^2h1/deta0^2\" \"d^2h1/deta0deta1\" \"d^2h1/deta0deta2\" \"d^2h1/deta1^2\" \"d^2h1/deta1deta2\" \n                             \"d^2h1/deta2^2\" \"dh1/deta0\" \"dh1/deta1\" \"dh1/deta2\" \"h1\" \n      Material Name:       h2_neighbor\n      Property Names:      \"d^2h2/deta0^2\" \"d^2h2/deta0deta1\" \"d^2h2/deta0deta2\" \"d^2h2/deta1^2\" \"d^2h2/deta1deta2\" \n                             \"d^2h2/deta2^2\" \"dh2/deta0\" \"dh2/deta1\" \"dh2/deta2\" \"h2\" \n      Material Name:       global_stress_neighbor\n      Property Names:      \"Jacobian_mult\" \"stress\"",
                          "url": "https://github.com/idaholab/moose/discussions/27652#discussioncomment-9463929",
                          "updatedAt": "2024-05-17T00:23:31Z",
                          "publishedAt": "2024-05-17T00:23:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You must be missing materials then, none of the requested properties are being created",
                          "url": "https://github.com/idaholab/moose/discussions/27652#discussioncomment-9464019",
                          "updatedAt": "2024-05-17T00:43:18Z",
                          "publishedAt": "2024-05-17T00:42:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "What do you mean by I am missing some materials and how do I resolve that? @dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/27652#discussioncomment-9464058",
                          "updatedAt": "2024-05-17T00:48:31Z",
                          "publishedAt": "2024-05-17T00:48:31Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}