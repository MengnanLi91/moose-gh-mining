{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMS0wNC0yOVQxNDoyNTozOS0wNTowMM4AMwEM"
    },
    "edges": [
      {
        "node": {
          "title": "Combination of domain solutions.",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "Does Moose allow for the solution of equations (in time) in two separate domains? For example, T in Omega 1, and p in Omega 2, then another solution in a third domain Omega 3 using the solution of T, and p from the initial two solutions and then feedback into Omega 1 for another iteration of solutions?",
          "url": "https://github.com/idaholab/moose/discussions/17131",
          "updatedAt": "2022-08-01T06:50:56Z",
          "publishedAt": "2021-02-25T00:00:01Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mangerij"
                  },
                  "bodyText": "Ah, so you would like to try and use the restart system to combine two solutions in some meanginful way.\nAre the meshes different? or is it just two different problems solved on the same mesh?",
                  "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-415617",
                  "updatedAt": "2022-08-01T06:50:56Z",
                  "publishedAt": "2021-02-28T18:42:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "Different mesh domains so that the mesh deformation in one domain has no effect on the other. The first domain (Energy Eq) has no internal geometry, the second domain has physical internal geometry (Structural Eq), the third domain only needs a mesh grid sufficient to capture the combined effects of the other two mesh domains. It then implicitly feeds information via a boundary equation back into the first to account for energy deformation based on the position of the second.\n\nThank you for your interest in my problem.\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n\u2026\n________________________________\nFrom: John <notifications@github.com>\nSent: Sunday, February 28, 2021 1:42:23 PM\nTo: idaholab/moose <moose@noreply.github.com>\nCc: WISE, TAMMY <wisetl@email.sc.edu>; Author <author@noreply.github.com>\nSubject: Re: [idaholab/moose] Combination of domain solutions. (#17131)\n\n\nAh, so you would like to try and use the restart system to combine two solutions in some meanginful way.\nAre the meshes different? or is it just two different problems solved on the same mesh?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=b23bd806-eda0e0de-b23b96c7-866cdd2c00cc-0a2528048cbea04a&q=1&e=b0ce66f7-f6d7-4f69-a881-072ba9c0ec71&u=https%3A%2F%2Fgithub.com%2Fidaholab%2Fmoose%2Fdiscussions%2F17131%23discussioncomment-415617>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=45721aab-1ae92273-4572546a-866cdd2c00cc-a97f2ab73afa3a54&q=1&e=b0ce66f7-f6d7-4f69-a881-072ba9c0ec71&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJQ6AYVZCSKMVFK4JWAIPITTBKFA7ANCNFSM4YFPGBMA>.",
                  "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-415648",
                  "updatedAt": "2022-08-01T06:50:57Z",
                  "publishedAt": "2021-02-28T18:57:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mangerij"
                          },
                          "bodyText": "Well if the first domain is just a scalar ODE you can use the ScalarKernels system to get your solution and then add them using a AuxKernel",
                          "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-415666",
                          "updatedAt": "2022-08-01T06:50:58Z",
                          "publishedAt": "2021-02-28T19:02:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "I will solve the Naiver Stokes equation with density and viscosity properties that vary with pressure and temperature. Would the method you suggested be applicable for the NS equation in domain one?",
                          "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-416425",
                          "updatedAt": "2022-08-01T06:50:58Z",
                          "publishedAt": "2021-03-01T01:17:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "I will solve the Naiver Stokes equation with density and viscosity properties that vary with pressure and temperature. Would the method you suggested be applicable for the NS equation in domain one?\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n\u2026\n________________________________\nFrom: John <notifications@github.com>\nSent: Sunday, February 28, 2021 2:02:55 PM\nTo: idaholab/moose <moose@noreply.github.com>\nCc: WISE, TAMMY <wisetl@email.sc.edu>; Author <author@noreply.github.com>\nSubject: Re: [idaholab/moose] Combination of domain solutions. (#17131)\n\n\nWell if the first domain is just a scalar ODE you can use the ScalarKernels system to get your solution and then add them using a AuxKernel\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=b8eee29c-e775dbc7-b8eeac5d-862a37e2f896-b7919afe0108e3b1&q=1&e=0f050c55-4574-48a5-9221-cb0224fc4418&u=https%3A%2F%2Fgithub.com%2Fidaholab%2Fmoose%2Fdiscussions%2F17131%23discussioncomment-415666>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=f5ca7ad3-aa514388-f5ca3412-862a37e2f896-5fcb047fbe6ecd42&q=1&e=0f050c55-4574-48a5-9221-cb0224fc4418&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJQ6AYVHPBXZ5GFUVEKBGT3TBKHN7ANCNFSM4YFPGBMA>.",
                  "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-415897",
                  "updatedAt": "2022-08-01T06:50:58Z",
                  "publishedAt": "2021-02-28T20:55:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You may want to leverage the multiapp system to separate each solve.\nAny specific reason you are trying to avoid coupling the equations in a single solve?",
                  "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-491925",
                  "updatedAt": "2022-08-01T06:51:00Z",
                  "publishedAt": "2021-03-17T03:44:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "I am combining the equation of motion with heat transfer and fluid flow. When the systems of equations are coupled I experience deformation of the mesh and associated numerical error for large displacements of objects interior to the heat transfer/fluid domain. When I solve the equation of motion in it's own domain there are no mesh deformations or numerical errors.",
                          "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-493096",
                          "updatedAt": "2022-08-01T06:51:00Z",
                          "publishedAt": "2021-03-17T10:45:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So your options are:\n\na multiapp for each domain, and coupling through boundary conditions / transfers\nseparate domains are ok too. Use an interface kernel to pass information if they are physically separate too",
                          "url": "https://github.com/idaholab/moose/discussions/17131#discussioncomment-705354",
                          "updatedAt": "2022-08-01T06:51:01Z",
                          "publishedAt": "2021-05-06T16:44:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "mooseWarnings throw when Moose::_throw_on_error=true",
          "author": {
            "login": "helen-brooks"
          },
          "bodyText": "Hi,\nIt might be the intended behaviour, but it is currently the case that mooseWarnings throw when Moose::_throw_on_error=true, even if Moose::_warnings_are_errors = false. It would be nice to have the feature to control whether mooseErrors and mooseWarnings throw independently, either by checking both Moose::_throw_on_error and Moose::_warnings_are_errors inside\nmooseWarningStream or alternatively add an additional flag such as Moose::_throw_on_warning.\nI wouldn't call this an issue, hence I'm putting this in Discussion, but it'd be simple to implement and for me at least it would be a helpful addition for writing certain unit tests.",
          "url": "https://github.com/idaholab/moose/discussions/16720",
          "updatedAt": "2021-05-06T16:32:24Z",
          "publishedAt": "2021-01-18T13:31:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Thanks for the info. Seems like an issue to me, adding it to issues.",
                  "url": "https://github.com/idaholab/moose/discussions/16720#discussioncomment-705273",
                  "updatedAt": "2021-05-06T16:32:24Z",
                  "publishedAt": "2021-05-06T16:32:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Nuclide & Growth Models - MOOSE",
          "author": {
            "login": "KavyaV28"
          },
          "bodyText": "Hello, I'm a new user and I'm currently working on building a nuclide and growth model to simulate the release of recrystallization energy from irradiated PTFE. I was wondering if anyone knew about any papers that discuss building nuclides growth models in the MOOSE framework.",
          "url": "https://github.com/idaholab/moose/discussions/17727",
          "updatedAt": "2022-09-01T10:13:33Z",
          "publishedAt": "2021-05-02T20:42:28Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "permcody"
                  },
                  "bodyText": "@laagesen - This might be a good question for you to advise on.",
                  "url": "https://github.com/idaholab/moose/discussions/17727#discussioncomment-690047",
                  "updatedAt": "2022-09-01T10:13:37Z",
                  "publishedAt": "2021-05-03T19:30:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hi @KavyaV28 -\nIn case you had not seen it, we do a have some documentation pages on the nucleation capabilities in the MOOSE framework:\nhttps://mooseframework.inl.gov/modules/phase_field/Nucleation/DiscreteNucleation.html\nhttps://mooseframework.inl.gov/modules/phase_field/Nucleation/LangevinNoise.html\nWe have done more with the discrete nucleation approach in the past. @amjokisaari implemented a discrete nucleation approach during her Ph.D.\nhttps://www.sciencedirect.com/science/article/pii/S0927025615006564?via%3Dihub\nThis is not exactly the same as, but most similar to, the DiscreteNucleationForce approach currently available in MOOSE. Additionally this article may be of interest:\nhttps://www.sciencedirect.com/science/article/pii/S0927025621000963?via%3Dihub",
                  "url": "https://github.com/idaholab/moose/discussions/17727#discussioncomment-690222",
                  "updatedAt": "2022-09-01T10:13:38Z",
                  "publishedAt": "2021-05-03T20:22:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Thanks @laagesen . I hadn't seen that last reference yet (it's from the future!).\nMind if I ask a question about these two papers? Both have an example where nucleation happens throughout the simulation (not just at time 0). In @amjokisaari 's paper, the fitted slope in the Avrami equation is about 2, but in the newer paper, it is about 3. The newer paper says it should be 3 for this case and that it is 2 when nucleation occurs at t=0 and then demonstrates that in an example too. Any idea why there is a discrepancy? Does it have to do with how the timing of the nucleation events is chosen?",
                          "url": "https://github.com/idaholab/moose/discussions/17727#discussioncomment-700090",
                          "updatedAt": "2022-09-01T10:13:40Z",
                          "publishedAt": "2021-05-05T15:58:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "@amjokisaari can probably answer that better than me",
                          "url": "https://github.com/idaholab/moose/discussions/17727#discussioncomment-700713",
                          "updatedAt": "2022-09-01T10:21:51Z",
                          "publishedAt": "2021-05-05T18:16:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KavyaV28"
                          },
                          "bodyText": "@laagesen Thank you",
                          "url": "https://github.com/idaholab/moose/discussions/17727#discussioncomment-701363",
                          "updatedAt": "2022-09-01T10:21:51Z",
                          "publishedAt": "2021-05-05T20:54:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Solution on a mesh possible using Heat Conduction but not NS",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I have developed a large scale mesh problem that I was able to solve a conduction heat transfer problem on. When I apply the same mesh to a Naiver Stokes problem I am not able to solve the problem on the mesh domain. I am receiving the following error: Current number of dofs per element 72 is greater than AD_MAX_DOFS_PER_ELEM of 50. You can run `configure --with-derivative-size=<n\n\n` to request a larger derivative container.\n\nThe numerics associated with the problem are as follows:\nParallelism:\nNum Processors:          16\nNum Threads:             1\nMesh:\nParallel Type:           replicated\nMesh Dimension:          3\nSpatial Dimension:       3\nNodes:\nTotal:                 5293752\nLocal:                 325135\nElems:\nTotal:                 3222656\nLocal:                 200035\nNum Subdomains:          5\nNum Partitions:          16\nPartitioner:             metis\nNonlinear System:\nAD size required:        72\nNum DOFs:                37056264\nNum Local DOFs:          2275945\nVariables:               \"velocity\" \"p\" \"u\"\nFinite Element Types:    \"LAGRANGE_VEC\" \"LAGRANGE\" \"LAGRANGE_VEC\"\nApproximation Orders:    \"FIRST\" \"FIRST\" \"FIRST\"\nExecution Information:\nExecutioner:             Steady\nSolver Mode:             NEWTON\nMOOSE Preconditioner:    SMP (auto)",
          "url": "https://github.com/idaholab/moose/discussions/17676",
          "updatedAt": "2022-06-11T11:35:31Z",
          "publishedAt": "2021-04-24T17:06:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "As the message suggested, you can run\n./configure --with-derivative-size=72\n\nin your MOOSE directory, rebuild MOOSE, and then try to run your problem again. This command reconfigures MOOSE to use a larger container for the AD derivatives used in your calculation.",
                  "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-654068",
                  "updatedAt": "2022-06-11T11:35:50Z",
                  "publishedAt": "2021-04-24T18:11:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Does this command work within the terminal command prompt of the moose directory, or is there a file that I will have to modify with this command?\nThank you for your continued attention to my issue.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-680279",
                          "updatedAt": "2022-06-11T11:35:58Z",
                          "publishedAt": "2021-04-30T16:30:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "You would run this command within the Terminal in your moose directory. When it completes, you'll then build and run moose (or your application using that copy of moose) as you usually do. Then you can try your problem again.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-680369",
                          "updatedAt": "2022-06-11T11:35:58Z",
                          "publishedAt": "2021-04-30T16:50:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Here are the two way I tried to implement what you described, along with the messages that I get.:\n(base) [wisetamm@falcon1 moose]$ ./configure --with-derivative-size=72\n-bash: ./configure: No such file or directory\n(moose) [wisetamm@falcon1 moose]$  ./configure --with-derivative-size=72\n-bash: ./configure: No such file or directory\nIs it possible that I may need to do a moose update?",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-680392",
                          "updatedAt": "2022-06-11T11:36:07Z",
                          "publishedAt": "2021-04-30T16:57:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "This is possible, as your copy of MOOSE would be quite old (older than around September 2020) if the configure file didn't exist in the MOOSE root directory. If you run the git log command in the MOOSE directory, you can see the date of your current version.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-680417",
                          "updatedAt": "2022-07-02T17:51:23Z",
                          "publishedAt": "2021-04-30T17:05:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "One more thing - if you wanted to keep your current version, the configure file should be in the moose/framework directory prior to September 2020. So you could try the configure command I mentioned above there as well.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-680429",
                          "updatedAt": "2024-02-16T13:53:26Z",
                          "publishedAt": "2021-04-30T17:08:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "After running the configure command I am still receiving the max dof error. Here is the output after running the configure routine:\n(moose) [wisetamm@falcon1 moose]$ ./configure --with-derivative-size=72\n----------- Configuring MOOSE ---------------\nconfiguring with derivative backing array size of 72\nconfiguring with AD indexing type global\nconfiguring with derivative type sparse\nchecking for pkg-config... /home/wisetamm/miniconda3/envs/moose/bin/pkg-config\nconfigure: checking system for libpng\nconfiguring with libpng support\nconfigure: creating ./config.status\nconfig.status: creating conf_vars.mk\nconfig.status: creating framework/include/base/MooseConfig.h.tmp\nconfig.status: framework/include/base/MooseConfig.h.tmp is unchanged\nconfig.status: executing framework/include/base/MooseConfig.h commands\nconfig.status: creating framework/include/base/MooseConfig.h - prefix MOOSE for framework/include/base/MooseConfig.h.tmp defines\nconfig.status: framework/include/base/MooseConfig.h is unchanged\n--------- Done Configuring MOOSE ------------",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-690712",
                          "updatedAt": "2024-02-16T13:53:26Z",
                          "publishedAt": "2021-05-03T23:09:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "72 might not be enough. Try 100 for the derivative size.\nHow many variables do you have in the system?",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-690751",
                          "updatedAt": "2021-05-03T23:22:47Z",
                          "publishedAt": "2021-05-03T23:22:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "given velocity depends on u,v, and w, it would appear that there are 5 variables being solved for.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-690759",
                          "updatedAt": "2021-05-03T23:27:01Z",
                          "publishedAt": "2021-05-03T23:27:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "and they're all first order lagrange with what kind of element?\nPlease let us know if increasing the derivative size worked btw",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-690772",
                          "updatedAt": "2021-05-03T23:33:58Z",
                          "publishedAt": "2021-05-03T23:33:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "The nonlinear system information indicates the element type is LAGRANGE_VEC, LAGRANGE, LAGRANGE_VEC. I'll keep updates to my progress for this issue updated on this thread. Thank you for the advise and help.",
                          "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-690783",
                          "updatedAt": "2021-05-03T23:38:24Z",
                          "publishedAt": "2021-05-03T23:38:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "TLWise"
                  },
                  "bodyText": "Performed the moose update and and ran, .\"/configure --with-derivative-size=100\" in the moose directory. Did a re-make and test of the application. The error is no longer displaying.",
                  "url": "https://github.com/idaholab/moose/discussions/17676#discussioncomment-694201",
                  "updatedAt": "2022-06-11T11:36:12Z",
                  "publishedAt": "2021-05-04T16:16:50Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Implementing Linear threshold function (or PiecewiseLinear) as a function of time",
          "author": {
            "login": "Traiwit"
          },
          "bodyText": "Hi guys, I wonder how can I implement Linear threshold function as a function of time in moose?\nfor example in (t,f) coordinate,\nI want f = 1 from t = 0 to 1\nf = linear line with coordinate of (1,1) to (1.5, 1e-4) from t>1 to t = 1.5\nthen f = 1e-4 from t>1.5\nI know I could do it with type = ParsedFunction with something similar to this\n'if(t<5,(-9.81*2700*(1000-z))*(t/5),-9.81*2700*(1000-z))'\nalso, I know there's PiecewiseLinear function, but I'm not sure how to implement it with t (current simulation time).\nis there anything as simple as\n type = PiecewiseLinear\n      value = '0 1 1e-4 1e-4'\n          t = '0 1 1.5 inf'\n\n?\nThank you.\nKind regards,\nTraiwit",
          "url": "https://github.com/idaholab/moose/discussions/17729",
          "updatedAt": "2024-02-13T15:19:12Z",
          "publishedAt": "2021-05-03T07:02:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAs mentioned in the documentation for the PiecewiseLinear function, the default x-data corresponds to time. So you may define your functions in one of the three ways outlined.\nhttps://mooseframework.inl.gov/source/functions/PiecewiseLinear.html\nBest,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17729#discussioncomment-688041",
                  "updatedAt": "2024-02-13T15:19:22Z",
                  "publishedAt": "2021-05-03T13:50:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Traiwit"
                          },
                          "bodyText": "got it thanks @GiudGiud\n[./density_excav6]\n  type = PiecewiseLinear\n    x = '0 5 5.5 6 6.5 11'\n    y = '2700 2700 1.225 1.225 1500 1500'\n[../]\n[./density_excav7]\n  type = PiecewiseLinear\n    x = '0 7 7.5 8 8.5 11'\n      y = '2700 2700 1.225 1.225 1500 1500'\n[../]\n[./density_excav8]\n  type = PiecewiseLinear\n  x = '0 9 9.5 10 10.5 11'\n    y = '2700 2700 1.225 1.225 1500 1500'\n[../]",
                          "url": "https://github.com/idaholab/moose/discussions/17729#discussioncomment-691457",
                          "updatedAt": "2024-02-13T15:19:31Z",
                          "publishedAt": "2021-05-04T04:54:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Outputting sub app results to different directory",
          "author": {
            "login": "bhollra"
          },
          "bodyText": "Hi MOOSE community,\nI am running a simulation with several similar sub applications. My MultiApps block references the same input file for each subapp, and uses the positions_file parameter to specify the location of each.\nIt would be helpful for me if the exodus and csv results from these sub apps were output into a separate directory within the main simulation directory, so that after running my simulation the directory will look like:\n-main/\n----main.i\n----main.e\n----main.csv\n----subapp/\n--------subapp.i\n--------main_out_subapp0_out.e\n--------main_out_subapp0_out.csv\n--------main_out_subapp1_out.e\n--------main_out_subapp1_out.csv\n--------main_out_subapp2_out.e\n--------main_out_subapp2_out.csv\nI tired using the file_base parameter in the subapp input file, but this resulted in each subapp output overwriting the last.\nIs this possible to do within MOOSE, or is moving the results via the command line after the simulation has finished my best option?\nThanks!\nBrent",
          "url": "https://github.com/idaholab/moose/discussions/17732",
          "updatedAt": "2022-09-12T09:14:13Z",
          "publishedAt": "2021-05-03T15:46:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "So if you set the Outputs/file_base in the MultiApp input file, only one output file of a type for multiple subapps will be generated? If this is the case, we possibly need to change the code in MultiApp.C to create different file_base based on subapp ids.",
                  "url": "https://github.com/idaholab/moose/discussions/17732#discussioncomment-689081",
                  "updatedAt": "2022-09-12T09:14:14Z",
                  "publishedAt": "2021-05-03T15:58:00Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bhollra"
                          },
                          "bodyText": "Yes, for example with:\n[./csv]\ntype = CSV\nfile_base = subapp/out\n[../]\nin the subapp input, only \"out.csv\" was created in the subapp folder. Having \"out{id}.csv\" output instead would be exactly what I'm looking for.",
                          "url": "https://github.com/idaholab/moose/discussions/17732#discussioncomment-689153",
                          "updatedAt": "2022-09-12T09:14:14Z",
                          "publishedAt": "2021-05-03T16:06:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "Oh. Sorry about this. Yes, this is something needs to be fixed in MOOSE. I will create an issue.",
                          "url": "https://github.com/idaholab/moose/discussions/17732#discussioncomment-689498",
                          "updatedAt": "2022-09-12T09:14:14Z",
                          "publishedAt": "2021-05-03T17:04:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "The issue is here (#17738). I did not try reproducing it but looks like the code is indeed problematic.",
                          "url": "https://github.com/idaholab/moose/discussions/17732#discussioncomment-689537",
                          "updatedAt": "2022-09-12T09:14:14Z",
                          "publishedAt": "2021-05-03T17:13:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "In case that the fix for the issue takes too long, you can try change two lines in MultiApp.C to temporarily make this work:\ndiff --git a/framework/src/multiapps/MultiApp.C b/framework/src/multiapps/MultiApp.C\nindex a14da032f1..67deb81904 100644\n--- a/framework/src/multiapps/MultiApp.C\n+++ b/framework/src/multiapps/MultiApp.C\n@@ -775,6 +775,8 @@ MultiApp::createApp(unsigned int i, Real start_time)\n   // output base of the master problem and appending the name of the multiapp plus a number to it\n   if (app->getOutputFileBase().empty())\n     app->setOutputFileBase(_app.getOutputFileBase() + \"_\" + multiapp_name.str());\n+  else if (_my_num_apps > 1)\n+    app->setOutputFileBase(app->getOutputFileBase() + \"_\" + multiapp_name.str());\n   preRunInputFile();\n   app->runInputFile();\n\nBest.",
                          "url": "https://github.com/idaholab/moose/discussions/17732#discussioncomment-689641",
                          "updatedAt": "2022-09-12T09:14:14Z",
                          "publishedAt": "2021-05-03T17:37:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with the global AD indexing configuration to run INSFV",
          "author": {
            "login": "AVxAle"
          },
          "bodyText": "Hello Moose community,\nI am having an issue with the enabling the global AD indexing for the finite volume simulations and I am hoping to get your help on this.\nEvery time I try to run my input file I get the error I reported below. I ran the \"./configure --with-ad-indexing-type=global\"  as suggested but this did not solve the issue. The output after running this script is also shown below. I also tried recompiling moose after running this script, but this did not make a difference either.\nThe input file I am trying to run is one of the example files available in: https://mooseframework.inl.gov/modules/navier_stokes/fv.html\nFYI, my Application Version is: snapshot-20-10-27-17866-ge8ca19424f\nThank you in advance\n----- Printscreen from the input file -----\n*** ERROR ***\nINSFV is not supported by local AD indexing. In order to use INSFV, please run the configure script in the root MOOSE directory with the configure option '--with-ad-indexing-type=global'\n----- Printscreen of \"./configure --with-ad-indexing-type=global\" -----\n$ ./configure --with-ad-indexing-type=global\n----------- Configuring MOOSE ---------------\nconfiguring with derivative backing array size of 50\nconfiguring with AD indexing type global\nconfiguring with derivative type sparse\nchecking for pkg-config... /usr/bin/pkg-config\nconfigure: checking system for libpng\nconfiguring with libpng support\nconfigure: creating ./config.status\nconfig.status: creating conf_vars.mk\nconfig.status: creating framework/include/base/MooseConfig.h.tmp\nconfig.status: framework/include/base/MooseConfig.h.tmp is unchanged\nconfig.status: executing framework/include/base/MooseConfig.h commands\nconfig.status: creating framework/include/base/MooseConfig.h - prefix MOOSE for framework/include/base/MooseConfig.h.tmp defines\nconfig.status: framework/include/base/MooseConfig.h is unchanged\n--------- Done Configuring MOOSE ------------",
          "url": "https://github.com/idaholab/moose/discussions/17721",
          "updatedAt": "2022-07-01T02:26:35Z",
          "publishedAt": "2021-05-01T01:50:01Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou do have to re-build moose after re-configuring it to use global AD indexing.\nDid you re-build the navier stokes module / your application including the navier stokes module after running the configure script?\nCan you please try again after running make clobberall then re-building it ?\nWhich object is returning the error? If it doesn't say you may build moose in debug mode with METHOD=dbg make -j xx\nBest\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/17721#discussioncomment-688098",
                  "updatedAt": "2022-07-01T02:26:36Z",
                  "publishedAt": "2021-05-03T14:00:18Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Some artefacts in coupled phase-field-mechanics task",
          "author": {
            "login": "RossMech"
          },
          "bodyText": "Hello everyone,\nI have some numerical or model artefact in coupled phase-field and mechanical model. The value of order parameter is exceeding [0..1] range locally and seems to be some kind of the non-physical oscillation.\n\n\n\nThe model is multi-phase model with penalty stabilization.\nWhat have I done in troubleshooting\n\nThe automatic scaling of the residuals\nMesh size\nThe part of conserved and non-conserved variables in interfacial energy\nChange the form of local free energy functions (different polynomials and cosh)\nTime step reduction\nPenalty size\n\nTime step reduction seems to improve the situation, but the step size is then quite small.\nWould like to discuss the ideas about why it happens and what troubleshooting strategy can be used\nBest regards,\nRostyslav Nizinkovskyi.",
          "url": "https://github.com/idaholab/moose/discussions/17652",
          "updatedAt": "2022-06-21T08:38:58Z",
          "publishedAt": "2021-04-20T10:16:22Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Can you try adding bound constraints on the order parameter? https://mooseframework.inl.gov/source/auxkernels/ConstantBoundsAux.html\nAfter adding the bounds, i.e. a lower bound of 0 and an upper bound of 1, make sure you use one of the two VI solvers, vinewtonssls or vinewtonrsls.",
                  "url": "https://github.com/idaholab/moose/discussions/17652#discussioncomment-634692",
                  "updatedAt": "2022-06-21T08:39:06Z",
                  "publishedAt": "2021-04-20T11:08:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "RossMech"
                          },
                          "bodyText": "Hello, thank you for the response and suggestion. I would try to avoid it, because the task with lagrange multiplier would be very stiff and the time step would decrease drastically as well. But if nothing seems to work, I would try to use this AuxKernel then.",
                          "url": "https://github.com/idaholab/moose/discussions/17652#discussioncomment-634727",
                          "updatedAt": "2022-07-22T15:36:50Z",
                          "publishedAt": "2021-04-20T11:18:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I would try to avoid it, because the task with lagrange multiplier would be very stiff and the time step would decrease drastically as well.\n\nI'm not convinced that's what will happen here. But anyways feel free to try other methods.\nI don't think the oscillations can be completely \"fixed\" if you keep using the penalty approach.",
                          "url": "https://github.com/idaholab/moose/discussions/17652#discussioncomment-634821",
                          "updatedAt": "2022-07-22T15:36:50Z",
                          "publishedAt": "2021-04-20T11:45:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "You mentioned this is a coupled phase-field/mechanics simulation...I would try removing the mechanics part of the problem and see if the issue is still there. The shape of your particle is not circular, if you remove the mechanics part (and you are using isotropic interfacial energy) then you should eventually reach the energy-minimizing circular shape, and depending on the formulation I would not expect order parameter values greater than 1. I would make sure this happens first. Either way it will help diagnose where the problem lies.",
                  "url": "https://github.com/idaholab/moose/discussions/17652#discussioncomment-681366",
                  "updatedAt": "2022-07-22T15:36:50Z",
                  "publishedAt": "2021-04-30T21:47:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "RayTracing error",
          "author": {
            "login": "makeclean"
          },
          "bodyText": "Hi, when running some of the ray tracing tests I get the following error\nA 'LotsOfRaysRayStudy' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable\n\nJust rebuilt MOOSE yesterday on commit b2d6c22",
          "url": "https://github.com/idaholab/moose/discussions/17718",
          "updatedAt": "2024-08-30T14:18:36Z",
          "publishedAt": "2021-04-30T12:19:53Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "If you are running from the command-line, you probably just need to add --allow-test-objects\nThe objects is registered to the test app, which we disable by default to avoid test objects being used by accident.\n\n  \n    \n      moose/modules/ray_tracing/test/src/userobjects/LotsOfRaysRayStudy.C\n    \n    \n         Line 18\n      in\n      a2969bb\n    \n  \n  \n    \n\n        \n          \n           registerMooseObject(\"RayTracingTestApp\", LotsOfRaysRayStudy);",
                  "url": "https://github.com/idaholab/moose/discussions/17718#discussioncomment-680001",
                  "updatedAt": "2024-08-30T14:18:37Z",
                  "publishedAt": "2021-04-30T15:08:05Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "makeclean"
                  },
                  "bodyText": "Thats it! Thanks\n\u2026\n________________________________\nFrom: Andrew E Slaughter ***@***.***>\nSent: 30 April 2021 16:08\nTo: idaholab/moose ***@***.***>\nCc: Davis, Andrew ***@***.***>; Author ***@***.***>\nSubject: Re: [idaholab/moose] RayTracing error (#17718)\n\n\nIf you are running from the command-line, you probably just need to add --allow-test-objects\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<#17718 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AASTUSV5F666KCZGZOO5E3TTLLBWXANCNFSM434DMZKQ>.",
                  "url": "https://github.com/idaholab/moose/discussions/17718#discussioncomment-680019",
                  "updatedAt": "2024-08-30T14:18:38Z",
                  "publishedAt": "2021-04-30T15:13:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Steady State Run Termination based on User-Defined Criterion Question",
          "author": {
            "login": "wrkendrick"
          },
          "bodyText": "Hi all,\nI've recently been working with a function that generates a temperature profile when given a temperature flux, and have used this in MOOSE to adjust boundary conditions every non-linear step until convergence is met. The tradition \"convergence\" however is the non-linear residual, which in this case takes too long to converge (I think because there's a natural oscillation of the direction in which the temperatures at the boundary change, making the residual explode in value even when the temperatures themselves are settling within +/- 0.1 degrees K).\nI decided to follow in the footsteps of the Terminator.C user object and focus on using the change in boundary temperatures as my criterion for convergence. My version of the Terminator needs to look at a vector postprocessor (as it's multiple temperatures across the surface) so I stripped a lot of the smart functionality like the parser. It essentially works the same though, where if the criterion is satisfied then it should run _fe_problem.terminateSolve().\nMy problem is that this isn't working right now. It's running the above function but it doesn't interrupt the run. I think this is because the above is meant to kick in at the end of a time step, not in the middle of a solve. I could be wrong, but if I am correct is there any other function/structure I can use to tell MOOSE to cleanly wrap up the run? I can force it by making convergence act as an error, but I don't think it will output results in this case, so there's no real point.\nBelow is my vector-adjusted Terminator:\n//* This file is part of the MOOSE framework\n//* https://www.mooseframework.org\n//*\n//* All rights reserved, see COPYRIGHT for full restrictions\n//* https://github.com/idaholab/moose/blob/master/COPYRIGHT\n//*\n//* Licensed under LGPL 2.1, please see LICENSE for details\n//* https://www.gnu.org/licenses/lgpl-2.1.html\n\n#include \"libmesh/libmesh_config.h\"\n\n#ifdef LIBMESH_HAVE_FPARSER\n\n#include \"Terminator.h\"\n#include \"MooseApp.h\"\n#include \"MooseEnum.h\"\n#include \"Executioner.h\"\n\nregisterMooseObject(\"MooseApp\", Terminator);\n\ndefineLegacyParams(Terminator);\n\nInputParameters\nTerminator::validParams()\n{\n  InputParameters params = GeneralUserObject::validParams();\n  params.addClassDescription(\"Adjusted Terminator for HTPIPE purposes.\");\n  params.addRequiredParam<std::vector<VectorPostprocessorName>>(\n      \"vpp_names\", \"The list of name of VectorPostProcessesors to watch for convergence\");\n  params.addRequiredParam<double>(\"criterion\", \"Convergence criterion\");\n  MooseEnum failModeOption(\"HARD SOFT\", \"HARD\");\n  params.addParam<MooseEnum>(\n      \"fail_mode\",\n      failModeOption,\n      \"Abort entire simulation (HARD) or just the current time step (SOFT).\");\n  params.addParam<std::string>(\n      \"message\", \"An optional message to be output when the termination condition is triggered\");\n\n  MooseEnum errorLevel(\"INFO WARNING ERROR\");\n  params.addParam<MooseEnum>(\n      \"error_level\",\n      errorLevel,\n      \"The error level for the message. A level of ERROR will always lead to a hard \"\n      \"termination of the entire simulation.\");\n  \n  return params;\n}\n\nTerminator::Terminator(const InputParameters & parameters)\n  : GeneralUserObject(parameters),\n    _fail_mode(getParam<MooseEnum>(\"fail_mode\").getEnum<FailMode>()),\n    _error_level(isParamValid(\"error_level\")\n                     ? getParam<MooseEnum>(\"error_level\").getEnum<ErrorLevel>()\n                     : ErrorLevel::NONE),\n    _vpp_names(getParam<std::vector<VectorPostprocessorName>>(\"vpp_names\")),\n    _criterion(getParam<double>(\"criterion\"))\n{\n  // sanity check the parameters\n  if (_error_level == ErrorLevel::ERROR && _fail_mode == FailMode::SOFT)\n    paramError(\"error_level\", \"Setting the error level to ERROR always causes a hard failure.\");\n  if (_error_level != ErrorLevel::NONE && !isParamValid(\"message\"))\n    paramError(\"error_level\",\n               \"If this parameter is specified a `message` must be supplied as well.\");\n  _vpp_num = _vpp_names.size();\n  _vpp_old.resize(_vpp_num);\n  _vpp_old_holder.resize(_vpp_num);\n  _vpp_old_old.resize(_vpp_num);\n}\n\nvoid\nTerminator::handleMessage()\n{\n  if (!isParamValid(\"message\"))\n    return;\n\n  auto message = getParam<std::string>(\"message\");\n  switch (_error_level)\n  {\n    case ErrorLevel::INFO:\n      mooseInfo(message);\n      break;\n\n    case ErrorLevel::WARNING:\n      mooseWarning(message);\n      break;\n\n    case ErrorLevel::ERROR:\n      mooseError(message);\n      break;\n\n    default:\n      break;\n  }\n}\n\nvoid\nTerminator::execute()\n{\n  converged = true;\n  for (unsigned int i = 0; i < _vpp_num; ++i) {\n    _fe_problem.terminateSolve();\n    std::cout << _vpp_names[i] << \"\\n\";\n    const VectorPostprocessorValue* value_column = &getVectorPostprocessorValueByName(_vpp_names[i], \"flux_aggregate\");\n    VectorPostprocessorValue old_old_value_column = _vpp_old_old[i];\n    if (old_old_value_column.size() == 0)\n      old_old_value_column.resize(value_column->size());\n    _vpp_old_holder[i] = *value_column;\n    for (int j=0; j < value_column->capacity(); j++) {\n      std::cout << j << \": NEW \" << value_column->at(j) << \"\\n\";\n      std::cout << j << \": OLD_OLD \" << old_old_value_column[j] << \"\\n\";\n      double check_val = std::abs(value_column->at(j) - old_old_value_column[j]);\n      if (check_val > _criterion) {\n        converged = false;\n        break;\n      }\n    }\n  }\n  _vpp_old_old = _vpp_old;\n  _vpp_old = _vpp_old_holder;\n\n  // request termination of the run or timestep in case the expression evaluates to true\n  if (converged)\n  {\n    if (_fail_mode == FailMode::HARD)\n    {\n      printf(\"REACHED HERE WHERE IT SHOULD HAVE\\n\");\n      handleMessage();\n      _fe_problem.terminateSolve();\n    }\n    else\n    {\n      _console << name() << \" is marking the current solve step as failed.\\n\";\n      handleMessage();\n      getMooseApp().getExecutioner()->picardSolve().failStep();\n    }\n  }\n}\n\n#endif\n\nNote:\n\nThere's a bunch of stuff left in the code from the old Terminator that doesn't really need to be there any more.\nConvergence is based on comparing the nth non-linear step temperatures and the (n-2)th non-linear step's termperatures.",
          "url": "https://github.com/idaholab/moose/discussions/17705",
          "updatedAt": "2022-07-18T19:15:25Z",
          "publishedAt": "2021-04-28T19:46:25Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Are you setting the \"execute_on\" parameter? If not, set this to LINEAR and see if it works.\nFrom a software design perspective, you should not modify the existing object. You should just create a new object that inherits from GeneralUserObject or Terminator, depending if you need some of the same features. The object you create should go into your application.",
                  "url": "https://github.com/idaholab/moose/discussions/17705#discussioncomment-675124",
                  "updatedAt": "2022-07-18T19:15:33Z",
                  "publishedAt": "2021-04-29T14:23:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wrkendrick"
                          },
                          "bodyText": "Are you setting the \"execute_on\" parameter? If not, set this to LINEAR and see if it works.\n\nYep, currently running every non-linear, tried on linear and still getting the same deal. If I set the error_level to WARNING then the warning goes off when it should (each nonlinear step), but the run fails to terminate, suggesting _fe_problem.terminateSolve() may not be able to interrupt mid-run?\n\nFrom a software design perspective, you should not modify the existing object. You should just create a new object that inherits from GeneralUserObject or Terminator, depending if you need some of the same features. The object you create should go into your application.\n\nYou're absolutely correct, I'm being quick and sloppy right now, I intend to clean it all up and write it the proper way once I can confirm it works as intended.",
                          "url": "https://github.com/idaholab/moose/discussions/17705#discussioncomment-675352",
                          "updatedAt": "2022-07-18T19:15:31Z",
                          "publishedAt": "2021-04-29T15:07:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "Looked at the code a bit and you are right, it will only terminate on timesteps. The check for the termination flag occurs in Transient::keepGoing, which is called by Transient::execute.\n@fdkong Is there a supported way to terminate the solve during the linear/non-linear iterations?",
                          "url": "https://github.com/idaholab/moose/discussions/17705#discussioncomment-675488",
                          "updatedAt": "2022-09-18T10:18:51Z",
                          "publishedAt": "2021-04-29T15:29:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "fdkong"
                  },
                  "bodyText": "I decided to follow in the footsteps of the Terminator.C user object and focus on using the change in boundary temperatures as my criterion for convergence.\n\nIt is not right approach to me if you want to have the simulation converged based your rules.\nYou should  check the function  checkNonlinearConvergence. You could derive from FEProblem, and write your own version of checkNonlinearConvergence",
                  "url": "https://github.com/idaholab/moose/discussions/17705#discussioncomment-676304",
                  "updatedAt": "2022-09-18T10:18:51Z",
                  "publishedAt": "2021-04-29T18:40:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "permcody"
                  },
                  "bodyText": "I don't believe Steady (a single solve) is the right way to approach this problem. With complex problem, you are likely to get a more robust solve if you can break it into \"steps\". Even if there is no time dependency in your equation set you might choose to ramp up boundary or body forces over a series of solve steps. This is common in solid mechanics and is called \"load steps\". If you do that, you would use the \"Transient\" executioner with perhaps a fake or non-dimensional time (used to control your load steps) and your terminator condition would also just naturally work as-is.",
                  "url": "https://github.com/idaholab/moose/discussions/17705#discussioncomment-676488",
                  "updatedAt": "2022-09-18T10:18:14Z",
                  "publishedAt": "2021-04-29T19:25:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}