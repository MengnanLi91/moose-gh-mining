{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wNC0xMFQwODo1MjozMC0wNTowMM4AYCHa"
    },
    "edges": [
      {
        "node": {
          "title": "Plane stress for finite strain in tensor mechanics module",
          "author": {
            "login": "tqcthai"
          },
          "bodyText": "Dear all,\nI try to apply plane stress condition for finite strain problem in the Tensor mechanics module but didn't get success. Below is part of the code I used to specify it.\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n  out_of_plane_strain = strain_zz\n[]\n\n[Modules]\n  [TensorMechanics/Master/mech]\n    strain = FINITE\n    add_variables = true\n    new_system = true\n    incremental = true\n    formulation = TOTAL\n    planar_formulation = WEAK_PLANE_STRESS\n    save_in = 'resid_x resid_y'\n  []\n[]\n\n[Variables]\n  [strain_zz]\n  []\n[]\n\n[AuxVariables]\n  [resid_x]\n  []\n  [resid_y]\n  []\n  [nl_strain_zz]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[AuxKernels]\n [strain_zz]\n   type = RankTwoAux\n   rank_two_tensor = total_strain\n   variable = nl_strain_zz\n   index_i = 2\n   index_j = 2\n  []\n[]\n\nThe error message is: attempted to set unregistered parameter(s) for WeakPlaneStress object:  large_kinematics, stabilize_strain\nAny idea to fix it?\nThanks.\nQTT",
          "url": "https://github.com/idaholab/moose/discussions/27340",
          "updatedAt": "2024-04-12T20:38:12Z",
          "publishedAt": "2024-04-10T15:57:22Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI dont think the new lagrangian formulation is supported with any plane formulation.\nI ll fix the error message, you are not hitting the right one\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27340#discussioncomment-9099848",
                  "updatedAt": "2024-04-12T19:55:15Z",
                  "publishedAt": "2024-04-12T19:55:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so to fix it, set new_system = false",
                          "url": "https://github.com/idaholab/moose/discussions/27340#discussioncomment-9099851",
                          "updatedAt": "2024-04-12T19:55:31Z",
                          "publishedAt": "2024-04-12T19:55:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "actually it should since this change\n#21770\n@hugary1995 thoughts?",
                          "url": "https://github.com/idaholab/moose/discussions/27340#discussioncomment-9099869",
                          "updatedAt": "2024-04-12T19:58:45Z",
                          "publishedAt": "2024-04-12T19:58:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "We have the capability now, but I haven't ported it into the action/physics yet... Create an issue and assign me plz.",
                          "url": "https://github.com/idaholab/moose/discussions/27340#discussioncomment-9100053",
                          "updatedAt": "2024-04-12T20:29:30Z",
                          "publishedAt": "2024-04-12T20:29:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "on it.",
                          "url": "https://github.com/idaholab/moose/discussions/27340#discussioncomment-9100103",
                          "updatedAt": "2024-04-12T20:38:13Z",
                          "publishedAt": "2024-04-12T20:38:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Temperature (and time) dependence for materials",
          "author": {
            "login": "Jake-HW-Miles"
          },
          "bodyText": "Hi there, just getting used to using moose and I want to have material properties that change depending on the temperature. I have tried a few different things, like using parsed functions to feed into parsedmaterials or the built in function capabilities for something like thermal conductivity.\nThere must be a simplier way to do this, I have provided the current state of my material block which runs but doesnt converge....\nAny help is appreciated! (I have had to change the functions and names of blocks etc, however the structure is the same as I use)\n[Materials]\n[fluid_cp_dT_parsed]\ntype = ParsedMaterial\nblock = 'fluid'\n    expression = '(1 / ( temperature^(2) ))'\n    property_name = specific_heat_dT\n    coupled_variables = 'temperature'\n[]\n\n[fluid_cp_parsed]\n    type = ParsedMaterial\n    block = 'fluid'\n\n    expression = '1'\n    property_name = specific_heat\n    coupled_variables = 'temperature'\n[]\n\n[fluid_thrm_cond_dT_parsed]\n    type = ParsedMaterial\n    block = 'fluid'\n\n    expression = '(1 / ( temperature^(2) ))'\n    property_name = thermal_conductivity_dT\n    coupled_variables = 'temperature'\n[]\n\n[fluid_thrm_cond_parsed]\n    type = ParsedMaterial\n    block = 'fluid'\n    expression = '1'\n    property_name = thermal_conductivity\n    coupled_variables = 'temperature'\n[]\n\n[fluid_density_parsed]\n    type = ParsedMaterial\n    block = 'fluid'\n    expression = '(1 / ( temperature^(2) ))'\n    property_name = density\n    coupled_variables = 'temperature'\n[]\n\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27348",
          "updatedAt": "2024-04-12T06:23:43Z",
          "publishedAt": "2024-04-11T11:02:57Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "@Jake-HW-Miles I would normally implement time dependence of a material property\nby passing a function of time to the material object, see for instance this one where we implement\na time depend coefficient for creep:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/src/materials/CrystalPlasticityDislocationUpdate.C\n\"creep_ao_function\" is the relevant one. You can see an example input file of our recent paper on creep:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/test/tests/Paper_CP_PFF/polycrystal_right_elastoplastic_variableGc.i\nsee the function \"creep_rate_prefactor\".\nTemperature dependence is in the same material object above.\nYou can see we have made the crystal plasticity laws temperature dependent\nby couping \"temperature\".\nBest Regards,\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/27348#discussioncomment-9088891",
                  "updatedAt": "2024-04-11T21:05:15Z",
                  "publishedAt": "2024-04-11T21:05:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFirst you should make sure it converges with constants everywhere. Then introduce dependencies on nonlinear variables one at a time.\nIf you can use AD (for example with the ADParsedMaterial) you should try to do that. It will make sure the derivatives of the quantities with regards to the nonlinear variables are well captured\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27348#discussioncomment-9091857",
                  "updatedAt": "2024-04-12T06:23:43Z",
                  "publishedAt": "2024-04-12T06:23:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Cannot run examples from the \"Kraken/problems\" directory for the \"Kraken\" MOOSE-application?",
          "author": {
            "login": "kurtenkera"
          },
          "bodyText": "Hi, I'm trying to run examples from the \"Kraken\" MOOSE-application found here (link: https://github.com/Z-Laboratory/Kraken/tree/main).   I followed the installation instructions outlined here (link: https://github.com/Z-Laboratory/Kraken/blob/main/README.md); however, I was unable to run problems from the \"Kraken/problems\" directory. For example, after navigating to the ~/projects_moose/Kraken/kraken directory where kraken-opt is found after making the application, I tried executing the following:\n./kraken-opt -i ../problems/Dragonskin_20_test_1D_final.i\nBelow is the output that I got:\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nPlease update your main.C to adapt new main function in MOOSE framework, see'test/src/main.C in MOOSE as an example of moose::main()'. \nStack frames: 7\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits<char> >, char const (&) [136]>(libMesh::BasicOStreamProxy<char, std::char_traits<char> >&, bool, bool, char const (&) [136])\n2: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, int)\n3: main\n4: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x70b744c29d90]\n5: __libc_start_main\n6: ./kraken-opt(+0x33ef) [0x5fa6636753ef]\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nThe parameter 'use_legacy_dirichlet_bc' is no longer valid.\n\nAll Dirichlet boundary conditions are preset by default.\n\nRemove said parameter in main to remove this deprecation warning.\nStack frames: 12\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits<char> >, char const (&) [62], char const (&) [59], char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [37]>(libMesh::BasicOStreamProxy<char, std::char_traits<char> >&, bool, bool, char const (&) [62], char const (&) [59], char const (&) [26], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const (&) [37])\n2: MooseApp::MooseApp(InputParameters)\n3: KrakenTestApp::KrakenTestApp(InputParameters)\n4: /home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/test/lib/libkraken_test-opt.so.0(+0xa4b8) [0x70b7515dc4b8]\n5: /home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/test/lib/libkraken_test-opt.so.0(+0xa547) [0x70b7515dc547]\n6: AppFactory::createShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters, int)\n7: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, int)\n8: main\n9: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x70b744c29d90]\n10: __libc_start_main\n11: ./kraken-opt(+0x33ef) [0x5fa6636753ef]\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n\"registerAll\" in Modules is deprecated. Please update your *App.C file(s) to call the new templated \"registerAllObjects\" method (e.g. ModulesApp::registerAllObjects<MyApp>(...))\nStack frames: 14\n0: libMesh::print_trace(std::ostream&)\n1: void moose::internal::mooseDeprecatedStream<libMesh::BasicOStreamProxy<char, std::char_traits<char> >, char const (&) [178]>(libMesh::BasicOStreamProxy<char, std::char_traits<char> >&, bool, bool, char const (&) [178])\n2: ModulesApp::registerAll(Factory&, ActionFactory&, Syntax&)\n3: KrakenApp::registerAll(Factory&, ActionFactory&, Syntax&)\n4: KrakenTestApp::registerAll(Factory&, ActionFactory&, Syntax&, bool)\n5: KrakenTestApp::KrakenTestApp(InputParameters)\n6: /home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/test/lib/libkraken_test-opt.so.0(+0xa4b8) [0x70b7515dc4b8]\n7: /home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/test/lib/libkraken_test-opt.so.0(+0xa547) [0x70b7515dc547]\n8: AppFactory::createShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters, int)\n9: AppFactory::createAppShared(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, int)\n10: main\n11: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x70b744c29d90]\n12: __libc_start_main\n13: ./kraken-opt(+0x33ef) [0x5fa6636753ef]\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/../problems/Dragonskin_20_test_1D_final.i:197: (Functions/rampexp/value):\nThe parameter 'value' is deprecated.\nUse 'expression' instead.\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/../problems/Dragonskin_20_test_1D_final.i:211: (Functions/a_regulator/vals):\nThe parameter 'vals' is deprecated.\nUse 'symbol_values' instead.\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/../problems/Dragonskin_20_test_1D_final.i:212: (Functions/a_regulator/vars):\nThe parameter 'vars' is deprecated.\nUse 'symbol_names' instead.\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\n/home/enk001/Documents/PHD/PHD-Code/projects-MOOSE/Kraken/kraken/../problems/Dragonskin_20_test_1D_final.i:243: (BCs/Pressure/stress1/alpha):\nThe parameter 'alpha' is deprecated.\nPlease use hht_alpha\n\n\n\n*** ERROR ***\nA 'H_ADComputeFiniteStrain' is not a registered object.\n\nIf you are trying to find this object in a dynamically loaded library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nStack frames: 21\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: void mooseError<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)\n3: Factory::reportUnregisteredError(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n4: Factory::getValidParams(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n5: MooseObjectAction::MooseObjectAction(InputParameters const&)\n6: AddMaterialAction::AddMaterialAction(InputParameters const&)\n7: RegistryEntry<AddMaterialAction>::buildAction(InputParameters const&)\n8: ActionFactory::create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters&)\n9: Moose::Builder::walkRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, hit::Node*)\n10: Moose::Builder::walk(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, hit::Node*)\n11: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n12: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n13: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n14: Moose::Builder::build()\n15: MooseApp::setupOptions()\n16: MooseApp::run()\n17: main\n18: /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x70b744c29d90]\n19: __libc_start_main\n20: ./kraken-opt(+0x33ef) [0x5fa6636753ef]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nThere are several warnings stating that 'this code is deprecated' - does this mean I need to downgrade my installed MOOSE version to an older version?\nKind regards,\nKurt.",
          "url": "https://github.com/idaholab/moose/discussions/27358",
          "updatedAt": "2024-04-12T06:16:44Z",
          "publishedAt": "2024-04-12T03:45:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDeprecation messages mean you should update your input, not use an older moose. Deprecated code is not broken, but it won't work anymore one day.\nThere is an object in that input that is not known to the application you are running. You should contact the developers of kraken to know where it came from\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27358#discussioncomment-9091801",
                  "updatedAt": "2024-04-12T06:16:46Z",
                  "publishedAt": "2024-04-12T06:16:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "failed restart or recover from a checkpoint on HPC cluster",
          "author": {
            "login": "xajezade"
          },
          "bodyText": "Hello there,\nI have done a crystal plasticity simulation with contact mechanics and my simulation was killed due to time limit. Now when I want to restart or recover, I get segmentation fault. It looks like that the restart is loaded. I am using --n-threads=32 and replicated mesh.\nCould you please help me to figure this out?\nAli",
          "url": "https://github.com/idaholab/moose/discussions/26805",
          "updatedAt": "2024-04-12T02:45:40Z",
          "publishedAt": "2024-02-14T06:31:55Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDId you output one or two checkpoint files? Can you try the older one? If the simulation is killed while the file is being written, it will be corrupted.\nDoes it load fine without threads?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-8467635",
                  "updatedAt": "2024-02-14T15:49:05Z",
                  "publishedAt": "2024-02-14T15:49:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "This is a known issue #26485, specific to the crystal plasticity part of the tensor_mechanics module. Updates are not there in the main code yet.",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-8468265",
                          "updatedAt": "2024-02-14T16:30:59Z",
                          "publishedAt": "2024-02-14T16:30:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xajezade"
                          },
                          "bodyText": "Hi\n@GiudGiud Thank you for your reply! I have outputted two checkpoints, and non of them work. It doesn't work with single thread. It is N to N kind of restart.\n@schakrabortygithub Ok, thank you! Can we keep this conversation open until the updates are merged into the main?",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-8470598",
                          "updatedAt": "2024-02-14T19:04:06Z",
                          "publishedAt": "2024-02-14T19:02:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It s ok to keep the post open. It s best to subscribe to the relevant issue notifications to stay informed about the topic btw",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-8478616",
                          "updatedAt": "2024-02-15T11:38:54Z",
                          "publishedAt": "2024-02-15T11:38:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xajezade"
                          },
                          "bodyText": "@schakrabortygithub I have reinstalled MOOSE following the merged resolved issue. Now I can see that the recovery option works but my time increments quickly goes to a very small time increment. my time increment was stable at dt = 0.0004 before previous job termination but now it goes to  dt = 3.8147e-10 after 10 steps. Is this an expected behavior? Probably I'll hit \"dt min reached\" error!",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9063824",
                          "updatedAt": "2024-04-09T20:57:16Z",
                          "publishedAt": "2024-04-09T20:55:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "schakrabortygithub"
                          },
                          "bodyText": "@xajezade I do not know the input script of your crystal plasticity simulation. Is it possible to share the minimal input script that will reproduce the problem.\nOtherwise, can you can first try with some simple CP problem by using the script located at modules/solid_mechanics/test/tests/crystal_plasticity/stress_update_material_based/bicrystal_test.i and then restart the simulation. Plot the time vs pk2 from both the simulations in one graph. You should get something similar to this:",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9064701",
                          "updatedAt": "2024-04-10T00:06:16Z",
                          "publishedAt": "2024-04-10T00:06:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The time step reducing means the solve is failing.\nSee the troubleshooting failed solves instructions to get it to converge",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9065773",
                          "updatedAt": "2024-04-10T03:14:17Z",
                          "publishedAt": "2024-04-10T03:14:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xajezade"
                          },
                          "bodyText": "@schakrabortygithub I am going to test this! I am simulating indentation problem, so I have also contact in addition to crystal plasticity. I'll try to make a simpler model to see if I can reproduce the same issue for further investigation.\n@GiudGiud I have an interrupted simulation due to the time limit that I have on our HPC system. Before the simulation was killed, I had a stable time increment and a converged solution. I have outputted the last two checkpoints, I get the same problem if I restart from both. Doesn't it suggest that the restart procedure caused this failing?",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9066127",
                          "updatedAt": "2024-04-10T04:33:36Z",
                          "publishedAt": "2024-04-10T04:33:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you can reproduce this failing on even an early checkpoint, a time step which would have passed if you did not use checkpoints, then yes it points to a failure in checkpoints\nWhich moose commit are you using now? It should say in the header of the log",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9070883",
                          "updatedAt": "2024-04-10T12:37:01Z",
                          "publishedAt": "2024-04-10T12:37:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xajezade"
                          },
                          "bodyText": "Here is my screenshot of the simulation log on the time increments before restart:\n\nand here is just after restart:\n\nAgain my simulation is still running but with a very small time increment:\n\nIt looks like that the restart cannot restore contact properly and want to reestablish contact. Note that I don't have a problem without contact. I am going to test the example on 2d indenter to see if I can reproduce the same issue.\nHere is the Framework information:\nFramework Information:\nMOOSE Version:           git commit bfbeaaf on 2024-04-04\nLibMesh Version:         7dbd90ade88cb16a5e855a4c345454c9c146ebec\nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9074263",
                          "updatedAt": "2024-04-10T17:30:24Z",
                          "publishedAt": "2024-04-10T17:28:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xajezade"
                          },
                          "bodyText": "On a separate note, modules/contact/examples/2d_indenter/ example cannot be restarted using --recover option. Also, I have outputted checkpoints. I tried to read from mesh.cpr file from input file but it gives me this error:Cannot use appendMeshGenerator() because there is not a generator to append to!",
                          "url": "https://github.com/idaholab/moose/discussions/26805#discussioncomment-9089516",
                          "updatedAt": "2024-04-11T22:56:45Z",
                          "publishedAt": "2024-04-11T22:56:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compute Isotropic Elastic Tensor",
          "author": {
            "login": "bbist196"
          },
          "bodyText": "Hello Team,\nI am trying to work with temperature and concentration dependent isotropic elastic tensor. I was able to compute isotropic elastic tensor dependent on temperature using 'ComputeVariableIsotropicElasticityTensor' using temperature as 'args'. However, i want the isotropic elastic constants (tensor) which depends on both temperature and concentration.\nDo any one have any idea??\nHelp will be highly appreciated.\nThank you,\nBashant Bist",
          "url": "https://github.com/idaholab/moose/discussions/27356",
          "updatedAt": "2024-04-12T02:41:17Z",
          "publishedAt": "2024-04-11T22:25:43Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nUnless you can find another elasticity tensor material that does what you want, you will have to create a new material.\nThe variableIsotropic..Tensor is a good example to start from\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27356#discussioncomment-9090744",
                  "updatedAt": "2024-04-12T02:41:17Z",
                  "publishedAt": "2024-04-12T02:41:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Convergence when using ScalarLagrangeMultiplier",
          "author": {
            "login": "charlotte-b8086"
          },
          "bodyText": "I am working to code up a Poisson-Nernst-Planck model by Bazant et al.:\n\\begin{aligned}\n\\nabla c_{+} + c_{+} \\nabla \\phi &= 4j \\\\\n\\nabla c_{-} - c_{-} \\nabla \\phi &= 0 \\\\\n-\\epsilon^2 \\Delta \\phi &= \\frac{1}{2}\\left(c_{+} -c_{-}\\right) \\notag\n\\end{aligned}\nsubject to the boundary conditions\n\\begin{aligned*}\n\\phi(0) &= 0 \\\\\n\\phi(1) &= 1 \\\\\nc_{+}(0) &= 1.09 \\\\\nc_{+}(1) &= 0.91\n\\end{aligned*}\nand the constraint \n$$\n\\int_{\\Omega} c_{-} dx = 1.\n$$\nIn the paper, the authors integrated two second order differential equations to obtain the first order differential equations (1) and (2) using a boundary condition for $c_{-}$. I have substituted some values directly into the model that appears in the paper to simplify the presentation.\nI have successfully been able to run a MOOSE input file which solves for the system of PDEs with the boundary conditions but without the constraint.\nI am now working to implement the constraint using ScalarLagrangeMultiplier. It seems like a straightforward application of the available kernel.\nHowever, as soon as I introduce this constraint into the input file, the solver struggles to converge.\nI started with just coding $c_{-}$ with the constraint (letting all the other variables be 0 essentially) and that was able to converge. I was able to add in $\\phi$ with just its diffusion term (so working with the simplified PDE $-\\epsilon^2 \\Delta \\phi = 0$), but as soon as I add in the CoupledForce term for phi  (so working with the simplified PDE $-\\epsilon^2 \\Delta \\phi = -0.5 c_{-}$), the solver is unable to converge.\nLooking through documentation, it was mentioned somewhere that adding in constraints does make solving more difficult.\nDo you have any recommendations for what type of Executioner and/or Preconditioning would help convergence?\nThis is what I currently have, which works for just the diffusion term but not the CoupledForce term in the residual equation for $\\phi$.\n[Preconditioning]\n  # Preconditioning is required for Newton's method.\n  [./coupled]\n    type = SMP\n    full = true\n    solve_type = 'NEWTON'\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  solve_type = 'LINEAR'\n  l_max_its = 30\n  l_tol = 1e-6\n  nl_max_its = 300\n  nl_abs_tol = 1e-4\n  #line_search = none\n  petsc_options_iname = '-pc_type -ksp_gmres_restart -sub_ksp_type\n                         -sub_pc_type -pc_asm_overlap'\n  petsc_options_value = 'lu      31                  preonly\n                         lu          1'\n[]\nI was working with the LU in the petsc_options_value because when I first introduced the diffusion term (so did not just set $\\phi$ to be 0), I was having a zero factor pivot error, and that solution was proposed in another discussion post.\nI believe it was before I added in $\\phi$ I was having a line_search error issue and saw in another discussion post that sometimes the default does not work for convergence, so I had input the line_search = none to rectify that, but then I believe when I added in $\\phi$, while I had to add in the LU, I was able to get rid of that command without convergence failing.\nI'm trying to recreate the results of the paper so I won't really know if the solution I am getting is correct until everything is incorporated. Even though I have convergence for this simple case, I don't know that it is to the correct solution, but I want to have convergence in the more complicated case so that I can verify that it is correct.\nI appreciate any suggestions you may offer.",
          "url": "https://github.com/idaholab/moose/discussions/27336",
          "updatedAt": "2024-04-11T17:48:39Z",
          "publishedAt": "2024-04-10T02:25:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nHave you tried to add a nonzero factor shift? Often constraints DoFs introduce a 0 on the diagonal\nWhat kind of convergence error are you getting? The linear or nonlinear solve?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27336#discussioncomment-9065683",
                  "updatedAt": "2024-04-10T03:03:24Z",
                  "publishedAt": "2024-04-10T03:03:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "charlotte-b8086"
                          },
                          "bodyText": "This helped a lot, thank you! My code is now running (although not yet producing there correct results). It was linear solve convergence.",
                          "url": "https://github.com/idaholab/moose/discussions/27336#discussioncomment-9087218",
                          "updatedAt": "2024-04-11T17:48:40Z",
                          "publishedAt": "2024-04-11T17:48:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "SideSetsAroundSubdomainGenerator & SideSetsBetweenSubdomainsGenerator",
          "author": {
            "login": "styyokuda"
          },
          "bodyText": "All,\nIn order to study \"SideSetsAroundSubdomainGenerator\" and \"SideSetsBetweenSubdomainsGenerator\" to be used for an InterfaceKernels app such as \"InterfaceDiffusion,\" I ran the model shown below and produced the same results. So, I would like to say both \"SideSetsAroundSubdomainGenerator\" and \"SideSetsBetweenSubdomainsGenerator\" can be used for InterfaceKernels apps.\nPlease confirm.  S. Thomas\n[Mesh]\n[gen]\ntype = GeneratedMeshGenerator\ndim = 2\nnx = 20\nny = 20\nxmax = 1\nymax = 1\n[]\n[./subdomain1]\ninput = gen\ntype = SubdomainBoundingBoxGenerator\nbottom_left = '0.5 0 0'\ntop_right = '1.0 1.0 0'\nblock_id = 1\n[../]\n[./interface]\ntype = SideSetsAroundSubdomainGenerator\ninput = subdomain1\nblock = 0\nnormal = '1 0 0' # right\nnew_boundary = 'interface'\n[../]\n.\n.\n[InterfaceKernels]\n[./Interface]\ntype = InterfaceDiffusion\nvariable = 'u'\nneighbor_var = 'v'\nD = 1\nD_neighbor = 3\nboundary = 'interface'\n[../]\n[]\nor\n[./interface]\ninput = subdomain1\ntype = SideSetsBetweenSubdomainsGenerator\nprimary_block = '0'\npaired_block = '1'\nnew_boundary = 'master0_interface'\n[../]\n.\n.\n[InterfaceKernels]\n[./Interface]\ntype = InterfaceDiffusion\nvariable = 'u'\nneighbor_var = 'v'\nD = 1\nD_neighbor = 3\nboundary = 'master0_interface'\n[../]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/27331",
          "updatedAt": "2024-04-10T16:52:07Z",
          "publishedAt": "2024-04-09T18:01:30Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYes they should both be able to produce valid sidesets that you can use downstream.\nThe parameters are a little different they differ a bit in how they specify the sideset\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27331#discussioncomment-9065797",
                  "updatedAt": "2024-04-10T03:16:12Z",
                  "publishedAt": "2024-04-10T03:16:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "styyokuda"
                          },
                          "bodyText": "Thank you, Guillaume, as always.",
                          "url": "https://github.com/idaholab/moose/discussions/27331#discussioncomment-9073925",
                          "updatedAt": "2024-04-10T16:51:59Z",
                          "publishedAt": "2024-04-10T16:51:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Posting guidelines",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "Before posting, please review the following set of guidelines\nYour question is likely to have already been answered\n\nplease search the documentation website (especially the troubleshooting page)\nplease search the github discussions forum, using the error output by moose as keywords for example. If you find the solution there, great! If not, then create your own discussion thread. Do not post on an old already answered discussion thread! These are not monitored as closely as new threads. You can however add a link to the seemingly related thread in your newly created post.\n\nWe need enough information to help you!\n\nfor build or runtime issues, tell us about your platform, your operating system, your compiler (all of which can be obtained with executing moose/scripts/diagnostics.sh in the console)\nfor unexpected results, add a figure if relevant\nfor convergence issues, consider uploading your input file and your mesh.\nInput files may be shared directly in the post (formatted with triple back quotes ``` please), but the most convenient way to share input files, meshes (and possibly your application) is to share a link to a public github repository. Please avoid uploading .zip files\nfor a seg fault or an MPI_Abort crash, follow the instructions here first, and give us a full backtrace from a debug mode build\n\nStyle guidelines\n\nwe strongly suggest that posts be made in English so that they are directly accessible to the entire community\nno screenshots of text. These are not searchable by the next user who runs into the same issue\nuse the back quotes (3 for multiline pastes: ```) to format input files, code AND output logs. These are unreadable otherwise\n\nUpdate moose AND its dependencies (libmesh, petsc)\n\nWe would rather always be supporting you on an up-to-date version of MOOSE, because old bugs have been fixed\nUpdating libmesh (through a conda update for example) while not updating moose or the other way around can cause hard to understand errors, most often at compile time\nAfter updating, there can be left over compiled objects / libraries. If getting some compilation errors after updating, it is worth cleaning the MOOSE repository (make clobberall is most often plenty sufficient, but for some external packages, like pcre, you will need to commit all your developments then run git clean -xfd to remove them). If build errors are happening for an app, you may need to run git submodule foreach git clean -xfd to clear out all old compiled objects from every dependency (including MOOSE)\n\nIf after a week no one has answered, please tag a MOOSE developer",
          "url": "https://github.com/idaholab/moose/discussions/18270",
          "updatedAt": "2024-04-10T14:07:44Z",
          "publishedAt": "2021-07-06T18:13:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "\ud83d\udc4d",
                  "url": "https://github.com/idaholab/moose/discussions/18270#discussioncomment-1427437",
                  "updatedAt": "2022-06-02T06:04:42Z",
                  "publishedAt": "2021-10-05T00:17:17Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Common Installation Issues",
          "author": {
            "login": "GiudGiud"
          },
          "bodyText": "If MOOSE does not build, before asking for help on this forum:\n\nupdate MOOSE with\n\ngit fetch origin\ngit commit -am \"Saving my current work\"\ngit rebase origin/devel\n\n\nupdate the moose dependencies.\nIf you used conda to install moose, this is simply conda update moose-dev\nTry to build again with make -j6 in moose/test\n\nIf this fails, try this next step:\n\nclean the repository after having saved all your work with git add / git commit\nusing\n\ncd ~/projects/moose\ngit clean -Xfd\n\nthen try to make again\nIf the above fails, run the diagnostic script and attempt to address any failure/warning messages:\ncd ~/projects/moose\nscripts/diagnostics.sh\nIn the event you continue to run into issues and wish to post a question, please include the above diagnostic output.\nImportantBefore posting, please review the Posting guidelines",
          "url": "https://github.com/idaholab/moose/discussions/27046",
          "updatedAt": "2024-04-10T14:05:41Z",
          "publishedAt": "2024-03-10T22:28:32Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Simulating excavation and refill of full blocks using CoupledVarThresholdElementSubdomainModifier",
          "author": {
            "login": "jmeier"
          },
          "bodyText": "Hi all,\nFor various tasks in the field of engineering and mining, the excavation (and possibly refilling) of defined volumes must be modelled. Examples are excavation pits or the excavation of a tunnel. The discussions here at https://github.com/idaholab/moose/discussions contain several corresponding questions and hints (e.g. #23677, #20601, #16387, #25264, and others), on how this can be achieved with Moose.\nTo the best of my current knowledge, there are three options for modelling the removal of model parts in Moose:\n\nOption 1: The element is not really removed from the model, but a reduced stiffness and weight is assigned. An example model that uses this approach can be found here: coal_mining\nOption 2: A restart analysis is performed. Strictly speaking, a series of Moose models is calculated in which the subsequent model has an adapted mesh and imports the initial state from the predecessor model. As this approach \"breaks down\" the model definition into individual models, I have not pursued this approach any further to date.\nOption 3: Elements are moved from an \"active\" subdomain to an \"inactive\" subdomain during a Moose calculation. I would like to pursue this option with this \"show and tell\".\n\nFirst of all: Many thanks to @GiudGiud, @Kavan-Khaledi, and @AdrienWehrle for their valuable advices, without which this show and tell would not have been possible.\nScreenshot: excavated block at t=0.4\n\nThe code below creates a rectangular volume (\"Box1\") in the centre of which a small cube (\"Box2\") is to be removed at t=0.4. To keep the model simple, both Box1 and Box2 are linearly elastic. The approach can be described very briefly as follows:\n\nIn addition to the subdomains Box1 and Box2, in which the corresponding elements are located, an empty subdomain 3 is created.\nSubdomain 3 contains a greatly reduced \"physics\" so that the elements moved there are \"inactive\".\nThe tensor mechanics master block is therefore only created for the subdomains of Box1 and Box2. Gravity also only works here.\nIn subdomain 3, a diffusion kernel is only created as a \"dummy\" kernel.\nWhen Box2 is moved to subdomain 3 is controlled by a function (PiecewiseConstant). The value of this function is stored in an aux variable. This aux variable is in turn used by a CoupledVarThresholdElementSubdomainModifier to move the elements of Box2 to subdomain 3 at t=0.4.\n\nIn the model initially Box1 and Box2 are active. At t=0.4 Box2 gets \"removed\". As expected, as a result of the unloading, the material of Box1 lifts in the proximity of the removed Box2.\nTo run the input file, your Moose app needs the modules \"MISC\" (for the gravity) and \"TENSOR_MECHANICS\".\nAs a side-note: I presume that in productive models (especially with more complex material behaviour) a mixture of option 1 (reduction of stiffness and weight) and option 3 (subdomain modifier) is probably the method of choice. First make it soft and light and then move it to the inactive subdomain.\nCode Block: Moose Input File\n\n# testing construction stages\n# primary model units (m | s | kg --> N/m\u00b2)\n\n#some model-specific variables\nmaterial_density = 21.5E3         # kg/m^3\ngravitational_acceleration = 9.81 # m/s^2\nsig_top = 0.0                     # N/m^2\nz_top = 10.0\n\n[Problem]\n  kernel_coverage_check = false\n  material_coverage_check = false\n[]\n\nBox2_inactive = '3'\ninactive_domain_blocks = ${Box2_inactive}\n\n[Mesh]\n\n  [BaseMesh]\n    type = GeneratedMeshGenerator\n    elem_type = \"TET10\"\n    dim = 3\n    nx = 20\n    ny = 20\n    nz = 2\n    xmin = -10\n    xmax = +10\n    ymin = -10\n    ymax = +10\n    zmin = -2\n    zmax = +2\n  []\n\n  [Box1]\n    type = SubdomainBoundingBoxGenerator\n    input = \"BaseMesh\"\n    block_id = 1\n    location = \"INSIDE\"\n    bottom_left = \"-20 -20 -2\"\n    top_right   = \"+20 +20 +2\"\n  []\n\n  [Box2]\n    type = SubdomainBoundingBoxGenerator\n    input = \"Box1\"\n    block_id = 2\n    location = \"INSIDE\"\n    bottom_left = \"-2 -2 +2\"\n    top_right   = \"+2 +2 0\"\n  []\n\n  add_subdomain_ids = ${inactive_domain_blocks}\n\n[]\n\nactive_domain_blocks =  '1 2' #Box1 Box2\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n  large_kinematics = false\n[]\n\n# ===== Tensor mechanics for all active domain blocks =====\n[Modules/TensorMechanics/Master]\n  [./all]\n    new_system = true\n    formulation = total\n    strain = small\n\n    block = ${active_domain_blocks}\n    add_variables = true\n\n    generate_output = 'stress_xx stress_xy stress_xz stress_yy stress_yz stress_zz '\n  []\n[]\n\n# ===== Gravity =====\n[Kernels]\n  [./Gravity]\n    type = Gravity\n    block = ${active_domain_blocks}\n    use_displaced_mesh = false\n    variable = disp_z\n    value = -${gravitational_acceleration}\n  []\n [./donothing1]\n    type = MatDiffusion\n    block = ${inactive_domain_blocks}\n    variable = disp_z\n    diffusivity = 1e-7\n  []\n [./donothing2]\n    type = MatDiffusion\n    block = ${inactive_domain_blocks}\n    variable = disp_x\n    diffusivity = 1e-7\n  []\n [./donothing3]\n    type = MatDiffusion\n    block = ${inactive_domain_blocks}\n    variable = disp_y\n    diffusivity = 1e-7\n  []\n[]\n\n# ===== Boundary Conditions: Fixies at XMin, XMax, YMin, YMax, ZMin =====\n[BCs]\n  \n  [./BoundaryXMin_DispX]\n    type = DirichletBC\n    boundary = 'left'\n    variable = disp_x\n    value = 0\n  []\n\n  [./BoundaryXMax_DispX]\n    type = DirichletBC\n    boundary = 'right'\n    variable = disp_x\n    value = 0\n  []\n  \n  [./BoundaryYMin_DispY]\n    type = DirichletBC\n    boundary = 'bottom'\n    variable = disp_y\n    value = 0\n  []\n  \n  [./BoundaryYMax_DispY]\n    type = DirichletBC\n    boundary = 'top'\n    variable = disp_y\n    value = 0\n  []\n  \n  [./BoundaryZMin_DispX]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_x\n    value = 0\n  []\n\n  [./BoundaryZMin_DispY]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_y\n    value = 0\n  []\n\n  [./BoundaryZMin_DispZ]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_z\n    value = 0\n  []\n\n[]\n\n# ===== Initial Conditions: Initial Stress Field =====\n[Functions]\n  [ini_xx]\n    type = ParsedFunction\n    expression = '(-sig_top - rho * g * (z_top - z)) * K0'\n    symbol_names  = 'sig_top     z_top      rho                   g                               K0  '\n    symbol_values = '${sig_top}  ${z_top}   ${material_density}   ${gravitational_acceleration}   0.3 '\n  []\n  [ini_yy]\n    type = ParsedFunction\n    expression = '-sig_top - rho * g * (z_top - z)'\n    symbol_names  = 'sig_top     z_top      rho                   g                               K0  '\n    symbol_values = '${sig_top}  ${z_top}   ${material_density}   ${gravitational_acceleration}   0.3 '\n  []\n  [ini_zz]\n    type = ParsedFunction\n    expression = '(-sig_top - rho * g * (z_top - z)) * K0'\n    symbol_names  = 'sig_top     z_top      rho                   g                               K0  '\n    symbol_values = '${sig_top}  ${z_top}   ${material_density}   ${gravitational_acceleration}   0.3 '\n  []\n[]\n\n# ===== Materials (linear-elastic to keep it simple) =====\n[Materials]\n\n  [./volAll_elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    block = ${active_domain_blocks}\n    youngs_modulus = 450E6 # 450 MN/m^2\n    poissons_ratio = 0.15\n  []\n\n  [./volAll_stress]\n    type = ComputeLagrangianWrappedStress\n    block = ${active_domain_blocks}\n  []\n\n  [./volAll_stress_base]\n    type = ComputeLinearElasticStress\n    block = ${active_domain_blocks}\n  []\n\n  [./volAll_ini_stress]\n    type = ComputeEigenstrainFromInitialStress\n    eigenstrain_name = ini_stress\n    initial_stress = 'ini_xx 0 0  0 ini_yy 0  0 0 ini_zz'\n    block = ${active_domain_blocks}\n  []\n\n  [./density]\n    type = GenericConstantMaterial\n    prop_names = density\n    prop_values = ${material_density}\n    block = ${active_domain_blocks}\n  []\n\n[]\n\n# ===== Block Activation/Deactivation =====\n[Functions]\n  # this function at which time (x-value) the block is active (y=1) or inactive (y=0)\n  [Box2_ActivationStateFunction]\n    type = PiecewiseConstant\n    direction = left\n    xy_data = '0.0  0\n               0.2  0\n               0.4  1\n               1.0  1'\n  []\n[]\n# aux variable to store the value of Box2_ActivationStateFunction\n[AuxVariables]\n  [Box2_Activation_AuxVariable]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n[]\n# link Box2_ActivationStateFunction and Box2_Activation_AuxVariable\n[AuxKernels]\n  [Box2_Activation_FunctionAux]\n    type = FunctionAux\n    variable = 'Box2_Activation_AuxVariable'\n    function = 'Box2_ActivationStateFunction'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n# move Box2 between subdomains\n[UserObjects]\n  [Box2_SubdomainModifier]\n    type = CoupledVarThresholdElementSubdomainModifier\n    coupled_var = 'Box2_Activation_AuxVariable'\n    criterion_type = ABOVE\n    threshold = 0.5\n    block = 2 #'Box2'\n    subdomain_id = 2 #Box2\n    complement_subdomain_id = ${Box2_inactive}\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n# ===== Executioner =====\n[Executioner]\n  type = Transient\n\n  end_time = 1.0\n  [TimeSteppers]\n    [BlockEventTimeStepper]\n      type = TimeSequenceStepper\n      time_sequence = '0.0 0.2 0.4 1.0'\n    []\n  []\n  \n  solve_type = 'PJFNK'\n  petsc_options = '-snes_converged_reason'\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'\n\n  nl_abs_tol = 1E-3\n  nl_max_its = 400\n  \n  l_tol = 1E-3\n  l_max_its = 200\n[]\n\n[Outputs]\n  perf_graph = true\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/26941",
          "updatedAt": "2024-04-10T13:52:30Z",
          "publishedAt": "2024-03-01T17:19:11Z",
          "category": {
            "name": "Show and tell"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "PEI0214"
                  },
                  "bodyText": "Hello, I would like to ask how to realize the filling process? Thank you for your help.",
                  "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-8924388",
                  "updatedAt": "2024-03-27T07:24:10Z",
                  "publishedAt": "2024-03-27T07:24:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Hello @PEI0214, the CoupledVarThresholdElementSubdomainModifier can move elements from one subdomain to another. The example above moves elements from a subdomain \"with physics\" to a subdomain \"without physics\". To model a filling process, elements can be moved from a subdomain \"without physics\" to a subdomain \"with physics\" using the same technique.",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-8938584",
                          "updatedAt": "2024-03-28T09:54:53Z",
                          "publishedAt": "2024-03-28T09:54:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "When simulating the fill process, a non-convergence occurs when moving elements from a subdomain \u201cwithout physics\u201d to a subdomain \u201cwith physics\u201d. Is this due to mesh distortion? Do you have any good solutions?",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-8948241",
                          "updatedAt": "2024-03-29T05:28:41Z",
                          "publishedAt": "2024-03-29T05:28:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "When moving elements from one subdomain to another, you may very well want to ramp in or ramp out various material parameters over time. Which parameters these are depends very much on what you want to model. In solid mechanics, however, density is often one such parameter. As a rule of thumb: try to model sufficiently well what happens in reality (e.g. a water dam is usually not put down \"all at once\" - rather in many small steps).",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-8958718",
                          "updatedAt": "2024-03-30T11:06:38Z",
                          "publishedAt": "2024-03-30T11:06:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Do you have examples of simulated fill construction? If so, can you provide it for learning?Thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-9066636",
                          "updatedAt": "2024-04-10T06:03:23Z",
                          "publishedAt": "2024-04-10T06:03:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "How do you implement the \"Option 2\"?",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-9071612",
                          "updatedAt": "2024-04-10T13:37:34Z",
                          "publishedAt": "2024-04-10T13:37:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Do you have examples of simulated fill construction? If so, can you provide it for learning?\n\nCurrently I have no example showing this.\n\nHow do you implement the \"Option 2\"?\n\nOption 1 and 2 are not shown in this example.",
                          "url": "https://github.com/idaholab/moose/discussions/26941#discussioncomment-9071781",
                          "updatedAt": "2024-04-10T13:52:31Z",
                          "publishedAt": "2024-04-10T13:52:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}