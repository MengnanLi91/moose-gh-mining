{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0xMi0wNFQxMjo1ODo0Ny0wNjowMM4AWmR5"
    },
    "edges": [
      {
        "node": {
          "title": "Converting a 2D problem into 3D",
          "author": {
            "login": "sreejitsarmac"
          },
          "bodyText": "Hey guys. This is an example code from the MOOSE modules. This is a 2D subdomains problem. I am trying to turn this into a 3D problem. Can y'all tell me how to go about this? I'm getting errors on my codes. Thanks! Also can you tell me how to create a small circular subdomain on the 2D problem?\n#\n# Added subdomains and subdomain-specific properties\n# https://mooseframework.inl.gov/modules/tensor_mechanics/tutorials/introduction/step03.html\n#\n\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n[]\n\n[Mesh]\n  [generated]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 40\n    ny = 20\n    xmax = 2\n    ymax = 1\n  []\n\n  # assign two subdomains\n  [block1]\n    type = SubdomainBoundingBoxGenerator\n    input = generated\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '1 1 0'\n  []\n  [block2]\n    type = SubdomainBoundingBoxGenerator\n    input = block1\n    block_id = 2\n    bottom_left = '1 0 0'\n    top_right = '2 1 0'\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [all]\n    add_variables = true\n  []\n[]\n\n[BCs]\n  [bottom_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = bottom\n    value = 0\n  []\n  [bottom_y]\n    type = DirichletBC\n    variable = disp_y\n    boundary = bottom\n    value = 0\n  []\n  [Pressure]\n    [top]\n      boundary = top\n      function = 1e7*t\n    []\n  []\n[]\n\n[Materials]\n  [elasticity1]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e9\n    poissons_ratio = 0.3\n    block = 1\n  []\n  [elasticity2]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 5e8\n    poissons_ratio = 0.3\n    block = 2\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  end_time = 5\n  dt = 1\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/26245",
          "updatedAt": "2023-12-05T20:49:54Z",
          "publishedAt": "2023-12-04T17:04:09Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI would stay:\n\nchange the mesh to a 3D mesh by adding a nz and zmax parameter\nadd a displacement disp_z\neverywhere you see disp_x add a similar object for disp_z\n\nand that should make it 3D\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26245#discussioncomment-7755604",
                  "updatedAt": "2023-12-04T17:07:26Z",
                  "publishedAt": "2023-12-04T17:07:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sreejitsarmac"
                          },
                          "bodyText": "Hey Guillaume.\nI did try those but it didn't work.  I think that the problem lies in the part:\n[block1]\n    type = SubdomainBoundingBoxGenerator\n    input = generated\n    block_id = 1\n    bottom_left = '0 0 0'\n    top_right = '1 1 0'\n  []\n  [block2]\n    type = SubdomainBoundingBoxGenerator\n    input = block1\n    block_id = 2\n    bottom_left = '1 0 0'\n    top_right = '2 1 0'\n\nSince I am unable to figure out how many more parameters I must add similar to bottom left and top right since in 3D we would need more of those. Please let me know what to do here.\nThanks\nsreejitsarmac",
                          "url": "https://github.com/idaholab/moose/discussions/26245#discussioncomment-7757591",
                          "updatedAt": "2023-12-04T20:55:36Z",
                          "publishedAt": "2023-12-04T20:54:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "bottom_left and top_right are points. Right now they both a z coordinate of 0. This makes it 0 width in z. Maybe modify the Z coordinate of both these points to make it match the shape you want in 3D?",
                          "url": "https://github.com/idaholab/moose/discussions/26245#discussioncomment-7757614",
                          "updatedAt": "2023-12-04T20:56:18Z",
                          "publishedAt": "2023-12-04T20:56:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreejitsarmac"
                          },
                          "bodyText": "Yeah I tried that as well. It still doesn't work. It gives me an error like \"bad description\"",
                          "url": "https://github.com/idaholab/moose/discussions/26245#discussioncomment-7768742",
                          "updatedAt": "2023-12-05T20:29:06Z",
                          "publishedAt": "2023-12-05T20:29:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you please paste the entire error?\nand maybe also the current version of your input",
                          "url": "https://github.com/idaholab/moose/discussions/26245#discussioncomment-7768890",
                          "updatedAt": "2023-12-05T20:49:55Z",
                          "publishedAt": "2023-12-05T20:49:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "CUDA  question",
          "author": {
            "login": "ljeft"
          },
          "bodyText": "Hello Mooser\nI know that Moose can improve efficiency by calling GPU through Pestc, now I wonder where Moose wrote CUDA-related code, I am trying to port CUDA code. Allow Moose to call DCU (Datacenter Acceleration Unit)\u3002",
          "url": "https://github.com/idaholab/moose/discussions/26233",
          "updatedAt": "2023-12-05T19:03:43Z",
          "publishedAt": "2023-12-03T15:10:15Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "I'm not quite sure what you're asking. MOOSE does not have much CUDA-related code inside of the repository. The only bit is in BatchMaterial.h written by @dschwen",
                  "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7757888",
                  "updatedAt": "2023-12-04T21:29:13Z",
                  "publishedAt": "2023-12-04T21:29:12Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "ljeft"
                          },
                          "bodyText": "Sorry, maybe I don't know enough about moose, I just want to try running moose using gpu, I just watched moose's YouTube video \"Porting PETSc-based application codes to GPU-accelerated architectures\" .This question was raised before I discovered this video.",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7761385",
                          "updatedAt": "2023-12-05T07:48:58Z",
                          "publishedAt": "2023-12-05T07:48:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nI think porting all of MOOSE might be too much work.\nAs Alex mentioned materials can be ported to GPU.\nAnother project would be to make a generic GPU PetscApp and add the links from this app to MOOSE in the external_petsc_solver MOOSE module.\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7765296",
                          "updatedAt": "2023-12-05T14:27:44Z",
                          "publishedAt": "2023-12-05T14:27:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ljeft"
                          },
                          "bodyText": "Can you give me a case  or a link to this project?",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7765530",
                          "updatedAt": "2023-12-05T14:49:27Z",
                          "publishedAt": "2023-12-05T14:49:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the main class is there\nhttps://mooseframework.inl.gov/source/problems/ExternalPETScProblem.html\nI dont know if there's much documentation outside the code.\nThere is no ongoing work there, it s just an idea for integrating GPU code with moose",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7765564",
                          "updatedAt": "2023-12-05T14:53:57Z",
                          "publishedAt": "2023-12-05T14:53:56Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "You may also want to read https://petsc.org/release/faq/#doc-faq-gpuhowto. Something we would want to do to help MOOSE applications call through to PETSc with GPU support is to leverage the PETSc GPU Vec and Mat types. For instance we could programatically create PETSc CUDA vectors and matrices. This would start at the libMesh level. Just grepping in libMesh for VECSEQCUDA or VECMPICUDA yields no hits.\nI think we have not spent a lot of time on this yet because it's been unclear what GPU implementations would become most used. E.g. with limited resources should we focus on CUDA, OpenCL, something else? Anyway if you just want to get through to PETSc, then the external problem that @GiudGiud pointed to is a good route.\nFYI @roystgnr",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7767147",
                          "updatedAt": "2023-12-05T17:25:32Z",
                          "publishedAt": "2023-12-05T17:16:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "There is actually a (newly again) active Discussion about GPUs over at #21152. I've struck through my second paragraph above. If you have a GPU enabled PETSc, you should be able to perform GPU solves by passing GPU types for the PETSc options -vec_type and -mat_type. And you should be able to try this with any MOOSE input",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7767237",
                          "updatedAt": "2023-12-05T17:27:27Z",
                          "publishedAt": "2023-12-05T17:27:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "I don't think \"E.g. with limited resources should we focus on CUDA, OpenCL, something else?\" should have been struck - IMHO it's the huge sticking point.  Trying to mix CPU assembly with GPU solve gets hobbled by RAM->VRAM bandwidth on most architectures, so we really want GPU assembly too.  (although, it's been forever since I tested that; I should see how the $LIBMESH_BENCHMARK run goes if I just set -vec_type and -mat_type...)\nMy original libMesh-on-GPUs experiment used VexCL, which was fantastic for everything it did but which doesn't let you go to completely general kernels without ending up writing raw GPU code anyway.  A colleague in a GPGPU-intensive job tells me that the most popular alternatives today are (oversimplifying and paraphrasing): Kokkos (which nobody likes), CUDA (which is slightly less ugly but cuts your hardware compatibility in half), or CUDA+HIP (which is slightly less ugly but twice as much work).  I did some playing with the Nvidia HPC SDK a year or so ago, and that amazingly lets you write a lot of GPGPU code via \"C++17 plus a magic compiler flag\" on recent Nvidia cards, but IIRC when I dropped that I'd already reported two showstopper bugs and one of them hadn't yet been fixed.",
                          "url": "https://github.com/idaholab/moose/discussions/26233#discussioncomment-7767988",
                          "updatedAt": "2023-12-05T19:03:44Z",
                          "publishedAt": "2023-12-05T19:03:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Homogenization issue 3D",
          "author": {
            "login": "eduardogrodriguez89"
          },
          "bodyText": "Hi,\nI want to determine the effective properties of two materials, a matrix with fiber. In #25408 I could determine it in 2D.\nNow I want to extract the effective stiffnesses in 3D. A cube with a sphere inside.\nfile:///home/erodriguez/Im%C3%A1genes/box.png\nUsing a coarse mesh the code works, but when I used a fine mesh the simulation got stuck on:\n Currently Setting Up\n  Initializing\n    Initializing Equation Systems........................................................................\n\nThe found the same problem in #23483. I updated moose, but the problem still goes on.\nmesh_coarse.zip\nmesh_fine.zip\nrve_action_example.zip\nDoes this issue look familiar to anyone / any clues on what I am doing wrong here?\nThanks\nEduardo",
          "url": "https://github.com/idaholab/moose/discussions/26259",
          "updatedAt": "2023-12-05T18:38:04Z",
          "publishedAt": "2023-12-05T15:28:51Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe image did not upload well.\nIs this a parallel run?\nIs the hold up with a coarse mesh or the fine mesh?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7766471",
                  "updatedAt": "2023-12-05T16:15:01Z",
                  "publishedAt": "2023-12-05T16:15:00Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "I run both, single-core and parallel.\nThe hold up occurs with the fine mesh.",
                          "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7767348",
                          "updatedAt": "2023-12-05T17:43:33Z",
                          "publishedAt": "2023-12-05T17:43:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "The stall you showed can happen if your periodic mesh sides don't match exactly. I bet if you turned off your periodic BCs, it would very quickly pass that part. If it does then you mostly likely have a small difference in the meshes that would need to be taken care of.",
                          "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7767477",
                          "updatedAt": "2023-12-05T17:58:47Z",
                          "publishedAt": "2023-12-05T17:58:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "Ok, thanks, I'll fix the mesh and I will try again.",
                          "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7767502",
                          "updatedAt": "2023-12-05T18:02:49Z",
                          "publishedAt": "2023-12-05T18:02:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "I am assuming you ran the check I said about turning off the periodic BCs? I don't want to send you down a rabbit hole. If you still get stuck without periodic BCs then I think the error is elsewhere.",
                          "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7767662",
                          "updatedAt": "2023-12-05T18:24:17Z",
                          "publishedAt": "2023-12-05T18:24:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "eduardogrodriguez89"
                          },
                          "bodyText": "I turn off the periodic BCs and it works.",
                          "url": "https://github.com/idaholab/moose/discussions/26259#discussioncomment-7767769",
                          "updatedAt": "2023-12-05T18:38:05Z",
                          "publishedAt": "2023-12-05T18:38:04Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "hht_alpha  value",
          "author": {
            "login": "selarem"
          },
          "bodyText": "Hello,\nI think as per moose formulation of dynamics problem, the hht_alpha should be  -1/3 <=hht_alpha<=0 (G\u00e9radin Rixen book). However, In the examples I saw :\n[Kernels]\n  [./DynamicTensorMechanics]\n    displacements = 'disp_x disp_y disp_z'\n    hht_alpha = -0.3\n    stiffness_damping_coefficient = 0.1\n  [../]\n\nbut also, I saw:\n[Kernels]\n  [DynamicTensorMechanics]\n    displacements = 'disp_x disp_y disp_z'\n    stiffness_damping_coefficient = 0.1\n    hht_alpha = 0.11\n  []\n\nI would like to know if there is any reason for this positive value.\nRegards,\nSaber",
          "url": "https://github.com/idaholab/moose/discussions/26257",
          "updatedAt": "2023-12-05T14:34:50Z",
          "publishedAt": "2023-12-05T09:46:57Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "maxnezdyur"
                  },
                  "bodyText": "No use the negative only values.\nIn ADInertialForceShell there is a check to make sure that it is negative but that doesn't exist for AD/InertialForce.\n params.addRangeCheckedParam<Real>(\"alpha\",\n                                    0.0,\n                                    \"alpha >= -0.3333 & alpha <= 0.0\",\n                                    \"Alpha parameter for mass dependent numerical damping induced \"\n                                    \"by HHT time integration scheme\");",
                  "url": "https://github.com/idaholab/moose/discussions/26257#discussioncomment-7763564",
                  "updatedAt": "2023-12-05T11:29:14Z",
                  "publishedAt": "2023-12-05T11:29:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@maxnezdyur should we be erroring in the tensor mecahnics action with alpha > 0 then?",
                          "url": "https://github.com/idaholab/moose/discussions/26257#discussioncomment-7765376",
                          "updatedAt": "2023-12-05T14:33:29Z",
                          "publishedAt": "2023-12-05T14:33:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "maxnezdyur"
                          },
                          "bodyText": "Yes I think so. I think the error check never made it's way there.",
                          "url": "https://github.com/idaholab/moose/discussions/26257#discussioncomment-7765395",
                          "updatedAt": "2023-12-05T14:34:51Z",
                          "publishedAt": "2023-12-05T14:34:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ERROR: singular Jacobian",
          "author": {
            "login": "leoforeal"
          },
          "bodyText": "Hallo!\nI encounter the following error while running a steady state simulation with solve_type: NEWTON.\nERROR: Newton scheme encountered a singular Jacobian in element: 156804\nI looked up the meaning of singular Jacobian, which in general means the initial guess causes the solution to diverge.\nDoes that mean by adjusting my input parameter in Material or variable could have an effect on the divergence.\nAlso another thought I have is, if it has something to do with the mesh itself, which in my case contains a fault zone.\nThanks so much in advance!",
          "url": "https://github.com/idaholab/moose/discussions/26253",
          "updatedAt": "2023-12-05T14:35:00Z",
          "publishedAt": "2023-12-04T23:21:25Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDid this after on the first iteration?\nOr deep into the solve?\nIf on the first iteration, this is a problem with the mesh not with the solve.\nIf not, then the solve is progressing into an unphysical realm (large displacements) that break the mesh\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26253#discussioncomment-7759933",
                  "updatedAt": "2023-12-05T03:45:50Z",
                  "publishedAt": "2023-12-05T03:45:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "leoforeal"
                  },
                  "bodyText": "It happens at the very beginning of the iteration.\nThe purpose of the code was to actually carry out refinement process of one of the block in mesh.\nIn this case, what could be the potential problem of the mesh?",
                  "url": "https://github.com/idaholab/moose/discussions/26253#discussioncomment-7760323",
                  "updatedAt": "2023-12-05T08:52:17Z",
                  "publishedAt": "2023-12-05T05:08:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ok so your mesh has issues then.\nI would recommend you lead a full diagnostic of your mesh using this mesh generator:\nhttps://mooseframework.inl.gov/source/meshgenerators/MeshDiagnosticsGenerator.html\nThen go back to your meshing software to fix the problems.\nUnfortunately our in-MOOSE meshing repair is not complete enough (MeshRepairGenerator)",
                          "url": "https://github.com/idaholab/moose/discussions/26253#discussioncomment-7765330",
                          "updatedAt": "2023-12-05T14:30:26Z",
                          "publishedAt": "2023-12-05T14:30:25Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "splitting mesh problems",
          "author": {
            "login": "mcacace"
          },
          "bodyText": "Dear all, I am trying to split a mesh (from gmsh), but despite several efforts (trying it on several machine) it doesn't work, that is, the split-mesh option is not read in and moose starts the input file as in a normal run (even when I have only the mesh block). Not sure what's wrong, since on another mesh it works just fine. Maybe someone can help, thanks.\nI do not upload here the original mesh (since it is pretty heavy), but in case I can share on demand.\nmauro",
          "url": "https://github.com/idaholab/moose/discussions/26258",
          "updatedAt": "2023-12-05T14:28:58Z",
          "publishedAt": "2023-12-05T13:18:42Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "mcacace"
                  },
                  "bodyText": "I think I found the culprit ... Apologies for posting!",
                  "url": "https://github.com/idaholab/moose/discussions/26258#discussioncomment-7764768",
                  "updatedAt": "2023-12-05T13:42:15Z",
                  "publishedAt": "2023-12-05T13:42:14Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no worries. Thanks for letting us know.",
                          "url": "https://github.com/idaholab/moose/discussions/26258#discussioncomment-7765315",
                          "updatedAt": "2023-12-05T14:28:59Z",
                          "publishedAt": "2023-12-05T14:28:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Negative Jocobian while reading mesh files",
          "author": {
            "login": "leoforeal"
          },
          "bodyText": "Hallo,\nI have a general question, what could be the possible defects of a mesh when encountering the error:\nERROR: negative Jacobian -2.0939e+08 at point (x,y,z)=(4.44762e+06, 5.35074e+06, -483.696) in element 0\nwhile reading such mesh files for moose to run?",
          "url": "https://github.com/idaholab/moose/discussions/26136",
          "updatedAt": "2023-12-04T23:14:30Z",
          "publishedAt": "2023-11-23T14:56:41Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this an external mesh?\nNegative Jacobian means the element is distorted in such a way that the Jacobian of the transformation between the real element shape and the reference shape/frame is negative. We error in this case as solutions would be unphysical\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26136#discussioncomment-7653142",
                  "updatedAt": "2023-11-23T15:39:15Z",
                  "publishedAt": "2023-11-23T15:39:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Typical reasons are flipped elements.\nCan you use the MeshDiagnosticsGenerator after loading the mesh and try the various checks?",
                          "url": "https://github.com/idaholab/moose/discussions/26136#discussioncomment-7653154",
                          "updatedAt": "2023-11-23T15:40:06Z",
                          "publishedAt": "2023-11-23T15:40:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "leoforeal"
                          },
                          "bodyText": "yes, thanks for the feedback!\nit's a file mesh, and I multiply one of the coordinate by negative values, hence leading to Negative Jacobian.\nI re-arranged the order element ids and now it works.",
                          "url": "https://github.com/idaholab/moose/discussions/26136#discussioncomment-7758512",
                          "updatedAt": "2023-12-04T23:14:03Z",
                          "publishedAt": "2023-12-04T23:14:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The maximum eigenvalue is negative when solving neutron k-Eigenvalue problems",
          "author": {
            "login": "nuomi68"
          },
          "bodyText": "Hello\uff0cMOOSEer!\nWhen I solve the maximum eigenvalue problem for the two-group neutron diffusion equation, I get a negative eigenvalue.\nThe equation I want to solve is shown here\n\nWhen I set the coeff of the right term of the formula (1) to negative (MatReaction contains negative signs) and add extra_vector_tags = 'eigen', I can find the negative eigenvalue. When I set the coeff of the right term of the formula (1)  a positive number (in order to try to transfer the right term to the left term),  the program will not converge\uff0cI want to know what I did wrong.\nMy code is as follows\n[Mesh]\n    [gen]\n      type = GeneratedMeshGenerator\n      dim = 2\n      nx = 11\n      ny = 11\n      xmin = 0.0\n      xmax = 1.65\n      ymin = 0.0\n      ymax = 1.65\n      elem_type = TRI3\n    []\n    [rename]\n        type = RenameBlockGenerator\n        input = gen\n        old_block = '0'\n        new_block = '5'\n      []\n    [block1]\n      type = SubdomainBoundingBoxGenerator\n      block_id = 1\n      bottom_left = '0 0 0'\n      top_right = '1.05 1.05 0'\n      input = rename\n    []\n    [block21]\n      type = SubdomainBoundingBoxGenerator\n      block_id = 2\n      bottom_left = '0 0 0'\n      top_right = '0.15 0.15 0'\n      input = block1\n    []\n    [block22]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 2\n        bottom_left = '0 0.75 0'\n        top_right = '0.15 1.05 0'\n        input = block21\n    []\n    [block23]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 2\n        bottom_left = '0.75 0.75 0'\n        top_right = '1.05 1.05 0'\n        input = block22\n    []\n    [block24]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 2\n        bottom_left = '0.75 0 0'\n        top_right = ' 1.05 0.15 0'\n        input = block23\n    []\n    [block31]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 3\n        bottom_left = '0 1.05 0'\n        top_right = ' 1.05 1.35 0'\n        input = block24\n    []\n    [block32]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 3\n        bottom_left = ' 1.05 0 0'\n        top_right = ' 1.35 1.05  0'\n        input = block31\n    []\n    [block4]\n        type = SubdomainBoundingBoxGenerator\n        block_id = 4\n        bottom_left = ' 1.05 1.05 0'\n        top_right = ' 1.20 1.20  0'\n        input = block32\n    []\n[]\n  \n[Variables]\n    [phi1]\n    []\n    [phi2g]\n    []\n[]\n\n\n\n\n[BCs]\n    [phi1_drichlet_bc]\n        type = EigenDirichletBC\n        variable = phi1\n        boundary = \"top right\"\n    []\n    [phi1_neumann_bc]\n        type = VacuumBC\n        variable = phi1\n        boundary = \"left bottom\"\n        extra_vector_tags = 'eigen'\n    []\n    [phi1_drichlet_bc1]\n        type = DirichletBC\n        variable = phi1\n        boundary = \"top right\"\n        value = 0\n    []\n    [phi2_drichlet_bc]\n        type = EigenDirichletBC\n        variable = phi2g\n        boundary = \"top right\"\n    []\n    [phi2_neumann_bc]\n        type = VacuumBC\n        variable = phi2g\n        boundary = \"left bottom\"\n        extra_vector_tags = 'eigen'\n    []\n    [phi2_drichlet_bc1]\n        type = DirichletBC\n        variable = phi2g\n        boundary = \"top right\"\n        value = 0\n    []\n[]\n\n\n\n[Kernels]\n    [phi1_diff]\n        type = MatDiffusion\n        variable = phi1\n        diffusivity = D1\n    []\n\n    [phi1_absorption]\n        type = MatReaction\n        variable = phi1\n        mob_name  = sigma_a1\n    []\n\n    [phi1_scattering]\n        type = MatReaction\n        variable = phi1\n        mob_name = sigma_s122\n    []\n\n    [phi1_fission]\n        type = MatReaction\n        variable = phi1\n        mob_name  = vsigma_f1\n        extra_vector_tags = 'eigen'\n    []\n    [phi2_fission]\n        type = MatReaction\n        variable = phi1\n        v=phi2g\n        mob_name  =  vsigma_f2\n        extra_vector_tags = 'eigen'\n    []\n    [phi2_diff]\n        type = MatDiffusion\n        variable = phi2g\n        diffusivity = D2\n    []\n\n    [phi2_absorption]\n        type = MatReaction\n        variable = phi2g\n        mob_name  = sigma_a2\n    []\n\n    [phi2_scattering]\n        type = MatReaction\n        variable = phi2g\n        v=phi1\n        mob_name =sigma_s12\n    []\n\n[]\n\n[Materials]\n    [./g1_b1]\n        type = GenericConstantMaterial\n        prop_names =  'D1 sigma_a1 vsigma_f1 sigma_s12 sigma_s122'\n        prop_values = '1.255 -0.008252 -0.004602 0.02533 -0.02533' \n        block = 1\n    [../]\n    [./g1_b2]\n        type = GenericConstantMaterial\n        prop_names =  'D1 sigma_a1 vsigma_f1 sigma_s12 sigma_s122'\n        prop_values = '1.268 -0.007181 -0.004609 0.02767 -0.02767'\n        block = 2\n    [../]\n    [./g1_b3]\n        type = GenericConstantMaterial\n        prop_names =  'D1 sigma_a1 vsigma_f1 sigma_s12 sigma_s122'\n        prop_values = '1.259 -0.008002 -0.004663 0.02617 -0.02617'\n        block = 3\n    [../]\n    [./g1_b4]\n        type = GenericConstantMaterial\n        prop_names =  'D1 sigma_a1 vsigma_f1 sigma_s12 sigma_s122'\n        prop_values = '1.259 -0.008002 -0.004663 0.02617 -0.02617' \n        block = 4\n    [../]\n    [./g1_b5]\n        type = GenericConstantMaterial\n        prop_names =  'D1 sigma_a1 vsigma_f1 sigma_s12 sigma_s122'\n        prop_values = '1.257 -0.0006034 0.0 0.04754 -0.04754'\n        block = 5\n    [../]\n    [./g2_b1]\n        type = GenericConstantMaterial\n        prop_names =  'D2 sigma_a2 vsigma_f2 '\n        prop_values = '0.211 -0.1003 -0.1091 ' \n        block = 1\n    [../]\n    [./g2_b2]\n        type = GenericConstantMaterial\n        prop_names =  'D2 sigma_a2 vsigma_f2 '\n        prop_values = '0.1902 -0.07047 -0.08675 ' \n        block = 2\n    [../]\n    [./g2_b3]\n        type = GenericConstantMaterial\n        prop_names =  'D2 sigma_a2 vsigma_f2 '\n        prop_values = '0.2091 -0.08344 -0.1021' \n        block = 3\n    [../]\n    [./g2_b4]\n        type = GenericConstantMaterial\n        prop_names =  'D2 sigma_a2 vsigma_f2 '\n        prop_values = '0.2091 -0.073324 -0.1021 ' \n        block = 4\n    [../]\n    [./g2_b5]\n        type = GenericConstantMaterial\n        prop_names =  'D2 sigma_a2 vsigma_f2 '\n        prop_values = '0.1592 -0.01911 0.0' \n        block = 5\n    [../]\n\n[]\n\n\n[Executioner]\n    type = Eigenvalue\n    solve_type = PJFNK\n    free_power_iterations = 0\n    nl_abs_tol = 1e-8\n    l_abs_tol = 1e-8\n    eigen_problem_type = SLEPC_DEFAULT\n    which_eigen_pairs = LARGEST_MAGNITUDE\n[]\n\n[Outputs]\n    exodus = true\n    print_linear_residuals = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/26234",
          "updatedAt": "2023-12-04T22:41:13Z",
          "publishedAt": "2023-12-03T17:21:31Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Can you try more free power iterations? We can tag more people if it doesnt work",
                  "url": "https://github.com/idaholab/moose/discussions/26234#discussioncomment-7744927",
                  "updatedAt": "2023-12-03T17:23:50Z",
                  "publishedAt": "2023-12-03T17:23:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "I tried free power iterations, and I couldn't get the right or positive eigenvalues, but free power iterations does accelerate convergence",
                          "url": "https://github.com/idaholab/moose/discussions/26234#discussioncomment-7744947",
                          "updatedAt": "2023-12-03T17:27:25Z",
                          "publishedAt": "2023-12-03T17:27:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thank you for your concern. I found that I used the wrong units of coefficient, m and cm",
                          "url": "https://github.com/idaholab/moose/discussions/26234#discussioncomment-7745054",
                          "updatedAt": "2023-12-03T17:53:01Z",
                          "publishedAt": "2023-12-03T17:53:00Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "See the related issue #18365",
                          "url": "https://github.com/idaholab/moose/discussions/26234#discussioncomment-7757912",
                          "updatedAt": "2023-12-04T21:33:56Z",
                          "publishedAt": "2023-12-04T21:33:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "nuomi68"
                          },
                          "bodyText": "Thanks! Now I'm going to update my MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/26234#discussioncomment-7758351",
                          "updatedAt": "2023-12-04T22:41:14Z",
                          "publishedAt": "2023-12-04T22:41:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Assertion `neighbor' failed Should be non-null",
          "author": {
            "login": "hityyds"
          },
          "bodyText": "Today, I updated my MOOSE version from 2023.8.24 to 2023.10.29 using conda. After the update, my program started throwing an error:\nAssertion `neighbor' failed\nShould be non-null\n\nHowever, the same input cards worked perfectly fine in the older version of MOOSE (I have saved the old version and tested it again). Based on the debugger information, I identified the corresponding code:\n_face_info = _mesh.faceInfo(_current_elem, _current_side);\nif (!_face_info)\n{\n  const Elem * const neighbor = _current_elem->neighbor_ptr(_current_side);\n  mooseAssert(neighbor, \"Should be non-null\");\n  const auto neighbor_side = neighbor->which_neighbor_am_i(_current_elem);\n  _face_info = _mesh.faceInfo(neighbor, neighbor_side);\n  mooseAssert(_face_info, \"We need to have retrieved something.\");\n}\n\nThis code is part of a new material class derived from the existing PiecewiseConstantByBlockMaterial class in MOOSE. The current function where the code resides is entirely from PiecewiseConstantByBlockMaterial, and I haven't made any modifications. According to the information on the MOOSE website, PiecewiseConstantByBlockMaterial is designed for finite volume methods, but I was able to use it without any issues in my finite element code before. How can I resolve this problem?",
          "url": "https://github.com/idaholab/moose/discussions/26206",
          "updatedAt": "2023-12-04T19:07:36Z",
          "publishedAt": "2023-11-30T15:20:33Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI wonder if the building of the mesh info got skipped? @lindsayad\nOtherwise this situation should never happen:\nelem, side is not the right couple for the mesh-info\nthere is no neighbor so neighbor,other side is not the right couple\nSo essentially you have a face of an element in your mesh that does not have a face info.\nAre you using mesh refinement? Adaptivity?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719594",
                  "updatedAt": "2023-11-30T15:58:23Z",
                  "publishedAt": "2023-11-30T15:58:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "No, this is a very simple one-dimensional test:\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = 1000\n  xmin = 0\n  xmax = 66.0053\n[]\n\nAnd the only modification I made to PiecewiseConstantByBlockMaterial is that I assigned a std::vector<std::vector> to each location, instead of its original Real.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719687",
                          "updatedAt": "2023-11-30T16:05:49Z",
                          "publishedAt": "2023-11-30T16:05:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did you check the original PiecewiseConstantByBlockMaterial now to check for any change WE made in between you modified it and now?",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719707",
                          "updatedAt": "2023-11-30T16:07:08Z",
                          "publishedAt": "2023-11-30T16:07:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "I have checked, and there is no changes.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719760",
                          "updatedAt": "2023-11-30T16:11:33Z",
                          "publishedAt": "2023-11-30T16:11:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "I I just tested a sample card for PiecewiseConstantByBlockMaterial provided on the MOOSE website, and there were no issues. This further confuses me.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719803",
                          "updatedAt": "2023-11-30T16:13:23Z",
                          "publishedAt": "2023-11-30T16:13:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "Is it possible that the issue arises because I am using the finite element method for computations? The description of PiecewiseConstantByBlockMaterial mentions that it is designed for finite volume methods.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719906",
                          "updatedAt": "2023-11-30T16:22:29Z",
                          "publishedAt": "2023-11-30T16:22:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We are expanding support for finite element and functors. We want this object to work regardless.\nCan you share your entire input file or not?\nOn a public git repo is the preferred way. Copy-paste works if need be",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719921",
                          "updatedAt": "2023-11-30T16:23:56Z",
                          "publishedAt": "2023-11-30T16:23:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "Actually, I have some questions about the code of PiecewiseConstantByBlockMaterial as well. It first allocates material information for non-boundary elements and then retrieves information about the neighboring element on the boundary. However, shouldn't elements on the boundary have no neighbors? The more detailed code is as follows:\nif (!_bnd)\n  {\n    mooseAssert(_current_elem,\n                \"We should be on a block which means we should definitely have a current element\");\n    auto it = _sub_id_to_prop.find(_current_elem->subdomain_id());\n    mooseAssert(it != _sub_id_to_prop.end(),\n                \"Block restriction must match the subdomain names passed in the \"\n                \"subdomain_to_prop_value parameter\");\n    _prop[_qp] = it->second;\n\n    return;\n  }\n\n  if (_current_elem)\n  {\n    _face_info = _mesh.faceInfo(_current_elem, _current_side);\n    if (!_face_info)\n    {\n      const Elem * const neighbor = _current_elem->neighbor_ptr(_current_side);\n      mooseAssert(neighbor, \"Should be non-null\");\n      const auto neighbor_side = neighbor->which_neighbor_am_i(_current_elem);\n      _face_info = _mesh.faceInfo(neighbor, neighbor_side);\n      mooseAssert(_face_info, \"We need to have retrieved something.\");\n    }",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7719954",
                          "updatedAt": "2023-11-30T16:26:28Z",
                          "publishedAt": "2023-11-30T16:26:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "My input cards are very simple, consisting of Mesh+Action+Material+Executioner. Due to the custom action we've written, it's challenging to extract useful information directly from the cards. However, I don't have the authority to disclose the specific implementation details of the Action. I am just a student.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7720098",
                          "updatedAt": "2023-11-30T16:40:59Z",
                          "publishedAt": "2023-11-30T16:40:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "Unable to completely provide you with all the information, I feel truly sorry.",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7720253",
                          "updatedAt": "2023-11-30T16:54:24Z",
                          "publishedAt": "2023-11-30T16:54:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hityyds"
                          },
                          "bodyText": "Here is the detailed input card information. I hope it really provides any help:\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = 1000\n  xmin = 0\n  xmax = 66.0053\n[]\n\n[Sphinx]\n  executioner_type = Eigenvalue\n  order = FIRST\n  family = MONOMIAL\n  num_groups = 1\n  quadrature_type = Hexagonal_quadrature\n  Sn_order = 4\n  dim = 1\n  reflective_boundary = 'left 2'\n  vacuum_boundary = 'right'\n[]\n\n\n[Materials]\n  [./sca]\n    type = ScatteringCrossSection\n    prop_name = s\n    num_groups = 1\n    materials = '0'\n    sigma_s = '0.03'\n  [../]\n  [./fis]\n    type = ScatteringCrossSection\n    prop_name = f\n    num_groups = 1\n    materials = '0'\n    sigma_s = '0.0225'\n  [../]\n  [./abs]\n    type = TotalCrossSection\n    prop_name = t\n    num_groups = 1\n    subdomain_names = '0'\n    sigma_t = '0.05'\n  [../]\n[]\n\n\n[Executioner]\n  type = Eigenvalue\n  solve_type = 'PJFNK' \n  free_power_iterations = 3\n  #nl_abs_tol = 1e-4\n  nl_rel_tol = 1e-5\n  l_tol = 0.01\n[]\n\n[Outputs]\n  execute_on = 'timestep_end'\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/26206#discussioncomment-7720427",
                          "updatedAt": "2023-11-30T17:32:06Z",
                          "publishedAt": "2023-11-30T17:09:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FiniteStrainCrystalPlasticity: Constitutive failure",
          "author": {
            "login": "engrmessi"
          },
          "bodyText": "Bug Description\nthe following error occurred in the object \"crysp\", of type \"finitestraincpsliprateres\". finitestrain crystal plasticity: constitutive failure?[39m\nSteps to Reproduce\n\nImpact\nThe solution did not converge. Please i need help to fix this problem. Thanks",
          "url": "https://github.com/idaholab/moose/discussions/26248",
          "updatedAt": "2023-12-04T18:58:47Z",
          "publishedAt": "2023-12-01T20:47:39Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "You need to be more specific on what causes failure.  You need to check if your simulation condition is reasonable.  I suggest you ask your question under Discussion not the Issue here.",
                  "url": "https://github.com/idaholab/moose/discussions/26248#discussioncomment-7756637",
                  "updatedAt": "2023-12-04T18:58:33Z",
                  "publishedAt": "2023-12-01T20:52:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "Migrated",
                          "url": "https://github.com/idaholab/moose/discussions/26248#discussioncomment-7756639",
                          "updatedAt": "2023-12-04T18:58:48Z",
                          "publishedAt": "2023-12-04T18:58:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}