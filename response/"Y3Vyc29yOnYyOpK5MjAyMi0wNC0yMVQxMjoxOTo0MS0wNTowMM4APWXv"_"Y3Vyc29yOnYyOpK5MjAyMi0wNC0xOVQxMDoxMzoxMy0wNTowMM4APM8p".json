{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNC0xOVQxMDoxMzoxMy0wNTowMM4APM8p"
    },
    "edges": [
      {
        "node": {
          "title": "Pop up cascade during compiling of test file",
          "author": {
            "login": "boonebeausoleil"
          },
          "bodyText": "It had been a long while since I ran anything and had to do a complete re-install of Moose, Mamba, etc. I finished the Moose install and went to run the compiling test and at some point started getting a giant cascade of pop ups asking for permission. I would love to tell you what stage in the compiling it occurred but I couldn't get through them to see. I eventually had to do a hard reboot because I couldn't do anything else. Any thoughts?",
          "url": "https://github.com/idaholab/moose/discussions/20837",
          "updatedAt": "2022-04-21T16:39:57Z",
          "publishedAt": "2022-04-21T16:34:26Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "see #16876",
                  "url": "https://github.com/idaholab/moose/discussions/20837#discussioncomment-2610215",
                  "updatedAt": "2022-04-21T16:39:55Z",
                  "publishedAt": "2022-04-21T16:39:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Potential bug with CombinerGenerator handling of boundaries/blocks",
          "author": {
            "login": "Edward-Eth"
          },
          "bodyText": "I've been trying to use combiner generator to combine meshes for two parts I need to 'glue' constraint together later. The two parts have the surfaces/boundaries where they will be glued defined in their own exodus files, but when I load them into the combiner, whichever mesh is given as the second input loses all of its boundaries in the new mesh generated. Basically, only blocks, boundaries and sets defined in the first mesh given as input \"survive\" the combining process. I can't seem to find any parameter that would affect this, so it seems to me like it could be a bug/oversight?",
          "url": "https://github.com/idaholab/moose/discussions/20823",
          "updatedAt": "2022-09-16T18:27:52Z",
          "publishedAt": "2022-04-20T09:25:22Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Edward-Eth"
                  },
                  "bodyText": "This example shows the sort of behaviour I am talking about. GeneratedMeshGenerator for top and bottom block generates side sets around each cube with the prefixes upper and lower respectively. When the combiner is given the input \"inputs = 'Top_Block Bottom_Block' \", the side sets from the top block are still named, but the side sets from the lower block are now just numbered and have no names. If you swap the meshes in the combiner input then the top block side sets are just numbered and not named, and the lower block sets are fine. In the file I'm actually working on, it actually deleted the side sets from the second mesh, not just removed their names, so there's definitely some odd behaviour occuring.\n[Mesh]\n    [Top_Block]\n        type = GeneratedMeshGenerator\n        dim = 3\n        nx = 10\n        ny = 10\n        nz = 10\n        xmax = 2\n        ymax = 2\n        zmax = 2\n        xmin = 0\n        ymin = 0\n        zmin = 1\n        boundary_name_prefix = 'Upper'\n        boundary_id_offset = 10\n    []\n    [Bottom_Block]\n        type = GeneratedMeshGenerator\n        dim = 3\n        nx = 10\n        ny = 10\n        nz = 10\n        xmax = 2\n        ymax = 2\n        zmax = 1\n        boundary_name_prefix = 'Lower'\n    []\n    [Combine]\n        type = CombinerGenerator\n        inputs = 'Top_Block Bottom_Block'\n        positions = '0 0 0 0.12 0.12 0'\n    []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20823#discussioncomment-2601531",
                  "updatedAt": "2022-09-16T18:27:52Z",
                  "publishedAt": "2022-04-20T13:56:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo the IDs get kept in the process, but the names of the sidesets are not transfered. If you can get by with the IDs for now, I ll try to make a patch (when I have time) to make sure the names of the sidesets in the combined mesh (eg the second one in the input here) are also transfered.\nThanks for reporting this\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20823#discussioncomment-2603289",
                  "updatedAt": "2023-03-21T09:21:03Z",
                  "publishedAt": "2022-04-20T17:39:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Edward-Eth"
                  },
                  "bodyText": "Cheers, there was also an issue with boundaries being lost during the combination process, but that was in a more complex file involving file meshes so I'll have a fiddle and see if I can narrow down what the issue there was.",
                  "url": "https://github.com/idaholab/moose/discussions/20823#discussioncomment-2604042",
                  "updatedAt": "2023-03-21T09:21:06Z",
                  "publishedAt": "2022-04-20T19:22:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "did the IDs overlap in each mesh?\nThere is some code in the mesh generator to prevent this being an issue, based on adding an offset, but maybe it s not working for you",
                          "url": "https://github.com/idaholab/moose/discussions/20823#discussioncomment-2604080",
                          "updatedAt": "2023-03-21T09:21:06Z",
                          "publishedAt": "2022-04-20T19:31:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Edward-Eth"
                          },
                          "bodyText": "That's a good question, they might well have done. I'll look into that and get back to you if it seems to be acting strangely.",
                          "url": "https://github.com/idaholab/moose/discussions/20823#discussioncomment-2607508",
                          "updatedAt": "2023-03-21T09:21:06Z",
                          "publishedAt": "2022-04-21T09:19:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "convergence issue of update version of MOOSE",
          "author": {
            "login": "jain651"
          },
          "bodyText": "Hi,\nI am trying to use my previously developed model (coupled diffusion model) on the following\nMOOSE (git commit 34fb8fa on 2020-08-05)\nLibmesh (2644d843eaebfb46b577fee10c77fc237338beb3)\nPETSc (version 3.13.3)\nSLEPc (version 3.13.3)\nand it converges nicely without any problem.\nBut when try to build the same code on the following version of\nMOOSE Version:           git commit ea35b8e804 on 2020-12-22\nLibMesh Version:         b06734bc6434171152f3660d00ed34269367477c\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nit fails to converge in every case.\nWhat could be a reason for this?",
          "url": "https://github.com/idaholab/moose/discussions/16574",
          "updatedAt": "2022-06-02T08:41:19Z",
          "publishedAt": "2020-12-23T02:00:41Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "I imagine something has changed in PETSc, does your simulation provide you a reason for the failed convergence? @fdkong Can you assist.",
                  "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-237657",
                  "updatedAt": "2022-06-02T08:41:48Z",
                  "publishedAt": "2020-12-23T16:10:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "I am getting the following error:\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nMy executioner block is as follows:\n[Executioner]\ntype                      =   Transient\nscheme                    =   'bdf2'\nnl_abs_tol                =   1e-07\nl_tol                     =   1e-05\nl_max_its                 =   100\nnl_max_its                =   20\n#Preconditioned JFNK (default)\nsolve_type                =   'PJFNK'\npetsc_options_iname       =   '-pc_type -pc_hypre_type  -ksp_gmres_restart'\npetsc_options_value       =   'hypre    boomeramg       100'\nline_search               =   none\n[./TimeStepper]\ntype                    =   FunctionDT\ntime_t                  =   '0    25  365 1825  3650  5475'\ntime_dt                 =   '25   25  25  25    25    25 '\n[../]\nnum_steps                 =   220\n[]\nPlease let me know if you need more information.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-237774",
                          "updatedAt": "2022-06-02T08:41:47Z",
                          "publishedAt": "2020-12-23T17:02:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "Could you please paste the entire screen output?",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-237905",
                          "updatedAt": "2022-06-02T08:42:01Z",
                          "publishedAt": "2020-12-23T18:09:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "./coupled_transport_model-opt -i ./test/tests/Input_SA.i\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using time_t and time_dt parameter is deprecated. Switch your input file to using function parameter.\n\nBuild a new function. If interpolate parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\nCopy time_t parameter into your function and rename it to x.\nCopy time_dt parameter into your function and rename it to y.\nUse the function parameter in your time stepper and pass your new function name into it.\n\nStack frames: 13\n0: 0   libmesh_opt.0.dylib                 0x00000001029e0ebb libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits >&) + 1067\n1: 1   libmoose-opt.0.dylib                0x0000000101daf90b void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&&&, char const (&&&) [111], char const (&&&) [131], char const (&&&) [71], char const (&&&) [72], char const (&&&) [97]) + 843\n2: 2   libmoose-opt.0.dylib                0x0000000101dae92d FunctionDT::FunctionDT(InputParameters const&) + 845\n3: 3   libmoose-opt.0.dylib                0x0000000101dae3ce std::__1::shared_ptr moose::internal::buildObj(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x000000010211e884 Factory::create(std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&, std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&, InputParameters&, unsigned int, bool) + 372\n5: 5   libmoose-opt.0.dylib                0x00000001018c1034 std::__1::shared_ptr Factory::create(std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&, std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x0000000101de546c SetupTimeStepperAction::act() + 316\n7: 7   libmoose-opt.0.dylib                0x0000000101db727c ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits, std::__1::allocator > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x0000000101decaf8 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x0000000102184ec0 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x00000001021811f3 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x0000000101594be4 main + 180\n12: 12  libdyld.dylib                       0x00007fff7ec5a3d5 start + 1\nFramework Information:\nMOOSE Version:           git commit 34fb8fa on 2020-08-05\nLibMesh Version:         b06734bc6434171152f3660d00ed34269367477c\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nCurrent Time:            Wed Dec 23 11:29:32 2020\nExecutable Timestamp:    Wed Dec 23 11:19:31 2020\nParallelism:\nNum Processors:          1\nNum Threads:             1\nMesh:\nParallel Type:           replicated\nMesh Dimension:          2\nSpatial Dimension:       2\nNodes:\nTotal:                 102\nLocal:                 102\nElems:\nTotal:                 50\nLocal:                 50\nNum Subdomains:          1\nNum Partitions:          1\nNonlinear System:\nNum DOFs:                306\nNum Local DOFs:          306\nVariables:               { \"C\" \"T\" \"H\" }\nFinite Element Types:    \"LAGRANGE\"\nApproximation Orders:    \"FIRST\"\nAuxiliary System:\nNum DOFs:                800\nNum Local DOFs:          800\nVariables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\"\n\"xi\" }\nFinite Element Types:    \"MONOMIAL\"\nApproximation Orders:    \"CONSTANT\"\nExecution Information:\nExecutioner:             Transient\nTimeStepper:             FunctionDT\nSolver Mode:             Preconditioned JFNK\nPETSc Preconditioner:    hypre boomeramg\nLEGACY MODES ENABLED:\nThis application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\nTime Step 0, time = 0\nTime Step 1, time = 25, dt = 25\n0 Nonlinear |R| = 2.387741e+00\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 12.5, dt = 12.5\n0 Nonlinear |R| = 2.387432e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\n1 Nonlinear |R| = 3.032143e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 1\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 6.25, dt = 6.25\n0 Nonlinear |R| = 2.386566e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\n1 Nonlinear |R| = 2.423693e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 1\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 3.125, dt = 3.125\n0 Nonlinear |R| = 2.384515e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\n1 Nonlinear |R| = 2.384526e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\n2 Nonlinear |R| = 6.363549e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\n3 Nonlinear |R| = 2.801436e+02\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 3\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 1.5625, dt = 1.5625\n0 Nonlinear |R| = 2.380133e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 0.78125, dt = 0.78125\n0 Nonlinear |R| = 2.371177e+00\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 0.390625, dt = 0.390625\n0 Nonlinear |R| = 2.353155e+00\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 0.195312, dt = 0.195312\n0 Nonlinear |R| = 2.317051e+00\nLinear solve converged due to CONVERGED_RTOL iterations 7\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 1, time = 0.0976562, dt = 0.0976562\n0 Nonlinear |R| = 2.244810e+00\nLinear solve converged due to CONVERGED_RTOL iterations 4\n1 Nonlinear |R| = 1.966692e-01\nLinear solve converged due to CONVERGED_RTOL iterations 3\n2 Nonlinear |R| = 9.508983e-05\nLinear solve converged due to CONVERGED_RTOL iterations 6\n3 Nonlinear |R| = 6.017130e-10\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 3\nSolve Converged!\nTime Step 2, time = 25.0977, dt = 25\n0 Nonlinear |R| = 1.089781e+00\nLinear solve converged due to CONVERGED_RTOL iterations 54\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 12.5977, dt = 12.5\n0 Nonlinear |R| = 5.462857e-01\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 6.34766, dt = 6.25\n0 Nonlinear |R| = 5.474337e-01\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 3.22266, dt = 3.125\n0 Nonlinear |R| = 5.491915e-01\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 1.66016, dt = 1.5625\n0 Nonlinear |R| = 5.522514e-01\nLinear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 0.878906, dt = 0.78125\n0 Nonlinear |R| = 5.580639e-01\nLinear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\nSolve Did NOT Converge!\nAborting as solve did not converge\nTime Step 2, time = 0.488281, dt = 0.390625\n0 Nonlinear |R| = 5.695201e-01",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-237936",
                          "updatedAt": "2022-06-02T08:42:18Z",
                          "publishedAt": "2020-12-23T18:30:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "Could you please print out the linear residual as well? I guess you turned this off in your output block.\nRerun the code with extra options \"-snes_error_if_not_converged -ksp_error_if_not_converged\". I need more information to understand the cause of the issue.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-238129",
                          "updatedAt": "2022-07-01T18:18:44Z",
                          "publishedAt": "2020-12-23T19:17:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "When I run with extra options \"-snes_error_if_not_converged -ksp_error_if_not_converged\". I see the following\n(moose) amitjain@fn604209 coupled_transport_model (master) $ ./coupled_transport_model-opt -i ./test/tests/Input_SA.i -snes_error_if_not_converged -ksp_error_if_not_converged\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using `time_t` and `time_dt` parameter is deprecated. Switch your input file to using `function` parameter.\n  1. Build a new function. If `interpolate` parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\n  2. Copy `time_t` parameter into your function and rename it to `x`.\n  3. Copy `time_dt` parameter into your function and rename it to `y`.\n  4. Use the `function` parameter in your time stepper and pass your new function name into it.\n\nStack frames: 14\n0: 0   libmesh_opt.0.dylib                 0x000000010575febb libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1067\n1: 1   libmoose-opt.0.dylib                0x0000000104b2c90b void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&, char const (&&&) [111], char const (&&&) [131], char const (&&&) [71], char const (&&&) [72], char const (&&&) [97]) + 843\n2: 2   libmoose-opt.0.dylib                0x0000000104b2b92d FunctionDT::FunctionDT(InputParameters const&) + 845\n3: 3   libmoose-opt.0.dylib                0x0000000104b2b3ce std::__1::shared_ptr<MooseObject> moose::internal::buildObj<FunctionDT>(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x0000000104e9b884 Factory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int, bool) + 372\n5: 5   libmoose-opt.0.dylib                0x000000010463e034 std::__1::shared_ptr<TimeStepper> Factory::create<TimeStepper>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x0000000104b6246c SetupTimeStepperAction::act() + 316\n7: 7   libmoose-opt.0.dylib                0x0000000104b3427c ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x0000000104b69af8 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x0000000104f01ec0 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x0000000104efe1f3 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x0000000104311be4 main + 180\n12: 12  libdyld.dylib                       0x00007fff7ec5a3d5 start + 1\n13: 13  ???                                 0x0000000000000005 0x0 + 5\n\n\nFramework Information:\nMOOSE Version:           git commit 34fb8fad8f on 2020-08-05\nLibMesh Version:         b06734bc6434171152f3660d00ed34269367477c\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nCurrent Time:            Wed Dec 23 12:30:06 2020\nExecutable Timestamp:    Wed Dec 23 11:19:31 2020\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   \n    Total:                 102\n    Local:                 102\n  Elems:                   \n    Total:                 50\n    Local:                 50\n  Num Subdomains:          1\n  Num Partitions:          1\n\nNonlinear System:\n  Num DOFs:                306\n  Num Local DOFs:          306\n  Variables:               { \"C\" \"T\" \"H\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                800\n  Num Local DOFs:          800\n  Variables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\" \n                             \"xi\" } \n  Finite Element Types:    \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg \n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\n\nTime Step 0, time = 0\n\nTime Step 1, time = 25, dt = 25\n 0 Nonlinear |R| = 2.387741e+00\n      0 Linear |R| = 2.387741e+00\n[0]PETSC ERROR: --------------------- Error Message --------------------------------------------------------------\n[0]PETSC ERROR:   \n[0]PETSC ERROR: KSPSolve has not converged due to Nan or Inf inner product\n[0]PETSC ERROR: See https://www.mcs.anl.gov/petsc/documentation/faq.html for trouble shooting.\n[0]PETSC ERROR: Petsc Release Version 3.14.2, unknown \n[0]PETSC ERROR: ./coupled_transport_model-opt on a  named fn604209 by amitjain Wed Dec 23 12:30:06 2020\n[0]PETSC ERROR: Configure options --COPTFLAGS=-O3 --CXXOPTFLAGS=-O3 --FOPTFLAGS=-O3 --with-x=0 --with-mpi=1 --with-ssl=0 --with-openmp=1 --with-debugging=0 --with-cxx-dialect=C++11 --with-shared-libraries=1 --download-mumps=1 --download-strumpack=1 --download-hypre=1 --download-metis=1 --download-slepc=1 --download-ptscotch=1 --download-parmetis=1 --download-scalapack=1 --download-superlu_dist=1 --with-fortran-bindings=0 --with-sowing=0 EOF --with-blas-lib=libblas.dylib --with-lapack-lib=liblapack.dylib AR=${PREFIX}/bin/x86_64-apple-darwin13.4.0-ar CC=mpicc CXX=mpicxx FC=mpifort FC=mpifort FC=mpifort CFLAGS=\"-march=core2 -mtune=haswell\" CXXFLAGS=\"-march=core2 -mtune=haswell\" LDFLAGS=\" -Wl,-rpath,/Users/amitjain/miniconda3/envs/moose/lib -L/Users/amitjain/miniconda3/envs/moose/lib -Wl,-headerpad_max_install_names\" --prefix=/Users/amitjain/miniconda3/envs/moose\n[0]PETSC ERROR: #1 KSPGMRESClassicalGramSchmidtOrthogonalization() line 69 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/ksp/ksp/impls/gmres/borthog2.c\n[0]PETSC ERROR: #2 KSPGMRESCycle() line 164 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/ksp/ksp/impls/gmres/gmres.c\n[0]PETSC ERROR: #3 KSPSolve_GMRES() line 246 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/ksp/ksp/impls/gmres/gmres.c\n[0]PETSC ERROR: #4 KSPSolve_Private() line 719 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/ksp/ksp/interface/itfunc.c\n[0]PETSC ERROR: #5 KSPSolve() line 889 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/ksp/ksp/interface/itfunc.c\n[0]PETSC ERROR: #6 SNESSolve_NEWTONLS() line 225 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/snes/impls/ls/ls.c\n[0]PETSC ERROR: #7 SNESSolve() line 4569 in /opt/civet/build_0/conda_builds/conda_envs/next-43d08e5b9a/conda-bld/moose-petsc_1608261763825/work/src/snes/interface/snes.c\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n\nWhen I do \"print_linear_residuals    =   false\" in output block I see the following\n(moose) amitjain@fn604209 coupled_transport_model (master) $ ./coupled_transport_model-opt -i ./test/tests/Input_SA.i \n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using `time_t` and `time_dt` parameter is deprecated. Switch your input file to using `function` parameter.\n  1. Build a new function. If `interpolate` parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\n  2. Copy `time_t` parameter into your function and rename it to `x`.\n  3. Copy `time_dt` parameter into your function and rename it to `y`.\n  4. Use the `function` parameter in your time stepper and pass your new function name into it.\n\nStack frames: 13\n0: 0   libmesh_opt.0.dylib                 0x0000000101569ebb libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1067\n1: 1   libmoose-opt.0.dylib                0x000000010093890b void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&, char const (&&&) [111], char const (&&&) [131], char const (&&&) [71], char const (&&&) [72], char const (&&&) [97]) + 843\n2: 2   libmoose-opt.0.dylib                0x000000010093792d FunctionDT::FunctionDT(InputParameters const&) + 845\n3: 3   libmoose-opt.0.dylib                0x00000001009373ce std::__1::shared_ptr<MooseObject> moose::internal::buildObj<FunctionDT>(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x0000000100ca7884 Factory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int, bool) + 372\n5: 5   libmoose-opt.0.dylib                0x000000010044a034 std::__1::shared_ptr<TimeStepper> Factory::create<TimeStepper>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x000000010096e46c SetupTimeStepperAction::act() + 316\n7: 7   libmoose-opt.0.dylib                0x000000010094027c ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x0000000100975af8 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x0000000100d0dec0 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x0000000100d0a1f3 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x000000010011cbe4 main + 180\n12: 12  libdyld.dylib                       0x00007fff7ec5a3d5 start + 1\n\n\nFramework Information:\nMOOSE Version:           git commit 34fb8fad8f on 2020-08-05\nLibMesh Version:         b06734bc6434171152f3660d00ed34269367477c\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nCurrent Time:            Wed Dec 23 12:30:09 2020\nExecutable Timestamp:    Wed Dec 23 11:19:31 2020\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   \n    Total:                 102\n    Local:                 102\n  Elems:                   \n    Total:                 50\n    Local:                 50\n  Num Subdomains:          1\n  Num Partitions:          1\n\nNonlinear System:\n  Num DOFs:                306\n  Num Local DOFs:          306\n  Variables:               { \"C\" \"T\" \"H\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                800\n  Num Local DOFs:          800\n  Variables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\" \n                             \"xi\" } \n  Finite Element Types:    \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg \n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\n\nTime Step 0, time = 0\n\nTime Step 1, time = 25, dt = 25\n 0 Nonlinear |R| = 2.387741e+00\n      0 Linear |R| = 2.387741e+00\n  Linear solve did not converge due to DIVERGED_NANORINF iterations 0\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\n Solve Did NOT Converge!\nAborting as solve did not converge\n\nTime Step 1, time = 12.5, dt = 12.5\n 0 Nonlinear |R| = 2.387432e+00\n      0 Linear |R| = 2.387432e+00\n      1 Linear |R| = 2.387431e+00\n      2 Linear |R| = 2.387431e+00\n      3 Linear |R| = 2.387431e+00\n      4 Linear |R| = 2.387431e+00\n      5 Linear |R| = 2.387431e+00\n      6 Linear |R| = 2.387431e+00\n      7 Linear |R| = 2.387431e+00\n      8 Linear |R| = 2.387430e+00\n      9 Linear |R| = 2.387430e+00\n     10 Linear |R| = 2.387430e+00\n     11 Linear |R| = 2.387430e+00\n     12 Linear |R| = 2.387430e+00\n     13 Linear |R| = 2.387430e+00\n     14 Linear |R| = 2.387430e+00\n     15 Linear |R| = 2.387430e+00\n     16 Linear |R| = 2.387430e+00\n     17 Linear |R| = 2.387430e+00\n     18 Linear |R| = 2.387430e+00\n     19 Linear |R| = 2.387430e+00\n     20 Linear |R| = 2.387430e+00\n     21 Linear |R| = 2.387430e+00\n     22 Linear |R| = 2.387430e+00\n     23 Linear |R| = 2.387430e+00\n     24 Linear |R| = 2.387430e+00\n     25 Linear |R| = 2.387430e+00\n     26 Linear |R| = 2.387429e+00\n     27 Linear |R| = 2.387429e+00\n     28 Linear |R| = 2.387429e+00\n     29 Linear |R| = 2.387429e+00\n     30 Linear |R| = 2.387429e+00\n     31 Linear |R| = 2.387429e+00\n     32 Linear |R| = 2.387429e+00\n     33 Linear |R| = 2.387429e+00\n     34 Linear |R| = 2.387429e+00\n     35 Linear |R| = 2.387429e+00\n     36 Linear |R| = 2.387429e+00\n     37 Linear |R| = 2.387429e+00\n     38 Linear |R| = 2.387429e+00\n     39 Linear |R| = 2.387429e+00\n     40 Linear |R| = 2.387429e+00\n     41 Linear |R| = 2.387429e+00\n     42 Linear |R| = 2.387429e+00\n     43 Linear |R| = 2.387428e+00\n     44 Linear |R| = 2.387428e+00\n     45 Linear |R| = 2.387428e+00\n     46 Linear |R| = 2.387428e+00\n     47 Linear |R| = 2.387428e+00\n     48 Linear |R| = 2.387428e+00\n     49 Linear |R| = 2.387428e+00\n     50 Linear |R| = 2.387428e+00\n     51 Linear |R| = 2.387428e+00\n     52 Linear |R| = 2.387428e+00\n     53 Linear |R| = 2.387428e+00\n     54 Linear |R| = 2.387428e+00\n     55 Linear |R| = 2.387428e+00\n     56 Linear |R| = 2.387428e+00\n     57 Linear |R| = 2.387428e+00\n     58 Linear |R| = 2.387428e+00\n     59 Linear |R| = 2.387428e+00\n     60 Linear |R| = 2.387428e+00\n     61 Linear |R| = 2.387427e+00\n     62 Linear |R| = 2.387427e+00\n     63 Linear |R| = 2.387427e+00\n     64 Linear |R| = 2.387427e+00\n     65 Linear |R| = 2.387427e+00\n     66 Linear |R| = 2.387427e+00\n     67 Linear |R| = 2.387427e+00\n     68 Linear |R| = 2.387427e+00\n     69 Linear |R| = 2.387427e+00\n     70 Linear |R| = 2.387427e+00\n     71 Linear |R| = 2.387427e+00\n     72 Linear |R| = 2.387427e+00\n     73 Linear |R| = 2.387427e+00\n     74 Linear |R| = 2.387427e+00\n     75 Linear |R| = 2.387427e+00\n     76 Linear |R| = 2.387427e+00\n     77 Linear |R| = 2.387427e+00\n     78 Linear |R| = 2.387427e+00\n     79 Linear |R| = 2.387426e+00\n     80 Linear |R| = 2.387426e+00\n     81 Linear |R| = 2.387426e+00\n     82 Linear |R| = 2.387426e+00\n     83 Linear |R| = 2.387426e+00\n     84 Linear |R| = 2.387426e+00\n     85 Linear |R| = 2.387426e+00\n     86 Linear |R| = 2.387426e+00\n     87 Linear |R| = 2.387426e+00\n     88 Linear |R| = 2.387426e+00\n     89 Linear |R| = 2.387426e+00\n     90 Linear |R| = 2.387426e+00\n     91 Linear |R| = 2.387426e+00\n     92 Linear |R| = 2.387426e+00\n     93 Linear |R| = 2.387426e+00\n     94 Linear |R| = 2.387426e+00\n     95 Linear |R| = 2.387426e+00\n     96 Linear |R| = 2.387426e+00\n     97 Linear |R| = 2.387425e+00\n     98 Linear |R| = 2.387425e+00\n     99 Linear |R| = 2.387425e+00\n    100 Linear |R| = 2.387425e+00\n  Linear solve did not converge due to DIVERGED_ITS iterations 100\n 1 Nonlinear |R| = 3.032143e+00\n      0 Linear |R| = 3.032143e+00\n      1 Linear |R| = 2.698733e+00\n      2 Linear |R| = 2.698726e+00\n      3 Linear |R| = 2.698719e+00\n      4 Linear |R| = 2.698711e+00\n      5 Linear |R| = 2.698704e+00\n      6 Linear |R| = 2.698696e+00\n      7 Linear |R| = 2.698689e+00\n      8 Linear |R| = 2.698681e+00\n      9 Linear |R| = 2.698674e+00\n     10 Linear |R| = 2.698666e+00\n     11 Linear |R| = 2.698659e+00\n     12 Linear |R| = 2.698651e+00\n     13 Linear |R| = 2.698644e+00\n     14 Linear |R| = 2.698636e+00\n     15 Linear |R| = 2.698628e+00\n     16 Linear |R| = 2.698621e+00\n     17 Linear |R| = 2.698613e+00\n     18 Linear |R| = 2.698606e+00\n     19 Linear |R| = 2.698598e+00\n     20 Linear |R| = 2.698591e+00\n     21 Linear |R| = 2.698583e+00\n     22 Linear |R| = 2.698576e+00\n     23 Linear |R| = 2.698568e+00\n     24 Linear |R| = 2.698561e+00\n     25 Linear |R| = 2.698553e+00\n     26 Linear |R| = 2.698546e+00\n     27 Linear |R| = 2.698538e+00\n     28 Linear |R| = 2.698531e+00\n     29 Linear |R| = 2.698523e+00\n     30 Linear |R| = 2.698516e+00\n     31 Linear |R| = 2.698508e+00\n     32 Linear |R| = 2.698500e+00\n     33 Linear |R| = 2.698493e+00\n     34 Linear |R| = 2.698485e+00\n     35 Linear |R| = 2.698478e+00\n     36 Linear |R| = 2.698470e+00\n     37 Linear |R| = 2.698463e+00\n     38 Linear |R| = 2.698455e+00\n     39 Linear |R| = 2.698448e+00\n     40 Linear |R| = 2.698440e+00\n     41 Linear |R| = 2.698433e+00\n     42 Linear |R| = 2.698425e+00\n     43 Linear |R| = 2.698418e+00\n     44 Linear |R| = 2.698410e+00\n     45 Linear |R| = 2.698403e+00\n     46 Linear |R| = 2.698395e+00\n     47 Linear |R| = 2.698387e+00\n     48 Linear |R| = 2.698380e+00\n     49 Linear |R| = 2.698372e+00\n     50 Linear |R| = 2.698365e+00\n     51 Linear |R| = 2.698357e+00\n     52 Linear |R| = 2.698350e+00\n     53 Linear |R| = 2.698342e+00\n     54 Linear |R| = 2.698335e+00\n     55 Linear |R| = 2.698327e+00\n     56 Linear |R| = 2.698320e+00\n     57 Linear |R| = 2.698312e+00\n     58 Linear |R| = 2.698305e+00\n     59 Linear |R| = 2.698297e+00\n     60 Linear |R| = 2.698290e+00\n     61 Linear |R| = 2.698282e+00\n     62 Linear |R| = 2.698275e+00\n     63 Linear |R| = 2.698267e+00\n     64 Linear |R| = 2.698259e+00\n     65 Linear |R| = 2.698252e+00\n     66 Linear |R| = 2.698244e+00\n     67 Linear |R| = 2.698237e+00\n     68 Linear |R| = 2.698229e+00\n     69 Linear |R| = 2.698222e+00\n     70 Linear |R| = 2.698214e+00\n     71 Linear |R| = 2.698207e+00\n     72 Linear |R| = 2.698199e+00\n     73 Linear |R| = 2.698192e+00\n     74 Linear |R| = 2.698184e+00\n     75 Linear |R| = 2.698177e+00\n     76 Linear |R| = 2.698169e+00\n     77 Linear |R| = 2.698162e+00\n     78 Linear |R| = 2.698154e+00\n     79 Linear |R| = 2.698147e+00\n     80 Linear |R| = 2.698139e+00\n     81 Linear |R| = 2.698132e+00\n     82 Linear |R| = 2.698124e+00\n     83 Linear |R| = 2.698116e+00\n     84 Linear |R| = 2.698109e+00\n     85 Linear |R| = 2.698101e+00\n     86 Linear |R| = 2.698094e+00\n     87 Linear |R| = 2.698086e+00\n     88 Linear |R| = 2.698079e+00\n     89 Linear |R| = 2.698071e+00\n     90 Linear |R| = 2.698064e+00\n     91 Linear |R| = 2.698056e+00\n     92 Linear |R| = 2.698049e+00\n     93 Linear |R| = 2.698041e+00\n     94 Linear |R| = 2.698034e+00\n     95 Linear |R| = 2.698026e+00\n     96 Linear |R| = 2.698019e+00\n     97 Linear |R| = 2.698011e+00\n     98 Linear |R| = 2.698004e+00\n     99 Linear |R| = 2.697996e+00\n    100 Linear |R| = 2.697988e+00\n  Linear solve did not converge due to DIVERGED_ITS iterations 100\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 1\n Solve Did NOT Converge!\nAborting as solve did not converge",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-238215",
                          "updatedAt": "2022-07-01T18:18:44Z",
                          "publishedAt": "2020-12-23T19:33:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "It seems that the preconditioner generates garbages.  There are two possible reasons:\n\nThe matrix is not right when using new petsc (3.14.2)\n\nor\n\nHypre might change the default setting.\n\nLet us start to debug on the option 1.\nPlease run the code with PETSc 3.13.x and PETSc 3.14.x respectively  using the option \"-ksp_view_pmat\". The purpose is to check if the matrices are the same for both PETSc-3.13 and 3.14.\nWhen we are on this debugging process, please take one time step only, otherwise you will have too much output. That being said, you should change executioner block  to disable adaptive time stepper  and change the number of time steps to 1",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240268",
                          "updatedAt": "2022-07-01T18:19:53Z",
                          "publishedAt": "2020-12-24T16:17:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "I am posting output from old and new PETSc as follows:\nThis is the output on PETSc 3.14.2\ncoupled_transport_model (master) $ ./coupled_transport_model-opt -i ./test/tests/Input_SA.i -ksp_view_pmat\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using `time_t` and `time_dt` parameter is deprecated. Switch your input file to using `function` parameter.\n  1. Build a new function. If `interpolate` parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\n  2. Copy `time_t` parameter into your function and rename it to `x`.\n  3. Copy `time_dt` parameter into your function and rename it to `y`.\n  4. Use the `function` parameter in your time stepper and pass your new function name into it.\n\nStack frames: 14\n0: 0   libmesh_opt.0.dylib                 0x000000010c86febb libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1067\n1: 1   libmoose-opt.0.dylib                0x000000010bc4490b void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&, char const (&&&) [111], char const (&&&) [131], char const (&&&) [71], char const (&&&) [72], char const (&&&) [97]) + 843\n2: 2   libmoose-opt.0.dylib                0x000000010bc4392d FunctionDT::FunctionDT(InputParameters const&) + 845\n3: 3   libmoose-opt.0.dylib                0x000000010bc433ce std::__1::shared_ptr<MooseObject> moose::internal::buildObj<FunctionDT>(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x000000010bfb3884 Factory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int, bool) + 372\n5: 5   libmoose-opt.0.dylib                0x000000010b756034 std::__1::shared_ptr<TimeStepper> Factory::create<TimeStepper>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x000000010bc7a46c SetupTimeStepperAction::act() + 316\n7: 7   libmoose-opt.0.dylib                0x000000010bc4c27c ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x000000010bc81af8 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x000000010c019ec0 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x000000010c0161f3 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x000000010b422be4 main + 180\n12: 12  libdyld.dylib                       0x00007fff7ec5a3d5 start + 1\n13: 13  ???                                 0x0000000000000004 0x0 + 4\n\n\nFramework Information:\nMOOSE Version:           git commit 34fb8fad8f on 2020-08-05\nLibMesh Version:         b06734bc6434171152f3660d00ed34269367477c\nPETSc Version:           3.14.2\nSLEPc Version:           3.14.0\nCurrent Time:            Thu Dec 24 09:38:05 2020\nExecutable Timestamp:    Wed Dec 23 11:19:31 2020\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:\n    Total:                 102\n    Local:                 102\n  Elems:\n    Total:                 50\n    Local:                 50\n  Num Subdomains:          1\n  Num Partitions:          1\n\nNonlinear System:\n  Num DOFs:                306\n  Num Local DOFs:          306\n  Variables:               { \"C\" \"T\" \"H\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                800\n  Num Local DOFs:          800\n  Variables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\"\n                             \"xi\" }\n  Finite Element Types:    \"MONOMIAL\"\n  Approximation Orders:    \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg\n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\n\nTime Step 0, time = 0\n\nTime Step 1, time = 25, dt = 25\n 0 Nonlinear |R| = 2.387741e+00\n      0 Linear |R| = 2.387741e+00\n  Linear solve did not converge due to DIVERGED_NANORINF iterations 0\nMat Object: () 1 MPI processes\n  type: seqaij\nrow 0: (0, 1.)  (3, 0.)  (6, 0.)  (9, 0.)\nrow 1: (1, 1.)  (4, 0.)  (7, 0.)  (10, 0.)\nrow 2: (2, 1.)  (5, 0.)  (8, 0.)  (11, 0.)\nrow 3: (0, -0.0277903)  (3, -0.0978066)  (6, 0.0574629)  (9, 0.0728095)  (12, -0.00132762)  (15, 0.00665239)\nrow 4: (1, -3.72333e-06)  (4, -4.18092e-05)  (7, 2.9773e-05)  (10, 9.30832e-06)  (13, -4.30078e-06)  (16, 1.0752e-05)\nrow 5: (2, 4.50394)  (5, 48.2003)  (8, -34.0161)  (11, -11.2565)  (14, 4.94993)  (17, -12.3715)\nrow 6: (0, 0.0728095)  (3, 0.0574629)  (6, -0.0978066)  (9, -0.0277903)  (12, 0.00665239)  (15, -0.00132762)\nrow 7: (1, 9.30832e-06)  (4, 2.9773e-05)  (7, -4.18092e-05)  (10, -3.72333e-06)  (13, 1.0752e-05)  (16, -4.30078e-06)\nrow 8: (2, -11.2565)  (5, -34.0161)  (8, 48.2003)  (11, 4.50394)  (14, -12.3715)  (17, 4.94993)\nrow 9: (0, 0.)  (3, 0.)  (6, 0.)  (9, 1.)\nrow 10: (1, 0.)  (4, 0.)  (7, 0.)  (10, 1.)\nrow 11: (2, 0.)  (5, 0.)  (8, 0.)  (11, 1.)\nrow 12: (3, -0.00132762)  (6, 0.00665239)  (12, -0.0199429)  (15, 0.0192933)  (18, -0.00132762)  (21, 0.00665239)\nrow 13: (4, -4.30078e-06)  (7, 1.0752e-05)  (13, -4.30078e-05)  (16, 3.01055e-05)  (19, -4.30078e-06)  (22, 1.0752e-05)\nrow 14: (5, 4.94993)  (8, -12.3715)  (14, 49.4926)  (17, -34.6395)  (20, 4.94993)  (23, -12.3715)\nrow 15: (3, 0.00665239)  (6, -0.00132762)  (12, 0.0192933)  (15, -0.0199429)  (18, 0.00665239)  (21, -0.00132762)\nrow 16: (4, 1.0752e-05)  (7, -4.30078e-06)  (13, 3.01055e-05)  (16, -4.30078e-05)  (19, 1.0752e-05)  (22, -4.30078e-06)\nrow 17: (5, -12.3715)  (8, 4.94993)  (14, -34.6395)  (17, 49.4926)  (20, -12.3715)  (23, 4.94993)\nrow 18: (12, -0.00132762)  (15, 0.00665239)  (18, -0.0199429)  (21, 0.0192933)  (24, -0.00132762)  (27, 0.00665239)\nrow 19: (13, -4.30078e-06)  (16, 1.0752e-05)  (19, -4.30078e-05)  (22, 3.01055e-05)  (25, -4.30078e-06)  (28, 1.0752e-05)\nrow 20: (14, 4.94993)  (17, -12.3715)  (20, 49.4926)  (23, -34.6395)  (26, 4.94993)  (29, -12.3715)\nrow 21: (12, 0.00665239)  (15, -0.00132762)  (18, 0.0192933)  (21, -0.0199429)  (24, 0.00665239)  (27, -0.00132762)\nrow 22: (13, 1.0752e-05)  (16, -4.30078e-06)  (19, 3.01055e-05)  (22, -4.30078e-05)  (25, 1.0752e-05)  (28, -4.30078e-06)\nrow 23: (14, -12.3715)  (17, 4.94993)  (20, -34.6395)  (23, 49.4926)  (26, -12.3715)  (29, 4.94993)\nrow 24: (18, -0.00132762)  (21, 0.00665239)  (24, -0.0199429)  (27, 0.0192933)  (30, -0.00132762)  (33, 0.00665239)\nrow 25: (19, -4.30078e-06)  (22, 1.0752e-05)  (25, -4.30078e-05)  (28, 3.01055e-05)  (31, -4.30078e-06)  (34, 1.0752e-05)\nrow 26: (20, 4.94993)  (23, -12.3715)  (26, 49.4926)  (29, -34.6395)  (32, 4.94993)  (35, -12.3715)\nrow 27: (18, 0.00665239)  (21, -0.00132762)  (24, 0.0192933)  (27, -0.0199429)  (30, 0.00665239)  (33, -0.00132762)\nrow 28: (19, 1.0752e-05)  (22, -4.30078e-06)  (25, 3.01055e-05)  (28, -4.30078e-05)  (31, 1.0752e-05)  (34, -4.30078e-06)\nrow 29: (20, -12.3715)  (23, 4.94993)  (26, -34.6395)  (29, 49.4926)  (32, -12.3715)  (35, 4.94993)\nrow 30: (24, -0.00132762)  (27, 0.00665239)  (30, -0.0199429)  (33, 0.0192933)  (36, -0.00132762)  (39, 0.00665239)\nrow 31: (25, -4.30078e-06)  (28, 1.0752e-05)  (31, -4.30078e-05)  (34, 3.01055e-05)  (37, -4.30078e-06)  (40, 1.0752e-05)\nrow 32: (26, 4.94993)  (29, -12.3715)  (32, 49.4926)  (35, -34.6395)  (38, 4.94993)  (41, -12.3715)\nrow 33: (24, 0.00665239)  (27, -0.00132762)  (30, 0.0192933)  (33, -0.0199429)  (36, 0.00665239)  (39, -0.00132762)\nrow 34: (25, 1.0752e-05)  (28, -4.30078e-06)  (31, 3.01055e-05)  (34, -4.30078e-05)  (37, 1.0752e-05)  (40, -4.30078e-06)\nrow 35: (26, -12.3715)  (29, 4.94993)  (32, -34.6395)  (35, 49.4926)  (38, -12.3715)  (41, 4.94993)\nrow 36: (30, -0.00132762)  (33, 0.00665239)  (36, -0.0199429)  (39, 0.0192933)  (42, -0.00132762)  (45, 0.00665239)\nrow 37: (31, -4.30078e-06)  (34, 1.0752e-05)  (37, -4.30078e-05)  (40, 3.01055e-05)  (43, -4.30078e-06)  (46, 1.0752e-05)\nrow 38: (32, 4.94993)  (35, -12.3715)  (38, 49.4926)  (41, -34.6395)  (44, 4.94993)  (47, -12.3715)\nrow 39: (30, 0.00665239)  (33, -0.00132762)  (36, 0.0192933)  (39, -0.0199429)  (42, 0.00665239)  (45, -0.00132762)\nrow 40: (31, 1.0752e-05)  (34, -4.30078e-06)  (37, 3.01055e-05)  (40, -4.30078e-05)  (43, 1.0752e-05)  (46, -4.30078e-06)\nrow 41: (32, -12.3715)  (35, 4.94993)  (38, -34.6395)  (41, 49.4926)  (44, -12.3715)  (47, 4.94993)\nrow 42: (36, -0.00132762)  (39, 0.00665239)  (42, -0.0199429)  (45, 0.0192933)  (48, -0.00132762)  (51, 0.00665239)\nrow 43: (37, -4.30078e-06)  (40, 1.0752e-05)  (43, -4.30078e-05)  (46, 3.01055e-05)  (49, -4.30078e-06)  (52, 1.0752e-05)\nrow 44: (38, 4.94993)  (41, -12.3715)  (44, 49.4926)  (47, -34.6395)  (50, 4.94993)  (53, -12.3715)\nrow 45: (36, 0.00665239)  (39, -0.00132762)  (42, 0.0192933)  (45, -0.0199429)  (48, 0.00665239)  (51, -0.00132762)\nrow 46: (37, 1.0752e-05)  (40, -4.30078e-06)  (43, 3.01055e-05)  (46, -4.30078e-05)  (49, 1.0752e-05)  (52, -4.30078e-06)\nrow 47: (38, -12.3715)  (41, 4.94993)  (44, -34.6395)  (47, 49.4926)  (50, -12.3715)  (53, 4.94993)\nrow 48: (42, -0.00132762)  (45, 0.00665239)  (48, -0.0199429)  (51, 0.0192933)  (54, -0.00132762)  (57, 0.00665239)\nrow 49: (43, -4.30078e-06)  (46, 1.0752e-05)  (49, -4.30078e-05)  (52, 3.01055e-05)  (55, -4.30078e-06)  (58, 1.0752e-05)\nrow 50: (44, 4.94993)  (47, -12.3715)  (50, 49.4926)  (53, -34.6395)  (56, 4.94993)  (59, -12.3715)\nrow 51: (42, 0.00665239)  (45, -0.00132762)  (48, 0.0192933)  (51, -0.0199429)  (54, 0.00665239)  (57, -0.00132762)\nrow 52: (43, 1.0752e-05)  (46, -4.30078e-06)  (49, 3.01055e-05)  (52, -4.30078e-05)  (55, 1.0752e-05)  (58, -4.30078e-06)\nrow 53: (44, -12.3715)  (47, 4.94993)  (50, -34.6395)  (53, 49.4926)  (56, -12.3715)  (59, 4.94993)\nrow 54: (48, -0.00132762)  (51, 0.00665239)  (54, -0.0199429)  (57, 0.0192933)  (60, -0.00132762)  (63, 0.00665239)\nrow 55: (49, -4.30078e-06)  (52, 1.0752e-05)  (55, -4.30078e-05)  (58, 3.01055e-05)  (61, -4.30078e-06)  (64, 1.0752e-05)\nrow 56: (50, 4.94993)  (53, -12.3715)  (56, 49.4926)  (59, -34.6395)  (62, 4.94993)  (65, -12.3715)\nrow 57: (48, 0.00665239)  (51, -0.00132762)  (54, 0.0192933)  (57, -0.0199429)  (60, 0.00665239)  (63, -0.00132762)\nrow 58: (49, 1.0752e-05)  (52, -4.30078e-06)  (55, 3.01055e-05)  (58, -4.30078e-05)  (61, 1.0752e-05)  (64, -4.30078e-06)\nrow 59: (50, -12.3715)  (53, 4.94993)  (56, -34.6395)  (59, 49.4926)  (62, -12.3715)  (65, 4.94993)\nrow 60: (54, -0.00132762)  (57, 0.00665239)  (60, -0.0199429)  (63, 0.0192933)  (66, -0.00132762)  (69, 0.00665239)\nrow 61: (55, -4.30078e-06)  (58, 1.0752e-05)  (61, -4.30078e-05)  (64, 3.01055e-05)  (67, -4.30078e-06)  (70, 1.0752e-05)\nrow 62: (56, 4.94993)  (59, -12.3715)  (62, 49.4926)  (65, -34.6395)  (68, 4.94993)  (71, -12.3715)\nrow 63: (54, 0.00665239)  (57, -0.00132762)  (60, 0.0192933)  (63, -0.0199429)  (66, 0.00665239)  (69, -0.00132762)\nrow 64: (55, 1.0752e-05)  (58, -4.30078e-06)  (61, 3.01055e-05)  (64, -4.30078e-05)  (67, 1.0752e-05)  (70, -4.30078e-06)\nrow 65: (56, -12.3715)  (59, 4.94993)  (62, -34.6395)  (65, 49.4926)  (68, -12.3715)  (71, 4.94993)\nrow 66: (60, -0.00132762)  (63, 0.00665239)  (66, -0.0199429)  (69, 0.0192933)  (72, -0.00132762)  (75, 0.00665239)\nrow 67: (61, -4.30078e-06)  (64, 1.0752e-05)  (67, -4.30078e-05)  (70, 3.01055e-05)  (73, -4.30078e-06)  (76, 1.0752e-05)\nrow 68: (62, 4.94993)  (65, -12.3715)  (68, 49.4926)  (71, -34.6395)  (74, 4.94993)  (77, -12.3715)\nrow 69: (60, 0.00665239)  (63, -0.00132762)  (66, 0.0192933)  (69, -0.0199429)  (72, 0.00665239)  (75, -0.00132762)\nrow 70: (61, 1.0752e-05)  (64, -4.30078e-06)  (67, 3.01055e-05)  (70, -4.30078e-05)  (73, 1.0752e-05)  (76, -4.30078e-06)\nrow 71: (62, -12.3715)  (65, 4.94993)  (68, -34.6395)  (71, 49.4926)  (74, -12.3715)  (77, 4.94993)\nrow 72: (66, -0.00132762)  (69, 0.00665239)  (72, -0.0199429)  (75, 0.0192933)  (78, -0.00132762)  (81, 0.00665239)\nrow 73: (67, -4.30078e-06)  (70, 1.0752e-05)  (73, -4.30078e-05)  (76, 3.01055e-05)  (79, -4.30078e-06)  (82, 1.0752e-05)\nrow 74: (68, 4.94993)  (71, -12.3715)  (74, 49.4926)  (77, -34.6395)  (80, 4.94993)  (83, -12.3715)\nrow 75: (66, 0.00665239)  (69, -0.00132762)  (72, 0.0192933)  (75, -0.0199429)  (78, 0.00665239)  (81, -0.00132762)\nrow 76: (67, 1.0752e-05)  (70, -4.30078e-06)  (73, 3.01055e-05)  (76, -4.30078e-05)  (79, 1.0752e-05)  (82, -4.30078e-06)\nrow 77: (68, -12.3715)  (71, 4.94993)  (74, -34.6395)  (77, 49.4926)  (80, -12.3715)  (83, 4.94993)\nrow 78: (72, -0.00132762)  (75, 0.00665239)  (78, -0.0199429)  (81, 0.0192933)  (84, -0.00132762)  (87, 0.00665239)\nrow 79: (73, -4.30078e-06)  (76, 1.0752e-05)  (79, -4.30078e-05)  (82, 3.01055e-05)  (85, -4.30078e-06)  (88, 1.0752e-05)\nrow 80: (74, 4.94993)  (77, -12.3715)  (80, 49.4926)  (83, -34.6395)  (86, 4.94993)  (89, -12.3715)\nrow 81: (72, 0.00665239)  (75, -0.00132762)  (78, 0.0192933)  (81, -0.0199429)  (84, 0.00665239)  (87, -0.00132762)\nrow 82: (73, 1.0752e-05)  (76, -4.30078e-06)  (79, 3.01055e-05)  (82, -4.30078e-05)  (85, 1.0752e-05)  (88, -4.30078e-06)\nrow 83: (74, -12.3715)  (77, 4.94993)  (80, -34.6395)  (83, 49.4926)  (86, -12.3715)  (89, 4.94993)\nrow 84: (78, -0.00132762)  (81, 0.00665239)  (84, -0.0199429)  (87, 0.0192933)  (90, -0.00132762)  (93, 0.00665239)\nrow 85: (79, -4.30078e-06)  (82, 1.0752e-05)  (85, -4.30078e-05)  (88, 3.01055e-05)  (91, -4.30078e-06)  (94, 1.0752e-05)\nrow 86: (80, 4.94993)  (83, -12.3715)  (86, 49.4926)  (89, -34.6395)  (92, 4.94993)  (95, -12.3715)\nrow 87: (78, 0.00665239)  (81, -0.00132762)  (84, 0.0192933)  (87, -0.0199429)  (90, 0.00665239)  (93, -0.00132762)\nrow 88: (79, 1.0752e-05)  (82, -4.30078e-06)  (85, 3.01055e-05)  (88, -4.30078e-05)  (91, 1.0752e-05)  (94, -4.30078e-06)\nrow 89: (80, -12.3715)  (83, 4.94993)  (86, -34.6395)  (89, 49.4926)  (92, -12.3715)  (95, 4.94993)\nrow 90: (84, -0.00132762)  (87, 0.00665239)  (90, -0.0199429)  (93, 0.0192933)  (96, -0.00132762)  (99, 0.00665239)\nrow 91: (85, -4.30078e-06)  (88, 1.0752e-05)  (91, -4.30078e-05)  (94, 3.01055e-05)  (97, -4.30078e-06)  (100, 1.0752e-05)\nrow 92: (86, 4.94993)  (89, -12.3715)  (92, 49.4926)  (95, -34.6395)  (98, 4.94993)  (101, -12.3715)\nrow 93: (84, 0.00665239)  (87, -0.00132762)  (90, 0.0192933)  (93, -0.0199429)  (96, 0.00665239)  (99, -0.00132762)\nrow 94: (85, 1.0752e-05)  (88, -4.30078e-06)  (91, 3.01055e-05)  (94, -4.30078e-05)  (97, 1.0752e-05)  (100, -4.30078e-06)\nrow 95: (86, -12.3715)  (89, 4.94993)  (92, -34.6395)  (95, 49.4926)  (98, -12.3715)  (101, 4.94993)\nrow 96: (90, -0.00132762)  (93, 0.00665239)  (96, -0.0199429)  (99, 0.0192933)  (102, -0.00132762)  (105, 0.00665239)\nrow 97: (91, -4.30078e-06)  (94, 1.0752e-05)  (97, -4.30078e-05)  (100, 3.01055e-05)  (103, -4.30078e-06)  (106, 1.0752e-05)\nrow 98: (92, 4.94993)  (95, -12.3715)  (98, 49.4926)  (101, -34.6395)  (104, 4.94993)  (107, -12.3715)\nrow 99: (90, 0.00665239)  (93, -0.00132762)  (96, 0.0192933)  (99, -0.0199429)  (102, 0.00665239)  (105, -0.00132762)\nrow 100: (91, 1.0752e-05)  (94, -4.30078e-06)  (97, 3.01055e-05)  (100, -4.30078e-05)  (103, 1.0752e-05)  (106, -4.30078e-06)\nrow 101: (92, -12.3715)  (95, 4.94993)  (98, -34.6395)  (101, 49.4926)  (104, -12.3715)  (107, 4.94993)\nrow 102: (96, -0.00132762)  (99, 0.00665239)  (102, -0.0199429)  (105, 0.0192933)  (108, -0.00132762)  (111, 0.00665239)\nrow 103: (97, -4.30078e-06)  (100, 1.0752e-05)  (103, -4.30078e-05)  (106, 3.01055e-05)  (109, -4.30078e-06)  (112, 1.0752e-05)\nrow 104: (98, 4.94993)  (101, -12.3715)  (104, 49.4926)  (107, -34.6395)  (110, 4.94993)  (113, -12.3715)\nrow 105: (96, 0.00665239)  (99, -0.00132762)  (102, 0.0192933)  (105, -0.0199429)  (108, 0.00665239)  (111, -0.00132762)\nrow 106: (97, 1.0752e-05)  (100, -4.30078e-06)  (103, 3.01055e-05)  (106, -4.30078e-05)  (109, 1.0752e-05)  (112, -4.30078e-06)\nrow 107: (98, -12.3715)  (101, 4.94993)  (104, -34.6395)  (107, 49.4926)  (110, -12.3715)  (113, 4.94993)\nrow 108: (102, -0.00132762)  (105, 0.00665239)  (108, -0.0199429)  (111, 0.0192933)  (114, -0.00132762)  (117, 0.00665239)\nrow 109: (103, -4.30078e-06)  (106, 1.0752e-05)  (109, -4.30078e-05)  (112, 3.01055e-05)  (115, -4.30078e-06)  (118, 1.0752e-05)\nrow 110: (104, 4.94993)  (107, -12.3715)  (110, 49.4926)  (113, -34.6395)  (116, 4.94993)  (119, -12.3715)\nrow 111: (102, 0.00665239)  (105, -0.00132762)  (108, 0.0192933)  (111, -0.0199429)  (114, 0.00665239)  (117, -0.00132762)\nrow 112: (103, 1.0752e-05)  (106, -4.30078e-06)  (109, 3.01055e-05)  (112, -4.30078e-05)  (115, 1.0752e-05)  (118, -4.30078e-06)\nrow 113: (104, -12.3715)  (107, 4.94993)  (110, -34.6395)  (113, 49.4926)  (116, -12.3715)  (119, 4.94993)\nrow 114: (108, -0.00132762)  (111, 0.00665239)  (114, -0.0199429)  (117, 0.0192933)  (120, -0.00132762)  (123, 0.00665239)\nrow 115: (109, -4.30078e-06)  (112, 1.0752e-05)  (115, -4.30078e-05)  (118, 3.01055e-05)  (121, -4.30078e-06)  (124, 1.0752e-05)\nrow 116: (110, 4.94993)  (113, -12.3715)  (116, 49.4926)  (119, -34.6395)  (122, 4.94993)  (125, -12.3715)\nrow 117: (108, 0.00665239)  (111, -0.00132762)  (114, 0.0192933)  (117, -0.0199429)  (120, 0.00665239)  (123, -0.00132762)\nrow 118: (109, 1.0752e-05)  (112, -4.30078e-06)  (115, 3.01055e-05)  (118, -4.30078e-05)  (121, 1.0752e-05)  (124, -4.30078e-06)\nrow 119: (110, -12.3715)  (113, 4.94993)  (116, -34.6395)  (119, 49.4926)  (122, -12.3715)  (125, 4.94993)\nrow 120: (114, -0.00132762)  (117, 0.00665239)  (120, -0.0199429)  (123, 0.0192933)  (126, -0.00132762)  (129, 0.00665239)\nrow 121: (115, -4.30078e-06)  (118, 1.0752e-05)  (121, -4.30078e-05)  (124, 3.01055e-05)  (127, -4.30078e-06)  (130, 1.0752e-05)\nrow 122: (116, 4.94993)  (119, -12.3715)  (122, 49.4926)  (125, -34.6395)  (128, 4.94993)  (131, -12.3715)\nrow 123: (114, 0.00665239)  (117, -0.00132762)  (120, 0.0192933)  (123, -0.0199429)  (126, 0.00665239)  (129, -0.00132762)\nrow 124: (115, 1.0752e-05)  (118, -4.30078e-06)  (121, 3.01055e-05)  (124, -4.30078e-05)  (127, 1.0752e-05)  (130, -4.30078e-06)\nrow 125: (116, -12.3715)  (119, 4.94993)  (122, -34.6395)  (125, 49.4926)  (128, -12.3715)  (131, 4.94993)\nrow 126: (120, -0.00132762)  (123, 0.00665239)  (126, -0.0199429)  (129, 0.0192933)  (132, -0.00132762)  (135, 0.00665239)\nrow 127: (121, -4.30078e-06)  (124, 1.0752e-05)  (127, -4.30078e-05)  (130, 3.01055e-05)  (133, -4.30078e-06)  (136, 1.0752e-05)\nrow 128: (122, 4.94993)  (125, -12.3715)  (128, 49.4926)  (131, -34.6395)  (134, 4.94993)  (137, -12.3715)\nrow 129: (120, 0.00665239)  (123, -0.00132762)  (126, 0.0192933)  (129, -0.0199429)  (132, 0.00665239)  (135, -0.00132762)\nrow 130: (121, 1.0752e-05)  (124, -4.30078e-06)  (127, 3.01055e-05)  (130, -4.30078e-05)  (133, 1.0752e-05)  (136, -4.30078e-06)\nrow 131: (122, -12.3715)  (125, 4.94993)  (128, -34.6395)  (131, 49.4926)  (134, -12.3715)  (137, 4.94993)\nrow 132: (126, -0.00132762)  (129, 0.00665239)  (132, -0.0199429)  (135, 0.0192933)  (138, -0.00132762)  (141, 0.00665239)\nrow 133: (127, -4.30078e-06)  (130, 1.0752e-05)  (133, -4.30078e-05)  (136, 3.01055e-05)  (139, -4.30078e-06)  (142, 1.0752e-05)\nrow 134: (128, 4.94993)  (131, -12.3715)  (134, 49.4926)  (137, -34.6395)  (140, 4.94993)  (143, -12.3715)\nrow 135: (126, 0.00665239)  (129, -0.00132762)  (132, 0.0192933)  (135, -0.0199429)  (138, 0.00665239)  (141, -0.00132762)\nrow 136: (127, 1.0752e-05)  (130, -4.30078e-06)  (133, 3.01055e-05)  (136, -4.30078e-05)  (139, 1.0752e-05)  (142, -4.30078e-06)\nrow 137: (128, -12.3715)  (131, 4.94993)  (134, -34.6395)  (137, 49.4926)  (140, -12.3715)  (143, 4.94993)\nrow 138: (132, -0.00132762)  (135, 0.00665239)  (138, -0.0199429)  (141, 0.0192933)  (144, -0.00132762)  (147, 0.00665239)\nrow 139: (133, -4.30078e-06)  (136, 1.0752e-05)  (139, -4.30078e-05)  (142, 3.01055e-05)  (145, -4.30078e-06)  (148, 1.0752e-05)\nrow 140: (134, 4.94993)  (137, -12.3715)  (140, 49.4926)  (143, -34.6395)  (146, 4.94993)  (149, -12.3715)\nrow 141: (132, 0.00665239)  (135, -0.00132762)  (138, 0.0192933)  (141, -0.0199429)  (144, 0.00665239)  (147, -0.00132762)\nrow 142: (133, 1.0752e-05)  (136, -4.30078e-06)  (139, 3.01055e-05)  (142, -4.30078e-05)  (145, 1.0752e-05)  (148, -4.30078e-06)\nrow 143: (134, -12.3715)  (137, 4.94993)  (140, -34.6395)  (143, 49.4926)  (146, -12.3715)  (149, 4.94993)\nrow 144: (138, -0.00132762)  (141, 0.00665239)  (144, -0.0199429)  (147, 0.0192933)  (150, -0.00132762)  (153, 0.00665239)\nrow 145: (139, -4.30078e-06)  (142, 1.0752e-05)  (145, -4.30078e-05)  (148, 3.01055e-05)  (151, -4.30078e-06)  (154, 1.0752e-05)\nrow 146: (140, 4.94993)  (143, -12.3715)  (146, 49.4926)  (149, -34.6395)  (152, 4.94993)  (155, -12.3715)\nrow 147: (138, 0.00665239)  (141, -0.00132762)  (144, 0.0192933)  (147, -0.0199429)  (150, 0.00665239)  (153, -0.00132762)\nrow 148: (139, 1.0752e-05)  (142, -4.30078e-06)  (145, 3.01055e-05)  (148, -4.30078e-05)  (151, 1.0752e-05)  (154, -4.30078e-06)\nrow 149: (140, -12.3715)  (143, 4.94993)  (146, -34.6395)  (149, 49.4926)  (152, -12.3715)  (155, 4.94993)\nrow 150: (144, -0.00132762)  (147, 0.00665239)  (150, -0.0199429)  (153, 0.0192933)  (156, -0.00132762)  (159, 0.00665239)\nrow 151: (145, -4.30078e-06)  (148, 1.0752e-05)  (151, -4.30078e-05)  (154, 3.01055e-05)  (157, -4.30078e-06)  (160, 1.0752e-05)\nrow 152: (146, 4.94993)  (149, -12.3715)  (152, 49.4926)  (155, -34.6395)  (158, 4.94993)  (161, -12.3715)\nrow 153: (144, 0.00665239)  (147, -0.00132762)  (150, 0.0192933)  (153, -0.0199429)  (156, 0.00665239)  (159, -0.00132762)\nrow 154: (145, 1.0752e-05)  (148, -4.30078e-06)  (151, 3.01055e-05)  (154, -4.30078e-05)  (157, 1.0752e-05)  (160, -4.30078e-06)\nrow 155: (146, -12.3715)  (149, 4.94993)  (152, -34.6395)  (155, 49.4926)  (158, -12.3715)  (161, 4.94993)\nrow 156: (150, -0.00132762)  (153, 0.00665239)  (156, -0.0199429)  (159, 0.0192933)  (162, -0.00132762)  (165, 0.00665239)\nrow 157: (151, -4.30078e-06)  (154, 1.0752e-05)  (157, -4.30078e-05)  (160, 3.01055e-05)  (163, -4.30078e-06)  (166, 1.0752e-05)\nrow 158: (152, 4.94993)  (155, -12.3715)  (158, 49.4926)  (161, -34.6395)  (164, 4.94993)  (167, -12.3715)\nrow 159: (150, 0.00665239)  (153, -0.00132762)  (156, 0.0192933)  (159, -0.0199429)  (162, 0.00665239)  (165, -0.00132762)\nrow 160: (151, 1.0752e-05)  (154, -4.30078e-06)  (157, 3.01055e-05)  (160, -4.30078e-05)  (163, 1.0752e-05)  (166, -4.30078e-06)\nrow 161: (152, -12.3715)  (155, 4.94993)  (158, -34.6395)  (161, 49.4926)  (164, -12.3715)  (167, 4.94993)\nrow 162: (156, -0.00132762)  (159, 0.00665239)  (162, -0.0199429)  (165, 0.0192933)  (168, -0.00132762)  (171, 0.00665239)\nrow 163: (157, -4.30078e-06)  (160, 1.0752e-05)  (163, -4.30078e-05)  (166, 3.01055e-05)  (169, -4.30078e-06)  (172, 1.0752e-05)\nrow 164: (158, 4.94993)  (161, -12.3715)  (164, 49.4926)  (167, -34.6395)  (170, 4.94993)  (173, -12.3715)\nrow 165: (156, 0.00665239)  (159, -0.00132762)  (162, 0.0192933)  (165, -0.0199429)  (168, 0.00665239)  (171, -0.00132762)\nrow 166: (157, 1.0752e-05)  (160, -4.30078e-06)  (163, 3.01055e-05)  (166, -4.30078e-05)  (169, 1.0752e-05)  (172, -4.30078e-06)\nrow 167: (158, -12.3715)  (161, 4.94993)  (164, -34.6395)  (167, 49.4926)  (170, -12.3715)  (173, 4.94993)\nrow 168: (162, -0.00132762)  (165, 0.00665239)  (168, -0.0199429)  (171, 0.0192933)  (174, -0.00132762)  (177, 0.00665239)\nrow 169: (163, -4.30078e-06)  (166, 1.0752e-05)  (169, -4.30078e-05)  (172, 3.01055e-05)  (175, -4.30078e-06)  (178, 1.0752e-05)\nrow 170: (164, 4.94993)  (167, -12.3715)  (170, 49.4926)  (173, -34.6395)  (176, 4.94993)  (179, -12.3715)\nrow 171: (162, 0.00665239)  (165, -0.00132762)  (168, 0.0192933)  (171, -0.0199429)  (174, 0.00665239)  (177, -0.00132762)\nrow 172: (163, 1.0752e-05)  (166, -4.30078e-06)  (169, 3.01055e-05)  (172, -4.30078e-05)  (175, 1.0752e-05)  (178, -4.30078e-06)\nrow 173: (164, -12.3715)  (167, 4.94993)  (170, -34.6395)  (173, 49.4926)  (176, -12.3715)  (179, 4.94993)\nrow 174: (168, -0.00132762)  (171, 0.00665239)  (174, -0.0199429)  (177, 0.0192933)  (180, -0.00132762)  (183, 0.00665239)\nrow 175: (169, -4.30078e-06)  (172, 1.0752e-05)  (175, -4.30078e-05)  (178, 3.01055e-05)  (181, -4.30078e-06)  (184, 1.0752e-05)\nrow 176: (170, 4.94993)  (173, -12.3715)  (176, 49.4926)  (179, -34.6395)  (182, 4.94993)  (185, -12.3715)\nrow 177: (168, 0.00665239)  (171, -0.00132762)  (174, 0.0192933)  (177, -0.0199429)  (180, 0.00665239)  (183, -0.00132762)\nrow 178: (169, 1.0752e-05)  (172, -4.30078e-06)  (175, 3.01055e-05)  (178, -4.30078e-05)  (181, 1.0752e-05)  (184, -4.30078e-06)\nrow 179: (170, -12.3715)  (173, 4.94993)  (176, -34.6395)  (179, 49.4926)  (182, -12.3715)  (185, 4.94993)\nrow 180: (174, -0.00132762)  (177, 0.00665239)  (180, -0.0199429)  (183, 0.0192933)  (186, -0.00132762)  (189, 0.00665239)\nrow 181: (175, -4.30078e-06)  (178, 1.0752e-05)  (181, -4.30078e-05)  (184, 3.01055e-05)  (187, -4.30078e-06)  (190, 1.0752e-05)\nrow 182: (176, 4.94993)  (179, -12.3715)  (182, 49.4926)  (185, -34.6395)  (188, 4.94993)  (191, -12.3715)\nrow 183: (174, 0.00665239)  (177, -0.00132762)  (180, 0.0192933)  (183, -0.0199429)  (186, 0.00665239)  (189, -0.00132762)\nrow 184: (175, 1.0752e-05)  (178, -4.30078e-06)  (181, 3.01055e-05)  (184, -4.30078e-05)  (187, 1.0752e-05)  (190, -4.30078e-06)\nrow 185: (176, -12.3715)  (179, 4.94993)  (182, -34.6395)  (185, 49.4926)  (188, -12.3715)  (191, 4.94993)\nrow 186: (180, -0.00132762)  (183, 0.00665239)  (186, -0.0199429)  (189, 0.0192933)  (192, -0.00132762)  (195, 0.00665239)\nrow 187: (181, -4.30078e-06)  (184, 1.0752e-05)  (187, -4.30078e-05)  (190, 3.01055e-05)  (193, -4.30078e-06)  (196, 1.0752e-05)\nrow 188: (182, 4.94993)  (185, -12.3715)  (188, 49.4926)  (191, -34.6395)  (194, 4.94993)  (197, -12.3715)\nrow 189: (180, 0.00665239)  (183, -0.00132762)  (186, 0.0192933)  (189, -0.0199429)  (192, 0.00665239)  (195, -0.00132762)\nrow 190: (181, 1.0752e-05)  (184, -4.30078e-06)  (187, 3.01055e-05)  (190, -4.30078e-05)  (193, 1.0752e-05)  (196, -4.30078e-06)\nrow 191: (182, -12.3715)  (185, 4.94993)  (188, -34.6395)  (191, 49.4926)  (194, -12.3715)  (197, 4.94993)\nrow 192: (186, -0.00132762)  (189, 0.00665239)  (192, -0.0199429)  (195, 0.0192933)  (198, -0.00132762)  (201, 0.00665239)\nrow 193: (187, -4.30078e-06)  (190, 1.0752e-05)  (193, -4.30078e-05)  (196, 3.01055e-05)  (199, -4.30078e-06)  (202, 1.0752e-05)\nrow 194: (188, 4.94993)  (191, -12.3715)  (194, 49.4926)  (197, -34.6395)  (200, 4.94993)  (203, -12.3715)\nrow 195: (186, 0.00665239)  (189, -0.00132762)  (192, 0.0192933)  (195, -0.0199429)  (198, 0.00665239)  (201, -0.00132762)\nrow 196: (187, 1.0752e-05)  (190, -4.30078e-06)  (193, 3.01055e-05)  (196, -4.30078e-05)  (199, 1.0752e-05)  (202, -4.30078e-06)\nrow 197: (188, -12.3715)  (191, 4.94993)  (194, -34.6395)  (197, 49.4926)  (200, -12.3715)  (203, 4.94993)\nrow 198: (192, -0.00132762)  (195, 0.00665239)  (198, -0.0199429)  (201, 0.0192933)  (204, -0.00132762)  (207, 0.00665239)\nrow 199: (193, -4.30078e-06)  (196, 1.0752e-05)  (199, -4.30078e-05)  (202, 3.01055e-05)  (205, -4.30078e-06)  (208, 1.0752e-05)\nrow 200: (194, 4.94993)  (197, -12.3715)  (200, 49.4926)  (203, -34.6395)  (206, 4.94993)  (209, -12.3715)\nrow 201: (192, 0.00665239)  (195, -0.00132762)  (198, 0.0192933)  (201, -0.0199429)  (204, 0.00665239)  (207, -0.00132762)\nrow 202: (193, 1.0752e-05)  (196, -4.30078e-06)  (199, 3.01055e-05)  (202, -4.30078e-05)  (205, 1.0752e-05)  (208, -4.30078e-06)\nrow 203: (194, -12.3715)  (197, 4.94993)  (200, -34.6395)  (203, 49.4926)  (206, -12.3715)  (209, 4.94993)\nrow 204: (198, -0.00132762)  (201, 0.00665239)  (204, -0.0199429)  (207, 0.0192933)  (210, -0.00132762)  (213, 0.00665239)\nrow 205: (199, -4.30078e-06)  (202, 1.0752e-05)  (205, -4.30078e-05)  (208, 3.01055e-05)  (211, -4.30078e-06)  (214, 1.0752e-05)\nrow 206: (200, 4.94993)  (203, -12.3715)  (206, 49.4926)  (209, -34.6395)  (212, 4.94993)  (215, -12.3715)\nrow 207: (198, 0.00665239)  (201, -0.00132762)  (204, 0.0192933)  (207, -0.0199429)  (210, 0.00665239)  (213, -0.00132762)\nrow 208: (199, 1.0752e-05)  (202, -4.30078e-06)  (205, 3.01055e-05)  (208, -4.30078e-05)  (211, 1.0752e-05)  (214, -4.30078e-06)\nrow 209: (200, -12.3715)  (203, 4.94993)  (206, -34.6395)  (209, 49.4926)  (212, -12.3715)  (215, 4.94993)\nrow 210: (204, -0.00132762)  (207, 0.00665239)  (210, -0.0199429)  (213, 0.0192933)  (216, -0.00132762)  (219, 0.00665239)\nrow 211: (205, -4.30078e-06)  (208, 1.0752e-05)  (211, -4.30078e-05)  (214, 3.01055e-05)  (217, -4.30078e-06)  (220, 1.0752e-05)\nrow 212: (206, 4.94993)  (209, -12.3715)  (212, 49.4926)  (215, -34.6395)  (218, 4.94993)  (221, -12.3715)\nrow 213: (204, 0.00665239)  (207, -0.00132762)  (210, 0.0192933)  (213, -0.0199429)  (216, 0.00665239)  (219, -0.00132762)\nrow 214: (205, 1.0752e-05)  (208, -4.30078e-06)  (211, 3.01055e-05)  (214, -4.30078e-05)  (217, 1.0752e-05)  (220, -4.30078e-06)\nrow 215: (206, -12.3715)  (209, 4.94993)  (212, -34.6395)  (215, 49.4926)  (218, -12.3715)  (221, 4.94993)\nrow 216: (210, -0.00132762)  (213, 0.00665239)  (216, -0.0199429)  (219, 0.0192933)  (222, -0.00132762)  (225, 0.00665239)\nrow 217: (211, -4.30078e-06)  (214, 1.0752e-05)  (217, -4.30078e-05)  (220, 3.01055e-05)  (223, -4.30078e-06)  (226, 1.0752e-05)\nrow 218: (212, 4.94993)  (215, -12.3715)  (218, 49.4926)  (221, -34.6395)  (224, 4.94993)  (227, -12.3715)\nrow 219: (210, 0.00665239)  (213, -0.00132762)  (216, 0.0192933)  (219, -0.0199429)  (222, 0.00665239)  (225, -0.00132762)\nrow 220: (211, 1.0752e-05)  (214, -4.30078e-06)  (217, 3.01055e-05)  (220, -4.30078e-05)  (223, 1.0752e-05)  (226, -4.30078e-06)\nrow 221: (212, -12.3715)  (215, 4.94993)  (218, -34.6395)  (221, 49.4926)  (224, -12.3715)  (227, 4.94993)\nrow 222: (216, -0.00132762)  (219, 0.00665239)  (222, -0.0199429)  (225, 0.0192933)  (228, -0.00132762)  (231, 0.00665239)\nrow 223: (217, -4.30078e-06)  (220, 1.0752e-05)  (223, -4.30078e-05)  (226, 3.01055e-05)  (229, -4.30078e-06)  (232, 1.0752e-05)\nrow 224: (218, 4.94993)  (221, -12.3715)  (224, 49.4926)  (227, -34.6395)  (230, 4.94993)  (233, -12.3715)\nrow 225: (216, 0.00665239)  (219, -0.00132762)  (222, 0.0192933)  (225, -0.0199429)  (228, 0.00665239)  (231, -0.00132762)\nrow 226: (217, 1.0752e-05)  (220, -4.30078e-06)  (223, 3.01055e-05)  (226, -4.30078e-05)  (229, 1.0752e-05)  (232, -4.30078e-06)\nrow 227: (218, -12.3715)  (221, 4.94993)  (224, -34.6395)  (227, 49.4926)  (230, -12.3715)  (233, 4.94993)\nrow 228: (222, -0.00132762)  (225, 0.00665239)  (228, -0.0199429)  (231, 0.0192933)  (234, -0.00132762)  (237, 0.00665239)\nrow 229: (223, -4.30078e-06)  (226, 1.0752e-05)  (229, -4.30078e-05)  (232, 3.01055e-05)  (235, -4.30078e-06)  (238, 1.0752e-05)\nrow 230: (224, 4.94993)  (227, -12.3715)  (230, 49.4926)  (233, -34.6395)  (236, 4.94993)  (239, -12.3715)\nrow 231: (222, 0.00665239)  (225, -0.00132762)  (228, 0.0192933)  (231, -0.0199429)  (234, 0.00665239)  (237, -0.00132762)\nrow 232: (223, 1.0752e-05)  (226, -4.30078e-06)  (229, 3.01055e-05)  (232, -4.30078e-05)  (235, 1.0752e-05)  (238, -4.30078e-06)\nrow 233: (224, -12.3715)  (227, 4.94993)  (230, -34.6395)  (233, 49.4926)  (236, -12.3715)  (239, 4.94993)\nrow 234: (228, -0.00132762)  (231, 0.00665239)  (234, -0.0199429)  (237, 0.0192933)  (240, -0.00132762)  (243, 0.00665239)\nrow 235: (229, -4.30078e-06)  (232, 1.0752e-05)  (235, -4.30078e-05)  (238, 3.01055e-05)  (241, -4.30078e-06)  (244, 1.0752e-05)\nrow 236: (230, 4.94993)  (233, -12.3715)  (236, 49.4926)  (239, -34.6395)  (242, 4.94993)  (245, -12.3715)\nrow 237: (228, 0.00665239)  (231, -0.00132762)  (234, 0.0192933)  (237, -0.0199429)  (240, 0.00665239)  (243, -0.00132762)\nrow 238: (229, 1.0752e-05)  (232, -4.30078e-06)  (235, 3.01055e-05)  (238, -4.30078e-05)  (241, 1.0752e-05)  (244, -4.30078e-06)\nrow 239: (230, -12.3715)  (233, 4.94993)  (236, -34.6395)  (239, 49.4926)  (242, -12.3715)  (245, 4.94993)\nrow 240: (234, -0.00132762)  (237, 0.00665239)  (240, -0.0199429)  (243, 0.0192933)  (246, -0.00132762)  (249, 0.00665239)\nrow 241: (235, -4.30078e-06)  (238, 1.0752e-05)  (241, -4.30078e-05)  (244, 3.01055e-05)  (247, -4.30078e-06)  (250, 1.0752e-05)\nrow 242: (236, 4.94993)  (239, -12.3715)  (242, 49.4926)  (245, -34.6395)  (248, 4.94993)  (251, -12.3715)\nrow 243: (234, 0.00665239)  (237, -0.00132762)  (240, 0.0192933)  (243, -0.0199429)  (246, 0.00665239)  (249, -0.00132762)\nrow 244: (235, 1.0752e-05)  (238, -4.30078e-06)  (241, 3.01055e-05)  (244, -4.30078e-05)  (247, 1.0752e-05)  (250, -4.30078e-06)\nrow 245: (236, -12.3715)  (239, 4.94993)  (242, -34.6395)  (245, 49.4926)  (248, -12.3715)  (251, 4.94993)\nrow 246: (240, -0.00132762)  (243, 0.00665239)  (246, -0.0199429)  (249, 0.0192933)  (252, -0.00132762)  (255, 0.00665239)\nrow 247: (241, -4.30078e-06)  (244, 1.0752e-05)  (247, -4.30078e-05)  (250, 3.01055e-05)  (253, -4.30078e-06)  (256, 1.0752e-05)\nrow 248: (242, 4.94993)  (245, -12.3715)  (248, 49.4926)  (251, -34.6395)  (254, 4.94993)  (257, -12.3715)\nrow 249: (240, 0.00665239)  (243, -0.00132762)  (246, 0.0192933)  (249, -0.0199429)  (252, 0.00665239)  (255, -0.00132762)\nrow 250: (241, 1.0752e-05)  (244, -4.30078e-06)  (247, 3.01055e-05)  (250, -4.30078e-05)  (253, 1.0752e-05)  (256, -4.30078e-06)\nrow 251: (242, -12.3715)  (245, 4.94993)  (248, -34.6395)  (251, 49.4926)  (254, -12.3715)  (257, 4.94993)\nrow 252: (246, -0.00132762)  (249, 0.00665239)  (252, -0.0199429)  (255, 0.0192933)  (258, -0.00132762)  (261, 0.00665239)\nrow 253: (247, -4.30078e-06)  (250, 1.0752e-05)  (253, -4.30078e-05)  (256, 3.01055e-05)  (259, -4.30078e-06)  (262, 1.0752e-05)\nrow 254: (248, 4.94993)  (251, -12.3715)  (254, 49.4926)  (257, -34.6395)  (260, 4.94993)  (263, -12.3715)\nrow 255: (246, 0.00665239)  (249, -0.00132762)  (252, 0.0192933)  (255, -0.0199429)  (258, 0.00665239)  (261, -0.00132762)\nrow 256: (247, 1.0752e-05)  (250, -4.30078e-06)  (253, 3.01055e-05)  (256, -4.30078e-05)  (259, 1.0752e-05)  (262, -4.30078e-06)\nrow 257: (248, -12.3715)  (251, 4.94993)  (254, -34.6395)  (257, 49.4926)  (260, -12.3715)  (263, 4.94993)\nrow 258: (252, -0.00132762)  (255, 0.00665239)  (258, -0.0199429)  (261, 0.0192933)  (264, -0.00132762)  (267, 0.00665239)\nrow 259: (253, -4.30078e-06)  (256, 1.0752e-05)  (259, -4.30078e-05)  (262, 3.01055e-05)  (265, -4.30078e-06)  (268, 1.0752e-05)\nrow 260: (254, 4.94993)  (257, -12.3715)  (260, 49.4926)  (263, -34.6395)  (266, 4.94993)  (269, -12.3715)\nrow 261: (252, 0.00665239)  (255, -0.00132762)  (258, 0.0192933)  (261, -0.0199429)  (264, 0.00665239)  (267, -0.00132762)\nrow 262: (253, 1.0752e-05)  (256, -4.30078e-06)  (259, 3.01055e-05)  (262, -4.30078e-05)  (265, 1.0752e-05)  (268, -4.30078e-06)\nrow 263: (254, -12.3715)  (257, 4.94993)  (260, -34.6395)  (263, 49.4926)  (266, -12.3715)  (269, 4.94993)\nrow 264: (258, -0.00132762)  (261, 0.00665239)  (264, -0.0199429)  (267, 0.0192933)  (270, -0.00132762)  (273, 0.00665239)\nrow 265: (259, -4.30078e-06)  (262, 1.0752e-05)  (265, -4.30078e-05)  (268, 3.01055e-05)  (271, -4.30078e-06)  (274, 1.0752e-05)\nrow 266: (260, 4.94993)  (263, -12.3715)  (266, 49.4926)  (269, -34.6395)  (272, 4.94993)  (275, -12.3715)\nrow 267: (258, 0.00665239)  (261, -0.00132762)  (264, 0.0192933)  (267, -0.0199429)  (270, 0.00665239)  (273, -0.00132762)\nrow 268: (259, 1.0752e-05)  (262, -4.30078e-06)  (265, 3.01055e-05)  (268, -4.30078e-05)  (271, 1.0752e-05)  (274, -4.30078e-06)\nrow 269: (260, -12.3715)  (263, 4.94993)  (266, -34.6395)  (269, 49.4926)  (272, -12.3715)  (275, 4.94993)\nrow 270: (264, -0.00132762)  (267, 0.00665239)  (270, -0.0199429)  (273, 0.0192933)  (276, -0.00132762)  (279, 0.00665239)\nrow 271: (265, -4.30078e-06)  (268, 1.0752e-05)  (271, -4.30078e-05)  (274, 3.01055e-05)  (277, -4.30078e-06)  (280, 1.0752e-05)\nrow 272: (266, 4.94993)  (269, -12.3715)  (272, 49.4926)  (275, -34.6395)  (278, 4.94993)  (281, -12.3715)\nrow 273: (264, 0.00665239)  (267, -0.00132762)  (270, 0.0192933)  (273, -0.0199429)  (276, 0.00665239)  (279, -0.00132762)\nrow 274: (265, 1.0752e-05)  (268, -4.30078e-06)  (271, 3.01055e-05)  (274, -4.30078e-05)  (277, 1.0752e-05)  (280, -4.30078e-06)\nrow 275: (266, -12.3715)  (269, 4.94993)  (272, -34.6395)  (275, 49.4926)  (278, -12.3715)  (281, 4.94993)\nrow 276: (270, -0.00132762)  (273, 0.00665239)  (276, -0.0199429)  (279, 0.0192933)  (282, -0.00132762)  (285, 0.00665239)\nrow 277: (271, -4.30078e-06)  (274, 1.0752e-05)  (277, -4.30078e-05)  (280, 3.01055e-05)  (283, -4.30078e-06)  (286, 1.0752e-05)\nrow 278: (272, 4.94993)  (275, -12.3715)  (278, 49.4926)  (281, -34.6395)  (284, 4.94993)  (287, -12.3715)\nrow 279: (270, 0.00665239)  (273, -0.00132762)  (276, 0.0192933)  (279, -0.0199429)  (282, 0.00665239)  (285, -0.00132762)\nrow 280: (271, 1.0752e-05)  (274, -4.30078e-06)  (277, 3.01055e-05)  (280, -4.30078e-05)  (283, 1.0752e-05)  (286, -4.30078e-06)\nrow 281: (272, -12.3715)  (275, 4.94993)  (278, -34.6395)  (281, 49.4926)  (284, -12.3715)  (287, 4.94993)\nrow 282: (276, -0.00132762)  (279, 0.00665239)  (282, -0.0199429)  (285, 0.0192933)  (288, -0.00132762)  (291, 0.00665239)\nrow 283: (277, -4.30078e-06)  (280, 1.0752e-05)  (283, -4.30078e-05)  (286, 3.01055e-05)  (289, -4.30078e-06)  (292, 1.0752e-05)\nrow 284: (278, 4.94993)  (281, -12.3715)  (284, 49.4926)  (287, -34.6395)  (290, 4.94993)  (293, -12.3715)\nrow 285: (276, 0.00665239)  (279, -0.00132762)  (282, 0.0192933)  (285, -0.0199429)  (288, 0.00665239)  (291, -0.00132762)\nrow 286: (277, 1.0752e-05)  (280, -4.30078e-06)  (283, 3.01055e-05)  (286, -4.30078e-05)  (289, 1.0752e-05)  (292, -4.30078e-06)\nrow 287: (278, -12.3715)  (281, 4.94993)  (284, -34.6395)  (287, 49.4926)  (290, -12.3715)  (293, 4.94993) \nrow 288: (282, -0.00132762)  (285, 0.00665239)  (288, -0.0199429)  (291, 0.0192933)  (294, -0.00132762)  (297, 0.00665239)\nrow 289: (283, -4.30078e-06)  (286, 1.0752e-05)  (289, -4.30078e-05)  (292, 3.01055e-05)  (295, -4.30078e-06)  (298, 1.0752e-05)\nrow 290: (284, 4.94993)  (287, -12.3715)  (290, 49.4926)  (293, -34.6395)  (296, 4.94993)  (299, -12.3715)\nrow 291: (282, 0.00665239)  (285, -0.00132762)  (288, 0.0192933)  (291, -0.0199429)  (294, 0.00665239)  (297, -0.00132762)\nrow 292: (283, 1.0752e-05)  (286, -4.30078e-06)  (289, 3.01055e-05)  (292, -4.30078e-05)  (295, 1.0752e-05)  (298, -4.30078e-06)\nrow 293: (284, -12.3715)  (287, 4.94993)  (290, -34.6395)  (293, 49.4926)  (296, -12.3715)  (299, 4.94993)\nrow 294: (288, -0.00132762)  (291, 0.00665239)  (294, -0.0199429)  (297, 0.0192933)  (300, -0.00132762)  (303, 0.00665239)\nrow 295: (289, -4.30078e-06)  (292, 1.0752e-05)  (295, -4.30078e-05)  (298, 3.01055e-05)  (301, -4.30078e-06)  (304, 1.0752e-05)\nrow 296: (290, 4.94993)  (293, -12.3715)  (296, 49.4926)  (299, -34.6395)  (302, 4.94993)  (305, -12.3715)\nrow 297: (288, 0.00665239)  (291, -0.00132762)  (294, 0.0192933)  (297, -0.0199429)  (300, 0.00665239)  (303, -0.00132762)\nrow 298: (289, 1.0752e-05)  (292, -4.30078e-06)  (295, 3.01055e-05)  (298, -4.30078e-05)  (301, 1.0752e-05)  (304, -4.30078e-06)\nrow 299: (290, -12.3715)  (293, 4.94993)  (296, -34.6395)  (299, 49.4926)  (302, -12.3715)  (305, 4.94993)\nrow 300: (294, -0.00132762)  (297, 0.00665239)  (300, -0.00997144)  (303, 0.00964667)\nrow 301: (295, -4.30078e-06)  (298, 1.0752e-05)  (301, -2.15039e-05)  (304, 1.50527e-05)\nrow 302: (296, 4.94993)  (299, -12.3715)  (302, 24.7463)  (305, -17.3198)\nrow 303: (294, 0.00665239)  (297, -0.00132762)  (300, 0.00964667)  (303, -0.00997144)\nrow 304: (295, 1.0752e-05)  (298, -4.30078e-06)  (301, 1.50527e-05)  (304, -2.15039e-05)\nrow 305: (296, -12.3715)  (299, 4.94993)  (302, -17.3198)  (305, 24.7463)\nNonlinear solve did not converge due to DIVERGED_LINEAR_SOLVE iterations 0\n\nThis is the output on PETSc 3.13.3\namitjain@Amits-MacBook-Pro coupled_transport_model % ./coupled_transport_model-opt -i ./test/tests/Input_SA.i -ksp_view_pmat\n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using `time_t` and `time_dt` parameter is deprecated. Switch your input file to using `function` parameter.\n  1. Build a new function. If `interpolate` parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\n  2. Copy `time_t` parameter into your function and rename it to `x`.\n  3. Copy `time_dt` parameter into your function and rename it to `y`.\n  4. Use the `function` parameter in your time stepper and pass your new function name into it.\n\nStack frames: 13\n0: 0   libmesh_opt.0.dylib                 0x000000010db5b575 libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1157\n1: 1   libmoose-opt.0.dylib                0x000000010cefda71 void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]) + 897\n2: 2   libmoose-opt.0.dylib                0x000000010cef2c4f FunctionDT::FunctionDT(InputParameters const&) + 1407\n3: 3   libmoose-opt.0.dylib                0x000000010cefccfe std::__1::shared_ptr<MooseObject> moose::internal::buildObj<FunctionDT>(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x000000010d2918db Factory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int, bool) + 395\n5: 5   libmoose-opt.0.dylib                0x000000010c9e7cf4 std::__1::shared_ptr<TimeStepper> Factory::create<TimeStepper>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x000000010cf44579 SetupTimeStepperAction::act() + 361\n7: 7   libmoose-opt.0.dylib                0x000000010cf08dbc ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x000000010cf08898 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x000000010d2f9c50 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x000000010d2faa03 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x000000010c69fb13 main + 195\n12: 12  libdyld.dylib                       0x00007fff655467fd start + 1\n\n\nFramework Information:\nMOOSE Version:           git commit 34fb8fad8f on 2020-08-05\nLibMesh Version:         2644d843eaebfb46b577fee10c77fc237338beb3\nPETSc Version:           3.13.3\nSLEPc Version:           3.13.3\nCurrent Time:            Thu Dec 24 09:56:14 2020\nExecutable Timestamp:    Tue Dec 22 20:20:42 2020\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh:\n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:\n    Total:                 102\n    Local:                 102\n  Elems:\n    Total:                 50\n    Local:                 50\n  Num Subdomains:          1\n  Num Partitions:          1\n\nNonlinear System:\n  Num DOFs:                306\n  Num Local DOFs:          306\n  Variables:               { \"C\" \"T\" \"H\" }\n  Finite Element Types:    \"LAGRANGE\"\n  Approximation Orders:    \"FIRST\"\n\nAuxiliary System:\n  Num DOFs:                800\n  Num Local DOFs:          800\n  Variables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\"\n                             \"xi\" }\n  Finite Element Types:    \"MONOMIAL\"\n  Approximation Orders:    \"CONSTANT\"\n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg\n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\n\nTime Step 0, time = 0\n\nTime Step 1, time = 25, dt = 25\n 0 Nonlinear |R| = 2.387834e+00\n      0 Linear |R| = 2.387834e+00\n      1 Linear |R| = 1.772132e-02\n      2 Linear |R| = 1.787977e-04\n      3 Linear |R| = 1.475613e-05\n  Linear solve converged due to CONVERGED_RTOL iterations 3\nMat Object: () 1 MPI processes\n  type: seqaij\nrow 0: (0, 1.)  (3, 0.)  (6, 0.)  (9, 0.)\nrow 1: (1, 1.)  (4, 0.)  (7, 0.)  (10, 0.)\nrow 2: (2, 1.)  (5, 0.)  (8, 0.)  (11, 0.)\nrow 3: (0, 0.153672)  (3, 1.61339)  (6, -1.15202)  (9, -0.380516)  (12, 0.151643)  (15, -0.375775)\nrow 4: (1, 1.75499e-06)  (4, 1.75499e-05)  (7, -1.22849e-05)  (10, -4.38748e-06)  (13, 1.75499e-06)  (16, -4.38748e-06)\nrow 5: (2, 4.50394)  (5, 48.2003)  (8, -34.0161)  (11, -11.2565)  (14, 4.94993)  (17, -12.3715)\nrow 6: (0, -0.380516)  (3, -1.15202)  (6, 1.61339)  (9, 0.153672)  (12, -0.375775)  (15, 0.151643)\nrow 7: (1, -4.38748e-06)  (4, -1.22849e-05)  (7, 1.75499e-05)  (10, 1.75499e-06)  (13, -4.38748e-06)  (16, 1.75499e-06)\nrow 8: (2, -11.2565)  (5, -34.0161)  (8, 48.2003)  (11, 4.50394)  (14, -12.3715)  (17, 4.94993)\nrow 9: (0, 0.)  (3, 0.)  (6, 0.)  (9, 1.)\nrow 10: (1, 0.)  (4, 0.)  (7, 0.)  (10, 1.)\nrow 11: (2, 0.)  (5, 0.)  (8, 0.)  (11, 1.)\nrow 12: (3, 0.151643)  (6, -0.375775)  (12, 1.50977)  (15, -1.0515)  (18, 0.151643)  (21, -0.375775)\nrow 13: (4, 1.75499e-06)  (7, -4.38748e-06)  (13, 1.75499e-05)  (16, -1.22849e-05)  (19, 1.75499e-06)  (22, -4.38748e-06)\nrow 14: (5, 4.94993)  (8, -12.3715)  (14, 49.4926)  (17, -34.6395)  (20, 4.94993)  (23, -12.3715)\nrow 15: (3, -0.375775)  (6, 0.151643)  (12, -1.0515)  (15, 1.50977)  (18, -0.375775)  (21, 0.151643)\nrow 16: (4, -4.38748e-06)  (7, 1.75499e-06)  (13, -1.22849e-05)  (16, 1.75499e-05)  (19, -4.38748e-06)  (22, 1.75499e-06)\nrow 17: (5, -12.3715)  (8, 4.94993)  (14, -34.6395)  (17, 49.4926)  (20, -12.3715)  (23, 4.94993)\nrow 18: (12, 0.151643)  (15, -0.375775)  (18, 1.50977)  (21, -1.0515)  (24, 0.151643)  (27, -0.375775)\nrow 19: (13, 1.75499e-06)  (16, -4.38748e-06)  (19, 1.75499e-05)  (22, -1.22849e-05)  (25, 1.75499e-06)  (28, -4.38748e-06)\nrow 20: (14, 4.94993)  (17, -12.3715)  (20, 49.4926)  (23, -34.6395)  (26, 4.94993)  (29, -12.3715)\nrow 21: (12, -0.375775)  (15, 0.151643)  (18, -1.0515)  (21, 1.50977)  (24, -0.375775)  (27, 0.151643)\nrow 22: (13, -4.38748e-06)  (16, 1.75499e-06)  (19, -1.22849e-05)  (22, 1.75499e-05)  (25, -4.38748e-06)  (28, 1.75499e-06)\nrow 23: (14, -12.3715)  (17, 4.94993)  (20, -34.6395)  (23, 49.4926)  (26, -12.3715)  (29, 4.94993)\nrow 24: (18, 0.151643)  (21, -0.375775)  (24, 1.50977)  (27, -1.0515)  (30, 0.151643)  (33, -0.375775)\nrow 25: (19, 1.75499e-06)  (22, -4.38748e-06)  (25, 1.75499e-05)  (28, -1.22849e-05)  (31, 1.75499e-06)  (34, -4.38748e-06)\nrow 26: (20, 4.94993)  (23, -12.3715)  (26, 49.4926)  (29, -34.6395)  (32, 4.94993)  (35, -12.3715)\nrow 27: (18, -0.375775)  (21, 0.151643)  (24, -1.0515)  (27, 1.50977)  (30, -0.375775)  (33, 0.151643)\nrow 28: (19, -4.38748e-06)  (22, 1.75499e-06)  (25, -1.22849e-05)  (28, 1.75499e-05)  (31, -4.38748e-06)  (34, 1.75499e-06)\nrow 29: (20, -12.3715)  (23, 4.94993)  (26, -34.6395)  (29, 49.4926)  (32, -12.3715)  (35, 4.94993)\nrow 30: (24, 0.151643)  (27, -0.375775)  (30, 1.50977)  (33, -1.0515)  (36, 0.151643)  (39, -0.375775)\nrow 31: (25, 1.75499e-06)  (28, -4.38748e-06)  (31, 1.75499e-05)  (34, -1.22849e-05)  (37, 1.75499e-06)  (40, -4.38748e-06)\nrow 32: (26, 4.94993)  (29, -12.3715)  (32, 49.4926)  (35, -34.6395)  (38, 4.94993)  (41, -12.3715)\nrow 33: (24, -0.375775)  (27, 0.151643)  (30, -1.0515)  (33, 1.50977)  (36, -0.375775)  (39, 0.151643)\nrow 34: (25, -4.38748e-06)  (28, 1.75499e-06)  (31, -1.22849e-05)  (34, 1.75499e-05)  (37, -4.38748e-06)  (40, 1.75499e-06)\nrow 35: (26, -12.3715)  (29, 4.94993)  (32, -34.6395)  (35, 49.4926)  (38, -12.3715)  (41, 4.94993)\nrow 36: (30, 0.151643)  (33, -0.375775)  (36, 1.50977)  (39, -1.0515)  (42, 0.151643)  (45, -0.375775)\nrow 37: (31, 1.75499e-06)  (34, -4.38748e-06)  (37, 1.75499e-05)  (40, -1.22849e-05)  (43, 1.75499e-06)  (46, -4.38748e-06)\nrow 38: (32, 4.94993)  (35, -12.3715)  (38, 49.4926)  (41, -34.6395)  (44, 4.94993)  (47, -12.3715)\nrow 39: (30, -0.375775)  (33, 0.151643)  (36, -1.0515)  (39, 1.50977)  (42, -0.375775)  (45, 0.151643)\nrow 40: (31, -4.38748e-06)  (34, 1.75499e-06)  (37, -1.22849e-05)  (40, 1.75499e-05)  (43, -4.38748e-06)  (46, 1.75499e-06)\nrow 41: (32, -12.3715)  (35, 4.94993)  (38, -34.6395)  (41, 49.4926)  (44, -12.3715)  (47, 4.94993)\nrow 42: (36, 0.151643)  (39, -0.375775)  (42, 1.50977)  (45, -1.0515)  (48, 0.151643)  (51, -0.375775)\nrow 43: (37, 1.75499e-06)  (40, -4.38748e-06)  (43, 1.75499e-05)  (46, -1.22849e-05)  (49, 1.75499e-06)  (52, -4.38748e-06)\nrow 44: (38, 4.94993)  (41, -12.3715)  (44, 49.4926)  (47, -34.6395)  (50, 4.94993)  (53, -12.3715)\nrow 45: (36, -0.375775)  (39, 0.151643)  (42, -1.0515)  (45, 1.50977)  (48, -0.375775)  (51, 0.151643)\nrow 46: (37, -4.38748e-06)  (40, 1.75499e-06)  (43, -1.22849e-05)  (46, 1.75499e-05)  (49, -4.38748e-06)  (52, 1.75499e-06)\nrow 47: (38, -12.3715)  (41, 4.94993)  (44, -34.6395)  (47, 49.4926)  (50, -12.3715)  (53, 4.94993)\nrow 48: (42, 0.151643)  (45, -0.375775)  (48, 1.50977)  (51, -1.0515)  (54, 0.151643)  (57, -0.375775)\nrow 49: (43, 1.75499e-06)  (46, -4.38748e-06)  (49, 1.75499e-05)  (52, -1.22849e-05)  (55, 1.75499e-06)  (58, -4.38748e-06)\nrow 50: (44, 4.94993)  (47, -12.3715)  (50, 49.4926)  (53, -34.6395)  (56, 4.94993)  (59, -12.3715)\nrow 51: (42, -0.375775)  (45, 0.151643)  (48, -1.0515)  (51, 1.50977)  (54, -0.375775)  (57, 0.151643)\nrow 52: (43, -4.38748e-06)  (46, 1.75499e-06)  (49, -1.22849e-05)  (52, 1.75499e-05)  (55, -4.38748e-06)  (58, 1.75499e-06)\nrow 53: (44, -12.3715)  (47, 4.94993)  (50, -34.6395)  (53, 49.4926)  (56, -12.3715)  (59, 4.94993)\nrow 54: (48, 0.151643)  (51, -0.375775)  (54, 1.50977)  (57, -1.0515)  (60, 0.151643)  (63, -0.375775)\nrow 55: (49, 1.75499e-06)  (52, -4.38748e-06)  (55, 1.75499e-05)  (58, -1.22849e-05)  (61, 1.75499e-06)  (64, -4.38748e-06)\nrow 56: (50, 4.94993)  (53, -12.3715)  (56, 49.4926)  (59, -34.6395)  (62, 4.94993)  (65, -12.3715)\nrow 57: (48, -0.375775)  (51, 0.151643)  (54, -1.0515)  (57, 1.50977)  (60, -0.375775)  (63, 0.151643)\nrow 58: (49, -4.38748e-06)  (52, 1.75499e-06)  (55, -1.22849e-05)  (58, 1.75499e-05)  (61, -4.38748e-06)  (64, 1.75499e-06)\nrow 59: (50, -12.3715)  (53, 4.94993)  (56, -34.6395)  (59, 49.4926)  (62, -12.3715)  (65, 4.94993)\nrow 60: (54, 0.151643)  (57, -0.375775)  (60, 1.50977)  (63, -1.0515)  (66, 0.151643)  (69, -0.375775)\nrow 61: (55, 1.75499e-06)  (58, -4.38748e-06)  (61, 1.75499e-05)  (64, -1.22849e-05)  (67, 1.75499e-06)  (70, -4.38748e-06)\nrow 62: (56, 4.94993)  (59, -12.3715)  (62, 49.4926)  (65, -34.6395)  (68, 4.94993)  (71, -12.3715)\nrow 63: (54, -0.375775)  (57, 0.151643)  (60, -1.0515)  (63, 1.50977)  (66, -0.375775)  (69, 0.151643)\nrow 64: (55, -4.38748e-06)  (58, 1.75499e-06)  (61, -1.22849e-05)  (64, 1.75499e-05)  (67, -4.38748e-06)  (70, 1.75499e-06)\nrow 65: (56, -12.3715)  (59, 4.94993)  (62, -34.6395)  (65, 49.4926)  (68, -12.3715)  (71, 4.94993)\nrow 66: (60, 0.151643)  (63, -0.375775)  (66, 1.50977)  (69, -1.0515)  (72, 0.151643)  (75, -0.375775)\nrow 67: (61, 1.75499e-06)  (64, -4.38748e-06)  (67, 1.75499e-05)  (70, -1.22849e-05)  (73, 1.75499e-06)  (76, -4.38748e-06)\nrow 68: (62, 4.94993)  (65, -12.3715)  (68, 49.4926)  (71, -34.6395)  (74, 4.94993)  (77, -12.3715)\nrow 69: (60, -0.375775)  (63, 0.151643)  (66, -1.0515)  (69, 1.50977)  (72, -0.375775)  (75, 0.151643)\nrow 70: (61, -4.38748e-06)  (64, 1.75499e-06)  (67, -1.22849e-05)  (70, 1.75499e-05)  (73, -4.38748e-06)  (76, 1.75499e-06)\nrow 71: (62, -12.3715)  (65, 4.94993)  (68, -34.6395)  (71, 49.4926)  (74, -12.3715)  (77, 4.94993)\nrow 72: (66, 0.151643)  (69, -0.375775)  (72, 1.50977)  (75, -1.0515)  (78, 0.151643)  (81, -0.375775)\nrow 73: (67, 1.75499e-06)  (70, -4.38748e-06)  (73, 1.75499e-05)  (76, -1.22849e-05)  (79, 1.75499e-06)  (82, -4.38748e-06)\nrow 74: (68, 4.94993)  (71, -12.3715)  (74, 49.4926)  (77, -34.6395)  (80, 4.94993)  (83, -12.3715)\nrow 75: (66, -0.375775)  (69, 0.151643)  (72, -1.0515)  (75, 1.50977)  (78, -0.375775)  (81, 0.151643)\nrow 76: (67, -4.38748e-06)  (70, 1.75499e-06)  (73, -1.22849e-05)  (76, 1.75499e-05)  (79, -4.38748e-06)  (82, 1.75499e-06)\nrow 77: (68, -12.3715)  (71, 4.94993)  (74, -34.6395)  (77, 49.4926)  (80, -12.3715)  (83, 4.94993)\nrow 78: (72, 0.151643)  (75, -0.375775)  (78, 1.50977)  (81, -1.0515)  (84, 0.151643)  (87, -0.375775)\nrow 79: (73, 1.75499e-06)  (76, -4.38748e-06)  (79, 1.75499e-05)  (82, -1.22849e-05)  (85, 1.75499e-06)  (88, -4.38748e-06)\nrow 80: (74, 4.94993)  (77, -12.3715)  (80, 49.4926)  (83, -34.6395)  (86, 4.94993)  (89, -12.3715)\nrow 81: (72, -0.375775)  (75, 0.151643)  (78, -1.0515)  (81, 1.50977)  (84, -0.375775)  (87, 0.151643)\nrow 82: (73, -4.38748e-06)  (76, 1.75499e-06)  (79, -1.22849e-05)  (82, 1.75499e-05)  (85, -4.38748e-06)  (88, 1.75499e-06)\nrow 83: (74, -12.3715)  (77, 4.94993)  (80, -34.6395)  (83, 49.4926)  (86, -12.3715)  (89, 4.94993)\nrow 84: (78, 0.151643)  (81, -0.375775)  (84, 1.50977)  (87, -1.0515)  (90, 0.151643)  (93, -0.375775)\nrow 85: (79, 1.75499e-06)  (82, -4.38748e-06)  (85, 1.75499e-05)  (88, -1.22849e-05)  (91, 1.75499e-06)  (94, -4.38748e-06)\nrow 86: (80, 4.94993)  (83, -12.3715)  (86, 49.4926)  (89, -34.6395)  (92, 4.94993)  (95, -12.3715)\nrow 87: (78, -0.375775)  (81, 0.151643)  (84, -1.0515)  (87, 1.50977)  (90, -0.375775)  (93, 0.151643)\nrow 88: (79, -4.38748e-06)  (82, 1.75499e-06)  (85, -1.22849e-05)  (88, 1.75499e-05)  (91, -4.38748e-06)  (94, 1.75499e-06)\nrow 89: (80, -12.3715)  (83, 4.94993)  (86, -34.6395)  (89, 49.4926)  (92, -12.3715)  (95, 4.94993)\nrow 90: (84, 0.151643)  (87, -0.375775)  (90, 1.50977)  (93, -1.0515)  (96, 0.151643)  (99, -0.375775)\nrow 91: (85, 1.75499e-06)  (88, -4.38748e-06)  (91, 1.75499e-05)  (94, -1.22849e-05)  (97, 1.75499e-06)  (100, -4.38748e-06)\nrow 92: (86, 4.94993)  (89, -12.3715)  (92, 49.4926)  (95, -34.6395)  (98, 4.94993)  (101, -12.3715)\nrow 93: (84, -0.375775)  (87, 0.151643)  (90, -1.0515)  (93, 1.50977)  (96, -0.375775)  (99, 0.151643)\nrow 94: (85, -4.38748e-06)  (88, 1.75499e-06)  (91, -1.22849e-05)  (94, 1.75499e-05)  (97, -4.38748e-06)  (100, 1.75499e-06)\nrow 95: (86, -12.3715)  (89, 4.94993)  (92, -34.6395)  (95, 49.4926)  (98, -12.3715)  (101, 4.94993)\nrow 96: (90, 0.151643)  (93, -0.375775)  (96, 1.50977)  (99, -1.0515)  (102, 0.151643)  (105, -0.375775)\nrow 97: (91, 1.75499e-06)  (94, -4.38748e-06)  (97, 1.75499e-05)  (100, -1.22849e-05)  (103, 1.75499e-06)  (106, -4.38748e-06)\nrow 98: (92, 4.94993)  (95, -12.3715)  (98, 49.4926)  (101, -34.6395)  (104, 4.94993)  (107, -12.3715)\nrow 99: (90, -0.375775)  (93, 0.151643)  (96, -1.0515)  (99, 1.50977)  (102, -0.375775)  (105, 0.151643)\nrow 100: (91, -4.38748e-06)  (94, 1.75499e-06)  (97, -1.22849e-05)  (100, 1.75499e-05)  (103, -4.38748e-06)  (106, 1.75499e-06)\nrow 101: (92, -12.3715)  (95, 4.94993)  (98, -34.6395)  (101, 49.4926)  (104, -12.3715)  (107, 4.94993)\nrow 102: (96, 0.151643)  (99, -0.375775)  (102, 1.50977)  (105, -1.0515)  (108, 0.151643)  (111, -0.375775)\nrow 103: (97, 1.75499e-06)  (100, -4.38748e-06)  (103, 1.75499e-05)  (106, -1.22849e-05)  (109, 1.75499e-06)  (112, -4.38748e-06)\nrow 104: (98, 4.94993)  (101, -12.3715)  (104, 49.4926)  (107, -34.6395)  (110, 4.94993)  (113, -12.3715)\nrow 105: (96, -0.375775)  (99, 0.151643)  (102, -1.0515)  (105, 1.50977)  (108, -0.375775)  (111, 0.151643)\nrow 106: (97, -4.38748e-06)  (100, 1.75499e-06)  (103, -1.22849e-05)  (106, 1.75499e-05)  (109, -4.38748e-06)  (112, 1.75499e-06)\nrow 107: (98, -12.3715)  (101, 4.94993)  (104, -34.6395)  (107, 49.4926)  (110, -12.3715)  (113, 4.94993)\nrow 108: (102, 0.151643)  (105, -0.375775)  (108, 1.50977)  (111, -1.0515)  (114, 0.151643)  (117, -0.375775)\nrow 109: (103, 1.75499e-06)  (106, -4.38748e-06)  (109, 1.75499e-05)  (112, -1.22849e-05)  (115, 1.75499e-06)  (118, -4.38748e-06)\nrow 110: (104, 4.94993)  (107, -12.3715)  (110, 49.4926)  (113, -34.6395)  (116, 4.94993)  (119, -12.3715)\nrow 111: (102, -0.375775)  (105, 0.151643)  (108, -1.0515)  (111, 1.50977)  (114, -0.375775)  (117, 0.151643)\nrow 112: (103, -4.38748e-06)  (106, 1.75499e-06)  (109, -1.22849e-05)  (112, 1.75499e-05)  (115, -4.38748e-06)  (118, 1.75499e-06)\nrow 113: (104, -12.3715)  (107, 4.94993)  (110, -34.6395)  (113, 49.4926)  (116, -12.3715)  (119, 4.94993)\nrow 114: (108, 0.151643)  (111, -0.375775)  (114, 1.50977)  (117, -1.0515)  (120, 0.151643)  (123, -0.375775)\nrow 115: (109, 1.75499e-06)  (112, -4.38748e-06)  (115, 1.75499e-05)  (118, -1.22849e-05)  (121, 1.75499e-06)  (124, -4.38748e-06)\nrow 116: (110, 4.94993)  (113, -12.3715)  (116, 49.4926)  (119, -34.6395)  (122, 4.94993)  (125, -12.3715)\nrow 117: (108, -0.375775)  (111, 0.151643)  (114, -1.0515)  (117, 1.50977)  (120, -0.375775)  (123, 0.151643)\nrow 118: (109, -4.38748e-06)  (112, 1.75499e-06)  (115, -1.22849e-05)  (118, 1.75499e-05)  (121, -4.38748e-06)  (124, 1.75499e-06)\nrow 119: (110, -12.3715)  (113, 4.94993)  (116, -34.6395)  (119, 49.4926)  (122, -12.3715)  (125, 4.94993)\nrow 120: (114, 0.151643)  (117, -0.375775)  (120, 1.50977)  (123, -1.0515)  (126, 0.151643)  (129, -0.375775)\nrow 121: (115, 1.75499e-06)  (118, -4.38748e-06)  (121, 1.75499e-05)  (124, -1.22849e-05)  (127, 1.75499e-06)  (130, -4.38748e-06)\nrow 122: (116, 4.94993)  (119, -12.3715)  (122, 49.4926)  (125, -34.6395)  (128, 4.94993)  (131, -12.3715)\nrow 123: (114, -0.375775)  (117, 0.151643)  (120, -1.0515)  (123, 1.50977)  (126, -0.375775)  (129, 0.151643)\nrow 124: (115, -4.38748e-06)  (118, 1.75499e-06)  (121, -1.22849e-05)  (124, 1.75499e-05)  (127, -4.38748e-06)  (130, 1.75499e-06)\nrow 125: (116, -12.3715)  (119, 4.94993)  (122, -34.6395)  (125, 49.4926)  (128, -12.3715)  (131, 4.94993)\nrow 126: (120, 0.151643)  (123, -0.375775)  (126, 1.50977)  (129, -1.0515)  (132, 0.151643)  (135, -0.375775)\nrow 127: (121, 1.75499e-06)  (124, -4.38748e-06)  (127, 1.75499e-05)  (130, -1.22849e-05)  (133, 1.75499e-06)  (136, -4.38748e-06)\nrow 128: (122, 4.94993)  (125, -12.3715)  (128, 49.4926)  (131, -34.6395)  (134, 4.94993)  (137, -12.3715)\nrow 129: (120, -0.375775)  (123, 0.151643)  (126, -1.0515)  (129, 1.50977)  (132, -0.375775)  (135, 0.151643)\nrow 130: (121, -4.38748e-06)  (124, 1.75499e-06)  (127, -1.22849e-05)  (130, 1.75499e-05)  (133, -4.38748e-06)  (136, 1.75499e-06)\nrow 131: (122, -12.3715)  (125, 4.94993)  (128, -34.6395)  (131, 49.4926)  (134, -12.3715)  (137, 4.94993)\nrow 132: (126, 0.151643)  (129, -0.375775)  (132, 1.50977)  (135, -1.0515)  (138, 0.151643)  (141, -0.375775)\nrow 133: (127, 1.75499e-06)  (130, -4.38748e-06)  (133, 1.75499e-05)  (136, -1.22849e-05)  (139, 1.75499e-06)  (142, -4.38748e-06)\nrow 134: (128, 4.94993)  (131, -12.3715)  (134, 49.4926)  (137, -34.6395)  (140, 4.94993)  (143, -12.3715)\nrow 135: (126, -0.375775)  (129, 0.151643)  (132, -1.0515)  (135, 1.50977)  (138, -0.375775)  (141, 0.151643)\nrow 136: (127, -4.38748e-06)  (130, 1.75499e-06)  (133, -1.22849e-05)  (136, 1.75499e-05)  (139, -4.38748e-06)  (142, 1.75499e-06)\nrow 137: (128, -12.3715)  (131, 4.94993)  (134, -34.6395)  (137, 49.4926)  (140, -12.3715)  (143, 4.94993)\nrow 138: (132, 0.151643)  (135, -0.375775)  (138, 1.50977)  (141, -1.0515)  (144, 0.151643)  (147, -0.375775)\nrow 139: (133, 1.75499e-06)  (136, -4.38748e-06)  (139, 1.75499e-05)  (142, -1.22849e-05)  (145, 1.75499e-06)  (148, -4.38748e-06)\nrow 140: (134, 4.94993)  (137, -12.3715)  (140, 49.4926)  (143, -34.6395)  (146, 4.94993)  (149, -12.3715)\nrow 141: (132, -0.375775)  (135, 0.151643)  (138, -1.0515)  (141, 1.50977)  (144, -0.375775)  (147, 0.151643)\nrow 142: (133, -4.38748e-06)  (136, 1.75499e-06)  (139, -1.22849e-05)  (142, 1.75499e-05)  (145, -4.38748e-06)  (148, 1.75499e-06)\nrow 143: (134, -12.3715)  (137, 4.94993)  (140, -34.6395)  (143, 49.4926)  (146, -12.3715)  (149, 4.94993)\nrow 144: (138, 0.151643)  (141, -0.375775)  (144, 1.50977)  (147, -1.0515)  (150, 0.151643)  (153, -0.375775)\nrow 145: (139, 1.75499e-06)  (142, -4.38748e-06)  (145, 1.75499e-05)  (148, -1.22849e-05)  (151, 1.75499e-06)  (154, -4.38748e-06)\nrow 146: (140, 4.94993)  (143, -12.3715)  (146, 49.4926)  (149, -34.6395)  (152, 4.94993)  (155, -12.3715)\nrow 147: (138, -0.375775)  (141, 0.151643)  (144, -1.0515)  (147, 1.50977)  (150, -0.375775)  (153, 0.151643)\nrow 148: (139, -4.38748e-06)  (142, 1.75499e-06)  (145, -1.22849e-05)  (148, 1.75499e-05)  (151, -4.38748e-06)  (154, 1.75499e-06)\nrow 149: (140, -12.3715)  (143, 4.94993)  (146, -34.6395)  (149, 49.4926)  (152, -12.3715)  (155, 4.94993)\nrow 150: (144, 0.151643)  (147, -0.375775)  (150, 1.50977)  (153, -1.0515)  (156, 0.151643)  (159, -0.375775)\nrow 151: (145, 1.75499e-06)  (148, -4.38748e-06)  (151, 1.75499e-05)  (154, -1.22849e-05)  (157, 1.75499e-06)  (160, -4.38748e-06)\nrow 152: (146, 4.94993)  (149, -12.3715)  (152, 49.4926)  (155, -34.6395)  (158, 4.94993)  (161, -12.3715)\nrow 153: (144, -0.375775)  (147, 0.151643)  (150, -1.0515)  (153, 1.50977)  (156, -0.375775)  (159, 0.151643)\nrow 154: (145, -4.38748e-06)  (148, 1.75499e-06)  (151, -1.22849e-05)  (154, 1.75499e-05)  (157, -4.38748e-06)  (160, 1.75499e-06)\nrow 155: (146, -12.3715)  (149, 4.94993)  (152, -34.6395)  (155, 49.4926)  (158, -12.3715)  (161, 4.94993)\nrow 156: (150, 0.151643)  (153, -0.375775)  (156, 1.50977)  (159, -1.0515)  (162, 0.151643)  (165, -0.375775)\nrow 157: (151, 1.75499e-06)  (154, -4.38748e-06)  (157, 1.75499e-05)  (160, -1.22849e-05)  (163, 1.75499e-06)  (166, -4.38748e-06)\nrow 158: (152, 4.94993)  (155, -12.3715)  (158, 49.4926)  (161, -34.6395)  (164, 4.94993)  (167, -12.3715)\nrow 159: (150, -0.375775)  (153, 0.151643)  (156, -1.0515)  (159, 1.50977)  (162, -0.375775)  (165, 0.151643)\nrow 160: (151, -4.38748e-06)  (154, 1.75499e-06)  (157, -1.22849e-05)  (160, 1.75499e-05)  (163, -4.38748e-06)  (166, 1.75499e-06)\nrow 161: (152, -12.3715)  (155, 4.94993)  (158, -34.6395)  (161, 49.4926)  (164, -12.3715)  (167, 4.94993)\nrow 162: (156, 0.151643)  (159, -0.375775)  (162, 1.50977)  (165, -1.0515)  (168, 0.151643)  (171, -0.375775)\nrow 163: (157, 1.75499e-06)  (160, -4.38748e-06)  (163, 1.75499e-05)  (166, -1.22849e-05)  (169, 1.75499e-06)  (172, -4.38748e-06)\nrow 164: (158, 4.94993)  (161, -12.3715)  (164, 49.4926)  (167, -34.6395)  (170, 4.94993)  (173, -12.3715)\nrow 165: (156, -0.375775)  (159, 0.151643)  (162, -1.0515)  (165, 1.50977)  (168, -0.375775)  (171, 0.151643)\nrow 166: (157, -4.38748e-06)  (160, 1.75499e-06)  (163, -1.22849e-05)  (166, 1.75499e-05)  (169, -4.38748e-06)  (172, 1.75499e-06)\nrow 167: (158, -12.3715)  (161, 4.94993)  (164, -34.6395)  (167, 49.4926)  (170, -12.3715)  (173, 4.94993)\nrow 168: (162, 0.151643)  (165, -0.375775)  (168, 1.50977)  (171, -1.0515)  (174, 0.151643)  (177, -0.375775)\nrow 169: (163, 1.75499e-06)  (166, -4.38748e-06)  (169, 1.75499e-05)  (172, -1.22849e-05)  (175, 1.75499e-06)  (178, -4.38748e-06)\nrow 170: (164, 4.94993)  (167, -12.3715)  (170, 49.4926)  (173, -34.6395)  (176, 4.94993)  (179, -12.3715)\nrow 171: (162, -0.375775)  (165, 0.151643)  (168, -1.0515)  (171, 1.50977)  (174, -0.375775)  (177, 0.151643)\nrow 172: (163, -4.38748e-06)  (166, 1.75499e-06)  (169, -1.22849e-05)  (172, 1.75499e-05)  (175, -4.38748e-06)  (178, 1.75499e-06)\nrow 173: (164, -12.3715)  (167, 4.94993)  (170, -34.6395)  (173, 49.4926)  (176, -12.3715)  (179, 4.94993)\nrow 174: (168, 0.151643)  (171, -0.375775)  (174, 1.50977)  (177, -1.0515)  (180, 0.151643)  (183, -0.375775)\nrow 175: (169, 1.75499e-06)  (172, -4.38748e-06)  (175, 1.75499e-05)  (178, -1.22849e-05)  (181, 1.75499e-06)  (184, -4.38748e-06)\nrow 176: (170, 4.94993)  (173, -12.3715)  (176, 49.4926)  (179, -34.6395)  (182, 4.94993)  (185, -12.3715)\nrow 177: (168, -0.375775)  (171, 0.151643)  (174, -1.0515)  (177, 1.50977)  (180, -0.375775)  (183, 0.151643)\nrow 178: (169, -4.38748e-06)  (172, 1.75499e-06)  (175, -1.22849e-05)  (178, 1.75499e-05)  (181, -4.38748e-06)  (184, 1.75499e-06)\nrow 179: (170, -12.3715)  (173, 4.94993)  (176, -34.6395)  (179, 49.4926)  (182, -12.3715)  (185, 4.94993)\nrow 180: (174, 0.151643)  (177, -0.375775)  (180, 1.50977)  (183, -1.0515)  (186, 0.151643)  (189, -0.375775)\nrow 181: (175, 1.75499e-06)  (178, -4.38748e-06)  (181, 1.75499e-05)  (184, -1.22849e-05)  (187, 1.75499e-06)  (190, -4.38748e-06)\nrow 182: (176, 4.94993)  (179, -12.3715)  (182, 49.4926)  (185, -34.6395)  (188, 4.94993)  (191, -12.3715)\nrow 183: (174, -0.375775)  (177, 0.151643)  (180, -1.0515)  (183, 1.50977)  (186, -0.375775)  (189, 0.151643)\nrow 184: (175, -4.38748e-06)  (178, 1.75499e-06)  (181, -1.22849e-05)  (184, 1.75499e-05)  (187, -4.38748e-06)  (190, 1.75499e-06)\nrow 185: (176, -12.3715)  (179, 4.94993)  (182, -34.6395)  (185, 49.4926)  (188, -12.3715)  (191, 4.94993)\nrow 186: (180, 0.151643)  (183, -0.375775)  (186, 1.50977)  (189, -1.0515)  (192, 0.151643)  (195, -0.375775)\nrow 187: (181, 1.75499e-06)  (184, -4.38748e-06)  (187, 1.75499e-05)  (190, -1.22849e-05)  (193, 1.75499e-06)  (196, -4.38748e-06)\nrow 188: (182, 4.94993)  (185, -12.3715)  (188, 49.4926)  (191, -34.6395)  (194, 4.94993)  (197, -12.3715)\nrow 189: (180, -0.375775)  (183, 0.151643)  (186, -1.0515)  (189, 1.50977)  (192, -0.375775)  (195, 0.151643)\nrow 190: (181, -4.38748e-06)  (184, 1.75499e-06)  (187, -1.22849e-05)  (190, 1.75499e-05)  (193, -4.38748e-06)  (196, 1.75499e-06)\nrow 191: (182, -12.3715)  (185, 4.94993)  (188, -34.6395)  (191, 49.4926)  (194, -12.3715)  (197, 4.94993)\nrow 192: (186, 0.151643)  (189, -0.375775)  (192, 1.50977)  (195, -1.0515)  (198, 0.151643)  (201, -0.375775)\nrow 193: (187, 1.75499e-06)  (190, -4.38748e-06)  (193, 1.75499e-05)  (196, -1.22849e-05)  (199, 1.75499e-06)  (202, -4.38748e-06)\nrow 194: (188, 4.94993)  (191, -12.3715)  (194, 49.4926)  (197, -34.6395)  (200, 4.94993)  (203, -12.3715)\nrow 195: (186, -0.375775)  (189, 0.151643)  (192, -1.0515)  (195, 1.50977)  (198, -0.375775)  (201, 0.151643)\nrow 196: (187, -4.38748e-06)  (190, 1.75499e-06)  (193, -1.22849e-05)  (196, 1.75499e-05)  (199, -4.38748e-06)  (202, 1.75499e-06)\nrow 197: (188, -12.3715)  (191, 4.94993)  (194, -34.6395)  (197, 49.4926)  (200, -12.3715)  (203, 4.94993)\nrow 198: (192, 0.151643)  (195, -0.375775)  (198, 1.50977)  (201, -1.0515)  (204, 0.151643)  (207, -0.375775)\nrow 199: (193, 1.75499e-06)  (196, -4.38748e-06)  (199, 1.75499e-05)  (202, -1.22849e-05)  (205, 1.75499e-06)  (208, -4.38748e-06)\nrow 200: (194, 4.94993)  (197, -12.3715)  (200, 49.4926)  (203, -34.6395)  (206, 4.94993)  (209, -12.3715)\nrow 201: (192, -0.375775)  (195, 0.151643)  (198, -1.0515)  (201, 1.50977)  (204, -0.375775)  (207, 0.151643)\nrow 202: (193, -4.38748e-06)  (196, 1.75499e-06)  (199, -1.22849e-05)  (202, 1.75499e-05)  (205, -4.38748e-06)  (208, 1.75499e-06)\nrow 203: (194, -12.3715)  (197, 4.94993)  (200, -34.6395)  (203, 49.4926)  (206, -12.3715)  (209, 4.94993)\nrow 204: (198, 0.151643)  (201, -0.375775)  (204, 1.50977)  (207, -1.0515)  (210, 0.151643)  (213, -0.375775)\nrow 205: (199, 1.75499e-06)  (202, -4.38748e-06)  (205, 1.75499e-05)  (208, -1.22849e-05)  (211, 1.75499e-06)  (214, -4.38748e-06)\nrow 206: (200, 4.94993)  (203, -12.3715)  (206, 49.4926)  (209, -34.6395)  (212, 4.94993)  (215, -12.3715)\nrow 207: (198, -0.375775)  (201, 0.151643)  (204, -1.0515)  (207, 1.50977)  (210, -0.375775)  (213, 0.151643)\nrow 208: (199, -4.38748e-06)  (202, 1.75499e-06)  (205, -1.22849e-05)  (208, 1.75499e-05)  (211, -4.38748e-06)  (214, 1.75499e-06)\nrow 209: (200, -12.3715)  (203, 4.94993)  (206, -34.6395)  (209, 49.4926)  (212, -12.3715)  (215, 4.94993)\nrow 210: (204, 0.151643)  (207, -0.375775)  (210, 1.50977)  (213, -1.0515)  (216, 0.151643)  (219, -0.375775)\nrow 211: (205, 1.75499e-06)  (208, -4.38748e-06)  (211, 1.75499e-05)  (214, -1.22849e-05)  (217, 1.75499e-06)  (220, -4.38748e-06)\nrow 212: (206, 4.94993)  (209, -12.3715)  (212, 49.4926)  (215, -34.6395)  (218, 4.94993)  (221, -12.3715)\nrow 213: (204, -0.375775)  (207, 0.151643)  (210, -1.0515)  (213, 1.50977)  (216, -0.375775)  (219, 0.151643)\nrow 214: (205, -4.38748e-06)  (208, 1.75499e-06)  (211, -1.22849e-05)  (214, 1.75499e-05)  (217, -4.38748e-06)  (220, 1.75499e-06)\nrow 215: (206, -12.3715)  (209, 4.94993)  (212, -34.6395)  (215, 49.4926)  (218, -12.3715)  (221, 4.94993)\nrow 216: (210, 0.151643)  (213, -0.375775)  (216, 1.50977)  (219, -1.0515)  (222, 0.151643)  (225, -0.375775)\nrow 217: (211, 1.75499e-06)  (214, -4.38748e-06)  (217, 1.75499e-05)  (220, -1.22849e-05)  (223, 1.75499e-06)  (226, -4.38748e-06)\nrow 218: (212, 4.94993)  (215, -12.3715)  (218, 49.4926)  (221, -34.6395)  (224, 4.94993)  (227, -12.3715)\nrow 219: (210, -0.375775)  (213, 0.151643)  (216, -1.0515)  (219, 1.50977)  (222, -0.375775)  (225, 0.151643)\nrow 220: (211, -4.38748e-06)  (214, 1.75499e-06)  (217, -1.22849e-05)  (220, 1.75499e-05)  (223, -4.38748e-06)  (226, 1.75499e-06)\nrow 221: (212, -12.3715)  (215, 4.94993)  (218, -34.6395)  (221, 49.4926)  (224, -12.3715)  (227, 4.94993)\nrow 222: (216, 0.151643)  (219, -0.375775)  (222, 1.50977)  (225, -1.0515)  (228, 0.151643)  (231, -0.375775)\nrow 223: (217, 1.75499e-06)  (220, -4.38748e-06)  (223, 1.75499e-05)  (226, -1.22849e-05)  (229, 1.75499e-06)  (232, -4.38748e-06)\nrow 224: (218, 4.94993)  (221, -12.3715)  (224, 49.4926)  (227, -34.6395)  (230, 4.94993)  (233, -12.3715)\nrow 225: (216, -0.375775)  (219, 0.151643)  (222, -1.0515)  (225, 1.50977)  (228, -0.375775)  (231, 0.151643)\nrow 226: (217, -4.38748e-06)  (220, 1.75499e-06)  (223, -1.22849e-05)  (226, 1.75499e-05)  (229, -4.38748e-06)  (232, 1.75499e-06)\nrow 227: (218, -12.3715)  (221, 4.94993)  (224, -34.6395)  (227, 49.4926)  (230, -12.3715)  (233, 4.94993)\nrow 228: (222, 0.151643)  (225, -0.375775)  (228, 1.50977)  (231, -1.0515)  (234, 0.151643)  (237, -0.375775)\nrow 229: (223, 1.75499e-06)  (226, -4.38748e-06)  (229, 1.75499e-05)  (232, -1.22849e-05)  (235, 1.75499e-06)  (238, -4.38748e-06)\nrow 230: (224, 4.94993)  (227, -12.3715)  (230, 49.4926)  (233, -34.6395)  (236, 4.94993)  (239, -12.3715)\nrow 231: (222, -0.375775)  (225, 0.151643)  (228, -1.0515)  (231, 1.50977)  (234, -0.375775)  (237, 0.151643)\nrow 232: (223, -4.38748e-06)  (226, 1.75499e-06)  (229, -1.22849e-05)  (232, 1.75499e-05)  (235, -4.38748e-06)  (238, 1.75499e-06)\nrow 233: (224, -12.3715)  (227, 4.94993)  (230, -34.6395)  (233, 49.4926)  (236, -12.3715)  (239, 4.94993)\nrow 234: (228, 0.151643)  (231, -0.375775)  (234, 1.50977)  (237, -1.0515)  (240, 0.151643)  (243, -0.375775)\nrow 235: (229, 1.75499e-06)  (232, -4.38748e-06)  (235, 1.75499e-05)  (238, -1.22849e-05)  (241, 1.75499e-06)  (244, -4.38748e-06)\nrow 236: (230, 4.94993)  (233, -12.3715)  (236, 49.4926)  (239, -34.6395)  (242, 4.94993)  (245, -12.3715)\nrow 237: (228, -0.375775)  (231, 0.151643)  (234, -1.0515)  (237, 1.50977)  (240, -0.375775)  (243, 0.151643)\nrow 238: (229, -4.38748e-06)  (232, 1.75499e-06)  (235, -1.22849e-05)  (238, 1.75499e-05)  (241, -4.38748e-06)  (244, 1.75499e-06)\nrow 239: (230, -12.3715)  (233, 4.94993)  (236, -34.6395)  (239, 49.4926)  (242, -12.3715)  (245, 4.94993)\nrow 240: (234, 0.151643)  (237, -0.375775)  (240, 1.50977)  (243, -1.0515)  (246, 0.151643)  (249, -0.375775)\nrow 241: (235, 1.75499e-06)  (238, -4.38748e-06)  (241, 1.75499e-05)  (244, -1.22849e-05)  (247, 1.75499e-06)  (250, -4.38748e-06)\nrow 242: (236, 4.94993)  (239, -12.3715)  (242, 49.4926)  (245, -34.6395)  (248, 4.94993)  (251, -12.3715)\nrow 243: (234, -0.375775)  (237, 0.151643)  (240, -1.0515)  (243, 1.50977)  (246, -0.375775)  (249, 0.151643)\nrow 244: (235, -4.38748e-06)  (238, 1.75499e-06)  (241, -1.22849e-05)  (244, 1.75499e-05)  (247, -4.38748e-06)  (250, 1.75499e-06)\nrow 245: (236, -12.3715)  (239, 4.94993)  (242, -34.6395)  (245, 49.4926)  (248, -12.3715)  (251, 4.94993)\nrow 246: (240, 0.151643)  (243, -0.375775)  (246, 1.50977)  (249, -1.0515)  (252, 0.151643)  (255, -0.375775)\nrow 247: (241, 1.75499e-06)  (244, -4.38748e-06)  (247, 1.75499e-05)  (250, -1.22849e-05)  (253, 1.75499e-06)  (256, -4.38748e-06)\nrow 248: (242, 4.94993)  (245, -12.3715)  (248, 49.4926)  (251, -34.6395)  (254, 4.94993)  (257, -12.3715)\nrow 249: (240, -0.375775)  (243, 0.151643)  (246, -1.0515)  (249, 1.50977)  (252, -0.375775)  (255, 0.151643)\nrow 250: (241, -4.38748e-06)  (244, 1.75499e-06)  (247, -1.22849e-05)  (250, 1.75499e-05)  (253, -4.38748e-06)  (256, 1.75499e-06)\nrow 251: (242, -12.3715)  (245, 4.94993)  (248, -34.6395)  (251, 49.4926)  (254, -12.3715)  (257, 4.94993)\nrow 252: (246, 0.151643)  (249, -0.375775)  (252, 1.50977)  (255, -1.0515)  (258, 0.151643)  (261, -0.375775)\nrow 253: (247, 1.75499e-06)  (250, -4.38748e-06)  (253, 1.75499e-05)  (256, -1.22849e-05)  (259, 1.75499e-06)  (262, -4.38748e-06)\nrow 254: (248, 4.94993)  (251, -12.3715)  (254, 49.4926)  (257, -34.6395)  (260, 4.94993)  (263, -12.3715)\nrow 255: (246, -0.375775)  (249, 0.151643)  (252, -1.0515)  (255, 1.50977)  (258, -0.375775)  (261, 0.151643)\nrow 256: (247, -4.38748e-06)  (250, 1.75499e-06)  (253, -1.22849e-05)  (256, 1.75499e-05)  (259, -4.38748e-06)  (262, 1.75499e-06)\nrow 257: (248, -12.3715)  (251, 4.94993)  (254, -34.6395)  (257, 49.4926)  (260, -12.3715)  (263, 4.94993)\nrow 258: (252, 0.151643)  (255, -0.375775)  (258, 1.50977)  (261, -1.0515)  (264, 0.151643)  (267, -0.375775)\nrow 259: (253, 1.75499e-06)  (256, -4.38748e-06)  (259, 1.75499e-05)  (262, -1.22849e-05)  (265, 1.75499e-06)  (268, -4.38748e-06)\nrow 260: (254, 4.94993)  (257, -12.3715)  (260, 49.4926)  (263, -34.6395)  (266, 4.94993)  (269, -12.3715)\nrow 261: (252, -0.375775)  (255, 0.151643)  (258, -1.0515)  (261, 1.50977)  (264, -0.375775)  (267, 0.151643)\nrow 262: (253, -4.38748e-06)  (256, 1.75499e-06)  (259, -1.22849e-05)  (262, 1.75499e-05)  (265, -4.38748e-06)  (268, 1.75499e-06)\nrow 263: (254, -12.3715)  (257, 4.94993)  (260, -34.6395)  (263, 49.4926)  (266, -12.3715)  (269, 4.94993)\nrow 264: (258, 0.151643)  (261, -0.375775)  (264, 1.50977)  (267, -1.0515)  (270, 0.151643)  (273, -0.375775)\nrow 265: (259, 1.75499e-06)  (262, -4.38748e-06)  (265, 1.75499e-05)  (268, -1.22849e-05)  (271, 1.75499e-06)  (274, -4.38748e-06)\nrow 266: (260, 4.94993)  (263, -12.3715)  (266, 49.4926)  (269, -34.6395)  (272, 4.94993)  (275, -12.3715)\nrow 267: (258, -0.375775)  (261, 0.151643)  (264, -1.0515)  (267, 1.50977)  (270, -0.375775)  (273, 0.151643)\nrow 268: (259, -4.38748e-06)  (262, 1.75499e-06)  (265, -1.22849e-05)  (268, 1.75499e-05)  (271, -4.38748e-06)  (274, 1.75499e-06)\nrow 269: (260, -12.3715)  (263, 4.94993)  (266, -34.6395)  (269, 49.4926)  (272, -12.3715)  (275, 4.94993)\nrow 270: (264, 0.151643)  (267, -0.375775)  (270, 1.50977)  (273, -1.0515)  (276, 0.151643)  (279, -0.375775)\nrow 271: (265, 1.75499e-06)  (268, -4.38748e-06)  (271, 1.75499e-05)  (274, -1.22849e-05)  (277, 1.75499e-06)  (280, -4.38748e-06)\nrow 272: (266, 4.94993)  (269, -12.3715)  (272, 49.4926)  (275, -34.6395)  (278, 4.94993)  (281, -12.3715)\nrow 273: (264, -0.375775)  (267, 0.151643)  (270, -1.0515)  (273, 1.50977)  (276, -0.375775)  (279, 0.151643)\nrow 274: (265, -4.38748e-06)  (268, 1.75499e-06)  (271, -1.22849e-05)  (274, 1.75499e-05)  (277, -4.38748e-06)  (280, 1.75499e-06)\nrow 275: (266, -12.3715)  (269, 4.94993)  (272, -34.6395)  (275, 49.4926)  (278, -12.3715)  (281, 4.94993)\nrow 276: (270, 0.151643)  (273, -0.375775)  (276, 1.50977)  (279, -1.0515)  (282, 0.151643)  (285, -0.375775)\nrow 277: (271, 1.75499e-06)  (274, -4.38748e-06)  (277, 1.75499e-05)  (280, -1.22849e-05)  (283, 1.75499e-06)  (286, -4.38748e-06)\nrow 278: (272, 4.94993)  (275, -12.3715)  (278, 49.4926)  (281, -34.6395)  (284, 4.94993)  (287, -12.3715)\nrow 279: (270, -0.375775)  (273, 0.151643)  (276, -1.0515)  (279, 1.50977)  (282, -0.375775)  (285, 0.151643)\nrow 280: (271, -4.38748e-06)  (274, 1.75499e-06)  (277, -1.22849e-05)  (280, 1.75499e-05)  (283, -4.38748e-06)  (286, 1.75499e-06)\nrow 281: (272, -12.3715)  (275, 4.94993)  (278, -34.6395)  (281, 49.4926)  (284, -12.3715)  (287, 4.94993)\nrow 282: (276, 0.151643)  (279, -0.375775)  (282, 1.50977)  (285, -1.0515)  (288, 0.151643)  (291, -0.375775)\nrow 283: (277, 1.75499e-06)  (280, -4.38748e-06)  (283, 1.75499e-05)  (286, -1.22849e-05)  (289, 1.75499e-06)  (292, -4.38748e-06)\nrow 284: (278, 4.94993)  (281, -12.3715)  (284, 49.4926)  (287, -34.6395)  (290, 4.94993)  (293, -12.3715)\nrow 285: (276, -0.375775)  (279, 0.151643)  (282, -1.0515)  (285, 1.50977)  (288, -0.375775)  (291, 0.151643)\nrow 286: (277, -4.38748e-06)  (280, 1.75499e-06)  (283, -1.22849e-05)  (286, 1.75499e-05)  (289, -4.38748e-06)  (292, 1.75499e-06)\nrow 287: (278, -12.3715)  (281, 4.94993)  (284, -34.6395)  (287, 49.4926)  (290, -12.3715)  (293, 4.94993)\nrow 288: (282, 0.151643)  (285, -0.375775)  (288, 1.50977)  (291, -1.0515)  (294, 0.151643)  (297, -0.375775)\nrow 289: (283, 1.75499e-06)  (286, -4.38748e-06)  (289, 1.75499e-05)  (292, -1.22849e-05)  (295, 1.75499e-06)  (298, -4.38748e-06)\nrow 290: (284, 4.94993)  (287, -12.3715)  (290, 49.4926)  (293, -34.6395)  (296, 4.94993)  (299, -12.3715)\nrow 291: (282, -0.375775)  (285, 0.151643)  (288, -1.0515)  (291, 1.50977)  (294, -0.375775)  (297, 0.151643)\nrow 292: (283, -4.38748e-06)  (286, 1.75499e-06)  (289, -1.22849e-05)  (292, 1.75499e-05)  (295, -4.38748e-06)  (298, 1.75499e-06)\nrow 293: (284, -12.3715)  (287, 4.94993)  (290, -34.6395)  (293, 49.4926)  (296, -12.3715)  (299, 4.94993)\nrow 294: (288, 0.151643)  (291, -0.375775)  (294, 1.50977)  (297, -1.0515)  (300, 0.151643)  (303, -0.375775)\nrow 295: (289, 1.75499e-06)  (292, -4.38748e-06)  (295, 1.75499e-05)  (298, -1.22849e-05)  (301, 1.75499e-06)  (304, -4.38748e-06)\nrow 296: (290, 4.94993)  (293, -12.3715)  (296, 49.4926)  (299, -34.6395)  (302, 4.94993)  (305, -12.3715)\nrow 297: (288, -0.375775)  (291, 0.151643)  (294, -1.0515)  (297, 1.50977)  (300, -0.375775)  (303, 0.151643)\nrow 298: (289, -4.38748e-06)  (292, 1.75499e-06)  (295, -1.22849e-05)  (298, 1.75499e-05)  (301, -4.38748e-06)  (304, 1.75499e-06)\nrow 299: (290, -12.3715)  (293, 4.94993)  (296, -34.6395)  (299, 49.4926)  (302, -12.3715)  (305, 4.94993)\nrow 300: (294, 0.151643)  (297, -0.375775)  (300, 0.754883)  (303, -0.525751)\nrow 301: (295, 1.75499e-06)  (298, -4.38748e-06)  (301, 8.77496e-06)  (304, -6.14247e-06)\nrow 302: (296, 4.94993)  (299, -12.3715)  (302, 24.7463)  (305, -17.3198)\nrow 303: (294, -0.375775)  (297, 0.151643)  (300, -0.525751)  (303, 0.754883)\nrow 304: (295, -4.38748e-06)  (298, 1.75499e-06)  (301, -6.14247e-06)  (304, 8.77496e-06)\nrow 305: (296, -12.3715)  (299, 4.94993)  (302, -17.3198)  (305, 24.7463)",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240313",
                          "updatedAt": "2020-12-24T16:59:31Z",
                          "publishedAt": "2020-12-24T16:51:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "OK, the matrices are very different\nPETSc-3.14.2\nrow 3: (0, -0.0277903)  (3, -0.0978066)  (6, 0.0574629)  (9, 0.0728095)  (12, -0.00132762)  (15, 0.00665239)\nPETSc-3.13.3\nrow 3: (0, 0.153672)  (3, 1.61339)  (6, -1.15202)  (9, -0.380516)  (12, 0.151643)  (15, -0.375775)\nYou launch a code with PETSc-3.14 and lunch another code with PETSc-3.13, and try a side-by-side and step-by-step comparison to figure out where differences come from.\nIf you do not want to do debugging on your own and you could generate this issue using MOOSE, then you could send us an input file.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240443",
                          "updatedAt": "2022-07-01T18:19:49Z",
                          "publishedAt": "2020-12-24T17:37:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "I tried to debug the code by reducing the number of elements to 1, but could not understand where I am going wrong. I can this code privately to you. I need to share source files too in order to run the input file. Please let me know how should I do that? It will be great if we can keep this code private, as this is a requirement from the funding agency.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-241515",
                          "updatedAt": "2022-07-01T18:19:49Z",
                          "publishedAt": "2020-12-25T17:20:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "Please feel free to send the code to my email fdkong.jd@gmail.com. I will not share your code with other people.  Please add a few instructions on how to run your code",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-260363",
                          "updatedAt": "2022-07-01T18:19:49Z",
                          "publishedAt": "2021-01-04T16:02:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Amit,.did you check if the assembled matrices are the same using different moose hashes?",
                  "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-238840",
                  "updatedAt": "2022-06-02T08:42:33Z",
                  "publishedAt": "2020-12-24T01:24:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "No, I haven't check that. Could you please let me know how should I do that?\nJust to clarify, the code is working on my personal computer (on which I did not update MOOSE since Aug 2020). The same code is transferred via Github and it is not converging on INL MacBook (which has a recent version of MOOSE and other required softwares). I found the difference is only in software version in the terminal output.  Please let me know if you need more information.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-238899",
                          "updatedAt": "2022-06-02T08:42:32Z",
                          "publishedAt": "2020-12-24T02:46:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Are you using the same number of threads/processes on both machines?\nThe number of processes can influence the quality of the pre-conditioning.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-238902",
                          "updatedAt": "2022-06-02T08:42:33Z",
                          "publishedAt": "2020-12-24T02:48:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "Yes, I am using the same number of threads/processes on both machines.\nHere is the output from my personal MacBook (it is converging nicely).\namitjain@Amits-MacBook-Pro coupled_transport_model % ./coupled_transport_model-opt -i ./test/tests/Input_SA.i \n\n\n\n*** Warning, This code is deprecated and will be removed in future versions:\nTimeStepper: Using `time_t` and `time_dt` parameter is deprecated. Switch your input file to using `function` parameter.\n  1. Build a new function. If `interpolate` parameter is true use type = PiecewiseLinear. If it was false, use PiecewiseConstant.\n  2. Copy `time_t` parameter into your function and rename it to `x`.\n  3. Copy `time_dt` parameter into your function and rename it to `y`.\n  4. Use the `function` parameter in your time stepper and pass your new function name into it.\n\nStack frames: 14\n0: 0   libmesh_opt.0.dylib                 0x000000010d635575 libMesh::print_trace(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 1157\n1: 1   libmoose-opt.0.dylib                0x000000010c9dda71 void moose::internal::mooseDeprecatedStream<ConsoleStream const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]>(ConsoleStream const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const (&) [111], char const (&) [131], char const (&) [71], char const (&) [72], char const (&) [97]) + 897\n2: 2   libmoose-opt.0.dylib                0x000000010c9d2c4f FunctionDT::FunctionDT(InputParameters const&) + 1407\n3: 3   libmoose-opt.0.dylib                0x000000010c9dccfe std::__1::shared_ptr<MooseObject> moose::internal::buildObj<FunctionDT>(InputParameters const&) + 78\n4: 4   libmoose-opt.0.dylib                0x000000010cd718db Factory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int, bool) + 395\n5: 5   libmoose-opt.0.dylib                0x000000010c4c7cf4 std::__1::shared_ptr<TimeStepper> Factory::create<TimeStepper>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, InputParameters&, unsigned int) + 52\n6: 6   libmoose-opt.0.dylib                0x000000010ca24579 SetupTimeStepperAction::act() + 361\n7: 7   libmoose-opt.0.dylib                0x000000010c9e8dbc ActionWarehouse::executeActionsWithAction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 940\n8: 8   libmoose-opt.0.dylib                0x000000010c9e8898 ActionWarehouse::executeAllActions() + 184\n9: 9   libmoose-opt.0.dylib                0x000000010cdd9c50 MooseApp::runInputFile() + 80\n10: 10  libmoose-opt.0.dylib                0x000000010cddaa03 MooseApp::run() + 83\n11: 11  coupled_transport_model-opt         0x000000010c18cb13 main + 195\n12: 12  libdyld.dylib                       0x00007fff655467fd start + 1\n13: 13  ???                                 0x0000000000000003 0x0 + 3\n\n\nFramework Information:\nMOOSE Version:           git commit 34fb8fad8f on 2020-08-05\nLibMesh Version:         2644d843eaebfb46b577fee10c77fc237338beb3\nPETSc Version:           3.13.3\nSLEPc Version:           3.13.3\nCurrent Time:            Thu Dec 24 08:36:42 2020\nExecutable Timestamp:    Tue Dec 22 20:20:42 2020\n\nParallelism:\n  Num Processors:          1\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          2\n  Spatial Dimension:       2\n  Nodes:                   \n    Total:                 102\n    Local:                 102\n  Elems:                   \n    Total:                 50\n    Local:                 50\n  Num Subdomains:          1\n  Num Partitions:          1\n\nNonlinear System:\n  Num DOFs:                306\n  Num Local DOFs:          306\n  Variables:               { \"C\" \"T\" \"H\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                800\n  Num Local DOFs:          800\n  Variables:               { \"Cb_cem\" \"Cb_conc\" \"Cf_cem\" \"Cf_conc\" \"Ct_cem\" ... \"K\" \"dW_dH\" \"tm\" \"w\" \n                             \"xi\" } \n  Finite Element Types:    \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             FunctionDT\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    hypre boomeramg \n\nLEGACY MODES ENABLED:\n This application uses the legacy material output option: material properties are output only on TIMESTEP_END, not INITIAL. To remove this message, set 'use_legacy_material_output' to false in this application. If there are gold output files that contain material property output for which output occurs on INITIAL, then these will generate diffs due to zero values being stored, and these tests should be re-golded.\n\n\nTime Step 0, time = 0\n\nTime Step 1, time = 25, dt = 25\n 0 Nonlinear |R| = 2.387834e+00\n  Linear solve converged due to CONVERGED_RTOL iterations 3\n 1 Nonlinear |R| = 2.047332e-01\n  Linear solve converged due to CONVERGED_RTOL iterations 3\n 2 Nonlinear |R| = 2.356100e-02\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 3 Nonlinear |R| = 6.678795e-04\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 4 Nonlinear |R| = 3.949838e-07\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 5 Nonlinear |R| = 2.403469e-12\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 5\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  H: 2.402359e-12\n\nTime Step 2, time = 50, dt = 25\n 0 Nonlinear |R| = 1.895535e-02\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 1 Nonlinear |R| = 3.887318e-03\n  Linear solve converged due to CONVERGED_RTOL iterations 5\n 2 Nonlinear |R| = 1.893468e-04\n  Linear solve converged due to CONVERGED_RTOL iterations 5\n 3 Nonlinear |R| = 1.908084e-07\n  Linear solve converged due to CONVERGED_RTOL iterations 5\n 4 Nonlinear |R| = 1.207237e-12\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 4\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  H: 1.207232e-12\n\nTime Step 3, time = 75, dt = 25\n 0 Nonlinear |R| = 8.489076e-03\n  Linear solve converged due to CONVERGED_RTOL iterations 5\n 1 Nonlinear |R| = 5.613266e-04\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 2 Nonlinear |R| = 4.278799e-06\n  Linear solve converged due to CONVERGED_RTOL iterations 4\n 3 Nonlinear |R| = 2.039138e-10\nNonlinear solve converged due to CONVERGED_FNORM_ABS iterations 3\n Solve Converged!\n\nOutlier Variable Residual Norms:\n  H: 2.038935e-10",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240065",
                          "updatedAt": "2022-06-02T08:42:33Z",
                          "publishedAt": "2020-12-24T15:38:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Have you tried to use the Aug. MOOSE on the problem machine? To do this you will need to create a new conda environment and just load \"moose-mpich\", then build PETSc and libMesh using the MOOSE scripts. If you can get the older version working, then this might require a git bisect to see if you can find what change in MOOSE caused the problem.",
                  "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240250",
                  "updatedAt": "2022-06-02T08:43:49Z",
                  "publishedAt": "2020-12-24T16:04:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "I am new to do this type of debugging. I may ask obvious questions.\nWhen I will create a new conda environment, will it cause any problem with existing conda environment. Also, do I need to follow these step (https://mooseframework.inl.gov/getting_started/installation/conda.html) as it is?\nAlso, could you please help me to locate the MOOSE scripts to build PETSc and libmesh? In this process, I am not sure where I am specifying the machine to build an older version of PETSc or libmesh.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-240295",
                          "updatedAt": "2022-06-02T08:43:49Z",
                          "publishedAt": "2020-12-24T16:36:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aeslaughter"
                          },
                          "bodyText": "The new environment will not alter your current environment.\nconda create -n test moose-mpich\nconda activate test\ncd your/moose/location/here\ngit co <the MOOSE version here>\n./scripts/update_and_rebuild_petsc.sh\n./scripts/update_and_rebuild_libmesh.sh\n\nThis information should help: https://mooseframework.inl.gov/getting_started/installation/install_moose.html",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-260291",
                          "updatedAt": "2022-06-02T08:43:49Z",
                          "publishedAt": "2021-01-04T15:36:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KamalnathOSU"
                          },
                          "bodyText": "Hi @jain651 ,\nWere you able to fix the issue. I am facing a similiar problem. I have a input script which works in my laptop but not on Supercomputer. #16712",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-292391",
                          "updatedAt": "2022-06-02T08:44:06Z",
                          "publishedAt": "2021-01-19T05:16:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jain651"
                          },
                          "bodyText": "No, I was not able to fix it. I got involved in some other time critical things as of now. I may share my code to resolve this issue in a while.",
                          "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-294753",
                          "updatedAt": "2022-07-01T01:33:51Z",
                          "publishedAt": "2021-01-20T00:01:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "anilkunwar"
                  },
                  "bodyText": "The detail monitoring of the convergence issue can be performed by putting \" -snes_converged_reason -ksp_monitor\"  after the input command line.\n$ ./../app-opt -i example_input_file.i -snes_converged_reason -ksp_monitor",
                  "url": "https://github.com/idaholab/moose/discussions/16574#discussioncomment-2605333",
                  "updatedAt": "2022-06-02T08:44:44Z",
                  "publishedAt": "2022-04-21T00:36:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "VariableCondensationPreconditioner for ScalarVariable",
          "author": {
            "login": "matthiasneuner"
          },
          "bodyText": "Hi, I am trying to implement an arc length like solver using a ScalarKernel,\nwhich gives me an equation system like the one shown in the FE book by Belytschko et al.:\n\nIn particular for linear constraints, the lower right diagonal block vanishes.\nI was wondering if I can use VariableCondensationPreconditioner for this type of problem?\nSo far, I had no luck using it, using this type of setup:\n[Variables]                                                                                                                                                                        \n     [disp_x][]                                                                                                                                                                       \n     [disp_y][]                                                                                                                                                                       \n     [disp_z][]                                                                                                                                                                                                                                                                                                                           \n     [lambda]                                                                                                                                                                         \n     order = FIRST                                                                                                                                                                    \n       family = SCALAR                                                                                                                                                                \n     []                                                                                                                                                                               \n   [] \n\n[Preconditioning]\n   [vcp]                                                                                                                                                                              \n       type = VCP                                                                                                                                                                     \n       full = true                                                                                                                                                                    \n       lm_variable = 'lambda'                                                                                                                                                         \n       primary_variable = disp_y                                                                                                                                                      \n       preconditioner = 'AMG'                                                                                                                                                         \n       is_lm_coupling_diagonal = false                                                                                                                                                \n       adaptive_condensation =false                                                                                                                                                   \n   []          \n[]   \n\nwhich fails with:\nAt column 0, pivotL() encounters zero diagonal at line 723 in file /data/civet1/conda_builds/conda_envs/next-1a35e4abde/conda-bld/moose-petsc_1649366946306/work/arch-conda-c-opt/externalpackages/git.superlu_dist/SRC/symbfact.c\nIs it possible to use this type of preconditioning for my setup?",
          "url": "https://github.com/idaholab/moose/discussions/20813",
          "updatedAt": "2022-06-29T00:01:00Z",
          "publishedAt": "2022-04-18T22:24:49Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dewenyushu"
                  },
                  "bodyText": "Hi @matthiasneuner:\nI think the VCP should work fine for your problem.\nThe error message you saw about 0 diagonal can potentially be avoided by adding the following two lines in your Executioner block:\n\npetsc_options_iname = ' -pc_factor_shift_type -pc_factor_shift_amount'\npetsc_options_value = '  NONZERO               1e-15'\n\nOne additional thing I am wondering is if the lambda in your problem is defined on a flat or a curved geometry? I recently realized that VCP is having some convergence issues with lambda defined on highly curved geometries due to ambiguity while choosing the primary_variable",
                  "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2588917",
                  "updatedAt": "2022-06-29T00:01:02Z",
                  "publishedAt": "2022-04-18T22:59:14Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "matthiasneuner"
                  },
                  "bodyText": "Hi, thank you very much for the quick response! Unfortunately, this does not resolve the issue :-( .\n\nOne additional thing I am wondering is if the lambda in your problem is defined on a flat or a curved geometry? I recently realized that VCP is having some convergence issues with lambda defined on highly curved geometries due to ambiguity while choosing the primary_variable\n\nI am not completely sure if this applies to my problem: lambda is a scalar variable (Family Scalar), so it is not associated with any node?",
                  "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2588952",
                  "updatedAt": "2022-06-29T00:01:02Z",
                  "publishedAt": "2022-04-18T23:14:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "Oh I did not pay attention to the fact that lambda that does not associate with any node..\nThis is probably not properly handled by the preconditioner so far since VCP tries to associate lambda with a specific displacement DoF that comes from the same node. In your case, it seems like VCP should instead search for all possible DoFs in the system and choose one 'proper' DoF for the condensation, which is not available right now. (I suppose the rule of choosing the associated DoF becomes opaque without knowing more about the underlying physics)",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2593682",
                          "updatedAt": "2022-06-29T00:01:02Z",
                          "publishedAt": "2022-04-19T14:27:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I think ideally the VCP should allow users to choose which dofs to condense. In @matthiasneuner 's case, lambda can be associated with any set of dofs, which depends on where the traction-controlled boundary is. This sounds like something that the tagging system is able to do.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2601451",
                          "updatedAt": "2022-06-29T00:01:02Z",
                          "publishedAt": "2022-04-20T13:47:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "The user already has some flexibilities in terms of choosing which variable to condense and VCP will get the DoFs associated with the variable to do the condensation.\nNote VCP is designed to deal with the saddle point-like Jacobian structure. Therefore, while doing the condensation, in addition to the lambda DoF, VCP needs to know the corresponding coupled DoF to condense with (since the diagonal sub-matrix associated with the lambda DoFs is 0).\nVCP currently relies on searching for the nodal DoFs (for contact problems), but in this case it needs to search for the DoFs following a different rule - maybe something like you said, find the traction-controlled boundary. So changes need to be made where VCP finds the DoFs, if you would like to leverage the current VCP approach.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2603110",
                          "updatedAt": "2022-06-29T00:01:05Z",
                          "publishedAt": "2022-04-20T17:21:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Can you do static condensation, i.e. express the arc-length parameter as an explicit expression composed of the residual, Jacobian, and the arc-length function?",
                  "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2596551",
                  "updatedAt": "2022-06-29T00:01:02Z",
                  "publishedAt": "2022-04-19T21:41:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "matthiasneuner"
                          },
                          "bodyText": "Actually yes! The preferred way would be an explicit parametrization, which avoids the augmented equation system at all. This is what I also use in my personal finite element code. Look at the explanations from Jir\u00e1sek/Bazant 2002:\n\nHowever, this requires solving the original equation system twice, with two different right hand sides (easy for direct solvers, where you can reuse the factorization, so no additional effort).\nHonestly, I have no clue how to do that in MOOSE. If anybody can tell me if this is easy or not (I guess I would need to implement my own FEProblem class?) I would be very grateful.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2596719",
                          "updatedAt": "2022-06-29T00:01:02Z",
                          "publishedAt": "2022-04-19T22:09:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Computing the arc length parameter shouldn't involve a solve. I'll see if I can find my notes.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2596761",
                          "updatedAt": "2022-06-29T00:01:04Z",
                          "publishedAt": "2022-04-19T22:15:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Hi @matthiasneuner , I reviewed my notes and found that indeed you need to solve it twice. The reason why I got the impression that you only need to solve it once is, as you pointed out, we only need to factorize the jacobian once. I think @fdkong can comment on whether/how we can reuse the factorization.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2601310",
                          "updatedAt": "2022-06-29T00:01:03Z",
                          "publishedAt": "2022-04-20T13:33:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "And now I think using some variants of the VariableCondensationPreconditioner might be a better/more general approach.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2601330",
                          "updatedAt": "2022-06-29T00:01:07Z",
                          "publishedAt": "2022-04-20T13:35:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "matthiasneuner"
                          },
                          "bodyText": "I think reusing the factorization is not really attractive, as it restricts the method to direct solvers.\nFor 'larger' structures (>200,000 dof) direct solvers become really disadvantageous compared to iterative ones, so I would prefer a general solution.\nAccordingly, one could\n\nreally solve the equation system twice (not a big issue imho), which requires fundamental changes in MOOSE (modify FEProblem ?)\nor use a proper preconditioner (not sure if possible)\n\nDoes anybody know, if the first option would be reasonable? I would love to try that, but I simply do not know how to start -- MOOSE really became big and all the inheritance makes it difficult to orient myself.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2602499",
                          "updatedAt": "2022-06-29T00:01:07Z",
                          "publishedAt": "2022-04-20T15:52:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dewenyushu"
                          },
                          "bodyText": "(Maybe this is not an option right now, but) solving the system twice with different right hand sides using a direct solver can be done with a series of PETSc function calls, e.g.,\n\n// Get the factorization\nMatGetFactor(...)\nMatLUFactorSymbolic(...)\nMatLUFactorNumeric(...)\n// Call solve twice with different right hand sides\nMatMatSolve(...)",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2603211",
                          "updatedAt": "2022-06-29T00:01:08Z",
                          "publishedAt": "2022-04-20T17:35:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jedbrown"
                          },
                          "bodyText": "If you just call KSPSolve twice, it will reuse any preconditioner setup (factorization). No need to drop to these lower lever routines or specialize -- it'll reuse what can be reused.",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2604495",
                          "updatedAt": "2022-06-29T00:01:09Z",
                          "publishedAt": "2022-04-20T20:42:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jedbrown"
                          },
                          "bodyText": "As @matthiasneuner and I just discussed (and with @friedmud a few weeks ago by email), it's often the case with arc-length continuation that you can't evaluate the Newton residual at a new value of lambda without a predictor solve. For example, when taking the first step, you may want to evaluate at the initial condition (F(u, lambda=0) = 0) and solve a linear system with the column vector \\partial F/\\partial \\lambda to generate an initial guess u to start evaluate the residual F(u, lambda=s) for the augmented (arc-length) Newton solve.\nIncidentally, I've been unhappy with this situation for a different project and started an implementation in PETSc, using TS where the parameter lambda would be passed as \"time\". That's nice because it has solution monitoring and the interface plumbing, but it's perhaps less intuitive because \"time\" is not monotone. If you want to use arc-length continuation within an outer transient problem, it would probably be better for me to implement in SNES. The downside is I have to add some new interfaces, but maybe not so bad. Does the MOOSE community have a preference between TS and SNES for a path-following solver?",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2604570",
                          "updatedAt": "2022-06-29T00:01:09Z",
                          "publishedAt": "2022-04-20T20:55:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "It seems being better to implement in SNES. Now, we do not have a right interface to TS yet even though we have been talking about the TS  interface for a while.   The SNES scheme allows us to add one or more outer-loops naturally and easily  (transient)",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2604623",
                          "updatedAt": "2022-06-29T00:01:15Z",
                          "publishedAt": "2022-04-20T21:05:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "fdkong"
                          },
                          "bodyText": "Of course, if it is too much to implement in SNES, we could revisit the infrastructures again",
                          "url": "https://github.com/idaholab/moose/discussions/20813#discussioncomment-2604635",
                          "updatedAt": "2022-06-29T00:01:10Z",
                          "publishedAt": "2022-04-20T21:07:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Apple Silicon Compatibility Question",
          "author": {
            "login": "AndrewFalkowski"
          },
          "bodyText": "I am in the process of spec'ing a mac for running moose simulations. I am wondering if there are any compatibility issues or caveats with apple silicon (M1) chips that I should understand or be aware of? My simulations are not particularly taxing - primarily 1D coupled diffusion processes. Thanks in advance!",
          "url": "https://github.com/idaholab/moose/discussions/20811",
          "updatedAt": "2022-06-17T07:40:59Z",
          "publishedAt": "2022-04-18T17:41:15Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "I believe this PR may detail the caveats: #20349. For which the results of this PR can be found here: https://civet.inl.gov/job/1017127/\nFor the most part, Apple Silicon is working, for solving finite element problems using MOOSE. Some of the more 'pretty' features are not at the moment. Such as using the MOOSE GUI; Peacock. Peacock requires Qt. Qt at the moment is not officially supported on ARM (ref: https://www.qt.io/blog/qt-on-apple-silicon). And therefore not available in Conda-Forge.",
                  "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2587808",
                  "updatedAt": "2022-06-17T07:41:06Z",
                  "publishedAt": "2022-04-18T19:00:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "If you do wish to use the packages currently available for ARM, they are available so long as you install one of the ARM variants of Miniforge/Mambaforge (we recommend Mambaforge). Just swap out our current 'Getting Started' instructions with a link to an ARM Mambaforge, and that should be all you need to do.",
                          "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2587835",
                          "updatedAt": "2022-06-17T07:41:11Z",
                          "publishedAt": "2022-04-18T19:05:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AndrewFalkowski"
                          },
                          "bodyText": "Gotcha, any advice in terms of minimum RAM or processor requirements?",
                          "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2603587",
                          "updatedAt": "2022-06-17T07:41:10Z",
                          "publishedAt": "2022-04-20T18:05:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For 1D simulations you should be good with the base amount of memory",
                          "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2603884",
                          "updatedAt": "2022-06-17T07:41:10Z",
                          "publishedAt": "2022-04-20T18:54:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "As for processors... concerning the folks within my group; we always go with the most cores possibly available. Not necessarily speed, but core count. As for the Apple Silicon, because there is really only one or two options, this point is moot. M1, M1Pro, M1Max... But I think the Max is more a GPU core count upgrade than CPU one.\nAnyone want to chime in? I could be wrong.",
                          "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2603964",
                          "updatedAt": "2022-06-17T07:41:33Z",
                          "publishedAt": "2022-04-20T19:10:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yeah no need to spend more on GPU so far. MOOSE GPU support is increasing but not there yet.\nAgain for 1D simulations I think you dont need too much on CPU either, base option should do",
                          "url": "https://github.com/idaholab/moose/discussions/20811#discussioncomment-2604041",
                          "updatedAt": "2022-06-17T07:41:34Z",
                          "publishedAt": "2022-04-20T19:22:18Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "TensorMechanicsPlasticOrthotropic documentation",
          "author": {
            "login": "mlesueur"
          },
          "bodyText": "Hi everyone,\nI would like to model the mechanical behaviour of a material with J2 plasticity that has different values of strength in the z direction than in the x/y direction, i.e. orthotropic. From the description, it would seem that the TensorMechanicsPlasticOrthotropic userobject is meant to do exactly this. However, there is no documentation on the object. So I would like to ask what is the model used for the implementation in order to understand the parameters to input.\nThank you in advance!\nMartin",
          "url": "https://github.com/idaholab/moose/discussions/20824",
          "updatedAt": "2022-09-08T21:41:46Z",
          "publishedAt": "2022-04-20T12:35:20Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@alcoae @cpritam @dschwen any ideas on this?",
                  "url": "https://github.com/idaholab/moose/discussions/20824#discussioncomment-2602674",
                  "updatedAt": "2022-09-08T21:41:46Z",
                  "publishedAt": "2022-04-20T16:14:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alcoae"
                          },
                          "bodyText": "It is based on the model proposed by this paper:\nYoon, J. W., Y. Lou, J. Yoon, and M. V. Glazoff, 2014, \u201cAsymmetric yield function\nbased on the stress invariants for pressure sensitive metals,\u201d Int. J. Plast., 56, pp.\n184\u2013202.",
                          "url": "https://github.com/idaholab/moose/discussions/20824#discussioncomment-2603683",
                          "updatedAt": "2022-09-08T21:41:55Z",
                          "publishedAt": "2022-04-20T18:19:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Combine `PresetDisplacement` with `DirichletBC`",
          "author": {
            "login": "AdrienWehrle"
          },
          "bodyText": "Hi everyone,\nin a MASTODON  application for some simple elastic deformation,  I would like to apply both a DirichletBC and a PresetDisplacement (as e.g here) simultaneously on the same side of my domain as the process I am studying is a combination of direct ground shaking and pressure release.\nHowever, my DirichletBC gets disabled as soon as I enable my PresetDisplacement BC, and that even out of the period where the preset displacement is defined.\nI tried to find examples that would guide me but I couldn't find any so far, so I start wondering if such a situation is even possible/makes sense?\nThank you a lot in advance for your thoughts and help!",
          "url": "https://github.com/idaholab/moose/discussions/20574",
          "updatedAt": "2022-09-14T07:24:40Z",
          "publishedAt": "2022-03-16T14:41:03Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cbolisetti any ideas on this?",
                  "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2482121",
                  "updatedAt": "2022-09-14T07:24:41Z",
                  "publishedAt": "2022-03-31T23:43:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cbolisetti"
                  },
                  "bodyText": "HI @AdrienWehrle are you trying to apply a DirichletBC and PresetDisplacement simultaneously to different dofs? In the MASTODON example that you referenced the BCs are applied to different dofs and that should work just fine. I don't think you can apply them simultaneously to the same dof. Also, if you can share your input file, that would be helpful.",
                  "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2487862",
                  "updatedAt": "2022-09-14T07:24:41Z",
                  "publishedAt": "2022-04-01T18:32:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Hi @cbolisetti!\nThank you a lot for your help! I'm trying to constrain the displacement in a given direction with a Dirichlet BC + a variable pressure BC. Both result in a displacement (directly or as a result of, respectively) and I would like to combine them on the same node. In the example I refer to, the only BC for, e.g., accel_x is x_motion, it is not combined with a Dirichlet BC on the same variable. Again, I am not sure this is actually possible/makes sense.\nhttps://github.com/idaholab/mastodon/blob/f11984c9b64481322afff56448d678f19d646cc5/examples/ex14/building_basemat_with_isolators_new.i#L478\nI will share an input file shortly but the idea would be to have the following BCs on one of the sides of a rectangular prism:\n[BCs]\n  [Pressure]\n    [side_pressure]  \n    boundary = side_1\n    function = pressure_release\n    displacements = 'disp_x disp_y disp_z'\n    []\n  []\n\n  [tremor]\n    type = PresetDisplacement\n    boundary = 'side_1'\n    function = disp_BC\n    variable = 'disp_x'\n    beta = 0.25\n    acceleration = 'accel_x'\n    velocity = 'vel_x'\n  []\n[]\n\nwith functions being e.g.:\n[Functions]\n  [pressure_release]\n    type = ParsedFunction\n    value = 'if (t < 0.1, 8829*(1000-z), 8829*(1000-z) - 1*8829*(1000))'   \n  []\n  [disp_BC]\n    type = PiecewiseLinear\n    data_file = Ormsby.csv\n    format = 'columns'\n  []\n[]\n\nThe problem is that I don't obtain a disp_x which is a combination of the two BCs, only side_pressure is applied.\nJust because that might help to understand why I want to do that: the science case behind is to combine a pressure release + tremor (the Ormsby wavelet is used here) on the same side of the domain.\nThank you a lot for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2497860",
                          "updatedAt": "2022-09-14T07:24:41Z",
                          "publishedAt": "2022-04-04T06:29:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "Hi @AdrienWehrle, I see what you mean now, thanks for elaborating. PressureBC is an integrated BC and PresetDisplacement is a dirichlet BC, so we should be able to apply them together. I am not sure why it wouldn't work. Perhaps @bwspenc or @GiudGiud would know?",
                          "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2501793",
                          "updatedAt": "2022-09-14T07:24:42Z",
                          "publishedAt": "2022-04-04T16:13:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cbolisetti"
                          },
                          "bodyText": "Actually, on further thought, I don't applying a pressure and a Dirichlet BC on the same boundary would make a lot of sense. If the DirichletBC is applied, the disp_x is basically prescribed and any other BC on the same boundary and dof will not make any difference. Perhaps that is why Dirichlet BCs are turned off when you apply them together?",
                          "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2501894",
                          "updatedAt": "2022-09-14T07:24:42Z",
                          "publishedAt": "2022-04-04T16:24:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AdrienWehrle"
                          },
                          "bodyText": "Perhaps that is why Dirichlet BCs are turned off when you apply them together?\n\nHi @cbolisetti, that is indeed also my guess... Do you see any other possibility to combine two forcings on the same boundary? Maybe should I combine them in pre-processing and feed the result into a PresetDisplacement... But the tricky part is my pressure release depends on elevation and is therefore not constant across the whole boundary like a PresetDisplacement...\nThank you a lot for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/20574#discussioncomment-2506072",
                          "updatedAt": "2022-09-14T07:24:42Z",
                          "publishedAt": "2022-04-05T07:40:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Where are tensor operations defined?",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "Hi -\nI'm trying to understand more about how MOOSE performs tensor operations but I'm getting lost in all the inheritance stuff going on. Can someone help me find where different methods and operators are defined for tensors? For instance in RankTwoTensor.h, operator overloads are defined in terms of other operator overloads and I can't quite seem to follow the path down to the actual implementation.\nThanks for your help.",
          "url": "https://github.com/idaholab/moose/discussions/20820",
          "updatedAt": "2022-06-11T08:37:10Z",
          "publishedAt": "2022-04-19T17:34:41Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "RankTwoTensor inherits from RealTensorValue, which inherits from TypeTensor. Both of those are in libmesh. The rank three and four tensors do not inherit from anything and all their operators are implemented in the *Implementation.h files.",
                  "url": "https://github.com/idaholab/moose/discussions/20820#discussioncomment-2595189",
                  "updatedAt": "2022-06-11T08:37:10Z",
                  "publishedAt": "2022-04-19T17:43:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Ah, so for instance it looks like RankTwoTensor * RankTwoTensor would bring you here in type_tensor.h?",
                          "url": "https://github.com/idaholab/moose/discussions/20820#discussioncomment-2595359",
                          "updatedAt": "2022-06-11T08:37:28Z",
                          "publishedAt": "2022-04-19T18:13:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "yes",
                          "url": "https://github.com/idaholab/moose/discussions/20820#discussioncomment-2596503",
                          "updatedAt": "2022-06-11T08:37:28Z",
                          "publishedAt": "2022-04-19T21:33:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FunctionDirichletBC not being applied when using CentralDifference time integrator",
          "author": {
            "login": "TheGreatCid"
          },
          "bodyText": "Hi All,\nI am running a simple test in uniaxial compression. I am applying a function dirichlet BC at the right BC and fixing the left boundary.\nWhen using a NewmarkBeta time integrator, the problem behaves as expected.\nHowever, when I apply a CentralDifference time integrator the function BC is no longer applied.\nI would like some insight as to why this is occurring.\nMy input file is pasted below\nThank you in advance!\n[Mesh]\n  [fmg]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 10\n    ny = 10\n    xmax = 1\n    ymax = 1\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n[]\n\n[Kernels]\n  [DynamicTensorMechanics]\n    displacements = 'disp_x disp_y'\n  []\n  [inertia_x]\n    type = InertialForce\n    variable = disp_x\n  []\n  [inertia_y]\n    type = InertialForce\n    variable = disp_y\n  []\n[]\n\n[BCs]\n  [lefx]\n    type = DirichletBC\n    variable = 'disp_x'\n    value = 0\n    boundary = left\n  []\n  [lefty]\n    type = DirichletBC\n    variable = 'disp_y'\n    value = 0\n    boundary = left\n  []\n  [rightx]\n    type = FunctionDirichletBC\n    variable = 'disp_x'\n    function = '-1e-3*t' # -1e3 1/s to 1/micro s\n    boundary = right\n  []\n  [righty]\n    type = DirichletBC\n    variable = disp_y\n    boundary = right\n    value = 0\n\n  []\n[]\n\n\n[Materials]\n  [elasticity_tensor_block]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 203e3\n    poissons_ratio = 0.25\n  []\n  [strain_block]\n    type = ComputeIncrementalSmallStrain\n    displacements = 'disp_x disp_y'\n    implicit = false\n  []\n  [stress_block]\n    type = ComputeFiniteStrainElasticStress\n  []\n  [density]\n    type = GenericConstantMaterial\n    prop_names = density\n    prop_values = 7900\n  []\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 1e2 #1e-4 sec -> micro sec\n  dt = 0.01#1e-7 sec -> micro sec\n  dtmin = 1e-6 #1e-20 sec -> micro sec\n  [TimeIntegrator]\n    type = CentralDifference\n  []\n[]\n\n\n[Outputs]\n  exodus = true\n  csv = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20819",
          "updatedAt": "2022-07-08T00:17:06Z",
          "publishedAt": "2022-04-19T15:06:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAdd preset = false to the FunctionDirichletBC\nsee explanation here\nhttps://mooseframework.inl.gov/moose/source/bcs/DirichletBC.html\nYou may look at the tests in tensor_mechanics/test/tests/central_difference for examples\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20819#discussioncomment-2595605",
                  "updatedAt": "2022-07-08T00:17:23Z",
                  "publishedAt": "2022-04-19T19:05:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "Got it,\nThank you!",
                          "url": "https://github.com/idaholab/moose/discussions/20819#discussioncomment-2595654",
                          "updatedAt": "2022-07-08T00:17:26Z",
                          "publishedAt": "2022-04-19T19:15:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Contact convergence issues with FunctionNeumannBC",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI'm currently working on a simulation where I want to press a wheel onto the road and then let it roll along. Since I have convergence issues I tried to simplify the problem by only using a segment of the wheel to press on the road so the solve is faster. When using a FunctionDirichletBC to press the wheel on the road everything is working fine but as soon as I switch to FunctionNeumannBC by system is not converging at all anymore. What could the reason be for this? My input is:\nwheel.txt",
          "url": "https://github.com/idaholab/moose/discussions/20703",
          "updatedAt": "2022-08-10T05:49:49Z",
          "publishedAt": "2022-04-04T09:57:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "recuero"
                  },
                  "bodyText": "Given your description, I wonder if you could be getting rigid body modes in your solution when using Neumann BCs (If problems with convergence are happening when the bodies come into contact). If this happens to be the case, you could use MOOSE control system to switch between BCs once contact is robustly established.\nOne other thing you could try if the above doesn't work is to lower your contact penalty coefficient in one order of magnitude and assess whether it helps with convergence.\nI have not run your input, these are general ideas.",
                  "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2500166",
                  "updatedAt": "2022-08-10T05:49:49Z",
                  "publishedAt": "2022-04-04T12:56:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Thanks for your answer. I tried both your suggestions but to no success. When I use the TimePeriod-Control to switch from Dirichlet to Neumann the system immediatly loses contact. What am I doing wrong? load_disp is a function establishing contact over time and load_force is just a force that's supposed to hold the contact.\n\n[Controls]\n[loading]\ntype = TimePeriod\nenable_objects = 'BCs::load_disp'\ndisable_objects = 'BCs::load_force'\nstart_time = '0'\nend_time = '1'\n[]\n[]\n\nAdditionally, could you please offer some insight as to why it could be there is no contact detection leading to rigid body movement when using a NeumannBC in the first place? Contact establishes without problems when the simulation is displacement controlled. And I've run tests in MOOSE before where contact detection in force controlled calculations worked too.",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2506806",
                          "updatedAt": "2022-09-21T12:25:47Z",
                          "publishedAt": "2022-04-05T09:39:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "The way I look at this is to assess whether rigid body modes are likely to occur during the solution process. If you have a square block and take a step using displacement control (as opposed to load control), the intermediate solutions stemming from nonlinear iterations are more likely to have the contact interface to remain in contact. The practical behavior of these effects depends on general boundary conditions applied to the problem and the geometry of it.\n\nAnd I've run tests in MOOSE before where contact detection in force controlled calculations worked too.\n\nYeah, that makes sense to me. My experience with this behavior is that is problem-dependent.\nI think the controls should work in general for this type of problem. Some more suggestions: Use pressure/direct load BCs instead of Neumann BCs, make sure the load you switched to in the Controls correspond to the state of deformation you get from the initial displacement conditions, and/or add more boundary conditions to restrict modes of deformation that you are expecting to be restricted by contact interaction.",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2507928",
                          "updatedAt": "2022-09-21T12:25:48Z",
                          "publishedAt": "2022-04-05T12:54:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Changing the NeumannBC to Pressure helped my linear convergence. Sadly my nonlinear convergence is still too bad for the simulation to continue.\nIn order to get the value for the Pressure BC I used a TagVectorAux AuxKernel and a NodalSum Postprocessor to give me the reaction force at the boundary where the DirichletBC is placed and an AreaPostprocessor to give me the Area of said boundary. Is that the correct precedure?\nDo you have any ideas why there could be convergence issues still?",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2515930",
                          "updatedAt": "2022-09-19T23:04:21Z",
                          "publishedAt": "2022-04-06T13:10:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "Sadly my nonlinear convergence is still too bad for the simulation to continue.\n\nOne possible alleviating measure is to reduce the penalty coefficient for contact, which would work if that's the root cause.\n\nIs that the correct procedure?\n\nIf you are not using scaling, I think that procedure will give you an approximate value that should be sufficient to make the BC switch. You could of course double check those values by imposing some Dirichlet BCs, instead of contact, on the proper side of the model/mesh.\n\nDo you have any ideas why there could be convergence issues still?\n\nIf you are still using 1e4 as penalty factor, that may be one possible reason. I forgot to mention the use of the normalize_penalty option in the contact action, which would remove the influence of element area when applying the penalty coefficient. I'd definitely play with that.",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2519303",
                          "updatedAt": "2022-09-19T23:04:22Z",
                          "publishedAt": "2022-04-06T21:24:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "If you are not using scaling, I think that procedure will give you an approximate value that should be sufficient to make the BC switch. You could of course double check those values by imposing some Dirichlet BCs, instead of contact, on the proper side of the model/mesh.\n\nOk thanks.\n\nIf you are still using 1e4 as penalty factor, that may be one possible reason. I forgot to mention the use of the normalize_penalty option in the contact action, which would remove the influence of element area when applying the penalty coefficient. I'd definitely play with that.\n\nReducing the penalty factor doesn't help unluckily. Same goes for the normalize_penalty option.",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2533277",
                          "updatedAt": "2022-09-19T23:04:22Z",
                          "publishedAt": "2022-04-08T19:50:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@Flolaffel any update on this?\nIf this is scaling issues, you should scale your problem way down (to like 1000 dof) and look at the conditioning of your matrix using petsc's svd monitor",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2586506",
                          "updatedAt": "2022-09-19T23:04:23Z",
                          "publishedAt": "2022-04-18T15:18:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "@GiudGiud There is!\nI found out that the problem didn't lie in the setup of the physics but rather the mesh. I had to change the number of elements in tangential direction to an even number so there is a set of nodes at the lowest point of the wheel. Only then contact is detected I assume. Furthermore from the displacement controlled simulations there was a 0.001 mm gap between the wheel and the road so there is no initial penetration. That had to be removed, propably for the same reason.\nI added locking correction for accurate results and a predictor for better convergence. The final, converging input file looks like this:\nwheel_new.txt",
                          "url": "https://github.com/idaholab/moose/discussions/20703#discussioncomment-2594038",
                          "updatedAt": "2022-09-19T23:04:23Z",
                          "publishedAt": "2022-04-19T15:13:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}