{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wOS0xM1QyMToxMDowOC0wNTowMM4AbYGd"
    },
    "edges": [
      {
        "node": {
          "title": "Vector Definition",
          "author": {
            "login": "manikumd22"
          },
          "bodyText": "Hi @GiudGiud\nI am getting an error related to the definition of vector _meanx_weights, previously I defined a lot of vectors like this. For example, one such vector is _fc1_weights, and the code was working fine. Now, I add new vector named _meanx_weights, I start getting an error\nError:\nIn file included from /storage/work/mvk6158/moose_directories/myApp/build/unity_src/materials_Unity.C:7:\n/storage/work/mvk6158/moose_directories/myApp/src/materials/ComputeMultiscaleStress_circle_less.C: In constructor 'ComputeMultiscaleStress_circle_less::ComputeMultiscaleStress_circle_less(const InputParameters&)':\n/storage/work/mvk6158/moose_directories/myApp/src/materials/ComputeMultiscaleStress_circle_less.C:115:5: error: class 'ComputeMultiscaleStress_circle_less' does not have any field named '_meanx_weights'\n     _meanx_weights(getParam<std::vector<Real>>(\"meanx_weights\")),\n     ^~~~~~~~~~~~~~\nmake: *** [/storage/work/mvk6158/moose_directories/moose//framework/build.mk:151: /storage/work/mvk6158/moose_directories/myApp/build/unity_src/materials_Unity.x86_64-pc-linux-gnu.opt.lo] Error 1\n\n.h file\nclass ComputeMultiscaleStress_circle_less : public ComputeLagrangianStressPK2\n{\npublic:\n  static InputParameters validParams();\n  ComputeMultiscaleStress_circle_less(const InputParameters & parameters);\n\nprotected:\n  /// Actual stress/Jacobian update\n  virtual void computeQpPK2Stress();\n\nprotected:\n  const MaterialProperty<Real> & _lambda;\n  const MaterialProperty<Real> & _mu;\n  const MaterialProperty<Real> & _NN_layer_size;\n  MaterialProperty<DenseMatrix<Real>> & _F_column;\n  const std::vector<Real> _fc1_weights;\n  const std::vector<Real> _meanx_weights;\n\n.c File\nInputParameters\nComputeMultiscaleStress_circle_less::validParams()\n{\n  InputParameters params = ComputeLagrangianStressPK2::validParams();\n  params.addParam<MaterialPropertyName>(\"lambda\",\n                                        \"lambda\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n  params.addParam<MaterialPropertyName>(\"mu\",\n                                        \"mu\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");\n  params.addParam<MaterialPropertyName>(\"NN_layer_size\",\n                                        \"NN_layer_size\",\n                                        \"Parameter conjugate to Lame parameter\"\n                                        \" for small deformations\");     \n  params.addRequiredRangeCheckedParam<std::vector<Real>>(\"fc1_weights\",\n                                                         \"fc1_weights_size = 256\",\n                                                         \" for small deformations\");   \n  params.addRequiredRangeCheckedParam<std::vector<Real>>(\"meanx_weights\",\n                                                         \"meanx_weights_size = 3\",\n                                                         \" for small deformations\");       \n\n\n\nComputeMultiscaleStress_circle_less::ComputeMultiscaleStress_circle_less(const InputParameters & parameters)\n  : ComputeLagrangianStressPK2(parameters),\n    _lambda(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"lambda\"))),\n    _mu(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"mu\"))),\n    _NN_layer_size(getMaterialProperty<Real>(getParam<MaterialPropertyName>(\"NN_layer_size\"))),   \n    _F_column(declareProperty<DenseMatrix<Real>>(\"F_column\")),  \n    _fc1_weights(getParam<std::vector<Real>>(\"fc1_weights\")),\n    _meanx_weights(getParam<std::vector<Real>>(\"meanx_weights\")),",
          "url": "https://github.com/idaholab/moose/discussions/28636",
          "updatedAt": "2024-09-16T23:03:04Z",
          "publishedAt": "2024-09-16T20:47:06Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nis this the only error you get? It does not make sense to me\nand could you please paste the entire constructor?",
                  "url": "https://github.com/idaholab/moose/discussions/28636#discussioncomment-10664739",
                  "updatedAt": "2024-09-16T23:03:05Z",
                  "publishedAt": "2024-09-16T23:03:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Can't run my code",
          "author": {
            "login": "Yulongggggg"
          },
          "bodyText": "This is my code, I have tried multiply times but still can't make it run",
          "url": "https://github.com/idaholab/moose/discussions/28630",
          "updatedAt": "2024-09-16T18:23:47Z",
          "publishedAt": "2024-09-16T15:39:19Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nPlease attach a file instead of a screenshot.\nAnd explain your problem you are running into in more details\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10661464",
                  "updatedAt": "2024-09-16T15:53:14Z",
                  "publishedAt": "2024-09-16T15:53:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Yulongggggg"
                          },
                          "bodyText": "code.zip\ncode.zip\nI can get the strain and stress data in the paraview, but I think I have used the command 'generate_output' to get the stress and strain. Could you please tell me my mistakes, I really appreciate it.",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10661788",
                          "updatedAt": "2024-09-16T16:27:03Z",
                          "publishedAt": "2024-09-16T16:27:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yulongggggg"
                          },
                          "bodyText": "sorry, I can't get strain and stress",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10661793",
                          "updatedAt": "2024-09-16T16:27:40Z",
                          "publishedAt": "2024-09-16T16:27:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Could you please upload the inputs to a public github repo? We cant download zip files on our machines\ngenerate_output goes inside the Physics, under QuasiStatic/all",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10661897",
                          "updatedAt": "2024-09-16T16:40:12Z",
                          "publishedAt": "2024-09-16T16:40:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yulongggggg"
                          },
                          "bodyText": "Of course! This is my link:https://github.com/Yulongggggg/1D_Bar_MOOSE .Thank you Guillaume!",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10661973",
                          "updatedAt": "2024-09-16T16:49:46Z",
                          "publishedAt": "2024-09-16T16:49:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There should not be a comma inside generate_output\nyou can try this\n generate_output = 'max_principal_stress min_principal_stress stress_xx stress_xy stress_xz stress_yy stress_yz stress_zz'",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10662030",
                          "updatedAt": "2024-09-16T16:56:16Z",
                          "publishedAt": "2024-09-16T16:56:15Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yulongggggg"
                          },
                          "bodyText": "Hi Guillaume, problem solved! Thank you so much! Btw, I have a question, if I have settled strain and strain in the 'generate_output', do I still have to define the shape function, like\n# [AuxVariables]\n#   [stress_theta]\n#     order = CONSTANT\n#     family = MONOMIAL\n#   []\n#   [strain_theta]\n#     order = CONSTANT\n#     family = MONOMIAL\n#   []\n# []",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10662447",
                          "updatedAt": "2024-09-16T17:42:20Z",
                          "publishedAt": "2024-09-16T17:38:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you dont need to define the order of the auxvariables, the automated material property output does it",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10662482",
                          "updatedAt": "2024-09-16T17:42:56Z",
                          "publishedAt": "2024-09-16T17:42:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yulongggggg"
                          },
                          "bodyText": "Thank you so much, love you guy",
                          "url": "https://github.com/idaholab/moose/discussions/28630#discussioncomment-10662804",
                          "updatedAt": "2024-09-16T18:23:48Z",
                          "publishedAt": "2024-09-16T18:23:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue with Clobberall",
          "author": {
            "login": "sreihani"
          },
          "bodyText": "I guess \"Make clobberall\" does have an impact on upstream of MOOSE setup. I updated MOOSE repository and all pets, libmesh and Wasp. However, after clobbering, I was forced to update wasp again and consequently wasp itself failed! I am not sure what the output of a clobberall is supposed to be, but my understanding is that should not touch those libraries already updated. I am wondering if this step can be skipped, if so any consequences? FYI, I built moose from source.",
          "url": "https://github.com/idaholab/moose/discussions/28625",
          "updatedAt": "2024-09-16T13:03:06Z",
          "publishedAt": "2024-09-15T22:59:39Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe do expect make clobberall to clear local dependencies.\nHowever we don't expect trouble re installing after.\nDid you update before clobbering ?\nCan you use git clean -Xfd to have a deeper clean",
                  "url": "https://github.com/idaholab/moose/discussions/28625#discussioncomment-10654711",
                  "updatedAt": "2024-09-16T01:03:54Z",
                  "publishedAt": "2024-09-16T01:03:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I tend to stay away from clobberall myself. It does things we have programmatically set in a Makefile. And I am not good at reading Makefiles, and understanding what it is I am reading in them.\nBut when I run the following git clean commands I know what it is I am cleaning. And I like to know when things are being cleaned.\ncd moose\ngit clean -xfd   # cleans moose/* (everything that is not a submodule)\ngit submodule foreach --recursive git clean -xfd  # cleans all submodules, and their submodules\nIt was only recently that I was shown the -X being safer than what I've been using for years (-x). I still prefer -x, as I like to end up in a pristine repo (see git clean --help if curious).\nBasically with the above two commands, I can manually build PETSc, libMesh, and WASP and then run git clean -xfd at the root of the moose repo, and not have to worry about destroying PETSc, libMesh, or WASP.",
                          "url": "https://github.com/idaholab/moose/discussions/28625#discussioncomment-10659491",
                          "updatedAt": "2024-09-16T13:04:47Z",
                          "publishedAt": "2024-09-16T13:03:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Pre-splitting a 3D heat structure",
          "author": {
            "login": "TheBEllis"
          },
          "bodyText": "Hi MOOSE team,\nI am looking to do a thermal hydraulics calculation using a fairly large 3D heat structure. I was wondering if there is functionality in MOOSE to pre-split the heat structure mesh? I imagine the whole mesh is needed for heat transfer between the 1D components, making distributed runs fairly difficult. But I just thought I would ask. Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/28600",
          "updatedAt": "2024-09-16T08:52:36Z",
          "publishedAt": "2024-09-11T12:39:10Z",
          "category": {
            "name": "Q&A Modules: Thermal Hydraulics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@joshuahansel",
                  "url": "https://github.com/idaholab/moose/discussions/28600#discussioncomment-10614975",
                  "updatedAt": "2024-09-11T13:55:14Z",
                  "publishedAt": "2024-09-11T13:55:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "I am not sure - I don't know if anyone has tried this in THM. I will try to make a test for this setup soon, just to see IF it works. I'm not sure about how much effort would be required to fix it if it does not work already. What's your timeline?",
                  "url": "https://github.com/idaholab/moose/discussions/28600#discussioncomment-10615117",
                  "updatedAt": "2024-09-11T14:06:28Z",
                  "publishedAt": "2024-09-11T14:06:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheBEllis"
                          },
                          "bodyText": "I don't have a timeline for this at the moment, it was more of a test to see what I could get to work, so no rush. Let me know if you give it a go:)",
                          "url": "https://github.com/idaholab/moose/discussions/28600#discussioncomment-10657036",
                          "updatedAt": "2024-09-16T08:52:37Z",
                          "publishedAt": "2024-09-16T08:52:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue with ComputeFiniteStrain - seems unable to solve problem with zero rotation",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I am solving a simple problem which involves stretching of a membrane in one direction. I get the following error with ADComputeFiniteStrain:\nCannot take square root of a number less than or equal to zero in the calculation of C1 for the Rashid approximation for the rotation tensor. This zero or negative number may occur when elements become heavily distorted.\nNonlinear solve did not converge due to DIVERGED_FNORM_NAN iterations 0\n\nHowever, if I switch to ComputeIncrementalSmallStrain it works fine. I initially thought the issue was with the stretch ratio of 1.1 (i.e 1.1 times it's original size) being to small to be considered Finite Strain, but then when I increased the ratio to 1.8, I got the same error. I am using an incredibly fine mesh, and since the poisson's ratio is close to 0.5, I also applied a volumetric locking correction.\nI am not sure how to solve this issue. There is no rotation in my problem so the rotation tensor should be zero.",
          "url": "https://github.com/idaholab/moose/discussions/27292",
          "updatedAt": "2024-09-16T07:01:25Z",
          "publishedAt": "2024-04-05T13:41:38Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@gambka @jiangwen84",
                  "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9024485",
                  "updatedAt": "2024-04-05T17:35:38Z",
                  "publishedAt": "2024-04-05T17:35:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "ComputeFiniteStrain - seems unable to solve problem with zero rotation\n\nIf \"no rotation\" really was the issue then we wouldn't even be able to compute the initial residual or a body at rest with no loading. I'm pretty sure that's not the issue here. It would help if you added a minimal non-working example here.",
                  "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9024810",
                  "updatedAt": "2024-04-05T18:11:34Z",
                  "publishedAt": "2024-04-05T18:11:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I see. Here's the input file with the issue:\nhttps://github.com/richmondodufisan/purple/blob/main/Cornea_Linear_Elastic/Cornea_Stretch.i",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9047935",
                          "updatedAt": "2024-04-08T15:26:05Z",
                          "publishedAt": "2024-04-08T15:26:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hi @dschwen , were you able to take a look? I haven't been able to figure out the reason for the error",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9286389",
                          "updatedAt": "2024-05-01T15:36:48Z",
                          "publishedAt": "2024-05-01T15:36:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "gambka"
                  },
                  "bodyText": "What order elements are you using? The volumetric_locking_correction is not required for higher (second) order elements. What happens if you set the decomposition_method = EigenSolution instead of the default TaylorExpansion?",
                  "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9025423",
                  "updatedAt": "2024-04-05T19:24:20Z",
                  "publishedAt": "2024-04-05T19:24:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I was using using first order elements. When I switched the decomposition_method, it didn't converge, the non-linear residual stayed at the same order of magnitude. I tried switching to 2nd order elements (and I took out the volumetric_locking_correction) but it still did the same thing. Here is the input file:\nhttps://github.com/richmondodufisan/purple/blob/main/Cornea_Linear_Elastic/Cornea_Stretch.i",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9047923",
                          "updatedAt": "2024-04-08T15:25:28Z",
                          "publishedAt": "2024-04-08T15:25:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hi @gambka , were you able to take a look? I haven't been able to figure out the issue yet",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9286393",
                          "updatedAt": "2024-05-01T15:37:15Z",
                          "publishedAt": "2024-05-01T15:37:14Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "A few suggestions:\n\nRamp up displacement bc with time -- allow the solve to fail and time step to be cut.\nSet preset=false in the bcs.\nTurn off line search.",
                  "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-9301771",
                  "updatedAt": "2024-05-03T04:19:03Z",
                  "publishedAt": "2024-05-03T04:19:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Just came back to this, and setting preset = false worked! thanks! I checked the documentation and it says that determines Whether or not to preset the BC (apply the value before the solve begins). I'm not fully sure what that means, could you explain further? For a steady state solve, don't the BCs have to be prescribed before solving the Kd=F system? Since the system isn't solved by direct inversion and is instead solved iteratively, does this mean on the first iteration no BCs are defined? Would it be good practice to always set preset=false (i.e is one more accurate than the other?)?",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10087899",
                          "updatedAt": "2024-07-18T18:17:37Z",
                          "publishedAt": "2024-07-18T18:16:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "It means whether to just set the degrees of freedom (preset = true, default) for the boundary displacements directly and take them off the system solve\nor whether to solve for them\nthe difference is that setting them directly can destroy the boundary elements, making their volume negative for example",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10088307",
                          "updatedAt": "2024-07-18T19:05:16Z",
                          "publishedAt": "2024-07-18T19:05:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hi @hugary1995 @GiudGiud\nI tried to run a slightly modified version of this problem, i.e I didn't restrain the top and bottom of the plate (they were previously restrained), and pulled it apart horizontally. Basically a more realistic uniaxial tension test. I couldn't get a convergent solution with ComputeFiniteStrain.\nI found this old thread #20285 where @cbolisetti mentioned that MOOSE cannot model nonlinearities yet. Could this be the issue? Since I expect geometric nonlinearities due to the large deformation (material is incompressible and I'm applying stretch values of up to 1.8, so I expect it to deform considerably)",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10160304",
                          "updatedAt": "2024-07-26T13:22:51Z",
                          "publishedAt": "2024-07-26T13:22:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I found this old thread #20285 where @cbolisetti mentioned that MOOSE cannot model nonlinearities yet\n\nthis was likely in a very specific context. We use a nonlinear solve for most things.\n\nI didn't restrain the top and bottom of the plate (they were previously restrained),\n\nThis is likely the problem. Please make sure there is no parasitic translation or rotation mode. If they are in the nullspace, then any solution with any amount of these modes is still a solution. Some solvers dont like that",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10160585",
                          "updatedAt": "2024-07-26T13:50:44Z",
                          "publishedAt": "2024-07-26T13:50:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "First off, the solid mechanics module definitely can handle geometric nonlinearities, that's in a sense all we do... @cbolisetti was meant to say certain types of elements (shell, beam, etc) do not have such support yet, which doesn't seem like what you are using anyways.\nNow back to your question: Theoretically speaking, if your material model satisfies polyconvexity, the material model Jacobian is exact, and the boundary condition increment is small enough within the current step, it's guaranteed to converge. Several things could hinder convergence in practice:\n\nYou are using a custom material model -- that we can't really help, as it's the user's responsibility of using a well formed material model.\nThe custom material model has an inexact Jacobian -- use AD or hand calculate the Jacobian more carefully.\nThe solid mechanics module is giving you inexact Jacobian outside the material model, which is possible with the old system -- using AD should fix that as well.\nBC increment not small enough -- let the solve fail, and MOOSE should reattempt the solve with a small time step size.\nTurning off line search might help with plasticity, nearly incompressible material, etc.\nPreset BC might make things worse, as we discussed before.",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10160612",
                          "updatedAt": "2024-07-26T13:53:54Z",
                          "publishedAt": "2024-07-26T13:53:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I didn't restrain the top and bottom of the plate (they were previously restrained),\n\nThis is likely the problem. Please make sure there is no parasitic translation or rotation mode. If they are in the nullspace, then any solution with any amount of these modes is still a solution. Some solvers dont like that\n\nThat is a very good point as well.",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10160621",
                          "updatedAt": "2024-07-26T13:54:51Z",
                          "publishedAt": "2024-07-26T13:54:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "This is a rough sketch of what I'm expecting:\n\nif I restrain the top and bottom then I won't be able to get this deformed shape. In the input file https://github.com/richmondodufisan/purple/blob/main/Cornea_Linear_Elastic/Cornea_Stretch_Incremental_Load.i\nI set preset = false on all BCs\nI only used MOOSE provided kernels and material models (ADComputeFiniteStrain, ADComputeFiniteStrainElasticStress, etc)\nI ramped up the displacement BC up to 1/100 of the desired value\nThe material is nearly incompressible, so I set line search = none and also set volumetric_locking_correction = true\nI am using a very fine mesh with second order elements (first order also did not converge)\nWhat else can I do to get a convergent solution?",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10160840",
                          "updatedAt": "2024-07-26T14:19:21Z",
                          "publishedAt": "2024-07-26T14:19:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "could you restrain a node on the left center, a node on the center of the right surface, and the very center node\nI think this would not change the solution at all? and it would kill a number of translational and rotational modes. You'd still miss the rotation around the center axis",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10161073",
                          "updatedAt": "2024-07-26T14:34:18Z",
                          "publishedAt": "2024-07-26T14:32:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Instead of pulling on both sides, to model this I completely restrained the left side in x and y, and I'm pulling on the right side (applied displacement on the right side only). So that means restraining the center node also would not work.\nI also toggled restraining the right side in y (vertical) but it made no difference.",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10161121",
                          "updatedAt": "2024-07-26T14:39:33Z",
                          "publishedAt": "2024-07-26T14:37:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I completely restrained the left side in x and y,\n\nso is the thinning of the cylinder possible in those conditions?",
                          "url": "https://github.com/idaholab/moose/discussions/27292#discussioncomment-10161202",
                          "updatedAt": "2024-07-26T14:45:54Z",
                          "publishedAt": "2024-07-26T14:45:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Issue implementing Neo Hookean material model, unable to converge",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "Hi, I am following the instructions to implement a custom hyperelastic model by inheriting from ComputeLagrangianStressPK1.\nI have a material file, ComputeStrainEnergyNeoHookean  where I calculated the strain energy, W. In that material file, I also calculated and declared the derivative of W wrt F, the deformation gradient (which is the PK1 stress), and the second derivative (which is the tangent operator):\n\t_strain_energy(declareProperty<Real>(_base_name + \"strain_energy\")),\n\t_dWdF(declarePropertyDerivative<RankTwoTensor>(_base_name + \"strain_energy\", _base_name + \"deformation_gradient\")),\t// this is the stress\n\t_d2WdF2(declarePropertyDerivative<RankFourTensor>(_base_name + \"strain_energy\", _base_name + \"deformation_gradient\", _base_name + \"deformation_gradient\")) //this is the tangent operator\n\nI have an \"intermediate\" file, which I called NeoHookeanStressIntermediate, to get those derivatives, and declare them as material properties. I did this because I realized that ComputeLagrangianStressBase is derived from Material instead of DerivativeMaterialInterface, so it could not recognize the command getMaterialPropertyDerivative in my custom constructor.\nFinally, I have the file for calculating the stress, i.e ComputeStressNeoHookean. I overrode the method computeQpPK1Stress(), and within that method, I set\n\t_pk1_stress[_qp] = _dWdF_in[_qp];\n\t\n\t_pk1_jacobian[_qp] = _d2WdF2_in[_qp];\n\nwhere dWdF and d2WdF2 are the derivatives I calculated from my Material file, and declared with my 'intermediate' file.\nI then set up my input file, and tried to run the simulation, but I get the error:\nLEGACY MODES ENABLED:\n This application uses the legacy initial residual evaluation behavior. The legacy behavior performs an often times redundant residual evaluation before the solution modifying objects are executed prior to the initial (0th nonlinear iteration) residual evaluation. The new behavior skips that redundant residual evaluation unless the parameter Executioner/use_pre_smo_residual is set to true. To remove this message and enable the new behavior, set the parameter 'use_legacy_initial_residual_evaluation_behavior' to false in *App.C. Some tests that rely on the side effects of the legacy behavior may fail/diff and should be re-golded.\n\n\nPostprocessor Values:\n+----------------+----------------+\n| time           | displace_x     |\n+----------------+----------------+\n|   0.000000e+00 |   0.000000e+00 |\n+----------------+----------------+\n\nPre-SMO residual: 8.24621e-05\n\nPerforming automatic scaling calculation\n\n 0 Nonlinear |R| = 8.246211e-05\n    Linear solve did not converge due to DIVERGED_PC_FAILED iterations 0\n                   PC failed due to FACTOR_NUMERIC_ZEROPIVOT\n  Nonlinear solve did not converge due to DIVERGED_LINE_SEARCH iterations 0\n Solve Did NOT Converge!\nCurrently Executing\n  Finished Solving                                                                       [  5.58 s] [  208 MB]\nAborting as solve did not converge\n\nAs for the legacy residual stuff, I'm guessing it has to do with my app? I created it in 2023 and recently updated MOOSE. How can I update my app?\nBut that said, I'm guessing the FACTOR_NUMERIC_ZEROPIVOT comes from the material properties (stress and tangent operators, maybe?).\nAlso, how can I enforce the incompressibility constraint?\nThe input file is here: https://github.com/richmondodufisan/purple/tree/main/Cornea_Hyperelastic_NeoHookean\nAnd the Material files are in my app's folders",
          "url": "https://github.com/idaholab/moose/discussions/28622",
          "updatedAt": "2024-09-16T07:01:10Z",
          "publishedAt": "2024-09-14T03:54:01Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFor the legacy stuff you can see this message\nhttps://mooseframework.inl.gov/newsletter/2024/2024_04.html\nFor the convergence issues, you can try adding a pc_factor_shift of NONZERO to the petsc options to see if that helps.\nIf it is truly a problem with the material properties, it likely wont be enough.\nYou can get more information on how many DOFs are affected using the svd monitor on a small problem.\nSee this page for more troubleshooting help\nhttps://mooseframework.inl.gov/moose/application_usage/failed_solves.html\nI would also output all the material properties to exodus and first look for those that are zero when they should not be, then try to match them by hand calculations",
                  "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10646353",
                  "updatedAt": "2024-09-14T12:46:50Z",
                  "publishedAt": "2024-09-14T12:46:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Thank you, adding \"-pc_factor_shift_type\" NONZERO worked.\nThe second issue I mentioned was enforcing the incompressibility constraint. Now, instead of just defining\nPK1_stress = dW/dF,\nI want to add the incompressibility constraint with a Lagrange Multiplier by:\nPK1_stress = dW/dF - p*F.inv()\nEDIT: The kernel enforcing the constraint should be (J - 1) * del_p where del_p is the variation of the pressure. But my solution isn't converging.",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10647663",
                          "updatedAt": "2024-09-14T18:33:54Z",
                          "publishedAt": "2024-09-14T16:23:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you are just trying to add a new term to the equation you can definitely do that with an extra kernel.\nI don't know enough to help further on this topic",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10647891",
                          "updatedAt": "2024-09-14T17:08:04Z",
                          "publishedAt": "2024-09-14T17:08:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "No worries, thank you for your help still. How can I export all material properties to exodus?",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10648358",
                          "updatedAt": "2024-09-14T18:37:26Z",
                          "publishedAt": "2024-09-14T18:37:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "In every material block you can specify which properties to output (or use 'all') and which output for them (or use 'all')",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10648608",
                          "updatedAt": "2024-09-14T19:42:14Z",
                          "publishedAt": "2024-09-14T19:42:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I have figured out the problem, but I am not sure how to solve it. For the first implementation I did before enforcing compressibility, I was getting results for any stretch ratio. However, when I set the view type to wireframe, I found that only one element was being stretched.\nThis kind of makes sense as the strain energy was defined as a function of the deformation gradient, and so basically what I assume happened is that the deformation gradient was only non-zero where the boundary condition was applied:\n\nThen I implemented the incompressible case, and now the volume is not allowed to change, so it only converged for very, very small applied displacements:\n\nI'm not sure if I'm not retrieving the deformation gradient properly or if it is something else. I thought maybe I could try using an UpdatedLagrangianFormulation and also running it quasistatically (so it would update as I went along), but for some reason after changing to UpdatedLagrangianStressDivergence it keeps giving an error to add \"use_displaceed_mesh = true\" even though I already added it! It's like it can't see it in my input file for some reason.\nSo I switched back to TotalLagrangian, and still tried to run it quasistatically. But it still didn't deform beyond the first element.\nWas I wrong to define my strain energy based off of \"deformation_gradient\"?\n@hugary1995 @dschwen mentioning you because this thread is a follow up to #27292\nThe mentioned file is test_2.i\nhttps://github.com/richmondodufisan/purple/tree/main/Cornea_Hyperelastic_NeoHookean",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10648862",
                          "updatedAt": "2024-09-14T21:03:50Z",
                          "publishedAt": "2024-09-14T21:01:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "For the incompressible Neo-Hookean model implemented, these are the details below:\nFirst, the potential energy functional is defined as:\n\nwith p, the pressure being an arbitrary lagrangian multiplier to enforce J = 1. When the variation wrt F, the deformation gradient is taken, we get the PK1 stress i.e\n\nWhich is used in the stressdivergence kernel, and then when the variation wrt to p is taken, we get\n(J - 1) * del_p\nwhich is implemented to enforce the incompressibility constraint.\nThe strain energy function was taken from COMSOL documentation for the Neo Hookean model, i.e\n\nwhere:\n\nand I_1 = trace(C_el)",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10648927",
                          "updatedAt": "2024-09-14T21:16:38Z",
                          "publishedAt": "2024-09-14T21:15:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I also implemented it by numerically differentiating myself (instead of getMaterialPropertyDerivative), and I have slightly better results than before, but it still will not converge beyond higher values. I guess I am now sure that getMaterialPropertyDerivative does not calculate the derivative of a scalar wrt a tensor properly.\nThe disp_x and y profiles look reasonable, with the y almost giving the dog bone shape. But I am still not sure where else the convergence issue could be from. I don't know why none of these are not converging beyond a 1% displacement, whether the MOOSE LinearElastic model or my own custom hyperelastic model.\n\n\ntest_3.i\nhttps://github.com/richmondodufisan/purple/tree/main/Cornea_Hyperelastic_NeoHookean",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10649959",
                          "updatedAt": "2024-09-16T06:42:44Z",
                          "publishedAt": "2024-09-15T03:34:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Hi, I found the source of the problem. To get it to converge to the right solution I:\n-Switched to manual numerical differentiation, was able to get at least one converged timestep. Apparently, the getMaterialPropertyDerivative cannot do tensor differentiation.\n-Switched to a penalty method. The PC failed due to FACTOR_NUMERIC_ZEROPIVOT was coming from the extra field (pressure), and there was no boundary condition to set to it. After implementing that that went away.\n-Switched to PK2 formulation (probably didnt do as much to help)\n-Set low floating point values to zero, they were coming up in the deformation gradient and seemed to throw the solution in the opposite direction? (see the last result above). I'm not sure how but I remember this being the last thing I did before it worked.\n\n\nAll this was because I couldn't get a similar problem to converge for MOOSE's linear elastic material for any deformation more than 1%. Maybe using a nearly incompressible poissons ratio on a linear elastic material really is that stiff even with stabilize_strain?",
                          "url": "https://github.com/idaholab/moose/discussions/28622#discussioncomment-10656076",
                          "updatedAt": "2024-09-16T07:00:08Z",
                          "publishedAt": "2024-09-16T06:59:18Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error in Building MOOSE",
          "author": {
            "login": "sreihani"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI am running into an error message, when trying to run the command:\nmake -j 6\nTraceback (most recent call last):\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::dir_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::HITNodeView::dataabi:cxx11 const'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::NodeView::data[abi:cxx11]() const' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::Value::operator[](std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::HITNodeView::to_string[abi:cxx11](bool*) const' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::strip_quotes(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::buildCompletionObject(wasp::DataObject&, std::ostream&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool, int)' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::RPCStringToObject(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, wasp::DataObject&, std::ostream&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::HITNodeView::last_as_string[abi:cxx11](bool*) const' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::DataObject::operator[](std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::HITNodeView::first_child_by_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::buildLocationObject(wasp::DataObject&, std::ostream&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, int, int, int, int)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::HITNodeView::path[abi:cxx11]() const' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::buildDocumentSymbolObject(wasp::DataObject&, std::ostream&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, int, bool, int, int, int, int, int, int, int, int)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::objectToRPCString(wasp::DataObject&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::ostream&)' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::buildTextEditObject(wasp::DataObject&, std::ostream&, int, int, int, int, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::file_exists(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)' /usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to wasp::lsp::buildDiagnosticObject(wasp::DataObject&, std::ostream&, int, int, int, int, int, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&)'\n/usr/apps/sreihani/projects/moose/framework/libmoose-opt.so: undefined reference to `wasp::HITNodeView::child_count_by_name(std::__cxx11::basic_string<char, std::char_traits, std::allocator > const&, unsigned long) const'\ncollect2: error: ld returned 1 exit status\nmake: *** [/usr/apps/sreihani/projects/moose/test/moose_test-opt] Error 1\n(Optional) code in question / simulation log / errors\nNo response\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28531",
          "updatedAt": "2024-09-15T21:56:32Z",
          "publishedAt": "2024-09-03T19:24:29Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis looks like your version of moose and wasp are not in sync.\nAre you using the conda binaries for the dependencies?\nIf so the diagnostics script in moose/scripts should give you more information\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10537022",
                  "updatedAt": "2024-09-03T19:39:11Z",
                  "publishedAt": "2024-09-03T19:39:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sreihani"
                  },
                  "bodyText": "I am using GCC compiler and building the stack manually.",
                  "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10537187",
                  "updatedAt": "2024-09-03T19:56:30Z",
                  "publishedAt": "2024-09-03T19:56:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Can you print out the results of the diagnostic script? Sometimes it shows us some information that proves useful:\ncd /usr/apps/sreihani/projects/moose/scripts\n./diagnostics.sh",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10537325",
                          "updatedAt": "2024-09-03T20:10:40Z",
                          "publishedAt": "2024-09-03T20:10:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sreihani"
                  },
                  "bodyText": "I was able to find a solution for the issue and compiled the moose successfully. I think the order of modules loaded to the local environment is critical as there might be a conflict between some of them that can create Tcl command execution, However, I have added the output of diagnostic script below. If you have any recommendations, please let me know.\n####################################################################################################\nInfluential Environment Variables\nCC=gcc\nCONDA_CHANNEL=https://conda.software.inl.gov/public\nCURL_CA_BUNDLE=\nF95=gfortran\nLD_LIBRARY_PATH=/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib:/usr/local/gcc/alt/9.2.0/lib/gcc/x86_64-pc-linux-gnu/9.2.0:/usr/local/gcc/alt/9.2.0/lib64:/usr/local/gcc/alt/9.2.0/lib:/usr/local/src/git/2.19.0/lib:/usr/local/python/3.9.16/lib\nMODULESHOME=/usr/share/Modules\nMOOSE_JOBS=6\nPATH=/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin:/usr/local/gcc/alt/9.2.0/bin:/usr/local/cmake/3.18.4/bin:/usr/local/src/git/2.19.0/bin:/usr/local/python/3.9.16/bin:/usr/local/dos2unix/7.4.0/bin:/usr/lib64/qt-3.3/bin:/usr/local/perlbrew/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin\nREQUESTS_CA_BUNDLE=\nSSL_CERT_FILE=\n####################################################################################################\nCompiler(s) (CC CXX FC F77 F90):\nwhich $CC; /usr/local/gcc/alt/9.2.0/bin/gcc\n$CC --version; gcc (GCC) 9.2.0\nFAIL: gcc appears not to be an MPI wrapper\nCXX     not set\nFC      not set\nF77     not set\nF90     not set\nFAIL: One or more compiler environment variables not set, or set incorrectly\n####################################################################################################\nPython Sanity Checks\n/usr/bin/env python3 --version; (reporting as: Python 3.9.16) matches\nwhich python3 python;\n/usr/local/python/3.9.16/bin/python3 --version; == Python 3.9.16\nPython 2.7.5\nFAIL: Python 2.7.5\n/usr/bin/python --version (reporting as )) != Python 3.9.16\nThis will likely result in the TestHarness failing. Or WASP/HIT parsing errors.\n####################################################################################################\nPython Modules (TestHarness, run-ability)\nWARNING: missing module(s): jinja2\nEither install the above packages, or perhaps you have yet\nto activate the moose environment: conda activate moose\nMissing 'warning' Python modules may cause miscellaneous runtime issues.\nWARNING: One or more Python issues present.\nchecks FAILED",
                  "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10538053",
                  "updatedAt": "2024-09-03T21:47:54Z",
                  "publishedAt": "2024-09-03T21:47:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "If the above report is based on the final set of module load commands completed... I would say MOOSE will ultimately fail to run properly.\nNot sure if you've already corrected all the issues based on the diagnostic report, but they look simple enough:\nexport CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77\nalias python=python3\n./diagnostics.sh\nSee note below about alias python=python3\nYou can ignore the bit about jinja2 not being available. You'll run into some minor things that might fail. But ultimately not needed.\nLooks like my diagnostic script isn't properly understanding how to parse Python 2.7x. Its a bit difficult to read, but basically the error is thus:\nSome scripts out in the wild which we depend on (like PETSc's configure scripts) may include shebangs that begin with #!/usr/bin/env python instead of the new proper way: #!/usr/bin/env python3. If this is still the case, your system may incur an issue due to the entire MOOSE dependency stack not using the same Python version throughout the build/run process.\nBecause this is an HPC system for which you probably don't have admin rights for, I think the sollution which might work, is to create an alias for python to python3:\nalias python=python3\nThis is only good for the terminal session you are running in (you'll need to perform this each and every time you start a terminal/log in). I am curious if after setting this, does diagnostic.sh pass.",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10557751",
                          "updatedAt": "2024-09-05T13:22:07Z",
                          "publishedAt": "2024-09-05T13:22:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Thanks for posting! I am constantly trying to improve the diagnostic script. It is meant to be a helper tool to figure out what is needed in order to fix the more common issues we answer on Discussions :)\nThe bit about:\nCXX not set\nFC not set\nF77 not set\nF90 not set\n\nFAIL: One or more compiler environment variables not set, or set incorrectly\n\nfor example, I should be including what needs to be done\nF90 not set\n\nFAIL: One or more compiler environment variables not set, or set incorrectly\n\nTo solve this issue, you must set the above variables to point to your MPI wrapper:\n\nexport CC=mpicc CXX=mpicxx\n\netc etc",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10557851",
                          "updatedAt": "2024-09-05T13:29:24Z",
                          "publishedAt": "2024-09-05T13:29:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "Jason,\nHere is the output of diagnostics test after what you suggested. It seems diagnostics.sh passes the compiler section but fails on python. However, python as an alias deploys python3. In my environment PYTHONPATH directs to 3.9.16. Can this help resolve the potential issue you mentioned?\n####################################################################################################\nInfluential Environment Variables\nCC=mpicc\nCONDA_CHANNEL=https://conda.software.inl.gov/public\nCURL_CA_BUNDLE=\nCXX=mpicxx\nF77=mpif77\nF90=mpif90\nF95=gfortran\nFC=mpif90\nLD_LIBRARY_PATH=/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib:/usr/local/gcc/alt/9.2.0/lib/gcc/x86_64-pc-linux-gnu/9.2.0:/usr/local/gcc/alt/9.2.0/lib64:/usr/local/gcc/alt/9.2.0/lib:/usr/local/src/git/2.19.0/lib:/usr/local/python/3.9.16/lib\nMODULESHOME=/usr/share/Modules\nMOOSE_JOBS=6\nPATH=/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin:/usr/local/gcc/alt/9.2.0/bin:/usr/local/cmake/3.18.4/bin:/usr/local/src/git/2.19.0/bin:/usr/local/python/3.9.16/bin:/usr/local/dos2unix/7.4.0/bin:/usr/lib64/qt-3.3/bin:/usr/local/perlbrew/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin\nREQUESTS_CA_BUNDLE=\nSSL_CERT_FILE=\n####################################################################################################\nCompiler(s) (CC CXX FC F77 F90):\nwhich $CC; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpicc\n$CC --version; gcc (GCC) 9.2.0\n$CC -show; gcc -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi\nwhich $CXX; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpicxx\n$CXX --version; g++ (GCC) 9.2.0\n$CXX -show; g++ -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi\nwhich $FC; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif90\n$FC --version; GNU Fortran (GCC) 9.2.0\n$FC -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nwhich $F77; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif77\n$F77 --version; GNU Fortran (GCC) 9.2.0\n$F77 -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nwhich $F90; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif90\n$F90 --version; GNU Fortran (GCC) 9.2.0\n$F90 -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nOK\n####################################################################################################\nPython Sanity Checks\n/usr/bin/env python3 --version; (reporting as: Python 3.9.16) matches\nwhich python3 python;\n/usr/local/python/3.9.16/bin/python3 --version; == Python 3.9.16\nPython 2.7.5\nFAIL: Python 2.7.5\n/usr/bin/python --version (reporting as )) != Python 3.9.16\nThis will likely result in the TestHarness failing. Or WASP/HIT parsing errors.\n####################################################################################################\nPython Modules (TestHarness, run-ability)\nWARNING: missing module(s): jinja2\nEither install the above packages, or perhaps you have yet\nto activate the moose environment: conda activate moose\nMissing 'warning' Python modules may cause miscellaneous runtime issues.\nWARNING: One or more Python issues present.\nchecks FAILED",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10562175",
                          "updatedAt": "2024-09-05T20:50:33Z",
                          "publishedAt": "2024-09-05T20:50:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I was wondering if aliasing would work. I am betting all the logic I have in the diagnostic script is ignoring the fact it should be looking at python3 instead.\nI would ignore this for now, and continue to build the stack. If and when Python 2.7 becomes an issue, we will look into that.",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10562356",
                          "updatedAt": "2024-09-05T21:19:51Z",
                          "publishedAt": "2024-09-05T21:19:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "Jason,\nOur admin created a link for python to make sure that potential issue would not occur. Now diagnostics.sh passes the test,\n####################################################################################################\nInfluential Environment Variables\nCC=mpicc\nCONDA_CHANNEL=https://conda.software.inl.gov/public\nCURL_CA_BUNDLE=\nCXX=mpicxx\nF77=mpif77\nF90=mpif90\nF95=gfortran\nFC=mpif90\nLD_LIBRARY_PATH=/usr/local/src/git/2.19.0/lib:/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib:/usr/local/gcc/alt/9.2.0/lib/gcc/x86_64-pc-linux-gnu/9.2.0:/usr/local/gcc/alt/9.2.0/lib64:/usr/local/gcc/alt/9.2.0/lib:/usr/local/python/3.9.16/lib\nMODULESHOME=/usr/share/Modules\nMOOSE_JOBS=6\nPATH=/usr/local/src/git/2.19.0/bin:/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin:/usr/local/gcc/alt/9.2.0/bin:/usr/local/cmake/3.18.4/bin:/usr/local/python/3.9.16/bin:/usr/local/dos2unix/7.4.0/bin:/usr/lib64/qt-3.3/bin:/usr/local/perlbrew/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin\nREQUESTS_CA_BUNDLE=\nSSL_CERT_FILE=\n####################################################################################################\nCompiler(s) (CC CXX FC F77 F90):\nwhich $CC; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpicc\n$CC --version; gcc (GCC) 9.2.0\n$CC -show; gcc -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi\nwhich $CXX; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpicxx\n$CXX --version; g++ (GCC) 9.2.0\n$CXX -show; g++ -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi\nwhich $FC; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif90\n$FC --version; GNU Fortran (GCC) 9.2.0\n$FC -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nwhich $F77; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif77\n$F77 --version; GNU Fortran (GCC) 9.2.0\n$F77 -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nwhich $F90; /usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/bin/mpif90\n$F90 --version; GNU Fortran (GCC) 9.2.0\n$F90 -show; gfortran -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/include -pthread -I/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -L/usr/lib64 -Wl,-rpath -Wl,/usr/lib64 -Wl,-rpath -Wl,/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -Wl,--enable-new-dtags -L/usr/local/mpi/rh7/openmpi/4.1.1/gcc/9.2.0/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi\nOK\n####################################################################################################\nPython Sanity Checks\n/usr/bin/env python3 --version; (reporting as: Python 3.9.16) matches\nwhich python3 python;\n/usr/local/python/3.9.16/bin/python3 --version; == Python 3.9.16\n/usr/local/python/3.9.16/bin/python --version; == Python 3.9.16\nOK\n####################################################################################################\nPython Modules (TestHarness, run-ability)\nWARNING: missing module(s): jinja2\nEither install the above packages, or perhaps you have yet\nto activate the moose environment: conda activate moose\nMissing 'warning' Python modules may cause miscellaneous runtime issues.\nWARNING: One or more Python issues present.\nchecks PASSED",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10570025",
                          "updatedAt": "2024-09-06T14:23:14Z",
                          "publishedAt": "2024-09-06T14:23:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "sreihani"
                  },
                  "bodyText": "I compiled the moose and did a ./run_tests -j  40. Here is the output:\nRan 4227 tests in 329.0 seconds. Average test time 1.6 seconds, maximum test time 124.9 seconds.\n^[[1m^[[32m4215 passed^[[0m, ^[[1m281 skipped^[[0m, ^[[1m0 pending^[[0m, ^[[1m^[[31m12 FAILED^[[0m\nThere are 12 FAILED with the following errors:\nmisc/hit_cli.find/parameter_exists ^[[90m...........................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.find/parameter_does_not_exist ^[[90m...................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.find/positive_pattern ^[[90m...........................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.find/negative_pattern ^[[90m...........................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.find/additional_pattern ^[[90m.........................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.find/additional_pattern_negative ^[[90m................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.merge ^[[90m...........................................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.diff/vanilla ^[[90m....................................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.diff/color ^[[90m......................................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.diff/verbose ^[[90m....................................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.diff/verbose_color ^[[90m..............................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nmisc/hit_cli.diff/common ^[[90m.....................................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\nCould you let me know if the FAILED cases would be detrimental to the whole processes in moose?",
                  "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10563875",
                  "updatedAt": "2024-09-06T02:34:40Z",
                  "publishedAt": "2024-09-06T02:34:39Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "these are all tied to hit, the parser\nso it s safe to say it wont affect results",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10564228",
                          "updatedAt": "2024-09-06T03:29:37Z",
                          "publishedAt": "2024-09-06T03:29:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "Thanks.\nI am wondering if there is any other tool to open exit files of moose other than VSCode recommended on the web?",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10570054",
                          "updatedAt": "2024-09-06T14:25:13Z",
                          "publishedAt": "2024-09-06T14:25:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "input files can be opened with any text editor\noutput files, it depends on the type. We use mostly paraview for exodus and excel or paraview for CSVs",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10570796",
                          "updatedAt": "2024-09-06T15:34:08Z",
                          "publishedAt": "2024-09-06T15:34:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "Sure, I know that. I was referring to this page: https://mooseframework.inl.gov/help/development/VSCode.html\nIn the videos of MOOSE workshops, VSCode is recommended for visualizing the output binary files.",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10570974",
                          "updatedAt": "2024-09-06T15:49:46Z",
                          "publishedAt": "2024-09-06T15:49:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "we dont use binary for output, expect for some versions of checkpoints",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10571121",
                          "updatedAt": "2024-09-06T16:01:43Z",
                          "publishedAt": "2024-09-06T16:01:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "For a tutorial test, moose generated two files (step1_out.e & step1_in.e). vi editor shows both have binary content. Am I correct? Also, does output files have a specific format & name convention?",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10571441",
                          "updatedAt": "2024-09-06T16:34:42Z",
                          "publishedAt": "2024-09-06T16:34:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "these are exodus files, you can open them with paraview",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10571583",
                          "updatedAt": "2024-09-06T16:48:46Z",
                          "publishedAt": "2024-09-06T16:48:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I imagine so, but I can't tell for certain. If you would scroll back a ways in the terminal that produces this error, you will see details for each error.\nYou can also run just one of these tests:\n./run_tests --re=misc/hit_cli.find/parameter_does_not_exist\nAnd copy/paste the error. There are two parts to every erring test. This page describes it best: https://mooseframework.inl.gov/help/troubleshooting.html#failingtests",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10591336",
                          "updatedAt": "2024-09-09T13:41:44Z",
                          "publishedAt": "2024-09-09T13:40:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sreihani"
                          },
                          "bodyText": "Here is the output for the command:\n./run_tests --re=misc/hit_cli.find/parameter_does_not_exist\n\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0mWorking Directory: /usr/apps/SoTeRiA/sreihani/projects/moose/test/tests/misc/hit_cli\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0mRunning command: ./hit_wrapper.py gold/parameter_does_not_exist find -v Kernels/\\*/variable input1.i input2.i\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0mFailed to locate hit executable.\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0m\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0m################################################################################\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0mTester failed, reason: CODE 1\n^[[31mmisc/hit_cli.find/parameter_does_not_exist: ^[[0m\nmisc/hit_cli.find/parameter_does_not_exist ^[[90m...................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\n\n\nFinal Test Results:\n--------------------------------------------------------------------------------------------------------------\nmisc/hit_cli.find/parameter_does_not_exist ^[[90m...................................................^[[0m ^[[31mFAILED (CODE 1)^[[0m\n--------------------------------------------------------------------------------------------------------------\nRan 1 tests in 4.1 seconds. Average test time 0.0 seconds, maximum test time 0.0 seconds.\n^[[1m0 passed^[[0m, ^[[1m0 skipped^[[0m, ^[[1m0 pending^[[0m, ^[[1m^[[31m1 FAILED^[[0m",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10594248",
                          "updatedAt": "2024-09-09T19:23:46Z",
                          "publishedAt": "2024-09-09T17:49:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Thats weird to me... I would imagine \"hit\" missing would result in a great many more tests failing... @GiudGiud  any ideas?",
                          "url": "https://github.com/idaholab/moose/discussions/28531#discussioncomment-10594944",
                          "updatedAt": "2024-09-09T19:24:34Z",
                          "publishedAt": "2024-09-09T19:24:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Initial conditions with TimedSubdomainModifier",
          "author": {
            "login": "j-wijnen"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi, I am new to MOOSE, but run into some unexpected results.\nMy problem is related to a welding simulation, demonstrated with a simpler problem here. I have divided my domain into two subdomains (left and right with IDs 0 and 2 ). The right subdomain is not active at the start of the simulation. I am increasing the temperature on the boundary between the two subdomains to 1000. Next, I want to activate the right block with an initial value of 1000 and deactivate the boundary condition, so that the heat can flow from the right domain to the left domain, i.e. the temperature field should even out. I activate the right region by using a TimedSubdomainModifier to move the domain to the block with ID 1, which has an initial condition of 1000, and deactivate the boundary condition (see input file at bottom post).\nHowever, in this case, the initial condition does not seem to be applied. This is the last increment before the activation of the right region (at t=10) :\n\nThis is the increment after the activation:\n\nFurthermore, it seems like some boundary condition is now applied to the right side, as this is at a later time increment:\n\nThe behavior is different, but still not as expected, if I set the execute_on parameter of the TimedSubdomainModifier to TIMESTEP_END. In this case the initial condition is applied, but the temperature in that region does not evolve. This is the result at a later time increment:\n\nAdditionally the small cold region, which is just in the left domain, is introduced.\nAny ideas what I am doing wrong? Or is going wrong in MOOSE?\nHere is my input file:\n[Mesh]\n  [generated]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 40\n    ny = 10\n    xmax = 40\n    ymax = 10\n  []\n  [subdomains]\n    type = ParsedSubdomainMeshGenerator\n    input = generated\n    combinatorial_geometry = 'x > 20.0'\n    block_id = 2\n  []\n  [middle_sideset]\n    type = SideSetsBetweenSubdomainsGenerator\n    input = subdomains\n    new_boundary = 'middle'\n    primary_block = 0\n    paired_block = 2\n  []\n\n  add_subdomain_ids = 1\n[]\n\n[Variables]\n  [temp]\n    order = first\n    family = LAGRANGE\n    block = '0 1'\n  []\n[]\n\n[ICs]\n    [base_ic]\n        type = ConstantIC\n        variable = temp\n        value = 20\n        block = 0\n    []\n    [weld_ic]\n        type = ConstantIC\n        variable = temp\n        value = 1000\n        block = 1\n    []\n[]\n\n[Kernels]\n  [heat_conduction]\n      type = HeatConduction\n      variable = temp\n      block = '0 1'\n  []\n  [heat_timederivative]\n      type = HeatConductionTimeDerivative\n      variable = temp\n      block = '0 1'\n  []\n[]\n\n[Materials]\n    [thermal]\n        type = HeatConductionMaterial\n        thermal_conductivity = 0.048\n        specific_heat = 0.45\n    []\n    [density]\n        type = GenericConstantMaterial\n        prop_names = 'density'\n        prop_values = 0.0078\n    []\n[]\n\n[BCs]\n  active = 'temp_middle'\n  [temp_middle]\n    type = FunctionDirichletBC\n    variable = temp\n    boundary = 'middle'\n    function = '20 + 980 * t/10'\n  []\n[]\n\n[Controls]\n    active = 'disableheating'\n    [disableheating]\n      type = ConditionalFunctionEnableControl\n      conditional_function = 't >= 10'\n      disable_objects = 'BCs::temp_middle'\n      enable_objects = ''\n      execute_on = 'INITIAL TIMESTEP_BEGIN'\n    []\n[]\n\n[UserObjects]\n    active = 'insert'\n   [insert]\n       type = 'TimedSubdomainModifier'\n       times =       '10'\n       blocks_from = '2'\n       blocks_to =   '1'\n       execute_on = 'INITIAL TIMESTEP_BEGIN'\n       apply_initial_conditions = true\n   []\n[]\n\n[Problem]\n  type = FEProblem\n  kernel_coverage_check = false\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 50\n  dt = 1\n  solve_type = \"NEWTON\"\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  l_tol = 1.0e-6\n  nl_rel_tol = 1.0e-4\n  nl_abs_tol = 1.0e-4\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28616",
          "updatedAt": "2024-09-14T09:54:54Z",
          "publishedAt": "2024-09-13T16:07:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWe actually just changed (wednesday night, released mid Thursday) the behavior of the subdomain modifiers with regards to initial conditions. You probably should update so we are looking at the same simulations.\nThe initial condition should be applied properly now.\nThe default bounday condition is 0 flux. Since the BC was applied on the middle and is then turned off, I think that's what you should see",
                  "url": "https://github.com/idaholab/moose/discussions/28616#discussioncomment-10640821",
                  "updatedAt": "2024-09-13T18:04:13Z",
                  "publishedAt": "2024-09-13T18:04:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "j-wijnen"
                          },
                          "bodyText": "Thank you! Indeed it is behaving as expected now.",
                          "url": "https://github.com/idaholab/moose/discussions/28616#discussioncomment-10645271",
                          "updatedAt": "2024-09-14T09:54:48Z",
                          "publishedAt": "2024-09-14T09:54:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error with Make",
          "author": {
            "login": "jfs5687"
          },
          "bodyText": "Hi @GiudGiud\nI am having an error while trying to use the make command to compile MOOSE. The error that I am getting is:\nMakefile:55: jfs5687/work/moose_directories/moose//framework/app.mk: No such file or directory\nmake: *** No rule to make target 'jfs5687/work/moose_directories/moose//framework/app.mk'.  Stop.\n\nI am unsure how to proceed. Any help is appreciated.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/28621",
          "updatedAt": "2024-09-24T20:48:26Z",
          "publishedAt": "2024-09-14T02:41:31Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs the moose folder under moose_directories full? Did it clone properly? Do you have access permissions to it?\nIt seems it's missing a file. Can you navigate there and find app.mk?",
                  "url": "https://github.com/idaholab/moose/discussions/28621#discussioncomment-10643798",
                  "updatedAt": "2024-09-14T03:17:45Z",
                  "publishedAt": "2024-09-14T03:17:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jfs5687"
                          },
                          "bodyText": "Yes, I can navigate to find app.mk in the moose folder within moose_directories. I believe that it cloned properly. The make command was running at one point with a different error, but it has since stopped and only given me the output I posted.",
                          "url": "https://github.com/idaholab/moose/discussions/28621#discussioncomment-10643826",
                          "updatedAt": "2024-09-14T03:25:34Z",
                          "publishedAt": "2024-09-14T03:25:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "weird. did you modify the Makefile? did you set MOOSE_DIR or another relevant environment vriable?",
                          "url": "https://github.com/idaholab/moose/discussions/28621#discussioncomment-10643875",
                          "updatedAt": "2024-09-14T03:39:08Z",
                          "publishedAt": "2024-09-14T03:39:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jfs5687"
                          },
                          "bodyText": "I did not modify the Makefile. I do not think that I set any environment variable.",
                          "url": "https://github.com/idaholab/moose/discussions/28621#discussioncomment-10643883",
                          "updatedAt": "2024-09-14T03:42:23Z",
                          "publishedAt": "2024-09-14T03:42:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "maybe save all your work with git commit in both myApp and moose, then use git clean -Xfd to clean those two repos and try a clean build",
                          "url": "https://github.com/idaholab/moose/discussions/28621#discussioncomment-10643885",
                          "updatedAt": "2024-09-14T03:42:45Z",
                          "publishedAt": "2024-09-14T03:42:45Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "loop over nodal variable values of current element in computeQpProperties()",
          "author": {
            "login": "bylore"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nhi there, i have a material property whose local value need to be modified according to the surrounding nodal variable value. In one element, before i determine the value of this material property at the quadpoint, i should loop over all the node of the current element and check if the nodal variable value meet the requirement. But i don't know how to implement this, could you give me some advice? Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/28613",
          "updatedAt": "2024-09-14T02:10:08Z",
          "publishedAt": "2024-09-13T07:58:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nFrom the current element attribute, you can get the list of nodes.\nThen you can use either getNodalValue or the NodalArg (see MooseFunctor.h) to get the nodal values of the variable.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28613#discussioncomment-10637885",
                  "updatedAt": "2024-09-13T13:08:49Z",
                  "publishedAt": "2024-09-13T13:08:48Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "bylore"
                          },
                          "bodyText": "It works. Thank you\uff01",
                          "url": "https://github.com/idaholab/moose/discussions/28613#discussioncomment-10643567",
                          "updatedAt": "2024-09-14T02:10:09Z",
                          "publishedAt": "2024-09-14T02:10:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}