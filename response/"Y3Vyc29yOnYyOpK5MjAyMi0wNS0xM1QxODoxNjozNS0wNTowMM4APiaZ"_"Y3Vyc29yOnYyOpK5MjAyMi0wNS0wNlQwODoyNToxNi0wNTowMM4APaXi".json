{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNS0wNlQwODoyNToxNi0wNTowMM4APaXi"
    },
    "edges": [
      {
        "node": {
          "title": "ACInterfaceKobayashi, ACInterfaceKobayashi2 and InterfaceOrientationMaterial.",
          "author": {
            "login": "KangChenRui"
          },
          "bodyText": "Hi, everyone\nI had a question when use the ACInterfaceKobayashi, ACInterfaceKobayashi2 and InterfaceOrientationMaterial.\nthis is my input file:\ninput.txt\nThe error is as follows:\n\nI haven't found a solution yet, Thanks for your help.",
          "url": "https://github.com/idaholab/moose/discussions/20886",
          "updatedAt": "2022-06-09T07:08:42Z",
          "publishedAt": "2022-04-27T09:53:26Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt seems multiple objects are declaring the same material properties.\nThey are probably not meant to be used together. Please read their documentation and look at the test files for each object to understand which ones should be combined.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20886#discussioncomment-2647497",
                  "updatedAt": "2022-06-09T07:08:55Z",
                  "publishedAt": "2022-04-27T15:05:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Just to elaborate, you have multiple instances of the InterfaceOrientationMaterial.\n[Materials]\n  [./material]\n    type = InterfaceOrientationMaterial\n    op = eta1\nmode_number = 6\n  [../]\n  [./material_2]\n    type = InterfaceOrientationMaterial\n\n    op = eta2\nmode_number = 6\n  [../]\n\nEach instantiation is trying to create multiple material properties, including eps, deps, and so forth. You cannot have multiple material properties with the same so that is why you are getting the error.  If you want to use a multi-order parameter solidification model, you are going to need to use or possibly create a different material to do the interfacial energy anisotropy.",
                  "url": "https://github.com/idaholab/moose/discussions/20886#discussioncomment-2689590",
                  "updatedAt": "2022-06-09T07:08:56Z",
                  "publishedAt": "2022-05-04T19:48:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KangChenRui"
                          },
                          "bodyText": "Hi,Larry\nAccording to your suggestion, I created kenerl for each order parameter.\neta1 has three kenerls, ACInterfaceKobayashi1, ACInterfaceKobayashi2 and InterfaceOrientationMaterial\neta2 has three kenerls, ACInterfaceKobayashi1_1, ACInterfaceKobayashi2_1 and InterfaceOrientationMaterial_1\nIt seems that this is troublesome. Do you have any better suggestions?\nThank you for your reply\nChen Rui",
                          "url": "https://github.com/idaholab/moose/discussions/20886#discussioncomment-2690595",
                          "updatedAt": "2022-06-09T07:09:33Z",
                          "publishedAt": "2022-05-05T00:26:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "Are you solving for a multiphase system? If so, you may consider using InterfaceOrientationMultiphaseMaterial. You can specify different property names for kappa and its derivatives there. If this does not work for you, you can follow these multiphase examples to modify the Kobayashi kernels and associated interface material. You don't need to duplicate codes, you can just make the property names an input parameter.",
                          "url": "https://github.com/idaholab/moose/discussions/20886#discussioncomment-2740120",
                          "updatedAt": "2022-06-09T07:09:33Z",
                          "publishedAt": "2022-05-12T18:17:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "SudiptaBiswas"
                          },
                          "bodyText": "We have some multiphase examples here if you are interested. https://iopscience.iop.org/article/10.1088/1361-651X/ac46dc",
                          "url": "https://github.com/idaholab/moose/discussions/20886#discussioncomment-2740154",
                          "updatedAt": "2022-06-09T07:09:33Z",
                          "publishedAt": "2022-05-12T18:22:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Modifications to computeValue() in ArrayRankTwoAux.C",
          "author": {
            "login": "abarun22"
          },
          "bodyText": "I am working towards implementing the array auxvariables and auxkernels as suggested in 20213. Looks like the function computeValue() #has to be maintained in a standard as-is manner, as any modifications to this function signature is resulting in a compiler error. Earlier i was trying to force this function to return a 2D vector (of size [48,6] where i store the elemental stresses and other identifiers needed for transfer class) instead of a scalar Real and that backfired me. I wanted to ask here how important is this function when we migrate to array auxkernels and whether it is a good idea to code that up in an another function leaving the computeValue to return just a namesake scalar value.",
          "url": "https://github.com/idaholab/moose/discussions/20957",
          "updatedAt": "2022-07-25T09:39:51Z",
          "publishedAt": "2022-05-05T10:51:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo what is ArrayRankTwoAux inheriting from?\nYou want to make sure to inherit from an array auxkernel, as only those have a computeValue that returns an array.\nA good example is the FunctionArrayAux, with the computeValue below:\nRealEigenVector\nFunctionArrayAux::computeValue()\n{\n  RealEigenVector v(_var.count());\n  const Point & p = isNodal() ? *_current_node : _q_point[_qp];\n  for (unsigned int i = 0; i < _var.count(); ++i)\n    v(i) = _funcs[i]->value(_t, p);\n  return v;\n}",
                  "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2694313",
                  "updatedAt": "2022-07-25T09:39:51Z",
                  "publishedAt": "2022-05-05T14:34:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Guillaume,\nThe new ArrayRankTwoAux i was working on earlier was set to inherit from NodalPatchRecovery (as was the case with RankTwoAux). As you said this will need inheritance from array AuxKernel to return array variables through computeValue(). I can see that my computeValue() in ArrayRankTwoAux now works OK with returning a RealEigenVector (which is a 1D vector equivalent). May i ask that if there is anything we could do here to work with a 2D vector (i intend to do a [48,6] return)? I wish that my computeValue() template looks like below.\ntemplate <bool is_ad> std::vector<std::vector<Real>> ArrayRankTwoAuxTempl<is_ad>::computeValue()\n\nWhat modifications are needed here to make this to work. For your reference here is my array AuxVariable/AuxKernel block in the input file.\n[AuxVariables]\n  [./stress_arav]\n    order = CONSTANT\n    family = MONOMIAL\n    components=48\n  [../]\n[]\n\n[AuxKernels]\n  [./stress_arak]\n    type = ArrayRankTwoAux\n    rank_two_tensor = stress\n    variable = stress_arav\n  [../]\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2695513",
                          "updatedAt": "2022-07-25T09:40:17Z",
                          "publishedAt": "2022-05-05T17:04:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not really. a [48,6] return would mean you are filling some sort of 2D array variable. We dont have that currently in MOOSE.\nArrayVariable just means 1D array of arbitrary size. Vector variable means 1D vector of size LIBMESH_dimension.\nNodalPatchRecovery inherits from AuxKernel not arrayAuxKernel.\nI think you will need to create an array version of this class to make it work",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2696563",
                          "updatedAt": "2022-07-25T09:40:59Z",
                          "publishedAt": "2022-05-05T19:56:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Hi Guillaume,\nI tried creating an ArrayAuxKernel that can handle 2D arrays, but the modifications go very deep in to low level MooseVariable classes and furthermore they are scattered everywhere, making it hard to tune the code for such cases. I start with the following set of definitions in AuxKernel.h and tried to connect this with various related entities down the line.\ntypedef std::vector<std::vector<Real>> TwoDRealVector;\ntypedef AuxKernelTempl<TwoDRealVector> Array2DAuxKernel;\n\nThis is an extremely complicated task and will need several layers of modifications before we get this to work. A simple workaround will be to use the existing ArrayKernel that is type defined for AuxKernelTempl<RealEigenVector> which operates on 1D array's. With this approach i can condense my 2D array in to a 1D array say a[m][n]=a[m*n] which has already been tested and found working. Wanted to know whether you are OK with this idea or still want to dig deep in to the functions to find compatibility for a 2D array?\nKind regards,\nArun",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2729753",
                          "updatedAt": "2022-07-25T09:40:59Z",
                          "publishedAt": "2022-05-11T12:13:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Also the components parameter in AuxVariables block will not allow creation of 2D arrays in AuxKernels as it may induce a seg fault. May be this will need some tuning as well for e.g an additional parameter to fix the column size for the array.",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2729991",
                          "updatedAt": "2022-09-13T01:17:17Z",
                          "publishedAt": "2022-05-11T12:47:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would really avoid to modify any core moose code. Try to map to the 1D array at the computeValue level (the one inherited from an ArrayAuxKernel) and no earlier.\nWe dont support and currently do not have interest (that I know of, but I m sure someone does) in tensor/matrix variables.",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2734917",
                          "updatedAt": "2022-09-13T01:17:17Z",
                          "publishedAt": "2022-05-12T05:04:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "abarun22"
                          },
                          "bodyText": "Yes, i think AuxKernels based on 1D array seems to be the way moving forward.",
                          "url": "https://github.com/idaholab/moose/discussions/20957#discussioncomment-2736329",
                          "updatedAt": "2023-02-09T15:45:45Z",
                          "publishedAt": "2022-05-12T09:20:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow - Capillary pressure formulation for carbon fibre resin injection.",
          "author": {
            "login": "s-dunnim"
          },
          "bodyText": "I am using the porous flow module to model resin injection, at around 1 bar, into a dry carbon fibre skeleton, which is under vacuum. I am using a single phase unsaturated model for this, as there is only a negligible amount of air.\n(P = porepressure, Pc = capillary pressure, Pi = injection pressure, S = saturation)\nI am having issues with the capillary pressure formulation; in order to achieve S = 0 with any of the available Pc relationships, I have to use an initial condition P <= -Pc_max (as Pc = -P). Having negative P is clearly not realistic in a system where P is always >= 0 (P = 0 in the vacuum, 0 < P <= Pi in the resin).\n\nIs using capillary pressure to calculate saturation the right approach for this scenario? Most of the domain except the flow front should either be at 0 or 1 saturation; in both cases the notion of capillary pressure seems meaningless.\nIf so, how can I overcome the issues described with the Pc and S relationship? I have considered subtracting Pc_max from P everywhere, as it is only really the pressure gradient driving the flow (so, for example, in the vacuum P=0-Pc_max, and at the injection site P=Pi-Pc_max). I have also considered writing a custom capillary pressure user object for calculating S, however I don't really have any data for how P(/Pc) in the flow front relates S (or indeed if there even is a valid relationship).\nIf not, do you have any suggestions for a better approach? I am considering writing some simple custom kernels, materials etc to implement Darcy flow, and advect an S variable (following a Volume Of Fluid - like approach) instead of calculating it from capillary pressure.\n\nSee my earlier question for more discussion on using the porous flow module with 0 saturation.\nTIA\n\nExample input file\n\n# 2D single phase unsaturated porous flow - rectilinear validation case\n# All units in SI unless otherwise stated\n\n[Mesh]\n    [plate]\n        type = GeneratedMeshGenerator\n        dim = 2\n        xmin = 0\n        xmax = 0.3\n        nx = 30\n        ymin = 0\n        ymax = 0.1\n        ny = 10\n    []\n[]\n\n[UserObjects]\n    [dictator]\n        type = PorousFlowDictator\n        porous_flow_vars = porepressure\n        number_fluid_phases = 1\n        number_fluid_components = 1\n    []\n    [pc]\n        type = PorousFlowCapillaryPressureVG\n        alpha = 1E-4\n        m = 0.9\n        pc_max = 1e5\n    []\n[]\n\n[GlobalParams]\n    PorousFlowDictator = dictator\n    gravity = '0 0 0'\n[]\n\n[Variables]\n    [porepressure]\n        initial_condition = -2E4\n    []\n[]\n\n[Kernels]\n    [dmdt]\n        type = PorousFlowMassTimeDerivative\n        variable = porepressure\n    []\n    [flux]\n        type = PorousFlowAdvectiveFlux\n        variable = porepressure\n    []\n[]\n\n[AuxVariables]\n    [saturation]\n        family = MONOMIAL\n        order = CONSTANT\n    []\n[]\n\n[AuxKernels]\n    [saturation]\n        type = PorousFlowPropertyAux\n        variable = saturation\n        property = saturation\n    []\n[]\n\n[BCs]\n    [injection]\n        type = PorousFlowPiecewiseLinearSink\n        variable = porepressure\n        boundary = left\n        pt_vals = '-1E9 1E9'\n        multipliers = '-1E9 1E9'\n        flux_function = 0.046\n        PT_shift = 0.35E+5\n    []\n[]\n\n[Modules]\n    [FluidProperties]\n        [liquid]\n            type = SimpleFluidProperties\n            viscosity = 0.06\n            density0 = 920\n        []\n    []\n[]\n\n[Materials]\n    [porosity_block0]\n        type = PorousFlowPorosity\n        porosity_zero = 0.7\n    []\n    [permeability_block0]\n        type = PorousFlowPermeabilityConst\n        permeability = '3E-10 0 0   0 3E-10 0   0 0 3E-10'\n    []\n    [saturation_calculator]\n        type = PorousFlow1PhaseP\n        porepressure = porepressure\n        capillary_pressure = pc\n    []\n    [temperature]\n        type = PorousFlowTemperature\n        temperature = 293\n    []\n    [massfrac]\n        type = PorousFlowMassFraction\n    []\n    [liquid]\n        type = PorousFlowSingleComponentFluid\n        fp = liquid\n        phase = 0\n    []\n    [relperm]\n        type = PorousFlowRelativePermeabilityCorey\n        n = 3\n        s_res = 0.1\n        sum_s_res = 0.1\n        phase = 0\n    []\n[]\n\n[Preconditioning]\n    [smp]\n        type = SMP\n        full = true\n        petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n        petsc_options_value = ' lu       mumps'\n    []\n[]\n\n[Executioner]\n    type = Transient\n    solve_type = 'NEWTON'\n    \n    end_time = 200\n    [TimeStepper]\n        type = SolutionTimeAdaptiveDT\n        dt = 1E-3\n    []\n\n    automatic_scaling = true\n[]\n\n[Outputs]\n    exodus = true\n    print_linear_residuals = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/21000",
          "updatedAt": "2022-06-23T11:48:15Z",
          "publishedAt": "2022-05-11T14:19:18Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "I'm wondering whether this problem really is described by porous-flow physics, and not something else.\nBut, let's assume PorousFlow is the way to go.  I wonder whether you've actually measured Pc and have data to parameterise it?  If not, i think i'd use 2-phase PorousFlow (more computationally expensive, so slower, sorry) with a (P, S) formulation (PorousFlow2PhasePS), and zero capillary pressure (PorousFlowCapillaryPressureConst with pc = 0).  Then start at saturation=1, and think that saturation=low corresponds to resin.  (Or possibly, start at saturation=0 and think that saturation=high corresponds to resin - whether this is computationally better typically depends on your boundary conditions, but you can easily experiment with both.)\nAlternatively, but this is something i don't think i've tried before so can't guarantee it'll work but it'll be computationally faster than the previous paragraph: use your single-phase approach, but use pc = 0 (as in previous paragraph) but start at saturation=1, and consider saturation as representing the saturation of the vacuum, so saturation=low means resin.\na",
                  "url": "https://github.com/idaholab/moose/discussions/21000#discussioncomment-2733667",
                  "updatedAt": "2022-06-23T12:27:44Z",
                  "publishedAt": "2022-05-11T22:19:57Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "s-dunnim"
                          },
                          "bodyText": "Thank you, I'll have a go with both of those suggestions. The literature generally uses Darcy law to model the flow but the effects of capillary pressure are often omitted. Unfortunately I don't (and won't) have any data on Pc, I'm limited really to resin viscosity and density, and fibre porosity and permeability. Hopefully using Pc=0 will help!",
                          "url": "https://github.com/idaholab/moose/discussions/21000#discussioncomment-2736198",
                          "updatedAt": "2022-06-23T12:27:45Z",
                          "publishedAt": "2022-05-12T08:58:51Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "AuxVariables in Functions",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI was wondering if there is a way to use an AuxVariable in a function? I'd like to write a function that is dependet on the contact pressure of my system which is stored as an AuxVariable. But the vars/vals functionality in the function-block seems to be restricted to to postprocessors, scalars and other functions. I need the spatial and temporal changes of the contact pressure though, so I tried a NodalValueSampler Vector Postprocessor, but the function-block seems to not check for those.\nIs there another way to do this?",
          "url": "https://github.com/idaholab/moose/discussions/20984",
          "updatedAt": "2022-07-22T09:50:18Z",
          "publishedAt": "2022-05-09T13:03:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Flolaffel"
                  },
                  "bodyText": "Ok, I just found the VectorPostprocessorFunction which seems to do exactly what I was looking for",
                  "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2714625",
                  "updatedAt": "2022-07-22T09:50:18Z",
                  "publishedAt": "2022-05-09T13:20:40Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Typically not. The only function I know of that can use variables instead of just location information is the SolutionFunction\nhttps://mooseframework.inl.gov/moose/source/functions/SolutionFunction.html\nbut that is information from a SolutionUserObject",
                  "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2723429",
                  "updatedAt": "2022-07-22T09:50:18Z",
                  "publishedAt": "2022-05-10T15:04:19Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Well my procedure is:\n\nUse a NodalValueSampler to read the contact pressure on a boundary\nI now have a postprocessor that contains the values of my AuxVariable\nUse a VectorPostprocessorFunction that reads the contact pressure from the postprocessor\n\nBut there seems to be a problem here. While the NodalValueSampler updates its values every timestep, the VectorPostprocessorFunction does not. So I have multiple steps where the function doesn't seem to recognize the change in contact pressure. Do you have an idea why this could be happening?",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2728997",
                          "updatedAt": "2022-07-22T09:50:18Z",
                          "publishedAt": "2022-05-11T10:00:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This is likely because of the order of execution of each object. There is no cross-system dependency resolution.\nYou are using an AuxKernel afterwards too right?\nYou can remedy this to some extent by setting execute_on flags. The linear/nonlinear ones are about as often as you can run each object.  see some docs here\nhttps://mooseframework.inl.gov/source/interfaces/SetupInterface.html\nThe VPPfunction reads directly from the VPP and performs an interpolation so if the Sampler is updated the VPPFunction is necessarily up to date.",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2730155",
                          "updatedAt": "2022-07-22T09:50:18Z",
                          "publishedAt": "2022-05-11T13:13:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "No, there is no AuxKernel involved.\nI tried the execute_on flags. VPPfuncion is executed on linear by default. Changing the execution of the VPP to linear also didn't solve the problem.\nPlus the VPP doesn't seem to be causing the problem. It's the VPPfunction that seems to fail to read the VPP.",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2730817",
                          "updatedAt": "2022-07-22T09:50:22Z",
                          "publishedAt": "2022-05-11T14:30:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how do you diagnose that the function isnt being updated?\nIn what object are you using it?\nYou can try commenting out:\n  if (now != _last_update)\n  {\n\nin valueInternal in VPPFunction.C, it's the only thing that prevents updating under very narrow conditions which I dont think you would be meeting.",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2730928",
                          "updatedAt": "2022-07-22T09:50:25Z",
                          "publishedAt": "2022-05-11T14:45:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "I'm using the VPPfunction for a DirichletBC and I'm printing it into csv with a LineFunctionSampler.\nSo firstly I see in the exodus file when my BC doesn't change between timesteps and secondly I see the csv output which corresponds to my BC and isn't updated either for several timesteps.",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2730976",
                          "updatedAt": "2022-07-22T09:50:25Z",
                          "publishedAt": "2022-05-11T14:51:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Commenting out the if-statement actually worked. Thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2731118",
                          "updatedAt": "2022-07-22T09:50:24Z",
                          "publishedAt": "2022-05-11T15:10:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Ah ok there must be a bug with it. I ll fix it. Thanks for trying it out",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2731424",
                          "updatedAt": "2022-07-22T09:50:25Z",
                          "publishedAt": "2022-05-11T15:47:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok I have the fix in a PR. Should be in in a couple weeks at most",
                          "url": "https://github.com/idaholab/moose/discussions/20984#discussioncomment-2734902",
                          "updatedAt": "2022-07-22T09:50:25Z",
                          "publishedAt": "2022-05-12T05:00:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Porous Flow - 0 liquid saturation?",
          "author": {
            "login": "s-dunnim"
          },
          "bodyText": "I'm building a model of liquid being injected into a dry porous skeleton. I tried a formulating a single phase, unsaturated model, broadly following the steps in page 10 of the tutorial (I also tried a 2 phase model along the lines of page 11).\nI would like the liquid saturation to start at 0, and increase as liquid is injected and flows throughout the skeleton. However in the capillary pressure documentation, it says \"physically realistic problems rarely explore the Seff\u223c0 region\". It is also clear from the equations given, and the models I have attempted, that 0 saturation is not really possible using the basic Porous Flow functionality.\nIs there a way to get around this using the Porous Flow module, and start at 0 (liquid) saturation?\nTIA\n\nSingle phase unsaturated input file for reference\n\n[Mesh]\n    [plate]\n        type = GeneratedMeshGenerator\n        dim = 2\n        xmin = 0\n        xmax = 1\n        nx = 50\n        ymin = 0\n        ymax = 0.56\n        ny = 28\n    []\n[]\n\n[UserObjects]\n    [dictator]\n        type = PorousFlowDictator\n        porous_flow_vars = porepressure\n        number_fluid_phases = 1\n        number_fluid_components = 1\n    []\n    [pc]\n        type = PorousFlowCapillaryPressureVG\n        alpha = 1E-6\n        m = 0.6\n    []\n[]\n\n[GlobalParams]\n    PorousFlowDictator = dictator\n    gravity = '0 0 0'\n[]\n\n[Variables]\n    [porepressure]\n        initial_condition = 0\n    []\n[]\n\n[Kernels]\n    [dmdt]\n        type = PorousFlowMassTimeDerivative\n        variable = porepressure\n    []\n    [flux]\n        type = PorousFlowAdvectiveFlux\n        variable = porepressure\n    []\n[]\n\n[AuxVariables]\n    [saturation]\n        family = MONOMIAL\n        order = CONSTANT\n    []\n[]\n\n[AuxKernels]\n    [saturation]\n        type = PorousFlowPropertyAux\n        variable = saturation\n        property = saturation\n    []\n[]\n\n[BCs]\n    [injection]\n        type = PorousFlowSink\n        variable = porepressure\n        boundary = left\n        flux_function = -10\n        fluid_phase = 0\n        use_relperm = true\n    []\n[]\n\n[Modules]\n    [FluidProperties]\n        [liquid]\n            type = SimpleFluidProperties\n            bulk_modulus = 2E9\n            viscosity = 1E-3\n            density0 = 1000\n        []\n    []\n[]\n\n[Materials]\n    [porosity]\n        type = PorousFlowPorosity\n        porosity_zero = 0.1\n    []\n    [permeability]\n        type = PorousFlowPermeabilityConst\n        permeability = '1E-14 0 0   0 1E-14 0   0 0 1E-14'\n    []\n    [saturation_calculator]\n        type = PorousFlow1PhaseP\n        porepressure = porepressure\n        capillary_pressure = pc\n    []\n    [temperature]\n        type = PorousFlowTemperature\n        temperature = 293\n    []\n    [massfrac]\n        type = PorousFlowMassFraction\n    []\n    [liquid]\n        type = PorousFlowSingleComponentFluid\n        fp = liquid\n        phase = 0\n    []\n    [relperm]\n        type = PorousFlowRelativePermeabilityCorey\n        n = 3\n        s_res = 0.1\n        sum_s_res = 0.1\n        phase = 0\n    []\n[]\n\n[Preconditioning]\n    [smp]\n        type = SMP\n        full = true\n        petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n        petsc_options_value = ' lu       mumps'\n    []\n[]\n\n[Executioner]\n    type = Transient\n    solve_type = 'NEWTON'\n    \n    end_time = 10\n    dt = 1\n\n    automatic_scaling = true\n[]\n\n[Outputs]\n    exodus = true\n    print_linear_residuals = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20862",
          "updatedAt": "2022-06-27T08:33:59Z",
          "publishedAt": "2022-04-25T12:53:32Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "You are correct: liquid saturation = 0 will cause all sorts of headaches for you.  By carefully choosing Variables and capillary curves and relative-permeability curves, I believe you should be able to do it using 2-phase or 1-phase physics, but convergence may be a problem.  Before exploring that (it will be painful) please carefully consider whether zero saturation is truly correct.  Specifically, what experimental evidence do you have that your sample has zero saturation (I suppose zero saturation would require boiling the liquid off)?  If so, do you have a good feeling (experimental evidence) for your capillary pressure and relative-permeability end points, and shape around the end points, since they will crucially dictate the (numerical) behaviour?  Or, if you're not sure the liquid saturation is truly zero, can you start from the residual saturation instead?",
                  "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2634223",
                  "updatedAt": "2022-07-01T13:49:36Z",
                  "publishedAt": "2022-04-25T21:51:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "s-dunnim"
                          },
                          "bodyText": "Thank you for the helpful reply. The liquid and porous skeleton in question are resin and a dry carbon fibre layup, so I can be sure the sample begins with 0 liquid saturation - although I suppose this isn't to say the residual saturation would be 0 once the resin is introduced. I don't have any data for the capillary pressure and relative permeability end points, and won't be able to determine this experimentally - the best I could do is review some literature for similar materials.\nI will attempt the problem with some carefully selected curves as you suggest (presumably this will involve a log extension for the capillary pressure/saturation curve to allow the saturation to reach 0 - or one of the lower extensions used on the primary wetting curve in hysteresis?). If that turns out to be unfeasible, I can just try a largely simplified custom implementation of Darcy flow...",
                          "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2637068",
                          "updatedAt": "2022-07-01T13:49:40Z",
                          "publishedAt": "2022-04-26T08:35:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Yep, try the log extension.  We were pretty careful to plot representative curves in the documentation, so hopefully you should be able to choose something sensible.  I wouldn't try customising Darcy just yet.",
                          "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2637611",
                          "updatedAt": "2022-07-01T13:49:42Z",
                          "publishedAt": "2022-04-26T09:48:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "s-dunnim"
                          },
                          "bodyText": "Thanks again for the advice.",
                          "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2637985",
                          "updatedAt": "2022-07-01T13:49:41Z",
                          "publishedAt": "2022-04-26T10:42:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Interesting problem and one I suspect that we didn't even think about! Be sure to let us know how it goes.",
                          "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2646106",
                          "updatedAt": "2022-07-01T13:50:59Z",
                          "publishedAt": "2022-04-27T11:59:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "s-dunnim"
                          },
                          "bodyText": "@cpgr I have had some limited success by setting the IC for porepressure to be negative (< -Pc_max for my chosen capillary pressure curve), which allows me to start at (close to) 0 saturation, and inject resin from a boundary using a PorousFlowSink. The results I'm getting look OK qualitatively but aren't exactly realistic... I've gone into more detail in a more recent question.",
                          "url": "https://github.com/idaholab/moose/discussions/20862#discussioncomment-2730895",
                          "updatedAt": "2022-07-01T13:50:59Z",
                          "publishedAt": "2022-05-11T14:40:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ADPiecewiseLinearInterpolationMaterial Question",
          "author": {
            "login": "jsevic"
          },
          "bodyText": "I was using the ElectricalConductivity material property to compute and return electrical conductivity for both of these kernels below. If my understanding is correct, JouleHeatingSource looks for this material property and HeatConduction in this case is used as the diffusion operator on electrical_conductivity, which in contrast to JouleHeatingSource, must be specified. This sim works fine.\n  [./HeatSrc]\n    type = JouleHeatingSource\n    variable = T\n    elec = V\n  [../]\n  [./electric]\n    type = HeatConduction\n    variable = V\n    diffusion_coefficient = electrical_conductivity\n  [../]\n\n  [./ElectricalConductivity]\n    type = ElectricalConductivity\n    temperature = T\n    block = 0\n    reference_resistivity = 0.001\n    reference_temperature = 293\n    temperature_coefficient = 1e-6\n  [../]\n\nNow I would like instead of assuming a functional expression for electrical_conductivity(T) is to specify (x,y) pairs of T and sigma such that MOOSE will linearly interpolate between these (x,y) pairs. I did this successfully earlier with a custom ExampleMaterial\n  [./ElectricalMaterialProperties_TaO]\n    type = ExampleMaterial\n    block = 'TaO'\n    independent_vals = '100 200 300 400 500'\n    dependent_vals = '4e2 1 0 -1e2 -1e3'\n    #dependent_vals = '10e2 10e2 10e2 10e2 10e2'\n  [../]\n\nI tried the ADPiecewiseLinearInterpolationMaterial to interpolate electrical conductivity that is used in the\n  [./ElectricalConductivity_TaO]\n    type = ADPiecewiseLinearInterpolationMaterial\n    xy_data = '100 4e2\n               200 1\n               300 -1e2\n               400 -1e3\n               1500 -2e3'\n    property = electrical_conductivity\n    variable = T\n    block = 'TaO'\n  [../]\n\nand I get the following error...\nAttempting to declare AD material property electrical_conductivity, but it is already retrieved/declared as a regular material property.\nHow do I tell JouleHeatingSource what electrical conductivity to use?\nThx!",
          "url": "https://github.com/idaholab/moose/discussions/19631",
          "updatedAt": "2022-09-10T05:33:00Z",
          "publishedAt": "2021-12-15T02:42:29Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "friedmud"
                  },
                  "bodyText": "Do you still have the ElectricalConductivity material there too?  This is saying that you have another Material that has already declared a non-AD version of that property.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1815583",
                  "updatedAt": "2022-09-10T05:33:02Z",
                  "publishedAt": "2021-12-15T18:28:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jsevic"
                          },
                          "bodyText": "Doesn't look like it, I have several materials of type ElectricalConductivity except for this material I used ADPiecewiseLinearInterpolationMaterial. I do use GenericConstantMaterial and HeatConductionMaterial on this same material. Do these specify electrical_conductivity as well?",
                          "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1818710",
                          "updatedAt": "2022-09-10T05:33:02Z",
                          "publishedAt": "2021-12-16T00:22:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Just to test, I replaced that material with a generic material and it runs.\n[./ElectricalConductivity_TaO]\ntype = ElectricalConductivity\ntemperature = T\nblock = 'TaO'\nreference_resistivity = 1e-4\nreference_temperature = 293\ntemperature_coefficient = 0\n[../]",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1819245",
                  "updatedAt": "2022-09-10T05:33:05Z",
                  "publishedAt": "2021-12-16T01:15:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can change the name used for electrical_conductivity in JouleHeatingSource by adding the parameter\nelectrical_conductivity = new_name\nWhat's happening right now is that JouleHeatingSource is the non AD version of that kernel. So it retrieves the non-AD version of electrical_conductivity. ADPiecewiseInterpolationMaterial defines an AD property. If you want to use AD, use ADJouleHeatingSource (and ADElectricalConductivity)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1824510",
                  "updatedAt": "2022-09-10T05:33:06Z",
                  "publishedAt": "2021-12-16T15:46:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Ok thanks let me try. Could I make this a variable that is used elsewhere?\n\u2026\nSent from my iPhone\n On Dec 16, 2021, at 8:46 AM, Guillaume Giudicelli ***@***.***> wrote:\n\n \ufeff\n Hello\n\n You can change the name used for electrical_conductivity in JouleHeatingSource by adding the parameter\n electrical_conductivity = new_name\n\n What's happening right now is that JouleHeatingSource is the non AD version of that kernel. So it retrieves the non-AD version of electrical_conductivity. ADPiecewiseInterpolationMaterial defines an AD property. If you want to use AD, use ADJouleHeatingSource (and ADElectricalConductivity!)\n\n Guillaume\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n Triage notifications on the go with GitHub Mobile for iOS or Android.\n You are receiving this because you authored the thread.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1847523",
                  "updatedAt": "2022-09-10T05:33:10Z",
                  "publishedAt": "2021-12-20T14:28:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nNot sure what you mean.\nIf you mean rename it everywhere, then you can set electrical_conductivity = new_name in the [GlobalParams] block to pass this parameter to every object that will accept it. If you get unexpected failures from this, you can pass --show-input on the command line to see what the input file looks like with all the additional parameters added.\nIf you mean use an auxiliary variable instead of a material property, I m afraid a lot of the objects you are using in your input expect a material property, and conductivities are usually classified as material properties, so it's better not to do that.",
                          "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1848425",
                          "updatedAt": "2022-12-15T06:21:09Z",
                          "publishedAt": "2021-12-20T17:14:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Ok and what about if I want to pass electrical_conductivity to the heat diffusion operator, for example, would that be ok?\n\u2026\nSent from my iPhone\n On Dec 20, 2021, at 10:14 AM, Guillaume Giudicelli ***@***.***> wrote:\n\n \ufeff\n Hello\n\n Not sure what you mean.\n If you mean rename it everywhere, then you can set electrical_conductivity = new_name in the [GlobalParams] block to pass this parameter to every object that will accept it. If you get unexpected failures from this, you can pass --show-input on the command line to see what the input file looks like with all the additional parameters added.\n\n If you mean use an auxiliary variable instead of a material property, I m afraid a lot of the objects you are using in your input expect a material property, and conductivities are usually classified as material properties, so it's better not to do that.\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n Triage notifications on the go with GitHub Mobile for iOS or Android.\n You are receiving this because you authored the thread.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1850106",
                  "updatedAt": "2022-12-15T06:21:10Z",
                  "publishedAt": "2021-12-20T23:53:35Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This one?\nhttps://mooseframework.inl.gov/source/kernels/HeatConduction.html\nIf so then set diffusion_coefficient = electrical_conductivity_name (the new name if you are modifying it)",
                          "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1850157",
                          "updatedAt": "2022-12-15T06:21:10Z",
                          "publishedAt": "2021-12-21T00:09:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Yeah that\u2019s it - cool thx let me try.\n\u2026\nSent from my iPhone\n On Dec 20, 2021, at 5:10 PM, Guillaume Giudicelli ***@***.***> wrote:\n\n \ufeff\n This one?\n https://mooseframework.inl.gov/source/kernels/HeatConduction.html\n If so then set diffusion_coefficient = electrical_conductivity_name (the new name actually)\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n Triage notifications on the go with GitHub Mobile for iOS or Android.\n You are receiving this because you authored the thread.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1853501",
                  "updatedAt": "2023-04-26T01:08:33Z",
                  "publishedAt": "2021-12-21T15:41:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Another question - not sure if I should start another thread. I have an electrical conductivity model included in my current app, using the semiconductor model fitted to my data.\n\nNow earlier in my phase field app, I used the CH split parsed kernel and the state variables were w and c. For initial testing, I used c as a proxy for conductivity, and coupled it to a custom diffusion operator kernel that allowed me to pass c. In the current MOOSE release in the heat conduction app there is supplied a diffusion operator kernel that does what my older custom kernel did, so I have been using this new one. I also use it for charge conservation and pass to it electrical_conducrivity and this works as expected, I have replicated my older electrothermal code using the current release of MOOSE.\n\nNow my question is, the app uses electrical_conductivity in two places - the charge conservation kernel and the Joule heating kernel. Since I want to scale electrical_conductivity by c, the concentration from the CH kernel, can I simply replace electrical_conductivity with the product c*electrical_conductivity in the electrical conductivity declaration of each of these two diffusion operator kernels, If not, what should I try?\n\nThank you!\n\u2026\nSent from my iPhone\n On Dec 21, 2021, at 7:41 AM, John Sevic ***@***.***> wrote:\n\n \ufeffYeah that\u2019s it - cool thx let me try.\n\n Sent from my iPhone\n\n>> On Dec 20, 2021, at 5:10 PM, Guillaume Giudicelli ***@***.***> wrote:\n>>\n> \ufeff\n> This one?\n> https://mooseframework.inl.gov/source/kernels/HeatConduction.html\n> If so then set diffusion_coefficient = electrical_conductivity_name (the new name actually)\n>\n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> Triage notifications on the go with GitHub Mobile for iOS or Android.\n> You are receiving this because you authored the thread.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1901268",
                  "updatedAt": "2023-04-26T01:08:34Z",
                  "publishedAt": "2022-01-03T17:26:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "So you want to pass 'c*electrical_conductivty' in the arguments?\nThis wont get parsed automatically.\nI would create a ParsedMaterial with the new definition for the conductivity, then give the name of that new material property in lieu of the conductivities. https://mooseframework.inl.gov/docs/PRs/19934/site/source/materials/ParsedMaterial.html",
                          "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1901480",
                          "updatedAt": "2023-04-26T01:08:34Z",
                          "publishedAt": "2022-01-03T18:10:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "Ok cool let me try thx!\n\u2026\nSent from my iPhone\n On Jan 3, 2022, at 10:10 AM, Guillaume Giudicelli ***@***.***> wrote:\n\n \ufeff\n So you want to pass 'c*electrical_conductivty' in the arguments?\n This wont get parsed automatically.\n I would create a ParsedMaterial with the new definition for the conductivity, then give the name of that new material property in lieu of the conductivities. https://mooseframework.inl.gov/docs/PRs/19934/site/source/materials/ParsedMaterial.html\n\n \u2014\n Reply to this email directly, view it on GitHub, or unsubscribe.\n Triage notifications on the go with GitHub Mobile for iOS or Android.\n You are receiving this because you authored the thread.",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-1901708",
                  "updatedAt": "2023-04-26T01:08:34Z",
                  "publishedAt": "2022-01-03T18:54:45Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jsevic"
                  },
                  "bodyText": "I have a couple of more questions related to this thread, let me know if you want me to start a new thread.\n\nQ1.\nMy current state variables are T, V, c, and w for our phase-field app. I would like to plot current density. Right now I have defined an auxiliary variable rho_e and use it with an auxiliary kernel to produce an output variable for rho_e. If I were to do this approach for computing current density, I would need grad V, is there a way to do this without creating a new (compiled?) kernel?\n\n  [./ElectricalConductivity]\n    # (S/m)\n    # Create our linear electrical conductivity model here to plot.\n    type = ParsedAux\n    variable = rho_e\n    args = 'T c'\n    function = '(800 + 0.8*T^4)*c*(1-c)'\n  [../]\n\n\nQ2.\nFor my current IC c(x,y,0) for concentration, I would like it to be uniform between 0 and 0.3 and 0.7 and 1.0 but 0 in between, is there a way to do this? I saw something called distributions?\n\n\nThank you!\n\u2026\n On Jan 3, 2022, at 11:54 AM, John Sevic ***@***.***> wrote:\n\n Ok cool let me try thx!\n\n\n\n Sent from my iPhone\n\n> On Jan 3, 2022, at 10:10 AM, Guillaume Giudicelli ***@***.***> wrote:\n>\n> \ufeff\n>\n> So you want to pass 'c*electrical_conductivty' in the arguments?\n> This wont get parsed automatically.\n> I would create a ParsedMaterial with the new definition for the conductivity, then give the name of that new material property in lieu of the conductivities. https://mooseframework.inl.gov/docs/PRs/19934/site/source/materials/ParsedMaterial.html <https://mooseframework.inl.gov/docs/PRs/19934/site/source/materials/ParsedMaterial.html>\n> \u2014\n> Reply to this email directly, view it on GitHub <#19631 (reply in thread)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABD6MBX3KNYAHQV2UDMI3PTUUHRBNANCNFSM5KCPYSJA>.\n> Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n> You are receiving this because you authored the thread.\n>",
                  "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-2709721",
                  "updatedAt": "2023-04-26T01:08:34Z",
                  "publishedAt": "2022-05-08T15:53:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nQ1\nSo to output the gradient of a variable you can use this:\nhttps://mooseframework.inl.gov/moose/source/auxkernels/VariableGradientComponent.html\nand place the result in each component.\nQ2\nYes certainly.\nI think the easiest way will be to use a ParsedFunction and then use a FunctionIC\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/19631#discussioncomment-2723682",
                          "updatedAt": "2023-04-26T01:08:34Z",
                          "publishedAt": "2022-05-10T15:32:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "error: no member named 'set_hdf5_writing' in 'libMesh::ExodusII_IO'",
          "author": {
            "login": "aruybalid"
          },
          "bodyText": "Hi,\nI am trying to compile moose, version idaholab/next, but get the following error upon compile (from within tensor_mechanics module):\nIn file included from /Users/aruybalid/projects/moose/framework/build/unity_src/constraints_Unity.C:3:\n/Users/aruybalid/projects/moose/framework/src/constraints/AutomaticMortarGeneration.C:728:32: error: no member named 'set_hdf5_writing' in 'libMesh::ExodusII_IO'\n    mortar_segment_mesh_writer.set_hdf5_writing(false);\n\nI have updated mamba (mamba update --all), and done make clobberall, before compile.\nThis seems to be a libmesh-related issue.\nAny idea how I can resolve this to proceed?",
          "url": "https://github.com/idaholab/moose/discussions/20978",
          "updatedAt": "2022-06-02T06:47:40Z",
          "publishedAt": "2022-05-06T21:31:23Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "solved over slack\nmamba update had failed due to connection",
                  "url": "https://github.com/idaholab/moose/discussions/20978#discussioncomment-2703742",
                  "updatedAt": "2022-06-02T06:47:40Z",
                  "publishedAt": "2022-05-06T22:02:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compute average value of Elements within a certain height range of mesh",
          "author": {
            "login": "hokonkim"
          },
          "bodyText": "Hello!\nI have a question about computing average value of Elements within a certain height range of mesh.\nFor example, the mesh size I used for the simulation is 10 x 10 x 10 um^3.\nI would like to compute the average value of Elements within the range of height from 0 to 1 um and export the value as output(*.CSV).\nIs this possible?\nIf not, what would be the alternative?\nThank you for your help.\nBest regards,\nHokon Kim",
          "url": "https://github.com/idaholab/moose/discussions/20946",
          "updatedAt": "2022-07-24T20:05:03Z",
          "publishedAt": "2022-05-04T02:16:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSo the ElementValueSampler is definitely what you will want to use\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementValueSampler.html\nYou could create a new block for the region of interest and block-restrict it\nFor example with this: https://mooseframework.inl.gov/source/meshgenerators/ParsedSubdomainMeshGenerator.html\nOR\nyou could just output it for the whole mesh and sort out the elements in the CSV file. There is even a sort_by parameter in the sampler, so you could sort the output by z then read only part of the file in your postprocessing workflow\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2684396",
                  "updatedAt": "2022-07-24T20:05:03Z",
                  "publishedAt": "2022-05-04T04:52:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "Thanks for your reply.\nI checked the first way you suggested. I got the point.\nSpecifically, what I want to compute is \"one of Material Property values\".\nI don't think this Material Property can be dealt as Variables (or AuxVariables).\nIn ElementValueSampler, it looks like only Variable(AuxVariable) could be used.\nIs there a way to copy Material Property into AuxVariable?",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2684462",
                          "updatedAt": "2022-07-24T20:05:18Z",
                          "publishedAt": "2022-05-04T05:13:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "there is\nhttps://mooseframework.inl.gov/source/auxkernels/MaterialRealAux.html",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2684475",
                          "updatedAt": "2022-07-24T20:05:18Z",
                          "publishedAt": "2022-05-04T05:15:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "I really appreciate your help!\nI would try this way, and let's see!",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2684482",
                          "updatedAt": "2022-07-24T20:05:18Z",
                          "publishedAt": "2022-05-04T05:17:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "I have questions.\nFirst of all, when I made a subdomain through ParsedSubdomainMeshGenerator, subdomain requires Active Kernel.\nI thought that subdomain restricted the interested domain including the information I assigned at the original blocks, but it didn't look like that.\nIs there a way making a subdomain copying the information from the original block?\n(with no requirement for Active Kernel, just used for computing the average value of Elements)\nAlso, when I tried ElementValueSampler, many csv files for each time step were exported.\nUltimately what I want to print out in csv file is \"the single value representing the average value of Elements within a certain range of height\" like below.\nVoltage | Current | ........ | Avg. of K from 0 to 1 um | Avg. of K from 1 to 2 um | ... |\n1.02   |   3.1      | ........ |                     2034            |                   1200               | ... |\nIf I use ElementValueSampler, is there a way not to generate other csv files and to print out the information into original csv file?",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2697941",
                          "updatedAt": "2022-05-06T02:50:55Z",
                          "publishedAt": "2022-05-06T02:48:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nSo you can turn off the requirement for an active kernel with this option\n[Problem]\n  kernel_coverage_check = false\n[]\n\nBut it's better to just not block restrict the kernels and variables and let them execute everywhere in your case I think. That way the subdomain modifications wont affect the equations.\nYou can use this option contains_complete_history to merge all the csv files for each time step with the ElementValueSampler.\nYou cannot merge the postprocessors and the vectorpostprocessor output that easily. So this table you describe would only work if you use the subdomain methods and not the ElementValueSampler imo",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2698067",
                          "updatedAt": "2022-05-06T03:36:29Z",
                          "publishedAt": "2022-05-06T03:36:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "Then, what about this combinations?\nSeveral subdomains (by using ParsedSubdomainMeshGenerator)\n\nI will assign the needed parameters like the target Elemental value(Materials property)\nKernels will work on each subdomain similar to original blocks.\n\nElementAverageMaterialProperty\n\nThis postprocessor will work on each subdomain and give me the single value (average) and export the value in CSV.\n\nI just attached the code and mesh for simple test. But after assigning parameters into subdomain, I cannot get the result.\nTEST.zip",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2698094",
                          "updatedAt": "2022-09-02T08:23:08Z",
                          "publishedAt": "2022-05-06T03:45:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "What app do I need to run this? Looks like you have some custom objects.\nIt seems you have added sub_0 to all the block restrictions in the system.\nCan you add show_info = true to the ParsedSubdomainMeshGenerator ? To see if it worked\nAlso what are you getting for the result currently?",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2701132",
                          "updatedAt": "2022-09-02T08:23:08Z",
                          "publishedAt": "2022-05-06T14:31:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "Yes, I forgot that in my apps, there were several custom kernels and materials.\n\"show_info = true\" in ParsedSubdomainMeshGenerator gave me some information about the subdomain.\nI just knew that the subdomain includes unnecessary blocks' information.\nCurrently, I use \"combinatorial_geometry = 'z > 0 & z < 0.0002 & x > 1.89861e-5 & x < 0.0002 & y > 1.89939e-5 & y < 0.0002'\"\nHowever, what I want to do is a certain height range of one block ('PT_TPB_TET4'), but above rectangle includes a part of 4 block's information.\nIs there a way to pick a certain block as subdomain? not the rectangle..\n(e.g., z in 'PT_TPB_TET4' > 0 & z in 'PT_TPB_TET4' < 0.0002)\nLastly, if I add subdomain into the current input file, then it can be run, but it cannot converge.\n(I think the subdomain has the part of information, specifically the subdomain is disconnected so it cannot converge)",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2702156",
                          "updatedAt": "2022-09-02T08:23:08Z",
                          "publishedAt": "2022-05-06T17:02:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Try adding the block = '... sub_0' in the GlobalParams. You're probably missing a block-restriction in one object.\nI dont think we can do what you want with the mesh generators right now.\nTry this:\n\nplace z in an auxvariable using a ParsedFunction and a FunctionAux\nuse the https://mooseframework.inl.gov/source/userobject/CoupledVarThresholdElementSubdomainModifier.html with z as the variable and the threshold and block-restrict it to PT_TPB_TET4. If you only want the final result, you can execute this on FINAL and not have to worry about block restriction of the kernels\nuse the ElementValueSampler with block-restriction on the new block",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2702215",
                          "updatedAt": "2022-09-02T08:23:08Z",
                          "publishedAt": "2022-05-06T17:13:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "[Functions]\n  [./testFunction]\n    type = ParsedFunction\n    value = 'z > 0 & z < 0.0002'\n  [../]\n[]\n\n[UserObjects]\n  [./just_test]\n    type = CoupledVarThresholdElementSubdomainModifier\n    coupled_var = 'test_z'\n    block = 'PT_TPB_TET4'\n    threshold = 0\n    subdomain_id = 100\n  [../]\n[]\n\n[AuxVariables]\n  [./test_z]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 'PT_TPB_TET4'\n  [../]\n[]\n\n[AuxKernels]\n  [./a]\n    type = FunctionAux\n    variable = test_z\n    function = testFunction\n  [../]\n[]\n\nI don't get it how z can be used for specifying the interested height.\nAlso, I don't know how to adjust threshold and sub_domain_id in CoupledVarThresholdElementSubdomainModifier.\nI thought \"sub_domain_id\" is used to specify the new block I'm interested.\n\"Requested subdomain 100 does not exist\" is the error message I got for now....\nDoes this new subdomain affect the original mesh ('PT_TPB_TET4')?",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703016",
                          "updatedAt": "2022-09-02T08:23:08Z",
                          "publishedAt": "2022-05-06T19:27:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "try this\n[Functions]\n  [.z_function]\n    type = ParsedFunction\n    value = 'z'\n  [../]\n[]\n\n[UserObjects]\n  [./just_test]\n    type = CoupledVarThresholdElementSubdomainModifier\n    coupled_var = 'z_var'\n    block = 'PT_TPB_TET4'\n    threshold = 0.0002\n    subdomain_id = 100\n    execute_on = FINAL\n  [../]\n[]\n\n[AuxVariables]\n  [z_var]\n    order = CONSTANT\n    family = MONOMIAL\n    block = 'PT_TPB_TET4'\n  [../]\n[]\n\n[AuxKernels]\n  [./a]\n    type = FunctionAux\n    variable = z_var\n    function = z_function\n  [../]\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703134",
                  "updatedAt": "2022-07-24T20:05:18Z",
                  "publishedAt": "2022-05-06T19:45:34Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "[Postprocessors]\n  [./TEST]\n    type = ElementAverageMaterialProperty\n    mat_prop = 'tpbActivity_S0'\n    block = '100'\n  [../]\n[]\n\nThe codes you gave me worked.\nI added the PP like above, but the error message \"the following blocks (ids) do no exist on the mesh: 100\" popped up.\nI tried this, but it showed the same error as well.\n[VectorPostprocessors]\n  [./test]\n    type = ElementValueSampler\n    block = '100'\n    sort_by = z\n    variable = z_var\n  [../]\n[]\n\ntestcode.zip",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703270",
                          "updatedAt": "2022-07-24T20:05:19Z",
                          "publishedAt": "2022-05-06T20:18:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "when you look at the mesh does the subdomain appear?\nMaybe I did not set the threshold right?",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703354",
                          "updatedAt": "2023-06-29T08:49:49Z",
                          "publishedAt": "2022-05-06T20:40:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also the UserObject is executed on FINAL, so before that if you run anything on subdomain 100, it does not exist yet",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703357",
                          "updatedAt": "2022-09-02T08:24:30Z",
                          "publishedAt": "2022-05-06T20:41:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "First, in the block, there were only 4 blocks. subdomain didn't appear.\nI ran the UserObject without applying execute_on.",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703370",
                          "updatedAt": "2022-09-02T08:24:30Z",
                          "publishedAt": "2022-05-06T20:43:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "then you need to check the parameters.\nbtw for the previous approach, there is a parameter to exclude some subdomains\nhttps://mooseframework.inl.gov/source/meshgenerators/ParsedSubdomainMeshGenerator.html\nI didnt know about it",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703410",
                          "updatedAt": "2022-09-02T08:24:30Z",
                          "publishedAt": "2022-05-06T20:52:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hokonkim"
                          },
                          "bodyText": "Currently, I'm still stuck.\nBased on what you suggested, I will try to implement the function that I wanted.\nFor exclude some subdomain parameter, there is no way to specify the other blocks inside of subdomain as far as I know....",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703717",
                          "updatedAt": "2022-09-02T08:24:30Z",
                          "publishedAt": "2022-05-06T21:56:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You specify the domains you exclude, not the domains you include.\nYup paraview confirms the user object did not add the block.\nCan you execute the user object and the FunctionAux on INITIAL and TIMESTEP_BEGIN and see if it works then?\nThe z_var needs to be populated and the UO needs to be exceuted before other code referring to them is ran",
                          "url": "https://github.com/idaholab/moose/discussions/20946#discussioncomment-2703737",
                          "updatedAt": "2022-09-02T08:24:50Z",
                          "publishedAt": "2022-05-06T22:01:54Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Reduced Integration in MOOSE",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nis there a way to find out how many quadrature points an element uses in MOOSE? For example ABAQUS has a documentation for each element where the nodes and the quadrature points are numbered respectively. Looking through the LibMesh documentation I only found a numbering for the nodes but not for the qps. Does that mean every element in MOOSE is fully integrated? Is there a way to manually switch to reduced integration?\nI'm aware there is the volumetric_locking_correction feature but to my understanding that is not same thing. Or am I wrong here?",
          "url": "https://github.com/idaholab/moose/discussions/20750",
          "updatedAt": "2022-07-08T17:13:10Z",
          "publishedAt": "2022-04-08T16:03:21Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "recuero"
                  },
                  "bodyText": "Elements are by default integrated via the exact quadrature rule. This can be changed from the quadrature executioner block.\nThe volumetric locking correction flag is recommended for mechanics problems and first order Lagrange elements.",
                  "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2532442",
                  "updatedAt": "2022-07-08T17:13:12Z",
                  "publishedAt": "2022-04-08T16:56:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "If you set that flag, spatial numerical integration is automatically changed to remove volumetric locking and distinguish between deviatoric and volumetric parts. Which is a particular way to do selective integration.",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2532466",
                          "updatedAt": "2022-07-08T17:13:11Z",
                          "publishedAt": "2022-04-08T16:59:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nYou can set the quadrature block in the Executioner block as mentioned above, see this page:\nhttps://mooseframework.inl.gov/source/actions/SetupQuadratureAction.html\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2533853",
                          "updatedAt": "2022-07-08T17:13:11Z",
                          "publishedAt": "2022-04-08T22:28:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Can I ask a follow up question? What is the \"order\" (first, second, etc...) nomenclature mean in the Quadrature block?\nFor instance, if I have second-order (n=2) variables, and I want to integrate them fully, is the Quadrature order \"second\" to match the order of the polynomial? Or does it refer to the number of quadrature points?",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2689630",
                          "updatedAt": "2022-07-08T17:13:15Z",
                          "publishedAt": "2022-05-04T19:55:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so it's linked to the order of the polynomial (usually) basis the quadrature is obtained from.\nFor a second order variable, you have to multiply it by a second order test function on top so you end up with needing a 4th order quadrature to integrate it perfectly (well I m taking a lot of shortcuts here, depends on the quadrature).",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2690164",
                          "updatedAt": "2022-07-08T17:13:24Z",
                          "publishedAt": "2022-05-04T21:47:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Well let's assume Gauss quadrature for now. In Abaqus terminology, reduced integration means \"elements use one fewer integration point in each direction\", see here. In that link, the figure on the right is a 2D second-order \"reduced\" element with only 2 quadrature points in each dimension (4 total), as opposed to the typical \"fully-integrated\" element like that seen here with 3 quadrature points in each direction (9 total).\nHow would one implement the \"reduced\" element in MOOSE? I think the element type would be HEX8, variables would be second order Lagrange, and the quadrature order would be third? Would anything else change?",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702539",
                          "updatedAt": "2022-07-08T17:13:24Z",
                          "publishedAt": "2022-05-06T18:07:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Would you want to reduce the order for an element or just for a side?\nEither way the parameters to do this are here\nhttps://mooseframework.inl.gov/source/actions/SetupQuadratureAction.html\nYou dont need to downgrade the element type IMO, just the quadrature.",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702603",
                          "updatedAt": "2022-07-08T17:13:24Z",
                          "publishedAt": "2022-05-06T18:17:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Whoops, I meant QUAD8 element, not HEX8. Sorry. Trying to reduce the quadrature inside the element. Basically just like the examples I linked to.",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702684",
                          "updatedAt": "2022-07-08T17:13:26Z",
                          "publishedAt": "2022-05-06T18:30:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if it's for the whole element not just the side I think you ll need to define a block.\n@recuero for correctness-check on this",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702692",
                          "updatedAt": "2022-07-08T17:13:26Z",
                          "publishedAt": "2022-05-06T18:32:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Setting quadrature order to element order minus one is one way to do what you described. But that's not ideal in the multiphysics setting as moose doesn't allow different quadrature for different variables. Ideally you only want to do reduced integration for the mechanics problem, (if that abaqus page is what you are after) volumetric_locking_correction is the right parameter to set.",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702779",
                          "updatedAt": "2022-07-08T17:13:26Z",
                          "publishedAt": "2022-05-06T18:46:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "As @HuGary  @hugary1995 said, in a multiphysics run, the quadrature rule you choose in the executioner will apply to all variables in the element (per mesh block). You may get away with underintegrating in some multiphysics problems potentially, but I'd assume this will need to be assessed case by case. The particular modes of deformation of an element typically have a larger importance in mechanics problems with plasticity, e.g, compared to other physics.\nI think the original question goes back to the fact that, to ensure correctness and optimal computational effort in solid mechanics finite element problems, reduced integration is typically used for higher order elements (for first order, we'd need hourglass controls, which we don't have yet). If you want to use higher order elements, I'd be hesitant to use the volumetric locking correction (maybe Gary has studied this more and can comment). Maybe it's worth playing with reduced integration with your problem. Based on Guillaume's description of libmesh's quadrature option, selecting THIRD and the blocks you want your quadrature to apply to will do the trick.",
                          "url": "https://github.com/idaholab/moose/discussions/20750#discussioncomment-2702959",
                          "updatedAt": "2022-07-08T17:13:26Z",
                          "publishedAt": "2022-05-06T19:16:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "No mesh file was supplied and no generation block was provided",
          "author": {
            "login": "hhy2022"
          },
          "bodyText": "I was trying to self-define and solve an advection problem. Below is my input:\n[Mesh]\n  type = GeneratedMesh #Can generate simple lines, rectangles and rectangular prisms\n  dim = 1\n  nx = 100\n  ny = 10\n  xmax = 1\n  ymax = 0.1\n  displacements = 'disp_x disp_y'\n[]\n\n[Problem]\n  type = FEProblem\n  coord_type = RZ\n  rz_coord_axis = X\n[]\n\n[Variables]\n  [c]\n    # Adds a linear Lagrange variable by default\n  []\n  [u]\n  []\n[]\n\n[Kernels]\n  [advection]\n    type = ConservativeAdvection\n    variable = u\n    velocity = '1 0 0'\n    upwinding_type = full\n  []\n[]\n\n[BCs]\n  [./u_injection_left]\n    type = InflowBC\n    variable = u\n    boundary = left\n    velocity = '1 0 0'\n    inlet_conc = 1\n  [../]\n  [./allow_mass_out]\n    type = OutflowBC\n    variable = u\n    boundary = right\n    value = '1 0 0'\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  solve_type = NEWTON\n  # Set PETSc parameters to optimize solver efficiency\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre boomeramg'\n[]\n\n[Outputs]\n  exodus = true\n[]\n\nAfter running, it gave me an error message:\nNo mesh file was supplied and no generation block was provided\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\nFinished: Exit code: 1\n\nI am confused since I did had the mesh block. Is there any wrong with my input?\nBesides, if I would like to create a seperate mesh file, how should I do? Those .e file .msh file are produced manually or through some tools? Where can I find the guidance for this part?\nThank you so much for any help.",
          "url": "https://github.com/idaholab/moose/discussions/20899",
          "updatedAt": "2022-06-27T00:09:01Z",
          "publishedAt": "2022-04-28T11:06:11Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "loganharbour"
                  },
                  "bodyText": "I am confused since I did had the mesh block. Is there any wrong with my input?\n\nThere is not necessarily a single object in the [Mesh] block, therefore you must provide it as such:\n[Mesh]\n  [gm] # any name you want here\n    type = GeneratedMesh #Can generate simple lines, rectangles and rectangular prisms\n    dim = 1\n    nx = 100\n    ny = 10\n    xmax = 1\n    ymax = 0.1\n  []\n\n  displacements = 'disp_x disp_y'\n[]\n\n\nBesides, if I would like to create a seperate mesh file, how should I do? Those .e file .msh file are produced manually or through some tools? Where can I find the guidance for this part?\n\nWe have many methods for generating a variety of common meshes. See the Mesh system (more importantly, the MeshGenerator objects) here: https://mooseframework.inl.gov/syntax/Mesh/index.html\nIf you have a specific mesh in mind that you're trying to generate, we can try to point you in the right direction.",
                  "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2654717",
                  "updatedAt": "2022-06-27T00:09:14Z",
                  "publishedAt": "2022-04-28T13:20:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much for your reply.\nI tried to add an object name in Mesh block, but i seems that the message indicated the mesh problem still there:\nNo mesh file was supplied and no generation block was provided\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\nFinished: Exit code: 1\n\nI used the command to output the mesh '--mesh-only':\n(moose) dff@dff-ThinkPad-T440:~/projects/redox/problems$ ../redox-opt -i Redox1.i --mesh-only mesh_file.e and there were some errors:\n*** ERROR ***\nTask add_mesh_generator is not registered to build MooseMesh derived objects\n\nStack frames: 14\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: ActionWarehouse::addActionBlock(std::shared_ptr<Action>)\n3: Parser::walkRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, hit::Node*)\n4: Parser::walk(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, hit::Node*)\n5: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n6: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n7: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n8: Parser::parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)\n9: MooseApp::setupOptions()\n10: MooseApp::run()\n11: ../redox-opt(+0x3163) [0x55a73855f163]\n12: __libc_start_main\n13: ../redox-opt(+0x33ea) [0x55a73855f3ea]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nI am confused since my mesh information is just a very simple one. Attached was all my input:\n[Mesh]\n  [gm]\n    type = GeneratedMesh #Can generate simple lines, rectangles and rectangular prisms\n    dim = 2\n    nx = 100\n    ny = 10\n    xmax = 1\n    ymax = 0.1\n  [] \n  \n  displacements = 'disp_x disp_y'\n[]\n\n[Problem]\n  type = FEProblem\n  coord_type = RZ\n  rz_coord_axis = X\n[]\n\n[Variables]\n  [c]\n    # Adds a linear Lagrange variable by default\n  []\n  [u]\n  []\n[]\n\n[Kernels]\n  [advection]\n    type = ConservativeAdvection\n    variable = u\n    velocity = '1 0 0'\n    upwinding_type = full\n  []\n[]\n\n[BCs]\n  [./u_injection_left]\n    type = InflowBC\n    variable = u\n    boundary = left\n    velocity = '1 0 0'\n    inlet_conc = 1\n  [../]\n  [./allow_mass_out]\n    type = OutflowBC\n    variable = u\n    boundary = right\n    value = '1 0 0'\n  [../]\n[]\n\n[Executioner]\n  type = Steady\n  solve_type = NEWTON\n  # Set PETSc parameters to optimize solver efficiency\n  petsc_options_iname = '-pc_type -pc_hypre_type'\n  petsc_options_value = 'hypre boomeramg'\n[]\n\n[Outputs]\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2697775",
                          "updatedAt": "2022-06-27T00:09:15Z",
                          "publishedAt": "2022-05-06T01:51:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "replace GeneratedMesh with GeneratedMeshGenerator\nsee the docs here\nhttps://mooseframework.inl.gov/source/meshgenerators/GeneratedMeshGenerator.html",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2697794",
                          "updatedAt": "2022-06-27T00:09:19Z",
                          "publishedAt": "2022-05-06T01:56:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much for your help.\nI used peacock to run my input and everything worked well. But there is another problem. When I tried to create a seperated mesh file using the command\n(moose) dff@dff-ThinkPad-T440:~/projects/redox/problems$ ../redox-opt -i Redox1.i --mesh-only mesh_file.e , there were some errors:\n*** ERROR ***\nA 'InflowBC' is not a registered object.\n\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\n\nStack frames: 21\n0: libMesh::print_trace(std::ostream&)\n1: moose::internal::mooseErrorRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n2: void mooseError<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)\n3: Factory::reportUnregisteredError(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n4: Factory::getValidParams(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n5: MooseObjectAction::MooseObjectAction(InputParameters)\n6: AddBCAction::AddBCAction(InputParameters)\n7: /home/dff/projects/moose/framework/libmoose-opt.so.0(+0x11ae698) [0x7f58a9cd3698]\n8: /home/dff/projects/moose/framework/libmoose-opt.so.0(+0x11ae72a) [0x7f58a9cd372a]\n9: ActionFactory::create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, InputParameters&)\n10: Parser::walkRaw(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, hit::Node*)\n11: Parser::walk(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, hit::Node*)\n12: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n13: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n14: hit::Node::walk(hit::Walker*, hit::NodeType, hit::TraversalOrder)\n15: Parser::parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)\n16: MooseApp::setupOptions()\n17: MooseApp::run()\n18: ../redox-opt(+0x3163) [0x5574e648e163]\n19: __libc_start_main\n20: ../redox-opt(+0x33ea) [0x5574e648e3ea]\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 0\n[unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=1\n:\nsystem msg for write_line failure : Bad file descriptor\n\nI copied the relevant \"InflowBC.c\" and \"InflowBC.h\" files from the test tutorial and compiled it. I can use peacock to run my input so I think the compile process should work well. I uesed the same input but the process to create seperated mesh file failed. I am kind of consused. Is that because the --mesh-only  source code need to be revised for registerd object?",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2697976",
                          "updatedAt": "2022-06-27T00:09:19Z",
                          "publishedAt": "2022-05-06T03:10:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I m not sure.\nIn InflowBC.C can you can register(\"mooseTestApp\" ... to register(\"MooseApp\", ..\nand try again?\nalso it shoud be InflowBC.C (capital C) btw",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2698035",
                          "updatedAt": "2022-06-27T05:46:59Z",
                          "publishedAt": "2022-05-06T03:29:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also if you are just generating a mesh file you can just comment out the boundary conditions. they are not part of the mesh",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2698041",
                          "updatedAt": "2022-06-27T05:46:59Z",
                          "publishedAt": "2022-05-06T03:31:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "I created mesh file by only using mesh block. Thank you so much for your advice.\nBesides, what is the difference between GeneratedMesh and GeneratedMeshGenerator? I am kind of confused since I thought my mesh is simple enough and those two should both work well.",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2698351",
                          "updatedAt": "2022-06-27T05:46:59Z",
                          "publishedAt": "2022-05-06T05:45:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "GeneratedMesh was what we used before the mesh generators existed. Now we use the mesh generators, such as GeneratedMeshGenerator.\nIt was just a different system, still here due to slow deprecation of things to keep some amount of backwards compatibility",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2698383",
                          "updatedAt": "2022-06-27T05:46:59Z",
                          "publishedAt": "2022-05-06T05:57:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much for your information.",
                          "url": "https://github.com/idaholab/moose/discussions/20899#discussioncomment-2700649",
                          "updatedAt": "2022-06-27T05:47:10Z",
                          "publishedAt": "2022-05-06T13:25:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}