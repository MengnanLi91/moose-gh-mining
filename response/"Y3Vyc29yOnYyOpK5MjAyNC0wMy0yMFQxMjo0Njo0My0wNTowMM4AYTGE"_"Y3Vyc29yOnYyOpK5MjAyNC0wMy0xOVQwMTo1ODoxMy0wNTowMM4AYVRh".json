{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wMy0xOVQwMTo1ODoxMy0wNTowMM4AYVRh"
    },
    "edges": [
      {
        "node": {
          "title": "Convergence error of a simple cantilever beam dynamics simulation",
          "author": {
            "login": "xiaojbing"
          },
          "bodyText": "I tried to use the tensor-mechanics module in moose to solve a simple beam dynamics problem, but it seems to be some convergence problems.\nproblem statement\uff1a\nThis is a 3-D cantilever beam with a fixed left boundary end and a uniform downward pressure on the upper surface. I used the Newmark time integration method to simulate this problem, here is the geometric model of the beam and my input file:\n\n`\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n[Mesh]\n  [generated_mesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 9\n    ny = 3\n    nz = 3\n\n    xmin = 0\n    xmax = 10\n    ymin = 0\n    ymax = 1\n    zmin = 0\n    zmax = 1\n    boundary_name_prefix = bar\n  []\n[]\n\n[Modules/TensorMechanics/DynamicMaster]\n  [all]\n    add_variables = true\n    strain = FINITE\n    density = 1000\n    newmark_beta = 0.25\n    newmark_gamma = 0.5\n    hht_alpha = 0\n  []\n[]\n\n[BCs]\n  [left_x]\n    type = DirichletBC\n    variable = disp_x\n    boundary = bar_left\n    value = 0\n  []\n  [left_y]\n    type = DirichletBC\n    variable = disp_y\n      boundary = bar_left\n    value = 0\n  []\n  [left_z]\n    type = DirichletBC\n    variable = disp_z\n      boundary = bar_left\n    value = 0\n  []\n  [Pressure]\n    [top _pre]\n        boundary = bar_top\n       function = 1e5      \n       hht_alpha = 0\n    []\n  []\n[]\n\n[Materials]\n  [elasticity]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 1e9\n    poissons_ratio = 0.3\n  []\n  [stress]\n    type = ComputeFiniteStrainElasticStress\n  []\n[]\n\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  line_search = none\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  end_time = 10\n  dt = 0.001\n  nl_abs_tol = 1e-5\n  [Predictor]\n    type = SimplePredictor\n    scale = 1\n  []\n  [./TimeIntegrator]\n    type = NewmarkBeta\n    inactive_tsteps = 1\n  []\n[]\n\n[Outputs]\n  csv = true\n\n  checkpoint = false\n  [console]\n    type = Console\n  []\n  [exo]\n    type = Exodus\n    interval = 1\n  []\n\n[]\n\n[Postprocessors]\n  [point_A_disp_y]\n    type = PointValue\n    variable = disp_y\n    point = '10 1 0'\n  []\n  [dt]\n    type = TimestepSize\n  []\n  [nolinear_residual]\n    type = Residual\n  []\n[]\n`\n\nError note:\nThe computation converges normally at the beginning, but as the computation proceeds, the nonlinear residuals end up getting larger and larger, and a decrease in the time step does not solve the problem.",
          "url": "https://github.com/idaholab/moose/discussions/27142",
          "updatedAt": "2024-03-20T13:33:37Z",
          "publishedAt": "2024-03-20T02:49:42Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "maxnezdyur"
                  },
                  "bodyText": "Few ideas,\n\nI think you are converging on the relative residual. Let's automatically scale and make the tolerance tighter.\n\n  nl_abs_tol = 1e-10\n  automatic_scaling = true \n\n\nLook at whether the problem needs damping. Newmark will grow unstable without any damping over time.",
                  "url": "https://github.com/idaholab/moose/discussions/27142#discussioncomment-8852460",
                  "updatedAt": "2024-03-20T12:41:43Z",
                  "publishedAt": "2024-03-20T12:41:42Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "xiaojbing"
                          },
                          "bodyText": "thank you!! I will try.",
                          "url": "https://github.com/idaholab/moose/discussions/27142#discussioncomment-8852511",
                          "updatedAt": "2024-03-20T12:46:13Z",
                          "publishedAt": "2024-03-20T12:46:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "xiaojbing"
                          },
                          "bodyText": "thank you! It works.",
                          "url": "https://github.com/idaholab/moose/discussions/27142#discussioncomment-8853186",
                          "updatedAt": "2024-03-20T13:33:34Z",
                          "publishedAt": "2024-03-20T13:33:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Custom Diffusivity",
          "author": {
            "login": "marinsiebert"
          },
          "bodyText": "Hi,\nwhat would be the most straight forward approach of creating a custom diffusivity material that takes the components  k diffusion coefficients d in phase B, where the coefficients are expressed as a function of temperature and pressure?\nIdeally this works as an extension within the Millington Quirk material or as a modification, where the diffusion_coefficient vector accepts other materials or aux_variables as input. Right now Millington Quirk only accepts direct input of float values.\nThank you",
          "url": "https://github.com/idaholab/moose/discussions/27012",
          "updatedAt": "2024-03-20T09:01:01Z",
          "publishedAt": "2024-03-07T07:02:49Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "You'll have to write your own material to achieve this, but it shouldn't be too difficult. There are examples of taking variables and using them inside the material, eg, PorousFlowPermeabilityConstFromVar.",
                  "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8704729",
                  "updatedAt": "2024-03-07T09:42:53Z",
                  "publishedAt": "2024-03-07T09:42:52Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "marinsiebert"
                  },
                  "bodyText": "I tried writing my own Base, so that I could then use the custom diffusion coefficients in the other diffusivity objects.\nAny hints?\nmake -j 8\nCreating Unity /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C\nCompiling C++ (in opt mode) /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C...\nIn file included from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:20:\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:26:40: error: expected unqualified-id before 'const'\n   26 |   PorousFlowDiffusivityMillingtonQuirk(const InputParameters & parameters);\n      |                                        ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:26:40: error: expected ')' before 'const'\n   26 |   PorousFlowDiffusivityMillingtonQuirk(const InputParameters & parameters);\n      |                                       ~^~~~~\n      |                                        )\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:32:39: error: 'is_ad' was not declared in this scope\n   32 |   const GenericMaterialProperty<Real, is_ad> & _porosity_qp;\n      |                                       ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:32:44: error: template argument 2 is invalid\n   32 |   const GenericMaterialProperty<Real, is_ad> & _porosity_qp;\n      |                                            ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:36:52: error: 'is_ad' was not declared in this scope\n   36 |   const GenericMaterialProperty<std::vector<Real>, is_ad> & _saturation_qp;\n      |                                                    ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:36:57: error: template argument 2 is invalid\n   36 |   const GenericMaterialProperty<std::vector<Real>, is_ad> & _saturation_qp;\n      |                                                         ^\nIn file included from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:47:46: error: 'is_ad' was not declared in this scope\n   47 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_phases;                                        \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:47:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   47 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_phases;                                        \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:47:51: error: template argument 1 is invalid\n   47 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_phases;                                        \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:48:46: error: 'is_ad' was not declared in this scope\n   48 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_var;                                           \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:48:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   48 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_var;                                           \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:48:51: error: template argument 1 is invalid\n   48 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_num_var;                                           \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:49:46: error: 'is_ad' was not declared in this scope\n   49 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_tortuosity;                                        \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:49:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   49 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_tortuosity;                                        \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:49:51: error: template argument 1 is invalid\n   49 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_tortuosity;                                        \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:50:46: error: 'is_ad' was not declared in this scope\n   50 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_qp;                                                \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:50:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   50 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_qp;                                                \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:50:51: error: template argument 1 is invalid\n   50 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_qp;                                                \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:51:46: error: 'is_ad' was not declared in this scope\n   51 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_dtortuosity_dvar;                                  \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:51:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   51 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_dtortuosity_dvar;                                  \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:51:51: error: template argument 1 is invalid\n   51 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_dtortuosity_dvar;                                  \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:52:46: error: 'is_ad' was not declared in this scope\n   52 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_diffusion_coeff;                                   \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:52:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   52 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_diffusion_coeff;                                   \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:52:51: error: template argument 1 is invalid\n   52 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_diffusion_coeff;                                   \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:53:46: error: 'is_ad' was not declared in this scope\n   53 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_ddiffusion_coeff_dvar;                             \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:53:46: note: in definition of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   53 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_ddiffusion_coeff_dvar;                             \\\n      |                                              ^~~~~\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivity2PhaseBase.h:53:51: error: template argument 1 is invalid\n   53 |   using PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::_ddiffusion_coeff_dvar;                             \\\n      |                                                   ^\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk2Phase.h:40:3: note: in expansion of macro 'usingPorousFlowDiffusivity2PhaseBaseMembers'\n   40 |   usingPorousFlowDiffusivity2PhaseBaseMembers;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/MooseBaseParameterInterface.h:15,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/MooseObject.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/BlockRestrictable.h:16,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/MooseObjectWarehouseBase.h:15,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:18,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:13:38: error: 'ADPorousFlowDiffusivityMillingtonQuirk2Phase' was not declared in this scope; did you mean 'PorousFlowDiffusivityMillingtonQuirk2Phase'?\n   13 | registerMooseObject(\"PorousFlowApp\", ADPorousFlowDiffusivityMillingtonQuirk2Phase);\n      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/framework/build/header_symlinks/Registry.h:42:21: note: in definition of macro 'registerMooseObject'\n   42 |       Registry::add<classname>({app, #classname, \"\", \"\", __FILE__, __LINE__, \"\", \"\"})\n      |                     ^~~~~~~~~\n/home/marin/projects/moose/framework/build/header_symlinks/Registry.h:42:85: error: no matching function for call to 'Registry::add<<expression error> >(<brace-enclosed initializer list>)'\n   42 |       Registry::add<classname>({app, #classname, \"\", \"\", __FILE__, __LINE__, \"\", \"\"})\n      |                                                                                     ^\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:13:1: note: in expansion of macro 'registerMooseObject'\n   13 | registerMooseObject(\"PorousFlowApp\", ADPorousFlowDiffusivityMillingtonQuirk2Phase);\n      | ^~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/framework/build/header_symlinks/Registry.h:162:15: note: candidate: 'template<class T> static char Registry::add(const RegistryEntryData&)'\n  162 |   static char add(const RegistryEntryData & base_info)\n      |               ^~~\n/home/marin/projects/moose/framework/build/header_symlinks/Registry.h:162:15: note:   template argument deduction/substitution failed:\n/home/marin/projects/moose/framework/build/header_symlinks/Registry.h:42:85: error: template argument 1 is invalid\n   42 |       Registry::add<classname>({app, #classname, \"\", \"\", __FILE__, __LINE__, \"\", \"\"})\n      |                                                                                     ^\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:13:1: note: in expansion of macro 'registerMooseObject'\n   13 | registerMooseObject(\"PorousFlowApp\", ADPorousFlowDiffusivityMillingtonQuirk2Phase);\n      | ^~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:20:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:15:42: error: deduced class type 'PorousFlowDiffusivityMillingtonQuirkTempl' in function return type\n   15 | PorousFlowDiffusivityMillingtonQuirkTempl::validParams()\n      |                                          ^~\nIn file included from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:19:\n/home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowDiffusivityMillingtonQuirk.h:21:7: note: 'template<bool is_ad> class PorousFlowDiffusivityMillingtonQuirkTempl' declared here\n   21 | class PorousFlowDiffusivityMillingtonQuirkTempl : public PorousFlowDiffusivityBaseTempl<is_ad>\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:20:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:23:1: error: specializing member 'PorousFlowDiffusivityMillingtonQuirkTempl<false>::PorousFlowDiffusivityMillingtonQuirk' requires 'template<>' syntax\n   23 | PorousFlowDiffusivityMillingtonQuirk::PorousFlowDiffusivityMillingtonQuirk(\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:41:1: error: redefinition of 'void PorousFlowDiffusivityMillingtonQuirkTempl<is_ad>::computeQpProperties()'\n   41 | PorousFlowDiffusivityMillingtonQuirkTempl<is_ad>::computeQpProperties()\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:19:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk.C:44:1: note: 'virtual void PorousFlowDiffusivityMillingtonQuirkTempl<is_ad>::computeQpProperties()' previously declared here\n   44 | PorousFlowDiffusivityMillingtonQuirkTempl<is_ad>::computeQpProperties()\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:20:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:60:16: error: duplicate explicit instantiation of 'class PorousFlowDiffusivityMillingtonQuirkTempl<false>' [-fpermissive]\n   60 | template class PorousFlowDiffusivityMillingtonQuirkTempl<false>;\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivityMillingtonQuirk2Phase.C:61:16: error: duplicate explicit instantiation of 'class PorousFlowDiffusivityMillingtonQuirkTempl<true>' [-fpermissive]\n   61 | template class PorousFlowDiffusivityMillingtonQuirkTempl<true>;\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C: In instantiation of 'PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::PorousFlowDiffusivity2PhaseBaseTempl(const InputParameters&) [with bool is_ad = false]':\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:100:16:   required from here\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:45:94: error: no matching function for call to 'std::vector<double>::vector(MaterialProperty<std::vector<double> >&)'\n   45 |     _input_diffusion_coeff(declareProperty<std::vector<Real>>(\"input_diffusion_coefficients\"))\n      |                                                                                              ^\nIn file included from /home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/vector:67,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:12,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:653:2: note: candidate: 'template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _Tp = double; _Alloc = std::allocator<double>]'\n  653 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:653:2: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:45:94: note:   candidate expects 3 arguments, 1 provided\n   45 |     _input_diffusion_coeff(declareProperty<std::vector<Real>>(\"input_diffusion_coefficients\"))\n      |                                                                                              ^\nIn file included from /home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/vector:67,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:12,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:625:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  625 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:625:43: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::initializer_list<double>'\n  625 |       vector(initializer_list<value_type> __l,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:607:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  607 |       vector(vector&& __rv, const allocator_type& __m)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:607:7: note:   candidate expects 2 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:589:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&, std::false_type) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>; std::false_type = std::integral_constant<bool, false>]'\n  589 |       vector(vector&& __rv, const allocator_type& __m, false_type)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:589:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:585:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&, std::true_type) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>; std::true_type = std::integral_constant<bool, true>]'\n  585 |       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:585:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:575:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  575 |       vector(const vector& __x, const allocator_type& __a)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:575:7: note:   candidate expects 2 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:572:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&) [with _Tp = double; _Alloc = std::allocator<double>]'\n  572 |       vector(vector&&) noexcept = default;\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:572:14: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::vector<double>&&'\n  572 |       vector(vector&&) noexcept = default;\n      |              ^~~~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:553:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = double; _Alloc = std::allocator<double>]'\n  553 |       vector(const vector& __x)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:553:28: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'const std::vector<double>&'\n  553 |       vector(const vector& __x)\n      |              ~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:522:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>::size_type, const value_type&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = double; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  522 |       vector(size_type __n, const value_type& __value,\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:522:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:510:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>::size_type, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  510 |       vector(size_type __n, const allocator_type& __a = allocator_type())\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:510:24: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::vector<double>::size_type' {aka 'long unsigned int'}\n  510 |       vector(size_type __n, const allocator_type& __a = allocator_type())\n      |              ~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:497:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  497 |       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:497:36: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'const allocator_type&' {aka 'const std::allocator<double>&'}\n  497 |       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n      |              ~~~~~~~~~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:487:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector() [with _Tp = double; _Alloc = std::allocator<double>]'\n  487 |       vector() = default;\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:487:7: note:   candidate expects 0 arguments, 1 provided\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C: In instantiation of 'void PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::computeQpProperties() [with bool is_ad = false]':\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:100:16:   required from here\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: error: no matching function for call to 'libMesh::VectorValue<double>::VectorValue(const double&, const double&, const double&, const double&)'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:111:3: note: candidate: 'template<class T2> libMesh::VectorValue<T>::VectorValue(const libMesh::TypeVector<T2>&) [with T2 = T2; T = double]'\n  111 |   VectorValue (const TypeVector<T2> & p);\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:111:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   mismatched types 'const libMesh::TypeVector<T>' and 'const double'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:105:3: note: candidate: 'template<class T2> libMesh::VectorValue<T>::VectorValue(const libMesh::VectorValue<T2>&) [with T2 = T2; T = double]'\n  105 |   VectorValue (const VectorValue<T2> & p);\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:105:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   mismatched types 'const libMesh::VectorValue<T>' and 'const double'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:95:3: note: candidate: 'template<class Scalar> libMesh::VectorValue<T>::VectorValue(const Scalar&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<T2>::value, const Scalar1>::type*) [with Scalar = Scalar; T = double]'\n   95 |   VectorValue (const Scalar & x,\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:95:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   candidate expects 2 arguments, 4 provided\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:77:3: note: candidate: 'template<class Scalar1, class Scalar2, class Scalar3> libMesh::VectorValue<T>::VectorValue(typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<T2>::value, const Scalar1>::type&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<Scalar2>::value, const Scalar2>::type&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<Scalar3>::value, const Scalar3>::type&) [with Scalar1 = Scalar1; Scalar2 = Scalar2; Scalar3 = Scalar3; T = double]'\n   77 |   VectorValue (typename\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:77:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   candidate expects 3 arguments, 4 provided\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:158:1: note: candidate: 'libMesh::VectorValue<T>::VectorValue(const T&, const T&, const T&) [with T = double]'\n  158 | VectorValue<T>::VectorValue (const T & x,\n      | ^~~~~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:158:1: note:   candidate expects 3 arguments, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:150:1: note: candidate: 'libMesh::VectorValue<T>::VectorValue() [with T = double]'\n  150 | VectorValue<T>::VectorValue () :\n      | ^~~~~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:150:1: note:   candidate expects 0 arguments, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note: candidate: 'constexpr libMesh::VectorValue<double>::VectorValue(const libMesh::VectorValue<double>&)'\n   47 | class VectorValue : public TypeVector<T>\n      |       ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note:   candidate expects 1 argument, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note: candidate: 'constexpr libMesh::VectorValue<double>::VectorValue(libMesh::VectorValue<double>&&)'\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note:   candidate expects 1 argument, 4 provided\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:68:31: error: assignment of read-only location '((PorousFlowDiffusivity2PhaseBaseTempl<false>*)this)->PorousFlowDiffusivity2PhaseBaseTempl<false>::_input_diffusion_coeff.std::vector<double>::operator[](((std::vector<double>::size_type)((PorousFlowDiffusivity2PhaseBaseTempl<false>*)this)->PorousFlowDiffusivity2PhaseBaseTempl<false>::<anonymous>.PorousFlowMaterialVectorBase::<anonymous>.DerivativeMaterialInterface<PorousFlowMaterial>::<anonymous>.PorousFlowMaterial::<anonymous>.Material::<anonymous>.MaterialBase::_qp))'\n   68 |   _input_diffusion_coeff[_qp] = diffusion_coefficients;\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C: In instantiation of 'PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::PorousFlowDiffusivity2PhaseBaseTempl(const InputParameters&) [with bool is_ad = true]':\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:101:16:   required from here\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:45:94: error: no matching function for call to 'std::vector<double>::vector(MaterialProperty<std::vector<double> >&)'\n   45 |     _input_diffusion_coeff(declareProperty<std::vector<Real>>(\"input_diffusion_coefficients\"))\n      |                                                                                              ^\nIn file included from /home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/vector:67,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:12,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:653:2: note: candidate: 'template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _Tp = double; _Alloc = std::allocator<double>]'\n  653 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:653:2: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:45:94: note:   candidate expects 3 arguments, 1 provided\n   45 |     _input_diffusion_coeff(declareProperty<std::vector<Real>>(\"input_diffusion_coefficients\"))\n      |                                                                                              ^\nIn file included from /home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/vector:67,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:12,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:625:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  625 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:625:43: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::initializer_list<double>'\n  625 |       vector(initializer_list<value_type> __l,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:607:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  607 |       vector(vector&& __rv, const allocator_type& __m)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:607:7: note:   candidate expects 2 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:589:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&, std::false_type) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>; std::false_type = std::integral_constant<bool, false>]'\n  589 |       vector(vector&& __rv, const allocator_type& __m, false_type)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:589:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:585:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&, const allocator_type&, std::true_type) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>; std::true_type = std::integral_constant<bool, true>]'\n  585 |       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:585:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:575:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  575 |       vector(const vector& __x, const allocator_type& __a)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:575:7: note:   candidate expects 2 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:572:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&) [with _Tp = double; _Alloc = std::allocator<double>]'\n  572 |       vector(vector&&) noexcept = default;\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:572:14: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::vector<double>&&'\n  572 |       vector(vector&&) noexcept = default;\n      |              ^~~~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:553:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = double; _Alloc = std::allocator<double>]'\n  553 |       vector(const vector& __x)\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:553:28: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'const std::vector<double>&'\n  553 |       vector(const vector& __x)\n      |              ~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:522:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>::size_type, const value_type&, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = double; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  522 |       vector(size_type __n, const value_type& __value,\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:522:7: note:   candidate expects 3 arguments, 1 provided\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:510:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>::size_type, const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  510 |       vector(size_type __n, const allocator_type& __a = allocator_type())\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:510:24: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'std::vector<double>::size_type' {aka 'long unsigned int'}\n  510 |       vector(size_type __n, const allocator_type& __a = allocator_type())\n      |              ~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:497:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector(const allocator_type&) [with _Tp = double; _Alloc = std::allocator<double>; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<double>]'\n  497 |       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:497:36: note:   no known conversion for argument 1 from 'MaterialProperty<std::vector<double> >' to 'const allocator_type&' {aka 'const std::allocator<double>&'}\n  497 |       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n      |              ~~~~~~~~~~~~~~~~~~~~~~^~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:487:7: note: candidate: 'std::vector<_Tp, _Alloc>::vector() [with _Tp = double; _Alloc = std::allocator<double>]'\n  487 |       vector() = default;\n      |       ^~~~~~\n/home/marin/mambaforge3/envs/moose/x86_64-conda-linux-gnu/include/c++/10.4.0/bits/stl_vector.h:487:7: note:   candidate expects 0 arguments, 1 provided\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C: In instantiation of 'void PorousFlowDiffusivity2PhaseBaseTempl<is_ad>::computeQpProperties() [with bool is_ad = true]':\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:101:16:   required from here\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: error: no matching function for call to 'libMesh::VectorValue<double>::VectorValue(const double&, const double&, const double&, const double&)'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:111:3: note: candidate: 'template<class T2> libMesh::VectorValue<T>::VectorValue(const libMesh::TypeVector<T2>&) [with T2 = T2; T = double]'\n  111 |   VectorValue (const TypeVector<T2> & p);\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:111:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   mismatched types 'const libMesh::TypeVector<T>' and 'const double'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:105:3: note: candidate: 'template<class T2> libMesh::VectorValue<T>::VectorValue(const libMesh::VectorValue<T2>&) [with T2 = T2; T = double]'\n  105 |   VectorValue (const VectorValue<T2> & p);\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:105:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   mismatched types 'const libMesh::VectorValue<T>' and 'const double'\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:95:3: note: candidate: 'template<class Scalar> libMesh::VectorValue<T>::VectorValue(const Scalar&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<T2>::value, const Scalar1>::type*) [with Scalar = Scalar; T = double]'\n   95 |   VectorValue (const Scalar & x,\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:95:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   candidate expects 2 arguments, 4 provided\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:77:3: note: candidate: 'template<class Scalar1, class Scalar2, class Scalar3> libMesh::VectorValue<T>::VectorValue(typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<T2>::value, const Scalar1>::type&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<Scalar2>::value, const Scalar2>::type&, typename libMesh::boostcopy::enable_if_c<libMesh::ScalarTraits<Scalar3>::value, const Scalar3>::type&) [with Scalar1 = Scalar1; Scalar2 = Scalar2; Scalar3 = Scalar3; T = double]'\n   77 |   VectorValue (typename\n      |   ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:77:3: note:   template argument deduction/substitution failed:\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:63:27: note:   candidate expects 3 arguments, 4 provided\n   63 |     const RealVectorValue diffusion_coefficients (_d00[_qp],\n      |                           ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/marin/projects/moose/framework/build/header_symlinks/RankTwoTensor.h:24,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DataIO.h:17,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/SystemBase.h:14,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/AuxiliarySystem.h:13,\n                 from /home/marin/projects/moose/framework/build/header_symlinks/DerivativeMaterialInterface.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlowVariableBase.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/build/header_symlinks/PorousFlow1PhaseFullySaturated.h:12,\n                 from /home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlow1PhaseFullySaturated.C:10,\n                 from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:2:\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:158:1: note: candidate: 'libMesh::VectorValue<T>::VectorValue(const T&, const T&, const T&) [with T = double]'\n  158 | VectorValue<T>::VectorValue (const T & x,\n      | ^~~~~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:158:1: note:   candidate expects 3 arguments, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:150:1: note: candidate: 'libMesh::VectorValue<T>::VectorValue() [with T = double]'\n  150 | VectorValue<T>::VectorValue () :\n      | ^~~~~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:150:1: note:   candidate expects 0 arguments, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note: candidate: 'constexpr libMesh::VectorValue<double>::VectorValue(const libMesh::VectorValue<double>&)'\n   47 | class VectorValue : public TypeVector<T>\n      |       ^~~~~~~~~~~\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note:   candidate expects 1 argument, 4 provided\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note: candidate: 'constexpr libMesh::VectorValue<double>::VectorValue(libMesh::VectorValue<double>&&)'\n/home/marin/mambaforge3/envs/moose/libmesh/include/libmesh/vector_value.h:47:7: note:   candidate expects 1 argument, 4 provided\nIn file included from /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.C:16:\n/home/marin/projects/moose/modules/porous_flow/src/materials/PorousFlowDiffusivity2PhaseBase.C:68:31: error: assignment of read-only location '((PorousFlowDiffusivity2PhaseBaseTempl<true>*)this)->PorousFlowDiffusivity2PhaseBaseTempl<true>::_input_diffusion_coeff.std::vector<double>::operator[](((std::vector<double>::size_type)((PorousFlowDiffusivity2PhaseBaseTempl<true>*)this)->PorousFlowDiffusivity2PhaseBaseTempl<true>::<anonymous>.PorousFlowMaterialVectorBase::<anonymous>.DerivativeMaterialInterface<PorousFlowMaterial>::<anonymous>.PorousFlowMaterial::<anonymous>.Material::<anonymous>.MaterialBase::_qp))'\n   68 |   _input_diffusion_coeff[_qp] = diffusion_coefficients;\n^Cmake: *** [/home/marin/projects/moose/framework/build.mk:151: /home/marin/projects/moose/modules/porous_flow/build/unity_src/materials_Unity.x86_64-conda-linux-gnu.opt.lo] Interrupt\n\nfiles.zip",
                  "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8763537",
                  "updatedAt": "2024-03-12T18:08:48Z",
                  "publishedAt": "2024-03-12T18:08:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "So, the diffusion coefficients can be variables, so PorousFlowDiffusivityBase can't be used? It might be better to generalise PorousFlowDiffusivityBase to accept variables, then you won't need to make your own base material and then it should be easier to implement your version of MillingtonQuirk?\nLet me know and I'll help you do this as I should have picked this up in your initial question! Feel free to drop me a message and we can get this done - it should be easier than you having to repeat all of this!",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8770873",
                          "updatedAt": "2024-03-13T10:20:10Z",
                          "publishedAt": "2024-03-13T10:20:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "Thank you, that is exactly what I wanted to do, I could have also been more precise in my question.\nInitially I thought I would just do the change for the MillingtonQuirk Material - however, I then realized that it would make more sense like you just described: The diffusion coefficients should accept variables as input. In that way, they can also be temperature or pressure dependent, as desired by the user (which is also more physically accurate I think). Also this can then be used in other diffusivity materials as well.\nThis change would need to be in the Base Material. Ideally, this can then be pushed in a following update, so everyone can benefit from this. (Also, reiterating my request from #26788: PorousFlowThermalConductivityTensorFromVar.zip I did a similar thing for the thermal conductivity based on the PermeabilityTensorFromVar material, this could then also be done in the course of this.)",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8771759",
                          "updatedAt": "2024-03-13T11:35:20Z",
                          "publishedAt": "2024-03-13T11:13:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "So how do we proceed from where? I am somewhat on a schedule, so it would be nice to be able to plan ahead.",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8825091",
                          "updatedAt": "2024-03-18T09:18:48Z",
                          "publishedAt": "2024-03-18T09:18:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nIf you want to use variables for these coefficients, this is not a large change and you can definitely either:\n\nadd materials that do that\nadd an option for choosing the variable instead of the material property\nOR\nuse the functor APIs and be able to support both variables, functions and functor material properties. See this page\nhttps://mooseframework.inl.gov/syntax/Functors/index.html\n\nAre you planning to contribute this to the porous flow module?\nYou can do all of this in your application first (that builds with the porous flow module)\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8828881",
                          "updatedAt": "2024-03-18T14:31:16Z",
                          "publishedAt": "2024-03-18T14:31:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "Hi Guillaume,\nIf I manage it I would certainly like to contribute it.\nI hoped the change could be as simple as changing the input_diffusion_coeff in the header and .C file to something like\n... std::vector<variable_value> ... So far this did not work.\nMind you, I do not have strong coding background, so a lot of the things I am doing when digging in the code is a combination of copy & past + trial & error.",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8830497",
                          "updatedAt": "2024-03-18T16:34:20Z",
                          "publishedAt": "2024-03-18T16:34:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "std::vector<variable_value this wont work. VariableValues MUST be references, and there are no vectors of references. So you could make a vector of pointers instead.\n\na lot of the things I am doing when digging in the code is a combination of copy & past + trial & error.\n\nthis is how I started too! I would follow the tutorials again for training if you want to get a little better at C++ first\nmaybe this extra one\nhttps://mooseframework.inl.gov/getting_started/examples_and_tutorials/tutorial01_app_development/index.html",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8830526",
                          "updatedAt": "2024-03-18T16:37:50Z",
                          "publishedAt": "2024-03-18T16:37:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Hey @marinsiebert - if you want I can start this off and you can finish it/ test it?",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8833631",
                          "updatedAt": "2024-03-18T22:20:29Z",
                          "publishedAt": "2024-03-18T22:20:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "marinsiebert"
                          },
                          "bodyText": "As much as i like messing with the code, any help is very much appreciated @cpgr\nAfter @GiudGiud remark about pointers I was now (still) looking at std::vector<variable_value> with * inside the brackets, this was actually accepted by the compiler, but I am not sure how to populate this now.",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8836252",
                          "updatedAt": "2024-03-19T06:09:22Z",
                          "publishedAt": "2024-03-19T06:09:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "OK. I'll make a start on it",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8836394",
                          "updatedAt": "2024-03-19T06:33:19Z",
                          "publishedAt": "2024-03-19T06:33:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Check out https://github.com/cpgr/moose/tree/pfdiffvar - the last two commits have the changes I made. This will enable you to use an AuxVariable in place of the diffusion coefficient, which I assumed is what you wanted.\nSo you should be able to do something like\ndiffusion_coeffs = 'd00 d01 d10 d11'\n\nwhere d00 etc are aux variables",
                          "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8838446",
                          "updatedAt": "2024-03-19T09:48:26Z",
                          "publishedAt": "2024-03-19T09:48:26Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "marinsiebert"
                  },
                  "bodyText": "Works as intended. Thank you!",
                  "url": "https://github.com/idaholab/moose/discussions/27012#discussioncomment-8850167",
                  "updatedAt": "2024-03-20T09:01:02Z",
                  "publishedAt": "2024-03-20T09:01:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "GMG and AMG",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "In my research to determine the capability of MOOSE to perform Geometric Multi-Grid, it appears that the ability to apply GMG is limited. It appears the dominant method for use is AMG. Are there any developed examples in MOOSE that I can use to test GMG implementation?",
          "url": "https://github.com/idaholab/moose/discussions/27125",
          "updatedAt": "2024-03-22T16:46:30Z",
          "publishedAt": "2024-03-18T21:41:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nI think we could do some form of GMG using adaptivity steps iirc. Start with a mesh that is coarse but that we want to refine, refine a few levels, then use coarsened solves to make progress faster.\n@lindsayad do you know where to look for that?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27125#discussioncomment-8833572",
                  "updatedAt": "2024-03-18T22:09:16Z",
                  "publishedAt": "2024-03-18T22:09:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "@GiudGiud Sounds like a great idea. Given my area of interest, it would appear too me that the lid-driven cavity flow problem would be an ideal development case.",
                          "url": "https://github.com/idaholab/moose/discussions/27125#discussioncomment-8833592",
                          "updatedAt": "2024-03-18T22:13:37Z",
                          "publishedAt": "2024-03-18T22:13:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "We support grid sequencing in MOOSE, which is a loop outside of the the nonlinear solve (inside of the time stepper). You can grep for num_grids in the MOOSE repo for some demonstrations of that. However, that's clearly not GMG. We have not propagated GMG into MOOSE. The best place to read about GMG for libMesh is libMesh/libmesh#2047",
                          "url": "https://github.com/idaholab/moose/discussions/27125#discussioncomment-8848588",
                          "updatedAt": "2024-03-20T05:23:16Z",
                          "publishedAt": "2024-03-20T05:23:15Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Assistance Required: Issues with Calling AuxVariable in GeneralVectorPostprocessor",
          "author": {
            "login": "PengWei97"
          },
          "bodyText": "Dear moose experts,\nI hope this message finds you well. Recently, I have been working on developing a custom VectorPostprocessor named FeatureMatePropVectorPostprocessor, which is derived through public inheritance from GeneralVectorPostprocessor. In this class, I need to access an AuxVariable, and to achieve this, I've attempted to initialize it in the constructor using the coupledValue function. However, during the compilation process, I encountered the following error:\nIn file included from /home/pw-moose/projects/yinglong/build/unity_src/vectorpostprocessors_Unity.C:3:\n/home/pw-moose/projects/yinglong/src/vectorpostprocessors/FeatureMatePropVectorPostprocessor.C: In constructor 'FeatureMatePropVectorPostprocessor::FeatureMatePropVectorPostprocessor(const InputParameters&)':\n/home/pw-moose/projects/yinglong/src/vectorpostprocessors/FeatureMatePropVectorPostprocessor.C:17:21: error: 'coupledValue' was not declared in this scope; did you mean 'coupledScalar'?\n   17 |     _energy_elastic(coupledValue(\"energy_elastic\")),\n      |                     ^~~~~~~~~~~~\n      |                     coupledScalar\nmake: *** [/home/pw-moose/projects/moose/framework/build.mk:151: /home/pw-moose/projects/yinglong/build/unity_src/vectorpostprocessors_Unity.x86_64-conda-linux-gnu.opt.lo] Error 1 \nIn an attempt to resolve this issue, I included the Coupleable.h header file to make the CoupledValue() function available, yet the problem persisted. Furthermore, following the compiler's suggestion, I tried using the coupledScalarValue() function. Unfortunately, this approach did not suit my needs as it failed to correctly call the AuxVariable during the simulation phase.\nGiven these challenges, I am seeking guidance on the correct method to call an AuxVariable within a VectorPostprocessor Object. Could you please advise on how to address this issue? Any suggestions or insights you could provide would be greatly appreciated.\nThank you for your time and assistance. I look forward to your valuable input.\nBest regards,\nWei",
          "url": "https://github.com/idaholab/moose/discussions/27113",
          "updatedAt": "2024-03-20T03:42:24Z",
          "publishedAt": "2024-03-17T04:48:01Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis vector postprocessor must not inherit the Coupleable interface (a base class to MANY objects, so often that we forget it has to be inherited).\nWhat are the base classes for this VPP? What does it inherit from?\nIf not from Coupleable, then add public Coupleable to the header, and add it to the constructor too\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8816110",
                  "updatedAt": "2024-03-17T05:10:12Z",
                  "publishedAt": "2024-03-17T05:10:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Hi Guillaume,\nThank you very much for your guidance; the previous issue has been resolved. However, I've encountered another problem. The simulation indicates that the value of the auxvariable type requiring coupling must be based on nodes rather than elements. Afterwards, I converted the auxvariable type variable into the MaterialProperty type and used getMaterialProperty to call it within the VectorValuedProblem (VVP). Surprisingly, it compiled successfully, and the simulation passed.\nTherefore, I believe the issue I encountered revolves around understanding why converting the auxVariable type quantity into the MaterialProperty type quantity leads to normal simulation. This seems to involve grasping the concept of [_qp].\nBest wishes,\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8822280",
                          "updatedAt": "2024-03-18T02:14:41Z",
                          "publishedAt": "2024-03-18T02:14:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "[_qp] is indexing the property (or the variable value) at the index of the quadrature point (Qp) on the element (or side for a sideVPP).\nProperties and variable values are computed for all the Qps at once when considering an element, for efficiency reasons. Then you can pick the value you need from that array of size number of Qps in the quadrature for an element (/side)",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8822311",
                          "updatedAt": "2024-03-18T02:19:45Z",
                          "publishedAt": "2024-03-18T02:19:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Hi Guillaume,\nThank you for your insightful guidance. Additionally, after consulting some resources, I've gained a clearer understanding of the distinction between nodes and quadrature integration points. Here's my interpretation: Nodes are points located at the physical positions of an element, instrumental in defining the element's geometric shape and interpolation functions. Consequently, field variables (such as displacement, temperature, etc.) are approximated at these nodes. On the other hand, Gauss quadrature integration points serve as internal points for numerical integration, strategically distributed within the element to facilitate the calculation of integral properties (like components of the stiffness matrix and mass matrix), thus accurately assessing the element's contribution to the overarching problem.\nMoreover, my understanding extends to the definition of MaterialProperty type parameters, which seems to be inherently linked to [_qp]. This can be observed when outputting _qp in MaterialObject, which always outputs values in the range 0 to 4, when the TRI3 grid type and first-order Lagrangian shape function was used. I'm curious to know if my interpretation aligns with reality.\nFinally, I'd like to delve deeper into whether it's possible to output parameters of the MaterialProperty type as nodal. Specifically, I'm referring to the possibility of outputting values for the VuxVariable elastic_energy in AuxKernel::ElasticEnergyAux using the node type, rather than the element type. To my knowledge, AuxKernel::ElasticEnergyAux primarily outputs values based on the element type. I wonder if there's a way to adjust this to node-based outputs. If it is possible, how should ElasticEnergyAux be modified? If not, what is the reason?\nBest wishes,\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8828413",
                          "updatedAt": "2024-03-18T13:57:26Z",
                          "publishedAt": "2024-03-18T13:57:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\n\nFinally, I'd like to delve deeper into whether it's possible to output parameters of the MaterialProperty type as nodal.\n\nthere are currently no nodal material properties, due to the ambiguity of which material definition to use when the node is in between two blocks.\n\nSpecifically, I'm referring to the possibility of outputting values for the VuxVariable elastic_energy in AuxKernel::ElasticEnergyAux using the node type, rather than the element type\n\nso with an auxiliary variable, you CAN use nodal variables. But dont rely on using material properties at nodes to that.\nI think what you may want to try if you MUST have a nodal variable is:\n\nuse an elemental variable (for example a MONOMIAL variable) to convert the material property to an aux-variable\nuse a ProjectionAux to project this elemental variable onto a nodal variable\n\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8828793",
                          "updatedAt": "2024-03-18T14:25:06Z",
                          "publishedAt": "2024-03-18T14:25:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "Hi Guillaume,\nUsing ProjectionAux did not work, I used the following input settings,\n[AuxVariables]\n  [./f_elastic_elem]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./f_elastic_node]\n    order = FIRST\n    family = LAGRANGE\n  [../]\n[]\n\n[AuxKernels]\n  [./f_elastic_elem]\n    type = ElasticEnergyAux\n    variable = f_elastic_elem\n    execute_on = TIMESTEP_BEGIN\n  [../]\n  [./f_elastic_node]\n    type = ProjectionAux\n    v = f_elastic_elem # Variable to take the value of.\n    variable = f_elastic_node\n    execute_on = TIMESTEP_END\n  [../]\n[]\nProjectionAux did not successfully map f_elastic_elem to f_elastic_node.\nWei",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835170",
                          "updatedAt": "2024-03-19T02:59:54Z",
                          "publishedAt": "2024-03-19T02:59:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how different are they? what do they look like?",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835207",
                          "updatedAt": "2024-03-19T03:05:10Z",
                          "publishedAt": "2024-03-19T03:05:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "f_elastic_elem is as expected, but f_elastic_node is always 0.",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835257",
                          "updatedAt": "2024-03-19T03:11:35Z",
                          "publishedAt": "2024-03-19T03:11:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Interesting. which timestep are we seeing in this picture?\nI ll run a quick test locally\nEDIT: elem to nodal should work.\nAre you sure we are not watching the result at timestep_begin? What is the output execute_on flag?",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835414",
                          "updatedAt": "2024-03-19T03:40:35Z",
                          "publishedAt": "2024-03-19T03:36:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PengWei97"
                          },
                          "bodyText": "The timestep is step 03, and the output module is executed at timestep_end.\n[Outputs]\n  execute_on = 'timestep_end'\n  [my_exodus]\n    type = Nemesis\n    file_base = ./${my_filename}/out_${my_filename}\n  [../]\n[]\nBy the way, even if two auxkernels are set to run at timestep begin or end, the results will be the same as the one just uploaded.",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835463",
                          "updatedAt": "2024-03-19T03:52:46Z",
                          "publishedAt": "2024-03-19T03:46:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok weird.\nThis does not seem right. Is there maybe an inactive or active parameter set for auxkernels that would prevent the kernel from executing? Do you see it executing with Debug/show_execution_order=ALWAYS?\nIs there a material property output or a transfer that could be overwriting the auxvariable value? or another auxkernel?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27113#discussioncomment-8835638",
                          "updatedAt": "2024-03-19T04:19:27Z",
                          "publishedAt": "2024-03-19T04:19:26Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Pressure Boundary Condition set by MultiApp",
          "author": {
            "login": "makeclean"
          },
          "bodyText": "Hi, I have a THM multiapp which calculates pressure, I have transferred pressure back to the main application as an AuxVariable, I would like to set the Pressure boundary condition using the data from the AuxVariable on the sideset. What is the right way to for me to set the data in the Pressure boundary condition?",
          "url": "https://github.com/idaholab/moose/discussions/27139",
          "updatedAt": "2024-03-19T23:21:28Z",
          "publishedAt": "2024-03-19T23:02:40Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\nI would like to set the Pressure boundary condition using the data from the AuxVariable on the sideset\n\nwhich solve is this boundary condition for? A multiD flow solver or another THM one?\nOr is this litteraly Pressure from the Pressure action for solid mechanics?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27139#discussioncomment-8846828",
                  "updatedAt": "2024-03-19T23:07:59Z",
                  "publishedAt": "2024-03-19T23:07:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "makeclean"
                          },
                          "bodyText": "I couldn't have been more vague could I? Its the solid mechanics pressure, https://mooseframework.inl.gov/source/bcs/Pressure.html",
                          "url": "https://github.com/idaholab/moose/discussions/27139#discussioncomment-8846843",
                          "updatedAt": "2024-03-19T23:10:52Z",
                          "publishedAt": "2024-03-19T23:10:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok Pressure only takes Real and Functions. @bwspenc @somu15 do you know which BC does pressure with auxvariables?\nI m wondering if we just use this one but they will know\nhttps://mooseframework.inl.gov/source/bcs/CoupledVarNeumannBC.html",
                          "url": "https://github.com/idaholab/moose/discussions/27139#discussioncomment-8846898",
                          "updatedAt": "2024-03-19T23:21:28Z",
                          "publishedAt": "2024-03-19T23:21:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Moose Installation - HPC",
          "author": {
            "login": "normjona"
          },
          "bodyText": "Hi,\nI'm installing moose and BISON on an HPC cluster and have been running into what appears to be a libmesh related error.\nAfter successfully running the update and rebuild PETSc script, I run run the update and rebuild libmesh script.  I get this error\n---------------------------------------------\n-- Done configuring core library features ---\n---------------------------------------------\n---------------------------------------------\n----- Configuring for optional packages -----\n---------------------------------------------\nchecking for built-in XDR support... no\nchecking for XDR support in /usr/include/tirpc... no\nconfigure: error: *** XDR was not found, but --enable-xdr-required was specified.\nRunning make -j 1...\nmake: *** No targets specified and no makefile found.  Stop.\n\nAfter this when I try to run the make command, I get the following errors.\nmake -j 4\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/libtool: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/libtool: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\nTraceback (most recent call last):\n  File \"/nfs/home/jnorma18/projects/moose/framework/scripts/get_repo_revision.py\", line 19, in <module>\n    from packaging import version\nModuleNotFoundError: No module named 'packaging'\nChecking if header needs updating: /nfs/home/jnorma18/projects/moose/framework/include/base/MooseRevision.h...\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\nCompiling C++ (in opt mode) /nfs/home/jnorma18/projects/moose/framework/build/unity_src/src_Unity.C...\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/libtool: No such file or directory\nCompiling C++ (in opt mode) /nfs/home/jnorma18/projects/moose/framework/build/unity_src/actions_Unity.C...\nmake: *** [/nfs/home/jnorma18/projects/moose/framework/build.mk:144: /nfs/home/jnorma18/projects/moose/framework/build/unity_src/src_Unity..opt.lo]\n Error 127\nmake: *** Waiting for unfinished jobs....\n/bin/sh: /nfs/home/jnorma18/projects/moose/libmesh/installed/libtool: No such file or directory\nmake: *** [/nfs/home/jnorma18/projects/moose/framework/build.mk:145: /nfs/home/jnorma18/projects/moose/framework/build/unity_src/actions_Unity..opt\n.lo] Error 127\n\n\nMy libmesh directory isn't including the \"install\" directory.  It seems libmesh is failing to build correctly?  I'd appreciate any help on this.\nThanks,\nJonathan Norman",
          "url": "https://github.com/idaholab/moose/discussions/22659",
          "updatedAt": "2024-03-19T16:19:56Z",
          "publishedAt": "2022-11-10T23:59:35Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nLibmesh did not build properly.\nThe moose error you got afterwards is 'libmesh not installed' basically\nYou need to install this library on your cluster libtirpc-devel then try to install libmesh again\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-4112526",
                  "updatedAt": "2022-11-11T00:02:51Z",
                  "publishedAt": "2022-11-11T00:02:46Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "@GiudGiud Got this same error today when testing out a new HPC cluster. I noticed I have libtirpc.so.3 installed in /lib64, but libmesh config  still doesn't find XDR.",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7124282",
                          "updatedAt": "2023-09-27T14:40:06Z",
                          "publishedAt": "2023-09-27T14:40:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what does it report under:\n---------------------------------------------\n----- Configuring for optional packages -----\n---------------------------------------------\n\nin the log",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7124374",
                          "updatedAt": "2023-09-27T14:47:40Z",
                          "publishedAt": "2023-09-27T14:47:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "checking for built-in XDR support... no\nchecking for XDR support in /usr/include/tirpc... no\nconfigure: error: *** XDR was not found, but --enable-xdr-required was specified.\n\nJust checked and there is no /usr/include/tirpc directory. I'm not an admin for the cluster either \ud83d\ude22",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7124417",
                          "updatedAt": "2023-09-27T14:51:27Z",
                          "publishedAt": "2023-09-27T14:51:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you get them to install libtirpc-devel still?",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7124515",
                          "updatedAt": "2023-09-27T14:58:37Z",
                          "publishedAt": "2023-09-27T14:58:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "I'll ask",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7124668",
                          "updatedAt": "2023-09-27T15:14:27Z",
                          "publishedAt": "2023-09-27T15:14:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ajacquey"
                          },
                          "bodyText": "Hi @GiudGiud ,\nI'm reopening this thread as I encountered the same issue on a HPC cluster.\nI contacted the administrator of the cluster to have libtirpc-devel installed but I was told the library is already installed but not in /usr/inlude/tirpc and that the compiler (loaded by module) is correctly linked to the proper location where the library is installed.\nThe administrator suggests that libmesh is only looking into /usr/include or using /usr/bin/gcc instead of the default compiler (from the module).  I doubt the second option as from the log, libmesh is using the correct gcc compiler (and not /usr/bin/gcc)\nDo you know anything about it? Is it possible that libmesh is only looking at /usr/include/ for the libtirpc library?",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7318198",
                          "updatedAt": "2023-10-18T17:16:48Z",
                          "publishedAt": "2023-10-18T17:16:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not sure. Can you play with the environment flags to include /usr/bin/gcc at link time?",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7318337",
                          "updatedAt": "2023-10-18T17:32:21Z",
                          "publishedAt": "2023-10-18T17:32:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "if that does not work we ll ask Roy where libmesh looks",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7318340",
                          "updatedAt": "2023-10-18T17:32:37Z",
                          "publishedAt": "2023-10-18T17:32:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "@GiudGiud My HPC admins installed libtirpc but as a module (module load libtirpc) so the header files go their own installation directory somewhere else and not /usr/include. How can I tell libmesh to look in this other directory?",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7488160",
                          "updatedAt": "2023-11-06T14:21:00Z",
                          "publishedAt": "2023-11-06T14:20:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "ajacquey"
                          },
                          "bodyText": "@jessecarterMOOSE I managed to solve that by declaring the following variable before running the ./update_and_rebuild_libmesh.sh :\nexport CPPFLAGS=-I/path/to/your/libtirpc/installation/",
                          "url": "https://github.com/idaholab/moose/discussions/22659#discussioncomment-7488307",
                          "updatedAt": "2023-11-06T14:33:09Z",
                          "publishedAt": "2023-11-06T14:33:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Is it possible to apply AllenCahn kernel to vector variables?",
          "author": {
            "login": "RWTHLHK"
          },
          "bodyText": "I am developing a new phase field model. It requires the evolution of an ordered vector parameter with 12 components. Each component of this vector obeys the Allen-Cahn equation. Using 12 coupled variables in the input file can do this, but it is super inconvenient. Is there any other way to do this?",
          "url": "https://github.com/idaholab/moose/discussions/27131",
          "updatedAt": "2024-03-19T15:21:19Z",
          "publishedAt": "2024-03-19T11:13:05Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIf the equations are very similar, then you can use array variables for this. One variable with 12 components.\n@laagesen do we have those for AC?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27131#discussioncomment-8841322",
                  "updatedAt": "2024-03-19T14:05:17Z",
                  "publishedAt": "2024-03-19T14:05:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "laagesen"
                          },
                          "bodyText": "Hi @RWTHLHK - We normally use Actions to automate adding multiple variables and kernels for multiple Allen-Cahn equations. Have a look for example at the page https://mooseframework.inl.gov/modules/phase_field/Grain_Growth_Model.html and in particular the section Simplified MOOSE Syntax and pages linked there. You may be able to use what is already there or modify those actions for your specific model.",
                          "url": "https://github.com/idaholab/moose/discussions/27131#discussioncomment-8842307",
                          "updatedAt": "2024-03-19T15:21:20Z",
                          "publishedAt": "2024-03-19T15:21:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Questions when building Cardinal without MOOSE's conda environment",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "Hi everyone. I met an error when I was building the PETSc and libMesh.\nWhen I type the command ./contrib/moose/scripts/update_and_rebuild_petsc.sh in the terminal, the error message displays:\n        Trying to download https://gitlab.inria.fr/scotch/scotch.git for PTSCOTCH\n================================================================================\n\n*********************************************************************************************\n          UNABLE to CONFIGURE with GIVEN OPTIONS (see configure.log for details):\n---------------------------------------------------------------------------------------------\n                               PTScotch needs flex installed\n*********************************************************************************************\n\nThere was an error. Exiting...\n\nWhat should I do?\nEthan",
          "url": "https://github.com/idaholab/moose/discussions/27115",
          "updatedAt": "2024-03-19T15:21:02Z",
          "publishedAt": "2024-03-18T05:55:36Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Ethan-xj"
                  },
                  "bodyText": "OK. \"flex\" is a package. I thought that was a word....the question has been solved XD",
                  "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8823518",
                  "updatedAt": "2024-03-18T06:28:16Z",
                  "publishedAt": "2024-03-18T06:28:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud Hello Giud. When I type the command ./contrib/moose/scripts/update_and_rebuild_libmesh.sh\nThe terminal shows:\n<<< Configuring library with real number support >>>\n<<< Configuring library with reference counting support >>>\n<<< Configuring library example suite support >>>\n---------------------------------------------\n-- Done configuring core library features ---\n---------------------------------------------\n---------------------------------------------\n----- Configuring for optional packages -----\n---------------------------------------------\nchecking for built-in XDR support... no\nchecking for XDR support in /usr/include/tirpc... no\nconfigure: error: *** XDR was not found, but --enable-xdr-required was specified.\nRunning make -j 1...\nmake: *** No targets specified and no makefile found.  Stop.\n\nI don't know if this is right. And I type the ./contrib/moose/scripts/update_and_rebuild_wasp.sh\nThere's an error in the terminal:\nCMake Deprecation Warning at CMakeLists.txt:46 (CMAKE_MINIMUM_REQUIRED):\n  Compatibility with CMake < 3.5 will be removed from a future version of\n  CMake.\n\n  Update the VERSION argument <min> value or use a ...<max> suffix to tell\n  CMake that the project does not need compatibility with older versions.\n\n\nCMake Error at CMakeLists.txt:57 (INCLUDE):\n  INCLUDE could not find requested file:\n\n    /home/linux/cardinal/contrib/moose/framework/contrib/wasp/TriBITS/tribits/TriBITS.cmake\n\n\nCMake Error at CMakeLists.txt:87 (TRIBITS_PROJECT_ENABLE_ALL):\n  Unknown CMake command \"TRIBITS_PROJECT_ENABLE_ALL\".\n\n\n-- Configuring incomplete, errors occurred!\nError: configure step for WASP failed to complete successfully\n\nFinally, I suggest adding some schematic diagrams illustrating successful commands in the Cardinal installation guide.\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8824857",
                          "updatedAt": "2024-03-18T08:59:02Z",
                          "publishedAt": "2024-03-18T08:59:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "For the libMesh error, you are going to need to install the package: libtripc-devel\n\n\nAnd for the WASP build error, I think you may have had an issue with obtaining the submodules necessary to build WASP (wasp requires several contribs). Can you try:\n\n\ncd /home/linux/cardinal/contrib/moose\ngit submodule update --init --recursive\nand then try to build wasp again?",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8826854",
                          "updatedAt": "2024-03-18T11:51:53Z",
                          "publishedAt": "2024-03-18T11:51:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "For the libMesh error, you are going to need to install the package: libtripc-devel\n\nget in touch with your cluster administrators, this should be installed by them. we dont usually build that one ourselves.\nMake sure they do libtripc-devel and not libtripc",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8828834",
                          "updatedAt": "2024-03-18T14:27:51Z",
                          "publishedAt": "2024-03-18T14:27:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Thank you milljm and Giud. The first question has been solved, but the second is not.\nHere is the info from the terminal:\n(base) [linux@localhost cardinal]$ cd /home/linux/cardinal/contrib/moose\n(base) [linux@localhost moose]$ git submodule update --init --recursive\nSkipping submodule 'modules/chemical_reactions/contrib/thermochimica'\nSkipping submodule 'modules/fluid_properties/contrib/saline'\nSkipping submodule 'modules/solid_mechanics/contrib/neml2'\n(base) [linux@localhost moose]$ ./contrib/moose/scripts/update_and_rebuild_wasp.sh\nbash: ./contrib/moose/scripts/update_and_rebuild_wasp.sh: No such file or directory\n(base) [linux@localhost moose]$ cd /home/linux/cardinal\n(base) [linux@localhost cardinal]$ ./contrib/moose/scripts/update_and_rebuild_wasp.sh\nCMake Deprecation Warning at CMakeLists.txt:46 (CMAKE_MINIMUM_REQUIRED):\n  Compatibility with CMake < 3.5 will be removed from a future version of\n  CMake.\n\n  Update the VERSION argument <min> value or use a ...<max> suffix to tell\n  CMake that the project does not need compatibility with older versions.\n\n\nCMake Error at CMakeLists.txt:57 (INCLUDE):\n  INCLUDE could not find requested file:\n\n    /home/linux/cardinal/contrib/moose/framework/contrib/wasp/TriBITS/tribits/TriBITS.cmake\n\n\nCMake Error at CMakeLists.txt:87 (TRIBITS_PROJECT_ENABLE_ALL):\n  Unknown CMake command \"TRIBITS_PROJECT_ENABLE_ALL\".\n\n\n-- Configuring incomplete, errors occurred!\nError: configure step for WASP failed to complete successfully",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8837337",
                          "updatedAt": "2024-03-19T08:13:02Z",
                          "publishedAt": "2024-03-19T08:08:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud @milljm Is there anything wrong with my CMake? But my CMake is the latest version:\n(base) [linux@localhost cardinal]$ cmake --version\ncmake version 3.29.0-rc4\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840268",
                          "updatedAt": "2024-03-19T12:45:56Z",
                          "publishedAt": "2024-03-19T12:44:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "@brandonlangley might know a bit more about this than I...",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840372",
                          "updatedAt": "2024-03-19T12:52:57Z",
                          "publishedAt": "2024-03-19T12:52:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Should I update moose to the latest version? But what I'm doing is building Cardinal without MOOSE's conda environment....",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840460",
                          "updatedAt": "2024-03-19T13:00:47Z",
                          "publishedAt": "2024-03-19T13:00:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I wanted to say that, but no... What you're doing is absolutely correct, and should always work (the script that you're running, to build wasp, should always work at whatever version of the script you have currently checked out in your version of the moose repository.)",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840499",
                          "updatedAt": "2024-03-19T13:03:44Z",
                          "publishedAt": "2024-03-19T13:03:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "The error says:\nCMake Error at CMakeLists.txt:57 (INCLUDE):\n  INCLUDE could not find requested file:\n\n    /home/linux/cardinal/contrib/moose/framework/contrib/wasp/TriBITS/tribits/TriBITS.cmake\n\nI check the folder /home/linux/cardinal/contrib/moose/framework/contrib/wasp/TriBITS and it's empty. Is this normal?",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840578",
                          "updatedAt": "2024-03-19T13:10:41Z",
                          "publishedAt": "2024-03-19T13:10:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I don't think it should be. And I would have assumed git submodule update --init --recursive would have populated the location for us. Maybe --recursive isn't doing what I thought it was. Also, running the update_and_rebuild_wasp.sh script should have pulled in all the data as well.\nWe can try the following, but I don't think it will make a difference:\ncd /home/linux/cardinal/contrib/moose\ngit submodule foreach --recursive git submodule update --init --recursive\nI don't know how more recursive we can get =D",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8840631",
                          "updatedAt": "2024-03-19T13:14:25Z",
                          "publishedAt": "2024-03-19T13:14:25Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ethan-xj"
                  },
                  "bodyText": "@milljm @brandonlangley Hello guys, after I deinit and rinit moose, the problem is finally solved! Thank you sooooo much!!!",
                  "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8842121",
                  "updatedAt": "2024-03-19T15:07:13Z",
                  "publishedAt": "2024-03-19T15:07:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "brandonlangley"
                          },
                          "bodyText": "Awesome, and great suggestion from @milljm.",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8842155",
                          "updatedAt": "2024-03-19T15:09:55Z",
                          "publishedAt": "2024-03-19T15:09:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "You all have helped me a lot. Thanks again!",
                          "url": "https://github.com/idaholab/moose/discussions/27115#discussioncomment-8842203",
                          "updatedAt": "2024-03-19T15:13:27Z",
                          "publishedAt": "2024-03-19T15:13:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "In getCrackTipSplitElementID could not find element id",
          "author": {
            "login": "gracelneil"
          },
          "bodyText": "Hi, I am trying to simulate mode 1 2D fracture using XFEM and I have adapted the /moose/modules/xfem/test/tests/solid_mechanics_basic/edge_crack_2d_propagation_mhs.i file to create my input file. I am running into the error \"In getCrackTipSplitElementID could not find element id\" after a couple of time steps. This error does not occur when using a course mesh for example nx=45 and ny =15. However when I change these to 100 I get the above error.This seems to correspond with the first time that the mesh needs to modify (see log output below). I have put the input file and crack mesh file below.\nI'd be grateful for any insight as to why this might be occurring and for any modifications to the input file I should make.\nThank you\nInput file:\n[GlobalParams]\n  displacements = 'disp_x disp_y'\n  volumetric_locking_correction = true\n[]\n\n[XFEM]\n  geometric_cut_userobjects = 'cut_mesh2'\n  qrule = volfrac\n  output_cut_plane = true\n[]\n\n[Mesh]\n[gen]\n  type = GeneratedMeshGenerator\n  dim = 2\n  nx = 100\n  ny = 100\n  xmin = 0\n  xmax = 1\n  ymin = -0.5\n  ymax = 0.5\n  elem_type = QUAD4\n[]\n[dispBlock]\n  type = BoundingBoxNodeSetGenerator\n  new_boundary = pull_set\n  bottom_left = '0 0.49 0'\n  top_right = '1 0.51 0'\n  input = gen\n[]\n[]\n\n[DomainIntegral]\n  integrals = 'Jintegral InteractionIntegralKI InteractionIntegralKII'\n  displacements = 'disp_x disp_y'\n  crack_front_points_provider = cut_mesh2\n  2d=true\n  number_points_from_provider = 2\n  crack_direction_method = CurvedCrackFront\n  radius_inner = '0.15'\n  radius_outer = '0.45'\n  poissons_ratio = 0.3\n  youngs_modulus = 207000\n  block = 0\n  incremental = true\n  used_by_xfem_to_grow_crack = true\n[]\n\n[UserObjects]\n  [cut_mesh2]\n    type = MeshCut2DFractureUserObject\n    mesh_file = 2d_moose_crack_in.e \n    k_critical=80\n    growth_increment = 0.01\n  []\n[]\n\n[Modules/TensorMechanics/Master]\n  [./all]\n    strain = FINITE\n    planar_formulation = plane_strain\n    add_variables = true\n    generate_output = 'stress_xx stress_yy vonmises_stress'\n  [../]\n[]\n\n[BCs]\n  [top_y]\n      type = FunctionDirichletBC\n      boundary = pull_set\n      variable = disp_y\n      function = 't'\n  []\n  [bottom_x]\n    type = DirichletBC\n    boundary = bottom\n    variable = disp_x\n    value = 0.0\n  []\n  [bottom_y]\n    type = DirichletBC\n    boundary = bottom\n    variable = disp_y\n    value = 0.0\n  []\n[]\n\n[Materials]\n  [./elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 207000\n    poissons_ratio = 0.3\n    block = 0\n  [../]\n  [./stress]\n    type = ComputeFiniteStrainElasticStress\n    block = 0\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n\n  solve_type = 'PJFNK'\n  petsc_options_iname = '-ksp_gmres_restart -pc_type -pc_hypre_type -pc_hypre_boomeramg_max_iter'\n  petsc_options_value = '201                hypre    boomeramg      8'\n\n  line_search = 'none'\n\n  [./Predictor]\n    type = SimplePredictor\n    scale = 1.0\n  [../]\n\n# controls for linear iterations\n  l_max_its = 100\n  l_tol = 1e-2\n\n# controls for nonlinear iterations\n  nl_max_its = 15\n  nl_rel_tol = 1e-8\n  nl_abs_tol = 1e-9\n\n# time control\n  start_time = 0.0\n  dt = 0.00001\n  end_time = 0.001\n  max_xfem_update = 100\n[]\n\n[Outputs]\n  exodus = true\n  file_base='./outputs/6.1finite_strain'\n  [xfemcutter]\n    type=XFEMCutMeshOutput\n    xfem_cutter_uo=cut_mesh2\n    file_base = './outputs/6.1.finite_strain_xfemcutter'\n  []\n  # console = false\n  [./console]\n    type = Console\n    output_linear = false\n    output_nonlinear = false\n  [../]\n[]\n\nCrack Mesh:\n[Mesh]\n  type = GeneratedMesh\n  dim = 1\n  nx = 100\n  xmax = 0.5\n[]\n\nTime Step 48, time = 0.00048, dt = 1e-05\n  Applying predictor with scale factor = 1\n 0 Nonlinear |R| = 2.989230e-05\n      0 Linear |R| = 2.989230e-05\n      1 Linear |R| = 6.807101e-06\n      2 Linear |R| = 2.458530e-06\n      3 Linear |R| = 9.281198e-07\n      4 Linear |R| = 2.954748e-07\n 1 Nonlinear |R| = 2.954747e-07\n      0 Linear |R| = 2.954747e-07\n      1 Linear |R| = 1.472131e-07\n      2 Linear |R| = 4.985958e-08\n      3 Linear |R| = 2.301068e-08\n      4 Linear |R| = 9.851403e-09\n      5 Linear |R| = 4.455223e-09\n      6 Linear |R| = 2.701000e-09\n 2 Nonlinear |R| = 2.702270e-09\n      0 Linear |R| = 2.702270e-09\n      1 Linear |R| = 1.898661e-09\n      2 Linear |R| = 9.219073e-10\n      3 Linear |R| = 3.659716e-10\n      4 Linear |R| = 1.522981e-10\n      5 Linear |R| = 6.775756e-11\n      6 Linear |R| = 3.374026e-11\n      7 Linear |R| = 1.363643e-11\n 3 Nonlinear |R| = 7.465812e-11\n Solve Converged!\n\nXFEM mesh cutting with element fragment algorithm complete\n# new nodes:        0\n# new elements:     0\n# deleted elements: 0\n\nXFEM did not modify mesh, continuing\n\nPostprocessor Values:\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n| time           | II_KII_1_1     | II_KII_2_1     | II_KI_1_1      | II_KI_2_1      | J_1_1          | J_2_1          |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n:                :                :                :                :                :                :                :\n|   3.400000e-04 |   8.252350e-01 |   5.411722e-01 |  -2.712189e+00 |   5.667688e+01 |  -9.417417e-05 |   1.404880e-02 |\n|   3.500000e-04 |   8.495260e-01 |   5.570520e-01 |  -2.791942e+00 |   5.834377e+01 |  -9.979280e-05 |   1.488728e-02 |\n|   3.600000e-04 |   8.738180e-01 |   5.729297e-01 |  -2.871695e+00 |   6.001065e+01 |  -1.055741e-04 |   1.575007e-02 |\n|   3.700000e-04 |   8.981111e-01 |   5.888053e-01 |  -2.951446e+00 |   6.167752e+01 |  -1.115180e-04 |   1.663715e-02 |\n|   3.800000e-04 |   9.224054e-01 |   6.046788e-01 |  -3.031197e+00 |   6.334439e+01 |  -1.176245e-04 |   1.754852e-02 |\n|   3.900000e-04 |   9.467007e-01 |   6.205502e-01 |  -3.110946e+00 |   6.501126e+01 |  -1.238936e-04 |   1.848420e-02 |\n|   4.000000e-04 |   9.709972e-01 |   6.364194e-01 |  -3.190695e+00 |   6.667812e+01 |  -1.303253e-04 |   1.944417e-02 |\n|   4.100000e-04 |   9.952947e-01 |   6.522865e-01 |  -3.270442e+00 |   6.834498e+01 |  -1.369196e-04 |   2.042843e-02 |\n|   4.200000e-04 |   1.019593e+00 |   6.681516e-01 |  -3.350189e+00 |   7.001183e+01 |  -1.436765e-04 |   2.143699e-02 |\n|   4.300000e-04 |   1.043893e+00 |   6.840145e-01 |  -3.429934e+00 |   7.167868e+01 |  -1.505959e-04 |   2.246985e-02 |\n|   4.400000e-04 |   1.068194e+00 |   6.998753e-01 |  -3.509679e+00 |   7.334552e+01 |  -1.576779e-04 |   2.352701e-02 |\n|   4.500000e-04 |   1.092496e+00 |   7.157339e-01 |  -3.589423e+00 |   7.501236e+01 |  -1.649224e-04 |   2.460845e-02 |\n|   4.600000e-04 |   1.116799e+00 |   7.315905e-01 |  -3.669165e+00 |   7.667919e+01 |  -1.723294e-04 |   2.571420e-02 |\n|   4.700000e-04 |   1.141103e+00 |   7.474450e-01 |  -3.748907e+00 |   7.834602e+01 |  -1.798989e-04 |   2.684423e-02 |\n|   4.800000e-04 |   1.165409e+00 |   6.121893e-01 |  -3.828648e+00 |   8.122040e+01 |  -1.876310e-04 |   2.799906e-02 |\n+----------------+----------------+----------------+----------------+----------------+----------------+----------------+\n\n\nTime Step 49, time = 0.00049, dt = 1e-05\n  Applying predictor with scale factor = 1\n 0 Nonlinear |R| = 2.988911e-05\n      0 Linear |R| = 2.988911e-05\n      1 Linear |R| = 6.806643e-06\n      2 Linear |R| = 2.458320e-06\n      3 Linear |R| = 9.280356e-07\n      4 Linear |R| = 2.954490e-07\n 1 Nonlinear |R| = 2.954489e-07\n      0 Linear |R| = 2.954489e-07\n      1 Linear |R| = 1.472007e-07\n      2 Linear |R| = 4.985566e-08\n      3 Linear |R| = 2.300876e-08\n      4 Linear |R| = 9.850569e-09\n      5 Linear |R| = 4.454955e-09\n      6 Linear |R| = 2.700872e-09\n 2 Nonlinear |R| = 2.702204e-09\n      0 Linear |R| = 2.702204e-09\n      1 Linear |R| = 1.898550e-09\n      2 Linear |R| = 9.218879e-10\n      3 Linear |R| = 3.659258e-10\n      4 Linear |R| = 1.521623e-10\n      5 Linear |R| = 6.776337e-11\n      6 Linear |R| = 3.374172e-11\n      7 Linear |R| = 1.363919e-11\n 3 Nonlinear |R| = 7.410972e-11\n Solve Converged!\n\nXFEM mesh cutting with element fragment algorithm complete\n# new nodes:        0\n# new elements:     2\n# deleted elements: 2\n\n\n*** ERROR ***\nIn getCrackTipSplitElementID could not find element id",
          "url": "https://github.com/idaholab/moose/discussions/25876",
          "updatedAt": "2024-03-19T10:17:32Z",
          "publishedAt": "2023-10-27T15:36:16Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@hugary1995",
                  "url": "https://github.com/idaholab/moose/discussions/25876#discussioncomment-7408391",
                  "updatedAt": "2023-10-28T00:26:30Z",
                  "publishedAt": "2023-10-28T00:26:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Sorry I missed this one! Unfortunately, I am not familiar with this issue. @jiangwen84 and @bwspenc can help.",
                          "url": "https://github.com/idaholab/moose/discussions/25876#discussioncomment-7412238",
                          "updatedAt": "2023-10-28T16:47:42Z",
                          "publishedAt": "2023-10-28T16:47:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "adhithya96"
                          },
                          "bodyText": "@gracelneil\nDid you resolve this error ? I was getting XFEM could not modify the mesh but for a different problem. If there is a solution for this, I can look into if it is useful for my case",
                          "url": "https://github.com/idaholab/moose/discussions/25876#discussioncomment-8838802",
                          "updatedAt": "2024-03-19T10:17:33Z",
                          "publishedAt": "2024-03-19T10:17:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to determine scaling",
          "author": {
            "login": "PEI0214"
          },
          "bodyText": "Hi\uff0c\nI saw the Convergence criteria in the porous flow module, but I still don't understand how to determine scaling. Can someone give an example of determining scaling?\nThank you for your help.",
          "url": "https://github.com/idaholab/moose/discussions/27102",
          "updatedAt": "2024-03-19T14:07:38Z",
          "publishedAt": "2024-03-15T15:24:47Z",
          "category": {
            "name": "Q&A Modules: Porous Flow"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou determine scaling usually by looking at the equation residuals. See the option in the Debug block\nIs automatic_scaling , a parameter to set in the executioner, not working for you?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27102#discussioncomment-8803841",
                  "updatedAt": "2024-03-15T15:42:24Z",
                  "publishedAt": "2024-03-15T15:42:22Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "When I use automatic_scaling, the computed results become very small. What could be the reason for this?",
                          "url": "https://github.com/idaholab/moose/discussions/27102#discussioncomment-8809444",
                          "updatedAt": "2024-03-16T04:46:29Z",
                          "publishedAt": "2024-03-16T04:46:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nscaling should not affect the results. It should affect the size of the residuals, especially when comparing between variables.\nWhich variables do you have?\nWithout scaling, what does this show?\n[Debug]\n  show_var_residual_norms = true\n\nWith automatic scaling, what does it show?\nDid you read this page?\nhttps://mooseframework.inl.gov/moose/source/systems/NonlinearSystemBase.html#scaling\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/27102#discussioncomment-8812330",
                          "updatedAt": "2024-03-16T15:00:42Z",
                          "publishedAt": "2024-03-16T15:00:42Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "This problem has been solved, thank you very much for your answer.",
                          "url": "https://github.com/idaholab/moose/discussions/27102#discussioncomment-8836609",
                          "updatedAt": "2024-03-19T06:58:14Z",
                          "publishedAt": "2024-03-19T06:58:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}