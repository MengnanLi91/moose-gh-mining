{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNC0wOS0xMVQxMjoxNzowNi0wNTowMM4AbUok"
    },
    "edges": [
      {
        "node": {
          "title": "Transition from libmesh to MFEM",
          "author": {
            "login": "b1llg"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI watched this presentation: Multiscale, Multiphysics Simulation Through Application Composition Using MOOSE - Derek Gaston. At the end of the presentation, Mr Gaston talks about tansitioning from libmesh to MFEM. I've check all the branches and didn't find any MFEM implementation.\nI wanted to know if it's in development and if it's a closed source version of MOOSE?",
          "url": "https://github.com/idaholab/moose/discussions/28288",
          "updatedAt": "2024-10-06T23:05:23Z",
          "publishedAt": "2024-08-02T09:45:29Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@friedmud",
                  "url": "https://github.com/idaholab/moose/discussions/28288#discussioncomment-10222029",
                  "updatedAt": "2024-08-02T09:56:09Z",
                  "publishedAt": "2024-08-02T09:56:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "b1llg"
                          },
                          "bodyText": "any update?",
                          "url": "https://github.com/idaholab/moose/discussions/28288#discussioncomment-10640674",
                          "updatedAt": "2024-09-13T17:49:32Z",
                          "publishedAt": "2024-09-13T17:49:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I dont think this is the plan anymore.\n@lindsayad do we have info we can share for the plan to leverage GPUs?",
                          "url": "https://github.com/idaholab/moose/discussions/28288#discussioncomment-10640726",
                          "updatedAt": "2024-09-13T17:54:23Z",
                          "publishedAt": "2024-09-13T17:54:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "We are finalizing our recommendation to DOE about what path we want to choose for GPU acceleration. MFEM is one option. We should have a recommendation within the next few days. However, even once that recommendation has been made, it's far from a done deal. Let's say we do decide to transition to MFEM as a finite element backend, at least for GPU-based computations. It's possible that as we perform the transition we run into some showstopper which we don't yet foresee. Mechanical contact is a big unknown, as an example",
                          "url": "https://github.com/idaholab/moose/discussions/28288#discussioncomment-10641719",
                          "updatedAt": "2024-09-13T19:59:33Z",
                          "publishedAt": "2024-09-13T19:59:33Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Outputting a material property as a vector",
          "author": {
            "login": "TheGreatCid"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHi all,\nI am trying to output a material property as a vector to store all of the quadrature point values on an element.\nI want to output this to Exodus.\nIt is unclear to me what property type template I should use for the material property. I cannot find examples of a vector or moosearray type material property.\nAny insight would be appreciated; thank you.",
          "url": "https://github.com/idaholab/moose/discussions/28610",
          "updatedAt": "2024-09-12T19:02:34Z",
          "publishedAt": "2024-09-12T16:46:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n~If you want to visualize it as a vector in paraview, just make sure you output each component, using for example a MaterialRealVectorAUx to 3 variables named with the _x _y and _z suffix\nFor example:\naaa_x., aaa_y and aaa_z~",
                  "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629273",
                  "updatedAt": "2024-09-12T18:21:05Z",
                  "publishedAt": "2024-09-12T17:58:57Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "So creating 4 properties for each _qp would essentially give the same result? Assuming they are named properly",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629423",
                          "updatedAt": "2024-09-12T18:15:12Z",
                          "publishedAt": "2024-09-12T18:15:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh nevermind I misread",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629455",
                          "updatedAt": "2024-09-12T18:19:27Z",
                          "publishedAt": "2024-09-12T18:19:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "Also, I did find vector material properties, but I am unsure of how to initialize/output them properly",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629472",
                          "updatedAt": "2024-09-12T18:21:09Z",
                          "publishedAt": "2024-09-12T18:21:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what type is your material property right now? Is it a vector (RealVectorValue)? or Real",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629485",
                          "updatedAt": "2024-09-12T18:22:21Z",
                          "publishedAt": "2024-09-12T18:22:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "I am trying to output a material property as a vector to store all of the quadrature point values on an element.\nI want to output this to Exodus.\n\nwhat for? Exodus is for visualization. If you want to visualize a material property, you project it onto a variable using an auxkernel, such as the MaterialRealAux\nIf you want to look at qp values, this object will output them to CSV\nhttps://mooseframework.inl.gov/source/vectorpostprocessors/ElementMaterialSampler.html",
                  "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629466",
                  "updatedAt": "2024-09-12T18:20:49Z",
                  "publishedAt": "2024-09-12T18:20:48Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "I am working on a project where I need the quadrature point information on each element for certain material properties. They need to be part of the data in the exodus file.",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629487",
                          "updatedAt": "2024-09-12T18:22:37Z",
                          "publishedAt": "2024-09-12T18:22:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "I can just make a material property for each qp for each element",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629503",
                          "updatedAt": "2024-09-12T18:25:07Z",
                          "publishedAt": "2024-09-12T18:25:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You could make a custom auxkernel, modifying the MaterialRealVectorAux to output only 1 _qp at a time to each variable",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629506",
                          "updatedAt": "2024-09-12T18:25:18Z",
                          "publishedAt": "2024-09-12T18:25:17Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "One variable for each _qp index on every element",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629508",
                          "updatedAt": "2024-09-12T18:25:49Z",
                          "publishedAt": "2024-09-12T18:25:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "That's a good idea as well, thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629542",
                          "updatedAt": "2024-09-12T18:27:15Z",
                          "publishedAt": "2024-09-12T18:27:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TheGreatCid"
                          },
                          "bodyText": "Well actually, MaterialRealVectorAux already has the option to specify the quad point",
                          "url": "https://github.com/idaholab/moose/discussions/28610#discussioncomment-10629849",
                          "updatedAt": "2024-09-12T19:02:34Z",
                          "publishedAt": "2024-09-12T19:02:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Regarding using Anisotropic heat conduction modules",
          "author": {
            "login": "abhi1587"
          },
          "bodyText": "Hi, I am trying to simulate a problem with a thick pipe with anisotropic thermal properties and a single fluid core. The issue is the THM module by default adds isotropic heat conduction kernels for the 3d structure. In my case the pipe.\nI did solve the issue by editing the source file of 'HeatStructureInterface.C' by adding a flag which when not true, allows me to add the desired anisotropic heat transfer kernels for the pipe.\nI wanted to ask the community if there is another way of achieving the same which does not involve the source code alteration.\nThanks.",
          "url": "https://github.com/idaholab/moose/discussions/28608",
          "updatedAt": "2024-09-16T18:05:38Z",
          "publishedAt": "2024-09-12T14:46:00Z",
          "category": {
            "name": "Q&A Modules: Thermal Hydraulics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe current workflow is HeatStructureInterface creates a HeatConductionModel which creates the isotropic heat conduction kernels.\nThis cannot be changed at the moment.\nWe are however moving towards having a PhysicsInterface for components, which creates a Physics (see https://mooseframework.inl.gov/syntax/Physics/index.html)\nand there you can create your own \"heat conduction physics\" which would be anisotropic. The existing one is not\nAn anisotropic option to the existing heat conduction physics would be a welcome contribution\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28608#discussioncomment-10627356",
                  "updatedAt": "2024-09-12T14:57:54Z",
                  "publishedAt": "2024-09-12T14:57:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Save the elastic energy density at each nodal as a auxvariable and then transfer it into subapp.",
          "author": {
            "login": "Yaode-Yin"
          },
          "bodyText": "Hello everyone,\nI try to implement the phase field fracture model via multiapp method. In the main app, the elastic problem is solved and then I want to save the elastic energy density at each nodal in a aux variable, so that the aux variable is finally transferred into the phase field app.\nMy question is that how can I save the elastic energy density calculated by  ComputeCrackedStress as a aux variable correctly?",
          "url": "https://github.com/idaholab/moose/discussions/28606",
          "updatedAt": "2024-09-12T13:49:28Z",
          "publishedAt": "2024-09-12T09:08:52Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs it a material property? You can project material properties onto auxiliary variables using auxkernels. This one for \"Real\" valued material properties\nhttps://mooseframework.inl.gov/source/auxkernels/MaterialRealAux.html\nthere is a different auxkernel for every type of material property\nAuxvariables can then be transferred. Note that you will suffer a projection error most likely between the material property and the auxiliary variable, unless the material property is actually represented exactly in the target finite element basis\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625437",
                  "updatedAt": "2024-09-12T11:56:27Z",
                  "publishedAt": "2024-09-12T11:55:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "Hi GiudGiud\nThanks for your reply. Actually I've used 'MaterialRealAux'. The code is like\n[AuxVariables]\n  [elastic_energy]\n   order = FIRST\n   family = MONOMIAL\n  []\n[]\n[AuxKernels]\n [elastic_energy]\n  type = MaterialRealAux\n  variable = elastic_energy\n  property = elastic_energy\n []\n[]\n\nHowever, this elastic_energy seems to return a volume-averaged quantity over the element. I think  what I need in a phase field fracture model is the strain energy density at each nodal or Gaussian point (if I'm not wrong). So how can I transfer them to the phase field app?",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625540",
                          "updatedAt": "2024-09-12T12:11:01Z",
                          "publishedAt": "2024-09-12T12:05:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "for nodal points use a nodal variable, like a first order lagrange.\nFor Gaussian points, what I mentioned above applies. You project the material property to a variable, then one can evaluate that variable at the Gauss points. They will only match rigorously if the projection step was exact because the material property was actually represented exactly by the finite element family & order you picked for the auxvariable",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625592",
                          "updatedAt": "2024-09-12T12:11:00Z",
                          "publishedAt": "2024-09-12T12:11:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "When I try to set elastic_energy as a first order lagrange variable, I receive the following errors.\nNodal AuxKernel 'elastic_energy' attempted to reference material property 'property'  Consider using an elemental auxiliary variable for 'elastic_energy'\nI don't know why it happens. How can I fix it?",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625659",
                          "updatedAt": "2024-09-12T12:17:56Z",
                          "publishedAt": "2024-09-12T12:17:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "material properties are not defined at nodes.\nSo a direct projection wont be possible. You can try to make this work\nhttps://mooseframework.inl.gov/source/auxkernels/ProjectedMaterialPropertyNodalPatchRecoveryAux.html\notherwise you can project onto a higher order monomial first, then use the ProjectionAux to project again onto a nodal variable\nThere's no real reason to use a nodal variable here imo, since material properties are using on quadrature points inside the element not at nodes",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625679",
                          "updatedAt": "2024-09-12T12:20:54Z",
                          "publishedAt": "2024-09-12T12:20:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Yaode-Yin"
                          },
                          "bodyText": "Yes, you're right! Thanks a lot!\nBut I still don't know if it is possible to transfer the positive part of the elastic strain energy density at the quadrature points. I think that's what I really need. Can I implement that in the present Transfer system?",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10625857",
                          "updatedAt": "2024-09-12T12:37:51Z",
                          "publishedAt": "2024-09-12T12:37:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Transferring material properties directly, not going through an auxiliary variable, would be a lot of work",
                          "url": "https://github.com/idaholab/moose/discussions/28606#discussioncomment-10626600",
                          "updatedAt": "2024-09-12T13:49:28Z",
                          "publishedAt": "2024-09-12T13:49:28Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Problems when installing MOOSE offline",
          "author": {
            "login": "Ethan-xj"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n I have consulted the Posting Guidelines.\n I have searched the Discussions Forum and MOOSE Framework Troubleshooting and have not found what I was looking for\n Q&A Getting Started is the most appropriate category for my question (trouble installing, beginner user, ...)\n\nIssue or question about MOOSE\nI followed the official offline installation guide and successfully built the PETSc library, but encountered issues when building the Libmesh library. I'm wondering if I might not have correctly understood the guide. Do I also need to manually download the dependencies required by Libmesh? I only downloaded the dependencies needed for PETSc using the ./scripts/update_and_rebuild_petsc.sh --CC=$CC --CXX=$CXX --FC=$FC --with-packages-download-dir=~/projects/downloads command and then directly ran the ./update_and_rebuild_libmesh.sh --skip-submodule-update command.\nEthan\n(Optional) code in question / simulation log / errors\nNo response\nEncountering Errors? Please include diagnostic output\nNo response",
          "url": "https://github.com/idaholab/moose/discussions/28535",
          "updatedAt": "2024-09-12T13:00:53Z",
          "publishedAt": "2024-09-04T12:24:05Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nWhen you download moose before going offline, this part git submodule foreach --recursive git submodule update --init should have taken care of downloading all the libmesh dependencies",
                  "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10545050",
                  "updatedAt": "2024-09-04T12:40:09Z",
                  "publishedAt": "2024-09-04T12:40:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "OK. I previously encountered network issues and didn't succeed, but now it's been stuck at Cloning into '/home/ethan/projects/moose/large_media'... for a long time. Is this normal?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10545921",
                          "updatedAt": "2024-09-04T13:29:27Z",
                          "publishedAt": "2024-09-04T13:29:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "that one is a little slow it s a big folder\nyou also dont need it unless you are building documentation",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10546272",
                          "updatedAt": "2024-09-04T13:51:00Z",
                          "publishedAt": "2024-09-04T13:50:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud OK. I've already downloaded the packages and got the offline.tar.gz\nBut when I build the libmesh, I got the error:\nchecking for the flags needed to use pthreads... -pthread\nconfigure: /vexcl/vexcl.hpp not found\nconfigure: /include/vexcl/vexcl.hpp not found\nchecking whether we are using the Microsoft C++ compiler... no\nchecking for CL/cl.h... no\nchecking for OpenCL/cl.h... no\nchecking for windows.h... no\nchecking for OpenCL library... no\nchecking for boost/system/error_code.hpp... yes\nchecking for the Boost system library... no\nconfigure: error: cannot find flags to link with the Boost system library (libboost-system)\nconfigure: error: ../../../contrib/metaphysicl/configure failed for contrib/metaphysicl\nRunning make -j 6...\nmake: *** No targets specified and no makefile found.  Stop.\n\nThe config is here:\nconfig.log\nAnd when I run the diagnostics.sh, it goes like:\n################################################################################################\nPython Sanity Checks\n\n/usr/bin/env python3 --version; (reporting as: Python 3.11.1) matches\nwhich python3 python;\n\n/home/hpc4123303047/ZXY/MOOSE/packages/Python-3.11.1/build/bin/python3 --version; == Python 3.11.1\nPython 2.7.5\nFAIL: Python 2.7.5\n/usr/bin/python --version (reporting as )) != Python 3.11.1\n\nThis will likely result in the TestHarness failing. Or WASP/HIT parsing errors.\n################################################################################################\nPython Modules (TestHarness, run-ability)\n\nOK\n\n\nchecks FAILED\n\nI'm not sure if the libmesh fail is because of the python version.\nI can't access the /usr/bin, so how can I tell MOOSE to use the python 3.11.1 to build libmesh?\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563548",
                          "updatedAt": "2024-09-06T01:35:25Z",
                          "publishedAt": "2024-09-06T01:35:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you could alias python to python3\nif you go in libmesh/contrib/metaphyscl what do you see?\nis there a config.log there? because I dont see much in the libmesh one\nand can you configure?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563581",
                          "updatedAt": "2024-09-06T01:42:20Z",
                          "publishedAt": "2024-09-06T01:42:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Yes I've used alias like: alias python='/home/hpc4123303047/ZXY/MOOSE/packages/Python-3.11.1/build/bin/python3'\nSo, I don't need to refer to the Python check results in the shell script, right?\nAnd I can configure in libmesh/contrib/metaphyscl:\n\nhere is the config.log:\nconfig.log",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563676",
                          "updatedAt": "2024-09-06T02:00:21Z",
                          "publishedAt": "2024-09-06T02:00:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "it exits with code 1 so it failed to configure in metaphyscl\nthe error is\nconfigure:35683: error: cannot find flags to link with the Boost system library (libboost-system)\n\nI wonder if there is an option to get boost from libmesh or petsc. Your system boost seems to not work",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563736",
                          "updatedAt": "2024-09-06T02:10:54Z",
                          "publishedAt": "2024-09-06T02:10:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "[hpc4123303047@ln08 metaphysicl]$ yum list installed | grep boost\nboost.x86_64                           1.53.0-27.el7                   @anaconda\nboost-atomic.x86_64                    1.53.0-27.el7                   @anaconda\nboost-chrono.x86_64                    1.53.0-27.el7                   @anaconda\nboost-context.x86_64                   1.53.0-27.el7                   @anaconda\nboost-date-time.x86_64                 1.53.0-27.el7                   @anaconda\nboost-devel.x86_64                     1.53.0-27.el7                   @anaconda\nboost-filesystem.x86_64                1.53.0-27.el7                   @anaconda\nboost-graph.x86_64                     1.53.0-27.el7                   @anaconda\nboost-iostreams.x86_64                 1.53.0-27.el7                   @anaconda\nboost-locale.x86_64                    1.53.0-27.el7                   @anaconda\nboost-math.x86_64                      1.53.0-27.el7                   @anaconda\nboost-program-options.x86_64           1.53.0-27.el7                   @anaconda\nboost-python.x86_64                    1.53.0-27.el7                   @anaconda\nboost-random.x86_64                    1.53.0-27.el7                   @anaconda\nboost-regex.x86_64                     1.53.0-27.el7                   @anaconda\nboost-serialization.x86_64             1.53.0-27.el7                   @anaconda\nboost-signals.x86_64                   1.53.0-27.el7                   @anaconda\nboost-system.x86_64                    1.53.0-27.el7                   @anaconda\nboost-test.x86_64                      1.53.0-27.el7                   @anaconda\nboost-thread.x86_64                    1.53.0-27.el7                   @anaconda\nboost-timer.x86_64                     1.53.0-27.el7                   @anaconda\nboost-wave.x86_64                      1.53.0-27.el7                   @anaconda\nibus-typing-booster.noarch             1.2.3-4.el7                     @anaconda\nMy system has the Boost library installed, but I'm still encountering issues. How should I resolve this?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563797",
                          "updatedAt": "2024-09-06T02:22:17Z",
                          "publishedAt": "2024-09-06T02:22:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Perhaps I could try downloading a fresh copy of the boost library?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10563813",
                          "updatedAt": "2024-09-06T02:24:00Z",
                          "publishedAt": "2024-09-06T02:24:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "That sounds like a good idea. In libmesh you can change the configure call to use a different boost.\nYou'll have to add those arguments to moose/scripts/configre_libmesh.sh if you go that route\n  --with-boost[=ARG]      use Boost library from a standard location\n  --with-boost-libdir=LIB_DIR\n                          Force given directory for boost libraries. Note that\n                          fails and you know exactly where your boost",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10582353",
                          "updatedAt": "2024-09-08T14:17:30Z",
                          "publishedAt": "2024-09-08T14:17:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@GiudGiud Hello Giud. I'm still stuck in this problem. I've installed the boost_1_85_0 from source. And in the bashrc file I set:\nexport CPLUS_INCLUDE_PATH=/home/hpc4123303047/ZXY/MOOSE/packages/boost_1_85_0/build/include:$CPLUS_INCLUDE_PATH\nexport LIBRARY_PATH=/home/hpc4123303047/ZXY/MOOSE/packages/boost_1_85_0/build/lib:$LIBRARY_PATH\nexport LD_LIBRARY_PATH=/home/hpc4123303047/ZXY/MOOSE/packages/boost_1_85_0/build/lib:$LD_LIBRARY_PATH\n\nBut the same errors appear when configuring:\nchecking for the Boost system library... no\nconfigure: error: cannot find flags to link with the Boost system library (libboost-system)\n\nDo you have any suggestions or good ideas on how to solve this issue? Thank you.\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10582451",
                          "updatedAt": "2024-09-08T14:36:01Z",
                          "publishedAt": "2024-09-08T14:36:00Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Ethan-xj"
                  },
                  "bodyText": "My fault. Sry for that. I just realize that the config.log is changed.\nHere is the new one:\nconfig.log",
                  "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10592855",
                  "updatedAt": "2024-09-09T15:32:09Z",
                  "publishedAt": "2024-09-09T15:32:08Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@milljm I noticed that there's --prefix=/usr/local in it. But I can't access /usr/local. Could this be the source of the problem\uff1f",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10592878",
                          "updatedAt": "2024-09-09T15:34:52Z",
                          "publishedAt": "2024-09-09T15:34:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I was just going to report that, yes. Everything looked fine up until the contribs began to config.\nAdd a prefix argument:\n--prefix=/home/hpc4123303047/ZXY/MOOSE/packages/libmesh\n(just a guess as to where you want libmesh). Basically, I would place it right along side where ever you installed PETSc.\nWhere ever the location you pick, you'll want to then set LIBMESH_DIR= to point to this location, when you eventually get to the step of building MOOSE.\nSo all in all, in the end (if the above works):\nexport PETSC_DIR=/some/path/to/where/you/installed/petsc\nexport LIBMESH_DIR=/home/hpc4123303047/ZXY/MOOSE/packages/libmesh\ncd ~/projects/moose/test\nmake\nEdit: UGH... I always forget WASP :) You'll need to build WASP, and then set WASP_DIR= much in the same way above. And then you can build MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10592996",
                          "updatedAt": "2024-09-09T15:46:59Z",
                          "publishedAt": "2024-09-09T15:45:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "@milljm I'm afraid the issue still hasn't been resolved. I've set all the paths, including the prefix and specified the Boost path. However, it still throws errors. I ran the configure directly in the metaphysiclfolder(/home/hpc4123303047/projects/moose/libmesh/contrib/metaphysicl) and the config.log is here:\nconfig.log\nCould you find any clues from it?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10608700",
                          "updatedAt": "2024-09-11T02:21:48Z",
                          "publishedAt": "2024-09-11T02:21:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "Could it be an issue with libboost_system-mt.so? I noticed that it appears multiple times in the config.log, but I don't see this file in my boost/build/lib folder.",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10608725",
                          "updatedAt": "2024-09-11T02:24:58Z",
                          "publishedAt": "2024-09-11T02:24:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "The problem is solved. I use ./configure --help to check the rules of the metaphysic's configuration. I should use --with--boost=/root/to/boost. And it succeeds. Thank you all :)",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10620455",
                          "updatedAt": "2024-09-12T01:10:48Z",
                          "publishedAt": "2024-09-12T01:10:48Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so you had to configure metaphysicl individually? The boost options did not propagate from libmesh?",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10625460",
                          "updatedAt": "2024-09-12T11:57:20Z",
                          "publishedAt": "2024-09-12T11:57:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Ethan-xj"
                          },
                          "bodyText": "No, I was just saying that I discovered the issue when compiling metaphysic separately. When I used the shell script ./update_and_rebuild_libmesh.sh --skip-submodule-update with the --with-boost option, I successfully compiled libMesh, and I also successfully installed MOOSE and passed the tests.\nThank you all :)\nEthan",
                          "url": "https://github.com/idaholab/moose/discussions/28535#discussioncomment-10626097",
                          "updatedAt": "2024-09-12T13:00:37Z",
                          "publishedAt": "2024-09-12T13:00:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "add_subdomain_ids and Exodus output",
          "author": {
            "login": "Wendy-Ji"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello,\nI am using add_subdomain_ids to add an empty subdomain (see below code). I need this for my simulations which start off with empty subdomains and have elements later added to them.\nWhen I turn on the Exodus output, I get the below error. If the variable isn't MONOMIAL and CONSTANT, then this error won't appear. The same problem occurs if I use add_subdomain_names. I'm not sure if I did something wrong with the setup, or if you can't have an Exodus output for this particular setup.\nThank you.\nWendy\n\n[Problem]\n  solve = false\n[]\n\n[Mesh]\n  [generated]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 10\n    ny = 10\n  []\n  add_subdomain_ids = 1\n[]\n\n[Variables]\n  [dummy]\n    family = MONOMIAL\n    order = CONSTANT\n    block = '0 1'\n  []\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  end_time = 2\n[]\n\n[Outputs]\n  exodus = True\n[]",
          "url": "https://github.com/idaholab/moose/discussions/28485",
          "updatedAt": "2024-09-12T06:01:19Z",
          "publishedAt": "2024-08-28T18:35:46Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hello\nthis is a known issue, you need to actually have an element in subdomain 1 before outputting to exodus (for now)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10478840",
                  "updatedAt": "2024-08-28T18:47:51Z",
                  "publishedAt": "2024-08-28T18:47:49Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Wendy-Ji"
                          },
                          "bodyText": "Oh, I guess I haven't run into the problem before because I've been using the default family/order for variables, and that outputs to exodus fine. Is it going to be fixed?",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10478903",
                          "updatedAt": "2024-08-28T18:53:04Z",
                          "publishedAt": "2024-08-28T18:53:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Dear Guillaume, I have the same problem right now (ExodusII_IO_Helper: block id XXX not found in block_ids.). It makes it difficult for us to use the TimedSubdomainModifier .\nYou wrote there must be at least one element in each subdomain before outputting to exodus. In each timstep? Or just the first one?\nThe error message states the error is thrown in libmesh. According to a backtrace I did with gdb Moose is calling libmesh in line 343 of Exodus.C (method Exodus::outputElementalVariables()). Could we insert some kind of if-condition to avoid the error? What should be checked?\n\n  \n    \n      moose/framework/src/outputs/Exodus.C\n    \n    \n        Lines 333 to 343\n      in\n      82b674a\n    \n  \n  \n    \n\n        \n          \n           Exodus::outputElementalVariables() \n        \n\n        \n          \n           { \n        \n\n        \n          \n             // Make sure the the file is ready for writing of elemental data \n        \n\n        \n          \n             if (!_exodus_initialized || !hasNodalVariableOutput()) \n        \n\n        \n          \n               outputEmptyTimestep(); \n        \n\n        \n          \n            \n        \n\n        \n          \n             // Write the elemental data \n        \n\n        \n          \n             std::vector<std::string> elemental(getElementalVariableOutput().begin(), \n        \n\n        \n          \n                                                getElementalVariableOutput().end()); \n        \n\n        \n          \n             _exodus_io_ptr->set_output_variables(elemental); \n        \n\n        \n          \n             _exodus_io_ptr->write_element_data(*_es_ptr);",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10609870",
                          "updatedAt": "2024-09-11T05:47:42Z",
                          "publishedAt": "2024-09-11T05:47:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "We have no investigated it further.\nWe could remove the non-existing block from the element data before sending it to the exodus writer. That would be fine imo but it s a little hacky. The better fix is in libmesh, modifying write_element_data to not die on missing subdomains",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10617291",
                          "updatedAt": "2024-09-11T17:26:22Z",
                          "publishedAt": "2024-09-11T17:26:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Should I create an issue over there? Or do you have better connections with the guys there?",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10617460",
                          "updatedAt": "2024-09-11T17:42:47Z",
                          "publishedAt": "2024-09-11T17:42:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Sure",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10619733",
                          "updatedAt": "2024-09-11T22:21:11Z",
                          "publishedAt": "2024-09-11T22:21:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jmeier"
                          },
                          "bodyText": "Please find the issue with libmesh here: libMesh/libmesh#3949",
                          "url": "https://github.com/idaholab/moose/discussions/28485#discussioncomment-10621960",
                          "updatedAt": "2024-09-12T06:01:20Z",
                          "publishedAt": "2024-09-12T06:01:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to set boundary conditions for a newly created subdomain?",
          "author": {
            "login": "PEI0214"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello\nI want to compute only in the newly created subdomain. So I only set the variables in the newly created subfield. But when I set the boundary condition, I got the following error:\n*** ERROR ***\n'archor_x' of type 'FunctionDirichletBC' depends on variable(s) 'disp_y,disp_z'. However, that variable does not appear to be defined on (all of) boundary ''.\n\nIs there any way to set boundary conditions for newly created subdomains?",
          "url": "https://github.com/idaholab/moose/discussions/28549",
          "updatedAt": "2024-09-11T23:36:33Z",
          "publishedAt": "2024-09-05T13:50:52Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "for newly created subdomains?\n\ndo you mean newly created boundaries?\nWhat did you specify for the boundary of FunctionDirichletBC ?",
                  "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10559140",
                  "updatedAt": "2024-09-05T15:17:05Z",
                  "publishedAt": "2024-09-05T15:17:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "PEI0214"
                  },
                  "bodyText": "For newly created subdomains refer to blocks.\nadd_subdomain_ids = '${new_block_ids}'\n\nFunctionDirichletBC limits the displacement of the boundary.\nThe variables and boundary conditions are set as follows:\n[Variables]\n  [disp_x]\n    block = '${new_block_ids}'\n  []\n  [disp_y]\n    block = '${new_block_ids}'\n  []\n  [disp_z]\n    block = '${new_block_ids}'\n  []\n[]\n\n[BCs]\n\n  [archor_x]\n    type = FunctionDirichletBC\n    boundary = 'bottom'\n    variable = disp_x\n    value = 0\n  []\n\n  [archor_y]\n    type = FunctionDirichletBC\n    boundary = 'bottom'\n    variable = disp_y\n    value = 0\n  []\n\n  [archor_z]\n    type = FunctionDirichletBC\n    boundary = 'bottom'\n    variable = disp_z\n    value = 0\n  []\n[]\n\nThe 'bottom' is the boundary of the initial grid.  Is there a way to add a boundary to a newly created block?",
                  "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10564971",
                  "updatedAt": "2024-09-06T06:06:58Z",
                  "publishedAt": "2024-09-06T05:57:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can create new boundary using this object\nhttps://mooseframework.inl.gov/source/meshmodifiers/SidesetAroundSubdomainUpdater.html\nand predeclare it using the add_sideset_ids / names parameter",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10568674",
                          "updatedAt": "2024-09-06T12:15:43Z",
                          "publishedAt": "2024-09-06T12:15:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "That's not what I wanted. My grid and input files are as follows:\nMoves the initial grid blocks to the newly created blocks. And set the boundary conditions. Set the displacement of the bottom boundary (including 'bottom, left1, left2, left3, right1, right2, right3') to 0.\nCan you run it? And give some advice? Is there a way to set variables for boundaries?",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10570382",
                          "updatedAt": "2024-09-19T08:46:43Z",
                          "publishedAt": "2024-09-06T14:56:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "@GiudGiud Hello\uff0cdo you have any good suggestions?",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10582361",
                          "updatedAt": "2024-09-08T14:18:53Z",
                          "publishedAt": "2024-09-08T14:18:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I ll take a look. I still dont understand what you really want but it might come\n\nIs there a way to set variables for boundaries?\n\nUsing dirichlet boundary conditions",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10582376",
                          "updatedAt": "2024-09-08T14:22:11Z",
                          "publishedAt": "2024-09-08T14:22:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "ok I think I know what you are trying to do.\nThere's an integrity check on the variable restrictions vs the dirichlet BCs boudnary restrictions\nSet this parameter to bypass it\n[Problem]\n  boundary_restricted_node_integrity_check = false\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10583602",
                  "updatedAt": "2024-09-08T17:43:00Z",
                  "publishedAt": "2024-09-08T17:42:59Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "That solves the problem. Thank you very much for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10585634",
                          "updatedAt": "2024-09-09T02:36:31Z",
                          "publishedAt": "2024-09-09T02:36:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Hello\nThe following error occurred when I set the pressure. Do you have any good suggestions?\n*** ERROR ***\nError constructing object 'wateface_pressure' while retrieving value for 'variable' parameter! Did you forget to set 'variable' or set it to '' (empty string) by accident?\n\nThe pressure boundary conditions are set as follows:\n[Functions]\n  [w_p1]\n    type = ParsedFunction\n    expression = 'max(1e3 * (t -10), 0)'\n  []\n[]\n\n[BCs]\n  [wateface_pressure]\n    type = Pressure\n    boundary = 'top'\n    function = w_p1\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10588869",
                          "updatedAt": "2024-09-09T09:35:16Z",
                          "publishedAt": "2024-09-09T09:35:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The error message is correct here I think.\nYou are missing the variable parameter in this water_pressure BC",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10589653",
                          "updatedAt": "2024-09-09T10:59:33Z",
                          "publishedAt": "2024-09-09T10:59:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "When I add a variable, I still get this error.",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590081",
                          "updatedAt": "2024-09-19T08:47:27Z",
                          "publishedAt": "2024-09-09T11:45:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the syntax for the Pressure action is wrong, it should not be nested under BCs, but under Pressure\nsee this page\nhttps://mooseframework.inl.gov/syntax/BCs/Pressure/index.html",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590123",
                          "updatedAt": "2024-09-09T11:50:15Z",
                          "publishedAt": "2024-09-09T11:50:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "https://mooseframework.inl.gov/syntax/BCs/Pressure/index.html\nThe Pressure in this file should be under BCs. I still get an error when I add Pressure according to the syntax in the file.",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590206",
                          "updatedAt": "2024-09-09T11:58:33Z",
                          "publishedAt": "2024-09-09T11:58:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "right but it should be\n[BCs]\n  [Pressure]\n    [wateface_pressure]\n      boundary = 'bottom'\n      function = w_p1\n      displacements = 'disp_x disp_y disp_z'\n     []\n  []\n[]\n\nbased on the example",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590458",
                          "updatedAt": "2024-09-09T12:33:40Z",
                          "publishedAt": "2024-09-09T12:23:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "I did so. But that didn't work. Can you run it?",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590508",
                          "updatedAt": "2024-09-09T12:29:32Z",
                          "publishedAt": "2024-09-09T12:29:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what does your BC block look like now?",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590603",
                          "updatedAt": "2024-09-09T12:38:26Z",
                          "publishedAt": "2024-09-09T12:38:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "[BCs]\n  [archor_x]\n    type = DirichletBC\n    boundary = 'bottom left1 left2 left3 right1 right2 right3'\n    variable = disp_x\n    value = 0\n  []\n\n  [archor_y]\n    type = DirichletBC\n    boundary = 'bottom left1 left2 left3 right1 right2 right3'\n    variable = disp_y\n    value = 0\n  []\n\n  [archor_z]\n    type = DirichletBC\n    boundary = 'bottom left1 left2 left3 right1 right2 right3'\n    variable = disp_z\n    value = 0\n  []\n\n  [Pressure]\n    [pressure1]\n      boundary = 'top'\n      function = 'max(1000 * (t - 10) ,0)'\n    []\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/28549#discussioncomment-10590713",
                          "updatedAt": "2024-09-09T12:46:44Z",
                          "publishedAt": "2024-09-09T12:46:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Multiapp setting in transient and SIMPLE executioner",
          "author": {
            "login": "lucuo"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nI am now trying to use multiapps to solve the thermal fluid-structure coupling calculation. The mainapp for solid domain calculations, his executioner settings as follows.\n[Executioner]\n  type = Transient \n  solve_type = 'PJFNK'\n  petsc_options_iname = '-ksp_gmres_restart -pc_type -pc_hypre_type -pc_hypre_boomeramg_max_iter'\n  petsc_options_value = '201    hypre   boomeramg    4'\n  line_search = 'none'\n  automatic_scaling = true\n  l_max_its = 50\n  nl_max_its = 15\n  nl_forced_its = 2  # I set it, but it was not run in step of multiapp\n  nl_rel_tol = 1e-4\n  nl_abs_tol = 1e-10\n  start_time = 0.0\n  end_time = 10\n  dt = 1\n[]\n\nMy subapp uses the SIMPLENonlinearAssembly algorithm to solve, and his executioner Settings are as follows.\n[Executioner]\n  type = SIMPLENonlinearAssembly\n  # petsc_options_iname = '-pc_type -pc_hypre_type -pc_factor_shift_type'\n  # petsc_options_value = 'hypre boomeramg NONZERO'\n  rhie_chow_user_object = 'rc'\n  momentum_systems = 'u_system v_system w_system'\n  pressure_system = 'pressure_system'\n  energy_system = 'energy_system'\n  pressure_gradient_tag = ${pressure_tag}\n  momentum_equation_relaxation = 0.05\n  pressure_variable_relaxation = 0.05\n   energy_equation_relaxation = 0.05\n  num_iterations = 100\n  pressure_absolute_tolerance = 1e-2\n  momentum_absolute_tolerance = 1e-2\n  ### energy_absolute_tolerance = 1e-2\n  print_fields = false\n  #output_linear_residuals = true  # \u8f93\u51fa\u6bcf\u6b65\u7ebf\u6027\u6b8b\u5dee\n  #output_nonlinear_residuals = true  # \u8f93\u51fa\u6bcf\u6b65\u975e\u7ebf\u6027\u6b8b\u5dee\n  momentum_l_abs_tol = 1e-2\n  pressure_l_abs_tol = 1e-2\n  ### energy_l_abs_tol = 1e-2\n  momentum_l_tol = 0\n  pressure_l_tol = 0\n  ### energy_l_tol = 0\n  momentum_petsc_options_iname = '-pc_type -pc_hypre_type -ksp_type -ksp_rtol -ksp_gmres_restart -pc_factor_shift_type'\n  momentum_petsc_options_value = 'hypre boomeramg gmres     1e-2      300  NONZERO'\n  pressure_petsc_options_iname = '-pc_type -pc_hypre_type -pc_factor_shift_type'\n  pressure_petsc_options_value = 'hypre boomeramg NONZERO'\n  energy_petsc_options_iname = '-pc_type -pc_hypre_type -pc_factor_shift_type'\n  energy_petsc_options_value = 'hypre boomeramg NONZERO'\n[]\n\nThe multiapps type I use is , which is set as follows.\n[MultiApps]\n    [./sub_up]\n      type = FullSolveMultiApp\n      input_files = '3d-segregated-energy.i'\n      output_in_position = true\n      execute_on = timestep_end\n      ignore_solve_not_converge = true\n    [../]\n[]\n\nNow the problem I have is this. In the process of iterative solution, the main program calculation needs to carry out nonlinear iterative solution for many times, but in this calculation, the mainapp only carries out linear iteration from the iteration of the second step.(I want him to run nonlinear iterations and I set nonlinear iterations nl_forced_its = 2) . What is the cause of this problem\nThe output recording process of the program is as follows (the output of fluid domain iteration is hidden by me). There will be nonlinear iteration in the first step, but only linear iteration will be carried out from the second step. May I ask whether the problem is set by Executioner or the problem of FullSolveMultiApp? How can I improve? Thank you very much for your help.\nMOOSE Version:           git commit dc00ea5 on 2024-07-03\nLibMesh Version:         \nPETSc Version:           3.20.3\nSLEPc Version:           3.20.1\nCurrent Time:            Mon Sep  9 20:43:34 2024\nExecutable Timestamp:    Thu Aug 15 22:55:21 2024\n\nCheckpoint:\n  Wall Time Interval:      Every 3600.000000 s\n  User Checkpoint:         Disabled\n  # Checkpoints Kept:      2\n  Execute On:              TIMESTEP_END \n\nParallelism:\n  Num Processors:          24\n  Num Threads:             1\n\nMesh: \n  Parallel Type:           replicated\n  Mesh Dimension:          3\n  Spatial Dimension:       3\n  Nodes:                   \n    Total:                 17556\n    Local:                 962\n    Min/Max/Avg:           682/962/731\n  Elems:                   \n    Total:                 15600\n    Local:                 650\n    Min/Max/Avg:           650/650/650\n  Num Subdomains:          1\n  Num Partitions:          24\n  Partitioner:             centroid\n\nNonlinear System:\n  Num DOFs:                70224\n  Num Local DOFs:          3848\n  Variables:               { \"temp\" \"disp_x\" \"disp_y\" \"disp_z\" } \n  Finite Element Types:    \"LAGRANGE\" \n  Approximation Orders:    \"FIRST\" \n\nAuxiliary System:\n  Num DOFs:                189156\n  Num Local DOFs:          8112\n  Variables:               { \"ht_flux\" \"f_temp_element\" \"f_temp_element2\" } \"f_temp_node\" { \"channel_Hw\" \n                             \"vonmises_stress\" \"stress_xx\" \"stress_yy\" \"stress_zz\" \"strain_xx\" \"strain_yy\" \n                             \"strain_zz\" } \n  Finite Element Types:    \"MONOMIAL\" \"LAGRANGE\" \"MONOMIAL\" \n  Approximation Orders:    \"CONSTANT\" \"FIRST\" \"CONSTANT\" \n\nExecution Information:\n  Executioner:             Transient\n  TimeStepper:             ConstantDT\n  TimeIntegrator:          ImplicitEuler\n  Solver Mode:             Preconditioned JFNK\n  PETSc Preconditioner:    lu mat_superlu_dist_fact: SamePattern  mat_superlu_dist_replacetinypivot: true \n  MOOSE Preconditioner:    SMP\n\n\ufffd[36msub_up0: \ufffd[39mParallelism:\n\ufffd[36msub_up0: \ufffd[39m  Num Processors:          24\n\ufffd[36msub_up0: \ufffd[39m  Num Threads:             1\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mMesh: \n\ufffd[36msub_up0: \ufffd[39m  Parallel Type:           replicated\n\ufffd[36msub_up0: \ufffd[39m  Mesh Dimension:          3\n\ufffd[36msub_up0: \ufffd[39m  Spatial Dimension:       3\n\ufffd[36msub_up0: \ufffd[39m  Nodes:                   \n\ufffd[36msub_up0: \ufffd[39m    Total:                 33440\n\ufffd[36msub_up0: \ufffd[39m    Local:                 1659\n\ufffd[36msub_up0: \ufffd[39m    Min/Max/Avg:           1071/1692/1393\n\ufffd[36msub_up0: \ufffd[39m  Elems:                   \n\ufffd[36msub_up0: \ufffd[39m    Total:                 30000\n\ufffd[36msub_up0: \ufffd[39m    Local:                 1219\n\ufffd[36msub_up0: \ufffd[39m    Min/Max/Avg:           1214/1283/1250\n\ufffd[36msub_up0: \ufffd[39m  Num Subdomains:          1\n\ufffd[36msub_up0: \ufffd[39m  Num Partitions:          24\n\ufffd[36msub_up0: \ufffd[39m  Partitioner:             metis\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mNonlinear System 0:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                30000\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          1219\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"vel_x\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mNonlinear System 1:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                30000\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          1219\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"vel_y\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mNonlinear System 2:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                30000\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          1219\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"vel_z\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mNonlinear System 3:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                30000\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          1219\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"pressure\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mNonlinear System 4:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                30000\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          1219\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"T_fluid\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mAuxiliary System:\n\ufffd[36msub_up0: \ufffd[39m  Num DOFs:                63440\n\ufffd[36msub_up0: \ufffd[39m  Num Local DOFs:          2878\n\ufffd[36msub_up0: \ufffd[39m  Variables:               \"f_soild_flux\" \"h_flux\" \n\ufffd[36msub_up0: \ufffd[39m  Finite Element Types:    \"MONOMIAL\" \"LAGRANGE\" \n\ufffd[36msub_up0: \ufffd[39m  Approximation Orders:    \"CONSTANT\" \"FIRST\" \n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mExecution Information:\n\ufffd[36msub_up0: \ufffd[39m  Executioner:             SIMPLENonlinearAssembly\n\ufffd[36msub_up0: \ufffd[39m  Solver Mode:             Preconditioned JFNK\n\ufffd[36msub_up0: \ufffd[39m  MOOSE Preconditioner 0:  FDP\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m\n\nTime Step 0, time = 0\n\nTime Step 1, time = 1, dt = 1\n 0 Nonlinear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      0 Linear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m1.471996e+04\ufffd[39m\n 1 Nonlinear |R| = \ufffd[32m3.096357e+02\ufffd[39m\n  Finished Solving                                                                       [\ufffd[33m 15.60 s\ufffd[39m] [\ufffd[33m  392 MB\ufffd[39m]\n\ufffd[32m Solve Converged!\ufffd[39m\n\n\ufffd[36m\n*** Info ***\nAutomated diagnosis did not detect any floating point indetermination in the transfer. You may consider turning it off using `search_value_conflicts=false` to improve performance/scalability.\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.999999\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.999999\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.....\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 40\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m1.246887e-01\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247223e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m9.960882e-02\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306563e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017551e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m358.89 s\ufffd[39m] [\ufffd[33m  400 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m358.92 s\ufffd[39m] [\ufffd[33m  400 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m3.096357e+02\ufffd[39m\n\nTime Step 2, time = 2, dt = 1\n      0 Linear |R| = \ufffd[32m4.669242e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.541467e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m2.112772e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m1.291262e+07\ufffd[39m\n      4 Linear |R| = \ufffd[32m6.802449e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m3.421253e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m1.878802e+06\ufffd[39m\n      7 Linear |R| = \ufffd[32m1.198107e+06\ufffd[39m\n      8 Linear |R| = \ufffd[32m6.219310e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m3.416913e+05\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.459476\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m0.429843\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.622183\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m0.10511\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m0.0352354\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.....\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 40\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m2.624380e-03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247218e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m2.370897e-03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306599e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017562e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m173.93 s\ufffd[39m] [\ufffd[33m  401 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m173.94 s\ufffd[39m] [\ufffd[33m  401 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m4.669242e+07\ufffd[39m\n\nTime Step 3, time = 3, dt = 1\n      0 Linear |R| = \ufffd[32m4.669656e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.541385e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m2.113508e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m1.292112e+07\ufffd[39m\n      4 Linear |R| = \ufffd[32m6.823898e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m3.418508e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m1.874484e+06\ufffd[39m\n      7 Linear |R| = \ufffd[32m1.194857e+06\ufffd[39m\n      8 Linear |R| = \ufffd[32m6.179547e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m3.387257e+05\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.173687\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m0.303465\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.141008\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m0.0833745\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m0.0105228\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.....\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 40\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m1.508197e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247218e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m1.533745e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306601e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017569e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m174.32 s\ufffd[39m] [\ufffd[33m  402 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m174.32 s\ufffd[39m] [\ufffd[33m  402 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m4.669656e+07\ufffd[39m\n\nTime Step 4, time = 4, dt = 1\n      0 Linear |R| = \ufffd[32m4.669402e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.541127e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m2.113192e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m1.291635e+07\ufffd[39m\n      4 Linear |R| = \ufffd[32m6.819506e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m3.417130e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m1.874242e+06\ufffd[39m\n      7 Linear |R| = \ufffd[32m1.195229e+06\ufffd[39m\n      8 Linear |R| = \ufffd[32m6.187997e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m3.395698e+05\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.0418871\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m0.00252954\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.0492365\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m0.00338572\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m0.00664526\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.....\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 40\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m1.475322e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247218e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m1.479738e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306601e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017576e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m182.01 s\ufffd[39m] [\ufffd[33m  403 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m182.06 s\ufffd[39m] [\ufffd[33m  403 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m4.669402e+07\ufffd[39m\n\nTime Step 5, time = 5, dt = 1\n      0 Linear |R| = \ufffd[32m4.669405e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.541139e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m2.113199e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m1.291664e+07\ufffd[39m\n      4 Linear |R| = \ufffd[32m6.820135e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m3.417141e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m1.874041e+06\ufffd[39m\n      7 Linear |R| = \ufffd[32m1.194833e+06\ufffd[39m\n      8 Linear |R| = \ufffd[32m6.182486e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m3.390971e+05\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.0347057\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m0.000820605\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.0346063\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m0.00255769\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m0.00485941\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n......\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 40\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m1.478493e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247218e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m1.478046e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306601e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017583e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m172.11 s\ufffd[39m] [\ufffd[33m  403 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m172.14 s\ufffd[39m] [\ufffd[33m  403 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m4.669405e+07\ufffd[39m",
          "url": "https://github.com/idaholab/moose/discussions/28578",
          "updatedAt": "2024-09-11T21:45:20Z",
          "publishedAt": "2024-09-09T13:53:26Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI think you need to take a step back and make sure both simulations converge before attempting to couple them.\nTHe convergence history shows both solves are not converging, with very high residuals left\nYou should set both linear and nonlinear residuals to output in the Outputs block\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10592560",
                  "updatedAt": "2024-09-09T15:06:17Z",
                  "publishedAt": "2024-09-09T15:06:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lucuo"
                          },
                          "bodyText": "Yes, subapp computing NS computation has not converged. But the first step of the transient calculation of the mainapp is convergent. So, the mainapp transient calculation does not do nonlinear iteration in the second step because the subapp does not converge?\nTime Step 0, time = 0\n\nTime Step 1, time = 1, dt = 1\n 0 Nonlinear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      0 Linear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m1.471996e+04\ufffd[39m\n 1 Nonlinear |R| = \ufffd[32m3.096357e+02\ufffd[39m\n      0 Linear |R| = \ufffd[32m3.096357e+02\ufffd[39m\n      1 Linear |R| = \ufffd[32m1.142657e-01\ufffd[39m\n 2 Nonlinear |R| = \ufffd[32m9.742861e-04\ufffd[39m\n      0 Linear |R| = \ufffd[32m9.742861e-04\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.132244e-07\ufffd[39m\n 3 Nonlinear |R| = \ufffd[32m5.947938e-08\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\nCurrently Executing\n  Finished Solving \n\nAutomated diagnosis did not detect any floating point indetermination in the transfer. You may consider turning it off using `search_value_conflicts=false` to improve performance/scalability.\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.999999\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.999999\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.....\n.....\n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 50\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m2.369030e+00\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m2.247225e+05\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m2.368925e+00\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m5.306184e+03\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m2.017603e+10\ufffd[39m\n    Finished Executing MultiApps                                                         [\ufffd[33m 49.71 s\ufffd[39m] [\ufffd[33m  389 MB\ufffd[39m]\n  Finished Executing MultiApps                                                           [\ufffd[33m 49.71 s\ufffd[39m] [\ufffd[33m  389 MB\ufffd[39m]\n\nOutlier Variable Residual Norms:\n  temp: \ufffd[31m5.947938e-08\ufffd[39m\n\nTime Step 2, time = 2, dt = 1\n      0 Linear |R| = \ufffd[32m4.669277e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.541490e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m2.112786e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m1.291270e+07\ufffd[39m\n      4 Linear |R| = \ufffd[32m6.802496e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m3.421276e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m1.878814e+06\ufffd[39m\n      7 Linear |R| = \ufffd[32m1.198115e+06\ufffd[39m\n      8 Linear |R| = \ufffd[32m6.219352e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m3.416936e+05\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m0.704326\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m0.829437\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m0.691473\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m0.0988212\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m0.0926524\ufffd[39m",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10593476",
                          "updatedAt": "2024-09-09T16:28:46Z",
                          "publishedAt": "2024-09-09T16:27:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You should remove this for now\n      ignore_solve_not_converge = true\n\nit does not do nonlinear iterations if it is already converged. With nl_rel_tol of 1e-4 it might be converged in 1 NL iteration",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10593544",
                          "updatedAt": "2024-09-09T16:35:23Z",
                          "publishedAt": "2024-09-09T16:35:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lucuo"
                          },
                          "bodyText": "Hello, I have removed ignore_solve_not_converge = true, but the iteration of the mainapp in step 2 still has no nonlinearity. I think the possible reason is that between the two \u2460 the iteration of the fluid app does not converge. \u2461 The fullsolvedmultiapp setting changes the mainapp convergence criteria.\nIn addition, when my subapp runs 3d-segregated-energy.i or 2d-segregated-energy.i, the program stops iterating(Normally it meets the convergence criteria for pressure, momentum and energy) but the T_fluid residual value of the output is too large. I think this is the reason why the subroutine does not converge.\nRunning 3d-segregated-energy.i or 2d-segregated-energy.i alone satisfies pressure_absolute_tolerance = 1e-13 momentum_absolute_tolerance = 1e-13 energy_absolute_tolerance = 1e-13\nWhen iteration is stopped, the output Tfluid residuals are still too large, and the convergence criterion of subroutine iteration is not applicable to SIMPLENonlinearAssembly computation. If it can be modified\nTime Step 0, time = 0\n\nTime Step 1, time = 1, dt = 1\n 0 Nonlinear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      0 Linear |R| = \ufffd[32m4.809470e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m8.366229e+04\ufffd[39m\n      2 Linear |R| = \ufffd[32m7.186666e+01\ufffd[39m\n 1 Nonlinear |R| = \ufffd[32m1.497849e+04\ufffd[39m\n      0 Linear |R| = \ufffd[32m1.497849e+04\ufffd[39m\n      1 Linear |R| = \ufffd[32m3.477019e+00\ufffd[39m\n      2 Linear |R| = \ufffd[32m6.778806e-03\ufffd[39m\n 2 Nonlinear |R| = \ufffd[32m4.267373e-01\ufffd[39m\n      0 Linear |R| = \ufffd[32m4.267373e-01\ufffd[39m\n      1 Linear |R| = \ufffd[32m6.053385e-05\ufffd[39m\n      2 Linear |R| = \ufffd[32m1.338816e-07\ufffd[39m\n 3 Nonlinear |R| = \ufffd[32m6.181346e-06\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m9.75781e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m9.75781e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n.......\n\n\ufffd[36msub_up0: \ufffd[39mIteration 84 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m1.14255e-06\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m9.90535e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m8.8479e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m9.71587e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m9.86807e-06\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n\ufffd[36msub_up0: \ufffd[39m Passive Scalar Iteration 84\n\ufffd[36msub_up0: \ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mOutlier Variable Residual Norms:\n\ufffd[36msub_up0: \ufffd[39m  vel_x: \ufffd[31m6.686837e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_y: \ufffd[31m6.686842e-04\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  vel_z: \ufffd[31m6.976906e-02\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  pressure: \ufffd[31m4.142814e-02\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m  T_fluid: \ufffd[31m9.575829e+03\ufffd[39m\nAborting as solve did not converge\n\nTime Step 1, time = 0.5, dt = 0.5\n      0 Linear |R| = \ufffd[32m2.474844e+07\ufffd[39m\n      1 Linear |R| = \ufffd[32m1.877096e+07\ufffd[39m\n      2 Linear |R| = \ufffd[32m1.119839e+07\ufffd[39m\n      3 Linear |R| = \ufffd[32m6.844111e+06\ufffd[39m\n      4 Linear |R| = \ufffd[32m3.605523e+06\ufffd[39m\n      5 Linear |R| = \ufffd[32m1.813377e+06\ufffd[39m\n      6 Linear |R| = \ufffd[32m9.958272e+05\ufffd[39m\n      7 Linear |R| = \ufffd[32m6.350362e+05\ufffd[39m\n      8 Linear |R| = \ufffd[32m3.296440e+05\ufffd[39m\n      9 Linear |R| = \ufffd[32m1.811076e+05\ufffd[39m\n     10 Linear |R| = \ufffd[32m1.007719e+05\ufffd[39m\n     11 Linear |R| = \ufffd[32m5.285892e+04\ufffd[39m\n     12 Linear |R| = \ufffd[32m3.044607e+04\ufffd[39m\n     13 Linear |R| = \ufffd[32m1.676661e+04\ufffd[39m\n     14 Linear |R| = \ufffd[32m9.358838e+03\ufffd[39m\n     15 Linear |R| = \ufffd[32m5.427682e+03\ufffd[39m\n     16 Linear |R| = \ufffd[32m3.064747e+03\ufffd[39m\n     17 Linear |R| = \ufffd[32m1.687410e+03\ufffd[39m\n     18 Linear |R| = \ufffd[32m9.475786e+02\ufffd[39m\n     19 Linear |R| = \ufffd[32m5.391898e+02\ufffd[39m\n     20 Linear |R| = \ufffd[32m3.102800e+02\ufffd[39m\n     21 Linear |R| = \ufffd[32m1.780052e+02\ufffd[39m\n\ufffd[32m Solve Converged!\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mIteration 1 Initial residual norms:\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 1 \ufffd[32m9.75781e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 2 \ufffd[32m9.75781e-07\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Momentum equation: Component 3 \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Pressure equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39m Energy equation: \ufffd[32m1\ufffd[39m\n\ufffd[36msub_up0: \ufffd[39mTurbulence Iteration \n\nThe final result output when running 3d-segregated-energy.i or 2d-segregated-energy.i alone\n2d-segregated-energy.i\nIteration 88 Initial residual norms:\n Momentum equation: Component 1 5.75932e-16\n Momentum equation: Component 2 1.30731e-16\n Pressure equation: 7.58978e-15\n Energy equation: 9.08817e-14\nTurbulence Iteration\n Passive Scalar Iteration 88\n\nOutlier Variable Residual Norms:\n  vel_x: 5.406363e+01\n  vel_y: 4.210712e+00\n  pressure: 3.883315e-02\n  T_fluid: 1.160953e+05\n\n3d-segregated-energy.i\nIteration 125 Initial residual norms:\n Momentum equation: Component 1 7.44957e-11\n Momentum equation: Component 2 7.44929e-11\n Momentum equation: Component 3 9.87257e-11\n Pressure equation: 2.86239e-11\n Energy equation: 1.3411e-12\nTurbulence Iteration\n Passive Scalar Iteration 125\n\nOutlier Variable Residual Norms:\n  vel_x: 6.686864e-04\n  vel_y: 6.686864e-04\n  vel_z: 6.976859e-02\n  pressure: 4.142827e-02\n  T_fluid: 9.575821e+03",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10604650",
                          "updatedAt": "2024-09-10T15:50:36Z",
                          "publishedAt": "2024-09-10T15:50:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lucuo"
                          },
                          "bodyText": "This is my input file and mesh file\nsoild_fluid.zip",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10604763",
                          "updatedAt": "2024-09-10T16:00:29Z",
                          "publishedAt": "2024-09-10T16:00:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lucuo"
                          },
                          "bodyText": "If I want to couple SIMPLENonlinearAssembly and transient Executioner, which multiapp should I use. thanks for some advice",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10616678",
                          "updatedAt": "2024-09-11T16:30:17Z",
                          "publishedAt": "2024-09-11T16:30:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nYou can put either the CFD or the other solve inside a FullSolveMultiApp\nUnfortunately, SIMPLENonlinearAssembly  does not support transient execution (yet, we have a PR for transient support of multi-system).\nSo you cannot yet use two transient solves and a transientMultiApp to exchange information on every time step",
                          "url": "https://github.com/idaholab/moose/discussions/28578#discussioncomment-10619548",
                          "updatedAt": "2024-09-11T21:45:46Z",
                          "publishedAt": "2024-09-11T21:45:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Growing single precipitates/Refining Mesh",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "I have a KKS script that simulates the growth of precipitates in particular directions due to influence of aging under stress, mistfit strains which leads to variant selection.\nThis test is for the 3-phase KKS model\nAnd here is a snapshot of the simulation\n\nMy question is is there a way I can get it more refined to focus on about 1-2 precipitates like the snapshot below rather than the many in the matrix",
          "url": "https://github.com/idaholab/moose/discussions/28552",
          "updatedAt": "2024-09-11T19:42:51Z",
          "publishedAt": "2024-09-05T21:44:31Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Implementing ADKernel for chemical potential equations",
          "author": {
            "login": "ahzeeshan"
          },
          "bodyText": "I am trying to implement an ADKernel for satisfying equilibrium conditions (pointwise) for chemical potentials of two species: $\\mu_a$ and $\\mu_b$. The conditions are $\\mu_a + \\mu_b = 0$ and $\\mu_a = \\mu_{target}$ (constant). The concentrations of species are $c_a$ and $c_b$. The code has three variables: $\\phi, c_a, c_b$.\nNote that $\\mu_a$ and $\\mu_b$ are themselves defined in terms of $c_a, c_b$ and $\\phi$. Let $\\mu_a = f(c_a, c_b, \\phi)$, $\\mu_b = g(c_a, c_b, \\phi)$.\nImplementation\nMaterial properties\nI implemented the chemical potential functions $\\mu_a = f(c_a, c_b, \\phi)$ and $\\mu_b = g(c_a, c_b, \\phi)$ as material properties using the ADDerivativeParsedMaterial, see below\n  [./chempot_pos]\n     type = ADDerivativeParsedMaterial\n     property_name = 'mu_pos'\n     coupled_variables = 'phi cpos cneg'\n     material_property_names = 'mu0_pos kT zpos e'\n     expression = 'mu0_pos + kT * log(cpos / (1-cpos)) + zpos * e * phi'\n     derivative_order = 2\n     outputs = exodus\n  [../]\n\nKernels\nThe kernels are: a PDE for $\\phi$; $\\mu_a + \\mu_b = 0$ for $c_b$ and $\\mu_a = \\mu_0$ for $c_a$. I implemented ADKernels for the two conditions by taking as input the material properties $\\mu_a$, $\\mu_b$, $\\mu_0$\nparams.addRequiredParam<MaterialPropertyName>(\"mua\", \"The name of the first chemical potential\");\n...\n_mua(getADMaterialProperty<Real>(\"mua\")),\n\nand setting the residuals as:\nreturn  (_mu[_qp] - _mutarget[_qp]) * _test[_i][_qp];\nreturn  (_mua[_qp] + _mub[_qp]) * _test[_i][_qp];\nThe kernels in the input file look like this\n  [./chem_pot_eqbm]\n    type = ChemPotEqual\n    variable = cneg\n    mua = mu_pos\n    mub = mu_neg\n    args = 'phi cneg'\n  [../]\n\nProblem\nI am unable to achieve convergence. By running with -snes_test_jacobian, I found that my Jacobians are wrong. I am not entirely sure but maybe the problem stems from passing the $\\mu$'s directly to the ADKernel as material properties instead of hard coding the functions $f$ and $g$ inside the kernel that make the dependence on $c_a, c_b$ and $\\phi$ explicit?\nI'd appreciate any help.",
          "url": "https://github.com/idaholab/moose/discussions/28591",
          "updatedAt": "2024-09-11T17:17:06Z",
          "publishedAt": "2024-09-09T23:20:14Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe Jacobians should be correct when using AD without mistakes dropping the derivatives, so we should look for those.\nThis way of retrieving  material properties should be correct. Did you use this consistently?\n_mua(getADMaterialProperty<Real>(\"mua\")),\n\nThis expression will diverge near 0 and 1 log(cpos / (1-cpos)). Do you have a Bounds object maybe to make sure cpos does not approach the bounds?\n\nmaybe the problem stems from passing the \u03bc 's directly to the ADKernel as material properties instead of hard coding the functions f and g inside the kernel that make the dependence on ca,cb and \u03d5 explicit?\n\nno using AD properties should be fine for propagating the derivatives correctly from the residual to the Jacobian",
                  "url": "https://github.com/idaholab/moose/discussions/28591#discussioncomment-10603476",
                  "updatedAt": "2024-09-10T14:30:28Z",
                  "publishedAt": "2024-09-10T14:30:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ahzeeshan"
                  },
                  "bodyText": "Hi @GiudGiud\nYes, I used this consistently in the kernels. I also added a bounds object but I got the same problem. Could you please look into my app here: https://github.com/ahzeeshan/edl_solid/blob/main/test/tests/simple.i",
                  "url": "https://github.com/idaholab/moose/discussions/28591#discussioncomment-10607945",
                  "updatedAt": "2024-09-10T23:45:04Z",
                  "publishedAt": "2024-09-10T23:45:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "could you try something like log( max(1e-12, cpos / (1-cpos) ) ) to prevent getting arbitrarily close to 0 in the log? The bounds don't prevent that",
                          "url": "https://github.com/idaholab/moose/discussions/28591#discussioncomment-10609151",
                          "updatedAt": "2024-09-11T03:28:46Z",
                          "publishedAt": "2024-09-11T03:28:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ahzeeshan"
                  },
                  "bodyText": "I tried this but the Jacobian is still off.\n||J - Jfd||_F/||J||_F = 0.000486969, ||J - Jfd||_F = 55.5544",
                  "url": "https://github.com/idaholab/moose/discussions/28591#discussioncomment-10616235",
                  "updatedAt": "2024-09-11T15:53:41Z",
                  "publishedAt": "2024-09-11T15:53:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "bounding it will not help the Jacobian but it will prevent floating point errors.\nDoes it give you which coefficient is off? Using the Outputs/dofmap=true, we should look at which variable the Jacobian is not correct for",
                          "url": "https://github.com/idaholab/moose/discussions/28591#discussioncomment-10617208",
                          "updatedAt": "2024-09-11T17:17:08Z",
                          "publishedAt": "2024-09-11T17:17:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}