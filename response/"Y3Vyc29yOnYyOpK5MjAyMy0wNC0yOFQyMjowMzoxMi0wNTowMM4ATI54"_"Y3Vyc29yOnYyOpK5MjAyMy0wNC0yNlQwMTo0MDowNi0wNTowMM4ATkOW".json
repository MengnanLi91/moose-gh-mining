{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wNC0yNlQwMTo0MDowNi0wNTowMM4ATkOW"
    },
    "edges": [
      {
        "node": {
          "title": "How to use RankTwoTensor within MOOSE? Tried following the documentation but I'm still having issues.",
          "author": {
            "login": "richmondodufisan"
          },
          "bodyText": "I have a custom material class where I want to calculate some values from the strain tensor. I calculated the strain tensor with the \"ADComputeSmallStrain\" material class and fed it into mine.\nThe strain tensor can be accessed as  _strain[_qp] , correct? I have used components of the strain in other parts of the code, and they all seem to be Real/Doubles. For example, computing the 1st invariant:\nADReal I_1 = _strain[_qp](0,0) + _strain[_qp](1,1) + _strain[_qp](2,2); \nworks fine.\nNow I want to calculate the principal strains, which can be gotten from the eigenvalues of the strain tensor. I found this documentation for working with RankTwoTensors:\nhttps://mooseframework.inl.gov/docs/doxygen/moose/classRankTwoTensorTempl.html#ad2be11b8c319023932c59f2b09d330b1\nHere's where the confusion begins. The header describes the function as:\nvoid RankTwoTensorTempl< T >::symmetricEigenvalues (std::vector< T > & eigvals) const\nThat is, a function with only one argument. How is the symmetricEigenvalues function supposed to compute the eigenvalues without me even passing the tensor to it?\nNext, an example is given as:\n{ RankTwoTensorTempl<T> a; symmetricEigenvaluesEigenvectors (eigvals, a); }\nwhere you actually do pass the tensor to it and it edits the vector in place, I assume, with the eigenvalues. This function has a slightly different name, though. I tried it, and couldn't get it to work because of yet another problem- the function does not recognize _strain[_qp] as a RankTwoTensor.\nI tried what I could find to convert it to a rank two tensor, even initializing the individual components like in the documentation:\nRankTwoTensor A(1, 2, 3, 4, 5, 6, 7, 8, 9); // A = [ 1 4 7 //       2 5 8 //       3 6 9 ]\ni.e,\nRankTwoTensor A(_strain[_qp](0,0), ...)\nbut that does not seem to work. I also noticed that when I tried to intialize a RankTwoTensor, other methods mentioned in the documentation were not found. For example, A.square() to find the square of the tensor.\nCan someone please point me in the right direction on how to do tensor algebra within MOOSE? Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/24210",
          "updatedAt": "2023-04-28T17:23:15Z",
          "publishedAt": "2023-04-28T00:40:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "I have a custom material class where I want to calculate some values from the strain tensor. I calculated the strain tensor with the \"ADComputeSmallStrain\" material class and fed it into mine.\nThe strain tensor can be accessed as  _strain[_qp] , correct? I have used components of the strain in other parts of the code, and they all seem to be Real/Doubles. For example, computing the 1st invariant:\nADReal I_1 = _strain[_qp](0,0) + _strain[_qp](1,1) + _strain[_qp](2,2); \nworks fine.\n\nCorrect. More concisely,\nADReal I_1 = _strain[_qp].trace();\n\n\nNow I want to calculate the principal strains, which can be gotten from the eigenvalues of the strain tensor. I found this documentation for working with RankTwoTensors:\nhttps://mooseframework.inl.gov/docs/doxygen/moose/classRankTwoTensorTempl.html#ad2be11b8c319023932c59f2b09d330b1\nHere's where the confusion begins. The header describes the function as:\nvoid RankTwoTensorTempl< T >::symmetricEigenvalues (std::vector< T > & eigvals) const\nThat is, a function with only one argument. How is the symmetricEigenvalues function supposed to compute the eigenvalues without me even passing the tensor to it?\n\nThis is C++ basic. See tutorials on C++ classes, for example this one https://cplusplus.com/doc/tutorial/classes/\nWhat you need is\nstd::vector<ADReal> eigvals;\nA.symmetricEigevalues(eigvals);\n\n\nNext, an example is given as:\n{ RankTwoTensorTempl<T> a; symmetricEigenvaluesEigenvectors (eigvals, a); }\nwhere you actually do pass the tensor to it and it edits the vector in place, I assume, with the eigenvalues. This function has a slightly different name, though. I tried it, and couldn't get it to work because of yet another problem- the function does not recognize _strain[_qp] as a RankTwoTensor.\n\nThat is not an example. You misread the doxygen documentation. The quoted code below the method definition is its source code.\n\nI tried what I could find to convert it to a rank two tensor, even initializing the individual components like in the documentation:\nRankTwoTensor A(1, 2, 3, 4, 5, 6, 7, 8, 9); // A = [ 1 4 7 // 2 5 8 // 3 6 9 ]\ni.e,\nRankTwoTensor A(_strain[_qp](0,0), ...)\nbut that does not seem to work. I also noticed that when I tried to intialize a RankTwoTensor, other methods mentioned in the documentation were not found. For example, A.square() to find the square of the tensor.\n\nThat should work. Did you get a compiler error, or is it giving you wrong results? If it is a compiler error, the error messages are usually sufficient to help you figure out what's wrong. You can also post the compiler errors here, which is usually a better way than just saying \"that does not seem to work\".\n\nCan someone please point me in the right direction on how to do tensor algebra within MOOSE? Thanks.",
                  "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5748873",
                  "updatedAt": "2023-04-28T00:53:10Z",
                  "publishedAt": "2023-04-28T00:53:09Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Thanks for the quick response. I realize I should've included an error message\n error: no matching function for call to 'RankTwoTensorTempl<double>::RankTwoTensorTempl(const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&, const MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true>&)' 108 |      _strain[_qp](2,0), _strain[_qp](2,1), _strain[_qp](2,2));\nApparently, there is an issue with the \"type\". I keep seeing something about expecting a double instead of a DualNumber. Do I need to individually convert each component to a double first?\nAlso, thank you for clarifying the documentation to me. I see now that the issue is most likely conversion between types.",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5748967",
                          "updatedAt": "2023-04-28T01:11:31Z",
                          "publishedAt": "2023-04-28T01:11:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "My confusion also comes from trying simpler methods and letting it figure out the type itself with \"auto\". For example:\nauto strain_square = _strain[_qp].square();\nbased on the documentation (https://mooseframework.inl.gov/docs/doxygen/moose/classRankTwoTensorTempl.html#afc410261c1e9a68ffa4ef8721bec7669) gave the error:\nerror: 'MooseADWrapper<RankTwoTensorTempl<double>, true>' {aka 'const class RankTwoTensorTempl<MetaPhysicL::DualNumber<double, MetaPhysicL::SemiDynamicSparseNumberArray<double, long unsigned int, MetaPhysicL::NWrapper<50> >, true> >'} has no member named 'square' 83 |  auto strain_square = _strain[_qp].square();\nI  needed to compute the square of the tensor earlier in the code, but ended up doing it manually with the components. I'd love to be able to figure out what's wrong.\nAlso, I don't know if I missed it, but I couldn't find the documentation for a simple matrix multiplication, i.e A_ij * B_jk.\nI was thinking to simply do _strain[_qp] * _strain[_qp], but wasn't sure.",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749011",
                          "updatedAt": "2023-04-28T01:21:53Z",
                          "publishedAt": "2023-04-28T01:21:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "The error message suggests that you are trying to construct a non AD RankTwoTensor from ADReals. If your material uses automatic differentiation, it is usually a good idea to make everything AD, e.g., ADReal, ADRealVectorValue, ADRankTwoTensor, ADRankFourTensor, etc., unless you are absolutely sure that something will never need AD.\nYour second error message (on square) is a weird one though. Either the compiler is lying, or you have an outdated MOOSE whose RankTwoTensorTempl does not offer a method called square. You can check the version of your MOOSE using git rev-parse HEAD. Alternatively, open the file RankTwoTensor.h and check if there is a definition of square() which looks like\n  RankTwoTensorTempl<T> square() const;",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749078",
                          "updatedAt": "2023-04-28T01:36:05Z",
                          "publishedAt": "2023-04-28T01:36:05Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Also, I don't know if I missed it, but I couldn't find the documentation for a simple matrix multiplication, i.e A_ij * B_jk.\nI was thinking to simply do _strain[_qp] * _strain[_qp], but wasn't sure.\n\nThat's not your fault. The RankTwoTensor class inherits from TypeTensor in libMesh, see\nhttps://mooseframework.inl.gov/docs/doxygen/libmesh/classlibMesh_1_1TypeTensor.html\nSome basic operators are inherited from there.",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749104",
                          "updatedAt": "2023-04-28T01:40:07Z",
                          "publishedAt": "2023-04-28T01:40:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Also, if you click on the operator*() in the RankTwoTensor doxygen, it should automatically send you to the right method (in libMesh): https://mooseframework.inl.gov/docs/doxygen/libmesh/classlibMesh_1_1TypeTensor.html#a3f5f5939e09b4b07ecfc9d3ba2c4fc15",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749113",
                          "updatedAt": "2023-04-28T01:41:43Z",
                          "publishedAt": "2023-04-28T01:41:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "So I tried to update moose and unearthed another can of worms. Followed the instructions for updating (https://mooseframework.inl.gov/getting_started/new_users.html) and it is compiling with several errors, most of which look like this:\n/home/richmondodufisan/projects/moose/framework/build/header_symlinks/MooseUtils.h:457:46: error: 'TensorTraits' is not a member of 'libMesh::TensorTools' 457 |     else if constexpr (libMesh::TensorTools::TensorTraits<T>::rank == 1) |                                              ^~~~~~~~~~~~ /home/richmondodufisan/projects/moose/framework/build/header_symlinks/MooseUtils.h:457:60: error: expected primary-expression before '>' token 457 |     else if constexpr (libMesh::TensorTools::TensorTraits<T>::rank == 1) |                                                            ^ /home/richmondodufisan/projects/moose/framework/build/header_symlinks/MooseUtils.h:457:63: error: '::rank' has not been declared; did you mean 'std::rank'? 457 |     else if constexpr (libMesh::TensorTools::TensorTraits<T>::rank == 1)\nIs it possible to revert to the previous version of MOOSE that worked fine? What could be the problem here?\n\nRegarding the RankTwoTensor issues, I see- the problem was switching between doubles and ADReals. If I get you right, the default for RankTwoTensor is a non-AD variable, so to initialize an AD Tensor, would I need to do something like this?\nRankTwoTensor<ADReal> A (1, 2, ...)\nI would've tested it but for the issues with MOOSE itself now.",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749292",
                          "updatedAt": "2023-04-28T02:00:20Z",
                          "publishedAt": "2023-04-28T02:00:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "If you are using conda, you're probably just missing a conda update --all or mamba update --all. After which you should make clobberall and remake. @GiudGiud may have other suggestions on the updating issue.\nUse RankTwoTensor for non AD tensor, and ADRankTwoTensor for AD tensor. You do not need to provide the template parameter which is included in the typedefs, i.e.\ntypedef RankTwoTensorTempl<Real> RankTwoTensor;\ntypedef RankTwoTensorTempl<ADReal> ADRankTwoTensor;",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749321",
                          "updatedAt": "2023-04-28T02:07:01Z",
                          "publishedAt": "2023-04-28T02:07:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "Gotcha. Thanks! I did the conda update but it still isn't compiling (same errors). I also tried git clean -xfd and redid make clobberall and make -j4 but it still has the same errors, so I'll wait on @GiudGiud . Thank you so much for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749408",
                          "updatedAt": "2023-04-28T02:24:26Z",
                          "publishedAt": "2023-04-28T02:24:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what does mamba list | grep moose return ?",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749722",
                          "updatedAt": "2023-04-28T03:39:27Z",
                          "publishedAt": "2023-04-28T03:39:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "richmondodufisan"
                          },
                          "bodyText": "I got\n`Command 'mamba' not found, did you mean:\ncommand 'samba' from deb samba (2:4.13.14+dfsg-0ubuntu0.20.04.4)\nTry: sudo apt install `\nDo I need to install something? The last time I updated MOOSE on this particular computer was probably in late 2021",
                          "url": "https://github.com/idaholab/moose/discussions/24210#discussioncomment-5749741",
                          "updatedAt": "2023-04-28T03:43:46Z",
                          "publishedAt": "2023-04-28T03:43:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "What may a \"Parameter _fe_problem_base is NULL\" means?",
          "author": {
            "login": "WayneX-Wong"
          },
          "bodyText": "Hi all,\nI'm trying to modify a MOOSE-based app to have my custom ability. The compilation process went smoothly, while when I run, an error raised \"Parameter _fe_problem_base is NULL\". What could be the reason for this error?\nI inherit my custom UserObject from TransientInterface to use _t to get current time, where I speculate that the problem may be. My custom UserObject indeed inherited from FEProblemBase, so I don't know exactly what the problem is.\nPlease let me know if more information about my modification needed. And any suggestions will be appreciated!",
          "url": "https://github.com/idaholab/moose/discussions/24182",
          "updatedAt": "2023-04-28T16:53:50Z",
          "publishedAt": "2023-04-26T10:45:19Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt s very odd that your user object inherits from FEProblemBase and user objects.\nSo that might be challenging.\nWhat are you trying to do?\nThe parameter error is not hard to fix I think. You need to find where it's retrieving the _fe_problem_base pointer parameter, and either change that code OR set the parameter like this:\nparams.set<FEProblemBase *>(\"_fe_problem_base\") = &_fe_problem;\n\nbefore retrieving it\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5733100",
                  "updatedAt": "2023-04-26T15:20:11Z",
                  "publishedAt": "2023-04-26T15:20:11Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WayneX-Wong"
                          },
                          "bodyText": "Thanks for your reply Guillaume. I will try to fix this error according to your suggestion.\n\nWhat are you trying to do?\n\nI'm trying to realize a time dependent InputParameter in my user object, so I naturally thought of using addParam<FunctionName> to get a ParsedFunction, which need  time and  as input, so\n\nI inherit my custom UserObject from TransientInterface to use _t to get current time.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737497",
                          "updatedAt": "2023-04-27T01:34:49Z",
                          "publishedAt": "2023-04-27T01:34:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Inheriting from transient interface seems fine.\nWhat does your object inherit from currently? Maybe a derived (General, Element etc) user object class makes sense",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737509",
                          "updatedAt": "2023-04-27T01:38:02Z",
                          "publishedAt": "2023-04-27T01:38:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WayneX-Wong"
                          },
                          "bodyText": "I'm using OpenMC wrapped in Cardinal, and try to make some modifications on OpenMCCellAverageProblem, which I think is inherited from OpenMCProblemBase and then ExternalProblem, and some other MOOSE based class. So I think this issue may be more related to MOOSE and didn't ask on Cardinal's forum.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737610",
                          "updatedAt": "2023-04-27T01:52:26Z",
                          "publishedAt": "2023-04-27T01:52:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok be mindful that in Cardinal the time is not usually physical time. It might tied to openmc simulation parameters, I dont recall",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737623",
                          "updatedAt": "2023-04-27T01:54:41Z",
                          "publishedAt": "2023-04-27T01:54:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WayneX-Wong"
                          },
                          "bodyText": "OK, Thanks again for your patience. I'll have another try",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737683",
                          "updatedAt": "2023-04-27T02:06:03Z",
                          "publishedAt": "2023-04-27T02:06:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "Hi @WayneX-Wong - can you explain a bit more what you are trying to do? I might be able to give some ideas on how to accomplish specific things in Cardinal.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737714",
                          "updatedAt": "2023-04-27T02:12:35Z",
                          "publishedAt": "2023-04-27T02:12:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WayneX-Wong"
                          },
                          "bodyText": "Hello @aprilnovak , still that question I asked on Cardinal's forum about CSG modeling parameter, and accroding to your suggestion, which can be realized by fetching openmc::model::surfaces and then modify it in OpenMCCellAverageProblem::setupProblem.\nNow I wanna make some further modification, to get time dependent geometry parameters in OpenMCCellAverageProblem's InputParameter, that's why I raised the above question.\nI'm really sorry that my code was modified on a public LAN computer in the laboratory, so it is not easy to take out (request needed to be submitted). I will showcase my code if more details are needed, while it may take some time to request.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5737795",
                          "updatedAt": "2023-04-27T02:31:19Z",
                          "publishedAt": "2023-04-27T02:30:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "What time-dependent information do you want to pass into OpenMC? You can access information in the form of postprocessors (scalar values), auxvariables (mesh-based data), or userobjects (something custom) from inside OpenMCCellAverageProblem (we do all three of these at the moment).\nIf I had to guess, you have a vector of numbers which represent different coefficients of the openMC CSG surfaces? Like, an array of length N where each entry is the new diameter of a pincell?",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5738306",
                          "updatedAt": "2023-04-27T04:05:12Z",
                          "publishedAt": "2023-04-27T04:05:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WayneX-Wong"
                          },
                          "bodyText": "If I had to guess, you have a vector of numbers which represent different coefficients of the openMC CSG surfaces? Like, an array of length N where each entry is the new diameter of a pincell?\n\nExactly is. To be more specific, I try to modify a z0 of a ZPlane surface after each transient time step. What I thought is to get a ParsedFunction which describe the change of z0 wrt to time, then pass it into OpenMCCellAverageProblem so that I can change openmc::model::surfaces according to that function.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5738402",
                          "updatedAt": "2023-04-27T04:26:49Z",
                          "publishedAt": "2023-04-27T04:26:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aprilnovak"
                          },
                          "bodyText": "All of the methods you can call inside of OpenMCCellAverageProblem are derived from FEProblem - if you go to the Doxygen page, you'll see there is a method called getFunction. I think you should be able to use that to access your function with those values.",
                          "url": "https://github.com/idaholab/moose/discussions/24182#discussioncomment-5738451",
                          "updatedAt": "2023-04-27T04:35:37Z",
                          "publishedAt": "2023-04-27T04:35:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use of AuxVariable in functions",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I would like to take the value of an aux variable and apply it as a boundary condition. Is there a simple way to do that? The aux variable of course varies in space and time.",
          "url": "https://github.com/idaholab/moose/discussions/24217",
          "updatedAt": "2023-06-24T19:49:11Z",
          "publishedAt": "2023-04-28T16:21:28Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "There's a matchedValueBC but I dont know how well it will work with aux. Please let us knw",
                  "url": "https://github.com/idaholab/moose/discussions/24217#discussioncomment-5756498",
                  "updatedAt": "2023-04-28T16:23:21Z",
                  "publishedAt": "2023-04-28T16:23:20Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "TimePeriod Command of boundary conditions",
          "author": {
            "login": "nourriahi"
          },
          "bodyText": "Hi Everyone,\nI am trying to create a boundary condition that is disabled at a certain time step while a new one will be enabled afterwards, I have followed the instructions on the TimePeriod and ControlsSystem sections but I am still having some problems.\nMy source file for the BCs \"HeatConductionOutFlow\" :\nHeatConductionOutFlow::validParams()\n{\n  InputParameters params = ADIntegratedBC::validParams();\n  params.addRequiredParam<Real>(\"value\", \"Value of the BC\");\n  params.declareControllable(\"value\");\n  params.addClassDescription(\"Imposes the essential boundary condition $u=g$, where $g$ \"\n                             \"is a constant, controllable value.\");\n  params.addClassDescription(\"Compute the outflow boundary condition\");\n  params.set<bool>(\"use_displaced_mesh\") = true;\n  params.addParam<MaterialPropertyName>(\n    \"chtc\", \"chtc\",\"Property name of the convective heat transfer coefficient.\");\n  params.addParam<MaterialPropertyName>(\n    \"rhtc\", \"rhtc\", \"Property name of the radiative heat transfer coefficient.\");\n  params.addParam<MaterialPropertyName>(\n    \"T_infinity\", \"T_infinity\",\"Propery name of the initial temperature value.\");\n  params.addParam<MaterialPropertyName>(\n    \"qs\", \"qs\", \"Property name of the surface heat flux\");\n  return params;\n}\n\nHeatConductionOutFlow::HeatConductionOutFlow(const InputParameters & parameters)\n    : ADIntegratedBC(parameters), \n       _value(getParam<Real>(\"value\")),\n       _T_infinity(getADMaterialProperty<Real>(\"T_infinity\")),\n       _chtc(getADMaterialProperty<Real>(\"convective_heat_transfer_coefficient\")),\n       _rhtc(getADMaterialProperty<Real>(\"radiation_heat_transfer_coefficient\")),\n       _qs(getADMaterialProperty<Real>(\"surface_heat_flux\"))\n\n{ \n}\n\nADReal\nHeatConductionOutFlow::computeQpResidual()\n{\nreturn - _test[_i][_qp] * _qs[_qp] + _test[_i][_qp] * ((_chtc[_qp] * (_T_infinity[_qp] - _u[_qp])) + (_rhtc[_qp] * ((_T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp] * _T_infinity[_qp]) - (_u[_qp] * _u[_qp] * _u[_qp] * _u[_qp]))));\n}\n\n\nInput file :  \n\n[BCs]\n  [inlet_temperature]\n    type = HeatConductionOutFlow\n    variable = temperature\n    boundary = right\n    value = 1e-8\n[]\n\n  [outlet_temperature]\n    type = DirichletBC\n    variable = temperature\n    boundary = left\n    value = 600 # (K)\n  []\n[]\n\n[Controls]\n  [./BCs]\n    type = TimePeriod\n    enable_objects = 'inlet_temperature::DirichletBC'\n    disable_objects = '*::HeatConductionOutFlow'\n    start_time = '0'\n    end_time = '1e-8'\n    [../]\n[]\n\n\n*** ERROR ***\nThe following error occurred in the object \"BCs\", of type \"TimePeriod\".\n\nThe desired parameter 'inlet_temperature::DirichletBC/enable' was not located for the 'BCs' object, it either does not exist or has not been declared as controllable.",
          "url": "https://github.com/idaholab/moose/discussions/24213",
          "updatedAt": "2023-06-24T19:51:23Z",
          "publishedAt": "2023-04-28T15:45:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nBCs are not controllable at this time I think.\nHave you found an example doing this?\nI think most people use a Function and just define a time dependent profile.\nWhat are you going to replace the dirichlet BC with after that time? Just zero current?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24213#discussioncomment-5756207",
                  "updatedAt": "2023-06-24T19:51:03Z",
                  "publishedAt": "2023-04-28T15:51:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "nourriahi"
                          },
                          "bodyText": "Now, I tried something different, it run successfully but the physics that I want to apply are not correct. (I want to impose a heat flux at the beginning that stops at t=1e-7 \"right\" and later a constant temperature of 600k from the right side which is \"right 2\" that continues until the end of the simulation.\nwhat I noticed that was happening is no continuity in the temperature values and a jump from 2000k to 630k in the following time steps.\nhere is the input file:\n[BCs]\n  [right]\n    type = HeatConductionOutFlow\n    variable = temperature\n    boundary = right\n    value = 600\n    []\n\n  [right2]\n    type = DirichletBC\n    variable = temperature\n    boundary = right\n    value = 600\n  []\n\n  [left]\n    type = DirichletBC\n    variable = temperature\n    boundary = left\n    value = 600 # (K)\n  []\n[]\n\n[Controls]\n  [period0]\n    type = TimePeriod\n    disable_objects = 'BoundaryCondition::right2'\n    start_time = '0'\n    end_time = '1e-7'\n    execute_on = 'initial timestep_begin'\n  []\n\n  [period2]\n    type = TimePeriod\n    disable_objects = 'BCs/right'\n    start_time = '1.1e-7'\n    execute_on = 'initial timestep_begin'\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/24213#discussioncomment-5756424",
                          "updatedAt": "2023-06-24T19:51:14Z",
                          "publishedAt": "2023-04-28T16:15:19Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow issues when running in parallel",
          "author": {
            "login": "lloyd-5731"
          },
          "bodyText": "Hi there,\nI am experiencing issues when running in parallel on our cluster.\nSome of the simple models in this porous flow example are exhibiting strangely shaped flow fronts. The ideal case is two approaching vertical flow fronts.\nI believe that this is linked to issue #22478 that @GiudGiud  and I were looking a\nI have completely stripped back the input file to a simple Porous Flow MWE, and it is still exhibiting the same issues.\nA few more things:\n\nThe strange behaviour is only happening in parallel\nReplicated and distributed give different results\nThe strange behaviour is not obvious on simpler meshes (hence this is an MWE)\nAlso that I'm using a custom capillary pressure formulation which enables a distinct flow front\n\nHas anyone got any ideas what might be causing this\n\nt.\n^this example has fluid being pushed in from both the left and the right boundary. The flow from the right side seems normal, from the left the flow front seems incorrect however. This example is run on 48 cores.\n\n\nHere is my input file:\n\n\n# 2D single phase unsaturated porous flow \n# All units in SI unless otherwise stated\n\nP0 = 101e3      # Injection pressure\nrho = 920       # Density\nk = 2.5e-11       # Permeability\nphi = 0.45      # Porosity\nT = 403\nmu = 1\n\n[Mesh]\n    [plate]\n        type = GeneratedMeshGenerator\n        dim = 3\n        xmax = 0.813\n        ymax = 0.559\n        zmax = 0.0024\n        nx = 40\n        ny = 30\n        nz = 1\n        elem_type = TET4\n    []\n[]\n\n\n[UserObjects]\n    [dictator]  \n        type = PorousFlowDictator\n        porous_flow_vars = porepressure\n        number_fluid_phases = 1\n        number_fluid_components = 1\n    []\n    [pc]\n        type = CustomCapillaryPressure\n        p_max = 1000\n        epsilon = 80\n        log_extension = false\n    []\n[]\n\n[GlobalParams]\n    PorousFlowDictator = dictator\n    gravity = '0 0 0'\n[]\n\n[Variables]\n    [porepressure]\n        initial_condition = 0\n    []\n\n[]\n\n[Kernels]\n    [dmdt]\n        type = PorousFlowMassTimeDerivative\n        variable = porepressure\n    []\n    [flux]\n        type = PorousFlowAdvectiveFlux\n        variable = porepressure\n    []\n[]\n\n[AuxVariables]\n    [saturation]\n        family = MONOMIAL\n        order = CONSTANT\n    []\n[]\n\n[AuxKernels]\n    [saturation]\n        type = PorousFlowPropertyAux\n        variable = saturation\n        property = saturation\n    []\n[]\n\n[BCs]\n    [injection]\n        type = DirichletBC\n        variable = porepressure\n        boundary = 'left right'\n        value = ${P0}\n    []\n[]\n\n[Modules]\n    [FluidProperties]\n        [liquid]\n            type = SimpleFluidProperties\n            density0 = ${rho}\n            viscosity = ${mu}\n        []\n    []\n[]\n\n[Materials]\n\n    [porosity]\n        type = PorousFlowPorosity\n        porosity_zero = ${phi}\n    []\n    [permeability]\n        type = PorousFlowPermeabilityConst\n        permeability = '${k} 0 0   0 ${k} 0   0 0 ${k}'\n    []\n    [saturation_calculator]\n        type = PorousFlow1PhaseP\n        porepressure = porepressure\n        capillary_pressure = pc\n    []\n    [temperature]\n        type = PorousFlowTemperature\n        temperature = ${T}\n    []\n    [massfrac]\n        type = PorousFlowMassFraction\n    []\n    [liquid]\n        type = PorousFlowSingleComponentFluid # LSPorousFlowSingleComponentFluid\n        fp = liquid\n        phase = 0\n    []\n    [relperm]\n        type = PorousFlowRelativePermeabilityCorey\n        n = 3\n        s_res = 0.1\n        sum_s_res = 0.1\n        phase = 0\n    []\n[]\n\n[Preconditioning]\n    [smp]\n        type = SMP\n        full = true\n        \n        petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n        petsc_options_value = ' lu       mumps'\n    []\n    \n[]\n\n[Executioner]\n    type = Transient\n    solve_type = 'NEWTON'\n    end_time = 20000\n\n    [TimeStepper]\n        type = SolutionTimeAdaptiveDT\n        dt = 1\n    []\n    automatic_scaling = true\n    nl_abs_tol = 2e-12 \n[]\n\n[Outputs]\n    exodus = true\n    print_linear_residuals = false\n    file_base = \"MyModel-${jobnumber}\"\n[]\n\n\n\n\n\nHere is my custom capillary pressure:\n\n\n#pragma once\n\n#include \"PorousFlowCapillaryPressure.h\"\n#include <cmath>\n\nclass CustomCapillaryPressure : public PorousFlowCapillaryPressure\n{\npublic:\n  static InputParameters validParams();\n\n  CustomCapillaryPressure(const InputParameters & parameters);\n\n  virtual Real capillaryPressureCurve(Real saturation, unsigned qp = 0) const override;\n  virtual Real dCapillaryPressureCurve(Real saturation, unsigned qp = 0) const override;\n  virtual Real d2CapillaryPressureCurve(Real saturation, unsigned qp = 0) const override;\n\n  virtual Real effectiveSaturation(Real pc, unsigned qp = 0) const override;\n  virtual Real dEffectiveSaturation(Real pc, unsigned qp = 0) const override;\n  virtual Real d2EffectiveSaturation(Real pc, unsigned qp = 0) const override;\n\nprotected:\n  const Real _p_min;\n  const Real _p_max;\n  const Real _epsilon;\n};\n\n\n\n#include \"CustomCapillaryPressure.h\"\n\nregisterMooseObject(\"MyApp\", CustomCapillaryPressure);\n\nInputParameters\nCustomCapillaryPressure::validParams()\n{\n  InputParameters params = PorousFlowCapillaryPressure::validParams();\n  params.addRequiredParam<Real>(\"p_max\", \"Maximum pressure at flow front (above which S=1)\");\n  params.addParam<Real>(\"p_min\", 0, \"Minimum pressure at flow front (below which S=0)\");\n  params.addParam<Real>(\"epsilon\",\n                        \"Epsilon parameter, determines stretch of pressure saturation curve\");\n  params.addClassDescription(\"Custom pressure saturation relationship\");\n  return params;\n}\n\nCustomCapillaryPressure::CustomCapillaryPressure(const InputParameters & parameters)\n  : PorousFlowCapillaryPressure(parameters),\n    _p_min(getParam<Real>(\"p_min\")),\n    _p_max(getParam<Real>(\"p_max\")),\n    _epsilon(getParam<Real>(\"epsilon\"))\n{\n}\n\nReal\nCustomCapillaryPressure::capillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  return 0;\n}\n\nReal\nCustomCapillaryPressure::dCapillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  return 0;\n}\n\nReal\nCustomCapillaryPressure::d2CapillaryPressureCurve(Real saturation, unsigned /*qp*/) const\n{\n  return 0;\n}\n\nReal\nCustomCapillaryPressure::effectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n\n  const float p0 = _p_min + (_p_max - _p_min) / 2;\n  return 1 / (1 + std::exp((p0 - pc) / _epsilon));\n}\n\nReal\nCustomCapillaryPressure::dEffectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n  const float p0 = _p_min + (_p_max - _p_min) / 2;\n  return (std::exp((p0 - pc) / _epsilon)) /\n         (_epsilon * std::pow(std::exp((p0 - pc) / _epsilon) + 1, 2));\n}\n\nReal\nCustomCapillaryPressure::d2EffectiveSaturation(Real pc, unsigned /*qp*/) const\n{\n  const float p0 = _p_min + (_p_max - _p_min) / 2;\n  return (std::exp((2 * p0 + pc) / _epsilon) - std::exp((p0 + 2 * pc) / _epsilon)) /\n         (std::pow(_epsilon, 2) * std::pow(std::exp(p0 / _epsilon) + std::exp(pc / _epsilon), 3));\n}",
          "url": "https://github.com/idaholab/moose/discussions/24121",
          "updatedAt": "2023-06-24T22:31:58Z",
          "publishedAt": "2023-04-19T15:09:30Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lloyd-5731"
                  },
                  "bodyText": "Any Ideas?",
                  "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5729862",
                  "updatedAt": "2023-04-26T10:27:28Z",
                  "publishedAt": "2023-04-26T10:27:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello. I ll try to have a look today",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5733115",
                          "updatedAt": "2023-04-26T15:21:24Z",
                          "publishedAt": "2023-04-26T15:21:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Is this what I should see in serial?",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5733623",
                          "updatedAt": "2023-04-26T16:02:31Z",
                          "publishedAt": "2023-04-26T16:02:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Thank you @GiudGiud.\nThis is what I see (and expect to see) with the porepressure in serial.\n\nAnd this is with the saturation.",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5743294",
                          "updatedAt": "2023-04-27T13:47:03Z",
                          "publishedAt": "2023-04-27T13:47:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Umm I dont see that, and I dont think I modified the inputs.\nAre you using an old moose or petsc by any chance?\nany modifications from the inputs you posted?",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5743784",
                          "updatedAt": "2023-04-27T14:32:03Z",
                          "publishedAt": "2023-04-27T14:32:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "I really appreciate you getting involved, thank you.\n\nDo you add the CustomCapillaryPressure files added?\nThe Moose version is from this month.\nThere are no other modifications apart from the capillary pressure.",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5743830",
                          "updatedAt": "2023-04-27T14:35:53Z",
                          "publishedAt": "2023-04-27T14:35:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I did add those two files in my porous flow folder.\nLet me try again from scratch",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5743852",
                          "updatedAt": "2023-04-27T14:37:56Z",
                          "publishedAt": "2023-04-27T14:37:56Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh that was an artefact in paraview when looking at all the sidesets as well",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5744068",
                          "updatedAt": "2023-04-27T14:52:53Z",
                          "publishedAt": "2023-04-27T14:52:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lloyd-5731"
                          },
                          "bodyText": "Ok, do yo get the same results that I do for this case then?",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5744154",
                          "updatedAt": "2023-04-27T15:00:13Z",
                          "publishedAt": "2023-04-27T15:00:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "threads, serial and replicated meshes seem to agree.\nI m running distributed right now. What problem should I be seeing?",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5744169",
                          "updatedAt": "2023-04-27T15:01:16Z",
                          "publishedAt": "2023-04-27T15:01:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "looks the same so far for distributed.\nHow long do I need to wait to see this image you pasted?\nRun to completion at 20k seconds?",
                          "url": "https://github.com/idaholab/moose/discussions/24121#discussioncomment-5744206",
                          "updatedAt": "2023-04-27T15:04:37Z",
                          "publishedAt": "2023-04-27T15:04:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Executing the function computeproperty() in my own Material object only once at the start time.",
          "author": {
            "login": "6ImmortalFish6"
          },
          "bodyText": "I'm wondering how can I  make my custom material object run the computeProperty() function only once after the program starts. For example, if I am conducting transient analysis with a start time of 0s, end time of 10s, and a time step dt of 1s, computeProperty() should be executed every dt during the simulation. How can I modify it to only execute at the beginning and not during any subsequent iterations?\nI came up with a solution, but I encountered a problem in the process. I plan to add an \"if\" statement that uses the initial time value as a criterion. If the current time is different from the initial time, then just skip it. However, I am uncertain about how to retrieve the initial time value in the Material System. Could you please advise me on how to obtain the initial time value?\nCould you please advise me on how to solve the first problem and second problem?\nThank you very much for your help.",
          "url": "https://github.com/idaholab/moose/discussions/24194",
          "updatedAt": "2023-06-24T22:31:01Z",
          "publishedAt": "2023-04-26T20:27:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can set compute = False in a material.\nIt will then become your responsibility to call the compute routines on the material, from wherever you need it computed\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24194#discussioncomment-5735948",
                  "updatedAt": "2023-04-26T20:47:46Z",
                  "publishedAt": "2023-04-26T20:47:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You have access to _t_step which is the current time step number.",
                  "url": "https://github.com/idaholab/moose/discussions/24194#discussioncomment-5742474",
                  "updatedAt": "2023-04-27T12:29:20Z",
                  "publishedAt": "2023-04-27T12:29:20Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There's some examples of materials in tensor_mechanics and phase field that use _t_step\nsuch as\ntensor_mechanics/src/materials/LinearViscoelasticityBase",
                          "url": "https://github.com/idaholab/moose/discussions/24194#discussioncomment-5742514",
                          "updatedAt": "2023-04-27T12:33:40Z",
                          "publishedAt": "2023-04-27T12:33:39Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How do I find the initial elastic strain guess?",
          "author": {
            "login": "Moyiqi"
          },
          "bodyText": "Hello everyone,may I ask a question?\n\nWhen I calculated it in the process above, how do I find the initial elastic strain guess\n\n?\nLily",
          "url": "https://github.com/idaholab/moose/discussions/24181",
          "updatedAt": "2023-04-29T02:45:37Z",
          "publishedAt": "2023-04-26T09:27:35Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You don't. We do that for you in the material update.",
                  "url": "https://github.com/idaholab/moose/discussions/24181#discussioncomment-5731570",
                  "updatedAt": "2023-04-26T13:19:07Z",
                  "publishedAt": "2023-04-26T13:19:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Moyiqi"
                          },
                          "bodyText": "Thanks for your reply, does the system have a default value. But I can't adjust it?\nLily",
                          "url": "https://github.com/idaholab/moose/discussions/24181#discussioncomment-5737441",
                          "updatedAt": "2023-04-27T01:24:11Z",
                          "publishedAt": "2023-04-27T01:24:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "The initial trial elastic strain is set to be equal to the entirety of the mechanical strain (excluding eigenstrain contributions). I am not aware of any other convergent algorithm which uses a different initial guess. However, there is nothing preventing you from making your own stress calculator, in which you can try out different algorithms.",
                          "url": "https://github.com/idaholab/moose/discussions/24181#discussioncomment-5742452",
                          "updatedAt": "2023-04-27T12:27:24Z",
                          "publishedAt": "2023-04-27T12:27:23Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Vector variables don't work with distributed mesh?",
          "author": {
            "login": "Eilloo"
          },
          "bodyText": "Hi all,\nAre vector variables compatible with distributed meshes/Nemesis format?\nThe behaviour I'm seeing is the simulation solves fine, and I can open the Nemesis files in Paraview.\nHowever, the values of my vector variables contain garbage (e+37), and Paraview crashes if I try and go to any non-zero timestep.\nThe other variables look fine, and if I solve using a replicated mesh and exodus output, everything looks normal.\nTo be clear, I have been able to inspect my variables using another tool to see that the e+37 values persist at non-zero timesteps.\nIt seems like there are 3 likely possibilities: Either vector variables are not compatible, or I am consistently setting up something wrong with the input files, or there is a bug here.\nBelow is a MWE to reproduce this:\nfilename = NemesisMWEOut\ninlet_velocity = 1e-4   #Re = 100\n\n[Mesh]\n    [base]\n        type = GeneratedMeshGenerator\n        dim = 2\n        xmin = 0\n        ymin = 0\n        xmax = 10\n        ymax = 2\n        nx = 50\n        ny = 10\n    []\n    allow_renumbering = false\n    parallel_type = DISTRIBUTED\n[]\n\n[Variables]\n    [pressure]\n        family = LAGRANGE\n    []\n    [velocity]\n        family = LAGRANGE_VEC\n    []\n[]\n\n[Materials]\n    [fluid]\n        type = ADGenericConstantMaterial\n        prop_names = 'rho mu cp k'\n        prop_values = '1000 1e-3 1 1'\n    []\n    [ins_mat]\n        type = INSADStabilized3Eqn\n        velocity = velocity\n        pressure = pressure\n        temperature = '288'\n        alpha = 1.0\n    []\n[]\n\n[Kernels]\n    [mass]\n        type = INSADMass\n        variable = pressure\n    []\n    [momentum_advection]\n        type = INSADMomentumAdvection\n        variable = velocity\n    []\n    [momentum_pressure]\n        type = INSADMomentumPressure\n        variable = velocity\n        pressure = pressure\n    []\n    [momentum_viscous]\n        type = INSADMomentumViscous\n        variable = velocity\n    []\n    [mass_pspg]\n        type = INSADMassPSPG\n        variable = pressure\n    []\n[]\n\n[BCs]\n    [inlet]\n        type = VectorDirichletBC\n        variable = velocity\n        values = '${inlet_velocity} 0 0'\n        boundary = left\n    []\n    [outlet]\n        type = ADDirichletBC\n        variable = pressure\n        value = 0\n        boundary = right\n    []\n    [no_slip]\n        type = VectorDirichletBC\n        variable = velocity\n        values = '0 0 0'\n        boundary = 'top bottom'\n    []\n[]\n\n[Preconditioning]\n    [precond]\n        type = SMP\n        full = true\n    []\n[]\n\n[Executioner]\n    type = Steady\n    solve_type = NEWTON\n    petsc_options_iname = '-pc_type -pc_factor_shift_type'\n    petsc_options_value = 'lu       NONZERO'\n[]\n\n[Outputs]\n    [nemesis]\n        type = Nemesis\n        file_base = ${filename}\n        enable = true\n    []\n[]",
          "url": "https://github.com/idaholab/moose/discussions/24135",
          "updatedAt": "2023-04-29T02:34:28Z",
          "publishedAt": "2023-04-20T09:09:37Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Distributed mesh and nemesis output are two distinct features. We test the INSAD implementation with distributed mesh every day on CIVET so I'm very confident that vector variables work with distributed meshes. However, I wouldn't be all that surprised if there are some issues with vector variables and nemesis output. @roystgnr have you ever looked at vector FE types in Nemesis?",
                  "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5676315",
                  "updatedAt": "2023-04-20T17:04:43Z",
                  "publishedAt": "2023-04-20T17:04:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "I see a unit test for Nemesis with MONOMIAL_VEC (both Replicated and Distributed) ... and that's it.  And that goes down a slightly different code path than LAGRANGE_VEC would, so it's quite possible we have some bug in the latter that isn't tripping a unit test for the former.",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5676828",
                          "updatedAt": "2023-04-20T18:05:02Z",
                          "publishedAt": "2023-04-20T18:05:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "@Eilloo have you run in devel or dbg mode? I am curious whether you trigger any assertions",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5677072",
                          "updatedAt": "2023-04-20T18:35:17Z",
                          "publishedAt": "2023-04-20T18:35:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "That's encouraging to hear, and sounds like there's a chance the problem is at our end. I haven't run in devel or dbg, no - I'll do some digging there and report back",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5683423",
                          "updatedAt": "2023-04-21T08:20:45Z",
                          "publishedAt": "2023-04-21T08:20:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Out of interest, are you using Nemesis output file type, or something else for your own cases?",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5686459",
                          "updatedAt": "2023-04-21T13:39:20Z",
                          "publishedAt": "2023-04-21T13:39:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Most of the time exodus, but for large cases on clusters we use nemesis",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5687168",
                          "updatedAt": "2023-04-21T14:36:46Z",
                          "publishedAt": "2023-04-21T14:36:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Hmm, the same as us... I have checked that similar behaviour occurs both locally (still using Nemesis output and distributed mesh) and on a cluster. In both instances, exodus output type without distributed mesh is fine.\nI've been trying to run in dbg, but can't seem to get this working both in parallel and on a cluster, since the xterm windows can't be displayed. Right now I don't have the option to do this locally, but I'll report back if I can get it working in one way or another.",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5709602",
                          "updatedAt": "2023-04-24T15:04:53Z",
                          "publishedAt": "2023-04-24T15:04:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can run in dbg mode without drumming up xterm btw.\nIt s just a matter of using the dbg executable. This will let us know if the dbg version, which has plenty of additional checks built-in, errors out on vector variable outputs",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5709620",
                          "updatedAt": "2023-04-24T15:06:37Z",
                          "publishedAt": "2023-04-24T15:06:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "Ah okay, so I basically replace the -opt file with the -dbg and see what appears in the .out? So no need to set any breakpoint flags and so forth...",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5709643",
                          "updatedAt": "2023-04-24T15:08:25Z",
                          "publishedAt": "2023-04-24T15:08:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Eilloo"
                          },
                          "bodyText": "The output when running as described above is the same as running the -opt (convergence info etc), with the additional information below appended:\n(edit: This is using 4 processors)\n| Reference count information                                                |\n ---------------------------------------------------------------------------- \n| N7libMesh10FEAbstractE reference count information:\n|  Creations:    279\n|  Destructions: 279\n| N7libMesh10Parameters5ValueE reference count information:\n|  Creations:    7968\n|  Destructions: 7968\n| N7libMesh12SparseMatrixIdEE reference count information:\n|  Creations:    11\n|  Destructions: 11\n| N7libMesh13NumericVectorIdEE reference count information:\n|  Creations:    30\n|  Destructions: 30\n| N7libMesh15EquationSystemsE reference count information:\n|  Creations:    1\n|  Destructions: 1\n| N7libMesh15GhostingFunctorE reference count information:\n|  Creations:    22\n|  Destructions: 22\n| N7libMesh15NonlinearSolverIdEE reference count information:\n|  Creations:    1\n|  Destructions: 1\n| N7libMesh4ElemE reference count information:\n|  Creations:    632\n|  Destructions: 632\n| N7libMesh4NodeE reference count information:\n|  Creations:    561\n|  Destructions: 561\n| N7libMesh5QBaseE reference count information:\n|  Creations:    145\n|  Destructions: 145\n| N7libMesh6DofMapE reference count information:\n|  Creations:    2\n|  Destructions: 2\n| N7libMesh6SystemE reference count information:\n|  Creations:    2\n|  Destructions: 2\n| N7libMesh9DofObjectE reference count information:\n|  Creations:    1193\n|  Destructions: 1193\n ----------------------------------------------------------------------------",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5709702",
                          "updatedAt": "2023-04-24T15:15:13Z",
                          "publishedAt": "2023-04-24T15:13:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Thanks.\nThis means we are not breaking additional checks in debug mode.",
                          "url": "https://github.com/idaholab/moose/discussions/24135#discussioncomment-5709761",
                          "updatedAt": "2023-04-24T15:18:42Z",
                          "publishedAt": "2023-04-24T15:18:42Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error Using Server to Run Moose",
          "author": {
            "login": "FanZhangchen"
          },
          "bodyText": "Hi Moose Team,\nI updated the Moose and encountered problems when I tried to Makefile in Moose on the server. The error I got is shown below\n/moose/framework/src/base/MooseApp.C:401:48: error: 'class libMesh::Parallel::Communicator' has no member named 'sync_type'      401 |   const_cast<Parallel::Communicator &>(comm()).sync_type(timpi_sync);\nCould you give some suggestions to solve this problem?\nBest,\nzc",
          "url": "https://github.com/idaholab/moose/discussions/24173",
          "updatedAt": "2023-04-29T02:42:50Z",
          "publishedAt": "2023-04-25T08:59:08Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou need to update libmesh.\nmamba update --all if you used mamba,\nOR\nscripts/update_and_rebuild_libmesh.sh if you used the manual installation\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5719160",
                  "updatedAt": "2023-04-25T12:50:58Z",
                  "publishedAt": "2023-04-25T12:20:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "When you update MOOSE, you need to update Mamba. When you update Mamba, you need to update MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5719595",
                          "updatedAt": "2023-04-25T12:49:16Z",
                          "publishedAt": "2023-04-25T12:49:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Hi,\nI have already used mamba update --all. And it shows that no package needs to be updated. The info is given below\nconda-forge/linux-64                                        Using cache\nconda-forge/noarch                                          Using cache\npkgs/main/linux-64                                            No change\npkgs/main/noarch                                              No change\npkgs/r/linux-64                                               No change\npkgs/r/noarch                                                 No change\nhttps://conda.software.inl.gov/public/noarch                  No change\nhttps://conda.software.inl.gov/public/linux-64                No change\nPinned packages:\n\npython 3.10.*\n\nTransaction\nPrefix: /share/home/ZhangchenFan/mambaforge3/envs/moose\nAll requested packages already installed\nzc",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5726875",
                          "updatedAt": "2023-04-26T04:32:02Z",
                          "publishedAt": "2023-04-26T04:32:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Can you paste the output of \u2018mamba list | grep moose\u2019\nmy guess is that the packages are frozen to an old version due to a dependency resolution issue",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5730492",
                          "updatedAt": "2023-04-26T11:44:58Z",
                          "publishedAt": "2023-04-26T11:44:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "The output is here\n/share/home/ZhangchenFan/mambaforge3/lib/python3.10/site-packages/conda_package_streaming/package_streaming.py:19: UserWarning: zstandard could not be imported. Running without .conda support.\nwarnings.warn(\"zstandard could not be imported. Running without .conda support.\")\n/share/home/ZhangchenFan/mambaforge3/lib/python3.10/site-packages/conda_package_handling/api.py:29: UserWarning: Install zstandard Python bindings for .conda support\n_warnings.warn(\"Install zstandard Python bindings for .conda support\")\npackages in environment at /share/home/ZhangchenFan/mambaforge3/envs/moose:\nmoose-libmesh             2022.11.07              build_2    https://conda.software.inl.gov/public\nmoose-libmesh-vtk         9.1.0               h7a8feb7_16    https://conda.software.inl.gov/public\nmoose-mpich               4.0.2                   build_6    https://conda.software.inl.gov/public\nmoose-petsc               3.16.6                  build_5    https://conda.software.inl.gov/public\nmoose-test-tools          2023.04.04      py310h0c21752_0    https://conda.software.inl.gov/public\nmoose-tools               2023.04.04      py310h0c21752_0    https://conda.software.inl.gov/public\nmoose-wasp                2023.04.04              build_0    https://conda.software.inl.gov/public",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5731091",
                          "updatedAt": "2023-04-26T12:44:47Z",
                          "publishedAt": "2023-04-26T12:44:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The packages are a year old\nyou ll need to remove the moose mamba environment and reinstall it",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5731324",
                          "updatedAt": "2023-04-26T13:01:15Z",
                          "publishedAt": "2023-04-26T13:01:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "Thank you. I just want to make sure, should I use the mamba env remove -n moose command first and then install the moose environment with the command mamba create -n moose moose-tools moose-libmesh?",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5731566",
                          "updatedAt": "2023-04-26T13:18:33Z",
                          "publishedAt": "2023-04-26T13:18:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "You'll want to be out of the environment before running the remove (Conda won't allow the deletion of the environment it is currently in)\nmamba deactivate\nmamba activate base\nmamba env remove -n moose\nmamba create -n moose moose-tools moose-libmesh\nIn the future, we're hoping to have something in place in our Makefiles that will be able to quickly spot issues like this (an out of date moose-libmesh for example). Also, we're working on a single Conda package installation theme (like mamba create -n moose moose-dev).",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5731776",
                          "updatedAt": "2023-04-26T13:36:50Z",
                          "publishedAt": "2023-04-26T13:36:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "And the stuck issue you have (mamba update --all not budging)... I really need to fix that. Unfortunately it means practically deleting the entire /public channel and starting over. The \"stuck\" issue is all based on how we were pinning packages a year ago (being to strict).",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5731815",
                          "updatedAt": "2023-04-26T13:39:06Z",
                          "publishedAt": "2023-04-26T13:39:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "FanZhangchen"
                          },
                          "bodyText": "I remove the environment and try to install it. But I found the packages seem to be the same as the ones I removed. I will attach the info\n\nmoose-libmesh                           2022.11.07  build_0               conda.software.inl.gov/public/linux-64     Cached\nmoose-libmesh-vtk                            9.1.0  h7bcc875_14           conda.software.inl.gov/public/linux-64     Cached\nmoose-mpich                                  4.0.2  build_4               conda.software.inl.gov/public/linux-64     Cached\nmoose-petsc                                 3.16.6  build_3               conda.software.inl.gov/public/linux-64     Cached\nmoose-test-tools                        2023.04.04  py310h0c21752_0       conda.software.inl.gov/public/linux-64     Cached\nmoose-tools                             2023.04.04  py310h0c21752_0       conda.software.inl.gov/public/linux-64     Cached\nmoose-wasp                              2023.04.04  build_0               conda.software.inl.gov/public/linux-64     Cached",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5732276",
                          "updatedAt": "2023-04-26T14:16:13Z",
                          "publishedAt": "2023-04-26T14:16:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "These are still the old packages.\nAs Jason mentioned, delete the enrvironment and the channel and try again.\nIf that still does not work, delete mamba/miniconda and try again",
                          "url": "https://github.com/idaholab/moose/discussions/24173#discussioncomment-5733048",
                          "updatedAt": "2023-04-26T15:16:26Z",
                          "publishedAt": "2023-04-26T15:16:21Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlowPermeabilityKozenyCarman - derivatives",
          "author": {
            "login": "garciapintado"
          },
          "bodyText": "Hi,\nin PorousFlowPermeabilityKozenyCarman.C  is it possible that:\n```\n_dpermeability_qp_dvar[_qp][v] = _dporosity_qp_dvar[_qp][v] * _permeability_qp[_qp] *\n(_n / _porosity_qp[_qp] + _m / (1.0 - _porosity_qp[_qp]));\nshould be?\n\n_dpermeability_qp_dvar[_qp][v] = _dporosity_qp_dvar[_qp][v] * _permeability_qp[_qp] *\n(_n / _porosity_qp[_qp] - _m / (1.0 - _porosity_qp[_qp]));\n\nand similarly we would have?\n      ```\n_dpermeability_qp_dgradvar[_qp][i][v] =\n          _dporosity_qp_dgradvar[_qp][v](i) * _permeability_qp[_qp] *\n          (_n / _porosity_qp[_qp] - _m / (1.0 - _porosity_qp[_qp]));\n\nSorry if this is wrong.\nJavier",
          "url": "https://github.com/idaholab/moose/discussions/24175",
          "updatedAt": "2023-04-26T06:40:06Z",
          "publishedAt": "2023-04-25T10:49:17Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "It's great to have more pairs of eyes on this, @garciapintado .   I think the current code is correct.  By the chain rule, there is one negative from the negative exponent m (ie (1-phi)^(-m)) and one negative from the minus sign in front of phi.  Both of these multiply to give a positive sign.\nIf you're wondering about derivatives like these, you can probably find an input file in porous_flow/test/tests/jacobian that tests them.  You could modify the code, recompile, and run the test to see what you get.\nA",
                  "url": "https://github.com/idaholab/moose/discussions/24175#discussioncomment-5724867",
                  "updatedAt": "2023-04-25T21:39:14Z",
                  "publishedAt": "2023-04-25T21:39:13Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "garciapintado"
                          },
                          "bodyText": "Argh! You're right as always :-) Many thanks and for the info about the jacobian test",
                          "url": "https://github.com/idaholab/moose/discussions/24175#discussioncomment-5727752",
                          "updatedAt": "2023-04-26T06:40:07Z",
                          "publishedAt": "2023-04-26T06:40:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}