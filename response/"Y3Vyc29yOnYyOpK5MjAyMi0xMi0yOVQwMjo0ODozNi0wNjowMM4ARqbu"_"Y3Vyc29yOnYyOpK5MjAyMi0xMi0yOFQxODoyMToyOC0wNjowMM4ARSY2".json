{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0xMi0yOFQxODoyMToyOC0wNjowMM4ARSY2"
    },
    "edges": [
      {
        "node": {
          "title": "INSFVMixingLengthReynoldsStress explanation",
          "author": {
            "login": "aiskhak"
          },
          "bodyText": "Hi All,\nPlease help me in understanding of the INSFVMixingLengthReynoldsStress kernel.\nI have the following questions:\n\n\nVariable _axis_index represents the momentum equation component for which we are using the kernel (x, y, or z). What does then variable _index denote?\n\n\nLet's say, _axis_index=0 (i.e., we are solving for the x component) and the problem is 3D.\n\n\nThen we first compute the following quantity:\nnorm_strain_rate = grad_u(0) * _normal(0) + grad_v(0) * _normal(1) + grad_w(0) * _normal(2)\ni.e.,\nnorm_strain_rate = du/dx * nx + dv/dx * ny + dw/dx * nz\nAnd second we add:\nconst ADRealVectorValue & var_grad = _index == 0 ? grad_u : (_index == 1 ? grad_v : grad_w);\nnorm_strain_rate += var_grad * _normal;\n\nIt is not clear for me what is the result of these 2 operations? Seems that after the first one we are getting a vector, and then add to it tensor?\n\nWhat is going on in this part of the code?\n\n  if (_face_type == FaceInfo::VarFaceNeighbors::ELEM ||\n      _face_type == FaceInfo::VarFaceNeighbors::BOTH)\n  {\n    const auto dof_number = _face_info->elem().dof_number(_sys.number(), _var.number(), 0);\n    // norm_strain_rate is a linear combination of degrees of freedom so it's safe to straight-up\n    // index into the derivatives vector at the dof we care about\n    _ae = norm_strain_rate.derivatives()[dof_number];\n    _ae *= -rho * eddy_diff;\n  }\n  if (_face_type == FaceInfo::VarFaceNeighbors::NEIGHBOR ||\n      _face_type == FaceInfo::VarFaceNeighbors::BOTH)\n  {\n    const auto dof_number = _face_info->neighbor().dof_number(_sys.number(), _var.number(), 0);\n    _an = norm_strain_rate.derivatives()[dof_number];\n    _an *= rho * eddy_diff;\n  }\n\n\nWhat is going on in this part of the code?\n\nvoid\nINSFVMixingLengthReynoldsStress::gatherRCData(const FaceInfo & fi)\n{\n  if (skipForBoundary(fi))\n    return;\n\n  _face_info = &fi;\n  _normal = fi.normal();\n  _face_type = fi.faceType(_var.name());\n\n  processResidualAndJacobian(computeStrongResidual() * (fi.faceArea() * fi.faceCoord()));\n\n  if (_face_type == FaceInfo::VarFaceNeighbors::ELEM ||\n      _face_type == FaceInfo::VarFaceNeighbors::BOTH)\n    _rc_uo.addToA(&fi.elem(), _index, _ae * (fi.faceArea() * fi.faceCoord()));\n  if (_face_type == FaceInfo::VarFaceNeighbors::NEIGHBOR ||\n      _face_type == FaceInfo::VarFaceNeighbors::BOTH)\n    _rc_uo.addToA(fi.neighborPtr(), _index, _an * (fi.faceArea() * fi.faceCoord()));\n}\n\n\nThe kernel returns \"the force due to the Reynolds stress term\":\n\n-1 * rho * eddy_diff * norm_strain_rate;\nwhat is the structure of this term, I mean if it is a tensor, what is its dimension?",
          "url": "https://github.com/idaholab/moose/discussions/22989",
          "updatedAt": "2022-12-29T09:04:03Z",
          "publishedAt": "2022-12-17T02:33:44Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\n\n\n\nFor an axis, you would expect 'x', 'y', 'z'. The axis_index is simply 0, 1, 2 for those axes respectively.\n\n\n\nvar_grad * normal is the dot product of two vectors, so the output is an (AD)Real.\nWe are adding to the normalized strain rate, a number\n\n\n\nIn this part of the code we are tallying the contribution of the face flux to the Rhie Chow coefficient of the element (ae) and the neighbor (an) of the face.\n\n\n\nThis part of the code is moving this tallied contribution into the actual coefficient, held by the RC Interpolator user object.\nThe contribution is weighted by the area of the face (coord() is the RZ radius)\n\n\n\nThis term is a scalar, an (AD)Real. It s the contribution to the residual of the momentum equation of this term only for one axis.\nHope this helps,\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22989#discussioncomment-4434125",
                  "updatedAt": "2022-12-17T03:18:57Z",
                  "publishedAt": "2022-12-17T03:18:56Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aiskhak"
                          },
                          "bodyText": "Thank you for the answer. Let me make sure I understand everything:\n\nFor the given _axis_index (x, y, or z) specified in the input file, this kernel is called only once for the corresponding _index (0, 1, or 2), right?\n\nIn other words,\nif _axis_index=x, then by default _index=0\nif _axis_index=y, then by default _index=1\nif _axis_index=z, then by default _index=2\nright?\n\nLet's then assume dim=3, _axis_index=x, _index=0 , then the kernel will return:\n\nnorm_strain_rate = grad_u(0) * _normal(0) + grad_v(0) * _normal(1) + grad_w(0) * _normal(2) + grad_u * _normal\nwhich is\nnorm_strain_rate = du/dx*nx + dv/dx*ny + dw/dx*nz + du/dx*nx + du/dy*ny + du/dz*nz\nIf _axis_index=y, _index=1:\nnorm_strain_rate = grad_u(1) * _normal(0) + grad_v(1) * _normal(1) + grad_w(1) * _normal(2) + grad_v * _normal\nwhich is\nnorm_strain_rate = du/dy*nx + dv/dy*ny + dw/dy*nz + dv/dx*nx + dv/dy*ny + dv/dz*nz\nIf _axis_index=z, _index=2:\nnorm_strain_rate = grad_u(2) * _normal(0) + grad_v(2) * _normal(1) + grad_w(2) * _normal(2) + grad_w * _normal\nwhich is\nnorm_strain_rate = du/dz*nx + dv/dz*ny + dw/dz*nz + dw/dx*nx + dw/dy*ny + dw/dz*nz\nright?\n2a. We do not take the derivatives of the above because we are in the weak formulation, correct?\n\n\nGotcha.\n\n\nGotcha.\n\n\nGotcha.\n\n\nThank you again.",
                          "url": "https://github.com/idaholab/moose/discussions/22989#discussioncomment-4434702",
                          "updatedAt": "2022-12-17T04:00:04Z",
                          "publishedAt": "2022-12-17T04:00:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "yes. The mapping is as expected, even if the variable names seem unclear right now\n\n\n\nThis looks correct.\nIt's (grad_vel + t(grad_vel)) * n but taken only on one axis\n2a.\nNo this is a strong form we re doing finite volume.\nHowever, this is a face/flux kernel, which allows us to drop the derivative.\nIt's because we are using the divergence theorem to compute this term.",
                          "url": "https://github.com/idaholab/moose/discussions/22989#discussioncomment-4434807",
                          "updatedAt": "2022-12-17T04:30:41Z",
                          "publishedAt": "2022-12-17T04:30:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aiskhak"
                          },
                          "bodyText": "ok, gotcha. Thanks! I may follow up with the items 3 and 4 later.",
                          "url": "https://github.com/idaholab/moose/discussions/22989#discussioncomment-4434917",
                          "updatedAt": "2022-12-17T04:32:25Z",
                          "publishedAt": "2022-12-17T04:32:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aiskhak"
                  },
                  "bodyText": "Can you also explain - how the kernel works for cylindrical coordinates? At which point the code knows that the equations are in the cylindrical coordinates and adjusts the computed Reynolds stresses?",
                  "url": "https://github.com/idaholab/moose/discussions/22989#discussioncomment-4439994",
                  "updatedAt": "2022-12-18T01:37:23Z",
                  "publishedAt": "2022-12-18T01:37:23Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Finite Elasticity ComputeElasticityTensor is not a registered object",
          "author": {
            "login": "RbmIjpb"
          },
          "bodyText": "Hello,\nI'm trying to run the input file from tutorials (modules/tensor_mechanics/test/tests/finite_strain_elastic/finite_strain_elastic_new_test.i)\nand I get this error. Of course the TENSOR MECHANICS was activated in the Makefile.\n*** ERROR ***\nA 'ComputeElasticityTensor' is not a registered object.\nIf you are trying to find this object in a dynamically linked library, make sure that\nthe library can be found either in your \"Problem/library_path\" parameter or in the\nMOOSE_LIBRARY_PATH environment variable.\nCan someone please help me.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/23030",
          "updatedAt": "2023-02-04T07:20:56Z",
          "publishedAt": "2022-12-26T16:26:54Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this the makefile from an application you are mentioning? How did you activate it?\nDid you rebuild after selecting it?\nDoes it work as expected with the tensor mechanics module executable?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23030#discussioncomment-4504949",
                  "updatedAt": "2022-12-27T22:11:38Z",
                  "publishedAt": "2022-12-27T22:11:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Develop constitutive strain-strain equation",
          "author": {
            "login": "sidharthsarmah"
          },
          "bodyText": "Hi,\nI am trying to us the following. constitutive stress-strain relation for my analysis using tensor mechanics:\n\nI have read this object: https://hugary1995.github.io/raccoon/source/materials/IsotropicPowerLawHardeningStressUpdate.html\nwhere only the yield stress is solved for a particular power law, although the hardening_function says it is a function of the plastic strain but is set to call a linearpiecewise functions in most of the examples, is it possible for me to define hardening_function to refer to functions which are expression of plastic_strain, similar to the one above in the plastic domain or as such?",
          "url": "https://github.com/idaholab/moose/discussions/23010",
          "updatedAt": "2023-03-14T18:44:01Z",
          "publishedAt": "2022-12-21T23:30:46Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": []
          }
        }
      },
      {
        "node": {
          "title": "Ablating Boundary Condition",
          "author": {
            "login": "mflattery"
          },
          "bodyText": "Hey all,\nI am new to moose and trying to implement an ablating boundary condition.  I made some adjustments to the coupled convective heating boundary condition which is working well but I need to implement a receding boundary that is dependent on the convective heating solution.  Are there examples of a melting boundary condition I could look at?  It looks like people typically implement an elastic strain type BC to model this? Are there other options?  Any information/resources are appreciated.  Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/17085",
          "updatedAt": "2024-05-10T13:14:44Z",
          "publishedAt": "2021-02-20T20:40:24Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Hi,\nSorry for the late reply. Your question is actually very timely -- we are right now developing new capabilities to model moving interfaces/boundaries. You'll soon be able to represent the moving interface by an element subdomain modifier and a geometric cut userobject (using levelset and XFEM). It is up to you how you want to update the levelset.\nWe can probably provide more help if you could let us know how your ablation boundary is receding, e.g. do you want to prescribe the movement of the boundary, or solve the movement so that it satisfies certain KKT condition on the interface?",
                  "url": "https://github.com/idaholab/moose/discussions/17085#discussioncomment-398854",
                  "updatedAt": "2022-07-13T16:02:03Z",
                  "publishedAt": "2021-02-23T19:13:11Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mflattery"
                          },
                          "bodyText": "Ah cool thanks for your help!\nThe movement of the boundary would be dependent on the heat transfer solution.  My plan for the heat transfer piece was to modify the convective heating boundary condition to include heat flux components that account for enthalpy required to change the phase of the solid material, and other fluxes.  Once a surface temperature solution is found that balances all the components, I would have a solution for the mass flux of ablating material at each qp.  Using a material density I could get a recession velocity for the surface, which I could prescribe to the boundary.  That is my preliminary plan to try, which might change as I learn more about all the pieces here. I have looked at the level set and XFEM modules a little bit, but don't have a lot of experience with them.",
                          "url": "https://github.com/idaholab/moose/discussions/17085#discussioncomment-399534",
                          "updatedAt": "2022-07-13T16:02:22Z",
                          "publishedAt": "2021-02-23T23:27:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Thanks for the clarification! I think @jiangwen84 is working on a very similar problem. He is using a separate embedded mesh to represent the interface. In your case, you will need to use your computed velocity to advect that embedded mesh. But unfortunately that is still under the works. Hopefully we can add this new capability soon.",
                          "url": "https://github.com/idaholab/moose/discussions/17085#discussioncomment-427932",
                          "updatedAt": "2022-07-13T16:02:22Z",
                          "publishedAt": "2021-03-04T02:44:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "shin-chan-cpu"
                          },
                          "bodyText": "Do you have a preliminary case for this problem now? I am also studying a similar problem and need help very much.",
                          "url": "https://github.com/idaholab/moose/discussions/17085#discussioncomment-9382913",
                          "updatedAt": "2024-05-10T13:14:45Z",
                          "publishedAt": "2024-05-10T13:14:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Conda update HTTP 0000 Connection Failed",
          "author": {
            "login": "AnthonyB08"
          },
          "bodyText": "Hi,\nLast week I had a similar problem (see png) and had solved it by .. just re-typing conda update --all ..and it eventually worked.\nNow it is doing it again, but my receding method is not working. What do you guys suggest?",
          "url": "https://github.com/idaholab/moose/discussions/16271",
          "updatedAt": "2022-12-29T08:32:59Z",
          "publishedAt": "2020-11-21T00:37:25Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "What is your OS, VM yes or no, how did you install conda, do you do any other python development on that machine? Your python installation (requests library) could be broken. Can you access the network at all?",
                  "url": "https://github.com/idaholab/moose/discussions/16271#discussioncomment-135782",
                  "updatedAt": "2022-10-31T02:40:05Z",
                  "publishedAt": "2020-11-22T16:21:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Re: Just tried the update command and it had worked. Interesting.",
                          "url": "https://github.com/idaholab/moose/discussions/16271#discussioncomment-135818",
                          "updatedAt": "2022-10-31T02:40:05Z",
                          "publishedAt": "2020-11-22T17:18:03Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "AnthonyB08"
                  },
                  "bodyText": "I am running Windows, WSL2, with Unbuntu 20.04 LTS. No, I do not do any\nother python development. I am apart of University Massachusettes Lowell\nLinux Club where a couple of Nuclear students and faculty are trying to\nlearn the MOOSE framework. I was able to access the network on November\n13th. Additionally, the group and I had a *channel initialization *error\nwhile running example 1.\n\u2026\nOn Sun, Nov 22, 2020 at 11:21 AM Daniel Schwen ***@***.***> wrote:\n What is your OS, VM yes or no, how did you install conda, do you do any\n other python development on that machine? Your python installation\n (requests library) could be broken. Can you access the network at all?\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#16271 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ANF4YYIXA2HRYPAQVIMQ3XTSRE273ANCNFSM4T5NK5PQ>\n .",
                  "url": "https://github.com/idaholab/moose/discussions/16271#discussioncomment-135814",
                  "updatedAt": "2022-11-09T14:26:53Z",
                  "publishedAt": "2020-11-22T17:07:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "AnthonyB08"
                  },
                  "bodyText": "RE:\n\nOn November 13th, I had successfully update conda by continuously typing *conda\nupdate --all* until it finally worked (after ~ 10 tries)\n\nOn Sun, Nov 22, 2020 at 12:06 PM anthony jr Bowers <grouperboy@gmail.com>\nwrote:\n\u2026\n I am running Windows, WSL2, with Unbuntu 20.04 LTS. No, I do not do any\n other python development. I am apart of University Massachusettes Lowell\n Linux Club where a couple of Nuclear students and faculty are trying to\n learn the MOOSE framework. I was able to access the network on November\n 13th. Additionally, the group and I had a *channel initialization *error\n while running example 1.\n\n On Sun, Nov 22, 2020 at 11:21 AM Daniel Schwen ***@***.***>\n wrote:\n\n> What is your OS, VM yes or no, how did you install conda, do you do any\n> other python development on that machine? Your python installation\n> (requests library) could be broken. Can you access the network at all?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <#16271 (comment)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ANF4YYIXA2HRYPAQVIMQ3XTSRE273ANCNFSM4T5NK5PQ>\n> .\n>",
                  "url": "https://github.com/idaholab/moose/discussions/16271#discussioncomment-135815",
                  "updatedAt": "2022-11-09T14:26:54Z",
                  "publishedAt": "2020-11-22T17:08:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "This is an Anaconda repository issue. Sometimes there are hiccups when dealing with that service. 'Trying again' is likely the only thing one can do...",
                  "url": "https://github.com/idaholab/moose/discussions/16271#discussioncomment-137618",
                  "updatedAt": "2022-11-09T14:26:55Z",
                  "publishedAt": "2020-11-24T14:47:54Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Test failed",
          "author": {
            "login": "Wolke24"
          },
          "bodyText": "At the last step of the installation, I used the following commands:\ncd ~/projects/moose/test\nmake -j 4\n./run_tests -j 4\nHere is the issue report:\n\nDoes anyone know the cause of this problem\uff1f",
          "url": "https://github.com/idaholab/moose/discussions/23033",
          "updatedAt": "2023-01-03T23:06:28Z",
          "publishedAt": "2022-12-28T04:31:14Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nAll these tests use MPI.\nAre you running this on a mac?\nWhat do you get when you run\nmpirun -n 4 <moose_executable> -i test/tests/kernels/simple_diffusion/simple_diffusion.i ?\nI think you likely will find the solution to this issue here:\nhttps://mooseframework.inl.gov/help/troubleshooting.html#811225ec-4f15-4717-99a2-0035ee939de4\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4509593",
                  "updatedAt": "2022-12-28T17:03:08Z",
                  "publishedAt": "2022-12-28T17:03:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Wolke24"
                          },
                          "bodyText": "Hi Guillaume,\nyes, I am using a Mac. But when I run the command you give, it says: no such file or directory: moose_executable",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4510137",
                          "updatedAt": "2022-12-28T18:43:05Z",
                          "publishedAt": "2022-12-28T18:43:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "oh I meant moose-executable as a placeholder.\nYou should use the test executable, should be something like\nmpirun -n 4 moose/test/moose_test-opt -i test/tests/kernels/simple_diffusion/simple_diffusion.i ?",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4510222",
                          "updatedAt": "2022-12-28T19:05:31Z",
                          "publishedAt": "2022-12-28T19:05:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wolke24"
                          },
                          "bodyText": "the -j 8 test also fails.\n\nso I follow the guides for \"build issues\", but when I run the hello world example, MPI issues also occur.",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4510445",
                          "updatedAt": "2022-12-28T19:54:40Z",
                          "publishedAt": "2022-12-28T19:54:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok so in the troubleshooting page we have this exact error\nplease look for gethostbyname on that page",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4510562",
                          "updatedAt": "2022-12-28T20:17:06Z",
                          "publishedAt": "2022-12-28T20:17:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Wolke24"
                          },
                          "bodyText": "Thank you! after I edited the host file the tests passed!\n\nbut there are some warnings do you think it's necessary to solve them?",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4526221",
                          "updatedAt": "2022-12-29T01:03:29Z",
                          "publishedAt": "2022-12-29T01:03:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no need to worry about those",
                          "url": "https://github.com/idaholab/moose/discussions/23033#discussioncomment-4529520",
                          "updatedAt": "2022-12-29T02:05:54Z",
                          "publishedAt": "2022-12-29T02:05:53Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Weird errors using PiecewiseMultilinear",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "I am trying to read in a function that gives the time dependence of some parameters. I am using PiecewiseMultilinear to read in the function from a txt file, but I get a behavior and errors I do not understand. In the input file, I have the Functions block:\n[Functions]\n  []\n    [./current_waveform]\n       type = PiecewiseMultilinear\n       data_file = test2.txt\n  []\n\nIf test2.txt is the following, the code runs without errors:\nAXIS T\n0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1\nDATA\n1 1 1 1 1 1 1 1 1 1 1\n\nBut if test2.txt is the following I get errors:\nAXIS T\n0. 0.00001 0.00002 0.00003 0.00004 0.00005 0.00006 0.00007 0.00008 0.00009 0.0001 0.00011 0.00012 0.00013 0.00014 0.00015 0.00016\nDATA\n0. 20.1099 36.7926 50.6321 62.4198 74.4977 87.0543 100.55 105.464 94.3073 85.0521 77.3742 70.8347 64.1341 57.168 49.6811 46.9548\n\nThe errors are\n*** ERROR ***\nNo valid AXIS lines found by GriddedData\n\n\n[node02:3012710] [[64356,0],0] ORTE_ERROR_LOG: Data unpack had inadequate space in file util/show_help.c at line 513\n\nor\n\n*** ERROR ***\nNo valid AXIS lines found by GriddedData\n\nMPI_ABORT was invoked on rank 4 in communicator MPI_COMM_WORLD\nwith errorcode 1.\n\n(without the \"Data unpack had inadequate space....\")\n\nI have no clue what causes these errors - any help will be much appreciated!",
          "url": "https://github.com/idaholab/moose/discussions/22625",
          "updatedAt": "2022-12-29T00:34:18Z",
          "publishedAt": "2022-11-08T16:11:44Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Does it not like the 0. ?\nI have no clue either. Wont have time in the near future to debug this",
                  "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4088531",
                  "updatedAt": "2022-11-08T16:24:22Z",
                  "publishedAt": "2022-11-08T16:24:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lynnmunday"
                  },
                  "bodyText": "I just tried your failing gridded data file with the input file:\n/moose/test/tests/functions/piecewise_multilinear/time.i\nAnd it worked fine.  I didn't get an error.",
                  "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4088535",
                  "updatedAt": "2022-11-08T16:24:28Z",
                  "publishedAt": "2022-11-08T16:24:28Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Weird. I have to try to find if there are some strange hidden characters that are read in in my case.",
                          "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4088888",
                          "updatedAt": "2022-11-08T16:56:40Z",
                          "publishedAt": "2022-11-08T16:56:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Indeed in looks like some hidden extra characters had crept into the file as I generated it from a spreadsheet. Never trust Excel!",
                          "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4089229",
                          "updatedAt": "2022-11-08T17:27:47Z",
                          "publishedAt": "2022-11-08T17:27:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "dos2unix is your friend here.",
                          "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4096660",
                          "updatedAt": "2022-11-09T12:33:28Z",
                          "publishedAt": "2022-11-09T12:33:27Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Weird. I have to try to find if there are some strange hidden characters that are read in in my case.",
                  "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4088828",
                  "updatedAt": "2022-11-08T16:51:42Z",
                  "publishedAt": "2022-11-08T16:51:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "I think you are working on WSL.  Try to copy the working test2.txt file using \"cp test2.txt somename.txt\" and modify the numbers. Do not copy the number from the not working file. I do think it is a formating issue.",
                          "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4093027",
                          "updatedAt": "2022-11-09T04:22:59Z",
                          "publishedAt": "2022-11-09T04:22:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Yes, thanks. It was a formatting issue.",
                          "url": "https://github.com/idaholab/moose/discussions/22625#discussioncomment-4097301",
                          "updatedAt": "2022-11-09T13:51:16Z",
                          "publishedAt": "2022-11-09T13:51:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Initializing HeliumFluidProperties within another Class",
          "author": {
            "login": "MikeLeimon"
          },
          "bodyText": "I've been working on trying to leverage the HeliumFluidProperties class that is included within MOOSE within a custom class that I am creating. Initially, I tried including a copy of the HFP object as a reference in the protected section my new class: (i.e., HeliumFluidProperties & _hfp). While this was what I would prefer, I couldn't figure out how to correctly define the value within the class contructor. I was trying to do something like the following: _hfp(declareProperty<HeliumFluidProperties>(\"hfp\", parameters)), however this never worked...\nSo after looking at that for a while, I gave up on only constructing the object once and decided to just create an HFP object in a function right before I needed to use it. Based on the unit test included in MOOSE, I settled upon doing something like the following:\n  HeliumFluidProperties hfp = HeliumFluidProperties(\n    HeliumFluidProperties::validParams());\nWhile this code would finally compile, it did cause the MOOSE application to crash and burn during execution. Included below is a small section of the errors I ended up with as the code was crashing:\nERROR: no MooseApp* parameter named \"_moose_app\" found.\n\nKnown parameters:\nName\t Type\t Value\n---------------------\n T_initial_guess\t double\t 400\n _aux_sys\t AuxiliarySystem*\t 0\n _eigen_problem\t EigenProblem*\t 0\n _executioner\t Transient*\t 0\n _fe_problem\t FEProblem*\t 0\n _fe_problem_base\t FEProblemBase*\t 0\n _material_data_type\t Moose::MaterialDataType\t 0\n _moose_base\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t FluidProperties\n _moose_warehouse_system_name\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t UserObject\n _nl_sys\t SystemBase*\t 0\n _object_name\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t \n _residual_object\t bool\t 0\n _subproblem\t SubProblem*\t 0\n _sys\t SystemBase*\t 0\n _tid\t unsigned int\t 0\n _type\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t \n _unique_name\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t \n allow_duplicate_execution_on_initial\t bool\t 0\n allow_imperfect_jacobians\t bool\t 0\n control_tags\t std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\t \n enable\t bool\t 1\n execute_on\t ExecFlagEnum\t TIMESTEP_END\n force_postaux\t bool\t 0\n force_preaux\t bool\t 0\n force_preic\t bool\t 0\n fp_type\t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\t single-phase-fp\n p_initial_guess\t double\t 200000\n prop_getter_suffix\t MaterialPropertyName\t \n tolerance\t double\t 1e-08\n use_displaced_mesh\t bool\t 0\n\nStack frames: 35\n0: libMesh::print_trace(std::ostream&)\n1: libMesh::MacroFunctions::report_error(char const*, int, char const*, char const*)\n2: /usr/share/moose/framework/libmoose-opt.so.0(+0x10f75b2) [0x7fdd4284e5b2]\n3: MooseApp* InputParameters::getCheckedPointerParam<MooseApp*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const\n4: MooseObject::MooseObject(InputParameters const&)\n5: UserObject::UserObject(InputParameters const&)\n6: GeneralUserObject::GeneralUserObject(InputParameters const&)\n7: ThreadedGeneralUserObject::ThreadedGeneralUserObject(InputParameters const&)\n8: FluidProperties::FluidProperties(InputParameters const&)\n9: SinglePhaseFluidProperties::SinglePhaseFluidProperties(InputParameters const&)\n10: HeliumFluidProperties::HeliumFluidProperties(InputParameters const&)\n\nSo what I would really like to know is how I should go about initializing this fluid property within another custom class. Is it best to include it along with the other members of the class and initialize it at the same time, or would the second approach I took be more appropriate, or is the correct answer something else entirely.\nAnyhow, thanks in advance for any advice/help you guys provide me with!",
          "url": "https://github.com/idaholab/moose/discussions/22899",
          "updatedAt": "2022-12-29T00:25:03Z",
          "publishedAt": "2022-12-06T18:44:22Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "I think that BrineFluidProperties does something similar to what you want, in that it constructs WaterFluidProperties and NaClFluidProperties internally to have access to those methods. Maybe you could find inspiration there?",
                  "url": "https://github.com/idaholab/moose/discussions/22899#discussioncomment-4326823",
                  "updatedAt": "2022-12-06T20:37:15Z",
                  "publishedAt": "2022-12-06T20:37:15Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Agree with that suggestion\nHeliumFluidProperties hfp = HeliumFluidProperties(\nHeliumFluidProperties::validParams());\ndoes not work because while these are valid parameters, they are empty.\nIt s better to pass the current parameters, the ones coming in the constructor of your object.\nThey may need additional parameters set if your object has less parameters than the ones you are trying to create within your object",
                          "url": "https://github.com/idaholab/moose/discussions/22899#discussioncomment-4326954",
                          "updatedAt": "2022-12-06T20:58:55Z",
                          "publishedAt": "2022-12-06T20:58:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MikeLeimon"
                          },
                          "bodyText": "Thank you very much!\nLooking to BrineFluidProperties for inspiration did allow me to come up with some code that worked.",
                          "url": "https://github.com/idaholab/moose/discussions/22899#discussioncomment-4328335",
                          "updatedAt": "2022-12-07T00:58:58Z",
                          "publishedAt": "2022-12-07T00:58:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "FE PorousFlow applying mechanical stress and units",
          "author": {
            "login": "srinath-chakravarthy"
          },
          "bodyText": "Hello All,\nI am trying to a porousflow simulation of a 1phase fluid, infiltrating a porous block that is initially unsaturated. The boundary conditions are PorousFlowSink at one boundary. This simulation works fine, but if i wanted the block to have a constant mechanical stress applied at the boundary, how would i go about this ? Input file is below the units description.\nSecond question, the exact same input file with the following units does not converge.\n# -------------- Base Units ------------------------- #\n# Length              = 1e-6 m -> mum\n# Charge              = 1e-9 C -> nC\n# Amt of substance    = 1e-12 mol -> pmol\n# Temperature         = K\n# Mass                = kg\n# Time                = s\n# # -------------- Derived Quantities -------------------#\n# Force                = 1e-6 N -> muN\n# Stress/Pressure     = 1e6 N/m^2 => MPa\n# Energy              = 1e-12 J -> pJ\n#\n# Concentration       = 1e6 mol/m^3  -> pmol/mum^3\n# Concentration Flux  = mol/m^2/s  -> pmol/mum^2/s\n# Diffusivity         = 1e-12 m^2/s -> mum^2/s\n# Chemical Potential  = J/mol -> pJ/pmol\n# Molar Volume        = 1e-6 m^3/mol -> mum^3/pmol\n#\n#\n# Current             = 1e-9 A => nA => nC/s\n# Current density     = 1e3 A/m^2 => nA/mum^2\n# Resistance          = 1e6 ohm => kgm^2/s^3/A^2 => kg mu^2 s^-3 nA^-2 => M-ohm\n# Resistivity         = ohm-m\n# Electric Field      = 1e3 V/m\n# Conductivity        = S/m\n# Charge transfer res = 1e-6 ohm m^2\n#\n# Thermal Conduc      = 1e-6 W/m/K\n#\n# # ----------------------------------------------------\n# Gas Constant        = 8.314 J/mol/K\n# Faradays constant   = 96.4853329 nC/pmol\n# # ----------------------------------------------------\n# Porous flow quantities\n# Permeability        = 1e-12 m^2 -> 1 um^2\n# All fractions remain fractions\n# PorousFlowSink      = actual units => kg m^-2 s^-1 => kg um^2 s^-1 => 1e-12\n# So current density 1A/m^2 => 66.143144e-9 kg/m^2s => 66.134144e-21 kg/um^2s\n# Dynamic viscosity => kg/m^1/s => kg/um/s => 1e-6 kg/m/s\n# Density           = kg/m^3 => kg/um^3 = 1e-18 kg/m^3\n\n`[Mesh]\n  [mesh]\n    type = GeneratedMeshGenerator\n    dim = 2\n    nx = 60\n    xmin = 0.0\n    xmax = 100e-6\n    bias_x = 1\n    ny = 30\n    ymin = 0\n    ymax = 30e-6\n  []\n\n  [injection_area]\n    type = ParsedGenerateSideset\n    combinatorial_geometry = 'y<0.0001e-6'\n    included_subdomain_ids = 1\n    new_sideset_name = 'injection_area'\n    input = 'mesh'\n  []\n\n\n[]\n\n[Problem]\n  coord_type = RZ\n  type = ReferenceResidualProblem\n  extra_tag_vectors = 'ref'\n  reference_vector = 'ref'\n  acceptable_iterations = 2\n  group_variables = 'disp_r disp_z temperature porepressure'\n[]\n\n[GlobalParams]\n  displacements = 'disp_r disp_z'\n  PorousFlowDictator = dictator\n  biot_coefficient = 1.0\n[]\n\n[Variables]\n  [porepressure]\n  []\n  [temperature]\n    initial_condition = 293\n  []\n  [disp_r]\n  []\n  [disp_z]\n  []\n[]\n\n[PorousFlowUnsaturated]\n  porepressure = porepressure\n\n  temperature = temperature\n  coupling_type = ThermoHydroMechanical\n  gravity = '0 0 0'\n  fp = the_simple_fluid\n  eigenstrain_names = thermal_contribution\n  use_displaced_mesh = false\n  multiply_by_density = true\n  relative_permeability_exponent = 3\n  relative_permeability_type = Corey\n  residual_saturation = 0.001\n  van_genuchten_alpha = 1e-6\n  van_genuchten_m = 0.6\n[]\n\n[BCs]\n  # [cavity_pressure]\n  #   type = DirichletBC\n  #   variable = porepressure\n  #   value = 1e5\n  #   boundary = top\n  # []\n  # [external_pressure]\n  #   type = Pressure\n  #   variable = disp_z\n  #   use_displaced_mesh = false\n  #   factor = -1e6\n  #   displacements = 'disp_r disp_z'\n  #   boundary = top\n  #   extra_vector_tags = 'ref'\n  # []\n  [constant_injection_flux]\n    type = PorousFlowSink\n    variable = porepressure\n    flux_function = \"if (t <= 5000,if (t <10, -66.41344e-9*t,-66.41344e-9*10), 66.41344e-9)\"\n    boundary = bottom\n    fluid_phase = 0\n    use_relperm = true\n    extra_vector_tags = 'ref'\n    save_in = nodal_outflow\n  []\n  [constant_injection_temperature]\n    type = DirichletBC\n    variable = temperature\n    value = 293\n    boundary = bottom\n  []\n  [roller_tmax]\n    type = DirichletBC\n    variable = disp_r\n    value = 0\n    boundary = 'left'\n  []\n  [roller_top_bottom]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = 'top'\n  []\n[]\n\n[Postprocessors]\n\n  [li_mass]\n    type = PorousFlowFluidMass\n    PorousFlowDictator = dictator\n    fluid_component = 0\n  []\n  [porepressure_bottom]\n    type = SideAverageValue\n    variable = porepressure\n    boundary = bottom\n  []\n  [stress_zz_bottom]\n    type = SideAverageValue\n    variable = stress_yy\n    boundary = bottom\n  []\n  [saturation]\n    type = SideAverageValue\n    variable = saturation0\n    boundary = bottom\n  []\n  [total_current]\n    type = PorousFlowFluidMass\n    PorousFlowDictator = dictator\n    fluid_component = 0\n  []\n  [avg_permeability]\n    type = ElementAverageValue\n    variable = permeability\n  []\n[]\n\n[AuxVariables]\n  [nodal_outflow]\n  []\n  [porosity]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [permeability]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_xx]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [stress_yy]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [hydrostatic_stress]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n  [vonmises_stress]\n    family = MONOMIAL\n    order = CONSTANT\n  []\n[]\n\n[AuxKernels]\n  [porosity]\n    type = PorousFlowPropertyAux\n    property = porosity\n    variable = porosity\n  []\n  [permeability]\n    type = PorousFlowPropertyAux\n    property = permeability\n    column = 1\n    row = 1\n    variable = permeability\n  []\n  [stress_xx]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_xx\n    index_i = 0\n    index_j = 0\n  []\n  [stress_yy]\n    type = RankTwoAux\n    rank_two_tensor = stress\n    variable = stress_yy\n    index_i = 1\n    index_j = 1\n  []\n  [hydrostatic_stress]\n    type = RankTwoScalarAux\n    rank_two_tensor = stress\n    scalar_type = Hydrostatic\n    variable = hydrostatic_stress\n  []\n  [vonmises_stress]\n    type = RankTwoScalarAux\n    rank_two_tensor = stress\n    scalar_type = VonMisesStress\n    variable = vonmises_stress\n  []\n\n[]\n\n[Modules]\n  [FluidProperties]\n    [the_simple_fluid]\n      type = SimpleFluidProperties\n      bulk_modulus = 11E9\n      viscosity = 1.0e4\n      density0 = 534\n      thermal_expansion = 0.0000118\n      cp = 4194\n      cv = 4186\n      porepressure_coefficient = 0\n    []\n  []\n[]\n\n[Materials]\n  [porosity]\n    type = PorousFlowPorosityConst\n    porosity = 0.2\n    chemical = false\n  []\n\n  [biot_modulus]\n    type = PorousFlowConstantBiotModulus\n    solid_bulk_compliance = 2E-9\n    fluid_bulk_modulus = 11E9\n  []\n  [permeability]\n    type = PorousFlowPermeabilityKozenyCarman\n    k0 = 1e-12\n    k_anisotropy = '1E-25 0 0   0 1 0   0 0 1E-25'\n    f = 0.01\n    d = 50e-9\n    poroperm_function = kozeny_carman_fd2\n    m = 3\n    n = 2\n  []\n\n  [thermal_expansion]\n    type = PorousFlowConstantThermalExpansionCoefficient\n    drained_coefficient = 0.00002\n    fluid_coefficient = 0.00002\n  []\n  [rock_internal_energy]\n    type = PorousFlowMatrixInternalEnergy\n    density = 2500.0\n    specific_heat_capacity = 1200.0\n  []\n  [thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '10 0 0  0 10 0  0 0 10'\n  []\n\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 100E9\n    poissons_ratio = 0.25\n  []\n  [strain]\n    type = ComputeSmallStrain\n    eigenstrain_names = thermal_contribution\n  []\n  [thermal_contribution]\n    type = ComputeThermalExpansionEigenstrain\n    temperature = temperature\n    thermal_expansion_coeff = 1e-19 # this is the linear thermal expansion coefficient\n    eigenstrain_name = thermal_contribution\n    stress_free_temperature = 293\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\n[Preconditioning]\n  active = preferred_but_might_not_be_installed\n  [basic]\n    type = SMP\n    full = true\n    petsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\n    petsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\n    petsc_options_value = ' asm      lu           NONZERO                   2'\n  []\n  [preferred_but_might_not_be_installed]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  automatic_scaling = true\n  # compute_scaling_once = false\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_force_iteration'\n  petsc_options_value = ' lu       mumps 1'\n\n  solve_type = Newton\n  # end_time = 36000\n  dt = 0.1\n  nl_max_its = 100\n  nl_abs_tol = 1E-8\n  nl_rel_tol = 1E-3\n  resid_vs_jac_scaling_param = 0.5\n  dtmax = 25\n  end_time = 10000\n  # num_steps = 10\n  [TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    optimal_iterations = 100\n    cutback_factor = 0.5\n    growth_factor = 1.1\n  []\n\n[]\n\n[Outputs]\n  exodus = true\n  csv = true\n  sync_times = '500'\n  sync_only = false\n  file_base = xxx2\n[]",
          "url": "https://github.com/idaholab/moose/discussions/21313",
          "updatedAt": "2022-12-29T00:21:43Z",
          "publishedAt": "2022-06-15T20:46:43Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "A constant mechanical stress... This depends on what exactly you want to achieve.  There are some examples in the \"Barometric and ocean loading\" section of https://mooseframework.inl.gov/modules/porous_flow/tidal.html .    Note that all stresses in porousflow are effective stresses, except the boundary conditions, which are in terms of the total stress.  Physically, the total stresses are brought about by something pushing on the rock skeleton.  There are two distinct cases.  (1) If your constant mechanical stress is due to some object pushing on the rock skeleton (eg, a train sitting on the ground surface), then you should use a FunctionNeumannBC or a PressureBC applied to the appropriate disp variable.  On the other hand, (2), if your constant mechanical stress is due to fluid pushing on the rock skeleton (eg, a borehole pressure), then you should use the aforementioned FunctionNeumannBC or PressureBC, along with an appropriate boundary condition for the fluid porepressure, such as DirichletBC on the porepressure variable.\nUsing different units is sometimes tricky.  Please see the essay at \"An essay on Pascals, kilograms and densities\" of https://mooseframework.inl.gov/source/materials/PorousFlowSingleComponentFluid.html .  Once you're sure of the numerical quantities in your input file, any nonconvergence must come from inappropriately scaled variables or tolerances.   There is an old page on scaling here https://mooseframework.inl.gov/modules/porous_flow/convergence.html but now i find\n\n[Debug]\n  show_var_residual_norms = True\n[]\n\nto be a quicker way of determining roughly the correct scaling.   That page will also tell you reasonable tolerances.  Eg, if you use mm rather than m, probably your residuals will increase by 1E9, so absolute tolerances have to be modified.  By the way, i'm not a super fan of autoscaling, because often i set absolute tolerances in my models.",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2959773",
                  "updatedAt": "2022-06-15T23:22:25Z",
                  "publishedAt": "2022-06-15T23:22:24Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Regarding, the stress part, assuming I have a train sitting on the rock,\nthen the pressure bc that is commented out in the input file should work as\na total stress applied on the skeleton, but the model when run with those\nlines uncommented, seems to produce stresses I cannot understand or\ninterpret. Can you help with t hi is ?\n\nRegarding units, thanks for your suggestion. Just to be clear I scaled the\nproblem in tutorial 8 of the porous flow middle module and replaced them\nwith the scaling I have detailed and that seemed to work just fine.\n\nRegarding scaling, I have a much more complicated problem and several\nblocks with different physics I need to solve,nor which auto scaling with\nreference residual problem eliminates some of the need for abs tolerances\nand I can deal with relative ones. Hence the auto scaling..the input file\nis the simplest picture of porous flow that I could present\n\u2026\nOn Wed, Jun 15, 2022, 7:22 PM Andy Wilkins ***@***.***> wrote:\n\n    - A constant mechanical stress... This depends on what exactly you\n    want to achieve. There are some examples in the \"Barometric and ocean\n    loading\" section of\n    https://mooseframework.inl.gov/modules/porous_flow/tidal.html . Note\n    that all stresses in porousflow are effective stresses, *except* the\n    boundary conditions, which are in terms of the total stress. Physically,\n    the total stresses are brought about by something pushing on the rock\n    skeleton. There are two distinct cases. (1) If your constant mechanical\n    stress is due to some object pushing on the rock skeleton (eg, a train\n    sitting on the ground surface), then you should use a FunctionNeumannBC\n    or a PressureBC applied to the appropriate disp variable. On the other\n    hand, (2), if your constant mechanical stress is due to *fluid*\n    pushing on the rock skeleton (eg, a borehole pressure), then you should use\n    the aforementioned FunctionNeumannBC or PressureBC, along with an\n    appropriate boundary condition for the fluid porepressure, such as\n    DirichletBC on the porepressure variable.\n    - Using different units is sometimes tricky. Please see the essay at\n    \"An essay on Pascals, kilograms and densities\" of\n    https://mooseframework.inl.gov/source/materials/PorousFlowSingleComponentFluid.html\n    . Once you're sure of the numerical quantities in your input file, any\n    nonconvergence must come from inappropriately scaled variables or\n    tolerances. There is an old page on scaling here\n    https://mooseframework.inl.gov/modules/porous_flow/convergence.html\n    but now i find\n\n [Debug]\n   show_var_residual_norms = True\n []\n\n to be a quicker way of determining roughly the correct scaling. That page\n will also tell you reasonable tolerances. Eg, if you use mm rather than m,\n probably your residuals will increase by 1E9, so absolute tolerances have\n to be modified. By the way, i'm not a super fan of autoscaling, because\n often i set absolute tolerances in my models.\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21313 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LLCOLKN3NNES6WUWQ3VPJQTXANCNFSM5Y4TGQ7Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2959855",
                  "updatedAt": "2022-06-15T23:49:07Z",
                  "publishedAt": "2022-06-15T23:49:07Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Remember that the output stresses (in paraview or postprocessors) are effective stresses, not total stresses.  Does that help?",
                          "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2959886",
                          "updatedAt": "2022-06-15T23:59:11Z",
                          "publishedAt": "2022-06-15T23:59:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "So just the sun of the output value and pore pressure should do the trick\n??\n\u2026\nOn Wed, Jun 15, 2022, 7:59 PM Andy Wilkins ***@***.***> wrote:\n Remember that the output stresses (in paraview or postprocessors) are\n effective stresses, not total stresses. Does that help?\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21313 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LKLUDDRE46SYX572WDVPJU5VANCNFSM5Y4TGQ7Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2959909",
                  "updatedAt": "2022-06-16T00:02:14Z",
                  "publishedAt": "2022-06-16T00:02:13Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "effective = total + biot_coefficient * porepressure (see https://mooseframework.inl.gov/modules/porous_flow/governing_equations.html ).   So you want effective - biot_coefficient * porepressure   (since your biot_coefficient = 1, you need effective - porepressure).",
                          "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2959930",
                          "updatedAt": "2022-06-16T00:07:42Z",
                          "publishedAt": "2022-06-16T00:07:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Andy,\nMore questions regarding the simple model i have presented.\n1) Let us assume an initially empty reservoir (porous skeleton) at\natmospheric pressure. I want to start pumping fluid into this skeleton. I\nam using a porousflowsink to do this. What should be the boundary\nconditions on the end away from the pumping ? I want to model how long it\nwill take to fill this reservoir. So shpuld the initial condition be\nporepressure = -1e5 (patm) ?\n2) For the same situation, i would like to apply a mechanical stress on the\nend away from the pumping. So in effect the skeleton will exert a pressure\non the pump. In the thought experiment, the filling of the reservoir should\nnot be affected by this external mechanical stress, since the only thing\nthat governs the flow is the pressure gradient. Presumably the\ninitial condition here will be porepressure = -\\sigma will be the boundary\ncondition at the pumping site.\n\nNow the question on how to apply this initial condition. I read the\ndocumentation and there documentation on applying postprocessor values to\nthe porepressure. What post-processor value am i going to be choosing here\n?\n\nCheers\nSrinath\n\nOn Wed, Jun 15, 2022 at 9:44 PM Srinath Chakravarthy ***@***.***>\nwrote:\n\u2026\n Perfect that works. Thanks\n\n On Wed, Jun 15, 2022, 8:07 PM Andy Wilkins ***@***.***>\n wrote:\n\n> effective = total + biot_coefficient * porepressure (see\n> https://mooseframework.inl.gov/modules/porous_flow/governing_equations.html\n> ). So you want effective - biot_coefficient * porepressure (since your\n> biot_coefficient = 1, you need effective - porepressure).\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <#21313 (reply in thread)>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACYC6LK5NPTDNO67WIWMVYDVPJV5TANCNFSM5Y4TGQ7Q>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2964605",
                  "updatedAt": "2022-06-16T14:19:10Z",
                  "publishedAt": "2022-06-16T14:19:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Fluid boundary conditions at the \"far end\"....  My initial thought was to use PorousFlowOutflowBC https://mooseframework.inl.gov/source/bcs/PorousFlowOutflowBC.html .   However, that is really designed to model an infinite reservoir (see the documentation for a discussion).  I suspect you're got a finite reservoir, given that you're applying a mechanical stress at the \"far end\".  In that case, you should probably use a PorousFlowSink, as discussed in https://mooseframework.inl.gov/modules/porous_flow/boundaries.html .\nInitially unsaturated configuration could be p=-1E5 Pascals, as you've indicated.  But that depends on your capillary curve.  \"initially unsaturated\" can mean different things to different people.  Viz, there is usually residual water that exists in natural systems - perhaps 5% water, perhaps even 20% water, depending on the capillarity and the history of the material (eg, if it has been dried using high temperature and then kept in a vacuum, it'd have tiny saturation).\nAssuming the mechanical stress and strain don't impact porosity or permeability (this is usually a reasonable assumption but you may wish to relax it) then mechanical stress won't impact fluid flow.  But if that's the case then you might like to consider whether there's any point building a model with both displacements and fluid: why not build two separate models (one for the fluid flow, one for the mechanics).\nThe boundary condition at the pumping site will be compressive normal total stress = pumping porepressure, and porepressure = pumping pressure.\nSorry, i'm not 100% sure what the postprocessor is for.  Are you injecting at a known rate, but don't know the porepressure?  If so, then study the \"Boundary conditions\" section of https://mooseframework.inl.gov/modules/porous_flow/thm_example.html",
                          "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2967468",
                          "updatedAt": "2022-06-16T22:48:06Z",
                          "publishedAt": "2022-06-16T22:48:06Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Andy,\nThanks a lot. Let me explain a little more about the problem.\nWe have a micro scale porous media attached to a permeabeable membrane,\nbelow which there is a comical chemical pump, pumping constant rate of\nfluid thru the membrane into the porous skeleton. Above certain values of\nthe rate we observe separation between the membrane and the skeleton. One\nsolution to this problem is applying a mechanical pressure to prevent the\ndelamination of the membrane.  While absolute values of the stress/pressure\ndoes not affect the fluid flow, absolute values do affect the delamination.\nI have already implemented a cohesive zone type model for the mass flux to\nstop if the interface separation is greater than a certain value. This is\nwhy I need  displacement coupling to the fluid flow.\n\nCapillary curve : completely understood about what 0 saturation is, and I\nwas just giving you an example of what the choice of initial conditions\nwill be.\n\nPumping end BCS, are currently fixed displacementn in direction normal to\nthe flow. The pore pressure will presumably come from a post processor. I\nam however confused as to how one can apply a Neumann and a Dirichlet bc\nfor the same variable at the same boundary. In this instance we have a\nporousflowsink and a pressure bc. I see the physical need for it, but\ncannot quite understand the implementation.\n\nThanks for your help to a newbie on porous flow mechanics.\n\nCheers\nSrinath\n\u2026\nOn Thu, Jun 16, 2022, 6:48 PM Andy Wilkins ***@***.***> wrote:\n\n    - Fluid boundary conditions at the \"far end\".... My initial thought\n    was to use PorousFlowOutflowBC\n    https://mooseframework.inl.gov/source/bcs/PorousFlowOutflowBC.html .\n    However, that is really designed to model an infinite reservoir (see the\n    documentation for a discussion). I suspect you're got a finite reservoir,\n    given that you're applying a mechanical stress at the \"far end\". In that\n    case, you should probably use a PorousFlowSink, as discussed in\n    https://mooseframework.inl.gov/modules/porous_flow/boundaries.html .\n    - Initially unsaturated configuration could be p=-1E5 Pascals, as\n    you've indicated. But that depends on your capillary curve. \"initially\n    unsaturated\" can mean different things to different people. Viz, there is\n    usually residual water that exists in natural systems - perhaps 5% water,\n    perhaps even 20% water, depending on the capillarity and the history of the\n    material (eg, if it has been dried using high temperature and then kept in\n    a vacuum, it'd have tiny saturation).\n    - Assuming the mechanical stress and strain don't impact porosity or\n    permeability (this is usually a reasonable assumption but you may wish to\n    relax it) then mechanical stress won't impact fluid flow. But if that's the\n    case then you might like to consider whether there's any point building a\n    model with both displacements and fluid: why not build two separate models\n    (one for the fluid flow, one for the mechanics).\n    - The boundary condition at the pumping site will be compressive\n    normal total stress = pumping porepressure, and porepressure = pumping\n    pressure.\n    - Sorry, i'm not 100% sure what the postprocessor is for. Are you\n    injecting at a known rate, but don't know the porepressure? If so, then\n    study the \"Boundary conditions\" section of\n    https://mooseframework.inl.gov/modules/porous_flow/thm_example.html\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21313 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LPLDULQMW2Q5QVKOHTVPOVLBANCNFSM5Y4TGQ7Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2967809",
                  "updatedAt": "2022-06-17T00:34:54Z",
                  "publishedAt": "2022-06-17T00:34:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Andy,\nThe results don't seem to be make any sense at all. Please see input file below. There is no effect of the applied mechanical stress on the effective or total stress in the system or the absolute pore-pressure. I am thoroughly confused. Perhaps this has to do with unsaturated flow.\n`\n[Mesh]\n[mesh]\ntype = GeneratedMeshGenerator\ndim = 2\nnx = 60\nxmin = 0.0\nxmax = 100e-6\nbias_x = 1\nny = 30\nymin = 0\nymax = 30e-6\n[]\n[injection_area]\ntype = ParsedGenerateSideset\ncombinatorial_geometry = 'y<0.0001e-6'\nincluded_subdomain_ids = 1\nnew_sideset_name = 'injection_area'\ninput = 'mesh'\n[]\n[]\n[Problem]\ncoord_type = RZ\ntype = ReferenceResidualProblem\nextra_tag_vectors = 'ref'\nreference_vector = 'ref'\nacceptable_iterations = 2\ngroup_variables = 'disp_r disp_z temperature porepressure'\n[]\n[GlobalParams]\ndisplacements = 'disp_r disp_z'\nPorousFlowDictator = dictator\nbiot_coefficient = 1.0\n[]\n[Variables]\n[porepressure]\n[]\n[temperature]\ninitial_condition = 293\n[]\n[disp_r]\n[]\n[disp_z]\n[]\n[]\n[PorousFlowUnsaturated]\nporepressure = porepressure\ntemperature = temperature\ncoupling_type = ThermoHydroMechanical\ngravity = '0 0 0'\nfp = the_simple_fluid\neigenstrain_names = thermal_contribution\nuse_displaced_mesh = false\nmultiply_by_density = true\nrelative_permeability_exponent = 3\nrelative_permeability_type = Corey\nresidual_saturation = 0.001\nvan_genuchten_alpha = 5e-5\nvan_genuchten_m = 0.6\n[]\n[BCs]\n[external_pressure]\ntype = Pressure\nvariable = disp_z\nuse_displaced_mesh = false\nboundary = top\nfactor = 1e6\n[]\n[pumping_site_pp]\ntype = Pressure\nvariable = disp_z\npostprocessor = pumping_pressure\nboundary = bottom\nuse_displaced_mesh = false\nextra_vector_tags = 'ref'\n[]\n[constant_injection_flux]\ntype = PorousFlowSink\nvariable = porepressure\nflux_function = \"if (t <= 5000,if (t <10, -66.41344e-9t,-66.41344e-910), 66.41344e-9)\"\nboundary = bottom\nfluid_phase = 0\nuse_relperm = true\nextra_vector_tags = 'ref'\nsave_in = nodal_outflow\n[]\n[constant_injection_temperature]\ntype = DirichletBC\nvariable = temperature\nvalue = 293\nboundary = bottom\n[]\n[roller_tmax]\ntype = DirichletBC\nvariable = disp_r\nvalue = 0\nboundary = 'left right'\n[]\n[roller_top_bottom]\ntype = DirichletBC\nvariable = disp_z\nvalue = 0\nboundary = 'top'\n[]\n[]\n[ICs]\n[pp]\ntype = ConstantIC\nvalue = -1e5\nvariable = porepressure\n[]\n[]\n[Postprocessors]\n[pumping_pressure]\ntype =  SideAverageValue\nvariable = porepressure\nboundary = bottom\nexecute_on = TIMESTEP_BEGIN\n[]\n[mass_flow]\ntype = PorousFlowFluidMass\nPorousFlowDictator = dictator\nfluid_component = 0\n[]\n[porepressure_bottom]\ntype = SideAverageValue\nvariable = porepressure\nboundary = bottom\n[]\n[effective_stress_zz_bottom]\ntype = SideAverageValue\nvariable = stress_yy\nboundary = bottom\n[]\n[total_stress_bottom]\ntype = ParsedPostprocessor\nfunction = 'effective_stress_zz_bottom - porepressure_bottom'\npp_names = 'effective_stress_zz_bottom porepressure_bottom'\n[]\n[saturation]\ntype = SideAverageValue\nvariable = saturation0\nboundary = bottom\n[]\n[]\n[AuxVariables]\n[nodal_outflow]\n[]\n[porosity]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[permeability]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[stress_xx]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[stress_yy]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[hydrostatic_stress]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[vonmises_stress]\nfamily = MONOMIAL\norder = CONSTANT\n[]\n[]\n[AuxKernels]\n[porosity]\ntype = PorousFlowPropertyAux\nproperty = porosity\nvariable = porosity\n[]\n[permeability]\ntype = PorousFlowPropertyAux\nproperty = permeability\ncolumn = 1\nrow = 1\nvariable = permeability\n[]\n[stress_xx]\ntype = RankTwoAux\nrank_two_tensor = stress\nvariable = stress_xx\nindex_i = 0\nindex_j = 0\n[]\n[stress_yy]\ntype = RankTwoAux\nrank_two_tensor = stress\nvariable = stress_yy\nindex_i = 1\nindex_j = 1\n[]\n[hydrostatic_stress]\ntype = RankTwoScalarAux\nrank_two_tensor = stress\nscalar_type = Hydrostatic\nvariable = hydrostatic_stress\n[]\n[vonmises_stress]\ntype = RankTwoScalarAux\nrank_two_tensor = stress\nscalar_type = VonMisesStress\nvariable = vonmises_stress\n[]\n[]\n[Modules]\n[FluidProperties]\n[the_simple_fluid]\ntype = SimpleFluidProperties\nbulk_modulus = 11E9\nviscosity = 1.0e1\ndensity0 = 534\nthermal_expansion = 0.0000118\ncp = 4194\ncv = 4186\nporepressure_coefficient = 0\n[]\n[]\n[]\n[Materials]\n[porosity]\ntype = PorousFlowPorosityConst\nporosity = 0.2\nchemical = false\n[]\n[biot_modulus]\ntype = PorousFlowConstantBiotModulus\nsolid_bulk_compliance = 2E-9\nfluid_bulk_modulus = 11E9\n[]\n[permeability]\ntype = PorousFlowPermeabilityKozenyCarman\nk0 = 1e-12\nk_anisotropy = '1E-25 0 0   0 1 0   0 0 1E-25'\nf = 0.01\nd = 50e-9\nporoperm_function = kozeny_carman_fd2\nm = 3\nn = 2\n[]\n[thermal_expansion]\ntype = PorousFlowConstantThermalExpansionCoefficient\ndrained_coefficient = 0.00002\nfluid_coefficient = 0.00002\n[]\n[rock_internal_energy]\ntype = PorousFlowMatrixInternalEnergy\ndensity = 2500.0\nspecific_heat_capacity = 1200.0\n[]\n[thermal_conductivity]\ntype = PorousFlowThermalConductivityIdeal\ndry_thermal_conductivity = '10 0 0  0 10 0  0 0 10'\n[]\n[elasticity_tensor]\ntype = ComputeIsotropicElasticityTensor\nyoungs_modulus = 100E9\npoissons_ratio = 0.25\n[]\n[strain]\ntype = ComputeSmallStrain\neigenstrain_names = thermal_contribution\n[]\n[thermal_contribution]\ntype = ComputeThermalExpansionEigenstrain\ntemperature = temperature\nthermal_expansion_coeff = 1e-19 # this is the linear thermal expansion coefficient\neigenstrain_name = thermal_contribution\nstress_free_temperature = 293\n[]\n[stress]\ntype = ComputeLinearElasticStress\n[]\n[]\n[Preconditioning]\nactive = preferred_but_might_not_be_installed\n[basic]\ntype = SMP\nfull = true\npetsc_options = '-ksp_diagonal_scale -ksp_diagonal_scale_fix'\npetsc_options_iname = '-pc_type -sub_pc_type -sub_pc_factor_shift_type -pc_asm_overlap'\npetsc_options_value = ' asm      lu           NONZERO                   2'\n[]\n[preferred_but_might_not_be_installed]\ntype = SMP\nfull = true\n[]\n[]\n[Executioner]\ntype = Transient\nautomatic_scaling = false\ncompute_scaling_once = false\npetsc_options_iname = '-pc_type -pc_factor_mat_solver_package -snes_force_iteration'\npetsc_options_value = ' lu       mumps 1'\nsolve_type = Newton\nend_time = 36000\ndt = 0.1\nnl_max_its = 100\nnl_abs_tol = 1E-8\nnl_rel_tol = 1E-3\nresid_vs_jac_scaling_param = 0.5\ndtmax = 25\nend_time = 500\nnum_steps = 10\n[TimeStepper]\ntype = IterationAdaptiveDT\ndt = 1\noptimal_iterations = 100\ncutback_factor = 0.5\ngrowth_factor = 1.1\n[]\n[]\n[Outputs]\nexodus = true\ncsv = true\nsync_times = '500'\nsync_only = false\nfile_base = xxx2\n[]\n`",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2971280",
                  "updatedAt": "2022-06-17T12:30:15Z",
                  "publishedAt": "2022-06-17T12:30:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "Hi @srinath-chakravarthy ,\nJust check your BCs.  For instance, it looks like you're applying a Pressure and a DirichletBC on top to the Variable disp_z.  Perhaps a copy-and-paste error and your roller BCs aren't really what you wanted?   Does this help or am i way off?\na",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2981821",
                  "updatedAt": "2022-06-19T22:46:36Z",
                  "publishedAt": "2022-06-19T22:46:36Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Sorry about the cut and paste error. So silly, I was barking up the wrong\ntree... Thanks a lot. Will check with correct BCS in a little bit.\n\nCheers\nSrinath\n\u2026\nOn Sun, Jun 19, 2022, 6:46 PM Andy Wilkins ***@***.***> wrote:\n Hi @srinath-chakravarthy <https://github.com/srinath-chakravarthy> ,\n\n Just check your BCs. For instance, it looks like you're applying a\n Pressure *and* a DirichletBC on top to the Variable disp_z. Perhaps a\n copy-and-paste error and your roller BCs aren't really what you wanted?\n Does this help or am i way off?\n\n a\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21313 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LJCEAH6X3UOWVPJV7DVP6PNPANCNFSM5Y4TGQ7Q>\n .\n You are receiving this because you were mentioned.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-2981887",
                  "updatedAt": "2022-06-19T23:13:06Z",
                  "publishedAt": "2022-06-19T23:13:05Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "srinath-chakravarthy"
                  },
                  "bodyText": "Perfect that works. Thanks\n\u2026\nOn Wed, Jun 15, 2022, 8:07 PM Andy Wilkins ***@***.***> wrote:\n effective = total + biot_coefficient * porepressure (see\n https://mooseframework.inl.gov/modules/porous_flow/governing_equations.html\n ). So you want effective - biot_coefficient * porepressure (since your\n biot_coefficient = 1, you need effective - porepressure).\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#21313 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/ACYC6LK5NPTDNO67WIWMVYDVPJV5TANCNFSM5Y4TGQ7Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/21313#discussioncomment-3848256",
                  "updatedAt": "2022-10-11T09:11:52Z",
                  "publishedAt": "2022-10-11T09:11:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Porous Flow - p-h variables",
          "author": {
            "login": "MrChips87"
          },
          "bodyText": "Very new to Moose and porous flow modeling in general. I love the ease at which I can add and remove modules and while I have not gotten into it yet, I am sure I find writing my own kernals very beneficial. I have primarily used Elmer FEM previously and while it is great it is not as easily customized.\nI have been working my way through the porous flow tutorial and trying to setup a few scenarios of my own while I try to learn the different operators. At the end of the day I would like to set up a model with a vadose/saturated zone and single steam injection well. I understand this will be difficult to do, small timesteps and all that. The only user example I have been able to find of this came from the old Moose Google Group where somebody had set up a model for \"steam assisted gravity drainage\". The primary variables used in that were T and P - need enthalpy for the phase change.\nI thought I would set up a simple model with just hot water injection with P and h as the primary variables to get things started. My mesh is essentially a much much denser version of the 'cap/aquifer' mesh from the porous flow tutorial. I don't have any problems getting it to run until I add in the PorousFlowOutflowBC to the outer boundary of the model. I can get it to run for a period of time and then I start to get errors for the pressure being out of the range for water. For the timesteps it will converge, the pore pressure at the outflow boundary drops and rises and drops.\nI am sure I have set the input file up incorrectly. If somebody would be able to take a quick look and point me in the right direction I would be grateful.\n  [fmg]\n    type = FileMeshGenerator\n    file = InjectionWellSimple.msh\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n  gravity = '0 0 0'\n[]\n\n[Variables]\n  [p]\n    initial_condition = 101325\n  []\n  [h]\n#    scaling = 1e-6\n  []\n[]\n\n[ICs]\n  [hic]\n    type = PorousFlowFluidPropertyIC\n    variable = h\n    porepressure = p\n    property = enthalpy\n    temperature = 293.15\n    fp = water #The 'fp' is the name of the user object. In this case, water_fp = \"water\" in the fs userobject\n  []\n[]\n\n[Functions]\n  [injection_rate]\n    type = ParsedFunction\n    vals = injection_area\n    vars = area\n    value = '-0.06299/area'\n  []\n[]\n\n[BCs]\n\n  [outflow1]\n    type = PorousFlowOutflowBC\n    boundary = 20\n    variable = p\n  []\n  \n  [outflow2]\n    type = PorousFlowOutflowBC\n    boundary = 20\n    flux_type = heat\n    variable = h\n  []\n\n[]\n\n[Materials]\n  [water]\n    type = PorousFlowFluidStateSingleComponent\n    porepressure = p\n    enthalpy = h\n    capillary_pressure = pc\n    fluid_state = FluidState #FluidState from userobjects\n  []\n  [porosity]\n    type = PorousFlowPorosityConst\n    porosity = 0.35\n  []\n  [permeability_aquifer]\n    type = PorousFlowPermeabilityConst\n    block = Aquifer\n    permeability = '1E-13 0 0   0 1E-13 0   0 0 1E-13'\n  []\n  [permeability_caps]\n    type = PorousFlowPermeabilityConst\n    block = Cap\n    permeability = '1E-17 0 0   0 1E-17 0   0 0 1E-17'\n  []\n  [relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 3\n    phase = 0\n    s_res = 0.1\n    sum_s_res = 0.1\n  []\n  [relperm_gas]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 2\n    phase = 1\n    sum_s_res = 0.1\n  []\n  [rock_internal_energy]\n    type = PorousFlowMatrixInternalEnergy\n    density = 2500.0\n    specific_heat_capacity = 800.0\n  []\n  [rock_thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '1 0 0  0 1 0  0 0 1'\n\tblock = 'Cap Aquifer'\n  []\n[]\n\n[Modules]\n  [./FluidProperties]\n    [./water]\n      type = Water97FluidProperties\n    [../]\n  [../]\n\n  [PorousFlow]\n    [BCs]\n      [injectionwell_one]\n        type = PorousFlowSinkBC\n        boundary = 10\n        fluid_phase = 0\n        T_in = 353.15\n        fp = water\n        flux_function = injection_rate\n      []\n      \n    []\n  []  \n  \n[]\n\n[AuxVariables]\n  [pressure_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [pressure_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [enthalpy_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [enthalpy_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [saturation_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [saturation_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [density_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [density_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [viscosity_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [viscosity_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [temperature]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[AuxKernels]\n[enthalpy_water]\n    type = PorousFlowPropertyAux\n    variable = enthalpy_water\n    property = enthalpy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_gas]\n    type = PorousFlowPropertyAux\n    variable = enthalpy_gas\n    property = enthalpy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [pressure_water]\n    type = PorousFlowPropertyAux\n    variable = pressure_water\n    property = pressure\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [pressure_gas]\n    type = PorousFlowPropertyAux\n    variable = pressure_gas\n    property = pressure\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [saturation_water]\n    type = PorousFlowPropertyAux\n    variable = saturation_water\n    property = saturation\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [saturation_gas]\n    type = PorousFlowPropertyAux\n    variable = saturation_gas\n    property = saturation\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [density_water]\n    type = PorousFlowPropertyAux\n    variable = density_water\n    property = density\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [density_gas]\n    type = PorousFlowPropertyAux\n    variable = density_gas\n    property = density\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_water]\n    type = PorousFlowPropertyAux\n    variable = viscosity_water\n    property = viscosity\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_gas]\n    type = PorousFlowPropertyAux\n    variable = viscosity_gas\n    property = viscosity\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [temperature]\n    type = PorousFlowPropertyAux\n    variable = temperature\n    property = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [e_water]\n    type = PorousFlowPropertyAux\n    variable = e_water\n    property = internal_energy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [egas]\n    type = PorousFlowPropertyAux\n    variable = e_gas\n    property = internal_energy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Kernels]\n  [mass]\n    type = PorousFlowMassTimeDerivative\n    variable = p\n  []\n  [massflux]\n    type = PorousFlowAdvectiveFlux\n    variable = p\n  []\n  [heat]\n    type = PorousFlowEnergyTimeDerivative\n    variable = h\n  []\n  [heatflux]\n    type = PorousFlowHeatAdvection\n    variable = h\n  []\n  [heatcond]\n    type = PorousFlowHeatConduction\n    variable = h\n  []\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'p h'\n    number_fluid_phases = 2\n    number_fluid_components = 1\n  []\n  \n  [pc]\n    type = PorousFlowCapillaryPressureVG\n    m = 0.5\n    alpha = 1e-5\n  []\n  \n  [FluidState]\n    type = PorousFlowWaterVapor\n    water_fp = water\n    capillary_pressure = pc\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu mumps'\n  automatic_scaling = true\n  solve_type = Newton\n  end_time = 1000\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 100\n  [../]\n  l_abs_tol = 1E-6\n  nl_abs_tol = 1E-6\n[]\n\n[VectorPostprocessors]\n  [line]\n    type = ElementValueSampler\n    sort_by = x\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Postprocessors]\n  [injection_area]\n    type = AreaPostprocessor\n    boundary = 10\n    execute_on = initial\n  []\n  [density_water]\n    type = ElementAverageValue\n    variable = density_water\n    execute_on = 'initial timestep_end'\n  []\n  [density_gas]\n    type = ElementAverageValue\n    variable = density_gas\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_water]\n    type = ElementAverageValue\n    variable = viscosity_water\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_gas]\n    type = ElementAverageValue\n    variable = viscosity_gas\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_water]\n    type = ElementAverageValue\n    variable = enthalpy_water\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_gas]\n    type = ElementAverageValue\n    variable = enthalpy_gas\n    execute_on = 'initial timestep_end'\n  []\n  [sg]\n    type = ElementAverageValue\n    variable = saturation_gas\n    execute_on = 'initial timestep_end'\n  []\n  [sw]\n    type = ElementAverageValue\n    variable = saturation_water\n    execute_on = 'initial timestep_end'\n  []\n  [pwater]\n    type = ElementAverageValue\n    variable = pressure_water\n    execute_on = 'initial timestep_end'\n  []\n  [pgas]\n    type = ElementAverageValue\n    variable = pressure_gas\n    execute_on = 'initial timestep_end'\n  []\n  [temperature]\n    type = ElementAverageValue\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy]\n    type = ElementAverageValue\n    variable = h\n    execute_on = 'initial timestep_end'\n  []\n  [p]\n    type = ElementAverageValue\n    variable = p\n    execute_on = 'initial timestep_end'\n  []\n  [liquid_mass]\n    type = PorousFlowFluidMass\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [vapor_mass]\n    type = PorousFlowFluidMass\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [liquid_heat]\n    type = PorousFlowHeatEnergy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [vapor_heat]\n    type = PorousFlowHeatEnergy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [e_water]\n    type = ElementAverageValue\n    variable = e_water\n    execute_on = 'initial timestep_end'\n  []\n  [e_gas]\n    type = ElementAverageValue\n    variable = e_gas\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Outputs]\n  exodus = true\n[]",
          "url": "https://github.com/idaholab/moose/discussions/22569",
          "updatedAt": "2023-01-10T16:29:47Z",
          "publishedAt": "2022-11-02T17:09:43Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Any chance you could either share the mesh file too, or change it to a generated mesh so we could try and run it?",
                  "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4042401",
                  "updatedAt": "2022-11-02T23:06:22Z",
                  "publishedAt": "2022-11-02T23:06:21Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "MrChips87"
                          },
                          "bodyText": "Thank you for the reply. I will have to create a less dense mesh that you can run. I went whole hog on this one because I will eventually use it for more complicated things (phase change) and I wanted to try out the mesh splitting and running it on multiple cores. I split it up to run on 20 cores. Let me do that and I will attach a new mesh for you to run.",
                          "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4051152",
                          "updatedAt": "2022-11-03T20:51:31Z",
                          "publishedAt": "2022-11-03T20:51:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MrChips87"
                          },
                          "bodyText": "I changed this to a generated mesh and changed around some of the input file boundary names to match. See code below.\nI changed the run-time, but you can see the pressure drop at the outflow boundary. I must not understand how this boundary condition works or have set it up incorrectly. It seems to behave more as a sink rather than a free flow boundary in my case.\n#[Mesh]\n#  [fmg]\n#    type = FileMeshGenerator\n#    file = InjectionWellSimple.msh\n#  []\n#[]\n\n[Mesh]\n  [annular]\n    type = AnnularMeshGenerator\n    nr = 20\t\t\t\t#number of elements in the radial direction\n    rmin = 0.0841375\t#inner radius\n    rmax = 10\t\t\t#outer radius\n    growth_r = 1.4\t\t#the ratio of radial sizes of successive rings of elements\n    nt = 32\t\t\t\t#number of elements in the angular direction\n    dmin = 0\n    dmax = 360\n  []\n  [make3D]\n    type = MeshExtruderGenerator\n    extrusion_vector = '0 0 16'\n    num_layers = 3\n    bottom_sideset = 'bottom'\n    top_sideset = 'top'\n    input = annular\n  []\n  [shift_down]\n    type = TransformGenerator\n    transform = TRANSLATE\n    vector_value = '0 0 -8'\n    input = make3D\n  []\n  [Aquifer]\n    type = SubdomainBoundingBoxGenerator\n    block_id = 1\n    bottom_left = '-10 -10 -5'\n    top_right = '10 10 5'\n    input = shift_down\n  []\n  [injectionarea]\n    type = ParsedGenerateSideset\n    combinatorial_geometry = 'x*x+y*y<(0.0841375^2)'\n    included_subdomains = 1\n    new_sideset_name = 'injectionarea'\n    input = 'Aquifer'\n  []\n  [rename]\n    type = RenameBlockGenerator\n    old_block = '0 1'\n    new_block = 'Caps Aquifer'\n    input = 'injectionarea'\n  []\n[]\n\n[GlobalParams]\n  PorousFlowDictator = dictator\n  gravity = '0 0 0'\n[]\n\n[Variables]\n  [p]\n    initial_condition = 101325\n  []\n  [h]\n#    scaling = 1e-6\n  []\n[]\n\n[ICs]\n  [hic]\n    type = PorousFlowFluidPropertyIC\n    variable = h\n    porepressure = p\n    property = enthalpy\n    temperature = 293.15\n    fp = water #The 'fp' is the name of the user object. In this case, water_fp = \"water\" in the fs userobject\n  []\n[]\n\n[Functions]\n  [injection_rate]\n    type = ParsedFunction\n    vals = injection_area\n    vars = area\n    value = '-0.06299/area'\n  []\n[]\n\n[BCs]\n\n  [outflow1]\n    type = PorousFlowOutflowBC\n    boundary = rmax\n    variable = p\n  []\n  \n  [outflow2]\n    type = PorousFlowOutflowBC\n    boundary = rmax\n    flux_type = heat\n    variable = h\n  []\n\n[]\n\n[Materials]\n  [water]\n    type = PorousFlowFluidStateSingleComponent\n    porepressure = p\n    enthalpy = h\n    capillary_pressure = pc\n    fluid_state = FluidState #FluidState from userobjects\n  []\n  [porosity]\n    type = PorousFlowPorosityConst\n    porosity = 0.35\n  []\n  [permeability_aquifer]\n    type = PorousFlowPermeabilityConst\n    block = Aquifer\n    permeability = '1E-13 0 0   0 1E-13 0   0 0 1E-13'\n  []\n  [permeability_caps]\n    type = PorousFlowPermeabilityConst\n    block = Caps\n    permeability = '1E-17 0 0   0 1E-17 0   0 0 1E-17'\n  []\n  [relperm_water]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 3\n    phase = 0\n    s_res = 0.1\n    sum_s_res = 0.1\n  []\n  [relperm_gas]\n    type = PorousFlowRelativePermeabilityCorey\n    n = 2\n    phase = 1\n    sum_s_res = 0.1\n  []\n  [rock_internal_energy]\n    type = PorousFlowMatrixInternalEnergy\n    density = 2500.0\n    specific_heat_capacity = 800.0\n  []\n  [rock_thermal_conductivity]\n    type = PorousFlowThermalConductivityIdeal\n    dry_thermal_conductivity = '1 0 0  0 1 0  0 0 1'\n\tblock = 'Caps Aquifer'\n  []\n[]\n\n[Modules]\n  [./FluidProperties]\n    [./water]\n      type = Water97FluidProperties\n    [../]\n  [../]\n\n  [PorousFlow]\n    [BCs]\n      [injectionwell_one]\n        type = PorousFlowSinkBC\n        boundary = injectionarea\n        fluid_phase = 0\n        T_in = 353.15\n        fp = water\n        flux_function = injection_rate\n      []\n      \n    []\n  []  \n  \n[]\n\n[AuxVariables]\n  [pressure_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [pressure_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [enthalpy_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [enthalpy_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [saturation_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [saturation_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [density_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [density_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [viscosity_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [viscosity_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [temperature]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_gas]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n  [e_water]\n    order = CONSTANT\n    family = MONOMIAL\n  []\n[]\n\n[AuxKernels]\n[enthalpy_water]\n    type = PorousFlowPropertyAux\n    variable = enthalpy_water\n    property = enthalpy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_gas]\n    type = PorousFlowPropertyAux\n    variable = enthalpy_gas\n    property = enthalpy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [pressure_water]\n    type = PorousFlowPropertyAux\n    variable = pressure_water\n    property = pressure\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [pressure_gas]\n    type = PorousFlowPropertyAux\n    variable = pressure_gas\n    property = pressure\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [saturation_water]\n    type = PorousFlowPropertyAux\n    variable = saturation_water\n    property = saturation\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [saturation_gas]\n    type = PorousFlowPropertyAux\n    variable = saturation_gas\n    property = saturation\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [density_water]\n    type = PorousFlowPropertyAux\n    variable = density_water\n    property = density\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [density_gas]\n    type = PorousFlowPropertyAux\n    variable = density_gas\n    property = density\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_water]\n    type = PorousFlowPropertyAux\n    variable = viscosity_water\n    property = viscosity\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_gas]\n    type = PorousFlowPropertyAux\n    variable = viscosity_gas\n    property = viscosity\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [temperature]\n    type = PorousFlowPropertyAux\n    variable = temperature\n    property = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [e_water]\n    type = PorousFlowPropertyAux\n    variable = e_water\n    property = internal_energy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [egas]\n    type = PorousFlowPropertyAux\n    variable = e_gas\n    property = internal_energy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Kernels]\n  [mass]\n    type = PorousFlowMassTimeDerivative\n    variable = p\n  []\n  [massflux]\n    type = PorousFlowAdvectiveFlux\n    variable = p\n  []\n  [heat]\n    type = PorousFlowEnergyTimeDerivative\n    variable = h\n  []\n  [heatflux]\n    type = PorousFlowHeatAdvection\n    variable = h\n  []\n  [heatcond]\n    type = PorousFlowHeatConduction\n    variable = h\n  []\n[]\n\n[UserObjects]\n  [dictator]\n    type = PorousFlowDictator\n    porous_flow_vars = 'p h'\n    number_fluid_phases = 2\n    number_fluid_components = 1\n  []\n  \n  [pc]\n    type = PorousFlowCapillaryPressureVG\n    m = 0.5\n    alpha = 1e-5\n  []\n  \n  [FluidState]\n    type = PorousFlowWaterVapor\n    water_fp = water\n    capillary_pressure = pc\n  []\n[]\n\n[Preconditioning]\n  [smp]\n    type = SMP\n    full = true\n  []\n[]\n\n[Executioner]\n  type = Transient\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu mumps'\n  automatic_scaling = true\n  solve_type = Newton\n  end_time = 700\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 10\n  [../]\n  l_abs_tol = 1E-6\n  nl_abs_tol = 1E-6\n[]\n\n[VectorPostprocessors]\n  [line]\n    type = ElementValueSampler\n    sort_by = x\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Postprocessors]\n  [injection_area]\n    type = AreaPostprocessor\n    boundary = injectionarea\n    execute_on = initial\n  []\n  [density_water]\n    type = ElementAverageValue\n    variable = density_water\n    execute_on = 'initial timestep_end'\n  []\n  [density_gas]\n    type = ElementAverageValue\n    variable = density_gas\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_water]\n    type = ElementAverageValue\n    variable = viscosity_water\n    execute_on = 'initial timestep_end'\n  []\n  [viscosity_gas]\n    type = ElementAverageValue\n    variable = viscosity_gas\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_water]\n    type = ElementAverageValue\n    variable = enthalpy_water\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy_gas]\n    type = ElementAverageValue\n    variable = enthalpy_gas\n    execute_on = 'initial timestep_end'\n  []\n  [sg]\n    type = ElementAverageValue\n    variable = saturation_gas\n    execute_on = 'initial timestep_end'\n  []\n  [sw]\n    type = ElementAverageValue\n    variable = saturation_water\n    execute_on = 'initial timestep_end'\n  []\n  [pwater]\n    type = ElementAverageValue\n    variable = pressure_water\n    execute_on = 'initial timestep_end'\n  []\n  [pgas]\n    type = ElementAverageValue\n    variable = pressure_gas\n    execute_on = 'initial timestep_end'\n  []\n  [temperature]\n    type = ElementAverageValue\n    variable = temperature\n    execute_on = 'initial timestep_end'\n  []\n  [enthalpy]\n    type = ElementAverageValue\n    variable = h\n    execute_on = 'initial timestep_end'\n  []\n  [p]\n    type = ElementAverageValue\n    variable = p\n    execute_on = 'initial timestep_end'\n  []\n  [liquid_mass]\n    type = PorousFlowFluidMass\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [vapor_mass]\n    type = PorousFlowFluidMass\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [liquid_heat]\n    type = PorousFlowHeatEnergy\n    phase = 0\n    execute_on = 'initial timestep_end'\n  []\n  [vapor_heat]\n    type = PorousFlowHeatEnergy\n    phase = 1\n    execute_on = 'initial timestep_end'\n  []\n  [e_water]\n    type = ElementAverageValue\n    variable = e_water\n    execute_on = 'initial timestep_end'\n  []\n  [e_gas]\n    type = ElementAverageValue\n    variable = e_gas\n    execute_on = 'initial timestep_end'\n  []\n[]\n\n[Outputs]\n  exodus = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4080327",
                          "updatedAt": "2022-11-09T15:54:19Z",
                          "publishedAt": "2022-11-07T20:36:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "friedmud"
                          },
                          "bodyText": "@WilkAndy @cpgr - any further follow-up you could give on this?",
                          "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4361889",
                          "updatedAt": "2022-12-10T07:39:21Z",
                          "publishedAt": "2022-12-10T07:39:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Everything appears ok at first glance. Does it help if you make the mesh extend further in the radial direction? Ten metres isn't very large. The pressure will propagate rapidly through the aquifer unit, and will quickly see the boundary.",
                          "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4383902",
                          "updatedAt": "2022-12-12T21:55:50Z",
                          "publishedAt": "2022-12-12T21:55:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "MrChips87"
                          },
                          "bodyText": "I have tried doubling and tripling the diameter of the model, but it still runs away on me.\nPressure -164273 is out of range in water: inRegionPH()\n      Line search: objective function at lambdas = 1. is Inf or Nan, cutting lambda",
                          "url": "https://github.com/idaholab/moose/discussions/22569#discussioncomment-4647332",
                          "updatedAt": "2023-01-10T16:29:47Z",
                          "publishedAt": "2023-01-10T16:29:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}