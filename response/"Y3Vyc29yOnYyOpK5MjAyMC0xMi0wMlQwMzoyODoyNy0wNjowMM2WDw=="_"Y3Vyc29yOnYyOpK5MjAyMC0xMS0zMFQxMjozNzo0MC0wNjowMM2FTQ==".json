{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMC0xMS0zMFQxMjozNzo0MC0wNjowMM2FTQ=="
    },
    "edges": [
      {
        "node": {
          "title": "Can MOOSE users easily use SEACAS?",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "libmesh is a submodule of MOOSE, and i see libmesh uses a lot of the libraries that SEACAS, https://github.com/gsjaardema/seacas , uses.    I don't know, but perhaps the entire SEACAS is hiding somewhere in libmesh.\nI tried, and failed, to get SEACAS working on my computer - you have to get netcdf, hdf, and various other things, and i just ran out of time.\nDoes anyone have tips for using libmesh's already-built libraries to quickly get a working copy of SEACAS ?    (Or, you could suggest a well-documented alternative for writing exodus files using python.  The VTK libraries are almost perfect in this regard, but their exodusII writer has some bugs, boohoo.)",
          "url": "https://github.com/idaholab/moose/discussions/16344",
          "updatedAt": "2022-07-20T17:22:37Z",
          "publishedAt": "2020-11-30T22:20:02Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "I am not sure how helpful this will be... But this is how I was building/including SEACAS tools into the old moose-environment package: https://github.com/idaholab/package_builder/blob/master/build_from_source/template/seacas-tools\nThe scripts therein might help you design your own installing method.",
                  "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-143132",
                  "updatedAt": "2022-07-20T17:22:37Z",
                  "publishedAt": "2020-11-30T22:30:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks @milljm",
                          "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-143138",
                          "updatedAt": "2022-07-20T17:22:37Z",
                          "publishedAt": "2020-11-30T22:39:59Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "Hey Andy, I had problems building SEACAS as well when using em2ex, especially on the Travis CI machines that I use for testing, so I wrote a pyexodus class that I use to write to an exodus file after converting from a Petrel file. It's in here: https://github.com/cpgr/em2ex/tree/master/pyexodus\nIt's pretty straightforward, and basically mimics the Exodus python API without needing SEACAS.\nAll it needs is the python netCDF4 which is easy to install",
                  "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-143161",
                  "updatedAt": "2022-10-19T12:21:27Z",
                  "publishedAt": "2020-11-30T23:30:47Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Thanks @cpgr .  Do you know if libmesh already has netCDF4 ?",
                          "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-144358",
                          "updatedAt": "2022-10-19T12:21:28Z",
                          "publishedAt": "2020-12-01T23:44:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I rely on the python one that is trivial to install pip instal netCDF4\nI've also used meshio as @GregVernon mentioned and it is excellent, but didn't fit my particular use case (conversion from geological model).",
                          "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-144370",
                          "updatedAt": "2022-10-19T12:21:28Z",
                          "publishedAt": "2020-12-02T00:06:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GregVernon"
                  },
                  "bodyText": "@WilkAndy Here are several options for creating Exodus files via Python, depending on what your use-case is\nTranslation from another format\nThere's a fantastic Python module called meshio (available on PyPi) that can read, write, and convert between the following mesh formats:\n\n\nAbaqus\nANSYS msh\nAVS-UCD\nCGNS\nDOLFIN XML\nExodus\nFLAC3D\nH5M\nKratos/MDPA\nMedit\nMED/Salome\nNastran (bulk data)\nNeuroglancer precomputed format\nGmsh (format versions 2.2, 4.0, and 4.1)\nOBJ\nOFF\nPERMAS\nPLY\nSTL\nTecplot .dat\nTetGen .node/.ele\nSVG (2D only, output only)\nSU2\nUGRID\nVTK\nVTU\nWKT (TIN)\nXDMF\n\n\nAutomated mesh-generation and export to Exodus\nYou could use Coreform Cubit, which has a Python-API that is also accessible as an importable Python module. and natively exports Exodus files.  I've automated many meshing routines (DoE, optimization, etc) using this technique in my former career as an FEA analyst, and as a student.  You can get a free edition of Coreform Cubit, called Coreform Cubit Learn, by following the instructions on this page.  The only limitations of the free edition are personal non-commercial use, educational use, and an export limitation of 50k elements.\nSEACAS\nAs noted by @cpgr, SEACAS includes a python module, exodus.py for directly querying or modifying Exodus files.  There are also some conversion tools that you might find helpful:\n\nexo2mat and mat2exo  -- convert Exodus to / from Matlab file format\nexotxt and txtexo -- convert Exodus to / from an equivalent ASCII format (which is documented somewhere)",
                  "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-144312",
                  "updatedAt": "2022-10-25T06:47:45Z",
                  "publishedAt": "2020-12-01T22:27:32Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Excellent, thanks @GregVernon",
                          "url": "https://github.com/idaholab/moose/discussions/16344#discussioncomment-144360",
                          "updatedAt": "2022-10-25T06:48:26Z",
                          "publishedAt": "2020-12-01T23:44:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "postprocessor ordering",
          "author": {
            "login": "jessecarterMOOSE"
          },
          "bodyText": "Not sure if this is an \"issue\" or not, but I recently came across a case my postprocessor results were dependent on the order they were listed in the input file. I have several that were used together in a ParsedFunction, which gets output with a Postprocessor, and then that result made it into another ParsedFunction, whose output was also produced with a Postprocessor. If I had that second Postprocessor listed above the first in the input file, the results came out lagged by a timestep even if I told the processors to execute more often (ie. linear). Not a big deal (easy to fix), but I just thought I'd inquire if this was something expected.\nI was able to reproduce with this minimal input file:\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmin = 0\n  xmax = 1\n  ymin = 0\n  ymax = 1\n  nx = 2\n  ny = 2\n[]\n\n[AuxVariables]\n  [./v]\n  [../]\n[]\n\n[Variables]\n  [./u]\n  [../]\n[]\n\n[Functions]\n  [./constant_func]\n    type = ConstantFunction\n    value = 2.798\n  [../]\n  [./test]\n    type = ParsedFunction\n    vars = 'value1 value2'\n    vals = 'value1 value2'\n    value = 'value1+value2'\n  [../]\n  [./test2]\n    type = ParsedFunction\n    vars = 'test'\n    vals = 'test'\n    value = 'test'\n  [../]\n[]\n\n\n[ICs]\n  [./u_ic]\n    type = ConstantIC\n    variable = u\n    value = 2\n  [../]\n[]\n\n[AuxKernels]\n  [./one]\n    type = ConstantAux\n    variable = v\n    value = 1\n    execute_on = 'initial timestep_end'\n  [../]\n[]\n\n[Kernels]\n  [./diff]\n    type = Diffusion\n    variable = u\n  [../]\n[]\n\n[BCs]\n  [./left]\n    type = DirichletBC\n    variable = u\n    boundary = left\n    value = 0\n  [../]\n  [./right]\n    type = DirichletBC\n    variable = u\n    boundary = right\n    value = 1\n  [../]\n[]\n\n[Postprocessors]\n  [./value1]\n    type = FunctionValuePostprocessor\n    function = constant_func\n    execute_on = 'initial timestep_end'\n  [../]\n  [./value2]\n    type = FunctionValuePostprocessor\n    function = 2*t\n    execute_on = 'initial timestep_end'\n  [../]\n\n  # these next two postprocessors should output the same result\n  # but will not if 'test2' is listed before 'test'\n  [./test2]\n    type = FunctionValuePostprocessor\n    function = 'test2'\n    execute_on = 'initial timestep_end'\n  [../]\n  [./test]\n    type = FunctionValuePostprocessor\n    function = 'test'\n    execute_on = 'initial timestep_end'\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  num_steps = 5\n[]\n\n[Outputs]\n  csv = true\n[]\n\n[Problem]\n  solve = false\n[]",
          "url": "https://github.com/idaholab/moose/discussions/16203",
          "updatedAt": "2022-12-09T04:29:07Z",
          "publishedAt": "2020-11-16T17:47:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Dependency resolution of postprocessors is not carried through indirect dependencies that result from the use of postprocessors in parsed functions with said function values then being used in another postprocessor.\npostprocessor1 -> function -> postprocessor2\n\nThe dependency resolution only recognizes\npostprocessor1 -> postprocessor2",
                  "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-131030",
                  "updatedAt": "2023-01-08T01:32:25Z",
                  "publishedAt": "2020-11-16T20:23:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "A quick workaround would be to allow users to explicitly specify indirect dependencies. The better solution, a complete overhaul of the dependency system, is being researched as a funded project as far as I know.",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-131034",
                          "updatedAt": "2023-01-08T01:32:26Z",
                          "publishedAt": "2020-11-16T20:26:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Like so: fa926be",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-143944",
                          "updatedAt": "2023-01-08T01:32:26Z",
                          "publishedAt": "2020-12-01T16:27:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "Great! The input file I posted above might make a good test for this.",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-144126",
                          "updatedAt": "2023-01-08T01:32:26Z",
                          "publishedAt": "2020-12-01T19:23:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "PR at #16358 (I used a simpler test based on the current time)",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-144168",
                          "updatedAt": "2023-01-08T01:32:26Z",
                          "publishedAt": "2020-12-01T20:06:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "jessecarterMOOSE"
                  },
                  "bodyText": "Is there not some kind of parsed postprocessor @dschwen ? I'm only using Functions to combine postprocessor results. If I could get rid of the Functions then maybe I could get dependency resolution.",
                  "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-131048",
                  "updatedAt": "2023-02-11T00:24:29Z",
                  "publishedAt": "2020-11-16T20:58:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "ping @dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-142675",
                          "updatedAt": "2023-02-11T00:24:35Z",
                          "publishedAt": "2020-11-30T15:45:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "How are you combining them? Difference, sum, average... ?",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-143110",
                          "updatedAt": "2023-02-11T00:24:35Z",
                          "publishedAt": "2020-11-30T21:57:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jessecarterMOOSE"
                          },
                          "bodyText": "All of the above.",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-143775",
                          "updatedAt": "2023-02-11T00:24:36Z",
                          "publishedAt": "2020-12-01T13:56:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "I don't think the code duplication resulting from a parsed postprocessor is acceptable. I'm working on a quick fix now.",
                          "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-143901",
                          "updatedAt": "2023-02-11T00:24:37Z",
                          "publishedAt": "2020-12-01T16:04:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "You may consider creating a custom object to compute what you need, perhaps the new Reporter system is worth a look.\nhttps://mooseframework.inl.gov/syntax/Reporters/index.html",
                  "url": "https://github.com/idaholab/moose/discussions/16203#discussioncomment-142690",
                  "updatedAt": "2023-02-11T00:24:43Z",
                  "publishedAt": "2020-11-30T15:53:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "For PFF model, what is different by using the grain tracker and by not using  grain tracker",
          "author": {
            "login": "caoductoan379"
          },
          "bodyText": "Dear Moose\nI am simulating the PFF example. I used a input file with including the grain tracker part and without including the grain tracker part to run program for the same micro structure . I received two different results for crack propagating.\nCould you please let me know  what is different by using the grain tracker and by not using the grain tracker in Moose for PFF model?\nKind regards,\nToan",
          "url": "https://github.com/idaholab/moose/discussions/16335",
          "updatedAt": "2023-07-20T09:30:01Z",
          "publishedAt": "2020-11-30T14:39:25Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "It will be helpful if you attach your input file. What do you use grain tracker for?",
                  "url": "https://github.com/idaholab/moose/discussions/16335#discussioncomment-143249",
                  "updatedAt": "2023-12-01T05:24:41Z",
                  "publishedAt": "2020-12-01T05:06:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "caoductoan379"
                          },
                          "bodyText": "Thanks Jiang\nRight now, I understand what is different because i used two constitutive function different\n\n\nwithout grain tracker\n[./elasticity_tensor]\ntype = ComputeElasticityTensorCP\nC_ijkl = '1.27e5 0.708e5 0.708e5 1.27e5 0.708e5 1.27e5 0.7355e5 0.7355e5 0.7355e5'\nfill_method = symmetric9\nread_prop_user_object = prop_read\n[../]\n\n\nwith grain tracker\n\n\n[./ElasticityTensor]\ntype = ComputePolycrystalElasticityTensor\ngrain_tracker = grain_tracker\noutputs = all\n[../]\nKind regards,\nToan",
                          "url": "https://github.com/idaholab/moose/discussions/16335#discussioncomment-144154",
                          "updatedAt": "2023-12-01T05:25:02Z",
                          "publishedAt": "2020-12-01T19:47:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Permission denied in git status command",
          "author": {
            "login": "hyeom-wisc"
          },
          "bodyText": "Hello,\nI am a new user in Moose code and moving forward step by step by asking questions in this forum. Thank you so much all!\nI am working on tutorial01. I was able to run a new input file and see the output through peacock. It took a week for me to get this stage. However, unfortunately, I have some issue to run \"git status\" It shows:\n(moose) hyeom@ERB914-7920:~/projects/babbler$ git status\nfatal: .git/index: index file open failed: Permission denied\n\nIn GitHub desktop, it says \"last fetched just now on\" but I cannot Pull in Git tab in Atom. I think I messed it up somehow. Can you please provide some clues to resolve this? Thanks. Sung",
          "url": "https://github.com/idaholab/moose/discussions/16338",
          "updatedAt": "2023-03-20T09:35:26Z",
          "publishedAt": "2020-11-30T17:30:56Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Permission denied errors usually are the result of running commands with sudo.\nCan you perform a long listing while 'babbler'?\nls -latrh ~/projects/babbler\nThanks!",
                  "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-142927",
                  "updatedAt": "2023-03-20T09:35:27Z",
                  "publishedAt": "2020-11-30T17:44:39Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Dear Jason,\nI typed the command and the result is shown below. Can you see some issue? Thanks. Sung.\n(moose) hyeom@ERB914-7920:~/projects/babbler$ ls -latrh ~/projects/babbler\ntotal 476K\n-rw-r--r-- 1 hyeom hyeom  26K Nov 24 12:17 LICENSE\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 include\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 scripts\n-rw-r--r-- 1 hyeom hyeom  183 Nov 24 12:17 README.md\n-rw-r--r-- 1 hyeom hyeom 2.1K Nov 24 12:17 Makefile\n-rwxr-xr-x 1 hyeom hyeom  470 Nov 24 12:17 run_tests\n-rw-r--r-- 1 hyeom hyeom   86 Nov 24 12:17 testroot\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 unit\n-rw-r--r-- 1 hyeom hyeom  738 Nov 24 12:17 .clang-format\n-rw-r--r-- 1 hyeom hyeom 3.2K Nov 24 12:17 .gitignore\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:25 build\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:26 test\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:26 .libs\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 27 11:51 ..\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:06 src\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:07 lib\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:08 .\n-rwxr-xr-x 1 hyeom hyeom 426K Nov 28 15:08 babbler-opt\n-rw-r--r-- 1 hyeom hyeom 7.7K Nov 28 15:09 .previous_test_results.json\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 09:53 doc\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 09:53 .git\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 11:18 problems",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143078",
                          "updatedAt": "2023-09-25T16:34:07Z",
                          "publishedAt": "2020-11-30T21:09:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "Better do a ls -latrh ~/projects/babbler/.git",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143099",
                          "updatedAt": "2023-09-25T16:34:09Z",
                          "publishedAt": "2020-11-30T21:47:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "dschwen"
                          },
                          "bodyText": "As Jason stated, you've probably run git with sudo at some point, changing the ownership of some internal git files to root. You can fix that by doing\nsudo chown -R hyeom:hyeom ~/projects/babbler\n\nand then never use sudo again when working with MOOSE :-)",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143101",
                          "updatedAt": "2023-09-25T16:34:09Z",
                          "publishedAt": "2020-11-30T21:49:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "maybe there are aspects of git which are not owned by you... can you perform the following:\nls -latrh ~/projects/babler/.git/\nThanks!\nEDIT: woops. Didn't see that Daniel already replied.",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143108",
                          "updatedAt": "2023-09-25T16:34:09Z",
                          "publishedAt": "2020-11-30T21:55:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Dear Daniel,\nIt showed the below after typing ls -latrch ~/projects/babber/.git\n(moose) hyeom@ERB914-7920:~/projects/babbler$ ls -latrh ~/projects/babbler/.git\ntotal 4.0K\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 branches\n-rw-r--r-- 1 hyeom hyeom   73 Nov 24 12:17 description\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 hooks\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 info\n-rw-r--r-- 1 hyeom hyeom   23 Nov 24 12:17 HEAD\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:23 logs\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:25 refs\n---------- 1 hyeom hyeom   41 Nov 28 14:32 ORIG_HEAD\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 14:37 objects\n---------- 1 hyeom hyeom 2.7K Nov 28 14:37 index\n---------- 1 hyeom hyeom   15 Nov 28 14:37 COMMIT_EDITMSG\n-rw-r--r-- 1 hyeom hyeom  262 Nov 28 15:02 config\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:08 ..\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 09:53 .\n---------- 1 hyeom hyeom    0 Nov 30 11:29 FETCH_HEAD\nAfter then, I tried the sudo chown and then typed git status. However, it still says \"fatal: .git/index: index file open failed: Permission denied\"\nSung",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143109",
                          "updatedAt": "2023-09-25T16:34:10Z",
                          "publishedAt": "2020-11-30T21:56:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Daniel and Jason,\nAs you said, I think some of the files (please see above) are not owned by me. Can you please let me know how to change the ownership?\nSincerely,\nSung",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143903",
                          "updatedAt": "2023-09-25T16:34:09Z",
                          "publishedAt": "2020-12-01T16:05:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hi Sung\nType: chmod +rw file_name (or * to get them all at once), in the .git directory, to change file read/write priviledges.\nBest,\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143920",
                          "updatedAt": "2023-09-25T16:34:09Z",
                          "publishedAt": "2020-12-01T16:08:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Guillaume,\nThanks. Now I can run \"git status\" after changing the ownership of .git folder. After then I typed \"git add problems\" and it showed another error. There are many permission issues... Sung\n(moose) hyeom@ERB914-7920:~/projects/babbler$ git add problems\nerror: insufficient permission for adding an object to repository database .git/objects\nerror: problems/pressure_diffusion.i: failed to insert into database\nerror: unable to index file 'problems/pressure_diffusion.i'\nfatal: updating files failed",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143969",
                          "updatedAt": "2023-03-20T09:35:30Z",
                          "publishedAt": "2020-12-01T16:43:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Maybe try changing the permissions recursively, for all files in the folder at once.\nSo 'chmod +rw --recursive ~/projects/babbler'",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143973",
                          "updatedAt": "2023-03-20T09:35:30Z",
                          "publishedAt": "2020-12-01T16:50:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Guillaume,\nThanks. I run it but it showed many \"cannot access\" error messages.\n(moose) hyeom@ERB914-7920:~/projects/babbler$ chmod +rw --recursive ~/projects/babbler\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/01/6580497728634160a6541a6342e2ba07000696': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/02/ae105e1a8d4370e00d1ce6bba5a072e299ad19': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/03/f7cb153298d959ee5bbc4493ad80c87341a684': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/0b/3f587194e53ab2c855ea66dac23662289fec90': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/17/b27300a29aad760be364281469b72f0ff4d1d7': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/34/154808f950bd18324a8b5ed914fc737c4dd931': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/34/58c0efe9c0fe75be67df29bac8601f8a28c927': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/3a/13df19eef2cc5b3df81d920175b31c411ca88c': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/3d/ffbd86b56f30d464d543ac4542443a1fc0a04e': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/47/d8ee3d8a753c186f5aed84296b42661f9e3028': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/62/c62ed143f8a6868635ac82eef6a66791957e03': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/79/201b6137aa03fe34b8c5867044a2f187fb6eea': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/87/249798ab181373d276a068dd3aec85d6d8ac4d': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/8c/aaf328a9718c6057e7f587a824f05af242d2e2': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/96/027c6336b3aecb7b9eea2a09a81f5df08e3efb': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/a3/2d71723da2ea0f4273943acd5192fbe1a717c0': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/b5/52b8e3d4fc5f233a5c9e8bf0d8e9bb400ed992': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/b5/6d12faeae50810d231b12b1f6b7b37cf9b0d0e': Permission denied\nchmod: cannot access '/home/hyeom/projects/babbler/.git/objects/e1/8a5a2ec524dee700af30333b153710d391f471': Permission denied",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143980",
                          "updatedAt": "2023-03-20T09:35:30Z",
                          "publishedAt": "2020-12-01T16:55:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hyeom-wisc"
                  },
                  "bodyText": "Guillaume,\nI am frustrated... I tried two things again.\n1)\n(moose) hyeom@ERB914-7920:~/projects/babbler$ sudo chown -R hyeom:hyeom /projects/babbler\n[sudo] password for hyeom:\n2)\n(moose) hyeom@ERB914-7920:/projects/babbler$ sudo chmod +rw --recursive /projects/babbler\n3)\n(moose) hyeom@ERB914-7920:/projects/babbler$ git add problems\nerror: insufficient permission for adding an object to repository database .git/objects\nerror: problems/pressure_diffusion.i: failed to insert into database\nerror: unable to index file 'problems/pressure_diffusion.i'\nfatal: updating files failed\nIt still showed the error message. It is not easy.",
                  "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-143995",
                  "updatedAt": "2023-04-10T17:05:59Z",
                  "publishedAt": "2020-12-01T17:14:01Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Guillaume,\nInterestingly, now the git status doesn't work again. I am sorry for taking your time on this issue.\n(moose) hyeom@ERB914-7920:~/projects/babbler$ git status\nfatal: failed to read object b56d12faeae50810d231b12b1f6b7b37cf9b0d0e: Permission denied",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144000",
                          "updatedAt": "2023-09-25T16:34:02Z",
                          "publishedAt": "2020-12-01T17:21:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The two commands you ran (chown -R ... and chmod --recursive ...) do similar things. -R is a short hand for --recursive.\nThe first one gives you ownership of the files, and the second read/write access\nCan you check the permissions again? With ls -latrh. Maybe run that in ~/projects/babbler and ~/projects/babbler/.git",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144019",
                          "updatedAt": "2023-09-25T16:34:02Z",
                          "publishedAt": "2020-12-01T17:38:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If fixing the permissions is becoming too time consuming, I recommend you re-create the application, and only move the files that you modified to the new application.\nIf this is your first commit, it should not take too long.",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144021",
                          "updatedAt": "2023-04-10T17:05:59Z",
                          "publishedAt": "2020-12-01T17:40:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Guillaume,\nPlease see the two ls -latrh commands. Can you see something strange?\n1)\n(moose) hyeom@ERB914-7920:~/projects/babbler$ ls -latrh /projects/babbler\ntotal 476K\n-rw-r--r-- 1 hyeom hyeom  26K Nov 24 12:17 LICENSE\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 include\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 scripts\n-rw-r--r-- 1 hyeom hyeom  183 Nov 24 12:17 README.md\n-rw-r--r-- 1 hyeom hyeom 2.1K Nov 24 12:17 Makefile\n-rwxr-xr-x 1 hyeom hyeom  470 Nov 24 12:17 run_tests\n-rw-r--r-- 1 hyeom hyeom   86 Nov 24 12:17 testroot\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 unit\n-rw-r--r-- 1 hyeom hyeom  738 Nov 24 12:17 .clang-format\n-rw-r--r-- 1 hyeom hyeom 3.2K Nov 24 12:17 .gitignore\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:25 build\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:26 test\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:26 .libs\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 27 11:51 ..\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:06 src\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:07 lib\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:08 .\n-rwxr-xr-x 1 hyeom hyeom 426K Nov 28 15:08 babbler-opt\n-rw-r--r-- 1 hyeom hyeom 7.7K Nov 28 15:09 .previous_test_results.json\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 09:53 doc\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 30 11:18 problems\ndrwxr-xr-x 1 hyeom hyeom 4.0K Dec  1 11:29 .git\n2)\n(moose) hyeom@ERB914-7920:/projects/babbler$ ls -latrh ~/projects/babbler/.git\ntotal 8.0K\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 branches\n-rw-r--r-- 1 hyeom hyeom   73 Nov 24 12:17 description\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 hooks\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:17 info\n-rw-r--r-- 1 hyeom hyeom   23 Nov 24 12:17 HEAD\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:23 logs\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 24 12:25 refs\n-rw-r--r-- 1 hyeom hyeom   41 Nov 28 14:32 ORIG_HEAD\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 14:37 objects\n-rw-r--r-- 1 hyeom hyeom  262 Nov 28 15:02 config\ndrwxr-xr-x 1 hyeom hyeom 4.0K Nov 28 15:08 ..\n-rw-r--r-- 1 hyeom hyeom    0 Nov 30 11:29 FETCH_HEAD\n-rw-r--r-- 1 hyeom hyeom 2.7K Dec  1 10:26 index\n-rw-r--r-- 1 hyeom hyeom 1.4K Dec  1 10:39 COMMIT_EDITMSG\ndrwxr-xr-x 1 hyeom hyeom 4.0K Dec  1 11:29 .",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144023",
                          "updatedAt": "2023-04-10T17:05:59Z",
                          "publishedAt": "2020-12-01T17:43:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "I agree. I may remove the whole babbler directory (should I do that in github website?) and restart the tutorial again.\nSincerely,\nSung",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144024",
                          "updatedAt": "2023-04-10T17:05:59Z",
                          "publishedAt": "2020-12-01T17:45:06Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The permissions look fine. You are the owner of the files (thanks to chown) and you have read/write access on all these files (first set of rw- is for the owner).\nYou can worry about removing the directory later (from both your github account and your computer). For now, maybe try restarting the tutorial without using sudo.",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144031",
                          "updatedAt": "2023-04-10T17:06:02Z",
                          "publishedAt": "2020-12-01T17:53:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hyeom-wisc"
                          },
                          "bodyText": "Guillaume,\nThanks. I will restart the tutorial with a new directory (e.g., babbler2) and see what happens.\nSincerely,\nSung",
                          "url": "https://github.com/idaholab/moose/discussions/16338#discussioncomment-144034",
                          "updatedAt": "2023-04-10T17:06:02Z",
                          "publishedAt": "2020-12-01T17:57:20Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "moose on hpc cluster",
          "author": {
            "login": "rrezakhani"
          },
          "bodyText": "Hi Everyone,\nI am trying to install moose on psc cluster following this instruction:\nhttps://mooseframework.inl.gov/getting_started/installation/hpc_install_moose.html\nI have completed petsc and libmesh compilations, but when I do make in test folder I get errors complaining about finding petsc:\n\nDo you have any suggestion?\nThanks a lot,\nRoozbeh",
          "url": "https://github.com/idaholab/moose/discussions/16347",
          "updatedAt": "2022-07-18T18:02:37Z",
          "publishedAt": "2020-11-30T22:56:29Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "YaqiWang"
                  },
                  "bodyText": "Assuming you have compiled PETSc properly. Can you check the configure log of libMesh carefully to see if it detected PETSc? You may compiled libMesh without PETSc. If that is the case, you may try telling libMesh configure where and which PETSc to use with something like PETSC_DIR=[you petsc directory here] PETSC_ARCH=[the petsc build, could be something like arch-moose] ./scripts/update_and_rebuild_libmesh.sh.",
                  "url": "https://github.com/idaholab/moose/discussions/16347#discussioncomment-143156",
                  "updatedAt": "2022-07-18T18:03:06Z",
                  "publishedAt": "2020-11-30T23:22:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rrezakhani"
                          },
                          "bodyText": "Thanks Yaqi. There was a mistake on my side, there were some old compilation files left, which caused the problem. I redid everything based on the instruction page, and it works well.",
                          "url": "https://github.com/idaholab/moose/discussions/16347#discussioncomment-143798",
                          "updatedAt": "2022-07-18T18:03:12Z",
                          "publishedAt": "2020-12-01T14:25:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Finite strain rotations",
          "author": {
            "login": "tophmatthews"
          },
          "bodyText": "Hi All,\nI have a question about finite strain rotations, specifically perform_finite_strain_rotations in ADComputeMultipleInelasticStress. When should perform_finite_strain_rotations be true (or conversely false). Trying to read around a bit, it looks like you don't need to do the rotations if everything is small strains...but what does that mean? Can I get away from the rotations if I am only dealing with things growing or shrinking, and not rotating?\nI ask because first, it can be a bit expensive doing so many tensor operations in AD. Also, and maybe more concerning, is the stress calculation in ADComputeMultipleInelasticStress vs \"stress update\" classes, such as ADRadialReturnStressUpdate derivatives. In ADComputeMultipleInelasticStress, the stress is calculated:\n  if (_is_elasticity_tensor_guaranteed_isotropic || !_perform_finite_strain_rotations)\n    _stress[_qp] = _elasticity_tensor[_qp] * (_elastic_strain_old[_qp] + elastic_strain_increment);\n  else\n    _stress[_qp] = _stress_old[_qp] + _elasticity_tensor[_qp] * elastic_strain_increment;\n\nWhile in ADRadialReturnStressUpdate, the stress is calculated:\n// Use the old elastic strain here because we require tensors used by this class\n// to be isotropic and this method natively allows for changing in time\n// elasticity tensors\nstress_new = elasticity_tensor * (elastic_strain_old + strain_increment);\n\nAlright, makes sense using the ADRadialReturnStressUpdate technique since I typically use an evolving elasticity tensor, but won't this lead to a mismatch in stress calculations when perform_finite_strain_rotations=false?\nI guess the question is, when should I not do perform_finite_strain_rotations=false. Maybe looking at the TM pros @bwspenc @sapitts @jiangwen84...\nThanks!\n-Topher",
          "url": "https://github.com/idaholab/moose/discussions/16303",
          "updatedAt": "2022-06-29T07:38:41Z",
          "publishedAt": "2020-11-25T15:20:37Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "Since @recuero has been working on this recently, he might be able to give more details.",
                  "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-142846",
                  "updatedAt": "2022-06-29T07:38:58Z",
                  "publishedAt": "2020-11-30T16:40:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "recuero"
                  },
                  "bodyText": "@tophmatthews My two cents below. I do not know much about the history of these classes though...\n\nCan I get away from the rotations if I am only dealing with things growing or shrinking, and not rotating?\n\nMaybe. I believe you are suggesting mixing small and large strain kinematic descriptions, i.e. the rotation matrix being unity. This solution would require having prior knowledge that the system does not rotate in any part of it (not just rigid body rotations), which may happen in very particular cases.\n\nAlright, makes sense using the ADRadialReturnStressUpdate technique since I typically use an evolving elasticity tensor, but won't this lead to a mismatch in stress calculations when perform_finite_strain_rotations=false?\n\nDoesn't ADRadialReturnStressUpdate override the calculation of stresses in ADComputeMultipleInelasticStress? I think I don't understand.\n\nwhen should I not do perform_finite_strain_rotations=false\n\nI would choose perform_finite_strain_rotations=true any time you have large deformation kinematics. Those transformations appear necessary for that application. True, AD tensor operations are a significant drag, but choosing, in general, to disregard rotations for large deformations seems like could lead to erroneous results.\nOthers can chime in with more accurate explanations.",
                  "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-142978",
                  "updatedAt": "2022-06-29T07:39:03Z",
                  "publishedAt": "2020-11-30T18:50:47Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "srinath-chakravarthy"
                          },
                          "bodyText": "I agree with @recuero. For any finite strain kinematics rotations have to be done to get the correct cauchy stress in the deformed configuration. That being said if your material is already doing the rotations to get the correct cauchy stress then you can set it to false. For example I have a radial return material that performs this rotation internally because I have a different way of computing the stress in the configuration.\nIn short with vanilla moose and all the radial return methods already implemented in tensor mechanics, this should be set to true if you're doing finite strain calculations.\nCheers\nSrinath",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143006",
                          "updatedAt": "2022-06-29T07:39:00Z",
                          "publishedAt": "2020-11-30T19:46:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tophmatthews"
                          },
                          "bodyText": "So perhaps it's my ignorance about what \"rotation\" means. My mesh is a 2DRz cylinder. Is rotation of the mesh rotating (not really possible), or can it include large deformation?",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143027",
                          "updatedAt": "2022-06-29T07:39:05Z",
                          "publishedAt": "2020-11-30T20:18:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "srinath-chakravarthy"
                          },
                          "bodyText": "@tophmatthews i think the rotations here come from the polar decomposition of the deformation gradient and are not the same as a rigid body rotation. Rigid body rotations i believe have to handled independently. Any other mechanics experts, please correct me if I am wrong",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143035",
                          "updatedAt": "2022-06-29T07:39:00Z",
                          "publishedAt": "2020-11-30T20:30:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "Yeah, so rigid body rotations happen if F = RU, for U = identity (other issues such as correct BCs would come into play here for most of our static simulations). In general, R (rotation matrix) is needed to capture the local change of orientation. So, it's not so much a mesh rotating, but the result of applying locally (integration point wise) the polar decomposition. You could have drastic changes of orientation without rigid body modes.",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143041",
                          "updatedAt": "2022-07-22T07:23:51Z",
                          "publishedAt": "2020-11-30T20:36:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "srinath-chakravarthy"
                          },
                          "bodyText": "Here is a decent example of why we need to do rotations when using the cauchy stress, this is from abaqus theory manual. Note moose uses a variant of the Hughes widget algorithm for computing the strains (Rashid 1993) i think\nhttps://classes.engineering.wustl.edu/2009/spring/mase5513/abaqus/docs/v6.6/books/stm/default.htm?startat=ch03s02ath60.html",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143043",
                          "updatedAt": "2022-07-22T07:23:51Z",
                          "publishedAt": "2020-11-30T20:37:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "tophmatthews"
                          },
                          "bodyText": "Okay great, so I need them. I also misread the code, and indeed the stress calculations are consistent due to _is_elasticity_tensor_guaranteed_isotropic being true.",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143050",
                          "updatedAt": "2022-07-22T07:23:52Z",
                          "publishedAt": "2020-11-30T20:43:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "@WilkAndy and I discussed this issue in detail a few years back on one of his pull requests (I think on one of the Cosserat PRs), but I haven't been able to find that PR and discussion yet. Once I do I'll post a link here for completeness.",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143052",
                          "updatedAt": "2022-07-22T07:23:52Z",
                          "publishedAt": "2020-11-30T20:46:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Hi @sapitts .  It might have been #9438 .   It's fun to read these old discussions.  Anyway, i concur with what's been written above",
                          "url": "https://github.com/idaholab/moose/discussions/16303#discussioncomment-143141",
                          "updatedAt": "2022-07-22T07:23:53Z",
                          "publishedAt": "2020-11-30T22:50:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "_console and MPI rank!=0 output",
          "author": {
            "login": "WilkAndy"
          },
          "bodyText": "Hi everyone,\nI have an object derived from Output (and UserObjectInterface, if that makes any difference), that writes stuff to _console.  Everything works as planned for the MPI rank=0 processor.  However, i believe the rank!=0 processors' _console stream does not get sent to std::out.   How do i instruct the rank!=0 _console to be written to std::out ?\nNote - it's quite late at night (for me) so i could be completely wrong about this rank!=0 stuff - perhaps there's another bug in my code.  So don't spend too long thinking about this if it doesn't make sense to you!\na",
          "url": "https://github.com/idaholab/moose/discussions/16333",
          "updatedAt": "2023-08-19T11:42:18Z",
          "publishedAt": "2020-11-30T12:14:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "WilkAndy"
                  },
                  "bodyText": "OK, i just found the answer:\nmy_app-opt -i input.i --keep-cout",
                  "url": "https://github.com/idaholab/moose/discussions/16333#discussioncomment-142522",
                  "updatedAt": "2023-08-19T11:42:18Z",
                  "publishedAt": "2020-11-30T12:17:03Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "and my notes demonstrate that i must have asked this before, duh",
                          "url": "https://github.com/idaholab/moose/discussions/16333#discussioncomment-142529",
                          "updatedAt": "2023-08-19T11:42:20Z",
                          "publishedAt": "2020-11-30T12:21:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lindsayad"
                          },
                          "bodyText": "I'm going to start asking a bunch of questions I know the answer to in order to climb the Most Answers leaderboard \ud83d\ude04 Just kidding, you nailed it!",
                          "url": "https://github.com/idaholab/moose/discussions/16333#discussioncomment-142881",
                          "updatedAt": "2023-08-19T11:42:20Z",
                          "publishedAt": "2020-11-30T16:57:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "Just stay up way past your bedtime....",
                          "url": "https://github.com/idaholab/moose/discussions/16333#discussioncomment-143119",
                          "updatedAt": "2023-08-19T11:42:21Z",
                          "publishedAt": "2020-11-30T22:06:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Using PiecewiseLinear interpolated function in phase-field kernel",
          "author": {
            "login": "kunokchang"
          },
          "bodyText": "Dear I would like to call Fermi-Dirac function in phase-field kernel\nWe have the Fermi-Dirac function in csv file so we built the function as below:\n[Functions]\n[./fermi]\ntype = PiecewiseLinear\ndata_type = fermi.csv\nformat = columns\n[../]\n[]\nbut still not clear how to call it in kernel.\nCould you give me any comment on this?\nThank you in advance.",
          "url": "https://github.com/idaholab/moose/discussions/16286",
          "updatedAt": "2022-08-09T15:51:51Z",
          "publishedAt": "2020-11-24T02:04:02Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Hi Kunok,\nJust to make sure we're on the same page, you're wanting to use the Fermi-Dirac distribution function as shown below, correct?\nhttps://www.doitpoms.ac.uk/tlplib/semiconductors/fermi.php\nIf this is correct, I would suggest it's easier to code the analytical form of the distribution function into your kernel rather than reading in the function from a csv file, since the analytical form is pretty simple.",
                  "url": "https://github.com/idaholab/moose/discussions/16286#discussioncomment-138682",
                  "updatedAt": "2022-08-09T15:52:11Z",
                  "publishedAt": "2020-11-25T15:15:07Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Duplicate of #16297",
                  "url": "https://github.com/idaholab/moose/discussions/16286#discussioncomment-143115",
                  "updatedAt": "2022-08-09T15:52:24Z",
                  "publishedAt": "2020-11-30T22:02:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Libmesh source code used by MOOSE is different from Libmesh code in github",
          "author": {
            "login": "bylore"
          },
          "bodyText": "Sorry ..... i got it wrong",
          "url": "https://github.com/idaholab/moose/discussions/16314",
          "updatedAt": "2020-11-30T21:59:55Z",
          "publishedAt": "2020-11-26T12:51:15Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "MOOSE is using git submodules to point to a specific libMesh hash that is very likely different from the current libMesh master branch.",
                  "url": "https://github.com/idaholab/moose/discussions/16314#discussioncomment-143111",
                  "updatedAt": "2020-11-30T22:00:10Z",
                  "publishedAt": "2020-11-30T21:59:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Local scalar variable for multi-scale simulation",
          "author": {
            "login": "lingzou"
          },
          "bodyText": "Hi All,\nI have a question regarding multi-scale simulation.\nSay, I have a field (a mesh), where a field variable lives (say, temperature (T)), whose residual depends on the transient term and gradient term. Normal physics.\nIn addition to this field variable, I would like to learn some localized physics (say, 'var_local'), whose residual depends on the field variable (its local value, _T[_qp], and gradient, _grad_T[_qp]) and the local variable (some_var), but not its gradient (_grad_some_var[_qp], which does not have physical meaning, neither we should care). Clearly, this 'var_local' lives on each mesh node (and q point).\nThis 'var_local', depending on user request, could be a single value, or an array. This seems to me should be handled by scalar variable type of approach, but current scalar variable does not seem to support this type of specialized request.\nAny suggestions/discussions?",
          "url": "https://github.com/idaholab/moose/discussions/16274",
          "updatedAt": "2022-09-20T13:58:46Z",
          "publishedAt": "2020-11-21T15:35:04Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "aeslaughter"
                  },
                  "bodyText": "Are you creating a Kernel object that contributes to the residual of T that includes contributions that depend on 'var_local'? And 'var_local' can be either a single value or a vector of values, depending on user options? Can you calculate 'var_local' directly given T and grad T?\nIf those are all yes, then 'var_local' probably just needs to be a material property. The Kernel can decided which version of the property to use (scalar vs vector) based on an input parameter.",
                  "url": "https://github.com/idaholab/moose/discussions/16274#discussioncomment-138842",
                  "updatedAt": "2022-09-20T13:58:46Z",
                  "publishedAt": "2020-11-25T18:15:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "lingzou"
                          },
                          "bodyText": "Andrew, thanks for your reply. Sorry that I didn't get back to this reply earlier, I am still more used to watch the email list.\nBack to your reply, no, this is not what I would like to implement. 'var_local' is indeed a variable (or variable array), and it has its own residual form. I have explored what currently moose provides and found similar implementations (e.g., ArrayKernal and NodalKernel), and it seems to me that a new class (e.g., ArrayNodalKernal) will do the job. I will work on it, and see how it goes, and maybe in a later time contribute it back to moose framework.",
                          "url": "https://github.com/idaholab/moose/discussions/16274#discussioncomment-142968",
                          "updatedAt": "2022-09-20T13:58:49Z",
                          "publishedAt": "2020-11-30T18:37:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}