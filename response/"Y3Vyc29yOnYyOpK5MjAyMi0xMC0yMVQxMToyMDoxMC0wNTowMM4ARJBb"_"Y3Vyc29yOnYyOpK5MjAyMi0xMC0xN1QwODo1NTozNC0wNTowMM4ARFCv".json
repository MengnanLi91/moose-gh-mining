{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0xMC0xN1QwODo1NTozNC0wNTowMM4ARFCv"
    },
    "edges": [
      {
        "node": {
          "title": "Elastic driving force for grain growth: lack of documentation of Euler angle file",
          "author": {
            "login": "jjmarzia"
          },
          "bodyText": "Hi all, I'm studying the case of poly_grain_growth_2D_eldrforce.i. Line 36 of this example requires an associated .tex file containing a set of Euler angles corresponding to each grain number, called grn_36_rand_2D.tex, but I have not seen documentation of this file. I was wondering if this was somewhere available.\nThank you!",
          "url": "https://github.com/idaholab/moose/discussions/22448",
          "updatedAt": "2022-11-15T18:06:28Z",
          "publishedAt": "2022-10-19T20:33:13Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis object has indeed not been documented\nhttps://mooseframework.inl.gov/source/userobjects/EulerAngleFileReader.html\nYou can try to mimick the syntax used in the list of input files (and their associated angles files) shown by this documentation page.\nIf you run into any issues, @permcody or @amjokisaari will be able to help you\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22448#discussioncomment-3933473",
                  "updatedAt": "2022-10-21T12:55:29Z",
                  "publishedAt": "2022-10-21T12:55:28Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "HarmonicAverage",
          "author": {
            "login": "heinono1"
          },
          "bodyText": "It looks like HarmonicAverage is not a member of the Moose::FV::InterpMethod although there are examples (https://mooseframework.inl.gov/syntax/FVKernels/) that include HarmonicAverage as member of it. Will HarmonicAverage be added to that namespace?",
          "url": "https://github.com/idaholab/moose/discussions/22306",
          "updatedAt": "2022-10-20T13:29:26Z",
          "publishedAt": "2022-10-05T13:26:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIt is, did you update to the latest moose? We only added this recently.\nIn FVDiffusion you can see:\n  const auto & interp_method = getParam<MooseEnum>(\"coeff_interp_method\");\n  if (interp_method == \"average\")\n    _coeff_interp_method = Moose::FV::InterpMethod::Average;\n  else if (interp_method == \"harmonic\")\n    _coeff_interp_method = Moose::FV::InterpMethod::HarmonicAverage;",
                  "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3805268",
                  "updatedAt": "2022-10-05T13:30:27Z",
                  "publishedAt": "2022-10-05T13:30:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "Ah, OK - thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3805296",
                          "updatedAt": "2022-10-05T13:34:03Z",
                          "publishedAt": "2022-10-05T13:34:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "heinono1"
                          },
                          "bodyText": "It's weird (to me, at least): if I add \"harmonic\" to the interp_method, the code throws and error:  Invalid option \"harmonic\" in MooseEnum. Valid options (not case-sensitive) are \"average\"\". What is weird is that I pulled and build a new distribution and there are FV kernels like FVDiffusion that include \"harmonic\" as an option to interp_method. I use exactly the same syntax as in, eg FVDiffusion or FVAnisotropicDiffusion: in validParams I have\nMooseEnum coeff_interp_method(\"average harmonic\",\"average\");\nparas.addParam<MooseEnum>(\"coeff_interp_method\", coeff_interp_method, \"Switch to select interpolation method\");\n\nThat seems to be what throws the error. If I change to\nMooseEnum coeff_interp_method(\"average\");\nparas.addParam<MooseEnum>(\"coeff_interp_method\", coeff_interp_method, \"Switch to select interpolation method\");\n\nthen I do not get the error. What is even weirder is that the error shows up even when I do not include this particular kernel in the input file.",
                          "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3917659",
                          "updatedAt": "2022-10-19T17:32:13Z",
                          "publishedAt": "2022-10-19T17:13:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the second one will definitely not allow harmonic.\nCould you please paste the input file syntax that fails with the first one?\nparams is mispelled as paras btw.\ncan you please paste the entire validParams block for your object?",
                          "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3917776",
                          "updatedAt": "2022-10-19T17:34:32Z",
                          "publishedAt": "2022-10-19T17:34:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Is TAO also added to the main branch or is it still in a develop branch?\n\u2026\nOn Wed, Oct 5, 2022 at 8:30 AM Guillaume Giudicelli < ***@***.***> wrote:\n Hello\n\n It is, did you update to the latest moose? We only added this recently.\n\n In FVDiffusion you can see:\n\n   const auto & interp_method = getParam<MooseEnum>(\"coeff_interp_method\");\n   if (interp_method == \"average\")\n     _coeff_interp_method = Moose::FV::InterpMethod::Average;\n   else if (interp_method == \"harmonic\")\n     _coeff_interp_method = Moose::FV::InterpMethod::HarmonicAverage;\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#22306 (comment)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEF3D3DW7ZW4GJZ7SSV3WBV7H3ANCNFSM6AAAAAAQ5SRO3Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3805370",
                  "updatedAt": "2022-10-05T13:42:45Z",
                  "publishedAt": "2022-10-05T13:42:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Still in this branch:\n#21887\nif you need both you should be able to rebase it on top of devel",
                          "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3805563",
                          "updatedAt": "2022-10-05T14:03:50Z",
                          "publishedAt": "2022-10-05T14:03:48Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Cool - thanks!\n\u2026\nOn Wed, Oct 5, 2022 at 9:04 AM Guillaume Giudicelli < ***@***.***> wrote:\n Still in this branch:\n #21887 <#21887>\n\n if you need both you should be able to rebase it on top of devel\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#22306 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEF2KEQFKPCWRQ2JXYHDWBWDFXANCNFSM6AAAAAAQ5SRO3Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3805671",
                  "updatedAt": "2022-10-05T14:13:08Z",
                  "publishedAt": "2022-10-05T14:13:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Hi Guillaume,\n\nBelow are the relevant code lines. When I have commented out the lines with\n\"harmonic\", it works. When I put those lines back in (and comment out the\nlines with just \"average\"), execution throws an error, even if I do not use\nthis kernel in the execution.\n\n```\nInputParameters\nFVMagneticExchangeNonCons::validParams()\n{\n  InputParameters params = FVFluxKernel::validParams();\n  params.addClassDescription(\"Computes residual of conservative exchange\ntorque\");\n  params.addRequiredParam<unsigned int>(\"component\", \"An integer\ncorresponding to the direction in order parameter space\");\n  params.addRequiredCoupledVar(\"mag_x\", \"The x component of the constrained\nmagnetic vector\");\n  params.addRequiredCoupledVar(\"mag_y\", \"The y component of the constrained\nmagnetic vector\");\n  params.addRequiredCoupledVar(\"mag_z\", \"The z component of the constrained\nmagnetic vector\");\n  MooseEnum coeff_interp_method(\"average\");\n  //  MooseEnum coeff_interp_method(\"average harmonic\", \"harmonic\");\n  params.addParam<MooseEnum>(\n    \"coeff_interp_method\",\n    coeff_interp_method,\n    \"Switch that can select interpolation method for magnetization\ndensity.\");\n  params.set<unsigned short>(\"ghost_layers\") = 2;\n  return params;\n}\n```\n\n```\nFVMagneticExchangeNonCons::FVMagneticExchangeNonCons(const InputParameters\n& params)\n  : FVFluxKernel(params), /*_coeff(getFunctor<ADReal>(\"coeff\")),*/\n   _component(getParam<unsigned int>(\"component\")),\n   _mag_x_var(coupled(\"mag_x\")),\n   _mag_y_var(coupled(\"mag_y\")),\n   _mag_z_var(coupled(\"mag_z\")),\n   _mag_x(coupledValue(\"mag_x\")),\n   _mag_y(coupledValue(\"mag_y\")),\n   _mag_z(coupledValue(\"mag_z\")),\n   _mag_x_grad(coupledGradient(\"mag_x\")),\n   _mag_y_grad(coupledGradient(\"mag_y\")),\n   _mag_z_grad(coupledGradient(\"mag_z\")),\n   _alpha(getFunctor<ADReal>(\"alpha\")),\n   _g0(getFunctor<ADReal>(\"g0\")),\n   _Ms(getFunctor<ADReal>(\"Ms\")),\n   _Ae(getFunctor<ADReal>(\"Ae\"))\n{\n#ifndef MOOSE_GLOBAL_AD_INDEXING\n  mooseError(\n      \"FVMagneticExchangeCons is not supported by local AD indexing. In\norder to use this object, please run \"\n      \"the configure script in the root MOOSE directory with the configure\noption \"\n      \"'--with-ad-indexing-type=global'. Note that global indexing is now\nthe default \"\n      \"configuration for AD indexing type.\");\n#endif\n\n  const auto & interp_method = getParam<MooseEnum>(\"coeff_interp_method\");\n  if (interp_method == \"average\")\n    const auto _coeff_interp_method = Moose::FV::InterpMethod::Average;\n  /*  else if (interp_method == \"harmonic\")\n      _coeff_interp_method = Moose::FV::InterpMethod::HarmonicAverage;*/\n\n  if ((_var.faceInterpolationMethod() ==\nMoose::FV::InterpMethod::SkewCorrectedAverage) &&\n      (_tid == 0))\n     adjustRMGhostLayers(std::max((unsigned short)(3), _pars.get<unsigned\nshort>(\"ghost_layers\")));\n}\n```",
                  "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3919306",
                  "updatedAt": "2022-10-19T21:39:38Z",
                  "publishedAt": "2022-10-19T21:37:25Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I just copy pasted this all into FVDiffusion and it ran fine.\nexcept for this:\nconst auto _coeff_interp_method = Moose::FV::InterpMethod::Average;\nthis is not what we want. _coeff_interp_method is a class attribute its type should not be declared in the source but in the header\nIf you update MOOSE again, I just add a selectInterpolationMethod routine that does this for you.\nyou call it like in FVDiffusion.C\n    _coeff_interp_method(\n        Moose::FV::selectInterpolationMethod(getParam<MooseEnum>(\"coeff_interp_method\")))",
                          "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3919653",
                          "updatedAt": "2022-10-19T23:15:42Z",
                          "publishedAt": "2022-10-19T23:15:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "heinono1"
                  },
                  "bodyText": "Thanks, Guillaume.\n\u2026\nOn Wed, Oct 19, 2022 at 6:15 PM Guillaume Giudicelli < ***@***.***> wrote:\n I just copy pasted this all into FVDiffusion and it ran fine.\n except for this:\n\n const auto _coeff_interp_method = Moose::FV::InterpMethod::Average;\n this is not what we want. _coeff_interp_method is a class attribute its\n type should not be declared in the source but in the header\n\n If you update MOOSE again, I just add a selectInterpolationMethod routine\n that does this for you.\n you call it like in FVDiffusion.C\n\n     _coeff_interp_method(\n         Moose::FV::selectInterpolationMethod(getParam<MooseEnum>(\"coeff_interp_method\")))\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#22306 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AEKZEF5JT4H4G2KRJLJ4HF3WEB6KRANCNFSM6AAAAAAQ5SRO3Q>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>\n\n\n-- \nOlle Heinonen\n***@***.***",
                  "url": "https://github.com/idaholab/moose/discussions/22306#discussioncomment-3924750",
                  "updatedAt": "2022-10-20T13:29:26Z",
                  "publishedAt": "2022-10-20T13:29:26Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "PorousFlow - Two phase injection",
          "author": {
            "login": "wangshengwa"
          },
          "bodyText": "Hi all,\nFollowing up with the problem described here #22251 .- where I have a two layered system (aquitard - aquifer) which is saturated with water. A borehole injects gas into the aquifer.\nI made a small MOOSE model to simulate this system. However, I have problems making the model converge. Looks like injection of water works fine, but convergence problems raise with the gas.\nMy code is here: https://github.com/wangshengwa/PorousFlow-stuff/tree/main/2pf_inj\nThanks I appreciate any help to make this work.\nCheers!\nWang",
          "url": "https://github.com/idaholab/moose/discussions/22388",
          "updatedAt": "2022-10-22T00:06:32Z",
          "publishedAt": "2022-10-13T13:50:50Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDo you get convergence with LU?\nI noticed you have a lu block set up.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3875391",
                  "updatedAt": "2022-10-14T03:28:00Z",
                  "publishedAt": "2022-10-14T03:27:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wangshengwa"
                          },
                          "bodyText": "Thanks @GiudGiud , looks like I made a mistake in my dirackernels. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3890030",
                          "updatedAt": "2022-10-16T16:07:16Z",
                          "publishedAt": "2022-10-16T16:07:16Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cpgr"
                  },
                  "bodyText": "A couple of things that might help:\n\nI think that you need pgas >= pwater (at least I think that is the convention), so you probably want to initialise pgas = pwater\nYou might need fluid_phase = 1 in the borehole (phase 0 is water, phase 1 is gas)\nLikewise, mass_fraction_component should probably be 1 (the gas) in the borehole\n\nLet me know if these help!",
                  "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3875572",
                  "updatedAt": "2022-10-14T04:11:45Z",
                  "publishedAt": "2022-10-14T04:11:44Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "wangshengwa"
                          },
                          "bodyText": "Hi @cpgr\nThanks a lot! I changed  fluid_phase=1 and mass_fraction_component=1\nI also reduced the tolerance to nl_abs_tol = 1E-6\nNow it works!\nHowever, I have numerical overshoots. I thought that KT  + superbee my help, but my model is still overshooting. Can you advise of how can I deal with this issue?\nMy model with KT stabilization: https://github.com/wangshengwa/PorousFlow-stuff/tree/main/2pf_kt\nCheers!\nWang",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3890062",
                          "updatedAt": "2022-10-16T16:16:22Z",
                          "publishedAt": "2022-10-16T16:16:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "Is the recorded wellbore flow oscillating, or is it something else? I haven't had a chance to look at it today, I'll try tomorrow.",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3892843",
                          "updatedAt": "2022-10-17T04:49:46Z",
                          "publishedAt": "2022-10-17T04:49:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wangshengwa"
                          },
                          "bodyText": "The pore pressure of the gas takes negative values of order 1E5. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3893747",
                          "updatedAt": "2022-10-17T07:39:04Z",
                          "publishedAt": "2022-10-17T07:39:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cpgr"
                          },
                          "bodyText": "I think it is probably an issue with your well, rather than something that could be fixed by stabilisation. @WilkAndy - any ideas?",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3909808",
                          "updatedAt": "2022-10-18T21:06:15Z",
                          "publishedAt": "2022-10-18T21:06:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "WilkAndy"
                          },
                          "bodyText": "My suggestion is to copy the various similar examples in PorousFlow\nhttps://mooseframework.inl.gov/modules/porous_flow/tests/dirackernels/dirackernels_tests.html\nhttps://mooseframework.inl.gov/modules/porous_flow/sinks.html\nhttps://mooseframework.inl.gov/modules/porous_flow/tests/fluidstate/fluidstate_tests.html\nhttps://mooseframework.inl.gov/modules/porous_flow/tests/buckley_leverett/buckley_leverett_tests.html\nhttps://mooseframework.inl.gov/modules/porous_flow/thm_example.html",
                          "url": "https://github.com/idaholab/moose/discussions/22388#discussioncomment-3919367",
                          "updatedAt": "2022-10-19T21:51:16Z",
                          "publishedAt": "2022-10-19T21:51:15Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "error in Compile libMesh for HPC Cluster installation",
          "author": {
            "login": "Amir1361"
          },
          "bodyText": "Hi there,\nI got the following error in moose installation. I have attached the terminal outputs. Could you please help me to solve the issue?\noutput.txt\nThank you very much!\nAmir",
          "url": "https://github.com/idaholab/moose/discussions/21342",
          "updatedAt": "2022-10-18T17:52:01Z",
          "publishedAt": "2022-06-17T20:34:05Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nSeems you are missing some libraries to install libmesh\nIn particular look at libtirpc-devel, see if it is installed on your system\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2978332",
                  "updatedAt": "2022-06-18T22:32:27Z",
                  "publishedAt": "2022-06-18T22:32:26Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "see this post for more details\n#20479",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2978339",
                          "updatedAt": "2022-06-18T22:37:53Z",
                          "publishedAt": "2022-06-18T22:37:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Amir1361"
                          },
                          "bodyText": "Thanks Guillaume, I have checked the #20479, unfortunately, it does not work for me yet. The libtirpc-devel version is 1.1.4.\noutput_libtirpc_devel.txt. Thank you for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2987618",
                          "updatedAt": "2022-06-20T17:11:25Z",
                          "publishedAt": "2022-06-20T17:11:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "well even if you do have it installed, libmesh is not finding it.\nPlease have a look at Roy's answer in that thread to help it find the file\n#20479 (reply in thread)",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2987655",
                          "updatedAt": "2022-06-20T17:17:08Z",
                          "publishedAt": "2022-06-20T17:17:02Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Amir1361"
                          },
                          "bodyText": "I found the rpc.h/xdr.h in the \"/usr/include/tirpc\" path. How can I address it for limbash?\nthe following comand doesn't work:\n$./scripts/update_and_rebuild_libmesh.sh configure CPPFLAGS=/usr/include/tirpc/rpc/",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2988837",
                          "updatedAt": "2022-06-20T20:39:35Z",
                          "publishedAt": "2022-06-20T20:39:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "does CPPFLAGS need to be passed before the command?",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2988906",
                          "updatedAt": "2022-06-20T20:56:15Z",
                          "publishedAt": "2022-06-20T20:56:15Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "also you do not want to erase CPPFLAGS and set it to this value, you only want to amend it so:\nCPPFLAGS=/usr/include/tirpc/rpc/:$CPPFLAGS",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-2988910",
                          "updatedAt": "2022-06-20T20:56:53Z",
                          "publishedAt": "2022-06-20T20:56:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mlesueur"
                          },
                          "bodyText": "Hi @GiudGiud @Amir1361 ,\nI have the same error while trying to compile libmesh on a cluster where I have to load libtirpc externally via a module. I can see that the files rpc/rpc.h and rpc/xdr.h are located in $LIBTIRPC_MODULE_PATH/include/tirpc.\nThe command I am trying to run is:\n./scripts/update_and_rebuild_libmesh.sh CPPFLAGS=-I/$LIBTIRPC_MODULE_PATH/include/tirpc \nBut the error is still:\nchecking for XDR support in /usr/include/tirpc... no\nconfigure: error: *** XDR was not found, but --enable-xdr-required was specified.\n\nDid you manage to solve your problem @Amir1361 ?\nIs there a mistake I am making?\u2028\nCheers,\n\u2028Martin",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3905088",
                          "updatedAt": "2022-10-18T11:32:46Z",
                          "publishedAt": "2022-10-18T11:32:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello you neee to install libtirpc-devel on your system\nis this a computing cluster or your own machine?",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3906157",
                          "updatedAt": "2022-10-18T13:26:19Z",
                          "publishedAt": "2022-10-18T13:26:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mlesueur"
                          },
                          "bodyText": "Thank you for your answer @GiudGiud, it's a computing cluster.\nIs the libtirpc-devel a different library than libtirpc? Would you mind giving me more details on how to install that then?",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3906451",
                          "updatedAt": "2022-10-18T13:55:35Z",
                          "publishedAt": "2022-10-18T13:55:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If it s a computing cluster, the easiest is to ask your cluster administrators to install it",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3908491",
                          "updatedAt": "2022-10-18T17:52:01Z",
                          "publishedAt": "2022-10-18T17:52:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Amir1361"
                  },
                  "bodyText": "Hello,\nHere are the outputs for Compile Limbash and Compile & Test Moose. It seems that I do not have \"Python.h\". Could you please help me with this issue? Thanks,\nAmir\ninstall.txt\ntest.txt",
                  "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3074328",
                  "updatedAt": "2022-07-03T21:49:36Z",
                  "publishedAt": "2022-07-03T21:49:36Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Missing python.h usually means something is wrong with your python, like you only have an old python 2.7 for example.\nWhat do the following return:\necho $CXX\nwhich mpicc\nwhich python\npython --version\n\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3081203",
                          "updatedAt": "2022-07-05T02:00:48Z",
                          "publishedAt": "2022-07-05T02:00:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Amir1361"
                          },
                          "bodyText": "Hi Guillaume,\nHere are the outputs. Thank you for your help!",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3096576",
                          "updatedAt": "2022-07-07T01:56:52Z",
                          "publishedAt": "2022-07-07T01:56:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Missing python.h means python-devel packages are not installed (when using system Python such as /usr/bin/).\nEdit: Actually this pretty much sums it up: https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3100026",
                          "updatedAt": "2022-07-07T12:34:07Z",
                          "publishedAt": "2022-07-07T12:32:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Amir1361"
                          },
                          "bodyText": "@milljm and @GiudGiud Thank you very much!",
                          "url": "https://github.com/idaholab/moose/discussions/21342#discussioncomment-3117436",
                          "updatedAt": "2022-07-10T22:45:12Z",
                          "publishedAt": "2022-07-10T22:45:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Compiling MOOSE application with static linking",
          "author": {
            "login": "lekah"
          },
          "bodyText": "Dear developers and users,\nWe need to produce an executable for our MOOSE application that is linked static (not dynamic). I tried adapting LDFLAGS\n(export LDFLAGS=\"-static $LDFLAGS\") but it didn't produce a statically linked executable.\nIs there  a way to do this in your experience?\nMany thanks in advance",
          "url": "https://github.com/idaholab/moose/discussions/22326",
          "updatedAt": "2022-10-18T14:27:40Z",
          "publishedAt": "2022-10-07T08:46:24Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@milljm",
                  "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3823513",
                  "updatedAt": "2022-10-07T14:41:58Z",
                  "publishedAt": "2022-10-07T14:41:58Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "@permcody",
                          "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3875399",
                          "updatedAt": "2022-10-14T03:30:50Z",
                          "publishedAt": "2022-10-14T03:30:50Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Sorry for the delayed response...\nYou'll need to build libMesh statically as a prerequisite. MOOSE only understands how it needs to be built, based on how libMesh is built. In order to do this via our Conda packages, it will be necessary to create a new environment, which only contains what libMesh needs (moose-petsc). We also need Python. I will install moose-tools in order to obtain a version we support (3.7 -3.10):\nmamba activate base    # get back to the original environment\nmamba create -n petsc moose-petsc moose-tools\nmamba activate petsc\nFrom within this environment we can now build libMesh with static options. I am going to include some cleaning commands to clean up any previous build attempts. Keep in mind these git commands will delete any uncommitted work (so be sure to save your work if you have changes)!\ncd ~/projects/moose\ngit clean -xfd\ngit submodule foreach --recursive git clean -xfd\nNow I am going to set some environment variables to speed up my libMesh build:\nexport MOOSE_JOBS=28   # replace this number with how many cores your machine has\nexport METHODS=opt\nWe are ready to build libMesh statically:\nscripts/update_and_rebuild_libmesh.sh --enable-all-static --enable-static\nOnce finished, we can now instruct MOOSE to build, and it will automatically be built statically:\ncd test\nmake -j $MOOSE_JOBS\nEverything we just built manually was statically included.\n\u276f otool -L moose_test-opt\nmoose_test-opt:\n\t@rpath/libhdf5_cpp.200.dylib (compatibility version 202.0.0, current version 202.0.0)\n\t@rpath/libz.1.dylib (compatibility version 1.0.0, current version 1.2.12)\n\t@rpath/libslepc.3.16.dylib (compatibility version 3.16.0, current version 3.16.2)\n\t@rpath/libpetsc.3.16.dylib (compatibility version 3.16.0, current version 3.16.6)\n\t@rpath/libHYPRE-2.23.0.dylib (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libstrumpack.dylib (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libsuperlu_dist.7.dylib (compatibility version 7.0.0, current version 7.1.1)\n\t@rpath/libhdf5_hl.200.dylib (compatibility version 201.0.0, current version 201.1.0)\n\t@rpath/libhdf5.200.dylib (compatibility version 202.0.0, current version 202.0.0)\n\t@rpath/libparmetis.dylib (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libmetis.dylib (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libmpifort.12.dylib (compatibility version 15.0.0, current version 15.2.0)\n\t@rpath/libpmpi.12.dylib (compatibility version 15.0.0, current version 15.2.0)\n\t@rpath/libgfortran.5.dylib (compatibility version 6.0.0, current version 6.0.0)\n\t@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n\t@rpath/libc++.1.dylib (compatibility version 1.0.0, current version 1.0.0)\n\t@rpath/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)\n\t@rpath/libmpi.12.dylib (compatibility version 15.0.0, current version 15.2.0)\n\t@rpath/libmpicxx.12.dylib (compatibility version 15.0.0, current version 15.2.0)\n\t@rpath/libomp.dylib (compatibility version 5.0.0, current version 5.0.0)\nThere should be no mention of libraries which we built statically.",
                  "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3896904",
                  "updatedAt": "2022-10-18T14:32:04Z",
                  "publishedAt": "2022-10-17T14:03:55Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "roystgnr"
                          },
                          "bodyText": "You might need to specify --enable-static too?  I've never used static linking myself, and I'm not sure how we propagate the options down to dependencies, but it looks like --enable-all-static is a libMesh-specific thing that TIMPI might be ignoring, whereas --enable-static is a libtool standard option.",
                          "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3897765",
                          "updatedAt": "2022-10-17T15:30:26Z",
                          "publishedAt": "2022-10-17T15:30:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "That did the trick. Thanks @roystgnr\nI edited my original response to include the additional switch.",
                          "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3898486",
                          "updatedAt": "2022-10-17T16:53:07Z",
                          "publishedAt": "2022-10-17T16:53:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "lekah"
                          },
                          "bodyText": "Thank you very much @milljm @roystgnr",
                          "url": "https://github.com/idaholab/moose/discussions/22326#discussioncomment-3906798",
                          "updatedAt": "2022-10-18T14:27:40Z",
                          "publishedAt": "2022-10-18T14:27:40Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "git-clang-format not in the moose environment.",
          "author": {
            "login": "adityaghantasala"
          },
          "bodyText": "Hello everyone.\nI noticed that the 'git-clang-format' command/executable/script is no long in the moose environment.\nI just installed a fresh environment using the instructions from here and I do not get git-clang-format.\nIs this expected ? if this is, should I change the script install_format_hook.sh to reflect this ?\nThank you in advance for any pointers.",
          "url": "https://github.com/idaholab/moose/discussions/22393",
          "updatedAt": "2022-10-21T23:58:25Z",
          "publishedAt": "2022-10-14T07:55:30Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@milljm",
                  "url": "https://github.com/idaholab/moose/discussions/22393#discussioncomment-3878782",
                  "updatedAt": "2022-10-14T12:36:51Z",
                  "publishedAt": "2022-10-14T12:36:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "It looks like this may have been dropped when we became very strict in our moose-mpich package building process. You should be able to install the clang format tools by doing the following while inside the moose Conda environment:\nmamba install clangdev\nI'll see about getting this package back into mix when installing moose-mpich.",
                  "url": "https://github.com/idaholab/moose/discussions/22393#discussioncomment-3896970",
                  "updatedAt": "2022-10-17T14:10:54Z",
                  "publishedAt": "2022-10-17T14:10:53Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Correction, I think the least amount of packages to get clang-format working is by installing the following:\nmamba install clang-tools\nI'll leave the original clangdev in case clang-tools ends up not working. I came back to edit, because I am testing these package installations on a Linux machine (which we use GCC and not LLVM). By installing clangdev, a person will actually get a clang compiler. Something that you may not want/need on a Linux machine. However, I will state that by having clangdev installed... everything seems to still work fine.",
                          "url": "https://github.com/idaholab/moose/discussions/22393#discussioncomment-3897075",
                          "updatedAt": "2022-10-17T14:21:44Z",
                          "publishedAt": "2022-10-17T14:21:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Creating a PR to address this: #22420",
                          "url": "https://github.com/idaholab/moose/discussions/22393#discussioncomment-3897259",
                          "updatedAt": "2022-10-17T14:40:38Z",
                          "publishedAt": "2022-10-17T14:40:38Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "adityaghantasala"
                  },
                  "bodyText": "Thank you for the clarification and a quick PR.  Looking forward to use the pre commit hook again !",
                  "url": "https://github.com/idaholab/moose/discussions/22393#discussioncomment-3902886",
                  "updatedAt": "2022-10-18T07:08:39Z",
                  "publishedAt": "2022-10-18T07:08:38Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Set two ThinLayerHeatTransfers on one interface",
          "author": {
            "login": "js-jixu"
          },
          "bodyText": "There are two very thin layers of oxide on my solid-liquid interface, with a thickness of 10 \u03bcm. So I want to use ThinLayerHeatTransfer at the interface to simulate the effect of these two oxide layers on the deterioration of heat transfer. But on an interface, it seems like I can only set up a ThinLayerHeatTransfer. Because only one material can be set on the interface boundary. What is the way MOOSE can set up two ThinLayerHeatTransfers on an interface?",
          "url": "https://github.com/idaholab/moose/discussions/22409",
          "updatedAt": "2022-11-15T19:19:53Z",
          "publishedAt": "2022-10-15T02:48:09Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "jiangwen84"
                  },
                  "bodyText": "I do not think the current ThinLayerHeatTransfer implementation can be used to model two layers. Two options:\n\nhomogenize the two layers into one and use the ThinLayerHeatTransfer\nfollow the theory as described on ThinLayerHeatTransfer documentation, extend it to support two layers.",
                  "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3883310",
                  "updatedAt": "2022-10-15T02:53:50Z",
                  "publishedAt": "2022-10-15T02:53:49Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "I think the first way is easier to implement and I will take it. Thank you!",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3883319",
                          "updatedAt": "2022-10-15T02:57:53Z",
                          "publishedAt": "2022-10-15T02:57:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "In my model, the temperature variable for the solid region is Ts and the temperature variable for the fluid region is Tf. If I want to set ThinLayerHeatTransfer on the solid-fluid interface, should I set Ts to variable and Tf to neighbor_var? Just like this:\n  [magnetite]\n    type = ThinLayerHeatTransfer\n    thermal_conductivity = k_magnetite\n    specific_heat = cp_magnetite\n    density = rho_magnetite\n    thickness = 1e-3 # 10\u03bcm\n    variable = Ts\n    neighbor_var = Tf\n    boundary = solid_wall\n    use_displaced_mesh = true\n  []\n\nI set Ts to both variable and neighbor_var before, but it turns out ThinLayerHeatTransfer doesn't work.",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3883385",
                          "updatedAt": "2022-10-15T03:34:10Z",
                          "publishedAt": "2022-10-15T03:34:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Could you attach your complete input file or a simpler version?\nTo use the ThinLayerHeatTransfer, you have to use BreakMeshByBlockGenerator to create the interface. Take a look at this example, (modules/heat_conduction/test/tests/thin_layer_heat_transfer/transient_2d.i)",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3883446",
                          "updatedAt": "2022-10-15T03:59:14Z",
                          "publishedAt": "2022-10-15T03:59:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "I've read the input file, but it is a little different from my case. I use gmsh to generate mesh file, and my solid area and fluid area share an interface. Do I still need to use BreakMeshByBlockGenerator in this case?\nHere is my input file:\n# Units: specific_heat_capacity--cp--J/(kg.K); density--rho--kg/(cm^3);\n# dynamic_viscosity--mu--kg/(cm.s); thermal_conductivity--k--W/(cm.K);\n# pressure--kg/(cm.s^2); force--kg.cm/s^2\n\noutlet_pressure = 0\ninlet_velocity = 150 # cm/s\nini_temp = 593 # K\n\n[Mesh]\n  file = '2layers_2d_midline.msh'\n[]\n\n[Variables]\n  [velocity]\n    family = LAGRANGE_VEC\n    order = FIRST\n    block = 'fluid'\n  []\n  [p]\n    family = LAGRANGE\n    order = FIRST\n    block = 'fluid'\n  []\n  [Tf]\n    family = LAGRANGE\n    order = FIRST\n    block = 'fluid'\n  []\n  [Ts]\n    family = LAGRANGE\n    order = FIRST\n    block = 'solid'\n  []\n[]\n\n[AuxVariables]\n  [power]\n    family = MONOMIAL\n    order = FIRST\n    block = 'solid'\n  []\n[]\n\n[ICs]\n  [initial_velocity]\n    type = VectorConstantIC\n    variable = velocity\n    x_value = 0\n    y_value = ${inlet_velocity}\n    z_value = 0\n  []\n  [initial_p]\n    type = FunctionIC\n    variable = p\n    function = ini_p\n  []\n  [initial_Tf]\n    type = ConstantIC\n    variable = Tf\n    value = ${ini_temp}\n  []\n  [initial_Ts]\n    type = ConstantIC\n    variable = Ts\n    value = ${ini_temp}\n  []\n[]\n\n[Kernels]\n  [fluid_mass]\n    type = INSADMass\n    variable = p\n  []\n  [fluid_mass_pspg]\n    type = INSADMassPSPG\n    variable = p\n  []\n  [fluid_momentum_time]\n    type = INSADMomentumTimeDerivative\n    variable = velocity\n  []\n  [fluid_momentum_convection]\n    type = INSADMomentumAdvection\n    variable = velocity\n  []\n  [fluid_momentum_viscous]\n    type = INSADMomentumViscous\n    variable = velocity\n  []\n  [fluid_momentum_pressure]\n    type = INSADMomentumPressure\n    variable = velocity\n    pressure = p\n    integrate_p_by_parts = true\n  []\n  [fluid_momentum_supg]\n    type = INSADMomentumSUPG\n    variable = velocity\n    velocity = velocity\n  []\n  [fluid_temperature_time]\n    type = INSADHeatConductionTimeDerivative\n    variable = Tf\n  []\n  [fluid_temperature_conduction]\n    type = ADHeatConduction\n    variable = Tf\n    thermal_conductivity = 'k'\n  []\n  [fluid_temperature_advection]\n    type = INSADEnergyAdvection\n    variable = Tf\n  []\n  [fluid_temperature_supg]\n    type = INSADEnergySUPG\n    variable = Tf\n    velocity = velocity\n  []\n\n  [solid_temperature_time]\n    type = ADHeatConductionTimeDerivative\n    variable = Ts\n    density_name = 'rho'\n    specific_heat = 'cp'\n    block = 'solid'\n  []\n  [solid_temperature_conduction]\n    type = ADHeatConduction\n    variable = Ts\n    thermal_conductivity = 'k'\n    block = 'solid'\n  []\n  [heat_source]\n    type = ADCoupledForce\n    variable = Ts\n    v = power\n    block = 'solid'\n  []\n[]\n\n[InterfaceKernels]\n  [convection_heat_transfer]\n    type = ConjugateHeatTransfer\n    variable = Tf\n    T_fluid = Tf\n    neighbor_var = 'Ts'\n    boundary = 'solid_wall'\n    htc = 'htc'\n  []\n  [magnetite]\n    type = ThinLayerHeatTransfer\n    thermal_conductivity = k_magnetite\n    specific_heat = cp_magnetite\n    density = rho_magnetite\n    thickness = 1e-1\n    variable = Ts\n    neighbor_var = Ts\n    boundary = solid_wall\n  []\n[]\n\n[AuxKernels]\n  [power_distribution_auxk]\n    type = FunctionAux\n    variable = power\n    function = power_distribution_function\n    block = 'solid'\n  []\n[]\n\n[BCs]\n  [no_slip]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'solid_wall'\n  []\n  [inlet_velocity]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'fluid_bottom'\n    function_y = ${inlet_velocity}\n  []\n  [symmetry]\n    type = ADVectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'fluid_wall'\n    function_x = 0\n    set_x_comp = true\n    set_y_comp = false\n    set_z_comp = false\n  []\n  [outlet_p]\n    type = DirichletBC\n    variable = p\n    boundary = 'fluid_top'\n    value = ${outlet_pressure}\n  []\n  [inlet_T]\n    type = DirichletBC\n    variable = Tf\n    boundary = 'fluid_bottom'\n    value = ${ini_temp}\n  []\n[]\n\n[Materials]\n  [solid_constant_mat]\n    type = ADGenericConstantMaterial\n    prop_names = 'k cp rho'\n    prop_values = '0.06 300 0.010000'\n    block = 'solid'\n  []\n  [magnetite_constant_mat]\n    type = GenericConstantMaterial\n    prop_names = 'k_magnetite cp_magnetite rho_magnetite'\n    prop_values = '0.02 200 0.005000'\n    boundary = 'solid_wall'\n  []\n  [fluid_constant_mat]\n    type = ADGenericConstantMaterial\n    prop_names = 'k cp rho mu'\n    prop_values = '0.30 145 0.007000 2e-5'\n    block = 'fluid'\n  []\n  [ins_fluid_mat]\n    type = INSADStabilized3Eqn\n    velocity = velocity\n    pressure = p\n    temperature = Tf\n    block = 'fluid'\n  []\n  [htc_mat]\n    type = ADParsedMaterial\n    f_name = htc\n    function = '5'\n    boundary = solid_wall\n  []\n[]\n\n[Functions]\n  [ini_p]\n    type = ParsedFunction\n    value = '0.010302 * 981 * (10 - y)'\n  []\n  [power_distribution_function]\n    type = ParsedFunction\n    value = '300 * sin(pi * y / 10)'\n  []\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    full = true\n    solve_type = 'PJFNK'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  dt = 1\n  end_time = 100\n  steady_state_detection = true\n\n  solve_type = 'PJFNK'\n  petsc_options = '-snes_converged_reason -ksp_converged_reason -snes_linesearch_monitor'\n  petsc_options_iname = '-pc_type -pc_factor_shift_type'\n  petsc_options_value = 'lu       NONZERO'\n  line_search = 'none'\n\n  nl_rel_tol = 1e-8\n  nl_abs_tol = 1e-8\n  nl_max_its = 30\n  l_max_its = 100\n  automatic_scaling = true\n  compute_scaling_once = false\n  off_diagonals_in_auto_scaling = true\n[]\n\n[Outputs]\n  perf_graph = true\n  print_linear_residuals = true\n  exodus = true\n  csv = true\n[]\n\n[Postprocessors]\n  [average_solid_Ts]\n    type = ElementAverageValue\n    variable = Ts\n    block = 'solid'\n  []\n  [average_fluid_Tf]\n    type = ElementAverageValue\n    variable = Tf\n    block = 'fluid'\n  []\n  [max_solid_Ts]\n    type = ElementExtremeValue\n    variable = Ts\n    value_type = max\n    block = 'solid'\n  []\n  [max_fluid_Tf]\n    type = ElementExtremeValue\n    variable = Tf\n    value_type = max\n    block = 'fluid'\n  []\n  [min_solid_Ts]\n    type = ElementExtremeValue\n    variable = Ts\n    value_type = min\n    block = 'solid'\n  []\n  [min_fluid_Tf]\n    type = ElementExtremeValue\n    variable = Tf\n    value_type = min\n    block = 'fluid'\n  []\n[]\n\n[Debug]\n  show_var_residual_norms = true\n[]\n\n2layers_2d_midline.zip\nI set Ts to both variable and neighbor_var. But I get the same result whether I comment out the [magnetite] block or not.",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3883529",
                          "updatedAt": "2022-10-15T06:35:01Z",
                          "publishedAt": "2022-10-15T04:55:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "Now there are two problems. The first is that neighbor_var seems to be Tf, not Ts. Because at the solid-fluid interface, one side of the thin layer transfers heat with the solid, and the other side transfers heat with the fluid. The second is that when I add a thin layer to the fluid-solid interface (the thermal conductivity of the thin layer is much smaller than that of the solid), the heat transfer between the solid and the liquid is deteriorated. The maximum temperature of the solid should be higher after adding the thin layer. But the simulation results are the opposite. After adding the thin layer, the maximum temperature of the solid decreases. Here are some output files and a finer mesh.\n2layers_2d_midline.zip\nno_thin_layer.zip\nthin_layer_0.1.zip",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3893183",
                          "updatedAt": "2022-10-17T06:07:30Z",
                          "publishedAt": "2022-10-17T06:07:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "Yes, you need to start with a continuous mesh and then use BreakMeshByBlockGenerator to create the interface internally by MOOSE.\nI saw your have both ConjugateHeatTransfer and ThinLayerHeatTransfer applied on the same interface. Do you need both?\nDo you really need two temperature variables, i.e., Ts and Tf? Would one T variable work?",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3900142",
                          "updatedAt": "2022-10-17T20:28:50Z",
                          "publishedAt": "2022-10-17T20:28:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "jiangwen84"
                          },
                          "bodyText": "I think more about it. The ThinLayerHeatTransfer does not support two different variables as for now. Thus, I made some changes in your input file. You can try it using the mesh you provided in 'no_thin_layer' folder. I do not know your problem well, so I cannot tell whether the results look reasonable or not. Let me know your thoughts.\n# Units: specific_heat_capacity--cp--J/(kg.K); density--rho--kg/(cm^3);\n# dynamic_viscosity--mu--kg/(cm.s); thermal_conductivity--k--W/(cm.K);\n# pressure--kg/(cm.s^2); force--kg.cm/s^2\n\noutlet_pressure = 0\ninlet_velocity = 150 # cm/s\nini_temp = 593 # K\n\n[Mesh]\n  [file_mesh]\n    type = FileMeshGenerator\n    file = 'no_thin_layer.e'\n  []\n  [breakmesh]\n    input = file_mesh\n    type = BreakMeshByBlockGenerator\n    block_pairs = 'fluid solid'\n    split_interface = true\n    add_interface_on_two_sides = true\n  []\n[]\n\n[Variables]\n  [velocity]\n    family = LAGRANGE_VEC\n    order = FIRST\n    block = 'fluid'\n  []\n  [p]\n    family = LAGRANGE\n    order = FIRST\n    block = 'fluid'\n  []\n  [T]\n    family = LAGRANGE\n    order = FIRST\n  []\n[]\n\n[AuxVariables]\n  [power]\n    family = MONOMIAL\n    order = FIRST\n    block = 'solid'\n  []\n[]\n\n[ICs]\n  [initial_velocity]\n    type = VectorConstantIC\n    variable = velocity\n    x_value = 0\n    y_value = ${inlet_velocity}\n    z_value = 0\n  []\n  [initial_p]\n    type = FunctionIC\n    variable = p\n    function = ini_p\n  []\n  [initial_Tf]\n    type = ConstantIC\n    variable = T\n    value = ${ini_temp}\n    block = 'fluid'\n  []\n  [initial_Ts]\n    type = ConstantIC\n    variable = T\n    value = ${ini_temp}\n    block = 'solid'\n  []\n[]\n\n[Kernels]\n  [fluid_mass]\n    type = INSADMass\n    variable = p\n    block = 'fluid'\n  []\n  [fluid_mass_pspg]\n    type = INSADMassPSPG\n    variable = p\n    block = 'fluid'\n  []\n  [fluid_momentum_time]\n    type = INSADMomentumTimeDerivative\n    variable = velocity\n    block = 'fluid'\n  []\n  [fluid_momentum_convection]\n    type = INSADMomentumAdvection\n    variable = velocity\n    block = 'fluid'\n  []\n  [fluid_momentum_viscous]\n    type = INSADMomentumViscous\n    variable = velocity\n    block = 'fluid'\n  []\n  [fluid_momentum_pressure]\n    type = INSADMomentumPressure\n    variable = velocity\n    pressure = p\n    integrate_p_by_parts = true\n    block = 'fluid'\n  []\n  [fluid_momentum_supg]\n    type = INSADMomentumSUPG\n    variable = velocity\n    velocity = velocity\n    block = 'fluid'\n  []\n  [fluid_temperature_time]\n    type = INSADHeatConductionTimeDerivative\n    variable = T\n    block = 'fluid'\n  []\n  [fluid_temperature_conduction]\n    type = ADHeatConduction\n    variable = T\n    thermal_conductivity = 'k'\n    block = 'fluid'\n  []\n  [fluid_temperature_advection]\n    type = INSADEnergyAdvection\n    variable = T\n    block = 'fluid'\n  []\n  [fluid_temperature_supg]\n    type = INSADEnergySUPG\n    variable = T\n    velocity = velocity\n    block = 'fluid'\n  []\n\n  [solid_temperature_time]\n    type = ADHeatConductionTimeDerivative\n    variable = T\n    density_name = 'rho'\n    specific_heat = 'cp'\n    block = 'solid'\n  []\n  [solid_temperature_conduction]\n    type = ADHeatConduction\n    variable = T\n    thermal_conductivity = 'k'\n    block = 'solid'\n  []\n  [heat_source]\n    type = ADCoupledForce\n    variable = T\n    v = power\n    block = 'solid'\n  []\n[]\n\n[InterfaceKernels]\n  [magnetite]\n    type = ThinLayerHeatTransfer\n    thermal_conductivity = k_magnetite\n    specific_heat = cp_magnetite\n    density = rho_magnetite\n    thickness = 1e-1\n    variable = T\n    neighbor_var = T\n    boundary = solid_fluid\n  []\n[]\n\n[AuxKernels]\n  [power_distribution_auxk]\n    type = FunctionAux\n    variable = power\n    function = power_distribution_function\n    block = 'solid'\n  []\n[]\n\n[BCs]\n  [no_slip]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'solid_wall'\n  []\n  [inlet_velocity]\n    type = VectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'fluid_bottom'\n    function_y = ${inlet_velocity}\n  []\n  [symmetry]\n    type = ADVectorFunctionDirichletBC\n    variable = velocity\n    boundary = 'fluid_wall'\n    function_x = 0\n    set_x_comp = true\n    set_y_comp = false\n    set_z_comp = false\n  []\n  [outlet_p]\n    type = DirichletBC\n    variable = p\n    boundary = 'fluid_top'\n    value = ${outlet_pressure}\n  []\n  [inlet_T]\n    type = DirichletBC\n    variable = T\n    boundary = 'fluid_bottom'\n    value = ${ini_temp}\n  []\n[]\n\n[Materials]\n  [solid_constant_mat]\n    type = ADGenericConstantMaterial\n    prop_names = 'k cp rho'\n    prop_values = '0.06 300 0.010000'\n    block = 'solid'\n  []\n  [magnetite_constant_mat]\n    type = GenericConstantMaterial\n    prop_names = 'k_magnetite cp_magnetite rho_magnetite'\n    prop_values = '0.02 200 0.005000'\n    boundary = 'solid_fluid'\n  []\n  [fluid_constant_mat]\n    type = ADGenericConstantMaterial\n    prop_names = 'k cp rho mu'\n    prop_values = '0.30 145 0.007000 2e-5'\n    block = 'fluid'\n  []\n  [ins_fluid_mat]\n    type = INSADStabilized3Eqn\n    velocity = velocity\n    pressure = p\n    temperature = T\n    block = 'fluid'\n  []\n  [htc_mat]\n    type = ADParsedMaterial\n    f_name = htc\n    function = '5'\n    boundary = solid_wall\n  []\n[]\n\n[Functions]\n  [ini_p]\n    type = ParsedFunction\n    value = '0.010302 * 981 * (10 - y)'\n  []\n  [power_distribution_function]\n    type = ParsedFunction\n    value = '300 * sin(pi * y / 10)'\n  []\n[]\n\n[Preconditioning]\n  [SMP]\n    type = SMP\n    full = true\n    solve_type = 'PJFNK'\n  []\n[]\n\n[Executioner]\n  type = Transient\n  dt = 1\n  end_time = 100\n  steady_state_detection = true\n\n  solve_type = 'PJFNK'\n  petsc_options = '-snes_converged_reason -ksp_converged_reason -snes_linesearch_monitor'\n  petsc_options_iname = '-pc_type -pc_factor_shift_type'\n  petsc_options_value = 'lu       NONZERO'\n  line_search = 'none'\n\n  nl_rel_tol = 1e-8\n  nl_abs_tol = 1e-8\n  nl_max_its = 30\n  l_max_its = 100\n  automatic_scaling = true\n  compute_scaling_once = false\n  off_diagonals_in_auto_scaling = true\n[]\n\n[Outputs]\n  perf_graph = true\n  print_linear_residuals = true\n  exodus = true\n  csv = true\n[]\n\n[Postprocessors]\n  [average_solid_T]\n    type = ElementAverageValue\n    variable = T\n    block = 'solid'\n  []\n  [average_fluid_T]\n    type = ElementAverageValue\n    variable = T\n    block = 'fluid'\n  []\n  [max_solid_T]\n    type = ElementExtremeValue\n    variable = T\n    value_type = max\n    block = 'solid'\n  []\n  [max_fluid_T]\n    type = ElementExtremeValue\n    variable = T\n    value_type = max\n    block = 'fluid'\n  []\n  [min_solid_T]\n    type = ElementExtremeValue\n    variable = T\n    value_type = min\n    block = 'solid'\n  []\n  [min_fluid_T]\n    type = ElementExtremeValue\n    variable = T\n    value_type = min\n    block = 'fluid'\n  []\n[]\n\n[Debug]\n  show_var_residual_norms = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3900540",
                          "updatedAt": "2022-10-17T21:56:05Z",
                          "publishedAt": "2022-10-17T21:56:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "js-jixu"
                          },
                          "bodyText": "I saw your have both ConjugateHeatTransfer and ThinLayerHeatTransfer applied on the same interface. Do you need both?\n\nTo put it simply, I want to model fluid-solid conjugate heat transfer, where the solid is a heat source. During the flow process, the solid surface will be fouled, so a thin layer needs to be added to the fluid-solid interface to represent the thermal resistance caused by fouling.\n\nDo you really need two temperature variables, i.e., Ts and Tf? Would one T variable work?\n\nI think it is necessary to set the temperature variable separately in the fluid and solid areas. I used to set the temperature to T in both the solid and fluid regions, but it turned out that no matter what the htc was equal to, the answer I calculated would be the same.",
                          "url": "https://github.com/idaholab/moose/discussions/22409#discussioncomment-3901669",
                          "updatedAt": "2022-10-18T02:49:12Z",
                          "publishedAt": "2022-10-18T02:49:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Generic Material property based on Damage Evolution",
          "author": {
            "login": "batodon"
          },
          "bodyText": "Hello,\nI\u2019m trying to implement the damage evolution shown below as a material property so that another material can call the damage variable (for example, as a damage index). Can anyone recommend an example MOOSE file in this regard? How can I approach this? Thank you.",
          "url": "https://github.com/idaholab/moose/discussions/22195",
          "updatedAt": "2022-10-22T00:05:37Z",
          "publishedAt": "2022-09-25T22:39:38Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou should be able to make a new material property for this.\nIf you follow the tutorial we do introduce material properties there with an example\nWhat dimension is this quantity? It's a scalar right?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3730481",
                  "updatedAt": "2022-09-26T04:15:42Z",
                  "publishedAt": "2022-09-26T04:15:41Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks, Guillaume. The damage variable is a scalar quantity and it evolves with time.",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3730699",
                          "updatedAt": "2022-09-26T05:15:49Z",
                          "publishedAt": "2022-09-26T05:15:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok a regular material property (type Real) should be appropriate then.",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3736160",
                          "updatedAt": "2022-09-26T17:14:14Z",
                          "publishedAt": "2022-09-26T17:14:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hello @GiudGiud,\nWhen developing a material property, do you always have to inherit from the material class? Or can you inherit from a different class and compute your _qp properties? For example, I inherited from a \u201cradialreturncreepstressupdate\u201d class because it will enable me to apply the newton iteration to compute my damage variable. However, when I tried using the computeQpProperties method, I got the following Error shown below. (P/S: I attached the files below).\n\ndamageEvol.zip",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3748042",
                          "updatedAt": "2022-09-28T02:33:49Z",
                          "publishedAt": "2022-09-28T02:33:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Hello\nYes you have to at some level. You can inherit from a child of the material class though.\nIt works here, radialreturncreepstressupdate inherits from RadialReturnStressUpdate, which inherits from StressUpdateBase, which inherits from Material.\nFrom the errors it looks like you should be writing HLDamageEvoleTempl<is_ad> (with is_ad = true or false depending on whether you are using AD).\nI think the problem is that you are inheriting from RadialReturnCreepStressUpdateBaseTempl instead of ADRadialReturnCreepStressUpdateBase, which is the instantiation of that template.\nOr is this on purpose? Do you want to be creating a new template or a new class?\nGuillaume",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3748350",
                          "updatedAt": "2022-09-28T03:51:04Z",
                          "publishedAt": "2022-09-28T03:51:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud,\nThanks. I\u2019m creating a material class (not a template) with a damaged property defined at the _qp points so that another material object may call this _qp damaged property. I added  template <bool is_ad> on top the definition of the computeQpProperties() method, and it seems to be working now except for one error (shown below).\nThe error indicated that \u2018scalar\u2019 (which is computed within another method in the class) could not be used in the \u2018computeQpProperties()\u2019 method without first declaring it. How do I declare it so I can use it to compute the final state of my damaged property?  (P/S: In case you want to see the files, it is attached to my previous question).",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3748819",
                          "updatedAt": "2022-09-28T05:48:22Z",
                          "publishedAt": "2022-09-28T05:48:21Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you need to make scalar (call it _scalar instead) a class attribute. You define it in the header as a part of the class, then each routine may use the value and modify it too",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3748986",
                          "updatedAt": "2022-09-28T06:21:01Z",
                          "publishedAt": "2022-09-28T06:21:00Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud,\nIt didn\u2019t work. However, it worked when I defined my own method/function (without overriding the computeQpProperties method) and declared scalar. I\u2019m not entirely sure. Is this a good code development? Do you think the damage variable is computed successfully as _qp properties? And do you think the scalar obtained from the previous methods is successfully used in this new method/function? See attached for the files\ndamageEvol.zip",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3756783",
                          "updatedAt": "2022-09-28T20:40:09Z",
                          "publishedAt": "2022-09-28T20:40:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "If you do not override computeQpProperties you are not computing the property, this is clear.\nSo no I do not think it s computed successfully.\nI do not see _scalar as a class attribute in your input.\nShould the scalar be a material property instead? What does it represent?",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3757356",
                          "updatedAt": "2022-09-28T22:38:11Z",
                          "publishedAt": "2022-09-28T22:38:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud,\nSo basically, I\u2019m setting up the damage evolution as a residual equation to be computed by newton iteration using the \u201ccomputeResidualInternal\u201d and \u201ccomputeDerivative\u201d methods (similar to what is done in the IsotropicPlasticityStressUpdate or PowerLawCreepStressUpdate classes). The scalar is the damage increment (i.e., d \\Delta D), which will come (out) from these methods.",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3757955",
                          "updatedAt": "2022-09-29T01:05:23Z",
                          "publishedAt": "2022-09-29T01:05:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Hi @GiudGiud, I believe I finally found a way to update the damage variable with the scalar value. I overrode the iterationFinalize() method (which is inherited from the radialreturnstressupdate class), and it compiled successfully. What do you think?\ndamageEvol.zip",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3767659",
                          "updatedAt": "2022-09-30T01:49:38Z",
                          "publishedAt": "2022-09-30T01:49:37Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "ngrilli"
                  },
                  "bodyText": "@batodon if you want to explicitly update a material property in time, you can \"declare\" the material property and \"get\" the old material property in a material class, then you implement an explicit Euler update in computeQpProperties.\nYou can see a slightly complicated example here:\nhttps://github.com/ngrilli/c_pfor_am/blob/main/src/materials/ComputeCrystalPlasticityStressDamage.C\nSee the variables:\n_plastic_work\n_plastic_work_old\nthat I am using for updating the plastic work in a plasticity model using:\n_plastic_work[_qp] = _plastic_work_old[_qp] + variation_of_plastic_work\nYou can use the variable _dt for the timestep\nNicol\u00f2",
                  "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3772099",
                  "updatedAt": "2022-09-30T12:46:34Z",
                  "publishedAt": "2022-09-30T12:46:33Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "batodon"
                          },
                          "bodyText": "Thanks a lot, @ngrilli. This lead was very helpful!",
                          "url": "https://github.com/idaholab/moose/discussions/22195#discussioncomment-3898141",
                          "updatedAt": "2022-10-17T16:14:11Z",
                          "publishedAt": "2022-10-17T16:14:11Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Question about updating boundary conditions each time step (depends on time history)",
          "author": {
            "login": "chunhuizhao478"
          },
          "bodyText": "Dear Moose community,\nI'm new to moose. We would like to implement dynamics rupture earthquake problem. The geometry setup is two rectangular blocks with the bottom boundary of upper block and the top boundary of lower block are considered as fault surface.\nAt the current point, we are able to\n\nsolve the dynamic FEM problem using \"TensorMechanics\" \"CentralDifference\" to get displacement.\nextract the displacement on the two fault surfaces mentioned above as \"AuxVariable\" using \"AuxKernel\" restricted at those surfaces.\n\nNow we would like to do some multiplications with the data on the surfaces(to ensure continuity conditions, which could be done pointwise), and feed the post-computed displacements as boundary condition, then apply on the weak form and solve the system again for the next time step.\nI'm wondering which would be the better approach for this. Any help would be appreciated! Thanks!",
          "url": "https://github.com/idaholab/moose/discussions/22343",
          "updatedAt": "2022-11-15T18:04:07Z",
          "publishedAt": "2022-10-10T02:53:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nare you going to be solving this boundary condition implicitly? Or is that part of the system going to be explicit\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3836155",
                  "updatedAt": "2022-10-10T04:54:16Z",
                  "publishedAt": "2022-10-10T04:54:16Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi Guillaume,\nThanks for your reply. So the system solve is going to be explicit. After getting solution at two surfaces as auxvariable (displacement), for the update of boundary condition, we may experience both situations depend on the model we use:\nSlip weakening: the new BC will be calculated explicitly\nRate-and-State Friction: a nonlinear equation using Newton Raphson is needed to be solve.\nFor both situations, each point has its own set of equation, there is no explicit dependence among different points.\nThanks,\nChunhui",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3836207",
                          "updatedAt": "2022-10-10T05:08:00Z",
                          "publishedAt": "2022-10-10T05:07:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Does the BC depend only on local dofs? Or does it have some sort of extended stencil (on the BC sideset, or across the fault?)",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3836261",
                          "updatedAt": "2022-10-10T05:24:58Z",
                          "publishedAt": "2022-10-10T05:24:57Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "It only depends on local dofs",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3841206",
                          "updatedAt": "2022-10-10T16:47:09Z",
                          "publishedAt": "2022-10-10T16:47:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think you should be able to place all your code in a boundary condition then.\nThe two situations could be determined there",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842512",
                          "updatedAt": "2022-10-10T20:14:54Z",
                          "publishedAt": "2022-10-10T20:14:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "So the current issue we have, due to the limit knowledge of moose, is that we are not sure how to pass a set of aux values into \"Function\", which then gives an input (as a Function object) for \"FunctionDirichletBC\" or \"FunctionNeumannBC\". It would be better if you could direct us to some examples.",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842584",
                          "updatedAt": "2022-10-10T20:25:12Z",
                          "publishedAt": "2022-10-10T20:25:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Or you mean \"Custom Boundary Conditions\" in https://mooseframework.inl.gov/getting_started/examples_and_tutorials/examples/ex04_bcs.html ?",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842711",
                          "updatedAt": "2022-10-10T20:46:34Z",
                          "publishedAt": "2022-10-10T20:46:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "look at coupled BCs to add in varaible dependence\nhttps://github.com/idaholab/moose/blob/next/framework/src/bcs/CoupledVarNeumannBC.C\nFunctions do not depend on variables so it's not what you want",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842901",
                          "updatedAt": "2022-10-10T21:19:14Z",
                          "publishedAt": "2022-10-10T21:19:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "this example in the tutorial you linked to seems pretty good for what you want to do",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842977",
                          "updatedAt": "2022-10-10T21:29:48Z",
                          "publishedAt": "2022-10-10T21:29:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Thanks, I'm looking into it.",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3842987",
                          "updatedAt": "2022-10-10T21:31:11Z",
                          "publishedAt": "2022-10-10T21:31:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "chunhuizhao478"
                          },
                          "bodyText": "Hi Guillaume, I think the path you directed is promising. Another question is how should we compute elastic forces, basically <stress(displacement), grad(test function)> that is evaluated in the \"StressDivergenceTensors\" kernel when solving the system, I will need to feed this into Custom Boundary Condition as well. Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/22343#discussioncomment-3843583",
                          "updatedAt": "2022-10-10T23:58:58Z",
                          "publishedAt": "2022-10-10T23:58:57Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Troublesshooting: Build Issues",
          "author": {
            "login": "KangChenRui"
          },
          "bodyText": "hello everyone, I have some problems.\nAfter the moose is installed, some errors occurs when I \"make - j 4\".  Plaese see the below picture:\n\nThen, I found answer in the Troublesshooting: Build Issues, when I \"git fetch upstream\",the fatals is :\n\nNow, what should I do?\nThanks for your help\uff01",
          "url": "https://github.com/idaholab/moose/discussions/22411",
          "updatedAt": "2022-10-22T00:04:31Z",
          "publishedAt": "2022-10-16T08:52:51Z",
          "category": {
            "name": "Q&A Getting Started"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyour upstream is probably called origin because you did not rename it.\nso type git fetch origin instead\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3888991",
                  "updatedAt": "2022-10-16T12:16:39Z",
                  "publishedAt": "2022-10-16T12:16:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "KangChenRui"
                          },
                          "bodyText": "hello,Thanks for your help!\nNow,I encountered a new problem, as shown in the figure below\uff1a",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892189",
                          "updatedAt": "2022-10-17T02:10:09Z",
                          "publishedAt": "2022-10-17T02:10:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you dont need to init submodules. large_media is only for building the documentation locally and getting the pictures",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892194",
                          "updatedAt": "2022-10-17T02:11:43Z",
                          "publishedAt": "2022-10-17T02:11:42Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KangChenRui"
                          },
                          "bodyText": "However, compilation errors are consistent, as shown in the following figure\uff1a",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892211",
                          "updatedAt": "2022-10-17T02:16:13Z",
                          "publishedAt": "2022-10-17T02:16:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "what s the commit number?\nare you using the conda installation path?\nwhat is the output of the diagnostics script in moose/scripts",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892224",
                          "updatedAt": "2022-10-17T02:18:14Z",
                          "publishedAt": "2022-10-17T02:18:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KangChenRui"
                          },
                          "bodyText": "About commit number, When I type \u201cmake -j 4\u201d, errors are reported.\nThe installation path is completely in accordance with the installation guidelines\nThere is no \"nohup.out\" file.",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892258",
                          "updatedAt": "2022-10-17T02:25:12Z",
                          "publishedAt": "2022-10-17T02:25:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "the commit number is the output of git show not make\nwhich guidelines? there are more than one way to install the code\nit's not the nohup file I'd like to see, please run the diagnostics.sh script in moose/scripts",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892384",
                          "updatedAt": "2022-10-17T02:53:11Z",
                          "publishedAt": "2022-10-17T02:53:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "KangChenRui"
                          },
                          "bodyText": "About guidelines,Refer to the following link \u201chttps://mooseframework.inl.gov/getting_started/installation/conda.html\u201d.\nThe files generated after running diagnostics.sh are as follows\uff1a\nnohup.txt",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3892554",
                          "updatedAt": "2022-10-17T03:29:49Z",
                          "publishedAt": "2022-10-17T03:29:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You have another compiler installed that is hiding the compilers we are installing with conda\n/home/yydeng/intel/compilers_and_libraries_2019.5.281/linux/mpi/intel64/bin/mpicc\nAre you setting environment variables to find that compiler? Did you add it to your PATH for example?\nYou need to let the CC, FC, CXX environment variables point to the compilers installed by conda as well",
                          "url": "https://github.com/idaholab/moose/discussions/22411#discussioncomment-3896831",
                          "updatedAt": "2022-10-17T13:55:35Z",
                          "publishedAt": "2022-10-17T13:55:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}