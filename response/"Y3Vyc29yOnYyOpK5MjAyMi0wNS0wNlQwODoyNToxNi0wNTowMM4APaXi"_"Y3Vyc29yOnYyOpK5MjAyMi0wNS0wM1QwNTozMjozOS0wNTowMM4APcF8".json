{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMi0wNS0wM1QwNTozMjozOS0wNTowMM4APcF8"
    },
    "edges": [
      {
        "node": {
          "title": "Download and build rtags when install Atom",
          "author": {
            "login": "hhy2022"
          },
          "bodyText": "As recommended, I intalled Atom as my editor. I used the following command in building rtags\ngit clone https://github.com/Andersbakken/rtags.git\ncd rtags/\ngit submodule init\ngit submodule update\nmkdir mybuild && cd mybuild\ncmake ..\nmake -j 24\nsudo make install\nIt gave me some errors when I was trying to run 'cmake ..'. The messages looked like below:\n-- The CXX compiler identification is unknown\nCMake Error at CMakeLists.txt:2 (project):\nNo CMAKE_CXX_COMPILER could be found.\nTell CMake where to find the compiler by setting either the environment\nvariable \"CXX\" or the CMake cache entry CMAKE_CXX_COMPILER to the full path\nto the compiler, or to the compiler name if it is in the PATH.\n-- Configuring incomplete, errors occurred!\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeError.log\".",
          "url": "https://github.com/idaholab/moose/discussions/20784",
          "updatedAt": "2022-06-22T08:37:37Z",
          "publishedAt": "2022-04-14T01:04:39Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nDid you try doing what it says? What does echo $CXX return?\nIn the moose mamba environment, CXX should be set already\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2564042",
                  "updatedAt": "2022-06-22T08:37:41Z",
                  "publishedAt": "2022-04-14T03:24:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much for your reply. I didn't notice that the activation would become a problem. I activated moose in mamba environment, but It still didn't work.\nThe new error information was below:\n-- The C compiler identification is GNU 9.4.0\n-- The CXX compiler identification is GNU 9.3.0\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: /usr/bin/cc - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /home/dff/mambaforge3/envs/moose/bin/mpicxx - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\nCMake Error at cmake/FindLibClang.cmake:76 (message):\nCould NOT find llvm-config executable and LIBCLANG_CXXFLAGS is not set\nCall Stack (most recent call first):\nsrc/CMakeLists.txt:81 (find_package)\n-- Configuring incomplete, errors occurred!\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeError.log\".\nBesides, when I run \"echo $CXX\", I got \"mpicxx\" under mamba environment.",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2564142",
                          "updatedAt": "2022-06-22T08:37:39Z",
                          "publishedAt": "2022-04-14T03:53:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "CXX being mpicxx is correct\n-- The C compiler identification is GNU 9.4.0\n-- The CXX compiler identification is GNU 9.3.0\n\nthis is a problem. Should definitely be the same. The environment is either not installed well or something from your system is on your $PATH before the mamba compilers",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2564165",
                          "updatedAt": "2022-06-22T08:37:42Z",
                          "publishedAt": "2022-04-14T03:59:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "I tried the \"cmake\" command before I activated moose. Is this the reason causing the difference? Or should I just update something?",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2564186",
                          "updatedAt": "2022-06-22T08:37:42Z",
                          "publishedAt": "2022-04-14T04:10:33Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This is the problem\n-- Check for working C compiler: /usr/bin/cc - skipped\n\nset CC to be mpicc export CC=mpicc then try again please",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2568025",
                          "updatedAt": "2022-08-16T09:07:05Z",
                          "publishedAt": "2022-04-14T16:14:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Thank you so much.\nI tried the command -- Check for working C compiler: /usr/bin/cc - skipped and the message was:\n--: command not found\nI run the command in the directory '~/rtags/mybuild'.",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2570236",
                          "updatedAt": "2022-08-16T09:07:05Z",
                          "publishedAt": "2022-04-14T23:54:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "This is not a command. This is part of the log you posted.\nThe command to run is this:\nexport CC=mpicc",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2570301",
                          "updatedAt": "2022-08-16T09:07:05Z",
                          "publishedAt": "2022-04-15T00:06:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Sorry about that. I misunderstood your meaning. I tried the command export CC=mpicc and cmake again but it seemed that the error was still there.\n`CMake Error at cmake/FindLibClang.cmake:76 (message):\nCould NOT find llvm-config executable and LIBCLANG_CXXFLAGS is not set\nCall Stack (most recent call first):\nsrc/CMakeLists.txt:81 (find_package)\n-- Configuring incomplete, errors occurred!\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeError.log\".\n`",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2570321",
                          "updatedAt": "2022-04-15T00:17:31Z",
                          "publishedAt": "2022-04-15T00:17:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Could you please edit your message so we have the entire log?\nDo you still have -- The CXX compiler identification is unknown  ?\nIs your moose environment active when you are doing this?",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2570334",
                          "updatedAt": "2022-04-15T00:24:45Z",
                          "publishedAt": "2022-04-15T00:23:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hhy2022"
                          },
                          "bodyText": "Yes. I activated moose. This is a copied of the whole message:\n(moose) dff@dff-ThinkPad-T440:~/rtags/mybuild$ export CC=mpicc\n(moose) dff@dff-ThinkPad-T440:~/rtags/mybuild$ cmake ..\nCMake Error at cmake/FindLibClang.cmake:76 (message):\n  Could NOT find llvm-config executable and LIBCLANG_CXXFLAGS is not set\nCall Stack (most recent call first):\n  src/CMakeLists.txt:81 (find_package)\n\n\n-- Configuring incomplete, errors occurred!\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/dff/rtags/mybuild/CMakeFiles/CMakeError.log\".\n\nI tried to open the log file and the message shown like this:\nCompiling the CXX compiler identification source file \"CMakeCXXCompilerId.cpp\" failed.\nCompiler: CMAKE_CXX_COMPILER-NOTFOUND \nBuild flags: \nId flags: --c++ \n\nThe output was:\nNo such file or directory\n\n\nCompiling the CXX compiler identification source file \"CMakeCXXCompilerId.cpp\" failed.\nCompiler: CMAKE_CXX_COMPILER-NOTFOUND \nBuild flags: \nId flags: --ec++ \n\nThe output was:\nNo such file or directory\n\n\nCompiling the CXX compiler identification source file \"CMakeCXXCompilerId.cpp\" failed.\nCompiler: CMAKE_CXX_COMPILER-NOTFOUND \nBuild flags: \nId flags: --target=arm-arm-none-eabi;-mcpu=cortex-m3 \n\nThe output was:\nNo such file or directory",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2570365",
                          "updatedAt": "2022-04-15T00:47:42Z",
                          "publishedAt": "2022-04-15T00:34:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "which architecture is this on?",
                          "url": "https://github.com/idaholab/moose/discussions/20784#discussioncomment-2575101",
                          "updatedAt": "2022-04-15T16:12:44Z",
                          "publishedAt": "2022-04-15T16:12:44Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Divergence of divergence of a tensor",
          "author": {
            "login": "alexguev"
          },
          "bodyText": "Hi,\nI would like to implement in a kernel the term , where  (a capillary stress), where I solve for the variable . Note that  depends on .\nI think that I have managed to implement the computation of the stress through a Material following ComputeSurfaceTensionKKS, here is the relevant code:\nvoid\nADCapillaryStress::computeQpProperties()\n{\n  auto & S = _capillary_stress[_qp];\n  S.zero();\n\n  const ADReal nx = _grad_v[_qp](0);\n  const ADReal ny = _grad_v[_qp](1);\n  const ADReal nz = _grad_v[_qp](2);\n\n  S(0, 0) += _kappa[_qp] * nx * nx;\n  S(0, 1) += _kappa[_qp] * nx * ny;\n  S(1, 1) += _kappa[_qp] * ny * ny;\n  S(0, 2) += _kappa[_qp] * nx * nz;\n  S(1, 2) += _kappa[_qp] * ny * nz;\n  S(2, 2) += _kappa[_qp] * nz * nz;\n\n  // fill in symmetrically\n  S(1, 0) = S(0, 1);\n  S(2, 0) = S(0, 2);\n  S(2, 1) = S(1, 2);\n}\n\nNow if the divergence of the stress were a gradient, this would be the usual diffusion equation, using _grad_u:\nADReal\nADAnisotropicDiffusion::computeQpResidual()\n{\n  return _lambda[_qp] * _grad_u[_qp] * _grad_test[_i][_qp];\n}\n\nBut here instead of _grad_u, in my weak form, I have divergence of the stress. I have noticed grad.row of potential relevance in InitialConditionTempl.C, but not sure at all. Taking inspiration from ADStressDivergenceTensors, maybe something like that (probably wrong though):\nADReal\nADAnisotropicDiffusion::computeQpResidual()\n{\n  return _lambda[_qp] * _stress[_qp].grad.row(_component) * _grad_test[_i][_qp];\n}\n\nThe other possibility would be to deport the two derivatives onto the test function, but I would rather avoid using higher order elements.\nThanks",
          "url": "https://github.com/idaholab/moose/discussions/20948",
          "updatedAt": "2022-06-16T06:58:22Z",
          "publishedAt": "2022-05-04T18:04:58Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "You need third order spatial derivatives according to the equations you showed. So you can't really avoid using C1 function space. Hermite polynomials is one choice.",
                  "url": "https://github.com/idaholab/moose/discussions/20948#discussioncomment-2689353",
                  "updatedAt": "2022-06-16T06:58:45Z",
                  "publishedAt": "2022-05-04T19:01:41Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Correction: you could still use C0 functions if you use a split formulation, i.e. define some dummy variables to reduce the regularity of the stress divergence term, similar to the split cahn Hilliard equations.",
                          "url": "https://github.com/idaholab/moose/discussions/20948#discussioncomment-2689369",
                          "updatedAt": "2022-06-16T06:58:45Z",
                          "publishedAt": "2022-05-04T19:05:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "Hey Gary, thanks for the prompt reply.\nYep I was thinking of doing the split as for Cahn-Hilliard equations (strategy that I use already on a chemical potential as I'm doing Cahn-Hilliard for another part of the equation). My main concern is how to replace _grad_u[_qp] by the divergence of a tensor.",
                          "url": "https://github.com/idaholab/moose/discussions/20948#discussioncomment-2689556",
                          "updatedAt": "2022-06-16T06:58:45Z",
                          "publishedAt": "2022-05-04T19:42:03Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I wrote down some equations to explain:",
                          "url": "https://github.com/idaholab/moose/discussions/20948#discussioncomment-2690563",
                          "updatedAt": "2022-06-16T06:58:51Z",
                          "publishedAt": "2022-05-05T00:10:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alexguev"
                          },
                          "bodyText": "Noted, thanks! I'll try take it from there.",
                          "url": "https://github.com/idaholab/moose/discussions/20948#discussioncomment-2696748",
                          "updatedAt": "2022-06-16T06:58:56Z",
                          "publishedAt": "2022-05-05T20:35:24Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Error in using MultiAppCopyTransfer",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE Experts,\nI am trying to transfer the data from sub_app (DIM_sub_particle) to main_app (test_2d) using following\n[MultiApps]\n  [full_solve]\n    type = FullSolveMultiApp\n    execute_on = initial\n    positions = '0 0 0'\n    input_files = DIM_sub_particle.i\n    clone_master_mesh = true\n  []\n[]\n\n[Transfers]\n[./from_eta_gb]\n    type = MultiAppCopyTransfer\n    source_variable = eta_gb\n    variable = eta_gb\n    from_multi_app = 'DIM_sub_particle'\n  [../]\n    [./from_eta_pmi]\n    type = MultiAppCopyTransfer\n    source_variable = eta_pmi\n    variable = eta_pmi\n    from_multi_app = 'DIM_sub_particle'\n  [../]\n[]\n\nHowever, I am getting the following error\napplication called MPI_Abort(MPI_COMM_WORLD, 1) - process 1\n\n*** ERROR ***\nUnable to locate object: DIM_sub_particle.\n\nDIM_sub_particle file is there in the same folder. I was using it earlier with older syntax but new syntax its not working.\nPlease let me know if I am doing it right and suggest some solutions.\nBest\nAvtar",
          "url": "https://github.com/idaholab/moose/discussions/20964",
          "updatedAt": "2022-06-17T07:32:46Z",
          "publishedAt": "2022-05-05T19:07:43Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThe name of the sub app is full_solve not DIM_sub_particle\nYou just need to change that in to/from_multiapp in the transfers.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20964#discussioncomment-2696245",
                  "updatedAt": "2022-06-17T07:32:48Z",
                  "publishedAt": "2022-05-05T19:09:37Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Hi @GiudGiud\nThank you very much. Its working now.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20964#discussioncomment-2696317",
                          "updatedAt": "2022-06-17T07:32:55Z",
                          "publishedAt": "2022-05-05T19:20:45Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Converting a non-ADmaterial to an ADmaterial",
          "author": {
            "login": "mahyarmalek"
          },
          "bodyText": "Hello Dear Moose Developers\nI recently have inroduced to this amazing framework nd I'm researching on soil mechanics. I've noticed that there are a lot of plasticity models available in Moose but so many of them do not support the AD properties. Is there anyway to convert those plasticity models into AD? if yes, where can I start? what do I have to change? I wanted to use the crystal plasticity model but since my kernels are all AD and my displacements are coupled with phasefield and pressure and temperature it is impossible for me to use the non AD kernels or materials\nBest,\nMahyar",
          "url": "https://github.com/idaholab/moose/discussions/20926",
          "updatedAt": "2022-06-10T19:22:19Z",
          "publishedAt": "2022-04-30T22:05:01Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can combine AD kernels with non AD kernels, that is not an issue. AD materials and non-AD materials are harder to mix, but you can use this object\nhttps://mooseframework.inl.gov/source/materials/MaterialADConverter.html\nto create the non AD versions.\nOne thing to be careful about though, is that the derivatives may not have been defined in the AD version of a material since they are automatically calculated. In this case, you will have to redefine them yourself.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2669155",
                  "updatedAt": "2022-06-10T19:22:21Z",
                  "publishedAt": "2022-05-01T13:39:04Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "mahyarmalek"
                          },
                          "bodyText": "Thank you for your answer, I'm trying to implement stress divergence which is multiplied by phasefield variable. My phasefield variable is AD variable, but I want to use crystal plasticity which is a non-AD material. So the kernel will be multiplication of a AD variable to a non-AD variable is that ok? Also, there are no examples on how to use the ADMaterialConverter. I completely new to this framework and really dont know how to use this function to convert material type.\nBest,",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2669559",
                          "updatedAt": "2022-06-10T19:22:32Z",
                          "publishedAt": "2022-05-01T15:37:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "There's not really such a thing as an AD variable. AD quantities are quantities that carry their derivative with regards to the nonlinear variables along with them.\nMultiplying AD and non AD quantities is OK as long as:\n\nnumerically, it turns out not to matter to be missing some Jacobian terms.\nOR\nyou make sure the contribution to the Jacobian is correct by implementing the computeQpJacobian routine yourself. This is disabled for ADKernels though. Implementing this could be just as much work as implementing an AD plasticity model.\nWhat kernel are you using? Which plasticity model are you using?\n\nHere's an example of the materialADConverter.\nhttps://github.com/idaholab/moose/blob/8b86c661f83d7d0d6bfd97f78e949e6228c86d3c/test/tests/materials/ad_material/conversion/1d_dirichlet.i",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2670696",
                          "updatedAt": "2022-06-10T19:22:33Z",
                          "publishedAt": "2022-05-01T23:04:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mahyarmalek"
                          },
                          "bodyText": "Thank you for your answer, my kernel is an AD kernel written by myself for calculating the multi-phase linear momentum equation. It has three different stress divergence in it with three different base name. For the stress with the base name \"ice\" im trying to use the crystal plasticity model which is not an AD model.\nThe problem is my linear momentum equation is coupled with phase-filed variable which is also an AD quantity. As far as I understood, when I have a AD kernel with all AD material properties, it is impossbile to use a non-AD material in between with a Newton solver that im using.\nfortunately you mentioned that I can still use a non-AD material and get it to work. I tried to change the material property to a non AD for the ice stress but for some reason crystal plasticity is not accepting the deformation gradients from the ComputeFiniteStrain (I asked this question in another thread). I dont think I can use the tensor mechaincs master class action since it just adds an stress divergence but my stress is multiplied by a phasefield variable which makes it impossible to use master class.\nAlso I've tried to use the materialADConverter, but it gives me error that this object is not a registered object?? not sure what is this....",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2670756",
                          "updatedAt": "2022-07-04T20:56:18Z",
                          "publishedAt": "2022-05-01T23:36:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Thank you for your answer, my kernel is an AD kernel written by myself for calculating the multi-phase linear momentum equation. It has three different stress divergence in it with three different base name. For the stress with the base name \"ice\" im trying to use the crystal plasticity model which is not an AD model.\n\nOk an ADKernel will not let you write in the derivatives manually (well it could but we dont recommend doing it the way it could).\nSo you can either:\n\nwork with converted AD properties (converted to AD using the converter, but missing the derivatives) and miss the derivative terms\nconvert the crystal plasticity model. Which one is that? What is the object name?\n\n\nThe problem is my linear momentum equation is coupled with phase-filed variable which is also an AD quantity. As far as I understood, when I have a AD kernel with all AD material properties, it is impossbile to use a non-AD material in between with a Newton solver that im using.\n\nIt is not impossible. It is just that using regular properties will miss some derivatives, so the Jacobian in the Newton method will not be numerically perfect.\n\nfortunately you mentioned that I can still use a non-AD material and get it to work. I tried to change the material property to a non AD for the ice stress but for some reason crystal plasticity is not accepting the deformation gradients from the ComputeFiniteStrain (I asked this question in another thread). I dont think I can use the tensor mechaincs master class action since it just adds an stress divergence but my stress is multiplied by a phasefield variable which makes it impossible to use master class.\n\nOk makes sense why you cannot use the action.\n\nAlso I've tried to use the materialADConverter, but it gives me error that this object is not a registered object?? not sure what is this....\n\ncan you paste it here? It must be mispelled. This is available in every moose that is less than 6 months old",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2676346",
                          "updatedAt": "2022-07-09T09:52:18Z",
                          "publishedAt": "2022-05-02T20:28:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mahyarmalek"
                          },
                          "bodyText": "can you paste it here? It must be mispelled. This is available in every moose that is less than 6 months old\n\nI noticed my version is old, I added the specific code and compiled and it works.\n\n\nwork with converted AD properties (converted to AD using the converter, but missing the derivatives) and miss the derivative terms\nconvert the crystal plasticity model. Which one is that? What is the object name?\n\nI have tried it with converter and it's not converging, I think it's too nonlinear and if not provided with derivative it cannot converge.\nI am using the CrystalPlasticityKalidindiUpdate within ComputeMultipleCrystalPlasticityStress. I would assume the last solution is to write an AD material property for it but I really have no idea how to start the whole code is very overwhelming and hard to digest for me since i'm both new to framework and C++ . If you had any guidlines on how I can write an AD material code for plasticity and updating the stress it would be really helpful.\nBest,\nMahyar",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2695303",
                          "updatedAt": "2022-07-09T09:52:29Z",
                          "publishedAt": "2022-05-05T16:36:41Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "so to converge a kernel or a material property to AD, in a quick way, not for general use in the framework, just copy paste the file with a different name and replace all instances of Real with ADReal.\nIf you want to contribute to the framework, you ll have to make a template on the AD type. We can help you with that too",
                          "url": "https://github.com/idaholab/moose/discussions/20926#discussioncomment-2696236",
                          "updatedAt": "2022-07-09T09:52:29Z",
                          "publishedAt": "2022-05-05T19:07:01Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to add damping term to a scalar wave equation",
          "author": {
            "login": "aaelmeli"
          },
          "bodyText": "Hi\nI have a scalar wave equation where I need to add a damping term to it. The equation is as follows:\n\nwhere u, is the scalar-valued function (the main variable). \u03bc, \u03b7 are the shear modulus and damping coefficient; respectively.\nSo, essentially it is diffusion term+damping term+ inertial term.\nI could model the undamped system in the form:\n\nBut now, I am not sure how to add the damping term!\nAny ideas on how to model this?",
          "url": "https://github.com/idaholab/moose/discussions/20925",
          "updatedAt": "2022-06-18T06:08:00Z",
          "publishedAt": "2022-04-30T16:00:05Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIs this because you want to model additional physical damping? Or because you want to numerically damp your equations? If the latter, you could try these objects:\nhttps://mooseframework.inl.gov/syntax/Dampers/index.html\nTo get started on physical damping, I would do an integration by parts to remove the outer divergence term. Then you will be using the  gradSlnDot() function on the variable or preferably the coupledGradientDot(<variable_name>) from the Coupleable interface, to declare that term in the constructor of the object. Please let us know if you need help with that.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2669179",
                  "updatedAt": "2022-06-18T06:08:00Z",
                  "publishedAt": "2022-05-01T13:45:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Hello\nIs this because you want to model additional physical damping? Or because you want to numerically damp your equations? If the latter, you could try these objects: https://mooseframework.inl.gov/syntax/Dampers/index.html\nTo get started on physical damping, I would do an integration by parts to remove the outer divergence term. Then you will be using the gradSlnDot() function on the variable or preferably the coupledGradientDot(<variable_name>) from the Coupleable interface, to declare that term in the constructor of the object. Please let us know if you need help with that.\nGuillaume\n\nHi @GiudGiud , Yes, I am trying to add physical damping. Yes, please, I really appreciate your help.",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2669749",
                          "updatedAt": "2022-06-18T06:08:10Z",
                          "publishedAt": "2022-05-01T16:43:16Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Hi @GiudGiud\nSo, I am trying to start from where you suggested. Basically, the following is the InputParameters  and the constructor methods in MatDiffusionBase.h. So, I am adding the zeta  damping parameter as material properties in the parameter method, and _grad_v_dot(coupledGradientDot(\"v\")), in the constructor. Sorry if this looks absolutely wrong, this is my first time implementing on moose, so please correct me. Also, when computing the residual, how best to make it work as the ordinary diffusion kernel and when having the damping term in addition to the diffusion term. Is the way I am implementing the computeQpResidual() correct?\ntemplate <typename T>\nInputParameters\nMatDiffusionBase<T>::validParams()\n{\n  InputParameters params = Kernel::validParams();\n  params.addDeprecatedParam<MaterialPropertyName>(\n      \"D_name\",\n      \"The name of the diffusivity\",\n      \"This parameter has been renamed to 'diffusivity', which is more mnemonic and more conducive \"\n      \"to passing a number literal\");\n  params.addParam<MaterialPropertyName>(\n      \"diffusivity\", \"D\", \"The diffusivity value or material property\");\n  params.addCoupledVar(\"args\",\n                       \"Optional vector of arguments for the diffusivity. If provided and \"\n                       \"diffusivity is a derivative parsed material, Jacobian contributions from \"\n                       \"the diffusivity will be automatically computed\");\n  params.addCoupledVar(\"conc\", \"Deprecated! Use 'v' instead\");\n  params.addCoupledVar(\"v\",\n                       \"Coupled concentration variable for kernel to operate on; if this \"\n                       \"is not specified, the kernel's nonlinear variable will be used as \"\n                       \"usual\");\n                       //Abdo from here\n###   params.addParam<MaterialPropertyName>(\"zeta\",\n                                        0.0,\n                                        \"Name of material property or a constant real \"\n                                        \"number defining the zeta parameter for the \"\n                                        \"stiffness proportional damping.\");                     \n  return params;\n}\n\ntemplate <typename T>\nMatDiffusionBase<T>::MatDiffusionBase(const InputParameters & parameters)\n  : DerivativeMaterialInterface<JvarMapKernelInterface<Kernel>>(parameters),\n    _D(isParamValid(\"D_name\") ? getMaterialProperty<T>(\"D_name\")\n                              : getMaterialProperty<T>(\"diffusivity\")),\n    _dDdc(getMaterialPropertyDerivative<T>(isParamValid(\"D_name\") ? \"D_name\" : \"diffusivity\",\n                                           _var.name())),\n    _dDdarg(_coupled_moose_vars.size()),\n    _is_coupled(isCoupled(\"v\")),\n    _v_var(_is_coupled ? coupled(\"v\") : (isCoupled(\"conc\") ? coupled(\"conc\") : _var.number())),\n    _grad_v(_is_coupled ? coupledGradient(\"v\")\n                        : (isCoupled(\"conc\") ? coupledGradient(\"conc\") : _grad_u)),\n                        //Abdo from here\n   ###  _grad_v_dot(coupledGradientDot(\"v\")),\n   ### _zeta(getMaterialProperty<Real>(\"zeta\"))\n{\n  // deprecated variable parameter conc\n  if (isCoupled(\"conc\"))\n    mooseDeprecated(\"In '\", name(), \"' the parameter 'conc' is deprecated, please use 'v' instead\");\n\n  // fetch derivatives\n  for (unsigned int i = 0; i < _dDdarg.size(); ++i)\n    _dDdarg[i] = &getMaterialPropertyDerivative<T>(\n        isParamValid(\"D_name\") ? \"D_name\" : \"diffusivity\", _coupled_moose_vars[i]->name());\n}\n\ntemplate <typename T>\nReal\nMatDiffusionBase<T>::computeQpResidual()\n{\n    Real residual = 0.0;\n  if (_static_initialization && _t == _dt)\n  {\n    residual +=\n              _D[_qp] * _grad_v[_qp] * _grad_test[_i][_qp];\n  }\n   else if (_dt > 0)\n  {\n  residual +=\n            _zeta[_qp] * _D[_qp] *_grad_test[_i][_qp] * _grad_v_dot[_qp];\n  }\n  return residual;\n}",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670573",
                          "updatedAt": "2022-06-18T06:08:11Z",
                          "publishedAt": "2022-05-01T22:06:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The lines added to the constructor seem fine.\nDid you add the new class members in the header ?\n  const MaterialProperty<Real> & _zeta;\n  const VariableGradient & _grad_v_dot;",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670675",
                          "updatedAt": "2022-06-18T06:09:50Z",
                          "publishedAt": "2022-05-01T22:54:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You are trying to merge the damping and the diffusion kernels right? Like use one kernel for both terms in the equation?",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670677",
                          "updatedAt": "2022-06-18T06:09:56Z",
                          "publishedAt": "2022-05-01T22:55:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "const MaterialProperty & _zeta;\nconst VariableGradient & _grad_v_dot;\n\nThanks for noting this, I just added them.\n\nYou are trying to merge the damping and the diffusion kernels right? Like use one kernel for both terms in the equation?\n\nExactly. Do you think this is better or you prefer having a separate kernel?",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670686",
                          "updatedAt": "2022-06-18T06:09:55Z",
                          "publishedAt": "2022-05-01T22:58:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Either way is OK. It's preferred to have a separate kernel if you foresee having to turn it on/off for debugging / prototyping for example.\nDoes it compile now?\nWhere did you find this btw?\n  if (_static_initialization && _t == _dt)\n\nif start_time is below 0 that may never trigger for example.",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670701",
                          "updatedAt": "2022-06-18T06:09:55Z",
                          "publishedAt": "2022-05-01T23:08:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "Either way is OK. It's preferred to have a separate kernel if you foresee having to turn it on/off for debugging / prototyping for example.\nDoes it compile now?\n\nI am still trying to figure out how to implement the computeQpJacobian(), computeQpOffDiagJacobian(unsigned int jvar) and computeQpCJacobian()\n\nWhere did you find this btw?\n  if (_static_initialization && _t == _dt)\n\n\nI borrowed it from DynamicStressDivergenceTensors.C in the definition of the computeQpResidual()\n\nif start_time is below 0 that may never trigger for example.\n\nI was thinking that way because I wanted something to switch on/off the damping term in the diffusion kernel.",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2670737",
                          "updatedAt": "2022-06-18T06:09:56Z",
                          "publishedAt": "2022-05-01T23:21:07Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Once you have implemented that you can use the jacobian analyzer to make sure it's correct\nhttps://mooseframework.inl.gov/help/development/analyze_jacobian.html\nI'd use a boolean parameter to turn it on/off (if keeping in the same kernel).",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2674091",
                          "updatedAt": "2022-06-18T06:09:56Z",
                          "publishedAt": "2022-05-02T14:27:55Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "aaelmeli"
                          },
                          "bodyText": "So, I had the following computeQpJacobian() modified so that it includes the damping term (utilizing a boolean parameter to switch it on/off). The jacobian term associated with the additional damping term should consists of 3 more terms to be added to the computeQpJacobian(), as shown.\ntemplate <typename T>\nReal\nMatDiffusionBase<T>::computeQpJacobian()\n{\n  Real sum = _phi[_j][_qp] * _dDdc[_qp] * _grad_v[_qp] * _grad_test[_i][_qp];\n\n  if (_add_stiffness_damping_term)\n  {\n    sum += _dzetadc[_qp] * _D[_qp] * _grad_test[_i][_qp] * _grad_v_dot[_qp]\n        +  _zeta[_qp] * _dDdc[_qp] * _grad_test[_i][_qp] * _grad_v_dot[_qp]\n        +  _zeta[_qp] * _D[_qp] * _grad_test[_i][_qp] *  _grad_phi[_j][_qp];\n  }\n\n  if (!_is_coupled)\n    sum += computeQpCJacobian();\n\n  return sum;\n}\n\nHowever, there is something that I do not understand, suppose we do not have any damping (i.e the original diffusion kernel), the jacobian term associated with the diffusion term would consist of the two terms,\n\none of them I can see is implemented in the computeQpJacobian(), and the other term, for some reason which I do not understand, is implemented in computeQpCJacobian(), which is apparently used when having a coupled variable. So, if you could help me fix this confusion in my understanding that would be really helpful.\nHere is the other two computQp**Jacobian() methods for your reference.\ntemplate <typename T>\nReal\nMatDiffusionBase<T>::computeQpOffDiagJacobian(unsigned int jvar)\n{\n  // get the coupled variable jvar is referring to\n  const unsigned int cvar = mapJvarToCvar(jvar);\n\n  Real sum = (*_dDdarg[cvar])[_qp] * _phi[_j][_qp] * _grad_v[_qp] * _grad_test[_i][_qp];\n  if (_v_var == jvar)\n    sum += computeQpCJacobian();\n\n  return sum;\n}\n\ntemplate <typename T>\nReal\nMatDiffusionBase<T>::computeQpCJacobian()\n{\n  return _D[_qp] * _grad_phi[_j][_qp] * _grad_test[_i][_qp];\n}",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2675611",
                          "updatedAt": "2022-06-18T06:09:56Z",
                          "publishedAt": "2022-05-02T18:16:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I think the idea here is if the diffused variable is NOT the variable of the equation.\nSay you are solving for variable c and have a variable d in your equation\nlaplacian c + laplacian(d) + dc/dt = 0\nthen you use the coupled variable feature, and you have an off-diagonal term since the 'diagonal' is by definition terms for the same variable as the equation",
                          "url": "https://github.com/idaholab/moose/discussions/20925#discussioncomment-2675721",
                          "updatedAt": "2022-06-18T06:09:57Z",
                          "publishedAt": "2022-05-02T18:36:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Disabling print on Console",
          "author": {
            "login": "youareit125"
          },
          "bodyText": "Hi everyone,\nI have been working on this code and have gotten to the point where everything works.\nThus, is there a way to disable printing ability on console? I have disabled the residual but still prints the timesteps, time, steady-state norm. I still would like to save the output at the end step.\nThank you!\n[Debug]\nshow_var_residual_norms = false\n[]\n\n[Executioner]\ntype = Transient\nautomatic_scaling = true\nend_time = 1.0e-3\nsolve_type = 'LINEAR'\ndtmin = 1.0e-20\ndtmax = 1.0e-6\nsteady_state_detection = true\nsteady_state_tolerance = 1e-30\nnl_abs_tol = 1.0e-50\n[TimeStepper]\ntype = IterationAdaptiveDT\ngrowth_factor = 1.005\ndt = 1.0e-12\n[]\n[]\n\n[Preconditioning]\n[smp]\ntype = SMP\nfull = true\n[]\n[]\n\n[Outputs]\n[hope_this_works]\ntype = Console\noutlier_variable_norms = false\nexecute_scalars_on = none\nclear_after_output = true\n[]\n[out]\ntype = CSV\nexecute_on = 'FINAL'\nshow = '{species}'\n[]\n[]",
          "url": "https://github.com/idaholab/moose/discussions/20752",
          "updatedAt": "2022-06-21T01:23:03Z",
          "publishedAt": "2022-04-08T22:14:18Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou're on the right track with the [hope_this_works] console block. You should just execute it on FINAL or on TIMESTEP_END.\nNote that you can disable a lot of printing with these 3 options in [Outputs]:\n  print_linear_converged_reason = false\n  print_linear_residuals = false\n  print_nonlinear_converged_reason = false\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20752#discussioncomment-2533841",
                  "updatedAt": "2022-06-21T01:23:15Z",
                  "publishedAt": "2022-04-08T22:26:01Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "youareit125"
                          },
                          "bodyText": "Thank you very much. I have them in my [hope_this_works] block. I have managed to remove some stuff on console. Is there a way to hide or not print time steps, time, dt or solve convergence?",
                          "url": "https://github.com/idaholab/moose/discussions/20752#discussioncomment-2689953",
                          "updatedAt": "2022-06-21T01:23:23Z",
                          "publishedAt": "2022-05-04T20:58:52Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Not that I know of currently. There's planned changes in the future for setting a verbosity level, we'll make sure to have options to hit all these.",
                          "url": "https://github.com/idaholab/moose/discussions/20752#discussioncomment-2690149",
                          "updatedAt": "2022-06-21T01:23:23Z",
                          "publishedAt": "2022-05-04T21:42:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "youareit125"
                          },
                          "bodyText": "Thank you very much!",
                          "url": "https://github.com/idaholab/moose/discussions/20752#discussioncomment-2690307",
                          "updatedAt": "2022-06-21T01:23:27Z",
                          "publishedAt": "2022-05-04T22:29:43Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "How to read nodeset from the file?",
          "author": {
            "login": "avtarsinghh1991"
          },
          "bodyText": "Hello MOOSE Experts\nI want to know if there is any way to read the NODESETS from the file different from the mesh input file.\nLets say I have 4 files, for which I want to generate 4 NODESETS means each nodeset for each file.\nAny suggestions?\nThanks in advance.\nBest\nAvtar",
          "url": "https://github.com/idaholab/moose/discussions/20939",
          "updatedAt": "2022-06-15T14:11:54Z",
          "publishedAt": "2022-05-03T13:50:00Z",
          "category": {
            "name": "Q&A Meshing"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou can read 4 mesh files and then stitch them or just combine them if they are separate.\nYou cant read most of the mesh from one file and the nodesets from another currently.\nBut you could also implement a mesh generator that does that, it's not very hard.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2681207",
                  "updatedAt": "2022-06-15T14:11:53Z",
                  "publishedAt": "2022-05-03T15:35:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Thanks. I tried to generate the ExtraNodesetGenerator by giving the node numbers but its nor working properly as nodes and element renumbering occurs. I tried allow_renumbering = false but still its not working.\nAny suggestions?",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2683021",
                          "updatedAt": "2022-06-15T14:12:04Z",
                          "publishedAt": "2022-05-03T20:55:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no that should work\nwhat kind of simulation are you doing? distributed? split mesh? renumbering only happens on selective occasions",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2683066",
                          "updatedAt": "2022-06-15T14:12:05Z",
                          "publishedAt": "2022-05-03T21:05:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "how did you get the node numbers? From the exodus file?",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2683282",
                          "updatedAt": "2022-06-15T14:12:07Z",
                          "publishedAt": "2022-05-03T21:46:36Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Thanks. Its a structured mesh contains multiple grains. I wrote the .msh file using matlab subroutine. And from the matlab subroutine itself I got to know the node numbers for nodesets.\nPlease find the attached mesh file (.msh) and the moose input file of mesh (.i)\nFile.zip\n.",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2688011",
                          "updatedAt": "2022-06-18T18:46:04Z",
                          "publishedAt": "2022-05-04T15:29:39Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "then why dont you include the nodesets in the .msh file?",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2688772",
                          "updatedAt": "2022-06-18T18:46:04Z",
                          "publishedAt": "2022-05-04T17:16:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "Thanks Guillaume.\nYes, I can do that. I only thing is that I am still figuring out the syntax to add the nodesets in .msh file. However, thanks for your suggestions.\nBest\nAvtar",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2688908",
                          "updatedAt": "2022-06-18T18:46:04Z",
                          "publishedAt": "2022-05-04T17:37:23Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Sounds good. If you find it easier to add a side set in gmsh you can have moose convert a side set to a node set. But I suspect node set is easier in gmsh",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2689059",
                          "updatedAt": "2022-06-18T18:46:14Z",
                          "publishedAt": "2022-05-04T18:03:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "avtarsinghh1991"
                          },
                          "bodyText": "@GiudGiud\nCan I provide two files i.e., .msh and .geo to MOOSE for mesh data and nodeset data?",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2689124",
                          "updatedAt": "2022-06-18T18:46:16Z",
                          "publishedAt": "2022-05-04T18:13:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not for the same parts of the domain currently.",
                          "url": "https://github.com/idaholab/moose/discussions/20939#discussioncomment-2690176",
                          "updatedAt": "2022-06-18T18:46:20Z",
                          "publishedAt": "2022-05-04T21:48:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Example of dendritic crystal growth",
          "author": {
            "login": "KangChenRui"
          },
          "bodyText": "Hi, everyone.\nI want to reproduce snowflake growth using 2 order parameters\uff0clike op = eta1, op = eta2,\nthe kenerl is ACInterfaceKobayashi1, ACInterfaceKobayashi2 and InterfaceOrientationMaterial.\nBut it  doesn't work\uff1a\n*** ERROR ***\nThe following material properties are declared on block 0 by multiple materials:\nMaterial Property             Material Objects\nddepsdgrad_op                 material material_2\ndeps                          material material_2\ndepsdgrad_op                  material material_2\neps                           material material_2\nHope to get your help.\nKang C R",
          "url": "https://github.com/idaholab/moose/discussions/20882",
          "updatedAt": "2022-06-09T07:39:04Z",
          "publishedAt": "2022-04-27T01:04:22Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Please see #20886",
                  "url": "https://github.com/idaholab/moose/discussions/20882#discussioncomment-2689602",
                  "updatedAt": "2022-06-09T07:39:10Z",
                  "publishedAt": "2022-05-04T19:49:43Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "A problem about MOOSE mesh reading",
          "author": {
            "login": "js-jixu"
          },
          "bodyText": "Hi, everyone.\nI've use gmsh to generate a mesh file for input file, but MOOSE has problem in reading sidesets. The error report screenshot is here.\n\nWhen I use \"--mesh-only\" command to check the mesh file used by input file, it seems that the sidesets are provided. The check screenshots are provided here.\n\n\nI don't know why MOOSE has identified the sidesets but failed to read them. The MOOSE input file named framework.i, gmsh geometry file named model_geo and mesh file named model are attached, they are all txt files and can be used by modified extension name. The group constants file is also attached.\nframework.txt\nmodel_geo.txt\nmodel.txt\ngroup_constants.zip",
          "url": "https://github.com/idaholab/moose/discussions/20924",
          "updatedAt": "2022-06-15T14:11:40Z",
          "publishedAt": "2022-04-30T06:57:18Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "js-jixu"
                  },
                  "bodyText": "The problem is the commas in BCs block in line 152 and 163. I have to remove the commas.",
                  "url": "https://github.com/idaholab/moose/discussions/20924#discussioncomment-2684054",
                  "updatedAt": "2022-06-15T14:11:44Z",
                  "publishedAt": "2022-05-04T02:24:10Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Glad you found the problem",
                          "url": "https://github.com/idaholab/moose/discussions/20924#discussioncomment-2684299",
                          "updatedAt": "2022-06-15T14:11:47Z",
                          "publishedAt": "2022-05-04T04:09:32Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Apply BC only to nodes in contact",
          "author": {
            "login": "Flolaffel"
          },
          "bodyText": "Hello,\nI'd like to apply a BC only to nodes that are currently in contact. Is there a way to do this in MOOSE?",
          "url": "https://github.com/idaholab/moose/discussions/20931",
          "updatedAt": "2022-06-02T06:47:43Z",
          "publishedAt": "2022-05-02T11:09:13Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "So boundary conditions on nodes that are in between two blocks? Internal to the mesh?",
                  "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2674093",
                  "updatedAt": "2022-06-02T06:47:43Z",
                  "publishedAt": "2022-05-02T14:28:29Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "BCs only on nodes from one block that are currently in contact. See my description for @dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2674342",
                          "updatedAt": "2022-06-02T06:47:43Z",
                          "publishedAt": "2022-05-02T15:03:17Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "dschwen"
                  },
                  "bodyText": "Can you elaborate on what physics you are trying to model? We have something like this in mortar based pressure dependent gap heat conduction.",
                  "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2674135",
                  "updatedAt": "2022-06-02T06:48:08Z",
                  "publishedAt": "2022-05-02T14:32:54Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "Of course. I'm doing a tensor mechanics, contact, porous flow simulation. My goal is to indent a porous medium from the top so fluid is squeezed out. At the same time the top surface is the only unconfined surface, so I'm applying a BC there so the porepressure is 0 and there can be outflow. But I want to restrict the outflow at the contact area because fluid wouldn't be able to flow out where contact is established. So I was wondering if MOOSE defines a nodeset that contains the nodes in contact which I could to use to prohibit outflow on these specific nodes.",
                          "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2674319",
                          "updatedAt": "2022-06-02T06:49:54Z",
                          "publishedAt": "2022-05-02T14:59:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "recuero"
                          },
                          "bodyText": "You can define a nodeset or sideset and then probably add a tailored mortar constraint that would do what you want. It doesn't sound like your variable is temperature, so the object may look slightly different from what we already have in MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2677077",
                          "updatedAt": "2022-06-02T06:49:56Z",
                          "publishedAt": "2022-05-02T23:33:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Flolaffel"
                          },
                          "bodyText": "The variable would be the porepressure and it should be 0 on the free surface but unrestricted where contact is established. I just noticed that would mean I'd have to set my BC only on the nodes NOT in contact, not like I formulated my question initially.\nI will look into the mortar heat conductance.",
                          "url": "https://github.com/idaholab/moose/discussions/20931#discussioncomment-2679342",
                          "updatedAt": "2022-06-02T06:49:56Z",
                          "publishedAt": "2022-05-03T10:32:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}