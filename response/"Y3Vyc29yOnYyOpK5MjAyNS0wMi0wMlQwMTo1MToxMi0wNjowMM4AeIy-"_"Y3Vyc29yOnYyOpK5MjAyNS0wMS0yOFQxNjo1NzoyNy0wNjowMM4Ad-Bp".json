{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyNS0wMS0yOFQxNjo1NzoyNy0wNjowMM4Ad-Bp"
    },
    "edges": [
      {
        "node": {
          "title": "material property for each element",
          "author": {
            "login": "sskalati"
          },
          "bodyText": "Dear MOOSE Community,\nI am trying to run a simulation using ComputeLinearElasticPhaseFieldFractureStress with a custom degradation function defined as:\nexpression = '((1.0-c)^2)/((1.0-c)^2+a1c(1-0.5*c))'\nwhere a1 is an element-wise property that varies for each element. I provide these values as input to MOOSE, expecting the software to compute the degradation function dynamically based on the elemental data. However, it does not seem to work as intended.\nCould you please guide me on how to properly implement this functionality? Are there any specific settings or methods required to ensure that MOOSE correctly utilizes the element-wise values of a1 in the degradation function?\nI have attached the a1 values and the MOOSE script related to a1 values as well.\nAny help or suggestions would be greatly appreciated!\n[UserObjects]\n    [a1_read]\n        type = PropertyReadFile\n        prop_file_name = 'a1_values.csv'\n        nprop = 1\n        read_type = element\n    []\n[]\n\n\n[Functions]\n    [a1_fun]\n        type = PiecewiseConstantFromCSV\n        read_prop_user_object = 'a1_read'\n        read_type = 'element'\n        column_number = '0'\n    []\n[]\n\n[Materials]\n    [./a1]\n        type = GenericFunctionMaterial\n        prop_names = a1\n        prop_values = a1_fun\n    [../]    \n\n    [./degradation]\n        type = DerivativeParsedMaterial\n        property_name = degradation\n        coupled_variables = 'c'\n        material_property_names = 'a1'\n        expression = '((1.0-c)^2)/((1.0-c)^2+a1*c*(1-0.5*c))'\n        derivative_order = 2\n    [../]\n[]\n\na1_values.csv",
          "url": "https://github.com/idaholab/moose/discussions/29759",
          "updatedAt": "2025-02-01T16:10:40Z",
          "publishedAt": "2025-01-29T11:34:42Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\ncan you paste your Mesh block? To save me a minute.\nThis setup looks fine, we just need to check that a1 loads as expected",
                  "url": "https://github.com/idaholab/moose/discussions/29759#discussioncomment-11996883",
                  "updatedAt": "2025-01-29T15:21:52Z",
                  "publishedAt": "2025-01-29T15:21:51Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "sskalati"
                          },
                          "bodyText": "[Mesh]\n[gmsh]\ntype = GeneratedMeshGenerator\ndim = 2\nxmax = 4.1e-3\nymax = 4.1e-3\nnx = 126\nny = 126\nelem_type = QUAD4\n[]\n[xaxis]\n    type = BoundingBoxNodeSetGenerator\n    new_boundary = xaxis\n    bottom_left = '0 2.05e-3 0'\n    top_right = '4.1e-3 2.05e-3 0'\n    input = gmsh\n[]\n\n[yaxis]\n    type = BoundingBoxNodeSetGenerator\n    new_boundary = yaxis\n    bottom_left = '2.05e-3 0 0'\n    top_right = '2.05e-3 4.1e-3 0'\n    input = xaxis\n[]\n\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/29759#discussioncomment-12023937",
                          "updatedAt": "2025-02-01T04:06:34Z",
                          "publishedAt": "2025-02-01T04:06:33Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "does a1 seem properly loaded?\n\nwith c = x + y\nI get this for degradation. it does seem to work?",
                  "url": "https://github.com/idaholab/moose/discussions/29759#discussioncomment-12026906",
                  "updatedAt": "2025-02-01T16:10:40Z",
                  "publishedAt": "2025-02-01T16:10:40Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Pecock Use With New Install",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "After updating to the latest version of MOOSE and installing PEACOCK I have found that running PEACOCK from other app folders terminals results in the PEACOCK program starting up but graying out the ability to load the .i files. I can however run the .i files if I start the program from the MOOSE folder. What do I need to do to have PEACOCK function from all MOOSE app folders?",
          "url": "https://github.com/idaholab/moose/discussions/29783",
          "updatedAt": "2025-01-31T22:56:49Z",
          "publishedAt": "2025-01-31T22:25:48Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nCould be a permissions issue.\nIs this on mac? Where is the other folder?\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/29783#discussioncomment-12022740",
                  "updatedAt": "2025-01-31T22:35:56Z",
                  "publishedAt": "2025-01-31T22:35:55Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "Newest version of Ubuntu. Located in a sub folder of my /Home/projects folder with the MOOSE folder.",
                          "url": "https://github.com/idaholab/moose/discussions/29783#discussioncomment-12022768",
                          "updatedAt": "2025-01-31T22:38:19Z",
                          "publishedAt": "2025-01-31T22:38:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not sure then.\ncheck the permissions of the file? You can change them using chmod\nyou could try to sudo peacock though that should not be required.",
                          "url": "https://github.com/idaholab/moose/discussions/29783#discussioncomment-12022803",
                          "updatedAt": "2025-01-31T22:44:40Z",
                          "publishedAt": "2025-01-31T22:44:40Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "You are probably correct. I was just opening a .i file to view it in the text editor, and it had me input my password to access the file.",
                          "url": "https://github.com/idaholab/moose/discussions/29783#discussioncomment-12022813",
                          "updatedAt": "2025-01-31T22:46:50Z",
                          "publishedAt": "2025-01-31T22:46:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "alright then use chmod +rw to fix the permissions",
                          "url": "https://github.com/idaholab/moose/discussions/29783#discussioncomment-12022866",
                          "updatedAt": "2025-01-31T22:56:50Z",
                          "publishedAt": "2025-01-31T22:56:49Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Crystal Plasticity Kernel with backstress",
          "author": {
            "login": "Emmanuel-324"
          },
          "bodyText": "Hello, I noticed the constitutive model used in the crystal plasticity class has no backstress incorporated in it. Is there any of the models to simulate cyclic loading using the CP model that accounts for backstress?\n@sapitts @dschwen",
          "url": "https://github.com/idaholab/moose/discussions/28800",
          "updatedAt": "2025-01-31T22:56:12Z",
          "publishedAt": "2024-10-07T20:13:58Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "sapitts"
                  },
                  "bodyText": "There is not a class with backstress included in the current repository",
                  "url": "https://github.com/idaholab/moose/discussions/28800#discussioncomment-10885128",
                  "updatedAt": "2024-10-08T20:46:36Z",
                  "publishedAt": "2024-10-08T20:46:35Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Emmanuel-324"
                          },
                          "bodyText": "Is there going to be one in the future?",
                          "url": "https://github.com/idaholab/moose/discussions/28800#discussioncomment-11868837",
                          "updatedAt": "2025-01-17T16:04:38Z",
                          "publishedAt": "2025-01-17T16:04:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "sapitts"
                          },
                          "bodyText": "I do not believe we currently have support to implement such as class. We do take pull requests if you would like to implement such a model :-)",
                          "url": "https://github.com/idaholab/moose/discussions/28800#discussioncomment-12022861",
                          "updatedAt": "2025-01-31T22:56:23Z",
                          "publishedAt": "2025-01-31T22:56:12Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Combine components module with sets of .msh files for NS simulation",
          "author": {
            "login": "oh304"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A Navier Stokes is the most appropriate category for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (avoid screenshots if possible, triple back quotes before/after pasted text, etc)\n\nQuestion\nHi there,\nI have had a brief look around but can't find anything on this to use, so I will ask here! :)\nI am trying to run a simulation where i have a set of components as defined in an input file (also not using SAM as based in UK). I would like the components to connect a set of geometries that I have exported as .msh files.\nFor example, a fluid would flow along a FlowChannel1Phase component into a heat exchanger, simulated by the HeatStructureCylindrical component. This would be the interface with a GMSH produced geometry (tank of water, .msh file), which would uptake heat then transfer said heat to another heat exchanger which is connected to another component, to be similarly fed to another tank, etc etc.\nPlease let me know if there is something out there which has done something similar, utilizing different geometries etc.",
          "url": "https://github.com/idaholab/moose/discussions/29659",
          "updatedAt": "2025-01-31T16:14:18Z",
          "publishedAt": "2025-01-08T10:02:11Z",
          "category": {
            "name": "Q&A Modules: Navier-Stokes"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis is the kind of things we do using the Components system in the thermal hydraulics module.\nIf you have a component that has a geometry which is only meshed externally, you will want to use a FileMeshComponent for it.\nAlternatively, it is often viable to use a MultiApp for these component simulations and use the HeatTransfer / Structure components which interface with multi apps",
                  "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11771576",
                  "updatedAt": "2025-01-08T10:10:38Z",
                  "publishedAt": "2025-01-08T10:10:38Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Thanks for the reply. I'll have a look.",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11784728",
                          "updatedAt": "2025-01-09T11:27:53Z",
                          "publishedAt": "2025-01-09T10:06:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "hi @oh304\nI briefly saw your reply so I ll give more information\n\nAre there any examples anywhere of instead combining GeneratedMeshGenerator geometries with Components, and running NS on the meshes?\n\nNo we dont support using MeshGenerators and Components at the moment. We do support using the mesh generators to create files, then loading them using a FileMeshComponent. Then kernels and BCs can be added to their mesh.\nAlternatively, the FileMeshPhysicsComponent can be used in combination with a Physics (which is just a bunch of kernels, bcs, materials etc)\n\nI started building up this file (just a line, and a box) and get a segmentation fault for some reason.\n\nAh we should have a clean error for this. I ll push a patch. Thank you for reporting",
                  "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11787106",
                  "updatedAt": "2025-01-09T14:12:44Z",
                  "publishedAt": "2025-01-09T14:12:42Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Hi @GiudGiud thanks for this. I have gone ahead with loading FileMeshComponents, and building a straight pipe travelling through a meshed block, ideally transferring heat through the HeatTransferFromHeatStructure1Phase.\nUnfortunately, as the meshed block is not  a flow channel I can't seem to integrate heat transfer from the pipe to this. Would you know if there is a work around to this?\nI have attached the location of the input file if you are interested to look, no stress though!\nhttps://github.com/oh304/moose_sandbox\nBest wishes,\nOscar",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11797209",
                          "updatedAt": "2025-01-10T11:48:46Z",
                          "publishedAt": "2025-01-10T11:48:44Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Unfortunately, as the meshed block is not a flow channel I can't seem to integrate heat transfer from the pipe to this. Would you know if there is a work around to this?\n\nYou wont be able to use a HeatTransfer component if the pipe is not a FlowChannel1Phase component.\nHowever, this meshed component is closer to a regular MOOSE simulation. You can set up a heat source, volumetric or surface, using kernels or boundary conditions to model the heat transfer",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11797734",
                          "updatedAt": "2025-01-10T12:44:11Z",
                          "publishedAt": "2025-01-10T12:44:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Thank you @GiudGiud. After some persisting, I have begun creating a block with a boundary condition on one of the walls, to simulate a heat exchanger. I know the total energy I need deposited to the water per second, but I'm struggling a bit to wrap my head around the 2D nature of the simulation.\nThe heat I want to apply represents the total power that would be applied to a 5x5x15m block, but in the simulation there is no extrusion and it is 5x5m.\nIn this case, would I change the power applied in this expression:\n[flux_expression]\n    type = ParsedFunction\n    symbol_names = 'V P0 t0 W L'\n    symbol_values = '${vol} ${power} ${initial_time} ${width} ${length}'\n    expression = 'if(t < 1e-9, 0, 0.0622 * P0 * (t^(-0.2) - (t0 + t)^(-0.2)))'\n[]\n\nI guess what I'm asking is, is there any normalization needed? Sorry I know this is a very simple question, just driving me nuts for some reason.\nThanks,",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11830714",
                          "updatedAt": "2025-01-14T11:36:18Z",
                          "publishedAt": "2025-01-14T11:36:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nin the real 3D system, you would apply a local heating density of P0 / volume(=5x5x15)\nHere you have to apply to apply P0 / surface(=5x5) if you want to impose the exchange on whole 2D surface.\nIf you want to have the heat exchange be done on the 1D side of the 2D surface, you need to use a Neumann BC with the heat exchange / length (=5)\nas you expect, the right normalization is always the one that comes out to the expected amount once integrated using the relevant postprocessor",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11831835",
                          "updatedAt": "2025-01-14T13:41:33Z",
                          "publishedAt": "2025-01-14T13:41:32Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Thanks for that @GiudGiud. I have implemented a function here, divided by length.\nI was also curious how to create continuity across physically separated boundaries. On the left small block below, I want the rightmost boundary (which is steel) to be linked directly to the left sides of the second two blocks (ie two interfaces, both sharing the same boundary for the left block). The material IDs are the same (steel), and I'm struggling to figure what FVIK/BC to use. I have tried using FVConvectionCorrelationInterface but just get a segmentation fault. Would you know if there is any work around for this?",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11845381",
                          "updatedAt": "2025-01-15T16:47:10Z",
                          "publishedAt": "2025-01-15T16:47:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I was also curious how to create continuity across physically separated boundaries. On the left small block below, I want the\n\nSo there are two options:\n\nyou can create some sort of mapping between the two surfaces, then the functor system will work as long as you call functors with the element arguments for where it is defined (that's where the mapping comes through, on boundary i, you call the functor with elem_on_j mapped from elem_from_i)",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11849238",
                          "updatedAt": "2025-01-16T01:10:36Z",
                          "publishedAt": "2025-01-16T01:10:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "or you look at our mortar implementation. That's something I am less familiar with, but a general way of addressing non-contiguous/conformal meshes",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11849244",
                          "updatedAt": "2025-01-16T01:11:08Z",
                          "publishedAt": "2025-01-16T01:11:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "last idea, user objects can be used to \"store\" the values you care about and also handle the mapping from one surface to the other. You can look at the nearest / layered / ... average/integral user objects. They do these averaging/integrands operations on variables, then one can just request the value by passing a position",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11849312",
                          "updatedAt": "2025-01-16T01:21:11Z",
                          "publishedAt": "2025-01-16T01:21:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "That's perfect thank you. I have ended up using FVFunctorConvectiveHeatFluxBC for now, referencing temperatures for T_bulk & T_solid. When I have time to refine, I will use one of your recommendations, the mortar one looks promising.\nHopefully this is the last (if not one of the last) questions I have:\nIf I want to rotate the orientation of my simulation by 30 degrees, is the FVBodyForce the best option to use? A force could be applied to the x & y velocity terms. My only concern is, it is the direction of the gravity vector that I want changed (by 40 degrees!).\nBest wishes,",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11856237",
                          "updatedAt": "2025-01-16T15:24:46Z",
                          "publishedAt": "2025-01-16T15:24:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "FVBodyForce the best option to use?\n\nIt's alright as long as you are not using the NSFV RC corrections for body forces. If you are then you need to use INSFVMOmentumGravity\n\nMy only concern is, it is the direction of the gravity vector that I want changed (by 40 degrees!).\n\nyou can apply that transformation to the gravity vector OR\nyou can use a TransformGenerator to rotate your mesh, and keep the gravity vector unchanged",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11857797",
                          "updatedAt": "2025-01-16T17:52:40Z",
                          "publishedAt": "2025-01-16T17:52:39Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "oh304"
                  },
                  "bodyText": "I have used the following:\n[decay_heat_pp]\n    type = FunctionValuePostprocessor\n    function = pdhrt_in_flux\n    execute_on = 'INITIAL TIMESTEP_END'\n[]\n    [flux_integral_pp]\n    type = FunctionSideIntegral\n    function = pdhrt_in_flux\n    boundary = 'HX_top'\n[]\n\nThe first one equates to 1.4965e4\nSecond equates to 8.9795e4\nOut by exactly a factor of 6..!",
                  "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11972760",
                  "updatedAt": "2025-01-27T17:25:47Z",
                  "publishedAt": "2025-01-27T17:25:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "interesting. And you are not using RZ coordinates right?\nand you expect the balance to be shown from the first time step / immediately? (or is this a converged steady state result)\nWhat do you get for the area of that line?\nhttps://mooseframework.inl.gov/source/postprocessors/AreaPostprocessor.html",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11972989",
                          "updatedAt": "2025-01-27T17:50:46Z",
                          "publishedAt": "2025-01-27T17:50:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Ah interesting, I am not using RZ coordinates.\nAlso for the area of the line I get 6, whereas the boundary is 3 long...\nI think that may have done it...\nMy function is now, normalized through dividing by the boundary length (3), and the effective extrusion in the z plane (2/14.8).\nexpression = 'if(t < 1e-9, 0, 0.0622 * P0 * 2/(3 * 14.8) * (t^(-0.2)))'\nThe temperature heat up seems to match the integral of the non-normalized DHR..! Thank you! :)\nDo you know why MOOSE has extruded it by 2m? Funny stuff.",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11981882",
                          "updatedAt": "2025-01-28T15:58:17Z",
                          "publishedAt": "2025-01-28T09:21:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "not sure why it would have done that.\nIs the sideset between two blocks by any chance? If the sideset contained sides pointing to 1st block, and sides pointing to second block (sidesets are oriented) it would explain this",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11986417",
                          "updatedAt": "2025-01-28T16:40:19Z",
                          "publishedAt": "2025-01-28T16:40:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Ah yes that would make sense... the boundary interfaces two blocks, a bit of steel and then water on the other side!\nCheers",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11986602",
                          "updatedAt": "2025-01-28T16:55:53Z",
                          "publishedAt": "2025-01-28T16:55:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you can use SidesetsBetweenSubdomainGenerator to re-generate this boundary\nalso I am curious, does it trigger the mesh diagnostics check?\nhttps://mooseframework.inl.gov/source/meshgenerators/MeshDiagnosticsGenerator.html",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11986727",
                          "updatedAt": "2025-01-28T17:10:12Z",
                          "publishedAt": "2025-01-28T17:10:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Ah great thanks for that. I put in this diagnostic and it did come up as problematic! Thankfully solved now! :)",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-11996997",
                          "updatedAt": "2025-01-29T15:32:18Z",
                          "publishedAt": "2025-01-29T15:32:17Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "Funny, I did add the SidesetsBetweenSubdomainGenerator which did (and didn't!) do a few things:\nThe area of the boundary changed from 6 to 3.\nThe FunctionSideIntegral to FunctionValuePostprocessor ratio for the flux function has decreased from 6 to 3 as expected.\nHowever the heat-up of the water does not change as I thought it would- that is, I need to keep the factor of 2 in the flux expression to keep the expected and computed results balanced.\nWould you have any further idea why this is?",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-12004909",
                          "updatedAt": "2025-01-30T09:56:46Z",
                          "publishedAt": "2025-01-30T09:56:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The area of the boundary changed from 6 to 3.\n\ngood.\n\nHowever the heat-up of the water does not change as I thought it would- that is, I need to keep the factor of 2 in the flux expression to keep the expected and computed results balanced.\n\nok I somewhat expected this too. The sidesets pointing the wrong direction would not have caused wrong contributions to the residual.\n\nWould you have any further idea why this is?\n\nHow do you do the postprocessing?\nCan you paste the Postprocessors block?\n\nFunctionValuePostprocessor\n\nwhich function are you evaluating?\nI think overall you need to compare a volumetric term and a few integrated fluxes, so I dont know why you have a \"function - value\" here.",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-12010255",
                          "updatedAt": "2025-01-30T18:45:59Z",
                          "publishedAt": "2025-01-30T18:45:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "oh304"
                          },
                          "bodyText": "The function being evaluated is:\n[Functions]\n    [pdhrt_in_flux]\n        type = ParsedFunction\n        symbol_names = 'P0 W L'\n        symbol_values = '${power} ${widthPDHRT} ${lengthPDHRT}'\n        expression = 'if(t < 1e-9, 0, 0.0622 * P0*2/(W*L) * (t^(-0.2)))'\n    []\n[]\n\nThe postprocessors here are:\n[Postprocessors]\n    [HX_top_area_pp]\n        type = AreaPostprocessor\n        boundary = 'HX_top_INTERFACE'\n        execute_on = 'INITIAL'\n    []\n    [flux_integral_pp]\n        type = FunctionSideIntegral\n        function = pdhrt_in_flux\n        boundary = 'HX_top_INTERFACE'\n    []\n    [decay_heat_pp]\n        type = FunctionValuePostprocessor\n        function = pdhrt_in_flux\n        execute_on = 'INITIAL TIMESTEP_END'\n    []\n[]\n\n\nIf it is any interest to you, the executioner block looks as follows. I'm struggling to figure why theres poor convergence on the normal sim but not the flooding simulation:\n[Executioner]\n    type = Transient\n    start_time = .1\n    end_time = 36000\n    dtmin = 1e-8\n    dtmax = 4\n    petsc_options = '-snes_converged_reason -ksp_converged_reason -options_left'\n    solve_type = 'NEWTON'\n    line_search = 'none'\n    # nl_max_its = 5\n    # l_max_its = 300\n    # nl_rel_tol = 1e-8\n    l_tol = 1e-10\n    nl_max_its = 5\n    nl_rel_tol = 1e-8\n    nl_abs_tol = 1e-10\n    [TimeStepper]\n      type = IterationAdaptiveDT\n      optimal_iterations = 7\n      dt = 0.5\n      linear_iteration_ratio = 1e6\n      growth_factor = 1.2\n    []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-12015847",
                          "updatedAt": "2025-01-31T11:46:14Z",
                          "publishedAt": "2025-01-31T09:21:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "petsc_options = '-snes_converged_reason -ksp_converged_reason -options_left'\n\n\nthis does not set a preconditioner, only asks for more information from the solver.\nAdding this could add a more robust preconditioner:\npetsc_options_iname = '-pc_type -pc_factor_shift_type'\npetsc_options_value = 'lu NONZERO",
                          "url": "https://github.com/idaholab/moose/discussions/29659#discussioncomment-12019619",
                          "updatedAt": "2025-01-31T16:13:31Z",
                          "publishedAt": "2025-01-31T16:13:30Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Tracking the radius(or area) and amount of bubbles(circles) in a phase filed model",
          "author": {
            "login": "jackeggemeyer"
          },
          "bodyText": "Hello All,\nI currently have a phase field model where nuclei are inserted into a microstructure, and they eventually form a lattice. This lattice is composed of multiple bubbles/circles that will move around the simulation. The defect/nuclei that are inserted have an ETA = 0, and the original red structure has an ETA = 1. Is there a built-in post processor that can track these circles and return any type of data, such as radius, area or quantity of bubbles? I can not use the built-in Discrete Nucleation post-processors, as some of the nuclei will diffuse or recombine with others. I use the Grand Potential Multi Phase Multi Order Phase Filed Model in MOOSE. I have attached a gif below with these circles and their behavior, and I have also attached my input file. Let me know if my kernels are needed for added context.\n\nmultiphase_omega_template.txt",
          "url": "https://github.com/idaholab/moose/discussions/28363",
          "updatedAt": "2025-01-31T12:35:46Z",
          "publishedAt": "2024-08-13T20:17:40Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nyou can see all the postprocessors in the phase field module here\nhttps://mooseframework.inl.gov/modules/phase_field/systems.html\nCan you use the grain-related postprcoessors?\n(averageGrainVolume, BoundaryGrainArea..?)\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/28363#discussioncomment-10330926",
                  "updatedAt": "2024-08-13T22:26:20Z",
                  "publishedAt": "2024-08-13T22:25:46Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "jackeggemeyer"
                          },
                          "bodyText": "FeatureFloodCount was able to do it for me; thank you.",
                          "url": "https://github.com/idaholab/moose/discussions/28363#discussioncomment-10341166",
                          "updatedAt": "2024-08-14T19:54:56Z",
                          "publishedAt": "2024-08-14T19:54:55Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "mdh23rct"
                          },
                          "bodyText": "@jackeggemeyer\nDear Jack,\nI am using FeatureFloodCount to determine the number of two new phases generated in the microstructure. The single phase-field variable has a value of -1 and 1 inside two different phases. Interestingly, FeatureFloodCount is only counting phases having a field value of 1. It is not counting the phases having a value of -1 and therefore, not included in the CSV file. Means, FeatureFloodCount is only considering the phase value range from 0 to 1, while 0 to -1 is neglected. Do I need to adjust something in the FeatureFloodCount so that the entire range 1 to -1 is included in the counting process? Do you have advice for me? Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/28363#discussioncomment-12017416",
                          "updatedAt": "2025-01-31T12:35:46Z",
                          "publishedAt": "2025-01-31T12:35:46Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Coupling the thermal field to phase-field and Navier-Stokes",
          "author": {
            "login": "alimostafavi24"
          },
          "bodyText": "Dear MOOSE community,\nI am trying to add the following equation to the phase-field CH equation and Navier-Stokes equation:\n\nhere u is the fluid velocity, T is the temperature, k(c) is thermal conductivity, C_p(c) is the specific heat constant and \\rho(c) is density. k(c), C_p(c) and \\rho(c) are material properties and c is the order parameter from the phase-field.\nBased on the existing kernels in MOOSE, is it better to proceed with equation format in (1) or (2)?\nIf the answer is (2), how I can handle the term in the RHS? MatDiffusion is a great option. But I am not sure how to use it, because it handles \\nabla.(D(c)\\nablaT), and the format of my equation is a bit different.\nAny guidance on this is highly appreciated.\nBest,\nAli",
          "url": "https://github.com/idaholab/moose/discussions/29770",
          "updatedAt": "2025-01-30T22:39:02Z",
          "publishedAt": "2025-01-30T21:44:38Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nIn the Navier Stokes module, whether FV or FE, (1) is implemented.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/29770#discussioncomment-12011902",
                  "updatedAt": "2025-01-30T22:05:04Z",
                  "publishedAt": "2025-01-30T22:05:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Everything is based on finite element.",
                          "url": "https://github.com/idaholab/moose/discussions/29770#discussioncomment-12011936",
                          "updatedAt": "2025-01-30T22:11:47Z",
                          "publishedAt": "2025-01-30T22:11:46Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I would go with (1)",
                          "url": "https://github.com/idaholab/moose/discussions/29770#discussioncomment-12011995",
                          "updatedAt": "2025-01-30T22:21:14Z",
                          "publishedAt": "2025-01-30T22:21:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "alimostafavi24"
                          },
                          "bodyText": "Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/29770#discussioncomment-12012133",
                          "updatedAt": "2025-01-30T22:39:03Z",
                          "publishedAt": "2025-01-30T22:39:02Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Use An App Created on Another Machine",
          "author": {
            "login": "TLWise"
          },
          "bodyText": "I created a MOOSE app using the stork command on another machine of mine. I have included the folders for that app into my git repository. I would like to use the app on various machines that I use that have MOOSE installed. I am getting this error when I perform the \"make j4\": 'registerAllObjects' is not a member of 'ModulesApp'\nHow can I use these files on other MOOSE installs?",
          "url": "https://github.com/idaholab/moose/discussions/29768",
          "updatedAt": "2025-01-30T22:20:58Z",
          "publishedAt": "2025-01-30T18:36:52Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI think the version of moose you used for creating that app was newer than the version of MOOSE you are using now.\nSo that app is using updated routines, and the current version of MOOSE does not have them.\nSo you can either:\n\n(preferred) update MOOSE\n(less preferred) stork again a new app, and move your files (except main.C and (src|include)/base/...App.C) to that new app",
                  "url": "https://github.com/idaholab/moose/discussions/29768#discussioncomment-12010239",
                  "updatedAt": "2025-01-30T18:42:51Z",
                  "publishedAt": "2025-01-30T18:42:50Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "TLWise"
                          },
                          "bodyText": "I performed the update to MOOSE. Thank you for that advisement. When I perform a make of MOOSE I am getting the following errors related to the mambaforge directory.: mambaforge3/envs/moose/bin/../lib/gcc/x86_64-conda-linux-gnu/12.3.0/../../../../x86_64-conda-linux-gnu/bin/ld: cannot find -lvtkImagingCore-9.1: No such file or directory",
                          "url": "https://github.com/idaholab/moose/discussions/29768#discussioncomment-12011962",
                          "updatedAt": "2025-01-30T22:16:19Z",
                          "publishedAt": "2025-01-30T22:16:19Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "you need to clean the folder using make clobberall or git clean -Xfd when updating",
                          "url": "https://github.com/idaholab/moose/discussions/29768#discussioncomment-12011992",
                          "updatedAt": "2025-01-30T22:20:59Z",
                          "publishedAt": "2025-01-30T22:20:58Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Activate new block after some time",
          "author": {
            "login": "fervaldies"
          },
          "bodyText": "Check these boxes if you have followed the posting rules.\n\n Q&A General is the most appropriate section for my question\n I have consulted the posting Guidelines on the Discussions front page\n I have searched the Discussions forum and my question has not been asked before\n I have searched the MOOSE website and the documentation does not answer my question\n I have formatted my post following the posting guidelines (screenshots as a last resort, triple back quotes around pasted text)\n\nQuestion\nHello, I am currently running a solidification model (in 2D), and what I want to do it to initialize a block with grains with the PolycrystalVoronoi and then (after let's say 10 seconds) add a new block on top as liquid and let the grains from that first block solidify into that new block. Then again another block on top of the previous and so on. Is there any way of doing this?",
          "url": "https://github.com/idaholab/moose/discussions/27852",
          "updatedAt": "2025-01-30T10:23:54Z",
          "publishedAt": "2024-06-10T09:29:12Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou have a few options here:\n\neither create the mesh with every region there from the beginning, but use user objects to move regions to a block with equations active on it (and use controls to turn on those equations if the set of equations changes)\nuse restart simulation on every change of the mesh. Each restart is initialized over the part of the mesh they share with the previous simulation with the previous solution, and with an initial condition for the new part of the domain\ncreate new user objects that create new elements in the mesh. This has not been done much in MOOSE yet but it is possible. You can use Controls to execute these new user objects exactly when desired\n\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-9742168",
                  "updatedAt": "2024-06-11T17:53:55Z",
                  "publishedAt": "2024-06-11T17:53:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "fervaldies"
                          },
                          "bodyText": "Thanks! And just a quick question regarding the BCs. I want to use the FunctionDirichletBC as follows:\n  [./all]\n    type = FunctionDirichletBC\n    variable = T\n    boundary = '0 5'\n    function = bc_func\n  [../]\n\nwith\n  [./bc_func]\n    type = ParsedFunction\n    expression = 'if(t<5,nothing,500)'\n    #symbol_names = 'alpha'\n    #symbol_values = '16'\n  [../]\n\nAnd I would like to not have any BC before t<5, but I do not know what to add in \"nothing\" to do that. If I write just 0, the boundary will go to zero during that time, but I just want the boundary to not have anything for that time and let the temperature evolve inside the mesh.",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-9764795",
                          "updatedAt": "2024-06-13T15:27:39Z",
                          "publishedAt": "2024-06-13T15:11:09Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "hello\nto turn on/off a boundary condition, you ll want to look at the FunctionEnableControl instead\nControls set the 'active' status of objects, and let you turn on/off equations, materials etc",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-9764977",
                          "updatedAt": "2024-06-13T15:28:20Z",
                          "publishedAt": "2024-06-13T15:28:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "PEI0214"
                  },
                  "bodyText": "Hello, I had a similar problem. Have you solved the problem?",
                  "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10145430",
                  "updatedAt": "2024-07-25T06:54:33Z",
                  "publishedAt": "2024-07-25T06:54:32Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "The user object approach should work and was further improved lately.\nDeclare the future blocks in the Mesh block with the add_subdomaon_names parameter\nAnd use the CoupledVarThresholdSubdomainModifier to move elements the new blocks when needed",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10146601",
                          "updatedAt": "2024-07-25T08:50:15Z",
                          "publishedAt": "2024-07-25T08:49:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Hi, I have two blocks during the simulation, both generating deformation and stress, and I want to initialize one of the blocks at some point (stress and deformation all removed).Is there any way of doing this?",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10156287",
                          "updatedAt": "2024-07-26T06:57:44Z",
                          "publishedAt": "2024-07-26T06:57:43Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "can you use the Controls system?\nI am thinking you are trying to have this other block:\n\nexist in the mesh from the beginning\nbe initialized  (or re-initialized?) at some point in the simulation\ninactive in the equations until that point\n\nis that true?",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10157707",
                          "updatedAt": "2024-07-26T09:47:42Z",
                          "publishedAt": "2024-07-26T09:00:53Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Yes, I'm trying to simulate the filling process. When using CoupledVarThresholdElementSubdomainModifier, unfilled blocks are also deformed, as shown below. What I want to do is that only the filled completed block deforms and the rest remains unchanged (zero stress and deformation). Is there a way to do that?",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10159605",
                          "updatedAt": "2024-07-26T12:17:46Z",
                          "publishedAt": "2024-07-26T12:17:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "To do that, you still use the subdomain modifier, but you make sure the equations do not cover the inactive zones.\nSo in the definition of the kernels (or if you are using the Physics, of the physics), specify block = blocks_initially_active\nthen the subdomain modifier will move elements from the inactive blocks to the active  ones",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10160598",
                          "updatedAt": "2024-07-26T13:52:19Z",
                          "publishedAt": "2024-07-26T13:52:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Thank you for your answer. I try to simulate the fill process by subdomain modifier, and the input file is Test1.i. The problem of computation is not convergent.I then tried Test2.i as an input file. The result is shown below.  The unfilled blocks are also deformed. But that's not what I want, what I want to do is that only the filled completed block deforms and the rest remains unchanged (zero stress and deformation).  Is there any way of doing this? Thank you for your help. The input file is as follows:\n\nTest1.i\n\n[Problem]\n  kernel_coverage_check = false\n  material_coverage_check = false\n[]\n\nBox1_inactive_id = '4'\nBox2_inactive_id = '5'\nBox3_inactive_id = '6'\ninactive_domain_block_ids = '${Box1_inactive_id} ${Box2_inactive_id} ${Box3_inactive_id}'\n\n[Mesh]\n  [BaseMesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 10\n    ny = 10\n    nz = 30\n    xmin = -0.5\n    xmax = +0.5\n    ymin = -0.5\n    ymax = +0.5\n    zmin = 0\n    zmax = +3\n  []\n  [Box1]\n    type = SubdomainBoundingBoxGenerator\n    input = 'BaseMesh'\n    block_id = 1\n    location = INSIDE\n    bottom_left = '-1 -1 0'\n    top_right = '+1 +1 +3'\n  []\n  [Box2]\n    type = SubdomainBoundingBoxGenerator\n    input = 'Box1'\n    block_id = 2\n    location = INSIDE\n    bottom_left = '-1 -1 +1'\n    top_right = '+1 +1 +3'\n  []\n  [Box3]\n    type = SubdomainBoundingBoxGenerator\n    input = 'Box2'\n    block_id = 3\n    location = INSIDE\n    bottom_left = '-1 -1 +2'\n    top_right = '+1 +1 +3'\n  []\n\n  add_subdomain_ids = ${inactive_domain_block_ids}\n[]\n\n# active_domain_block_ids = '1 2 3'\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n# ===== Tensor mechanics for all active domain blocks =====\n[Physics/SolidMechanics/QuasiStatic]\n  [all]\n    add_variables = true\n    strain = FINITE\n    block = '${inactive_domain_block_ids}'\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n\n# ===== Gravity =====\n[Kernels]\n  [Gravity1]\n    type = Gravity\n    block = '${inactive_domain_block_ids}'\n    use_displaced_mesh = false\n    variable = disp_z\n    value = -9.81\n  []\n[]\n\n# ===== Boundary Conditions =====\n[BCs]\n  [archor_x]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_x\n    value = 0\n  []\n\n  [archor_y]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_y\n    value = 0\n  []\n\n  [archor_z]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_z\n    value = 0\n  []\n[]\n\n# ===== Materials (linear-elastic to keep it simple) =====\n[Materials]\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    block = '${inactive_domain_block_ids}'\n    youngs_modulus = 50E6 # 50 MPa\n    poissons_ratio = 0.3\n  []\n\n  [stress_base]\n    type = ComputeFiniteStrainElasticStress\n    block = '${inactive_domain_block_ids}'\n  []\n\n  [density]\n    type = GenericConstantMaterial\n    prop_names = density\n    prop_values = 2150\n    block = '${inactive_domain_block_ids}'\n  []\n[]\n\n[UserObjects]\n  [Box_SubdomainModifier]\n    type = TimedSubdomainModifier\n    times = '2 4 6'\n    blocks_from = '1 2 3'\n    blocks_to = '4 5 6'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n# ===== Executioner =====\n[Executioner]\n  type = Transient\n\n  start_time = 0\n  end_time = 10\n  dt = 2\n\n  solve_type = 'PJFNK'\n  petsc_options = '-snes_converged_reason'\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'\n\n  nl_abs_tol = 1E-3\n  nl_max_its = 400\n\n  l_tol = 1E-3\n  l_max_its = 200\n[]\n\n[Outputs]\n  exodus = true\n[]\n\n\nTest2.i\n\n[Problem]\n  kernel_coverage_check = false\n  material_coverage_check = false\n[]\n\nBox1_inactive_id = '4'\nBox2_inactive_id = '5'\nBox3_inactive_id = '6'\ninactive_domain_block_ids = '${Box1_inactive_id} ${Box2_inactive_id} ${Box3_inactive_id}'\n\n[Mesh]\n  [BaseMesh]\n    type = GeneratedMeshGenerator\n    dim = 3\n    nx = 10\n    ny = 10\n    nz = 30\n    xmin = -0.5\n    xmax = +0.5\n    ymin = -0.5\n    ymax = +0.5\n    zmin = 0\n    zmax = +3\n  []\n  [Box1]\n    type = SubdomainBoundingBoxGenerator\n    input = 'BaseMesh'\n    block_id = 1\n    location = INSIDE\n    bottom_left = '-1 -1 0'\n    top_right = '+1 +1 +3'\n  []\n  [Box2]\n    type = SubdomainBoundingBoxGenerator\n    input = 'Box1'\n    block_id = 2\n    location = INSIDE\n    bottom_left = '-1 -1 +1'\n    top_right = '+1 +1 +3'\n  []\n  [Box3]\n    type = SubdomainBoundingBoxGenerator\n    input = 'Box2'\n    block_id = 3\n    location = INSIDE\n    bottom_left = '-1 -1 +2'\n    top_right = '+1 +1 +3'\n  []\n\n  add_subdomain_ids = ${inactive_domain_block_ids}\n[]\n\nactive_domain_block_ids = '1 2 3'\n\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n\n# ===== Tensor mechanics for all active domain blocks =====\n[Physics/SolidMechanics/QuasiStatic]\n  [all]\n    add_variables = true\n    strain = FINITE\n    block = '${inactive_domain_block_ids} ${active_domain_block_ids}'\n  []\n[]\n\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n\n# ===== Gravity =====\n[Kernels]\n  [Gravity]\n    type = Gravity\n    block = '${inactive_domain_block_ids}'\n    use_displaced_mesh = false\n    variable = disp_z\n    value = -9.81\n  []\n  [Gravity1]\n    type = Gravity\n    block = '${active_domain_block_ids}'\n    use_displaced_mesh = false\n    variable = disp_z\n    value = 0\n  []\n[]\n\n# ===== Boundary Conditions =====\n[BCs]\n  [archor_x]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_x\n    value = 0\n  []\n\n  [archor_y]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_y\n    value = 0\n  []\n\n  [archor_z]\n    type = DirichletBC\n    boundary = 'back'\n    variable = disp_z\n    value = 0\n  []\n[]\n\n# ===== Materials (linear-elastic to keep it simple) =====\n[Materials]\n\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    block = '${inactive_domain_block_ids}'\n    youngs_modulus = 50E6 # 50 MPa\n    poissons_ratio = 0.3\n  []\n  [elasticity_tensor1]\n    type = ComputeIsotropicElasticityTensor\n    block = '${active_domain_block_ids}'\n    youngs_modulus = 50E6 # 50 MPa\n    poissons_ratio = 0.3\n  []\n\n  [stress_base]\n    type = ComputeFiniteStrainElasticStress\n    block = '${inactive_domain_block_ids}'\n  []\n  [stress_base1]\n    type = ComputeFiniteStrainElasticStress\n    block = '${active_domain_block_ids}'\n  []\n\n  [density]\n    type = GenericConstantMaterial\n    prop_names = density\n    prop_values = 2150\n    block = '${inactive_domain_block_ids}'\n  []\n  [density1]\n    type = GenericConstantMaterial\n    prop_names = density\n    prop_values = 0\n    block = '${active_domain_block_ids}'\n  []\n[]\n\n[UserObjects]\n  [Box_SubdomainModifier]\n    type = TimedSubdomainModifier\n    times = '2 4 6'\n    blocks_from = '1 2 3'\n    blocks_to = '4 5 6'\n    execute_on = 'INITIAL TIMESTEP_BEGIN'\n  []\n[]\n\n# ===== Executioner =====\n[Executioner]\n  type = Transient\n\n  start_time = 0\n  end_time = 10\n  dt = 2\n\n  solve_type = 'PJFNK'\n  petsc_options = '-snes_converged_reason'\n  petsc_options_iname = '-pc_type -pc_factor_mat_solver_package'\n  petsc_options_value = ' lu       mumps'\n\n  nl_abs_tol = 1E-3\n  nl_max_its = 400\n\n  l_tol = 1E-3\n  l_max_its = 200\n[]\n\n[Outputs]\n  exodus = true\n[]\n\nTest2 results:",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10171791",
                          "updatedAt": "2024-07-28T13:34:07Z",
                          "publishedAt": "2024-07-28T13:32:11Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "But that's not what I want, what I want to do is that only the filled completed block deforms and the rest remains unchanged (zero stress and deformation).\n\nThis is about block restricting displacements.\nin your input, displacements are defined everywhere\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n\nbut you only want to solve for their changes on part of the domain.\nYou should add\nblock =\n\nto each displacement to make sure they are only active where you want them to be",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10184445",
                          "updatedAt": "2024-07-29T22:35:29Z",
                          "publishedAt": "2024-07-29T22:35:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "Thank you very much. I modified the input file according to your suggestion, and the following error occurred:\n*** ERROR *** /home/pdd/projects1/moose/modules/solid_mechanics/problem/0730/2/test1.i:62: missing required parameter 'Physics/SolidMechanics/QuasiStatic/displacements' Doc String: \"The nonlinear displacement variables for the problem\"\nAnd there's a strange phenomenon. When a block is transferred from a subdomain with a gravity of 0 to a subdomain with a gravity of -9.81, its deformation continues to increase with time after the transfer is over. What causes this?",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10190237",
                          "updatedAt": "2024-07-30T13:50:49Z",
                          "publishedAt": "2024-07-30T12:29:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "You can solve that error by providing the required parameter to the Physics\nIf the elements are still deforming then there must still be an equation for displacements on that block.\nCan you paste here your variables block?",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10191764",
                          "updatedAt": "2024-07-30T15:12:52Z",
                          "publishedAt": "2024-07-30T14:43:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "PEI0214"
                          },
                          "bodyText": "The variable block is set as follows:\n[Variables]\n  [disp_x]\n    block = '${inactive_domain_block_ids}'\n  []\n  [disp_y]\n    block = '${inactive_domain_block_ids}'\n  []\n  [disp_z]\n    block = '${inactive_domain_block_ids}'\n  []\n[]\n\nThe displacements provided in Physics still report errors.\n[Physics/SolidMechanics/QuasiStatic]\n  [all]\n    add_variables = true\n    strain = FINITE\n    displacements = 'disp_x disp_y disp_z'\n    block = '${inactive_domain_block_ids}'\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/27852#discussioncomment-10196353",
                          "updatedAt": "2024-07-31T07:03:01Z",
                          "publishedAt": "2024-07-31T02:16:52Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "MOOSE Electromangetics Module Transient 3D Capabilities",
          "author": {
            "login": "akom1220"
          },
          "bodyText": "Apologies if this question or topic has already been answered/covered.\nI work on an in-house simulation code for a Purdue research lab and we think MOOSE would be a great open source method of solving the physics in our model.\nOur question is if, at this time, the MOOSE EM module is able to support transient 3D simulations? And, if not, is it possible to represent a closed membrane type of geometry in 2D under some form of symmetry?",
          "url": "https://github.com/idaholab/moose/discussions/29760",
          "updatedAt": "2025-01-29T21:24:08Z",
          "publishedAt": "2025-01-29T19:59:03Z",
          "category": {
            "name": "Q&A Modules: General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@cticenhour",
                  "url": "https://github.com/idaholab/moose/discussions/29760#discussioncomment-11999898",
                  "updatedAt": "2025-01-29T20:38:00Z",
                  "publishedAt": "2025-01-29T20:37:59Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "cticenhour"
                  },
                  "bodyText": "I did make a 3D version of one of the waveguide example cases on the module homepage, but I don't believe I ever formalized it into an example or test. The code is dimensionally agnostic, so you should be able to setup a 3D simulation following the same principles you would to set up any MOOSE simulation.\nDo you want symmetry around an axis? If so, you can turn that on in the [Mesh] block.",
                  "url": "https://github.com/idaholab/moose/discussions/29760#discussioncomment-12000301",
                  "updatedAt": "2025-01-29T21:19:24Z",
                  "publishedAt": "2025-01-29T21:19:24Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "akom1220"
                          },
                          "bodyText": "Myself and another student had seen on another page that the 3D capability was in development, so we just wanted to check. Thank you for the quick answer and suggestion!",
                          "url": "https://github.com/idaholab/moose/discussions/29760#discussioncomment-12000325",
                          "updatedAt": "2025-01-29T21:22:23Z",
                          "publishedAt": "2025-01-29T21:22:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "cticenhour"
                          },
                          "bodyText": "Feel free to reach out for support if you run into issues with it!",
                          "url": "https://github.com/idaholab/moose/discussions/29760#discussioncomment-12000340",
                          "updatedAt": "2025-01-29T21:24:09Z",
                          "publishedAt": "2025-01-29T21:24:08Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "The new grains generated by nucleation do not grow further by storing deformation energy based on dislocation density evolution",
          "author": {
            "login": "Sabalei"
          },
          "bodyText": "Dear Moose users,\nI'm trying to simulate static recrystallization. I have inserted the nucleus through Direct order parameter modification.\n[Mesh]\n  [ebsd_mesh]\n    type = EBSDMeshGenerator\n    filename = 100_120x120.txt\n    pre_refine = 2\n  []\n[]\n\n[GlobalParams]\n  op_num = 8\n  var_name_base = gr\n  length_scale = 1.0e-6\n  time_scale = 1.0e-6\n[]\n\n[UserObjects]\n  [ebsd_reader]\n    type = EBSDReader\n  []\n  [ebsd]\n    type = PolycrystalEBSD\n    coloring_algorithm = jp\n    ebsd_reader = ebsd_reader\n    execute_on = 'INITIAL'\n  []\n  [grain_tracker]\n    type = GrainTracker\n    compute_var_to_feature_map = true\n    execute_on = 'INITIAL timestep_begin'\n    threshold = 0.1\n    reserve_op_threshold = 0.5\n    remap_grains = true\n    reserve_op = 1\n    tolerate_failure = true\n    connecting_threshold = 0.08\n  []\n  [inserter]\n    type = DiscreteNucleationInserter\n    hold_time = 0\n    probability = p\n    seed = 1014\n    radius = 0.5\n    time_dependent_statistics = false\n  []\n  [map]\n    type = DiscreteNucleationMap\n    periodic = 'gr7'\n    inserter = inserter\n    int_width = 0.6\n  []\n[]\n\n[Kernels]\n  [PolycrystalKernel]\n  []\n  [force]\n    type = DiscreteNucleationForce\n    variable = 'gr7'\n    map = map\n    no_nucleus_value = 0\n    nucleus_value = 1\n  []\n  [reaction]\n    type = Reaction\n    variable = 'gr7'\n  []\n  [PolycrystalStoredEnergyAction]\n  []\n[]\n\nHowever, the new grains generated by nucleation do not grow further based on the stored deformation energy of the dislocation density evolution. I would really appreciate guidance on possible strategies to tackle this problem.",
          "url": "https://github.com/idaholab/moose/discussions/29723",
          "updatedAt": "2025-01-28T22:57:27Z",
          "publishedAt": "2025-01-22T09:13:08Z",
          "category": {
            "name": "Q&A Modules: Phase field"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@laagesen @amjokisaari",
                  "url": "https://github.com/idaholab/moose/discussions/29723#discussioncomment-11952009",
                  "updatedAt": "2025-01-25T14:15:28Z",
                  "publishedAt": "2025-01-25T14:15:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "laagesen"
                  },
                  "bodyText": "Sorry I am not really familiar with this system, maybe @SudiptaBiswas might know?",
                  "url": "https://github.com/idaholab/moose/discussions/29723#discussioncomment-11989782",
                  "updatedAt": "2025-01-28T22:57:27Z",
                  "publishedAt": "2025-01-28T22:57:27Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}