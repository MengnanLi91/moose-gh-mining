{
  "discussions": {
    "pageInfo": {
      "hasNextPage": true,
      "endCursor": "Y3Vyc29yOnYyOpK5MjAyMy0wMi0xNlQxNzowODozNS0wNjowMM4ASj-1"
    },
    "edges": [
      {
        "node": {
          "title": "problem with number of processors used for simulations",
          "author": {
            "login": "Oops-Qiao"
          },
          "bodyText": "Hello,\nI have a quick question regarding the following code to run my simulations.\nwhen I use  mpiexec -n 2  ~/projects/fly-opt -i test.i to run my test, terminal reports an error like below\nHowever, when I use mpiexec  ~/projects/fly-opt -i test.i to run my test, it works well.\nI want to use as many processors as I can to speed up the simulations. How to understand this? Thanks very much.\nBest regards,\nJeery",
          "url": "https://github.com/idaholab/moose/discussions/23482",
          "updatedAt": "2023-06-24T19:43:39Z",
          "publishedAt": "2023-02-20T14:28:50Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "Oops-Qiao"
                  },
                  "bodyText": "@GiudGiud Perhaps you have seen this before? :)",
                  "url": "https://github.com/idaholab/moose/discussions/23482#discussioncomment-5054097",
                  "updatedAt": "2023-02-20T14:29:37Z",
                  "publishedAt": "2023-02-20T14:29:37Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nThis has been answered before on the forum indeed.\nPreconditioning defaults are different in parallel and in serial. The serial one is more effective but does not scale to parallel. You ll need to work on getting the appropriate preconditioning. Some info here:\nhttps://mooseframework.inl.gov/source/executioners/Steady.html\nPlease stop posting screenshots. It's better to copy paste text inside triple backquotes.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23482#discussioncomment-5054913",
                  "updatedAt": "2023-02-20T15:45:54Z",
                  "publishedAt": "2023-02-20T15:44:27Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "Oops-Qiao"
                          },
                          "bodyText": "Hello\nThis has been answered before on the forum indeed. Preconditioning defaults are different in parallel and in serial. The serial one is more effective but does not scale to parallel. You ll need to work on getting the appropriate preconditioning. Some info here: https://mooseframework.inl.gov/source/executioners/Steady.html\nPlease stop posting screenshots. It's better to copy paste text inside triple backquotes.\nGuillaume\n\nThanks a lot Guillaume. I am sorry and the screenshot is deleted. No more next time.\nJerry",
                          "url": "https://github.com/idaholab/moose/discussions/23482#discussioncomment-5054966",
                          "updatedAt": "2023-02-20T15:49:29Z",
                          "publishedAt": "2023-02-20T15:49:29Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Computing effective elastic moduli",
          "author": {
            "login": "clariu25"
          },
          "bodyText": "Hi,\nI'm trying to retrieve the bulk and shear moduli from a simple cube (homogeneous). The idea is to later add porosity and evaluate its effective moduli, therefore, I can't extract the values from the elasticity tensor, as that remains constant. For now I'm only applying some load at the top (ZZ direction). I'm using the Young modulus and Poisson ratio as inputs for the ComputeIsotropicElasticityTensor.\nBy evaluating the stress/strain relations I should be able to retrieve the same values for the elastic moduli that I used as inputs, as the material hasn't changed, but that is not case. Non of the calculated moduli coincide with the input ones.\nResults (Modulus - expected value - output value - calculation):\n\nK - 36GPa  - 30GPa     -   hydrostatic_stress/volumetric_stress\nG - 72MPa -144MPa   -  stress_xz/strain_xz (exactly twice as the input file value)\nE - 22MPa  - 18MPa   -  stress_zz/strain_zz\nPoisson - 0.499 - 0.01  - strain_yy/strain_zz\n\nHas anyone encounter something similar? Or is my assumption of the non-changed material properties wrong?\nThank you in advance for your replies.\nRegards,\nClara",
          "url": "https://github.com/idaholab/moose/discussions/23460",
          "updatedAt": "2023-02-20T08:50:10Z",
          "publishedAt": "2023-02-17T15:08:58Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Can you elaborate on how you retrieve the moduli \"by evaluating the stress/strain relations\"?",
                  "url": "https://github.com/idaholab/moose/discussions/23460#discussioncomment-5014100",
                  "updatedAt": "2023-02-17T20:15:33Z",
                  "publishedAt": "2023-02-17T20:15:33Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "clariu25"
                          },
                          "bodyText": "The relations that allow to calculate the elastic moduli. The equations that I wrote next to the results.",
                          "url": "https://github.com/idaholab/moose/discussions/23460#discussioncomment-5050498",
                          "updatedAt": "2023-02-20T08:50:11Z",
                          "publishedAt": "2023-02-20T08:50:10Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Define Material as a Function",
          "author": {
            "login": "geoyanzhan3"
          },
          "bodyText": "Hi,\nI am sure there must be some instructions somewhere. But I want to define a function for the material properties. For example, this is my original input file:\n[Materials]\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = 25e9\n    poissons_ratio = 0.25\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\nNow I want the \"youngs_modulus\" and \"poissons_ratio\" to be a function of x, y, and z.\nFox example, \"youngs_modulus  = a2 * exp(a1 / sqrt(x^2+y^2+z^2))\". And \"a1, a2\" are constants.\nI failed with \"parsedFunction\" material.\nThank you very much!\n-Y",
          "url": "https://github.com/idaholab/moose/discussions/23440",
          "updatedAt": "2023-06-24T19:45:13Z",
          "publishedAt": "2023-02-16T08:40:47Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nYou ll want to use this material instead\nhttps://mooseframework.inl.gov/source/materials/ComputeVariableIsotropicElasticityTensor.html\nand use a ParsedMaterial to set the Young Modulus and Poisson ratio\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-4997258",
                  "updatedAt": "2023-02-16T14:48:03Z",
                  "publishedAt": "2023-02-16T14:48:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "When I use\n\n[Materials]\n  [elasticity_tensor]\n    type = ComputeVariableIsotropicElasticityTensor\n    youngs_modulus = youngs_modulus\n    poissons_ratio = poissons_ratio\n    args = x\n  []\n  [youngs_modulus]\n    type = ParsedMaterial\n    expression = '3*x'\n  []\n  [poissons_ratio]\n    type = ParsedMaterial\n    expression = '1-exp(1/x)'\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\nIt shows:\nelasticity_tensor: Coupled variable 'x' was not found\nThank you!",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003095",
                          "updatedAt": "2023-02-17T01:00:23Z",
                          "publishedAt": "2023-02-17T01:00:22Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "Here is the problem, I am working on.",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003116",
                          "updatedAt": "2023-02-17T01:02:29Z",
                          "publishedAt": "2023-02-17T01:02:28Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "When I use\n\n[Materials]\n  [elasticity_tensor]\n    type = ComputeVariableIsotropicElasticityTensor\n    youngs_modulus = youngs_modulus\n    poissons_ratio = poissons_ratio\n    args = x\n  []\n  [youngs_modulus]\n    type = ParsedMaterial\n    expression = '3*x'\n  []\n  [poissons_ratio]\n    type = ParsedMaterial\n    expression = '1-exp(1/x)'\n  []\n  [stress]\n    type = ComputeLinearElasticStress\n  []\n[]\n\nIt shows: elasticity_tensor: Coupled variable 'x' was not found\nThank you!\n\nbecause args only is coupled variable.",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003174",
                          "updatedAt": "2023-02-17T01:09:49Z",
                          "publishedAt": "2023-02-17T01:09:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "x is not a variable\nCan you enter a dummy variable as args?\nto define one:\n[AuxVariables]\n  [dummy]\n  []\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003199",
                          "updatedAt": "2023-02-17T01:19:20Z",
                          "publishedAt": "2023-02-17T01:19:20Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "I am also attaching the input file for a study with homogeneous material properties.\nThank you!\nArchive.zip",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003203",
                          "updatedAt": "2023-02-17T01:20:39Z",
                          "publishedAt": "2023-02-17T01:20:38Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "x is not a variable Can you enter a dummy variable as args? to define one:\n[AuxVariables]\n  [dummy]\n  []\n[]\n\n\nBut how to link this dummy variable to x?",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003206",
                          "updatedAt": "2023-02-17T01:21:55Z",
                          "publishedAt": "2023-02-17T01:21:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "x is position right?\nOr are you trying to use a variable for x ??\nIf so then you need to be using the name of that variable when defining the ParsedMaterial, not x",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003213",
                          "updatedAt": "2023-02-17T01:22:49Z",
                          "publishedAt": "2023-02-17T01:22:48Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "Yes! Please see the problem set here:\n\nHere is the problem, I am working on.",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003221",
                          "updatedAt": "2023-02-17T01:24:08Z",
                          "publishedAt": "2023-02-17T01:24:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "ok then define temperature as an auxiliary variable.\nThen use a ParsedAux to set it s spatial program.\nAnd for Young Modulus and Poisson ratio, use ParsedMaterial with the expression of T\nadd coupled_variables = 'T' to the ParsedMarerial parameters",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003287",
                          "updatedAt": "2023-02-17T01:35:35Z",
                          "publishedAt": "2023-02-17T01:35:34Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "geoyanzhan3"
                          },
                          "bodyText": "It looks not very straightforward. I would appreciate it if you could show me how to modify my input file. Thank you very much!\n\nI am also attaching the input file for a study with homogeneous material properties.\nThank you!\nArchive.zip",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003304",
                          "updatedAt": "2023-02-17T01:40:20Z",
                          "publishedAt": "2023-02-17T01:40:19Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "wangzhaohao"
                  },
                  "bodyText": "this question i do . you can use like this( it may be redundancy\uff09\n[Materials]\n  [elasticity_tensor]\n    type = ComputeIsotropicElasticityTensor\n    youngs_modulus = youngs_modulus\n    poissons_ratio = 0.25\n  []\n  [youngs_modulus]\n     type = ParsedMaterial\n      expression = '3*x'  # such like this\n  []\n[]",
                  "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-4997544",
                  "updatedAt": "2023-02-16T15:11:16Z",
                  "publishedAt": "2023-02-16T15:11:15Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "no you cant do that\nParsedMaterial will define a property called F by default, not Young modulus",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-4998269",
                          "updatedAt": "2023-02-16T16:13:18Z",
                          "publishedAt": "2023-02-16T16:13:18Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "Sorry, I used do it in HeatConduction , and the theraml_conductiivty is myseilf define material. But when i try to use this don't know args to set what.\n[Materials]\n  [elsticity_tensor]\n     type = ComputeVaribleIsotropicElasticityTensor\n     youngs_modulus = youngs_modulus\n     poissons_ratio = 0.2\n     args = ?\n  []\n  [youngs_modulus]\n    type = ParsedMaterial\n    expression = 3600*(1+x)\n    property_name = youngs_modulus\n  []\n[]\n\nI have try use function in 'ComputeIsotropicElasticityTensor', but the youngs_modulus type is only double",
                          "url": "https://github.com/idaholab/moose/discussions/23440#discussioncomment-5003169",
                          "updatedAt": "2023-02-17T01:31:12Z",
                          "publishedAt": "2023-02-17T01:08:13Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "CARDINAL wrapper installation.",
          "author": {
            "login": "AnthonyB08"
          },
          "bodyText": "Hi all,\nI am trying to install CARDINAL wrapper for using MOOSE and NEKS. When I run the command\n./contrib/moose/scripts/update_and_rebuild_petsc.sh\nI receive this error:\n\nWhat does the community recommend?",
          "url": "https://github.com/idaholab/moose/discussions/23408",
          "updatedAt": "2023-02-17T16:20:24Z",
          "publishedAt": "2023-02-13T18:54:03Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "milljm"
                  },
                  "bodyText": "Can you attach the configure.log file? It should exist at:\n/mnt/d/cardinal/contrib/moose/petsc/configure.log\n\nAlso, in the future it would help if you refrained from posting images of text. The issue doing so, is that the search functionality on \"Discussions\" is unable to parse the information in an image. Thanks!",
                  "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4962003",
                  "updatedAt": "2023-02-13T18:57:29Z",
                  "publishedAt": "2023-02-13T18:57:06Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Okay, I will do that from now on thank you for education me on that issue. Thank you for taking a look at this issue, here is the co\nconfigure_log.txt",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4964294",
                          "updatedAt": "2023-02-13T22:56:05Z",
                          "publishedAt": "2023-02-13T22:56:04Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "@milljm , I managed to get past this part of the CARDINAL installation last week. However, I ran out of storage during the installation and had to uninstall and re-install WSL/Ubuntu onto a different drive. I am wondering if I am missing and ubuntu packages that might correct this error..",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4972520",
                          "updatedAt": "2023-02-14T15:57:59Z",
                          "publishedAt": "2023-02-14T15:57:58Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "What version of Ubuntu are you using?",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4973381",
                          "updatedAt": "2023-02-14T17:15:14Z",
                          "publishedAt": "2023-02-14T17:15:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I am looking through your log, and I notice you are using perhaps some of our environment (The moose-mpich conda environment perhaps?)\nAre you following these instructions: https://cardinal.cels.anl.gov/with_conda.html\n(you're only after OpenMC, and therefore you should not be trying to build PETSc)\nOr are you instead needing to build without using Conda: https://cardinal.cels.anl.gov/without_conda.html\n(you need to install all the compilers yourself using your systems package management)",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4973796",
                          "updatedAt": "2023-02-14T17:54:39Z",
                          "publishedAt": "2023-02-14T17:53:54Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "I was able build PETSc, running the moose/scripts/update_and_rebuild_petsc.sh, after performing the following apt-get commands on fresh install of Ubuntu 22.04. These are similar commands we use to initiate a fresh machine for use within our build farm.\nMy advice, is to run these only in a new WSL container... I have no idea what havoc these commands might do in a WSL environment you've already established.\n    apt-get update\n    apt-get -y --allow-unauthenticated upgrade\n    apt-get -y --allow-unauthenticated install software-properties-common\n    apt-get -y --allow-unauthenticated install build-essential debootstrap vim emacs gfortran libperl-dev python3-dev python3 file flex bison autoconf automake curl libtirpc-dev git procps unzip python3-yaml gcc-11 g++-11 gfortran-11 cpp-11 libx11-dev libxt-dev libglpk-dev rsync\n    apt-get -y remove gcc-12 g++-12 gfortran-12 cpp-12\n    apt-get -y autoremove\n    apt-get -y clean\n    apt-get -y autoclean\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100\n    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100\n    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-11 100\n    update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-11 100\n\n    # Installs OpenMPI, Cmake\n    apt-get install libopenmpi-dev cmake python3-packaging pkg-config\n\n    # Makes `python` default to `python3` (probably only valid on Ubuntu 22.04!)\n    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 2\n    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 3\n\n    # Set compilers (you'll need to do this every time you launch your WSL Ubuntu container)\n    export CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-4974604",
                          "updatedAt": "2023-02-14T19:30:12Z",
                          "publishedAt": "2023-02-14T19:19:35Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "This solved all of my issues! I cannot thank you enough! I am excited to start my research now!",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-5010942",
                          "updatedAt": "2023-02-17T14:25:51Z",
                          "publishedAt": "2023-02-17T14:25:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "I was missing a few of those packages. I am now able to compile and I successfully ran OpenMC through cardinal",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-5010959",
                          "updatedAt": "2023-02-17T14:27:27Z",
                          "publishedAt": "2023-02-17T14:27:26Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "milljm"
                          },
                          "bodyText": "Your very welcome! I think you might like this upcoming process: neams-th-coe/cardinal#594\nIt was your discussion here that prompted me to \"help out\" and make some easier Conda available packages for installation =D\nI'll post back here when ready. The idea is you'll only need to:\nmamba create -n cardinal cardinal\nTo have OpenMC, MOAB, dagmc, NekRS, and Cardinal installed.",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-5011928",
                          "updatedAt": "2023-02-17T15:56:02Z",
                          "publishedAt": "2023-02-17T15:56:01Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "AnthonyB08"
                          },
                          "bodyText": "Oooo that will be exciting and very simple. The reason I didn't go through the conda environment is only that I wanted the capability of NEKRS. Thank you for tackling this problem!",
                          "url": "https://github.com/idaholab/moose/discussions/23408#discussioncomment-5012200",
                          "updatedAt": "2023-02-17T16:20:24Z",
                          "publishedAt": "2023-02-17T16:20:23Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "ConstantBoundsAux and Constant/Monomial Nonlinear Variable",
          "author": {
            "login": "joe61vette"
          },
          "bodyText": "Hi:\nI am using an rDG scheme where my variables are constant/monomial.  I need to limit the range of one nonlinear variable (void fraction).  The ConstantBoundsAux seems perfect for this, but...\nIt appears that it only works if the nonlinear variable is nodal.  Is there a way to do this for an elemental variable.\nThanks,\nJoe Kelly",
          "url": "https://github.com/idaholab/moose/discussions/23443",
          "updatedAt": "2023-06-24T19:41:50Z",
          "publishedAt": "2023-02-16T14:51:42Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "@joshuahansel",
                  "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4997319",
                  "updatedAt": "2023-02-16T14:53:22Z",
                  "publishedAt": "2023-02-16T14:53:16Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "It should be a straight-forward fix. You just need to generalize the BoundsAuxBase to take care of the elemental variable case. For example at https://github.com/idaholab/moose/blob/next/framework/src/auxkernels/BoundsAuxBase.C#L48-L49\nI can walk you through this if any of you want to take a crack at it.",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4997376",
                          "updatedAt": "2023-02-16T14:57:05Z",
                          "publishedAt": "2023-02-16T14:57:05Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Wow, that was fast!  And yes, I am afraid that I'll need some help in modifying computeValue().  Thanks.",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4997485",
                          "updatedAt": "2023-02-16T15:06:38Z",
                          "publishedAt": "2023-02-16T15:06:37Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "When I get off work today, I can give you the APIs to look at. Otherwise @GiudGiud may point you to those before I do. This bounds magic essentially boils down to figuring out the corresponding dof number of the nonlinear variable bounded_variable at the given node/element.",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4997603",
                          "updatedAt": "2023-02-16T15:15:32Z",
                          "publishedAt": "2023-02-16T15:15:31Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "That would be great.  Thanks again.",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4997635",
                          "updatedAt": "2023-02-16T15:18:50Z",
                          "publishedAt": "2023-02-16T15:18:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "I can give it a shot this afternoon",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5000488",
                          "updatedAt": "2023-02-16T20:28:25Z",
                          "publishedAt": "2023-02-16T20:28:24Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "Thanks @GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5000845",
                          "updatedAt": "2023-02-16T21:21:50Z",
                          "publishedAt": "2023-02-16T21:21:50Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Thanks @GiudGiud",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5000986",
                          "updatedAt": "2023-02-16T21:43:47Z",
                          "publishedAt": "2023-02-16T21:43:47Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Should be good with #23449\n@joshuahansel if you have time to check this out on RDG problems, could help determine if this is any help\n(dont forget the extra petsc flag)",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5001033",
                          "updatedAt": "2023-02-16T21:49:54Z",
                          "publishedAt": "2023-02-16T21:49:36Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joshuahansel"
                          },
                          "bodyText": "@joe61vette Were you running into some cases that produced negative void fractions, or were you just being proactive? I don't recall fighting with negative values (just phase disappearance) since moving from CG to rDG, so it might be difficult for me to test this out (at least with the systems/formulations I work with).",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5001364",
                          "updatedAt": "2023-02-16T22:23:15Z",
                          "publishedAt": "2023-02-16T22:23:14Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Unfortunately, I can get negative void fractions and it is hard to recover from them.  I have \"protected\" my kernels and constitutive models by using the void fraction as a material property that is limited between 0 and 1.  But the nonlinear variable can still go negative when I am essentially solving a single-phase problem with the two fluid eqns.  Note, this is a simple air/water test case so no interfacial heat/mass transfer.\nI first tried using the BoundingValueElementDamper.  But this quickly went to the minimum damping factor and stopped the problem.  I will give #23449 a try later today (THANKS @GiudGiud!)",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5010885",
                          "updatedAt": "2023-02-17T14:20:42Z",
                          "publishedAt": "2023-02-17T14:20:41Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "joshuahansel"
                  },
                  "bodyText": "Hi Joe,\nI'm assuming that you've already looked at https://mooseframework.inl.gov/source/auxkernels/ConstantBoundsAux.html, but I just wanted to make sure you saw this part:\n\nthe user has to specify the PETSc options -snes_type vinewtonssls or -snes_type vinewtonrsls\n\nI don't have any experience with PETSc's variational inequalities solvers, so I don't know how restrictive this is.\nIn RELAP-7 and Sockeye, we've come across the issue of bounding volume fractions, and we're using rDG/FV. I've never tried ConstantBoundsAux (I didn't know it existed!). I think for us, the issue was less about negativity of a volume fraction and more about the calculation of fluid properties of the absent/near-absent phase, since the thermodynamic state at which those properties are evaluated is very sensitive at those low volume fractions, and it's easy to go out of the range of validity in the fluid properties packages. I never found a great solution to this - I've tried many and gotten strategies that work well on some problems not work on others. I wish I had more time to explore this topic. Some general principles I tried to follow are:\n\nStart with a spatial discretization/stabilization that theoretically cannot get unphysical values. Of course, for a nonlinear solve, iterates can still be out of physical bounds, so see next bullet.\nMake sure the nonlinear residual calculation can handle unphysical values. You can bound the solution variable locally, for instance. This may lead to convergence difficulties due to a discontinuity in the nonlinear residual, so you can attempt to smooth this out with gradual transitions in the quantity/residual.\n\nEven then, you can probably still end up with negative values... In the CG days of RELAP-7, we did this \"volume fraction re-mapper\" thing, that had mixed success, where we made our solution variable the unbounded void fraction (say, alpha_unbounded), that has a unique mapping to the bounded volume fraction (say, alpha), which is then what gets used in the residuals and such. So you could safely converge to a negative value of alpha_unbounded. Basically, you have alpha_unbounded = alpha for values that are larger than some small number epsilon and then you have a smooth mapping such that the limit of alpha(alpha_unbounded) as alpha_unbounded goes to infinity, is zero. I suspect that this approach brings new issues in this limit, but I don't know them well.\nI'm sorry for rambling - it probably wasn't that helpful, since we never were completely successful.\nAnyway, I'm interested to see how well ConstantBoundsAux works for you!\n-Josh",
                  "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4998309",
                  "updatedAt": "2023-02-16T16:17:54Z",
                  "publishedAt": "2023-02-16T16:17:53Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "joe61vette"
                          },
                          "bodyText": "Thanks Josh.  I figured that between Sockeye and RELAP-7 someone had already solved this.  If I can't figure out how to generalize ConstantBoundsAux to handle elemental variables, then I may have to do something like the mapping approach.  For some of my kernels, like the pressure gradient, I need a positive non-zero value of the phase volume fraction.  I'll let you know how this goes.\nJoe",
                          "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-4998381",
                          "updatedAt": "2023-02-16T16:25:34Z",
                          "publishedAt": "2023-02-16T16:25:34Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "lindsayad"
                  },
                  "bodyText": "Note that in the worst case you can take a nonlinear iteration per constrained dof to resolve active/inactive sets. As @joshuahansel has mentioned the best case scenario is to use a discretization scheme that is ensured to preserve physicality ... but even then TVD schemes have non-smooth derivatives which are themselves problematic for Newton",
                  "url": "https://github.com/idaholab/moose/discussions/23443#discussioncomment-5001635",
                  "updatedAt": "2023-02-16T23:07:56Z",
                  "publishedAt": "2023-02-16T23:07:56Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "the following blocks (ids) do not exist on the mesh",
          "author": {
            "login": "selarem"
          },
          "bodyText": "Hello Moosers,\nI am trying to define different elastic properties for different elsets (layers); the layers are elsets defined in my mesh file, however i got the error message \ud83d\udc4d\nthe following blocks (ids) do not exist on the mesh \n\nA block is not an Elset ?\nregards,\nSab",
          "url": "https://github.com/idaholab/moose/discussions/23458",
          "updatedAt": "2023-06-24T19:43:21Z",
          "publishedAt": "2023-02-17T12:50:03Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "Use boundary = elset",
                  "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5009873",
                  "updatedAt": "2023-02-17T13:50:17Z",
                  "publishedAt": "2023-02-17T13:05:30Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "selarem"
                  },
                  "bodyText": "I am using this syntax:\n[./elasticity_tensor14]\n    type = ComputeElasticityTensorCP\n   block='c1'   \n    C_ijkl = '11e3 12e3 13e3 22e3 23e3 33e3 44e3 55e3 66e3'\n    fill_method = symmetric9\n    euler_angle_1 = 0.0\n    euler_angle_2 = .0\n    euler_angle_3 = 0.0\n  [../]\n\nwhere to add  boundary = elset ?\nthanks",
                  "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5010031",
                  "updatedAt": "2023-02-17T14:47:57Z",
                  "publishedAt": "2023-02-17T13:23:17Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I may have misunderstood. What does elset mean?",
                          "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5010048",
                          "updatedAt": "2023-02-17T13:24:51Z",
                          "publishedAt": "2023-02-17T13:24:51Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "selarem"
                          },
                          "bodyText": "Element set",
                          "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5010051",
                          "updatedAt": "2023-02-17T13:25:09Z",
                          "publishedAt": "2023-02-17T13:25:08Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "That sounds like an Abaqus keyword. I think block should work. Someone else more familiar with the Abaqus mesh format may be able to help.",
                          "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5010563",
                          "updatedAt": "2023-02-17T13:49:49Z",
                          "publishedAt": "2023-02-17T13:49:49Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Open your mesh with paraview and look at the blocks in the properties tab on the left. This is what you can use as a 'block'\nI m not sure what an element set is wrt MOOSE. Maybe @dschwen",
                          "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5011183",
                          "updatedAt": "2023-02-17T14:49:31Z",
                          "publishedAt": "2023-02-17T14:49:30Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "In case paraview doesn't support your mesh format but moose does, you can do my-app-opt -i input.i --mesh-only to generate an exodus file.",
                          "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5011223",
                          "updatedAt": "2023-02-17T14:52:53Z",
                          "publishedAt": "2023-02-17T14:52:52Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "selarem"
                  },
                  "bodyText": "Thank, it works fine non.\nRegards\n\nLe ven. 17 f\u00e9vr. 2023, 15:53, Gary (Tianchen) Hu ***@***.***>\na \u00e9crit :\n\u2026\n In case paraview doesn't support your mesh format but moose does, you can\n do my-app-opt -i input.i --mesh-only to generate an exodus file.\n\n \u2014\n Reply to this email directly, view it on GitHub\n <#23458 (reply in thread)>,\n or unsubscribe\n <https://github.com/notifications/unsubscribe-auth/AFBUGDC4VIYYMN53W6AJW5DWX6GFBANCNFSM6AAAAAAU7MSBSQ>\n .\n You are receiving this because you authored the thread.Message ID:\n ***@***.***>",
                  "url": "https://github.com/idaholab/moose/discussions/23458#discussioncomment-5011878",
                  "updatedAt": "2023-02-17T15:51:07Z",
                  "publishedAt": "2023-02-17T15:51:04Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Need some hint to model an Earth Air Heat Exchanger",
          "author": {
            "login": "Vincent-IUTRS-EOST"
          },
          "bodyText": "Hello everybody,\nI am currently working on an Earth Air Heat Exchanger model: the soil around the pipe is meshed with 3D elements and will solve the soil temperature diffusion (variable \"ts\"). Inside the pipe, the air is circulating in the direction Z (see figure which is a small part of the entire mesh) and I would like to implement the fluid one dimensional circulation inside the pipe by 1D elements using my own kernels (solving for the air velocity \"vz\", air pressure \"p\" and air temperature \"ta\"). In the air energy equation, associated to the variable \"ta\", I have a convective term of the form\nh ( ta - ts_wall_mean)        with     ts_wall_mean = (1/2pi) integrate (theta=0->2pi) ts dtheta\nso I declared \"ts\" inside the pipe 1D elements. My problem is to implement the constraint between \"ts\" in the pipe 1D elements and its counterpart in the soil 3D elements so that \"ts\" in the pipe is the mean value of \"ts\" around the wall soil boundary. I had a look at LinearNodalConstraint but I am not able to get the nodes id of the pipe wall/soil efficiently.\nI successfully merged the soil mesh (from gmsh) and the pipe mesh (from gmsh too) since Moose does not read 1D elements for 3D meshes.\nDoes anyone can provide me some hint ?",
          "url": "https://github.com/idaholab/moose/discussions/23441",
          "updatedAt": "2023-06-24T19:45:45Z",
          "publishedAt": "2023-02-16T10:12:11Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Hello\nI think the best option here will be to look at thermal contact options. I m less familiar with them unfortunately.\nWithout this, or if it doesnt pan out, I would get started with an approach that does not properly compute the Jacobian, and solve with PJFNK, just to get started.\nTo do that, I would use:\n\na nearestpointlayeredaverage to get axial averages in the 2D wall of the temperature\na linevaluesampler (or again a layered average) to get the 1D values in the pipe\nThen\nYou can make simple kernels restricted to the relevant elements implementing the convection equation\na regular kernel for the 1D pipe. The nearestpointlayeredaverage will be an input and can return the axially dependent profile\nan interface kernel for the 2D elements. You ll have to add additional logic to axially map the linevaluesampler, but a layeredaverage should be able to return the direct value of the pipe temperature.\n\nif this works, great.\nIf not then we need to consider the Jacobian entries. For this you will need to get the node ids (if they are nodal variables) or generally the dof ids. You ll need to build a user object that examines the mesh and finds the nodes and elements involved in the heat transfer and properly axially indexes them.\nThen some constraint will take that list.\nOther idea, easier to get started:\ninstead of a 1D pipe, just make a big 3D pipe, have it part of the 3D mesh and use interface kernels for convection between Ts and Tf\nYou can still have 1D flow, you ll just have a radial temperature profile in the pipe.\nGuillaume",
                  "url": "https://github.com/idaholab/moose/discussions/23441#discussioncomment-4997188",
                  "updatedAt": "2023-02-16T14:42:11Z",
                  "publishedAt": "2023-02-16T14:42:10Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Vincent-IUTRS-EOST"
                  },
                  "bodyText": "Dear Guillaume,\nThank you for your answer.  I tested a solution close to your first suggestion:\n[Variables]\n  [ts]\n    family = LAGRANGE\n    order  = FIRST\n    block  = \"SOIL\"\n  []\n[]\n\n[AuxVariables]\n    [ts_wall]\n      family = LAGRANGE\n      order  = FIRST\n      block  = \"SOIL\"\n    []\n    [ts_pipe]\n      family = LAGRANGE\n      order  = FIRST\n      block  = \"PIPE\"\n    []\n  []\n\n...... materials and kernels.......\n\n[UserObjects]\n  [./ts_wall_uo]\n    type = LayeredSideAverage\n    direction = z\n    num_layers = 10\n    variable = ts\n    execute_on = 'ALWAYS'\n    boundary = WALL\n  [../]\n[]\n\n[AuxKernels]\n  [./ts_wall_aux]\n    type = SpatialUserObjectAux\n    variable = ts_wall\n    boundary = WALL\n    user_object = ts_wall_uo\n    execute_on = 'ALWAYS'\n  [../]\n  [./ts_pipe]\n    type = NearestNodeValueAux\n    paired_boundary = \"WALL\"\n    paired_variable = ts_wall\n    variable = ts_pipe\n    execute_on = 'ALWAYS'\n    boundary = \"PIPE\"\n  [../]\n[]\n\n[VectorPostprocessors]\n  [avg]\n    type = SpatialUserObjectVectorPostprocessor\n    userobject = ts_wall_uo\n  []\n[]\n\nIf the NearestNodeValueAux kernel is commented I correctly get the mean value of ts on the wall, but when I decomment this NearestNodeValueAux, I get the following error\n*** ERROR ***\n/home/vmagnenet/Projets_Moose/eahe/run/eahe.i:363: (AuxKernels/ts_pipe/boundary):\n    the following node sets (ids) do not exist on the mesh: PIPE (8)\n\nbecause \"PIPE\" is not a boundary.....  I had a look at  thermal contact but it seems also defined only for surfaces boundaries.\nYour second idea (3D pipe) was my first idea ;-) , but I want to use classic fluid correlations for 1D flow in pipes (simplified heat equation with experimental correlations for head loss, convection versus Nusselt and Reynolds etc....) . I keep this solution in mind if the \"good\" previous approach fails.\nIs there any way of creating a nodeset associated to the block of EDGE2 elements of \"PIPE\" ?",
                  "url": "https://github.com/idaholab/moose/discussions/23441#discussioncomment-4997589",
                  "updatedAt": "2023-02-16T15:14:45Z",
                  "publishedAt": "2023-02-16T15:14:44Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "In 1)\nYou are using an auxiliary variable to store the output of the layered average. You dont need to do this, you can query those values directly in your kernel.\nIf you want to use an auxiliary variable use a block instead of a boundary restriction. Your mesh is not a boundary for the pipe, it s a block\nI m afraid the EDGE2 pipe is currently a block and there is no lower dimensional boundary to create from it within MOOSE\nYou would have to redo your mesh to make a nodeset as well as a block (to solve equations)",
                          "url": "https://github.com/idaholab/moose/discussions/23441#discussioncomment-4998773",
                          "updatedAt": "2023-02-16T17:04:56Z",
                          "publishedAt": "2023-02-16T17:04:55Z",
                          "isAnswer": true
                        }
                      }
                    ]
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "Vincent-IUTRS-EOST"
                  },
                  "bodyText": "Dear Guillaume,\nAfter a long night making nightmares about MOOSE ;-) I finally found an easy way to get the model work. The air flow is solved in a small layer (called PIPE) and meshed with 3D elements and just near the soil interface (see figure below). To account for the convective term, I developed a small Kernel accounting for the width of the interface (I don't know if this kind of kernel already exists but I prefer having my own one):\nReal\nEAHE_Interface_Convective_Term::computeQpResidual()\n{\n  return -_hwall[_qp]*(_u[_qp]-_u_ext[_qp])*_test[_i][_qp]/_width[_qp];\n}\n\nReal\nEAHE_Interface_Convective_Term::computeQpJacobian()\n{\n  return -_hwall[_qp]*_phi[_j][_qp]*_test[_i][_qp]/_width[_qp];\n}\n\nReal EAHE_Interface_Convective_Term::computeQpOffDiagJacobian(unsigned int jvar)\n{\n  Real jac=0.0;\n  if(jvar==_u_ext_id)\n    jac = +_hwall[_qp]*_u_ext_phi[_j][_qp]*_test[_i][_qp]/_width[_qp];\n  return jac;\n}\n\nI ran this kernel for ts and ta :\n[Kernels]\n\n  ...... some kernels solving ts and ta except convective term\n\n  # note that the diffusion of ts must be solved in the PIPE !\n\n  [soil_interface_with_air] \n    type                 = EAHE_Interface_Convective_Term\n    variable             = ts\n    exterior_temperature = ta\n    block                = \"PIPE\"\n  []\n\n  [air_interface_with_soil]\n    type                 = EAHE_Interface_Convective_Term\n    variable             = ta\n    exterior_temperature = ts_mean_pipe\n    block                = \"PIPE\"\n  []\n\n[]\n\nwhere \"ts_mean_pipe\" is an auxvariable calculated as the mean value of \"ts\" in PIPE (integrating in theta and r only) calculated with a \"NearestRadiusLayeredAverage\" user object coupled to a \"SpatialUserObjectAux\" auxkernel.\nThe results were OK. There is no problem to add some new kernels solving the 1D flowing for the air pressure and air velocity in PIPE by using some kernel having a residue of the form:\ntime_term*test_i   +  1D_vector_flow * _grad_test[_i][_qp](2)\nsince 2 (=Z) is the direction of the air flow (may be generalized by passing a flow direction vector as argument of the kernel). The thin width of the interface ensures no r dependence.\nWell, I would like to thank you for all your answers, the forum keeps alive because cool developers spend some time answering newbies.\nBest regards.",
                  "url": "https://github.com/idaholab/moose/discussions/23441#discussioncomment-5010832",
                  "updatedAt": "2023-02-17T14:16:08Z",
                  "publishedAt": "2023-02-17T14:16:06Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "tensor_mechanics_J2plasticity",
          "author": {
            "login": "rh201"
          },
          "bodyText": "Hi MOOSEers,\nI'm trying to do benchmark with tensor_mechanics_J2plasticity based on  [modules/tensor_mechanics/test/tests/j2_plasticity/tensor_mechanics_j2plasticity.i](url). A monolithic tensile loading is applied on one surface of the cubic element, but when I check the load-displacement curve, the force does not keep increasing, instead, it decreases and shows softening after the peak load.  I also tried with [IsotropicPlasticityStressUpdate] and [ComputeMultipleInelasticStress], and the results are similar, which is confusing. Are these results correct?  Thanks.",
          "url": "https://github.com/idaholab/moose/discussions/23426",
          "updatedAt": "2023-02-27T08:32:27Z",
          "publishedAt": "2023-02-14T19:36:55Z",
          "category": {
            "name": "Q&A Modules: Solid mechanics"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "rh201"
                  },
                  "bodyText": "I'm using the input file as below, with [IsotropicPlasticityStressUpdate] and [ComputeMultipleInelasticStress] for plasticity. When the external loading is relatively small, the load-displacement curve looks good, with the bi-linear region for elasticity and linear hardening, respectively. But when the loading further increases, the curve behaves wired: the hardening region becomes curved, and further the curve goes down. How to explain this? Thanks.\n`[GlobalParams]\ndisplacements = 'disp_x disp_y disp_z'\n[]\n[Mesh]\n[generated_mesh]\ntype = GeneratedMeshGenerator\nelem_type = HEX8\ndim = 3\nnx = 1\nny = 1\nnz = 1\nxmin = 0.0\nxmax = 1.0\nymin = 0.0\nymax = 1.0\nzmin = 0.0\nzmax = 1.0\n[]\n[cnode]\ntype = ExtraNodesetGenerator\ncoord = '0.0 0.0 0.0'\nnew_boundary = corner_point1\ninput = generated_mesh\n[]\n[snode]\ntype = ExtraNodesetGenerator\ncoord = '1.0 0.0 0.0'\nnew_boundary = corner_point2\ninput = cnode\n[]\n[]\n[Variables]\n[disp_x]\norder = FIRST\nfamily = LAGRANGE\n[]\n[disp_y]\norder = FIRST\nfamily = LAGRANGE\n[]\n[disp_z]\norder = FIRST\nfamily = LAGRANGE\n[]\n[]\n[AuxVariables]\n[fx]\n[]\n[fy]\n[]\n[fz]\n[]\n[]\n[Kernels]\n[./TensorMechanics]\ndisplacements = 'disp_x disp_y disp_z'\nuse_displaced_mesh = true\nuse_automatic_differentiation = true\nsave_in = 'fx fy fz'\n[../]\n[]\n[BCs]\n[ydisp]\ntype = FunctionDirichletBC\nvariable = disp_y\nboundary = top\nfunction = 't'\n[]\n[yfix]\ntype = DirichletBC\nvariable = disp_y\nboundary = bottom\nvalue = 0\n[]\n[./corner1_x]\ntype = DirichletBC\nvariable = disp_x\nboundary = corner_point1\nvalue = 0.0\n[../]\n[./corner1_y]\ntype = DirichletBC\nvariable = disp_y\nboundary = corner_point1\nvalue = 0.0\n[../]\n[./corner1_z]\ntype = DirichletBC\nvariable = disp_z\nboundary = corner_point1\nvalue = 0.0\n[../]\n[./corner2_y]\ntype = DirichletBC\nvariable = disp_y\nboundary = corner_point2\nvalue = 0.0\n[../]\n[./corner2_z]\ntype = DirichletBC\nvariable = disp_z\nboundary = corner_point2\nvalue = 0.0\n[../]\n[]\n[Materials]\n[strain]\ntype = ADComputeFiniteStrain  #ComputeSmallStrain\n[]\n[elasticity_tensor]\ntype = ADComputeIsotropicElasticityTensor\nyoungs_modulus = 68.8e3\npoissons_ratio = 0.33\n[]\n[./isotropic_plasticity]\ntype = ADIsotropicPlasticityStressUpdate\nyield_stress = 320\nhardening_constant = 650\nrelative_tolerance = 1e-8\nabsolute_tolerance = 1e-11\nmax_inelastic_increment = 0.0001\n[../]\n[./radial_return_stress]\ntype = ADComputeMultipleInelasticStress\n# tangent_operator = elastic\ninelastic_models = 'isotropic_plasticity'\n[../]\n[]\n[Postprocessors]\n[fx]\ntype = NodalSum\nvariable = fx\nboundary = top\n[]\n[fy]\ntype = NodalSum\nvariable = fy\nboundary = top\n[]\n[fz]\ntype = NodalSum\nvariable = fz\nboundary = top\n[]\n[]\n[Executioner]\ntype = Transient\nsolve_type = PJFNK\npetsc_options_iname = '-pc_type'\npetsc_options_value = 'lu'\ndt=0.001\ndtmax=0.1\ndtmin=0.001\nend_time=10.0\nnl_abs_tol = 1e-10\n[]\n[Outputs]\nexodus = true\nprint_linear_residuals = false\n[csv]\ntype = CSV\ndelimiter = ' '\nfile_base = 'f'\n[]\n[]\n`",
                  "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4986556",
                  "updatedAt": "2023-02-15T18:19:22Z",
                  "publishedAt": "2023-02-15T18:19:21Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": []
                  }
                }
              },
              {
                "node": {
                  "author": {
                    "login": "hugary1995"
                  },
                  "bodyText": "The load-displacement curve would be equivalent to an engineering stress-engineering strain relation. You'll want to plot true stress vs the logorithmic strain.",
                  "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4986758",
                  "updatedAt": "2023-02-15T18:41:53Z",
                  "publishedAt": "2023-02-15T18:41:52Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thanks  @hugary1995 . How to plot the true stress-logorithmic strain curve for this case?",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4993998",
                          "updatedAt": "2023-02-16T09:22:14Z",
                          "publishedAt": "2023-02-16T09:22:13Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I setup the input file (see below at the end) for you. Take a look at the postprocessors, they should be self-explanatory. The stress-strain curves are shown below.\n\n\n  input file\n[GlobalParams]\n  displacements = 'disp_x disp_y disp_z'\n[]\n[Mesh]\n  [generated_mesh]\n    type = GeneratedMeshGenerator\n    elem_type = HEX8\n    dim = 3\n    nx = 1\n    ny = 1\n    nz = 1\n    xmin = 0.0\n    xmax = 1.0\n    ymin = 0.0\n    ymax = 1.0\n    zmin = 0.0\n    zmax = 1.0\n  []\n[]\n[Variables]\n  [disp_x]\n  []\n  [disp_y]\n  []\n  [disp_z]\n  []\n[]\n[AuxVariables]\n  [fx]\n  []\n  [fy]\n  []\n  [fz]\n  []\n[]\n[Kernels]\n  [TensorMechanics]\n    displacements = 'disp_x disp_y disp_z'\n    use_displaced_mesh = true\n    use_automatic_differentiation = true\n    save_in = 'fx fy fz'\n  []\n[]\n[BCs]\n  [xfix]\n    type = DirichletBC\n    variable = disp_x\n    value = 0\n    boundary = left\n  []\n  [yfix]\n    type = DirichletBC\n    variable = disp_y\n    value = 0\n    boundary = bottom\n  []\n  [zfix]\n    type = DirichletBC\n    variable = disp_z\n    value = 0\n    boundary = back\n  []\n  [pull]\n    type = FunctionDirichletBC\n    variable = disp_z\n    function = t\n    boundary = front\n  []\n[]\n[Materials]\n  [strain]\n    type = ADComputeFiniteStrain\n  []\n  [elasticity_tensor]\n    type = ADComputeIsotropicElasticityTensor\n    youngs_modulus = 68.8e3\n    poissons_ratio = 0.33\n  []\n  [isotropic_plasticity]\n    type = ADIsotropicPlasticityStressUpdate\n    yield_stress = 320\n    hardening_constant = 650\n    relative_tolerance = 1e-8\n    absolute_tolerance = 1e-11\n    max_inelastic_increment = 0.0001\n  []\n  [radial_return_stress]\n    type = ADComputeMultipleInelasticStress\n    inelastic_models = 'isotropic_plasticity'\n  []\n[]\n[Postprocessors]\n  [F]\n    type = NodalSum\n    variable = fz\n    boundary = front\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [A0]\n    type = AreaPostprocessor\n    boundary = front\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [A]\n    type = AreaPostprocessor\n    boundary = front\n    use_displaced_mesh = true\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [engineering_stress]\n    type = ParsedPostprocessor\n    function = 'F/A0'\n    pp_names = 'F A0'\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [true_stress]\n    type = ParsedPostprocessor\n    function = 'F/A'\n    pp_names = 'F A'\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [engineering_strain]\n    type = FunctionValuePostprocessor\n    function = 't'\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n  [log_strain]\n    type = FunctionValuePostprocessor\n    function = 'log(1+t)'\n    execute_on = 'INITIAL TIMESTEP_END'\n  []\n[]\n[Executioner]\n  type = Transient\n  solve_type = NEWTON\n  petsc_options_iname = '-pc_type'\n  petsc_options_value = 'lu'\n  automatic_scaling = true\n  line_search = none\n  dt = 0.005\n  end_time = 2\n  nl_rel_tol = 1e-08\n  nl_abs_tol = 1e-10\n[]\n[Outputs]\n  exodus = true\n  csv = true\n[]",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4996414",
                          "updatedAt": "2023-02-16T13:34:28Z",
                          "publishedAt": "2023-02-16T13:34:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "As a quick sanity check: for the linear hardening law\ntrue stress = yield stress + hardening modulus * log plastic strain\nWhen strain is large, most portion of the total strain is plastic, hence\ntrue stress ~= yield stress + hardening modulus * log total strain\nSo the true stress @ log total strain = 1 is\nF/A ~= 320 + 650 * 1 = 970 MPa\nThe true stress we get numerically @ log strain = 1 is approximately 960 MPa.",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4996458",
                          "updatedAt": "2023-02-16T13:40:10Z",
                          "publishedAt": "2023-02-16T13:40:10Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thanks!",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-4997480",
                          "updatedAt": "2023-02-16T15:05:59Z",
                          "publishedAt": "2023-02-16T15:05:59Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "@hugary1995  I used the input file you provided and got the data (below) for log strain and true stress, but the curve plotted out of it is still not a straight line, maybe I took something wrong, can you help me have a quick check? Thanks.\ninput_out.csv",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-5000127",
                          "updatedAt": "2023-02-16T19:41:30Z",
                          "publishedAt": "2023-02-16T19:41:29Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "This csv is identical to mine, which is what I used to generate the above figure.",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-5000578",
                          "updatedAt": "2023-02-16T20:40:12Z",
                          "publishedAt": "2023-02-16T20:40:12Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "rh201"
                          },
                          "bodyText": "Thank you ! @hugary1995",
                          "url": "https://github.com/idaholab/moose/discussions/23426#discussioncomment-5008004",
                          "updatedAt": "2023-02-17T09:31:47Z",
                          "publishedAt": "2023-02-17T09:31:47Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "Variable_output vs. Material_output",
          "author": {
            "login": "Joseph-0123"
          },
          "bodyText": "Dear all,\nI get an unstable variable result as shown below. In addition, I also define a new property in the material which is equal to this variable.\nHowever, when I plot them together, I find they have quite different behavior. But essentially they should be the same. What is the reason for this? Dear @GiudGiud, do you have any idea?\nJ",
          "url": "https://github.com/idaholab/moose/discussions/23452",
          "updatedAt": "2023-02-17T02:06:36Z",
          "publishedAt": "2023-02-17T00:25:10Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "Conversion from variable to material involves a projection. I think most likely a const monomial though you should double check\nThis will smooth things out at output",
                  "url": "https://github.com/idaholab/moose/discussions/23452#discussioncomment-5002925",
                  "updatedAt": "2023-02-17T00:27:13Z",
                  "publishedAt": "2023-02-17T00:27:12Z",
                  "isAnswer": true,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "either that or something is off for variable output but it's well tested at this point",
                          "url": "https://github.com/idaholab/moose/discussions/23452#discussioncomment-5002928",
                          "updatedAt": "2023-02-17T00:27:45Z",
                          "publishedAt": "2023-02-17T00:27:45Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "Joseph-0123"
                          },
                          "bodyText": "Thanks for your help.",
                          "url": "https://github.com/idaholab/moose/discussions/23452#discussioncomment-5003454",
                          "updatedAt": "2023-02-17T02:06:37Z",
                          "publishedAt": "2023-02-17T02:06:36Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      {
        "node": {
          "title": "how to set a function that is not use on params(not x, y, z and t)",
          "author": {
            "login": "wangzhaohao"
          },
          "bodyText": "I meet a problem which i want to use variables(a, b, c) as a paramters of function. I find there only like this code\nfunction_name->value(a);\n// or\nfunction.value(_t,  _q_point[_qp]);\nwhen i want to set like this\nfunction_name->value(a,b,c)\n// or \nfunction_name .value(a,b,c)// this is wrong  obviously\nmake is fail\nwhat should i do?",
          "url": "https://github.com/idaholab/moose/discussions/23444",
          "updatedAt": "2023-06-24T19:41:33Z",
          "publishedAt": "2023-02-16T15:27:27Z",
          "category": {
            "name": "Q&A General"
          },
          "comments": {
            "edges": [
              {
                "node": {
                  "author": {
                    "login": "GiudGiud"
                  },
                  "bodyText": "You should could do something like:\nfunction.value(_t,  Point(a, b, c);\nHowever, when you define the function, you have to be mindful of what depends on t, and the Point, which is essentially represented by x, y, z\nYou ll need to be defining a quadri-dimensional function (or just use a ParsedFunction of x,y,z)",
                  "url": "https://github.com/idaholab/moose/discussions/23444#discussioncomment-4998296",
                  "updatedAt": "2023-02-16T22:55:55Z",
                  "publishedAt": "2023-02-16T16:16:02Z",
                  "isAnswer": false,
                  "replies": {
                    "edges": [
                      {
                        "node": {
                          "author": {
                            "login": "YaqiWang"
                          },
                          "bodyText": "Or you can create a user object that provides this function. If a, b, c are moose variables, you can couple them in the user object.",
                          "url": "https://github.com/idaholab/moose/discussions/23444#discussioncomment-4999941",
                          "updatedAt": "2023-02-16T19:18:26Z",
                          "publishedAt": "2023-02-16T19:18:25Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "hugary1995"
                          },
                          "bodyText": "I agree with Yaqi. If your function has a fixed signature, just write an object for it. Depending on your specific need, it may be a user object, a material, a postprocessor, an aux kernel, etc. -- the flexibility here is the charm of MOOSE.",
                          "url": "https://github.com/idaholab/moose/discussions/23444#discussioncomment-5001376",
                          "updatedAt": "2023-02-16T22:24:27Z",
                          "publishedAt": "2023-02-16T22:24:27Z",
                          "isAnswer": false
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "GiudGiud"
                          },
                          "bodyText": "Yeah even for a simple expression like 'a + b + c', using a material property like a ParsedMaterial is a better idea.\nIf you are using AD, you must avoid using a function too unless you take care to call the ad routines on that function.\nIt is easier to just use material properties",
                          "url": "https://github.com/idaholab/moose/discussions/23444#discussioncomment-5001576",
                          "updatedAt": "2023-02-16T22:56:59Z",
                          "publishedAt": "2023-02-16T22:56:58Z",
                          "isAnswer": true
                        }
                      },
                      {
                        "node": {
                          "author": {
                            "login": "wangzhaohao"
                          },
                          "bodyText": "Thanks all! i will try to use userobject.",
                          "url": "https://github.com/idaholab/moose/discussions/23444#discussioncomment-5001641",
                          "updatedAt": "2023-02-16T23:08:36Z",
                          "publishedAt": "2023-02-16T23:08:35Z",
                          "isAnswer": false
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}